// Made with Amplify Shader Editor v1.9.7.2
// Available at the Unity Asset Store - http://u3d.as/y3X 
Shader "BOXOPHOBIC/The Visual Engine/Geometry/General Subsurface Lit"
{
	Properties
	{
		[HideInInspector] _AlphaCutoff("Alpha Cutoff ", Range(0, 1)) = 0.5
		[HideInInspector]_motion_highlight_color("_motion_highlight_color", Vector) = (0,0,0,0)
		[HideInInspector]_IsVersion("_IsVersion", Float) = 2050
		[HideInInspector]_IsTVEShader("_IsTVEShader", Float) = 1
		[HideInInspector]_IsShared("_IsShared", Float) = 0
		[HideInInspector]_IsIdentifier("_IsIdentifier", Float) = 0
		[HideInInspector]_IsCollected("_IsCollected", Float) = 0
		[HideInInspector]_IsConverted("_IsConverted", Float) = 0
		[HideInInspector]_IsCustomShader("_IsCustomShader", Float) = 0
		[HideInInspector]_HasDefaultTextures("_HasDefaultTextures", Float) = 0
		[HideInInspector]_MainTex("Legacy MainTex", 2D) = "white" {}
		[HideInInspector]_BumpMap("Legacy BumpMap", 2D) = "white" {}
		[HideInInspector]_Cutoff("Legacy Cutoff", Float) = 0.5
		[HideInInspector]_Color("Legacy Color", Color) = (0,0,0,0)
		[StyledCategory(Render Settings, true, 0, 10)]_RenderCategory("[ Render Category ]", Float) = 1
		[Enum(Opaque,0,Transparent,1)]_RenderMode("Render Mode", Float) = 0
		[Enum(Off,0,On,1)]_RenderZWrite("Render ZWrite", Float) = 1
		[Enum(Both,0,Back,1,Front,2)]_RenderCull("Render Faces", Float) = 2
		[HideInInspector]_render_normal("_render_normal", Vector) = (1,1,1,0)
		[HideInInspector]_RenderQueue("Render Queue", Float) = 0
		[HideInInspector]_RenderPriority("Render Priority", Float) = 0
		[HideInInspector]_RenderBakeGI("Render BakeGI", Float) = 0
		[Enum(Off,0,On,1)]_RenderSSR("Render SSR", Float) = 0
		[Enum(Off,0,On,1)]_RenderDecals("Render Decals", Float) = 0
		[Enum(Auto,0,Off,1,On,2)]_RenderMotion("Render Motion", Float) = 0
		[Enum(Flip,0,Mirror,1,Same,2)]_RenderNormal("Render Normals", Float) = 0
		[Enum(Off,0,On,1)]_RenderShadow("Render Shadows", Float) = 1
		[Enum(Default,0,Point ,1,Low,2,Medium,3,High,4)]_RenderFilter("Render Filtering", Float) = 0
		[Enum(Off,0,On,1)]_RenderClip("Render Clipping", Float) = 0
		[StyledSpace(10)]_RenderEnd("[ Render End ]", Float) = 1
		[StyledCategory(Noise Settings, true, 0, 10)]_NoiseCategory("[ Noise Category ]", Float) = 1
		[NoScaleOffset][StyledTextureSingleLine]_NoiseTex3D("Noise Mask 3D", 3D) = "white" {}
		[NoScaleOffset][StyledTextureSingleLine]_NoiseTexSS("Noise Mask SS", 2D) = "white" {}
		[StyledSpace(10)]_NoiseEnd("[ Noise End ]", Float) = 1
		[StyledCategory(Object Settings, true, 0, 10)]_ObjectCategory("[ Object Category ]", Float) = 1
		[StyledMessage(Info, Use the Object Height and Radius to remap the procedural height and spherical masks when used for motion., 0, 10)]_ObjectBoundsInfo("# ObjectBoundsInfo", Float) = 0
		[Enum(Legacy,0,Standard,1)]_ObjectModelMode("Object Model Mode", Float) = 1
		[Enum(Off,0,Baked,1,Procedural,2)]_ObjectPivotMode("Object Pivots Mode", Float) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ObjectPhaseMode("Object Phase Mask", Float) = 0
		_ObjectHeightValue("Object Height Value", Range( 0 , 40)) = 1
		_ObjectRadiusValue("Object Radius Value", Range( 0 , 40)) = 1
		[HideInInspector]_object_phase_mode("_object_phase_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_ObjectEnd("[ Object End ]", Float) = 1
		[StyledCategory(Global Settings, true, 0, 10)]_GlobalCategory("[ Global Category ]", Float) = 1
		[StyledMessage(Info, Use the Pivots sliders to control if the global texture is sampled in world space or at pivot position or pivots positions when baked pivots are used., 0, 10)]_GlobalPivotInfo("# GlobalPivotInfo", Float) = 0
		[StyledEnum(Coat Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalCoatLayerValue("Global Coat Layer", Float) = 0
		[StyledEnum(Paint Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalPaintLayerValue("Global Paint Layer", Float) = 0
		[StyledEnum(Atmo Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalAtmoLayerValue("Global Atmo Layer", Float) = 0
		[StyledEnum(Fade Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalFadeLayerValue("Global Fade Layer", Float) = 0
		[StyledEnum(Glow Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalGlowLayerValue("Global Glow Layer", Float) = 0
		[StyledEnum(Form Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalFormLayerValue("Global Form Layer", Float) = 0
		[StyledEnum(Flow Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalFlowLayerValue("Global Flow Layer", Float) = 0
		_GlobalCoatPivotValue("Global Coat Pivots", Range( 0 , 1)) = 0
		_GlobalPaintPivotValue("Global Paint Pivots", Range( 0 , 1)) = 0
		_GlobalAtmoPivotValue("Global Atmo Pivots", Range( 0 , 1)) = 0
		_GlobalFadePivotValue("Global Fade Pivots", Range( 0 , 1)) = 0
		_GlobalGlowPivotValue("Global Glow Pivots", Range( 0 , 1)) = 0
		_GlobalFormPivotValue("Global Form Pivots", Range( 0 , 1)) = 1
		_GlobalFlowPivotValue("Global Flow Pivots", Range( 0 , 1)) = 1
		[StyledSpace(10)]_GlobalEnd("[ Global End ]", Float) = 1
		[StyledCategory(Main Settings, true, 0, 10)]_MainCategory("[Main Category ]", Float) = 1
		[StyledMessage(Info, Use the Multi Mask remap sliders to mask out the leaves when using Dual Colors or for Global Effects. The mask is stored in the Shader texture blue channel. , 0, 10)]_MainMultiMaskInfo("# MainMultiMaskInfo", Float) = 0
		[StyledTextureSingleLine]_MainAlbedoTex("Main Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_MainNormalTex("Main Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_MainShaderTex("Main Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_MainSampleMode("Main Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_MainCoordMode("Main UV Mode", Float) = 0
		[StyledVector(9)]_MainCoordValue("Main UV Value", Vector) = (1,1,0,0)
		[HideInInspector]_main_coord_value("_main_coord_value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_MainColorMode("Main Color", Float) = 0
		[HDR]_MainColor("Main Color", Color) = (1,1,1,1)
		[HDR]_MainColorTwo("Main ColorB", Color) = (1,1,1,1)
		_MainAlphaClipValue("Main Alpha", Range( 0 , 1)) = 0.5
		_MainAlbedoValue("Main Albedo", Range( 0 , 1)) = 1
		_MainNormalValue("Main Normal", Range( -8 , 8)) = 1
		_MainMetallicValue("Main Metallic", Range( 0 , 1)) = 0
		_MainOcclusionValue("Main Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_MainMultiRemap("Main Multi Mask", Vector) = (0,0,0,0)
		_MainSmoothnessValue("Main Smoothness", Range( 0 , 1)) = 0
		[StyledSpace(10)]_MainEnd("[Main End ]", Float) = 1
		[StyledCategory(Layer Settings, true, 0, 10)]_LayerCategory("[ Layer Category ]", Float) = 1
		_SecondIntensityValue("Layer Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_SecondBakeMode("Layer Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_SecondAlbedoTex("Layer Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_SecondNormalTex("Layer Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_SecondShaderTex("Layer Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_SecondSampleMode("Layer Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondCoordMode("Layer UV Mode", Float) = 0
		[StyledVector(9)]_SecondCoordValue("Layer UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_SecondColorMode("Layer Color", Float) = 0
		[HDR]_SecondColor("Layer Color", Color) = (1,1,1,1)
		[HDR]_SecondColorTwo("Layer ColorB", Color) = (1,1,1,1)
		_SecondAlphaClipValue("Layer Alpha", Range( 0 , 1)) = 0.5
		_SecondAlbedoValue("Layer Albedo", Range( 0 , 1)) = 1
		_SecondNormalValue("Layer Normal", Range( -8 , 8)) = 1
		_SecondMetallicValue("Layer Metallic", Range( 0 , 1)) = 0
		_SecondOcclusionValue("Layer Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondMultiRemap("Layer Multi Mask", Vector) = (0,0,0,0)
		_SecondSmoothnessValue("Layer Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_SecondBlendIntensityValue("Layer Blend Intensity", Range( 0 , 1)) = 1
		_SecondBlendAlbedoValue("Layer Blend Albedos", Range( 0 , 1)) = 0
		_SecondBlendNormalValue("Layer Blend Normals", Range( 0 , 1)) = 0
		_SecondBlendShaderValue("Layer Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_SecondMaskTex("Layer Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_SecondMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_SecondMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_SecondGlobalValue("Layer Coat Mask", Range( 0 , 1)) = 1
		_SecondMaskValue("Layer TexB Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_SecondMaskRemap("Layer TexB Mask", Vector) = (0,1,0,0)
		_SecondLumaValue("Layer Luma Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondLumaRemap("Layer Luma Mask", Vector) = (0,1,0,0)
		_SecondProjValue("Layer ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondProjRemap("Layer ProjY Mask", Vector) = (0,1,0,0)
		_SecondMeshValue("Layer Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_SecondMeshMode("Layer Mesh Mask", Float) = 2
		[StyledRemapSlider]_SecondMeshRemap("Layer Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_SecondBlendRemap("Layer Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_SecondElementMode("Use Coat Elements", Float) = 0
		[StyledSpace(10)]_LayerEnd("[ Layer End ]", Float) = 1
		[HideInInspector]_second_coord_value("_second_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_second_vert_mode("_second_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_second_mask_coord_value("_second_mask_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Detail Settings, true, 0, 10)]_DetailCategory("[ Detail Category ]", Float) = 1
		_ThirdIntensityValue("Detail Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_ThirdBakeMode("Detail Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_ThirdAlbedoTex("Detail Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_ThirdNormalTex("Detail Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_ThirdShaderTex("Detail Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_ThirdSampleMode("Detail Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdCoordMode("Detail UV Mode", Float) = 0
		[StyledVector(9)]_ThirdCoordValue("Detail UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_ThirdColorMode("Detail Color", Float) = 0
		[HDR]_ThirdColor("Detail Color", Color) = (1,1,1,1)
		[HDR]_ThirdColorTwo("Detail ColorB", Color) = (1,1,1,1)
		_ThirdAlphaClipValue("Detail Alpha", Range( 0 , 1)) = 0.5
		_ThirdAlbedoValue("Detail Albedo", Range( 0 , 1)) = 1
		_ThirdNormalValue("Detail Normal", Range( -8 , 8)) = 1
		_ThirdMetallicValue("Detail Metallic", Range( 0 , 1)) = 0
		_ThirdOcclusionValue("Detail Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdMultiRemap("Detail Multi Mask", Vector) = (0,0,0,0)
		_ThirdSmoothnessValue("Detail Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_ThirdBlendIntensityValue("Detail Blend Intensity", Range( 0 , 1)) = 1
		_ThirdBlendAlbedoValue("Detail Blend Albedos", Range( 0 , 1)) = 0
		_ThirdBlendNormalValue("Detail Blend Normals", Range( 0 , 1)) = 0
		_ThirdBlendShaderValue("Detail Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_ThirdMaskTex("Detail Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_ThirdMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_ThirdMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_ThirdGlobalValue("Detail Coat Mask", Range( 0 , 1)) = 1
		_ThirdMaskValue("Detail TexG Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_ThirdMaskRemap("Detail TexG Mask", Vector) = (0,1,0,0)
		_ThirdLumaValue("Detail Luma Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdLumaRemap("Detail Luma Mask", Vector) = (0,1,0,0)
		_ThirdProjValue("Detail ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdProjRemap("Detail ProjY Mask", Vector) = (0,1,0,0)
		_ThirdMeshValue("Detail Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ThirdMeshMode("Detail Mesh Mask", Float) = 1
		[StyledRemapSlider]_ThirdMeshRemap("Detail Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_ThirdBlendRemap("Detail Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_ThirdElementMode("Use Coat Elements", Float) = 0
		[HideInInspector]_third_coord_value("_third_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_third_vert_mode("_third_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_third_mask_coord_value("_third_mask_coord_value", Vector) = (1,1,0,0)
		[StyledSpace(10)]_DetailEnd("[ Detail End ]", Float) = 1
		[StyledCategory(Occlusion Settings, true, 0, 10)]_OcclusionCategory("[ Occlusion Category ]", Float) = 1
		_OcclusionIntensityValue("Occlusion Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_OcclusionBakeMode("Occlusion Baking", Float) = 1
		[HDR]_OcclusionColorOne("Occlusion ColorA", Color) = (1,1,1,1)
		[HDR]_OcclusionColorTwo("Occlusion ColorB", Color) = (0.25,0.25,0.25,1)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)][Space(10)]_OcclusionMeshMode("Occlusion Mesh Mask", Float) = 1
		[StyledRemapSlider]_OcclusionMeshRemap("Occlusion Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_OcclusionEnd("[ Occlusion End ]", Float) = 1
		[HideInInspector]_occlusion_vert_mode("_occlusion_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Gradient Settings, true, 0, 10)]_GradientCategory("[ Gradient Category ]", Float) = 1
		_GradientIntensityValue("Gradient Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_GradientBakeMode("Gradient Baking", Float) = 1
		[HDR]_GradientColorOne("Gradient ColorA", Color) = (1,0.6135602,0,1)
		[HDR]_GradientColorTwo("Gradient ColorB", Color) = (0.754717,0.0389044,0.03203986,1)
		[Space(10)]_GradientMultiValue("Gradient Multi Mask", Range( 0 , 1)) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_GradientMeshMode("Gradient Mesh Mask", Float) = 3
		[StyledRemapSlider]_GradientMeshRemap("Gradient Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_GradientEnd("[ Gradient End ]", Float) = 1
		[HideInInspector]_gradient_vert_mode("_gradient_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Variation Settings, true, 0, 10)]_VariationCategory("[ Variation Category ]", Float) = 1
		_VariationIntensityValue("Variation Intensity", Range( 0 , 1)) = 0
		[HDR]_VariationColorOne("Variation ColorA", Color) = (0.4573758,0.6226415,0.2144001,1)
		[HDR]_VariationColorTwo("Variation ColorB", Color) = (0.7450981,0.5238863,0.1098039,1)
		[Space(10)]_VariationMultiValue("Variation Multi Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider()]_VariationNoiseRemap("Variation Noise Mask", Vector) = (0,1,0,0)
		_VariationNoiseTillingValue("Variation Noise Tilling", Range( 0 , 100)) = 10
		_VariationNoisePivotValue("Variation Noise Pivots", Range( 0 , 1)) = 0
		[StyledSpace(10)]_VariationEnd("[ Variation End ]", Float) = 1
		[StyledCategory(Tinting Settings, true, 0, 10)]_TintingCategory("[ Tinting Category ]", Float) = 1
		_TintingIntensityValue("Tinting Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_TintingBakeMode("Tinting Baking", Float) = 0
		_TintingGrayValue("Tinting Gray", Range( 0 , 1)) = 1
		[HDR][Gamma]_TintingColor("Tinting Color", Color) = (1,1,1,1)
		[StyledSpace(10)]_TintingSpace("[ Tinting Space ]", Float) = 1
		_TintingGlobalValue("Tinting Paint Mask", Range( 0 , 1)) = 1
		_TintingMultiValue("Tinting Multi Mask", Range( 0 , 1)) = 1
		_TintingLumaValue("Tinting Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_TintingLumaRemap("Tinting Luma Mask", Vector) = (0,1,0,0)
		_TintingMeshValue("Tinting Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_TintingMeshMode("Tinting Mesh Mask", Float) = 3
		[StyledRemapSlider]_TintingMeshRemap("Tinting Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_TintingBlendRemap("Tinting Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_TintingElementMode("Use Paint Elements", Float) = 0
		[StyledSpace(10)]_TintingEnd("[ Tinting End]", Float) = 1
		[HideInInspector]_tinting_vert_mode("_tinting_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Dryness Settings, true, 0, 10)]_DrynessCategory("[ Dryness Category ]", Float) = 1
		_DrynessIntensityValue("Dryness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_DrynessBakeMode("Dryness Baking", Float) = 0
		_DrynessGrayValue("Dryness Gray", Range( 0 , 1)) = 1
		[HDR][Gamma]_DrynessColor("Dryness Color", Color) = (1,0.7083712,0.495283,1)
		_DrynessSubsurfaceValue("Dryness Subsurface", Range( 0 , 1)) = 0.5
		_DrynessSmoothnessValue("Dryness Smoothness", Range( 0 , 1)) = 0.5
		[StyledSpace(10)]_DrynessSpace("[ Dryness Space ]", Float) = 1
		_DrynessGlobalValue("Dryness Atmo Mask", Range( 0 , 1)) = 1
		_DrynessMultiValue("Dryness Multi Mask", Range( 0 , 1)) = 1
		_DrynessLumaValue("Dryness Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_DrynessLumaRemap("Dryness Luma Mask", Vector) = (0,1,0,0)
		_DrynessMeshValue("Dryness Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_DrynessMeshMode("Dryness Mesh Mask", Float) = 3
		[StyledRemapSlider]_DrynessMeshRemap("Dryness Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_DrynessBlendRemap("Dryness Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_DrynessElementMode("Use Atmo Elements", Float) = 0
		[StyledSpace(10)]_DrynessEnd("[ Dryness End ]", Float) = 1
		[HideInInspector]_dryness_vert_mode("_dryness_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Overlay Settings, true, 0, 10)]_OverlayCategory("[ Overlay Category ]", Float) = 1
		_OverlayIntensityValue("Overlay Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_OverlayBakeMode("Overlay Baking", Float) = 0
		[Enum(Off,0,On,1)]_OverlayTextureMode("Overlay Maps", Float) = 0
		[Space(10)][StyledTextureSingleLine]_OverlayAlbedoTex("Overlay Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_OverlayNormalTex("Overlay Normal", 2D) = "bump" {}
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochastic Triplanar,3)][Space(10)]_OverlaySampleMode("Overlay Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_OverlayCoordMode("Overlay UV Mode", Float) = 0
		[StyledVector(9)]_OverlayCoordValue("Overlay UV Value", Vector) = (1,1,0,0)
		[HDR]_OverlayColor("Overlay Color", Color) = (0.2815503,0.4009458,0.5377358,1)
		_OverlayNormalValue("Overlay Normal", Range( -8 , 8)) = 1
		_OverlaySubsurfaceValue("Overlay Subsurface", Range( 0 , 1)) = 0.5
		_OverlaySmoothnessValue("Overlay Smoothness", Range( 0 , 1)) = 0.5
		[Space(10)][StyledTextureSingleLine]_OverlayGlitterTexRT("Overlay Glitter RT", 2D) = "black" {}
		[Space(10)]_OverlayGlitterIntensityValue("Overlay Glitter Intensity", Range( 0 , 1)) = 0
		[HDR]_OverlayGlitterColor("Overlay Glitter Color", Color) = (0.7215686,1.913725,2.996078,1)
		_OverlayGlitterTillingValue("Overlay Glitter Tilling", Range( 0 , 8)) = 4
		_OverlayGlitterDistValue("Overlay Glitter Limit", Range( 0 , 200)) = 100
		[StyledSpace(10)]_OverlaySpace("[ Overlay Space ]", Float) = 1
		_OverlayGlobalValue("Overlay Atmo Mask", Range( 0 , 1)) = 1
		_OverlayLumaValue("Overlay Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_OverlayLumaRemap("Overlay Luma Mask", Vector) = (0,1,0,0)
		_OverlayProjValue("Overlay ProjY Mask", Range( 0 , 1)) = 0.5
		[StyledRemapSlider]_OverlayProjRemap("Overlay ProjY Mask", Vector) = (0,1,0,0)
		_OverlayMeshValue("Overlay Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_OverlayMeshMode("Overlay Mesh Mask", Float) = 1
		[StyledRemapSlider]_OverlayMeshRemap("Overlay Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_OverlayBlendRemap("Overlay Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_OverlayElementMode("Use Atmo Elements", Float) = 0
		[HideInInspector]_overlay_vert_mode("_overlay_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_overlay_coord_value("_overlay_coord_value", Vector) = (1,1,0,0)
		[StyledSpace(10)]_OverlayEnd("[ Overlay End ]", Float) = 1
		[StyledCategory(Wetness Settings, true, 0, 10)]_WetnessCategory("[ Wetness Category ]", Float) = 1
		_WetnessIntensityValue("Wetness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_WetnessBakeMode("Wetness Baking", Float) = 0
		_WetnessContrastValue("Wetness Contrast", Range( 0 , 1)) = 0.2
		_WetnessSmoothnessValue("Wetness Smoothness", Range( 0 , 1)) = 0.8
		[Space(10)]_WetnessGlobalValue("Wetness Atmo Mask", Range( 0 , 1)) = 1
		_WetnessMeshValue("Wetness Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_WetnessMeshMode("Wetness Mesh Mask", Float) = 0
		[StyledRemapSlider]_WetnessMeshRemap("Wetness Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)]_WetnessWaterIntensityValue("Wetness Water Intensity", Range( 0 , 1)) = 0
		[HDR]_WetnessWaterColor("Wetness Water Color", Color) = (0.5420078,0.7924528,0.6068289,1)
		_WetnessWaterBaseValue("Wetness Water Base Mask", Range( 0 , 1)) = 1
		_WetnessWaterMeshValue("Wetness Water Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_WetnessWaterMeshMode("Wetness Water Mesh Mask", Float) = 1
		[StyledRemapSlider]_WetnessWaterMeshRemap("Wetness Water Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_WetnessWaterBlendRemap("Wetness Water Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledTextureSingleLine]_WetnessDropsTexRT("Wetness Drops RT", 2D) = "white" {}
		[Space(10)]_WetnessDropsIntensityValue("Wetness Drops Intensity", Range( 0 , 1)) = 1
		_WetnessDropsNormalValue("Wetness Drops Normal", Range( -8 , 8)) = 1
		_WetnessDropsTillingValue("Wetness Drops Tilling", Range( 0 , 8)) = 0.25
		_WetnessDropsDistValue("Wetness Drops Limit", Range( 0 , 200)) = 50
		_WetnessDropsMeshValue("Wetness Drops Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_WetnessDropsMeshMode("Wetness Drops Mesh Mask", Float) = 2
		[StyledRemapSlider]_WetnessDropsMeshRemap("Wetness Drops Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_WetnessElementMode("Use Atmo Elements", Float) = 0
		[HideInInspector]_wetness_water_vert_mode("_wetness_water_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_wetness_vert_mode("_wetness_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_wetness_drops_vert_mode("_wetness_drops_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_WetnessEnd("[ Wetness End ]", Float) = 1
		[StyledCategory(Cutout Settings, true, 0, 10)]_CutoutCategory("[ Cutout Category ]", Float) = 1
		_CutoutIntensityValue("Cutout Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Affect Shadow Pass,1)]_CutoutShadowMode("Cutout Shadow", Float) = 1
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_CutoutBakeMode("Cutout Baking", Float) = 0
		_CutoutMultiValue("Cutout Multi Mask", Range( 0 , 1)) = 1
		[Space(10)]_CutoutGlobalValue("Cutout Fade Mask", Range( 0 , 1)) = 1
		_CutoutAlphaValue("Cutout Alpha Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_CutoutMeshMode("Cutout Mesh Mask", Float) = 0
		_CutoutMeshValue("Cutout Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_CutoutMeshRemap("Cutout Mesh Mask", Vector) = (0,1,0,0)
		_CutoutNoiseValue("Cutout Noise Mask", Range( 0 , 1)) = 1
		_CutoutNoiseTillingValue("Cutout Noise Tilling", Range( 0 , 100)) = 50
		[Space(10)][StyledToggle]_CutoutElementMode("Use Fade Elements", Float) = 0
		[HideInInspector]_cutout_vert_mode("_cutout_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_CutoutEnd("[ Cutout End ]", Float) = 1
		[StyledCategory(Dither Settings, true, 0, 10)]_DitherCategory("[ Dither Category ]", Float) = 1
		_DitherConstantValue("Dither Constant", Range( 0 , 1)) = 0
		_DitherProximityValue("Dither Proximity", Range( 0 , 1)) = 0
		_DitherProximityMinValue("Dither Proximity Start", Range( 0 , 40)) = 0
		_DitherProximityMaxValue("Dither Proximity Limit", Range( 0 , 40)) = 1
		_DitherDistanceValue("Dither Distance", Range( 0 , 1)) = 0
		_DitherDistanceMinValue("Dither Distance Start", Range( 0 , 1000)) = 0
		_DitherDistanceMaxValue("Dither Distance Limit", Range( 0 , 1000)) = 0
		_DitherGlancingValue("Dither Glancing", Range( 0 , 1)) = 0
		_DitherGlancingAngleValue("Dither Glanging Angle", Range( 0 , 8)) = 1
		[Enum(Off,0,Affect Shadow Pass,1)]_DitherShadowMode("Dither Shadow", Float) = 1
		[Space(10)]_DitherMultiValue("Dither Multi Mask", Range( 0 , 1)) = 1
		_DitherNoiseTillingValue("Dither Noise Tilling", Range( 0 , 100)) = 50
		[StyledSpace(10)]_DitherEnd("[ Dither End ]", Float) = 1
		[StyledCategory(Emissive Settings, true, 0, 10)]_EmissiveCategory("[ Emissive Category ]", Float) = 1
		_EmissiveIntensityValue("Emissive Intensity", Range( 0 , 1)) = 0
		[Enum(None,0,Any,1,Baked,2,Realtime,3)]_EmissiveFlagMode("Emissive GI Mode", Float) = 0
		[Enum(Constant,0,Multiply With Base Albedo,1)]_EmissiveColorMode("Emissive Color", Float) = 0
		[HDR]_EmissiveColor("Emissive Color", Color) = (1,1,1,1)
		[Enum(Nits,0,EV100,1)]_EmissivePowerMode("Emissive Value", Float) = 0
		_EmissivePowerValue("Emissive Value", Float) = 1
		_EmissiveExposureValue("Emissive Weight", Range( 0 , 1)) = 0.5
		[Space(10)][StyledTextureSingleLine]_EmissiveMaskTex("Emissive Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)]_EmissiveSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_EmissiveCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(18)]_EmissiveCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		[Space(10)]_EmissiveGlobalValue("Emissive Glow Mask", Range( 0 , 1)) = 1
		_EmissiveMaskValue("Emissive TexR Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_EmissiveMaskRemap("Emissive TexR Mask", Vector) = (0,1,0,0)
		_EmissiveMeshValue("Emissive Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_EmissiveMeshMode("Emissive Mesh Mask", Float) = 0
		[StyledRemapSlider]_EmissiveMeshRemap("Emissive Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_EmissiveElementMode("Use Glow Elements", Float) = 0
		[StyledSpace(10)]_EmissiveEnd("[ Emissive End ]", Float) = 1
		[HideInInspector]_emissive_power_value("_emissive_power_value", Float) = 1
		[HideInInspector]_emissive_vert_mode("_emissive_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_emissive_coord_value("_emissive_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Subsurface Settings, true, 0, 10)]_SubsurfaceCategory("[ Subsurface Category ]", Float) = 1
		[DiffusionProfile]_SubsurfaceDiffusion("Subsurface Diffusion", Float) = 0
		[HideInInspector]_SubsurfaceDiffusion_Asset("Subsurface Diffusion", Vector) = (0,0,0,0)
		[StyledSpace(10)]_SubsurfaceSpace("# SubsurfaceSpace", Float) = 0
		_SubsurfaceIntensityValue("Subsurface Intensity", Range( 0 , 1)) = 0
		[HDR]_SubsurfaceColor("Subsurface Color", Color) = (1,1,1,1)
		_SubsurfaceScatteringValue("Subsurface Value", Range( 0 , 16)) = 2
		_SubsurfaceAngleValue("Subsurface Angle", Range( 1 , 16)) = 8
		_SubsurfaceDirectValue("Subsurface Direct", Range( 0 , 1)) = 1
		_SubsurfaceNormalValue("Subsurface Normal", Range( 0 , 1)) = 0
		_SubsurfaceAmbientValue("Subsurface Ambient", Range( 0 , 1)) = 0.2
		_SubsurfaceShadowValue("Subsurface Shadow", Range( 0 , 1)) = 1
		_SubsurfaceThicknessValue("Subsurface Thickness", Range( 0 , 1)) = 0
		[Space(10)]_SubsurfaceGlobalValue("Subsurface Glow Mask", Range( 0 , 1)) = 1
		_SubsurfaceMultiValue("Subsurface Multi Mask", Range( 0 , 1)) = 1
		[Space(10)][StyledToggle]_SubsurfaceElementMode("Use Glow Elements", Float) = 0
		[StyledSpace(10)]_SubsurfaceEnd("[ Subsurface End ]", Float) = 1
		[StyledCategory(Perspective Settings, true, 0, 10)]_PerspectiveCategory("[ Perspective Category ]", Float) = 1
		_PerspectiveIntensityValue("Perspective Intensity", Range( 0 , 8)) = 0
		_PerspectiveAngleValue("Perspective Angle", Range( 0 , 8)) = 1
		[StyledSpace(10)]_PerspectiveEnd("[ Perspective End ]", Float) = 1
		[StyledCategory(Size Fade Settings, true, 0, 10)]_SizeFadeCategory("[ Size Fade Category ]", Float) = 1
		_SizeFadeIntensityValue("Size Fade Intensity", Range( 0 , 1)) = 0
		[Enum(All Axis,0,Y Axis,1)]_SizeFadeScaleMode("Size Fade Mode", Float) = 0
		_SizeFadeScaleValue("Size Fade Value", Range( 0 , 1)) = 1
		_SizeFadeDistMinValue("Size Fade Start", Range( 0 , 1000)) = 0
		_SizeFadeDistMaxValue("Size Fade Limit", Range( 0 , 1000)) = 0
		[Space(10)]_SizeFadeGlobalValue("Size Fade Form Mask", Range( 0 , 1)) = 1
		[Space(10)][StyledToggle]_SizeFadeElementMode("Use Form Elements", Float) = 0
		[StyledSpace(10)]_SizeFadeEnd("[ Size Fade End ]", Float) = 1
		[StyledCategory(Motion Settings, true, 0, 10)]_MotionCategory("[ Motion Category ]", Float) = 1
		[StyledMessage(Info, The Interaction features require elements to work. Use Flow elements to add interaction and use the Push Mask slider to control the interaction amount per motion layer., 0, 10)]_MotionPushInfo("# Message Push", Float) = 0
		[NoScaleOffset][StyledTextureSingleLine]_MotionNoiseTex("Motion Texture", 2D) = "white" {}
		[Space(10)]_MotionIntensityValue("Motion Intensity", Range( 0 , 1)) = 1
		_MotionDistValue("Motion Details Limit", Range( 0 , 1000)) = 100
		[Space(10)]_MotionBaseIntensityValue("Motion Primary Intensity", Range( 0 , 10)) = 0
		_MotionBaseDelayValue("Motion Primary Delay", Range( 0 , 1)) = 0
		_MotionBaseNoiseValue("Motion Primary Noise", Range( 0 , 1)) = 0.5
		_MotionBasePivotValue("Motion Primary Pivots", Range( 0 , 1)) = 0.8
		_MotionBasePhaseValue("Motion Primary Phase", Range( 0 , 1)) = 0
		_MotionBaseTillingValue("Motion Primary Tilling", Range( 0 , 100)) = 5
		_MotionBaseSpeedValue("Motion Primary Speed", Range( 0 , 50)) = 5
		_MotionBasePushValue("Motion Primary Push Mask", Range( 0 , 1)) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionBaseMaskMode("Motion Primary Anim Mask", Float) = 3
		[StyledRemapSlider]_MotionBaseMaskRemap("Motion Primary Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionSmallIntensityValue("Motion Second Intensity", Range( 0 , 10)) = 0
		_MotionSmallDelayValue("Motion Second Delay", Range( 0 , 1)) = 0
		_MotionSmallNoiseValue("Motion Second Noise", Range( 0 , 1)) = 0.5
		_MotionSmallPivotValue("Motion Second Pivots", Range( 0 , 1)) = 0.2
		_MotionSmallPhaseValue("Motion Second Phase", Range( 0 , 1)) = 0
		_MotionSmallTillingValue("Motion Second Tilling", Range( 0 , 100)) = 5
		_MotionSmallSpeedValue("Motion Second Speed", Range( 0 , 50)) = 5
		_MotionSmallPushValue("Motion Second Push Mask", Range( 0 , 1)) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionSmallMaskMode("Motion Second Anim Mask", Float) = 1
		[StyledRemapSlider]_MotionSmallMaskRemap("Motion Second Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionTinyIntensityValue("Motion Leaves Intensity", Range( 0 , 10)) = 0
		_MotionTinyNoiseValue("Motion Leaves Noise", Range( 0 , 1)) = 1
		_MotionTinyTillingValue("Motion Leaves Tilling", Range( 0 , 100)) = 50
		_MotionTinySpeedValue("Motion Leaves Speed", Range( 0 , 50)) = 10
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionTinyMaskMode("Motion Leaves Anim Mask", Float) = 2
		[StyledRemapSlider]_MotionTinyMaskRemap("Motion Leaves Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionHighlightValue("Motion Ripples Intensity", Range( 0 , 1)) = 0
		[HDR]_MotionHighlightColor("Motion Ripples Color", Color) = (1,1,1,1)
		[Space(10)][StyledToggle]_MotionElementMode("Use Flow Elements", Float) = 0
		[StyledSpace(10)]_MotionWindEnd("[ Motion Wind End ]", Float) = 1
		[HideInInspector]_motion_base_mask_mode("_motion_base_mask_mode", Float) = 0
		[HideInInspector]_motion_base_vert_mode("_motion_base_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_base_proc_mode("_motion_base_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_mask_mode("_motion_small_mask_mode", Float) = 0
		[HideInInspector]_motion_small_vert_mode("_motion_small_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_proc_mode("_motion_small_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_mask_mode("_motion_tiny_mask_mode", Float) = 0
		[HideInInspector]_motion_tiny_vert_mode("_motion_tiny_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_proc_mode("_motion_tiny_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_mode("_motion_small_mode", Float) = 0
		[StyledCategory(Normal Settings, true, 0, 10)]_NormalCategory("[ Normal Category ]", Float) = 1
		_NormalFlattenValue("Normal Flattening", Range( 0 , 1)) = 0
		_NormalSphereValue("Normal Spherical", Range( 0 , 1)) = 0
		[StyledVector(18)]_NormalSphereOffsetValue("Normal Spherical Offset", Vector) = (0,0,0,0)
		_NormalComputeValue("Normal Compute", Range( 0 , 1)) = 0
		[StyledSpace(10)]_NormalSpace("[ Normal Space ]", Float) = 1
		_NormalMeshValue("Normal Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_NormalMeshMode("Normal Mesh Mask", Float) = 2
		[StyledRemapSlider]_NormalMeshRemap("Normal Mesh Mask", Vector) = (0,1,0,0)
		[HideInInspector]_normal_vert_mode("_normal_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_NormalEnd("[ Normal End ]", Float) = 1
		[HideInInspector]_render_cull("_render_cull", Float) = 0
		[HideInInspector]_render_src("_render_src", Float) = 5
		[HideInInspector]_render_dst("_render_dst", Float) = 10
		[HideInInspector]_render_zw("_render_zw", Float) = 1
		[HideInInspector]_render_coverage("_render_coverage", Float) = 0
		[HideInInspector]_IsGeneralShader("_IsGeneralShader", Float) = 1
		[HideInInspector]_IsSubsurfaceShader("_IsSubsurfaceShader", Float) = 1

		[HideInInspector] _RenderQueueType("Render Queue Type", Float) = 1
		[HideInInspector][ToggleUI] _AddPrecomputedVelocity("Add Precomputed Velocity", Float) = 1
		[HideInInspector][ToggleUI] _SupportDecals("Support Decals", Float) = 1.0
		[HideInInspector] _StencilRef("Stencil Ref", Int) = 0 // StencilUsage.Clear
		[HideInInspector] _StencilWriteMask("Stencil Write Mask", Int) = 3 // StencilUsage.RequiresDeferredLighting | StencilUsage.SubsurfaceScattering
		[HideInInspector] _StencilRefDepth("Stencil Ref Depth", Int) = 0 // Nothing
		[HideInInspector] _StencilWriteMaskDepth("Stencil Write Mask Depth", Int) = 8 // StencilUsage.TraceReflectionRay
		[HideInInspector] _StencilRefMV("Stencil Ref MV", Int) = 32 // StencilUsage.ObjectMotionVector
		[HideInInspector] _StencilWriteMaskMV("Stencil Write Mask MV", Int) = 32 // StencilUsage.ObjectMotionVector
		[HideInInspector] _StencilRefDistortionVec("Stencil Ref Distortion Vec", Int) = 4 				// DEPRECATED
		[HideInInspector] _StencilWriteMaskDistortionVec("Stencil Write Mask Distortion Vec", Int) = 4	// DEPRECATED
		[HideInInspector] _StencilWriteMaskGBuffer("Stencil Write Mask GBuffer", Int) = 3 // StencilUsage.RequiresDeferredLighting | StencilUsage.SubsurfaceScattering
		[HideInInspector] _StencilRefGBuffer("Stencil Ref GBuffer", Int) = 2 // StencilUsage.RequiresDeferredLighting
		[HideInInspector] _ZTestGBuffer("ZTest GBuffer", Int) = 4
		[HideInInspector][ToggleUI] _RequireSplitLighting("Require Split Lighting", Float) = 0
		[HideInInspector][ToggleUI] _ReceivesSSR("Receives SSR", Float) = 1
		[HideInInspector][ToggleUI] _ReceivesSSRTransparent("Receives SSR Transparent", Float) = 0
		[HideInInspector] _SurfaceType("Surface Type", Float) = 0
		[HideInInspector] _BlendMode("Blend Mode", Float) = 0
		[HideInInspector] _SrcBlend("Src Blend", Float) = 1
		[HideInInspector] _DstBlend("Dst Blend", Float) = 0
		[HideInInspector] _DstBlend2("__dst2", Float) = 0
		[HideInInspector] _AlphaSrcBlend("Alpha Src Blend", Float) = 1
		[HideInInspector] _AlphaDstBlend("Alpha Dst Blend", Float) = 0
		[HideInInspector][ToggleUI] _ZWrite("ZWrite", Float) = 1
		[HideInInspector][ToggleUI] _TransparentZWrite("Transparent ZWrite", Float) = 0
		[HideInInspector] _CullMode("Cull Mode", Float) = 2
		[HideInInspector] _TransparentSortPriority("Transparent Sort Priority", Float) = 0
		[HideInInspector][ToggleUI] _EnableFogOnTransparent("Enable Fog", Float) = 1
		[HideInInspector] _CullModeForward("Cull Mode Forward", Float) = 2 // This mode is dedicated to Forward to correctly handle backface then front face rendering thin transparent
		[HideInInspector][Enum(UnityEngine.Rendering.HighDefinition.TransparentCullMode)] _TransparentCullMode("Transparent Cull Mode", Int) = 2 // Back culling by default
		[HideInInspector] _ZTestDepthEqualForOpaque("ZTest Depth Equal For Opaque", Int) = 4 // Less equal
		[HideInInspector][Enum(UnityEngine.Rendering.CompareFunction)] _ZTestTransparent("ZTest Transparent", Int) = 4 // Less equal
		[HideInInspector][ToggleUI] _TransparentBackfaceEnable("Transparent Backface Enable", Float) = 0
		[HideInInspector][ToggleUI] _AlphaCutoffEnable("Alpha Cutoff Enable", Float) = 0
		[HideInInspector][ToggleUI] _UseShadowThreshold("Use Shadow Threshold", Float) = 0
		[HideInInspector][ToggleUI] _DoubleSidedEnable("Double Sided Enable", Float) = 0
		[HideInInspector][Enum(Flip, 0, Mirror, 1, None, 2)] _DoubleSidedNormalMode("Double Sided Normal Mode", Float) = 2
		[HideInInspector] _DoubleSidedConstants("DoubleSidedConstants", Vector) = (1,1,-1,0)

		//_TessPhongStrength( "Tess Phong Strength", Range( 0, 1 ) ) = 0.5
		//_TessValue( "Tess Max Tessellation", Range( 1, 32 ) ) = 16
		//_TessMin( "Tess Min Distance", Float ) = 10
		//_TessMax( "Tess Max Distance", Float ) = 25
		//_TessEdgeLength ( "Tess Edge length", Range( 2, 50 ) ) = 16
		//_TessMaxDisp( "Tess Max Displacement", Float ) = 25

		[HideInInspector][ToggleUI] _TransparentWritingMotionVec("Transparent Writing MotionVec", Float) = 0
		[HideInInspector][ToggleUI] _PerPixelSorting("_PerPixelSorting", Float) = 0.0
		[HideInInspector][Enum(UnityEngine.Rendering.HighDefinition.OpaqueCullMode)] _OpaqueCullMode("Opaque Cull Mode", Int) = 2 // Back culling by default
		[HideInInspector][ToggleUI] _EnableBlendModePreserveSpecularLighting("Enable Blend Mode Preserve Specular Lighting", Float) = 1
		[HideInInspector] _EmissionColor("Color", Color) = (1, 1, 1)

		[HideInInspector][NoScaleOffset] unity_Lightmaps("unity_Lightmaps", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset] unity_LightmapsInd("unity_LightmapsInd", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset] unity_ShadowMasks("unity_ShadowMasks", 2DArray) = "" {}

		[HideInInspector][Enum(Auto, 0, On, 1, Off, 2)] _DoubleSidedGIMode("Double sided GI mode", Float) = 0

		[HideInInspector][ToggleUI] _AlphaToMaskInspectorValue("_AlphaToMaskInspectorValue", Float) = 0 // Property used to save the alpha to mask state in the inspector
        [HideInInspector][ToggleUI] _AlphaToMask("__alphaToMask", Float) = 0

		//_Refrac ( "Refraction Model", Float) = 0
        [HideInInspector][ToggleUI]_DepthOffsetEnable("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_ConservativeDepthOffsetEnable("Boolean", Float) = 1
	}

	SubShader
	{
		LOD 0

		

		Tags { "RenderPipeline"="HDRenderPipeline" "RenderType"="Opaque" "Queue"="Geometry" }

		HLSLINCLUDE
		#pragma target 4.5
		#pragma exclude_renderers glcore gles gles3 

		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Filtering.hlsl"

		struct GlobalSurfaceDescription // GBuffer Forward META TransparentBackface
		{
			float3 BaseColor;
			float3 Normal;
			float3 BentNormal;
			float3 Specular;
			float CoatMask;
			float Metallic;
			float3 Emission;
			float Smoothness;
			float Occlusion;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPrepass;
			float AlphaClipThresholdDepthPostpass;
			float SpecularOcclusion;
			float SpecularAAScreenSpaceVariance;
			float SpecularAAThreshold;
			float RefractionIndex;
			float3 RefractionColor;
			float RefractionDistance;
			float DiffusionProfile;
			float TransmissionMask;
			float Thickness;
			float SubsurfaceMask;
			float Anisotropy;
			float3 Tangent;
			float IridescenceMask;
			float IridescenceThickness;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct AlphaSurfaceDescription // ShadowCaster
		{
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct SceneSurfaceDescription // SceneSelection
		{
		    float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float RefractionIndex;
			float3 RefractionColor;
			float RefractionDistance;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct PrePassSurfaceDescription // DepthPrePass
		{
			float3 Normal;
			float3 Emission;
			float Smoothness;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPrepass;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct PostPassSurfaceDescription //DepthPostPass
		{
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPostpass;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct SmoothSurfaceDescription // MotionVectors DepthOnly
		{
			float3 Normal;
			float3 Emission;
			float Smoothness;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

        struct PickingSurfaceDescription //Picking
		{
            float3 BentNormal;
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;

			float3 ObjectSpaceNormal;
			float3 WorldSpaceNormal;
			float3 TangentSpaceNormal;
			float3 ObjectSpaceViewDirection;
			float3 WorldSpaceViewDirection;
			float3 ObjectSpacePosition;
		};

		#ifndef ASE_TESS_FUNCS
		#define ASE_TESS_FUNCS
		float4 FixedTess( float tessValue )
		{
			return tessValue;
		}

		float CalcDistanceTessFactor (float4 vertex, float minDist, float maxDist, float tess, float4x4 o2w, float3 cameraPos )
		{
			float3 wpos = mul(o2w,vertex).xyz;
			float dist = distance (wpos, cameraPos);
			float f = clamp(1.0 - (dist - minDist) / (maxDist - minDist), 0.01, 1.0) * tess;
			return f;
		}

		float4 CalcTriEdgeTessFactors (float3 triVertexFactors)
		{
			float4 tess;
			tess.x = 0.5 * (triVertexFactors.y + triVertexFactors.z);
			tess.y = 0.5 * (triVertexFactors.x + triVertexFactors.z);
			tess.z = 0.5 * (triVertexFactors.x + triVertexFactors.y);
			tess.w = (triVertexFactors.x + triVertexFactors.y + triVertexFactors.z) / 3.0f;
			return tess;
		}

		float CalcEdgeTessFactor (float3 wpos0, float3 wpos1, float edgeLen, float3 cameraPos, float4 scParams )
		{
			float dist = distance (0.5 * (wpos0+wpos1), cameraPos);
			float len = distance(wpos0, wpos1);
			float f = max(len * scParams.y / (edgeLen * dist), 1.0);
			return f;
		}

		float DistanceFromPlaneASE (float3 pos, float4 plane)
		{
			return dot (float4(pos,1.0f), plane);
		}

		bool WorldViewFrustumCull (float3 wpos0, float3 wpos1, float3 wpos2, float cullEps, float4 planes[6] )
		{
			float4 planeTest;
			planeTest.x = (( DistanceFromPlaneASE(wpos0, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[0]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.y = (( DistanceFromPlaneASE(wpos0, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[1]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.z = (( DistanceFromPlaneASE(wpos0, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[2]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.w = (( DistanceFromPlaneASE(wpos0, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[3]) > -cullEps) ? 1.0f : 0.0f );
			return !all (planeTest);
		}

		float4 DistanceBasedTess( float4 v0, float4 v1, float4 v2, float tess, float minDist, float maxDist, float4x4 o2w, float3 cameraPos )
		{
			float3 f;
			f.x = CalcDistanceTessFactor (v0,minDist,maxDist,tess,o2w,cameraPos);
			f.y = CalcDistanceTessFactor (v1,minDist,maxDist,tess,o2w,cameraPos);
			f.z = CalcDistanceTessFactor (v2,minDist,maxDist,tess,o2w,cameraPos);

			return CalcTriEdgeTessFactors (f);
		}

		float4 EdgeLengthBasedTess( float4 v0, float4 v1, float4 v2, float edgeLength, float4x4 o2w, float3 cameraPos, float4 scParams )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;
			tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
			tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
			tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
			tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			return tess;
		}

		float4 EdgeLengthBasedTessCull( float4 v0, float4 v1, float4 v2, float edgeLength, float maxDisplacement, float4x4 o2w, float3 cameraPos, float4 scParams, float4 planes[6] )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;

			if (WorldViewFrustumCull(pos0, pos1, pos2, maxDisplacement, planes))
			{
				tess = 0.0f;
			}
			else
			{
				tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
				tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
				tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
				tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			}
			return tess;
		}
		#endif //ASE_TESS_FUNCS
		ENDHLSL

		
		Pass
		{
			
			Name "GBuffer"
			Tags { "LightMode"="GBuffer" }

			Cull [_CullMode]
			ZTest [_ZTestGBuffer]

			Stencil
			{
				Ref [_StencilRefGBuffer]
				WriteMask [_StencilWriteMaskGBuffer]
				Comp Always
				Pass Replace
			}


			HLSLPROGRAM
            #define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
            #pragma shader_feature_local_fragment _ _DISABLE_DECALS
            #define _SPECULAR_OCCLUSION_FROM_AO 1
            #pragma multi_compile_instancing
            #pragma instancing_options renderinglayer
            #define _MATERIAL_FEATURE_TRANSMISSION 1
            #pragma multi_compile _ LOD_FADE_CROSSFADE
            #define ASE_ABSOLUTE_VERTEX_POS 1
            #define _AMBIENT_OCCLUSION 1
            #define HAVE_MESH_MODIFICATION
            #define ASE_VERSION 19702
            #define ASE_SRP_VERSION 170003
            #if !defined(ASE_NEED_CULLFACE)
            #define ASE_NEED_CULLFACE 1
            #endif //ASE_NEED_CULLFACE
            #define ASE_USING_SAMPLING_MACROS 1

            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma multi_compile_fragment _ RENDERING_LAYERS
            #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
            #pragma multi_compile _ DEBUG_DISPLAY
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile_fragment _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
            #pragma multi_compile _ DYNAMICLIGHTMAP_ON
            #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
            #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
            #pragma multi_compile _ USE_LEGACY_LIGHTMAPS

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_GBUFFER

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _SecondProjRemap;
			half4 _DrynessLumaRemap;
			float4 _DrynessColor;
			half4 _wetness_water_vert_mode;
			half4 _WetnessWaterMeshRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			half4 _WetnessWaterBlendRemap;
			half4 _TintingBlendRemap;
			half4 _TintingMeshRemap;
			half4 _tinting_vert_mode;
			half4 _object_phase_mode;
			half4 _TintingLumaRemap;
			float4 _TintingColor;
			half4 _wetness_drops_vert_mode;
			half4 _WetnessDropsMeshRemap;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _GradientMeshRemap;
			half4 _WetnessMeshRemap;
			half4 _wetness_vert_mode;
			half4 _MotionBaseMaskRemap;
			half4 _motion_base_proc_mode;
			half4 _motion_tiny_vert_mode;
			half4 _OverlayProjRemap;
			half4 _motion_tiny_proc_mode;
			half4 _MotionSmallMaskRemap;
			half4 _OverlayLumaRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _overlay_coord_value;
			half4 _overlay_vert_mode;
			half4 _OverlayCoordValue;
			half4 _OverlayMeshRemap;
			half4 _OverlayColor;
			half4 _MotionHighlightColor;
			half4 _OverlayBlendRemap;
			half4 _second_vert_mode;
			half4 _DrynessBlendRemap;
			half4 _DrynessMeshRemap;
			half4 _WetnessWaterColor;
			half4 _dryness_vert_mode;
			half4 _motion_base_vert_mode;
			half4 _MotionTinyMaskRemap;
			half4 _GradientColorOne;
			half4 _gradient_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _emissive_coord_value;
			half4 _MainColor;
			half4 _ThirdColorTwo;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _third_coord_value;
			half4 _MainMultiRemap;
			half4 _EmissiveColor;
			half4 _second_coord_value;
			half4 _MainColorTwo;
			half4 _Color;
			half4 _SecondColor;
			half4 _SecondBlendRemap;
			half4 _SecondMultiRemap;
			half4 _SubsurfaceColor;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _SecondMeshRemap;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _SecondLumaRemap;
			half4 _SecondColorTwo;
			half4 _GradientColorTwo;
			half4 _ThirdColor;
			half4 _emissive_vert_mode;
			half4 _occlusion_vert_mode;
			half4 _cutout_vert_mode;
			half4 _CutoutMeshRemap;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _ThirdProjRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdMeshRemap;
			half4 _ThirdMaskCoordValue;
			half4 _third_vert_mode;
			half4 _ThirdLumaRemap;
			half4 _ThirdMaskRemap;
			half4 _SecondCoordValue;
			half4 _third_mask_coord_value;
			half4 _SecondMaskCoordValue;
			half4 _ThirdMultiRemap;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _EmissiveMeshRemap;
			half4 _OverlayGlitterColor;
			half3 _motion_highlight_color;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half _OverlayGlitterIntensityValue;
			half _ThirdBlendAlbedoValue;
			half _DitherGlancingValue;
			half _ThirdIntensityValue;
			half _DitherGlancingAngleValue;
			half _DitherDistanceValue;
			half _DitherDistanceMaxValue;
			half _ThirdMaskValue;
			half _DitherDistanceMinValue;
			half _ThirdLumaValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _DitherProximityMaxValue;
			half _ThirdMeshValue;
			half _DitherConstantValue;
			half _ThirdMeshMode;
			half _CutoutShadowMode;
			half _ThirdProjValue;
			half _ThirdElementMode;
			half _ThirdGlobalValue;
			half _CutoutMultiValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _ThirdNormalValue;
			half _ThirdBlendShaderValue;
			half _ThirdAlphaClipValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _ThirdColorMode;
			half _DitherNoiseTillingValue;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SubsurfaceElementMode;
			half _SubsurfaceIntensityValue;
			half _SecondMeshValue;
			half _SecondMeshMode;
			half _SecondElementMode;
			half _EmissiveExposureValue;
			half _SecondGlobalValue;
			float _emissive_power_value;
			half _SecondBlendIntensityValue;
			half _EmissiveColorMode;
			half _EmissiveGlobalValue;
			half _CutoutNoiseValue;
			half _SecondBlendNormalValue;
			half _SecondNormalValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _ThirdAlbedoValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _ThirdMetallicValue;
			half _DitherMultiValue;
			half _EmissiveElementMode;
			half _CutoutNoiseTillingValue;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _WetnessWaterMeshValue;
			half _WetnessMeshMode;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _WetnessMeshValue;
			half _WetnessGlobalValue;
			half _DrynessLumaValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _OverlaySubsurfaceValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _DrynessGrayValue;
			half _OverlaySmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _OverlayGlobalValue;
			half _MotionHighlightValue;
			half _OverlayElementMode;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _OverlayIntensityValue;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _OverlayGlitterDistValue;
			half _OverlayTextureMode;
			half _OverlayNormalValue;
			half _OverlayGlitterTillingValue;
			half _DrynessGlobalValue;
			half _WetnessWaterBaseValue;
			half _CutoutAlphaValue;
			half _CutoutGlobalValue;
			half _CutoutElementMode;
			half _CutoutIntensityValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _WetnessSmoothnessValue;
			half _WetnessDropsMeshMode;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _WetnessDropsMeshValue;
			half _VariationIntensityValue;
			half _WetnessWaterMeshMode;
			half _VariationMultiValue;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _WetnessDropsDistValue;
			half _TintingIntensityValue;
			half _TintingMultiValue;
			half _WetnessDropsNormalValue;
			half _TintingLumaValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsTillingValue;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _WetnessContrastValue;
			half _DrynessElementMode;
			half _TintingElementMode;
			half _DrynessSmoothnessValue;
			half _SecondAlbedoValue;
			half _SecondLumaValue;
			half _GlobalGlowLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalPivotInfo;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _GlobalGlowPivotValue;
			half _SizeFadeDistMinValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _SizeFadeDistMaxValue;
			half _ObjectCategory;
			half _GlobalAtmoLayerValue;
			half _GlobalFadeLayerValue;
			half _MotionSmallPushValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionSmallMaskMode;
			half _GlobalAtmoPivotValue;
			half _motion_small_mask_mode;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _SizeFadeGlobalValue;
			half _SizeFadeElementMode;
			half _GlobalFlowPivotValue;
			half _GlobalFlowLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _MotionSmallIntensityValue;
			half _MotionTinyIntensityValue;
			half _PerspectiveEnd;
			half _SizeFadeEnd;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _RenderSSR;
			half _IsVersion;
			half _RenderZWrite;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _Cutoff;
			half _PerspectiveCategory;
			half _RenderPriority;
			half _RenderMotion;
			half _SizeFadeCategory;
			half _MotionPushInfo;
			half _MotionElementMode;
			half _MotionWindEnd;
			half _MotionCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _IsSubsurfaceShader;
			half _RenderQueue;
			half _IsGeneralShader;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _HasDefaultTextures;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _RenderShadow;
			half _RenderClip;
			half _RenderFilter;
			half _SecondProjValue;
			half _MotionDistValue;
			half _MotionTinyMaskMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _DetailEnd;
			half _SecondCoordMode;
			half _DetailCategory;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _OcclusionBakeMode;
			half _TintingEnd;
			half _SecondMaskSampleMode;
			half _SecondBakeMode;
			half _SecondMaskValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SubsurfaceThicknessValue;
			half _MainAlphaClipValue;
			half _SecondMaskCoordMode;
			half _MainNormalValue;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainCategory;
			half _MainColorMode;
			half _motion_tiny_mask_mode;
			half _TintingCategory;
			half _DrynessSpace;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseMaskMode;
			half _SubsurfaceEnd;
			half _motion_base_mask_mode;
			half _motion_small_mode;
			half _MotionBasePushValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionTinyNoiseValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionBaseIntensityValue;
			half _DrynessBakeMode;
			half _SubsurfaceDirectValue;
			half _SubsurfaceAmbientValue;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _SubsurfaceNormalValue;
			half _CutoutBakeMode;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceShadowValue;
			half _CutoutEnd;
			half _SubsurfaceAngleValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_SizeFadeParams;
			half4 TVE_FormParams;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			float TVE_FlowLayers[10];
			TEXTURE2D_ARRAY(TVE_FlowBaseTex);
			TEXTURE2D_ARRAY(TVE_FlowNearTex);
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			half4 TVE_AtmoData;
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			half4 TVE_DitherParams;
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_RELATIVE_WORLD_POS
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 FlowParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float4 clipPosV : TEXCOORD0;
				float3 positionRWS : TEXCOORD1;
				float3 normalWS : TEXCOORD2;
				float4 tangentWS : TEXCOORD3;
				float4 uv1 : TEXCOORD4;
				float4 uv2 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_color : COLOR;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};


			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half ShadowPassCheck36_g170701( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170711( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				surfaceData.baseColor =					surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness =					surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
                    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;

                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
				    #if !defined(SHADER_STAGE_RAY_TRACING)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   #ifdef FRAG_INPUTS_USE_TEXCOORD0
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                       #else
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                       #endif
					   surfaceData.metallic = 0;
				    }
					#endif
				    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData); 
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif  
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS output;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				TVEModelData Data16_g170761 = (TVEModelData)0;
				float In_Dummy16_g170761 = 0.0;
				TVEModelData Data16_g170745 = (TVEModelData)0;
				half Dummy1575_g170743 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170745 = Dummy1575_g170743;
				TVEModelData Data16_g170721 = (TVEModelData)0;
				float In_Dummy16_g170721 = 0.0;
				TVEModelData Data16_g170491 = (TVEModelData)0;
				half Dummy181_g170474 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170491 = Dummy181_g170474;
				TVEModelData Data16_g170433 = (TVEModelData)0;
				half Dummy181_g170431 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170433 = Dummy181_g170431;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170200 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170200 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170200 = PositionOS131_g170196;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_positionWS;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170200 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170206 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170206 = ( localObjectPosition_UNITY_MATRIX_M14_g170206 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170206 = localObjectPosition_UNITY_MATRIX_M14_g170206;
				#endif
				float3 temp_output_340_7_g170196 = staticSwitch13_g170206;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170208 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170204 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170204;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170208 = PivotOS149_g170196;
				float3 PivotsOnlyWS105_g170208 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170208 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170208 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170208 = ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 );
				#endif
				float3 temp_output_341_7_g170196 = staticSwitch13_g170208;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170200 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170200 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170200 = float3( 0,0,0 );
				float3 In_PivotOS16_g170200 = PivotOS149_g170196;
				float3 In_PivotWS16_g170200 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170200 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170200 = NormalOS134_g170196;
				float3 ase_normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170200 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170200 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170200 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170200 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170200 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170200 = VertexMasks171_g170196;
				float mulTime113_g170203 = _TimeParameters.x * 0.52;
				float lerpResult128_g170203 = lerp( mulTime113_g170203 , ( ( mulTime113_g170203 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170196 = PivotWO133_g170196;
				half Pivot_Position322_g170196 = ( break319_g170196.x + break319_g170196.z );
				float mulTime113_g170202 = _TimeParameters.x * 0.27;
				float lerpResult128_g170202 = lerp( mulTime113_g170202 , ( ( mulTime113_g170202 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170205 = _object_phase_mode;
				float temp_output_30_0_g170205 = ( inputMesh.ase_color.r * break33_g170205.x );
				float temp_output_29_0_g170205 = ( inputMesh.ase_color.g * break33_g170205.y );
				float temp_output_31_0_g170205 = ( inputMesh.ase_color.b * break33_g170205.z );
				float temp_output_28_0_g170205 = ( temp_output_30_0_g170205 + temp_output_29_0_g170205 + temp_output_31_0_g170205 + ( inputMesh.ase_color.a * break33_g170205.w ) );
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170205 + Pivot_Position322_g170196 ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(sin( ( lerpResult128_g170203 + Pivot_Position322_g170196 ) ) , sin( ( lerpResult128_g170202 + Pivot_Position322_g170196 ) ) , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_PhaseData16_g170200 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170200 = BoundsData254_g170196;
				float4 In_RotationData16_g170200 = float4( 0,0,0,0 );
				{
				Data16_g170200.Dummy = In_Dummy16_g170200;
				Data16_g170200.PositionOS = In_PositionOS16_g170200;
				Data16_g170200.PositionWS = In_PositionWS16_g170200;
				Data16_g170200.PositionWO = In_PositionWO16_g170200;
				Data16_g170200.PositionRawOS = In_PositionRawOS16_g170200;
				Data16_g170200.PositionAddOS = In_PositionAddOS16_g170200;
				Data16_g170200.PivotOS = In_PivotOS16_g170200;
				Data16_g170200.PivotWS = In_PivotWS16_g170200;
				Data16_g170200.PivotWO = In_PivotWO16_g170200;
				Data16_g170200.NormalOS = In_NormalOS16_g170200;
				Data16_g170200.NormalWS = In_NormalWS16_g170200;
				Data16_g170200.NormalRawOS = In_NormalRawOS16_g170200;
				Data16_g170200.NormalRawWS = In_NormalRawWS16_g170200;
				Data16_g170200.TangentOS = In_TangentOS16_g170200;
				Data16_g170200.ViewDirWS = In_ViewDirWS16_g170200;
				Data16_g170200.VertexData = In_VertexData16_g170200;
				Data16_g170200.PhaseData = In_PhaseData16_g170200;
				Data16_g170200.BoundsData = In_BoundsData16_g170200;
				Data16_g170200.RotationData = In_RotationData16_g170200;
				}
				TVEModelData Data15_g170371 = Data16_g170200;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_PhaseData15_g170371 = Data15_g170371.PhaseData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_PhaseData16_g170370 = Out_PhaseData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.PhaseData = In_PhaseData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_PhaseData15_g170391 = Data15_g170391.PhaseData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_viewDirSafeWS , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_viewDirSafeWS , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_PhaseData16_g170393 = Out_PhaseData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				{
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.PhaseData = In_PhaseData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				}
				TVEModelData Data15_g170432 = Data16_g170393;
				float Out_Dummy15_g170432 = 0;
				float3 Out_PositionOS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170432 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170432 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170432 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170432 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170432 = float3( 0,0,0 );
				float4 Out_VertexData15_g170432 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170432 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170432 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170432 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_PositionOS15_g170432 = Data15_g170432.PositionOS;
				Out_PositionWS15_g170432 = Data15_g170432.PositionWS;
				Out_PositionWO15_g170432 = Data15_g170432.PositionWO;
				Out_PositionRawOS15_g170432 = Data15_g170432.PositionRawOS;
				Out_PositionAddOS15_g170432 = Data15_g170432.PositionAddOS;
				Out_PivotOS15_g170432 = Data15_g170432.PivotOS;
				Out_PivotWS15_g170432 = Data15_g170432.PivotWS;
				Out_PivotWO15_g170432 = Data15_g170432.PivotWO;
				Out_NormalOS15_g170432 = Data15_g170432.NormalOS;
				Out_NormalWS15_g170432 = Data15_g170432.NormalWS;
				Out_NormalRawOS15_g170432 = Data15_g170432.NormalRawOS;
				Out_NormalRawWS15_g170432 = Data15_g170432.NormalRawWS;
				Out_TangentOS15_g170432 = Data15_g170432.TangentOS;
				Out_ViewDirWS15_g170432 = Data15_g170432.ViewDirWS;
				Out_VertexData15_g170432 = Data15_g170432.VertexData;
				Out_PhaseData15_g170432 = Data15_g170432.PhaseData;
				Out_BoundsData15_g170432 = Data15_g170432.BoundsData;
				Out_RotationData15_g170432 = Data15_g170432.RotationData;
				}
				half3 Model_PositionOS147_g170431 = Out_PositionOS15_g170432;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170431 = Out_PivotWO15_g170432;
				half3 Model_PivotWO162_g170431 = temp_output_210_19_g170431;
				float lerpResult216_g170431 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170435 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170435 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170431 ) * lerpResult216_g170431 ) - temp_output_7_0_g170435 );
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatParams204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintParams204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowParams204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoParams204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeParams204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormParams204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowParams204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatParams = In_CoatParams204_g170214;
				Data204_g170214.PaintParams = In_PaintParams204_g170214;
				Data204_g170214.GlowParams = In_GlowParams204_g170214;
				Data204_g170214.AtmoParams = In_AtmoParams204_g170214;
				Data204_g170214.FadeParams = In_FadeParams204_g170214;
				Data204_g170214.FormParams= In_FormParams204_g170214;
				Data204_g170214.FlowParams = In_FlowParams204_g170214;
				}
				TVEGlobalData Data15_g170434 = Data204_g170214;
				float Out_Dummy15_g170434 = 0;
				float4 Out_CoatParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170434 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170434 = Data15_g170434.Dummy;
				Out_CoatParams15_g170434 = Data15_g170434.CoatParams;
				Out_PaintParams15_g170434 = Data15_g170434.PaintParams;
				Out_GlowParams15_g170434 = Data15_g170434.GlowParams;
				Out_AtmoParams15_g170434= Data15_g170434.AtmoParams;
				Out_FadeParams15_g170434= Data15_g170434.FadeParams;
				Out_FormParams15_g170434 = Data15_g170434.FormParams;
				Out_FlowParams15_g170434 = Data15_g170434.FlowParams;
				}
				half4 Input_FormParams188_g170431 = Out_FormParams15_g170434;
				float temp_output_6_0_g170436 = saturate( (Input_FormParams188_g170431).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170436 = ( temp_output_6_0_g170436 + ( _SizeFadeElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170436 = temp_output_6_0_g170436;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170431 = staticSwitch14_g170436;
				#else
				float staticSwitch194_g170431 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170431 = lerp( 1.0 , staticSwitch194_g170431 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170431 = lerpResult213_g170431;
				float temp_output_189_0_g170431 = ( saturate( ( ( temp_output_9_0_g170435 / ( _SizeFadeDistMinValue - temp_output_7_0_g170435 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170431 );
				float3 appendResult200_g170431 = (float3(temp_output_189_0_g170431 , temp_output_189_0_g170431 , temp_output_189_0_g170431));
				float3 appendResult201_g170431 = (float3(1.0 , temp_output_189_0_g170431 , 1.0));
				float3 lerpResult202_g170431 = lerp( appendResult200_g170431 , appendResult201_g170431 , _SizeFadeScaleMode);
				float3 lerpResult184_g170431 = lerp( temp_cast_5 , lerpResult202_g170431 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170431 = ( lerpResult184_g170431 * Model_PositionOS147_g170431 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170431 = temp_output_167_0_g170431;
				#else
				float3 staticSwitch199_g170431 = Model_PositionOS147_g170431;
				#endif
				half3 Final_Position178_g170431 = staticSwitch199_g170431;
				float3 In_PositionOS16_g170433 = Final_Position178_g170431;
				float3 In_PositionWS16_g170433 = Out_PositionWS15_g170432;
				float3 In_PositionWO16_g170433 = Out_PositionWO15_g170432;
				float3 In_PositionRawOS16_g170433 = Out_PositionRawOS15_g170432;
				float3 In_PositionAddOS16_g170433 = Out_PositionAddOS15_g170432;
				float3 temp_output_210_24_g170431 = Out_PivotOS15_g170432;
				float3 In_PivotOS16_g170433 = temp_output_210_24_g170431;
				float3 In_PivotWS16_g170433 = Out_PivotWS15_g170432;
				float3 In_PivotWO16_g170433 = temp_output_210_19_g170431;
				float3 In_NormalOS16_g170433 = Out_NormalOS15_g170432;
				float3 In_NormalWS16_g170433 = Out_NormalWS15_g170432;
				float3 In_NormalRawOS16_g170433 = Out_NormalRawOS15_g170432;
				float3 In_NormalRawWS16_g170433 = Out_NormalRawWS15_g170432;
				float4 In_TangentOS16_g170433 = Out_TangentOS15_g170432;
				float3 In_ViewDirWS16_g170433 = Out_ViewDirWS15_g170432;
				float4 In_VertexData16_g170433 = Out_VertexData15_g170432;
				float4 In_PhaseData16_g170433 = Out_PhaseData15_g170432;
				float4 In_BoundsData16_g170433 = Out_BoundsData15_g170432;
				float4 In_RotationData16_g170433 = Out_RotationData15_g170432;
				{
				Data16_g170433.Dummy = In_Dummy16_g170433;
				Data16_g170433.PositionOS = In_PositionOS16_g170433;
				Data16_g170433.PositionWS = In_PositionWS16_g170433;
				Data16_g170433.PositionWO = In_PositionWO16_g170433;
				Data16_g170433.PositionRawOS = In_PositionRawOS16_g170433;
				Data16_g170433.PositionAddOS = In_PositionAddOS16_g170433;
				Data16_g170433.PivotOS = In_PivotOS16_g170433;
				Data16_g170433.PivotWS = In_PivotWS16_g170433;
				Data16_g170433.PivotWO = In_PivotWO16_g170433;
				Data16_g170433.NormalOS = In_NormalOS16_g170433;
				Data16_g170433.NormalWS = In_NormalWS16_g170433;
				Data16_g170433.NormalRawOS = In_NormalRawOS16_g170433;
				Data16_g170433.NormalRawWS = In_NormalRawWS16_g170433;
				Data16_g170433.TangentOS = In_TangentOS16_g170433;
				Data16_g170433.ViewDirWS = In_ViewDirWS16_g170433;
				Data16_g170433.VertexData = In_VertexData16_g170433;
				Data16_g170433.PhaseData = In_PhaseData16_g170433;
				Data16_g170433.BoundsData = In_BoundsData16_g170433;
				Data16_g170433.RotationData = In_RotationData16_g170433;
				}
				TVEModelData Data15_g170490 = Data16_g170433;
				float Out_Dummy15_g170490 = 0;
				float3 Out_PositionOS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170490 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170490 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170490 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170490 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170490 = float3( 0,0,0 );
				float4 Out_VertexData15_g170490 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170490 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170490 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170490 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170490 = Data15_g170490.Dummy;
				Out_PositionOS15_g170490 = Data15_g170490.PositionOS;
				Out_PositionWS15_g170490 = Data15_g170490.PositionWS;
				Out_PositionWO15_g170490 = Data15_g170490.PositionWO;
				Out_PositionRawOS15_g170490 = Data15_g170490.PositionRawOS;
				Out_PositionAddOS15_g170490 = Data15_g170490.PositionAddOS;
				Out_PivotOS15_g170490 = Data15_g170490.PivotOS;
				Out_PivotWS15_g170490 = Data15_g170490.PivotWS;
				Out_PivotWO15_g170490 = Data15_g170490.PivotWO;
				Out_NormalOS15_g170490 = Data15_g170490.NormalOS;
				Out_NormalWS15_g170490 = Data15_g170490.NormalWS;
				Out_NormalRawOS15_g170490 = Data15_g170490.NormalRawOS;
				Out_NormalRawWS15_g170490 = Data15_g170490.NormalRawWS;
				Out_TangentOS15_g170490 = Data15_g170490.TangentOS;
				Out_ViewDirWS15_g170490 = Data15_g170490.ViewDirWS;
				Out_VertexData15_g170490 = Data15_g170490.VertexData;
				Out_PhaseData15_g170490 = Data15_g170490.PhaseData;
				Out_BoundsData15_g170490 = Data15_g170490.BoundsData;
				Out_RotationData15_g170490 = Data15_g170490.RotationData;
				}
				float3 temp_output_2503_0_g170474 = Out_PositionOS15_g170490;
				float3 In_PositionOS16_g170491 = temp_output_2503_0_g170474;
				float3 temp_output_2503_16_g170474 = Out_PositionWS15_g170490;
				float3 In_PositionWS16_g170491 = temp_output_2503_16_g170474;
				float3 temp_output_2503_17_g170474 = Out_PositionWO15_g170490;
				float3 In_PositionWO16_g170491 = temp_output_2503_17_g170474;
				float3 In_PositionRawOS16_g170491 = Out_PositionRawOS15_g170490;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170474 = Out_VertexData15_g170490;
				half4 Model_VertexMasks518_g170474 = temp_output_2503_29_g170474;
				float4 break1689_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170475 = _motion_small_vert_mode;
				float temp_output_30_0_g170475 = ( break1689_g170474.x * break33_g170475.x );
				float temp_output_29_0_g170475 = ( break1689_g170474.y * break33_g170475.y );
				float temp_output_31_0_g170475 = ( break1689_g170474.z * break33_g170475.z );
				float temp_output_28_0_g170475 = ( temp_output_30_0_g170475 + temp_output_29_0_g170475 + temp_output_31_0_g170475 + ( break1689_g170474.w * break33_g170475.w ) );
				float temp_output_1727_0_g170474 = temp_output_28_0_g170475;
				float4 temp_output_2503_30_g170474 = Out_BoundsData15_g170490;
				half4 Model_BoundsData1322_g170474 = temp_output_2503_30_g170474;
				float4 break33_g170477 = _motion_small_proc_mode;
				float temp_output_30_0_g170477 = ( (Model_BoundsData1322_g170474).z * break33_g170477.x );
				float temp_output_29_0_g170477 = ( (Model_BoundsData1322_g170474).w * break33_g170477.y );
				float temp_output_1734_0_g170474 = ( temp_output_30_0_g170477 + temp_output_29_0_g170477 );
				float lerpResult1906_g170474 = lerp( temp_output_1727_0_g170474 , temp_output_1734_0_g170474 , _motion_small_mask_mode);
				float enc1805_g170474 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170474 = DecodeFloatToVector2( enc1805_g170474 );
				float2 break1804_g170474 = localDecodeFloatToVector21805_g170474;
				half Small_Mask_Legacy1806_g170474 = break1804_g170474.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170474 = Small_Mask_Legacy1806_g170474;
				#else
				float staticSwitch1800_g170474 = lerpResult1906_g170474;
				#endif
				float clampResult17_g170479 = clamp( staticSwitch1800_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170488 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170488 = ( clampResult17_g170479 - temp_output_7_0_g170488 );
				float temp_output_6_0_g170486 = saturate( ( ( temp_output_9_0_g170488 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170486 = ( temp_output_6_0_g170486 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170486 = temp_output_6_0_g170486;
				#endif
				half Small_Mask640_g170474 = staticSwitch14_g170486;
				float4 lerpResult836_g170510 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_MotionParams.w);
				half2 Global_WindDirWS2542_g170474 = ((lerpResult836_g170510).xy*2.0 + -1.0);
				half2 Input_WindDirWS803_g170505 = Global_WindDirWS2542_g170474;
				half3 Model_PositionWO162_g170474 = temp_output_2503_17_g170474;
				half3 Input_ModelPositionWO761_g170492 = Model_PositionWO162_g170474;
				float3 temp_output_2503_19_g170474 = Out_PivotWO15_g170490;
				half3 Model_PivotWO402_g170474 = temp_output_2503_19_g170474;
				half3 Input_ModelPivotsWO419_g170492 = Model_PivotWO402_g170474;
				half Input_MotionPivots629_g170492 = _MotionSmallPivotValue;
				float3 lerpResult771_g170492 = lerp( Input_ModelPositionWO761_g170492 , Input_ModelPivotsWO419_g170492 , Input_MotionPivots629_g170492);
				float4 temp_output_2503_27_g170474 = Out_PhaseData15_g170490;
				half4 Model_PhaseData489_g170474 = temp_output_2503_27_g170474;
				half4 Input_ModelMotionData763_g170492 = Model_PhaseData489_g170474;
				half Input_MotionPhase764_g170492 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170474 = ( lerpResult771_g170492 + ( (Input_ModelMotionData763_g170492).z * Input_MotionPhase764_g170492 * 5.0 ) );
				half3 Input_PositionWO419_g170505 = Small_Position1421_g170474;
				half Input_MotionTilling321_g170505 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170505 = ( -(Input_PositionWO419_g170505).xz * Input_MotionTilling321_g170505 * 0.005 );
				float2 temp_output_3_0_g170507 = Noise_Coord515_g170505;
				float2 temp_output_21_0_g170507 = Input_WindDirWS803_g170505;
				float lerpResult128_g170506 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170505 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170505 = ( lerpResult128_g170506 * 0.02 * Input_MotionSpeed62_g170505 );
				float temp_output_15_0_g170507 = Noise_Speed516_g170505;
				float temp_output_23_0_g170507 = frac( temp_output_15_0_g170507 );
				float4 lerpResult39_g170507 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170507 + ( temp_output_21_0_g170507 * temp_output_23_0_g170507 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170507 + ( temp_output_21_0_g170507 * frac( ( temp_output_15_0_g170507 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170507 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170505 = lerpResult39_g170507;
				half2 Noise_DirWS858_g170505 = ((temp_output_635_0_g170505).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170505 = _MotionSmallNoiseValue;
				half Global_WInd769_g170510 = (lerpResult836_g170510).z;
				TVEGlobalData Data15_g170498 = Data204_g170214;
				float Out_Dummy15_g170498 = 0;
				float4 Out_CoatParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170498 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170498 = Data15_g170498.Dummy;
				Out_CoatParams15_g170498 = Data15_g170498.CoatParams;
				Out_PaintParams15_g170498 = Data15_g170498.PaintParams;
				Out_GlowParams15_g170498 = Data15_g170498.GlowParams;
				Out_AtmoParams15_g170498= Data15_g170498.AtmoParams;
				Out_FadeParams15_g170498= Data15_g170498.FadeParams;
				Out_FormParams15_g170498 = Data15_g170498.FormParams;
				Out_FlowParams15_g170498 = Data15_g170498.FlowParams;
				}
				half4 Global_FlowParams2668_g170474 = Out_FlowParams15_g170498;
				half4 Input_GlobalFlow826_g170510 = Global_FlowParams2668_g170474;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170510 = saturate( (Input_GlobalFlow826_g170510).w );
				#else
				float staticSwitch612_g170510 = Global_WInd769_g170510;
				#endif
				float lerpResult853_g170510 = lerp( staticSwitch612_g170510 , saturate( (staticSwitch612_g170510*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170510 = _MotionIntensityValue;
				half Global_WindValue1855_g170474 = ( lerpResult853_g170510 * Input_MotionValue629_g170510 );
				half Input_WindValue881_g170505 = Global_WindValue1855_g170474;
				float lerpResult701_g170505 = lerp( 1.0 , Input_MotionNoise552_g170505 , Input_WindValue881_g170505);
				float2 lerpResult646_g170505 = lerp( Input_WindDirWS803_g170505 , Noise_DirWS858_g170505 , lerpResult701_g170505);
				half2 Small_DirWS817_g170505 = lerpResult646_g170505;
				float2 break823_g170505 = Small_DirWS817_g170505;
				half4 Noise_Params685_g170505 = temp_output_635_0_g170505;
				half Wind_Sinus820_g170505 = ( ((Noise_Params685_g170505).b*2.0 + -1.0) * Input_MotionNoise552_g170505 * 0.6 );
				float3 appendResult824_g170505 = (float3(break823_g170505.x , Wind_Sinus820_g170505 , break823_g170505.y));
				half Input_MotionDelay753_g170505 = _MotionSmallDelayValue;
				float lerpResult756_g170505 = lerp( 1.0 , ( Input_WindValue881_g170505 * Input_WindValue881_g170505 ) , Input_MotionDelay753_g170505);
				half Wind_Delay815_g170505 = lerpResult756_g170505;
				float3 appendResult825_g170505 = (float3(Wind_Delay815_g170505 , 1.0 , Wind_Delay815_g170505));
				float3 temp_output_827_0_g170505 = ( ( appendResult824_g170505 * Input_WindValue881_g170505 ) * appendResult825_g170505 );
				float2 break857_g170505 = Noise_DirWS858_g170505;
				float3 appendResult833_g170505 = (float3(break857_g170505.x , Wind_Sinus820_g170505 , break857_g170505.y));
				half Global_PushWave2675_g170474 = (Input_GlobalFlow826_g170510).z;
				half Input_PushWave890_g170505 = Global_PushWave2675_g170474;
				float2 temp_output_791_0_g170510 = ((Input_GlobalFlow826_g170510).xy*2.0 + -1.0);
				float temp_output_849_0_g170510 = saturate( length( temp_output_791_0_g170510 ) );
				half Global_PushAlpha1504_g170474 = temp_output_849_0_g170510;
				half Input_PushAlpha806_g170505 = ( Global_PushAlpha1504_g170474 * _MotionSmallPushValue );
				float3 lerpResult840_g170505 = lerp( temp_output_827_0_g170505 , ( appendResult833_g170505 * Input_PushWave890_g170505 ) , Input_PushAlpha806_g170505);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170505 = lerpResult840_g170505;
				#else
				float3 staticSwitch829_g170505 = temp_output_827_0_g170505;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half3 Small_Squash1489_g170474 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170505 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Motion789_g170474 = ( _MotionSmallIntensityValue * Small_Mask640_g170474 * Small_Squash1489_g170474 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170474 = Small_Motion789_g170474;
				#else
				float3 staticSwitch495_g170474 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170474 = temp_output_2503_16_g170474;
				half Global_DistMask1820_g170474 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170474 ) / _MotionDistValue ) ) );
				float4 break1710_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170476 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170476 = ( break1710_g170474.x * break33_g170476.x );
				float temp_output_29_0_g170476 = ( break1710_g170474.y * break33_g170476.y );
				float temp_output_31_0_g170476 = ( break1710_g170474.z * break33_g170476.z );
				float temp_output_28_0_g170476 = ( temp_output_30_0_g170476 + temp_output_29_0_g170476 + temp_output_31_0_g170476 + ( break1710_g170474.w * break33_g170476.w ) );
				float temp_output_1729_0_g170474 = temp_output_28_0_g170476;
				float4 break33_g170478 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170478 = ( (Model_BoundsData1322_g170474).z * break33_g170478.x );
				float temp_output_29_0_g170478 = ( (Model_BoundsData1322_g170474).w * break33_g170478.y );
				float temp_output_1735_0_g170474 = ( temp_output_30_0_g170478 + temp_output_29_0_g170478 );
				float lerpResult1908_g170474 = lerp( temp_output_1729_0_g170474 , temp_output_1735_0_g170474 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170474 = break1804_g170474.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170474 = Tiny_Mask_Legacy1807_g170474;
				#else
				float staticSwitch1810_g170474 = lerpResult1908_g170474;
				#endif
				float clampResult17_g170480 = clamp( staticSwitch1810_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170489 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170489 = ( clampResult17_g170480 - temp_output_7_0_g170489 );
				float temp_output_6_0_g170481 = saturate( ( ( temp_output_9_0_g170489 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170481 = ( temp_output_6_0_g170481 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170481 = temp_output_6_0_g170481;
				#endif
				half Tiny_Mask218_g170474 = staticSwitch14_g170481;
				float3 temp_output_2503_20_g170474 = Out_NormalOS15_g170490;
				half3 Model_NormalOS554_g170474 = temp_output_2503_20_g170474;
				half3 Input_NormalOS533_g170494 = Model_NormalOS554_g170474;
				half3 Tiny_Position2469_g170474 = Model_PositionWO162_g170474;
				half3 Input_PositionWO500_g170494 = Tiny_Position2469_g170474;
				half Input_MotionTilling321_g170494 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170496 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170494 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170494 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170494).xz * Input_MotionTilling321_g170494 * 0.005 ) + ( lerpResult128_g170496 * Input_MotionSpeed62_g170494 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170494 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170494 = lerp( ( Input_NormalOS533_g170494 * Flutter_Noise535_g170494 ) , Flutter_Noise535_g170494 , Input_MotionNoise542_g170494);
				half3 Input_ModelPositionWO761_g170493 = Model_PositionWO162_g170474;
				half3 Input_ModelPivotsWO419_g170493 = Model_PivotWO402_g170474;
				half Input_MotionPivots629_g170493 = _MotionBasePivotValue;
				float3 lerpResult771_g170493 = lerp( Input_ModelPositionWO761_g170493 , Input_ModelPivotsWO419_g170493 , Input_MotionPivots629_g170493);
				half4 Input_ModelMotionData763_g170493 = Model_PhaseData489_g170474;
				half Input_MotionPhase764_g170493 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170474 = ( lerpResult771_g170493 + ( (Input_ModelMotionData763_g170493).z * Input_MotionPhase764_g170493 * 5.0 ) );
				half3 Input_PositionWO419_g170499 = Base_Position1394_g170474;
				half Input_MotionTilling321_g170499 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170499 = ( -(Input_PositionWO419_g170499).xz * Input_MotionTilling321_g170499 * 0.005 );
				float2 temp_output_3_0_g170501 = Noise_Coord515_g170499;
				half2 Input_WindDirWS803_g170499 = Global_WindDirWS2542_g170474;
				float2 temp_output_21_0_g170501 = Input_WindDirWS803_g170499;
				float lerpResult128_g170500 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170499 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170499 = ( lerpResult128_g170500 * 0.02 * Input_MotionSpeed62_g170499 );
				float temp_output_15_0_g170501 = Noise_Speed516_g170499;
				float temp_output_23_0_g170501 = frac( temp_output_15_0_g170501 );
				float4 lerpResult39_g170501 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170501 + ( temp_output_21_0_g170501 * temp_output_23_0_g170501 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170501 + ( temp_output_21_0_g170501 * frac( ( temp_output_15_0_g170501 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170501 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170499 = lerpResult39_g170501;
				half4 Noise_Params685_g170499 = temp_output_635_0_g170499;
				half Input_WindValue853_g170499 = Global_WindValue1855_g170474;
				float temp_output_855_0_g170499 = ( (Noise_Params685_g170499).a * Input_WindValue853_g170499 );
				half Input_PushWave858_g170499 = Global_PushWave2675_g170474;
				half Input_PushAlpha806_g170499 = ( Global_PushAlpha1504_g170474 * _MotionBasePushValue );
				float lerpResult831_g170499 = lerp( temp_output_855_0_g170499 , Input_PushWave858_g170499 , Input_PushAlpha806_g170499);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170499 = lerpResult831_g170499;
				#else
				float staticSwitch828_g170499 = temp_output_855_0_g170499;
				#endif
				half Base_Wave1159_g170474 = staticSwitch828_g170499;
				float temp_output_888_0_g170505 = ( (Noise_Params685_g170505).b * Input_WindValue881_g170505 );
				float lerpResult867_g170505 = lerp( temp_output_888_0_g170505 , ( (Noise_Params685_g170505).b * Input_PushWave890_g170505 ) , Input_PushAlpha806_g170505);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170505 = lerpResult867_g170505;
				#else
				float staticSwitch886_g170505 = temp_output_888_0_g170505;
				#endif
				half Small_Wave1427_g170474 = staticSwitch886_g170505;
				float lerpResult2422_g170474 = lerp( Base_Wave1159_g170474 , Small_Wave1427_g170474 , _motion_small_mode);
				half Global_Wave1475_g170474 = lerpResult2422_g170474;
				half Input_GlobalWave546_g170494 = Global_Wave1475_g170474;
				float temp_output_548_0_g170494 = ( Input_GlobalWave546_g170494 * Input_GlobalWave546_g170494 );
				half Flutter_Wave556_g170494 = temp_output_548_0_g170494;
				half3 Tiny_Noise859_g170474 = ( lerpResult537_g170494 * Flutter_Wave556_g170494 );
				half3 Tiny_Flutter1451_g170474 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170474 * Tiny_Mask218_g170474 * Tiny_Noise859_g170474 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170474 = Tiny_Flutter1451_g170474;
				#else
				float3 staticSwitch414_g170474 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170474 = ( staticSwitch495_g170474 + staticSwitch414_g170474 );
				float3 In_PositionAddOS16_g170491 = Final_PositionADD1569_g170474;
				float3 temp_output_2503_24_g170474 = Out_PivotOS15_g170490;
				float3 In_PivotOS16_g170491 = temp_output_2503_24_g170474;
				float3 In_PivotWS16_g170491 = Out_PivotWS15_g170490;
				float3 In_PivotWO16_g170491 = temp_output_2503_19_g170474;
				float3 In_NormalOS16_g170491 = temp_output_2503_20_g170474;
				float3 In_NormalWS16_g170491 = Out_NormalWS15_g170490;
				float3 In_NormalRawOS16_g170491 = Out_NormalRawOS15_g170490;
				float3 In_NormalRawWS16_g170491 = Out_NormalRawWS15_g170490;
				float4 In_TangentOS16_g170491 = Out_TangentOS15_g170490;
				float3 In_ViewDirWS16_g170491 = Out_ViewDirWS15_g170490;
				float4 In_VertexData16_g170491 = temp_output_2503_29_g170474;
				float4 In_PhaseData16_g170491 = temp_output_2503_27_g170474;
				float4 In_BoundsData16_g170491 = temp_output_2503_30_g170474;
				float4 break748_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170483 = _motion_base_vert_mode;
				float temp_output_30_0_g170483 = ( break748_g170474.x * break33_g170483.x );
				float temp_output_29_0_g170483 = ( break748_g170474.y * break33_g170483.y );
				float temp_output_31_0_g170483 = ( break748_g170474.z * break33_g170483.z );
				float temp_output_28_0_g170483 = ( temp_output_30_0_g170483 + temp_output_29_0_g170483 + temp_output_31_0_g170483 + ( break748_g170474.w * break33_g170483.w ) );
				float temp_output_1731_0_g170474 = temp_output_28_0_g170483;
				float4 break33_g170484 = _motion_base_proc_mode;
				float temp_output_30_0_g170484 = ( (Model_BoundsData1322_g170474).z * break33_g170484.x );
				float temp_output_29_0_g170484 = ( (Model_BoundsData1322_g170474).w * break33_g170484.y );
				float temp_output_1733_0_g170474 = ( temp_output_30_0_g170484 + temp_output_29_0_g170484 );
				float lerpResult1904_g170474 = lerp( temp_output_1731_0_g170474 , temp_output_1733_0_g170474 , _motion_base_mask_mode);
				float clampResult17_g170482 = clamp( lerpResult1904_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170487 = ( clampResult17_g170482 - temp_output_7_0_g170487 );
				float temp_output_6_0_g170485 = saturate( ( ( temp_output_9_0_g170487 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170485 = ( temp_output_6_0_g170485 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170485 = temp_output_6_0_g170485;
				#endif
				half Base_Mask217_g170474 = staticSwitch14_g170485;
				half2 Noise_DirWS825_g170499 = ((temp_output_635_0_g170499).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170499 = _MotionBaseNoiseValue;
				float lerpResult701_g170499 = lerp( 1.0 , Input_MotionNoise552_g170499 , Input_WindValue853_g170499);
				float2 lerpResult646_g170499 = lerp( Input_WindDirWS803_g170499 , Noise_DirWS825_g170499 , lerpResult701_g170499);
				half Input_MotionDelay753_g170499 = _MotionBaseDelayValue;
				float lerpResult756_g170499 = lerp( 1.0 , ( Input_WindValue853_g170499 * Input_WindValue853_g170499 ) , Input_MotionDelay753_g170499);
				half Wind_Delay815_g170499 = lerpResult756_g170499;
				float2 temp_output_809_0_g170499 = ( lerpResult646_g170499 * Input_WindValue853_g170499 * Wind_Delay815_g170499 );
				half2 Global_PushDirWS1972_g170474 = temp_output_791_0_g170510;
				half2 Input_PushDirWS807_g170499 = Global_PushDirWS1972_g170474;
				float2 lerpResult811_g170499 = lerp( temp_output_809_0_g170499 , Input_PushDirWS807_g170499 , Input_PushAlpha806_g170499);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170499 = lerpResult811_g170499;
				#else
				float2 staticSwitch808_g170499 = temp_output_809_0_g170499;
				#endif
				float2 break83_g170504 = staticSwitch808_g170499;
				float3 appendResult79_g170504 = (float3(break83_g170504.x , 0.0 , break83_g170504.y));
				half2 Base_Bending893_g170474 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170504 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170474 = ( _MotionBaseIntensityValue * Base_Mask217_g170474 * Base_Bending893_g170474 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170474 = Base_Motion1440_g170474;
				#else
				float2 staticSwitch2384_g170474 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170474 = (float4(staticSwitch2384_g170474 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170474 = appendResult2023_g170474;
				float4 In_RotationData16_g170491 = Final_RotationData1570_g170474;
				{
				Data16_g170491.Dummy = In_Dummy16_g170491;
				Data16_g170491.PositionOS = In_PositionOS16_g170491;
				Data16_g170491.PositionWS = In_PositionWS16_g170491;
				Data16_g170491.PositionWO = In_PositionWO16_g170491;
				Data16_g170491.PositionRawOS = In_PositionRawOS16_g170491;
				Data16_g170491.PositionAddOS = In_PositionAddOS16_g170491;
				Data16_g170491.PivotOS = In_PivotOS16_g170491;
				Data16_g170491.PivotWS = In_PivotWS16_g170491;
				Data16_g170491.PivotWO = In_PivotWO16_g170491;
				Data16_g170491.NormalOS = In_NormalOS16_g170491;
				Data16_g170491.NormalWS = In_NormalWS16_g170491;
				Data16_g170491.NormalRawOS = In_NormalRawOS16_g170491;
				Data16_g170491.NormalRawWS = In_NormalRawWS16_g170491;
				Data16_g170491.TangentOS = In_TangentOS16_g170491;
				Data16_g170491.ViewDirWS = In_ViewDirWS16_g170491;
				Data16_g170491.VertexData = In_VertexData16_g170491;
				Data16_g170491.PhaseData = In_PhaseData16_g170491;
				Data16_g170491.BoundsData = In_BoundsData16_g170491;
				Data16_g170491.RotationData = In_RotationData16_g170491;
				}
				TVEModelData Data15_g170720 = Data16_g170491;
				float Out_Dummy15_g170720 = 0;
				float3 Out_PositionOS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170720 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170720 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170720 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170720 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170720 = float3( 0,0,0 );
				float4 Out_VertexData15_g170720 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170720 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170720 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170720 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170720 = Data15_g170720.Dummy;
				Out_PositionOS15_g170720 = Data15_g170720.PositionOS;
				Out_PositionWS15_g170720 = Data15_g170720.PositionWS;
				Out_PositionWO15_g170720 = Data15_g170720.PositionWO;
				Out_PositionRawOS15_g170720 = Data15_g170720.PositionRawOS;
				Out_PositionAddOS15_g170720 = Data15_g170720.PositionAddOS;
				Out_PivotOS15_g170720 = Data15_g170720.PivotOS;
				Out_PivotWS15_g170720 = Data15_g170720.PivotWS;
				Out_PivotWO15_g170720 = Data15_g170720.PivotWO;
				Out_NormalOS15_g170720 = Data15_g170720.NormalOS;
				Out_NormalWS15_g170720 = Data15_g170720.NormalWS;
				Out_NormalRawOS15_g170720 = Data15_g170720.NormalRawOS;
				Out_NormalRawWS15_g170720 = Data15_g170720.NormalRawWS;
				Out_TangentOS15_g170720 = Data15_g170720.TangentOS;
				Out_ViewDirWS15_g170720 = Data15_g170720.ViewDirWS;
				Out_VertexData15_g170720 = Data15_g170720.VertexData;
				Out_PhaseData15_g170720 = Data15_g170720.PhaseData;
				Out_BoundsData15_g170720 = Data15_g170720.BoundsData;
				Out_RotationData15_g170720 = Data15_g170720.RotationData;
				}
				half3 Model_PositionOS147_g170719 = Out_PositionOS15_g170720;
				half3 Input_False58_g170722 = Model_PositionOS147_g170719;
				half3 VertexPos40_g170723 = Model_PositionOS147_g170719;
				half3 VertexPos40_g170724 = VertexPos40_g170723;
				float3 appendResult74_g170724 = (float3(VertexPos40_g170724.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170724 = appendResult74_g170724;
				float3 break84_g170724 = VertexPos40_g170724;
				float3 appendResult81_g170724 = (float3(0.0 , break84_g170724.y , break84_g170724.z));
				half3 VertexPosOtherAxis82_g170724 = appendResult81_g170724;
				float4 temp_output_1567_33_g170719 = Out_RotationData15_g170720;
				half4 Model_VertexBend1569_g170719 = temp_output_1567_33_g170719;
				half2 Angle44_g170723 = (Model_VertexBend1569_g170719).xy;
				half Angle44_g170724 = (Angle44_g170723).y;
				half3 VertexPos40_g170725 = ( VertexPosRotationAxis50_g170724 + ( VertexPosOtherAxis82_g170724 * cos( Angle44_g170724 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170724 ) * sin( Angle44_g170724 ) ) );
				float3 appendResult74_g170725 = (float3(0.0 , 0.0 , VertexPos40_g170725.z));
				half3 VertexPosRotationAxis50_g170725 = appendResult74_g170725;
				float3 break84_g170725 = VertexPos40_g170725;
				float3 appendResult81_g170725 = (float3(break84_g170725.x , break84_g170725.y , 0.0));
				half3 VertexPosOtherAxis82_g170725 = appendResult81_g170725;
				half Angle44_g170725 = -(Angle44_g170723).x;
				half3 Input_True57_g170722 = ( VertexPosRotationAxis50_g170725 + ( VertexPosOtherAxis82_g170725 * cos( Angle44_g170725 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170725 ) * sin( Angle44_g170725 ) ) );
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170722 = Input_True57_g170722;
				#else
				float3 staticSwitch65_g170722 = Input_False58_g170722;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170722 = Input_True57_g170722;
				#else
				float3 staticSwitch69_g170722 = staticSwitch65_g170722;
				#endif
				float3 temp_output_1578_0_g170719 = staticSwitch69_g170722;
				float3 temp_output_1567_31_g170719 = Out_PositionAddOS15_g170720;
				half3 Model_PositionADD1568_g170719 = temp_output_1567_31_g170719;
				half3 Final_PositionOS178_g170719 = ( temp_output_1578_0_g170719 + Model_PositionADD1568_g170719 );
				float3 In_PositionOS16_g170721 = Final_PositionOS178_g170719;
				float3 In_PositionWS16_g170721 = Out_PositionWS15_g170720;
				float3 In_PositionWO16_g170721 = Out_PositionWO15_g170720;
				float3 In_PositionRawOS16_g170721 = Out_PositionRawOS15_g170720;
				float3 In_PositionAddOS16_g170721 = temp_output_1567_31_g170719;
				float3 In_PivotOS16_g170721 = Out_PivotOS15_g170720;
				float3 In_PivotWS16_g170721 = Out_PivotWS15_g170720;
				float3 In_PivotWO16_g170721 = Out_PivotWO15_g170720;
				float3 In_NormalOS16_g170721 = Out_NormalOS15_g170720;
				float3 In_NormalWS16_g170721 = Out_NormalWS15_g170720;
				float3 In_NormalRawOS16_g170721 = Out_NormalRawOS15_g170720;
				float3 In_NormalRawWS16_g170721 = Out_NormalRawWS15_g170720;
				float4 In_TangentOS16_g170721 = Out_TangentOS15_g170720;
				float3 In_ViewDirWS16_g170721 = Out_ViewDirWS15_g170720;
				float4 In_VertexData16_g170721 = Out_VertexData15_g170720;
				float4 In_PhaseData16_g170721 = Out_PhaseData15_g170720;
				float4 In_BoundsData16_g170721 = Out_BoundsData15_g170720;
				float4 In_RotationData16_g170721 = temp_output_1567_33_g170719;
				{
				Data16_g170721.Dummy = In_Dummy16_g170721;
				Data16_g170721.PositionOS = In_PositionOS16_g170721;
				Data16_g170721.PositionWS = In_PositionWS16_g170721;
				Data16_g170721.PositionWO = In_PositionWO16_g170721;
				Data16_g170721.PositionRawOS = In_PositionRawOS16_g170721;
				Data16_g170721.PositionAddOS = In_PositionAddOS16_g170721;
				Data16_g170721.PivotOS = In_PivotOS16_g170721;
				Data16_g170721.PivotWS = In_PivotWS16_g170721;
				Data16_g170721.PivotWO = In_PivotWO16_g170721;
				Data16_g170721.NormalOS = In_NormalOS16_g170721;
				Data16_g170721.NormalWS = In_NormalWS16_g170721;
				Data16_g170721.NormalRawOS = In_NormalRawOS16_g170721;
				Data16_g170721.NormalRawWS = In_NormalRawWS16_g170721;
				Data16_g170721.TangentOS = In_TangentOS16_g170721;
				Data16_g170721.ViewDirWS = In_ViewDirWS16_g170721;
				Data16_g170721.VertexData = In_VertexData16_g170721;
				Data16_g170721.PhaseData = In_PhaseData16_g170721;
				Data16_g170721.BoundsData = In_BoundsData16_g170721;
				Data16_g170721.RotationData = In_RotationData16_g170721;
				}
				TVEModelData Data15_g170744 = Data16_g170721;
				float Out_Dummy15_g170744 = 0;
				float3 Out_PositionOS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170744 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170744 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170744 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170744 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170744 = float3( 0,0,0 );
				float4 Out_VertexData15_g170744 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170744 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170744 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170744 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170744 = Data15_g170744.Dummy;
				Out_PositionOS15_g170744 = Data15_g170744.PositionOS;
				Out_PositionWS15_g170744 = Data15_g170744.PositionWS;
				Out_PositionWO15_g170744 = Data15_g170744.PositionWO;
				Out_PositionRawOS15_g170744 = Data15_g170744.PositionRawOS;
				Out_PositionAddOS15_g170744 = Data15_g170744.PositionAddOS;
				Out_PivotOS15_g170744 = Data15_g170744.PivotOS;
				Out_PivotWS15_g170744 = Data15_g170744.PivotWS;
				Out_PivotWO15_g170744 = Data15_g170744.PivotWO;
				Out_NormalOS15_g170744 = Data15_g170744.NormalOS;
				Out_NormalWS15_g170744 = Data15_g170744.NormalWS;
				Out_NormalRawOS15_g170744 = Data15_g170744.NormalRawOS;
				Out_NormalRawWS15_g170744 = Data15_g170744.NormalRawWS;
				Out_TangentOS15_g170744 = Data15_g170744.TangentOS;
				Out_ViewDirWS15_g170744 = Data15_g170744.ViewDirWS;
				Out_VertexData15_g170744 = Data15_g170744.VertexData;
				Out_PhaseData15_g170744 = Data15_g170744.PhaseData;
				Out_BoundsData15_g170744 = Data15_g170744.BoundsData;
				Out_RotationData15_g170744 = Data15_g170744.RotationData;
				}
				float3 In_PositionOS16_g170745 = Out_PositionOS15_g170744;
				float3 In_PositionWS16_g170745 = Out_PositionWS15_g170744;
				float3 temp_output_1567_17_g170743 = Out_PositionWO15_g170744;
				float3 In_PositionWO16_g170745 = temp_output_1567_17_g170743;
				float3 temp_output_1567_26_g170743 = Out_PositionRawOS15_g170744;
				float3 In_PositionRawOS16_g170745 = temp_output_1567_26_g170743;
				float3 In_PositionAddOS16_g170745 = Out_PositionAddOS15_g170744;
				float3 In_PivotOS16_g170745 = Out_PivotOS15_g170744;
				float3 In_PivotWS16_g170745 = Out_PivotWS15_g170744;
				float3 In_PivotWO16_g170745 = Out_PivotWO15_g170744;
				half3 Model_NormalOS1568_g170743 = Out_NormalOS15_g170744;
				float3 lerpResult1589_g170743 = lerp( Model_NormalOS1568_g170743 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170743 = temp_output_1567_26_g170743;
				float3 normalizeResult1594_g170743 = ASESafeNormalize( ( Model_PositionRAW1592_g170743 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170743 = lerp( lerpResult1589_g170743 , normalizeResult1594_g170743 , _NormalSphereValue);
				half3 Input_False58_g170758 = lerpResult1585_g170743;
				half3 VertexPos40_g170747 = lerpResult1585_g170743;
				half3 VertexPos40_g170748 = VertexPos40_g170747;
				float3 appendResult74_g170748 = (float3(VertexPos40_g170748.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170748 = appendResult74_g170748;
				float3 break84_g170748 = VertexPos40_g170748;
				float3 appendResult81_g170748 = (float3(0.0 , break84_g170748.y , break84_g170748.z));
				half3 VertexPosOtherAxis82_g170748 = appendResult81_g170748;
				float4 temp_output_1567_33_g170743 = Out_RotationData15_g170744;
				half4 Model_RotationData1583_g170743 = temp_output_1567_33_g170743;
				half2 Angle44_g170747 = Model_RotationData1583_g170743.xy;
				half Angle44_g170748 = (Angle44_g170747).y;
				half3 VertexPos40_g170749 = ( VertexPosRotationAxis50_g170748 + ( VertexPosOtherAxis82_g170748 * cos( Angle44_g170748 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170748 ) * sin( Angle44_g170748 ) ) );
				float3 appendResult74_g170749 = (float3(0.0 , 0.0 , VertexPos40_g170749.z));
				half3 VertexPosRotationAxis50_g170749 = appendResult74_g170749;
				float3 break84_g170749 = VertexPos40_g170749;
				float3 appendResult81_g170749 = (float3(break84_g170749.x , break84_g170749.y , 0.0));
				half3 VertexPosOtherAxis82_g170749 = appendResult81_g170749;
				half Angle44_g170749 = -(Angle44_g170747).x;
				float3 lerpResult1591_g170743 = lerp( lerpResult1585_g170743 , ( VertexPosRotationAxis50_g170749 + ( VertexPosOtherAxis82_g170749 * cos( Angle44_g170749 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170749 ) * sin( Angle44_g170749 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170758 = lerpResult1591_g170743;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170758 = Input_True57_g170758;
				#else
				float3 staticSwitch65_g170758 = Input_False58_g170758;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170758 = Input_True57_g170758;
				#else
				float3 staticSwitch69_g170758 = staticSwitch65_g170758;
				#endif
				float3 temp_output_1715_0_g170743 = staticSwitch69_g170758;
				float4 temp_output_1567_29_g170743 = Out_VertexData15_g170744;
				half4 Model_VertexData1608_g170743 = temp_output_1567_29_g170743;
				float4 break1683_g170743 = Model_VertexData1608_g170743;
				float4 break33_g170750 = _normal_vert_mode;
				float temp_output_30_0_g170750 = ( break1683_g170743.x * break33_g170750.x );
				float temp_output_29_0_g170750 = ( break1683_g170743.y * break33_g170750.y );
				float temp_output_31_0_g170750 = ( break1683_g170743.z * break33_g170750.z );
				float temp_output_28_0_g170750 = ( temp_output_30_0_g170750 + temp_output_29_0_g170750 + temp_output_31_0_g170750 + ( break1683_g170743.w * break33_g170750.w ) );
				float clampResult17_g170751 = clamp( temp_output_28_0_g170750 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170755 = _NormalMeshRemap.x;
				float temp_output_9_0_g170755 = ( clampResult17_g170751 - temp_output_7_0_g170755 );
				float lerpResult1695_g170743 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170755 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170752 = lerpResult1695_g170743;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170752 = ( temp_output_6_0_g170752 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170752 = temp_output_6_0_g170752;
				#endif
				float temp_output_1690_0_g170743 = staticSwitch14_g170752;
				half Normal_MeskMask1691_g170743 = temp_output_1690_0_g170743;
				half Normal_Proj_Mask1647_g170743 = 1.0;
				float temp_output_1699_0_g170743 = ( Normal_MeskMask1691_g170743 * Normal_Proj_Mask1647_g170743 );
				float3 lerpResult1670_g170743 = lerp( Model_NormalOS1568_g170743 , temp_output_1715_0_g170743 , temp_output_1699_0_g170743);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170743 = lerpResult1670_g170743;
				#else
				float3 staticSwitch1716_g170743 = Model_NormalOS1568_g170743;
				#endif
				half3 Final_NormalOS178_g170743 = staticSwitch1716_g170743;
				float3 In_NormalOS16_g170745 = Final_NormalOS178_g170743;
				float3 temp_output_1567_21_g170743 = Out_NormalWS15_g170744;
				float3 In_NormalWS16_g170745 = temp_output_1567_21_g170743;
				float3 In_NormalRawOS16_g170745 = Out_NormalRawOS15_g170744;
				float3 In_NormalRawWS16_g170745 = Out_NormalRawWS15_g170744;
				float4 In_TangentOS16_g170745 = Out_TangentOS15_g170744;
				float3 In_ViewDirWS16_g170745 = Out_ViewDirWS15_g170744;
				float4 In_VertexData16_g170745 = temp_output_1567_29_g170743;
				float4 In_PhaseData16_g170745 = Out_PhaseData15_g170744;
				float4 In_BoundsData16_g170745 = Out_BoundsData15_g170744;
				float4 In_RotationData16_g170745 = temp_output_1567_33_g170743;
				{
				Data16_g170745.Dummy = In_Dummy16_g170745;
				Data16_g170745.PositionOS = In_PositionOS16_g170745;
				Data16_g170745.PositionWS = In_PositionWS16_g170745;
				Data16_g170745.PositionWO = In_PositionWO16_g170745;
				Data16_g170745.PositionRawOS = In_PositionRawOS16_g170745;
				Data16_g170745.PositionAddOS = In_PositionAddOS16_g170745;
				Data16_g170745.PivotOS = In_PivotOS16_g170745;
				Data16_g170745.PivotWS = In_PivotWS16_g170745;
				Data16_g170745.PivotWO = In_PivotWO16_g170745;
				Data16_g170745.NormalOS = In_NormalOS16_g170745;
				Data16_g170745.NormalWS = In_NormalWS16_g170745;
				Data16_g170745.NormalRawOS = In_NormalRawOS16_g170745;
				Data16_g170745.NormalRawWS = In_NormalRawWS16_g170745;
				Data16_g170745.TangentOS = In_TangentOS16_g170745;
				Data16_g170745.ViewDirWS = In_ViewDirWS16_g170745;
				Data16_g170745.VertexData = In_VertexData16_g170745;
				Data16_g170745.PhaseData = In_PhaseData16_g170745;
				Data16_g170745.BoundsData = In_BoundsData16_g170745;
				Data16_g170745.RotationData = In_RotationData16_g170745;
				}
				TVEModelData Data15_g170760 = Data16_g170745;
				float Out_Dummy15_g170760 = 0;
				float3 Out_PositionOS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170760 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170760 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170760 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170760 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170760 = float3( 0,0,0 );
				float4 Out_VertexData15_g170760 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170760 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170760 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170760 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170760 = Data15_g170760.Dummy;
				Out_PositionOS15_g170760 = Data15_g170760.PositionOS;
				Out_PositionWS15_g170760 = Data15_g170760.PositionWS;
				Out_PositionWO15_g170760 = Data15_g170760.PositionWO;
				Out_PositionRawOS15_g170760 = Data15_g170760.PositionRawOS;
				Out_PositionAddOS15_g170760 = Data15_g170760.PositionAddOS;
				Out_PivotOS15_g170760 = Data15_g170760.PivotOS;
				Out_PivotWS15_g170760 = Data15_g170760.PivotWS;
				Out_PivotWO15_g170760 = Data15_g170760.PivotWO;
				Out_NormalOS15_g170760 = Data15_g170760.NormalOS;
				Out_NormalWS15_g170760 = Data15_g170760.NormalWS;
				Out_NormalRawOS15_g170760 = Data15_g170760.NormalRawOS;
				Out_NormalRawWS15_g170760 = Data15_g170760.NormalRawWS;
				Out_TangentOS15_g170760 = Data15_g170760.TangentOS;
				Out_ViewDirWS15_g170760 = Data15_g170760.ViewDirWS;
				Out_VertexData15_g170760 = Data15_g170760.VertexData;
				Out_PhaseData15_g170760 = Data15_g170760.PhaseData;
				Out_BoundsData15_g170760 = Data15_g170760.BoundsData;
				Out_RotationData15_g170760 = Data15_g170760.RotationData;
				}
				float3 temp_output_217_24_g170759 = Out_PivotOS15_g170760;
				float3 In_PositionOS16_g170761 = ( Out_PositionOS15_g170760 + temp_output_217_24_g170759 );
				float3 In_PositionWS16_g170761 = Out_PositionWS15_g170760;
				float3 In_PositionWO16_g170761 = Out_PositionWO15_g170760;
				float3 In_PositionRawOS16_g170761 = Out_PositionRawOS15_g170760;
				float3 In_PositionAddOS16_g170761 = Out_PositionAddOS15_g170760;
				float3 In_PivotOS16_g170761 = temp_output_217_24_g170759;
				float3 In_PivotWS16_g170761 = Out_PivotWS15_g170760;
				float3 In_PivotWO16_g170761 = Out_PivotWO15_g170760;
				float3 In_NormalOS16_g170761 = Out_NormalOS15_g170760;
				float3 In_NormalWS16_g170761 = Out_NormalWS15_g170760;
				float3 In_NormalRawOS16_g170761 = Out_NormalRawOS15_g170760;
				float3 In_NormalRawWS16_g170761 = Out_NormalRawWS15_g170760;
				float4 In_TangentOS16_g170761 = Out_TangentOS15_g170760;
				float3 In_ViewDirWS16_g170761 = Out_ViewDirWS15_g170760;
				float4 In_VertexData16_g170761 = Out_VertexData15_g170760;
				float4 In_PhaseData16_g170761 = Out_PhaseData15_g170760;
				float4 In_BoundsData16_g170761 = Out_BoundsData15_g170760;
				float4 In_RotationData16_g170761 = Out_RotationData15_g170760;
				{
				Data16_g170761.Dummy = In_Dummy16_g170761;
				Data16_g170761.PositionOS = In_PositionOS16_g170761;
				Data16_g170761.PositionWS = In_PositionWS16_g170761;
				Data16_g170761.PositionWO = In_PositionWO16_g170761;
				Data16_g170761.PositionRawOS = In_PositionRawOS16_g170761;
				Data16_g170761.PositionAddOS = In_PositionAddOS16_g170761;
				Data16_g170761.PivotOS = In_PivotOS16_g170761;
				Data16_g170761.PivotWS = In_PivotWS16_g170761;
				Data16_g170761.PivotWO = In_PivotWO16_g170761;
				Data16_g170761.NormalOS = In_NormalOS16_g170761;
				Data16_g170761.NormalWS = In_NormalWS16_g170761;
				Data16_g170761.NormalRawOS = In_NormalRawOS16_g170761;
				Data16_g170761.NormalRawWS = In_NormalRawWS16_g170761;
				Data16_g170761.TangentOS = In_TangentOS16_g170761;
				Data16_g170761.ViewDirWS = In_ViewDirWS16_g170761;
				Data16_g170761.VertexData = In_VertexData16_g170761;
				Data16_g170761.PhaseData = In_PhaseData16_g170761;
				Data16_g170761.BoundsData = In_BoundsData16_g170761;
				Data16_g170761.RotationData = In_RotationData16_g170761;
				}
				TVEModelData Data15_g170774 = Data16_g170761;
				float Out_Dummy15_g170774 = 0;
				float3 Out_PositionOS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170774 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170774 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170774 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170774 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170774 = float3( 0,0,0 );
				float4 Out_VertexData15_g170774 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170774 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170774 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170774 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170774 = Data15_g170774.Dummy;
				Out_PositionOS15_g170774 = Data15_g170774.PositionOS;
				Out_PositionWS15_g170774 = Data15_g170774.PositionWS;
				Out_PositionWO15_g170774 = Data15_g170774.PositionWO;
				Out_PositionRawOS15_g170774 = Data15_g170774.PositionRawOS;
				Out_PositionAddOS15_g170774 = Data15_g170774.PositionAddOS;
				Out_PivotOS15_g170774 = Data15_g170774.PivotOS;
				Out_PivotWS15_g170774 = Data15_g170774.PivotWS;
				Out_PivotWO15_g170774 = Data15_g170774.PivotWO;
				Out_NormalOS15_g170774 = Data15_g170774.NormalOS;
				Out_NormalWS15_g170774 = Data15_g170774.NormalWS;
				Out_NormalRawOS15_g170774 = Data15_g170774.NormalRawOS;
				Out_NormalRawWS15_g170774 = Data15_g170774.NormalRawWS;
				Out_TangentOS15_g170774 = Data15_g170774.TangentOS;
				Out_ViewDirWS15_g170774 = Data15_g170774.ViewDirWS;
				Out_VertexData15_g170774 = Data15_g170774.VertexData;
				Out_PhaseData15_g170774 = Data15_g170774.PhaseData;
				Out_BoundsData15_g170774 = Data15_g170774.BoundsData;
				Out_RotationData15_g170774 = Data15_g170774.RotationData;
				}
				float3 temp_output_31_0_g170771 = Out_PositionOS15_g170774;
				float3 temp_output_6_0_g170785 = ( temp_output_31_0_g170771 + _DisableSRPBatcher );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170785 = ( temp_output_6_0_g170785 + ( 0.0 * 0.0 ) );
				#else
				float3 staticSwitch14_g170785 = temp_output_6_0_g170785;
				#endif
				
				output.ase_texcoord7.xyz = vertexToFrag73_g170196;
				output.ase_texcoord8.xyz = vertexToFrag76_g170196;
				float3 ase_tangentWS = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				float ase_tangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_bitangentWS = cross( ase_normalWS, ase_tangentWS ) * ase_tangentSign;
				output.ase_texcoord9.xyz = ase_bitangentWS;
				float temp_output_6_0_g170497 = ( _MotionHighlightValue * Global_DistMask1820_g170474 * ( Tiny_Mask218_g170474 * Tiny_Mask218_g170474 ) * ( Global_Wave1475_g170474 * Global_Wave1475_g170474 * Global_Wave1475_g170474 * Global_Wave1475_g170474 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Wave_Mask4324 = staticSwitch14_g170497;
				float4 appendResult23_g170573 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask4324));
				float4 vertexToFrag24_g170573 = appendResult23_g170573;
				output.ase_texcoord10 = vertexToFrag24_g170573;
				
				output.ase_texcoord6 = inputMesh.ase_texcoord;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord7.w = 0;
				output.ase_texcoord8.w = 0;
				output.ase_texcoord9.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = staticSwitch14_g170785;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170774;
				inputMesh.tangentOS = Out_TangentOS15_g170774;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.clipPosV = output.positionCS;
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				output.uv1 = inputMesh.uv1;
				output.uv2 = inputMesh.uv2;
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput,
						OUTPUT_GBUFFER(outGBuffer)
						#ifdef _DEPTHOFFSET_ON
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
						)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );

				float3 PositionRWS = packedInput.positionRWS;
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float4 ClipPos = packedInput.clipPosV;
				float4 ScreenPos = ComputeScreenPos( packedInput.clipPosV, _ProjectionParams.x );

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = PositionRWS;
				input.tangentToWorld = BuildTangentToWorld(TangentWS, NormalWS);
				input.texCoord1 = packedInput.uv1.xyzw;
				input.texCoord2 = packedInput.uv2.xyzw;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half IsFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);
				
				SurfaceData surfaceData;
				BuiltinData builtinData;

				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;
				float localBreakData4_g170777 = ( 0.0 );
				float localCompData3_g170764 = ( 0.0 );
				TVEVisualData Data3_g170764 = (TVEVisualData)0;
				half Dummy145_g170762 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170764 = Dummy145_g170762;
				float localBreakData4_g170763 = ( 0.0 );
				float localCompData3_g170732 = ( 0.0 );
				TVEVisualData Data3_g170732 = (TVEVisualData)0;
				half Dummy145_g170727 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170732 = Dummy145_g170727;
				float localBreakData4_g170731 = ( 0.0 );
				float localCompData3_g170709 = ( 0.0 );
				TVEVisualData Data3_g170709 = (TVEVisualData)0;
				half Dummy594_g170706 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170709 = Dummy594_g170706;
				float localBreakData4_g170708 = ( 0.0 );
				float localCompData3_g170692 = ( 0.0 );
				TVEVisualData Data3_g170692 = (TVEVisualData)0;
				half Dummy594_g170691 = ( _CutoutCategory + _CutoutEnd + _CutoutBakeMode );
				float In_Dummy3_g170692 = Dummy594_g170691;
				float localBreakData4_g170694 = ( 0.0 );
				float localCompData3_g170664 = ( 0.0 );
				TVEVisualData Data3_g170664 = (TVEVisualData)0;
				half Dummy594_g170662 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170664 = Dummy594_g170662;
				float localBreakData4_g170663 = ( 0.0 );
				float localCompData3_g170628 = ( 0.0 );
				TVEVisualData Data3_g170628 = (TVEVisualData)0;
				half Dummy594_g170625 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170628 = Dummy594_g170625;
				float localBreakData4_g170626 = ( 0.0 );
				float localCompData3_g170624 = ( 0.0 );
				TVEVisualData Data3_g170624 = (TVEVisualData)0;
				float In_Dummy3_g170624 = 0.0;
				float localBreakData4_g170623 = ( 0.0 );
				float localCompData3_g170601 = ( 0.0 );
				TVEVisualData Data3_g170601 = (TVEVisualData)0;
				half Dummy205_g170598 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170601 = Dummy205_g170598;
				float localBreakData4_g170600 = ( 0.0 );
				float localCompData3_g170578 = ( 0.0 );
				TVEVisualData Data3_g170578 = (TVEVisualData)0;
				half Dummy205_g170574 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170578 = Dummy205_g170574;
				float localBreakData4_g170579 = ( 0.0 );
				float localCompData3_g170567 = ( 0.0 );
				TVEVisualData Data3_g170567 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170567 = Dummy220_g170564;
				float localBreakData4_g170566 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170447 = ( 0.0 );
				TVEVisualData Data3_g170447 = (TVEVisualData)0;
				half4 Dummy944_g170438 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170447 = Dummy944_g170438.x;
				float localBreakData4_g170446 = ( 0.0 );
				float localCompData3_g170415 = ( 0.0 );
				TVEVisualData Data3_g170415 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170415 = Dummy946_g170394.x;
				float localBreakData4_g170405 = ( 0.0 );
				float localCompData3_g170387 = ( 0.0 );
				TVEVisualData Data3_g170387 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170387 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170380) = _MainAlbedoTex;
				float localFilterTexture19_g170383 = ( 0.0 );
				SamplerState SS19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170383 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170383 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170383 = SamplerDefault19_g170383;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170383 = SamplerDefault19_g170383;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170383 = SamplerPoint19_g170383;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170383 = SamplerLow19_g170383;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170383 = SamplerMedium19_g170383;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170383 = SamplerHigh19_g170383;
				#endif
				}
				SamplerState Sampler276_g170380 = SS19_g170383;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170380 = Local_Coords180_g170372;
				half4 Coords276_g170380 = temp_output_37_0_g170380;
				half2 TexCoord276_g170380 = packedInput.ase_texcoord6.xy;
				half4 localSampleMain276_g170380 = SampleMain( Texture276_g170380 , Sampler276_g170380 , Coords276_g170380 , TexCoord276_g170380 );
				TEXTURE2D(Texture275_g170380) = _MainAlbedoTex;
				SamplerState Sampler275_g170380 = SS19_g170383;
				half4 Coords275_g170380 = temp_output_37_0_g170380;
				half2 TexCoord275_g170380 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170380 = SampleExtra( Texture275_g170380 , Sampler275_g170380 , Coords275_g170380 , TexCoord275_g170380 );
				TEXTURE2D(Texture238_g170380) = _MainAlbedoTex;
				SamplerState Sampler238_g170380 = SS19_g170383;
				half4 Coords238_g170380 = temp_output_37_0_g170380;
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord7.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord8.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170386 = Data16_g170201;
				float Out_Dummy15_g170386 = 0;
				float3 Out_PositionWS15_g170386 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170386 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170386 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170386 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170386 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170386 = float3( 0,0,0 );
				float4 Out_VertexData15_g170386 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170386 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170386 = Data15_g170386.Dummy;
				Out_PositionWS15_g170386 = Data15_g170386.PositionWS;
				Out_PositionWO15_g170386 = Data15_g170386.PositionWO;
				Out_PivotWS15_g170386 = Data15_g170386.PivotWS;
				Out_PivotWO15_g170386 = Data15_g170386.PivotWO;
				Out_NormalWS15_g170386 = Data15_g170386.NormalWS;
				Out_ViewDirWS15_g170386 = Data15_g170386.ViewDirWS;
				Out_VertexData15_g170386 = Data15_g170386.VertexData;
				Out_BoundsData15_g170386 = Data15_g170386.BoundsData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170386;
				float3 temp_output_279_0_g170380 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170380 = temp_output_279_0_g170380;
				half4 localSamplePlanar2D238_g170380 = SamplePlanar2D( Texture238_g170380 , Sampler238_g170380 , Coords238_g170380 , WorldPosition238_g170380 );
				TEXTURE2D(Texture246_g170380) = _MainAlbedoTex;
				SamplerState Sampler246_g170380 = SS19_g170383;
				half4 Coords246_g170380 = temp_output_37_0_g170380;
				half3 WorldPosition246_g170380 = temp_output_279_0_g170380;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170386;
				float3 temp_output_280_0_g170380 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170380 = temp_output_280_0_g170380;
				half4 localSamplePlanar3D246_g170380 = SamplePlanar3D( Texture246_g170380 , Sampler246_g170380 , Coords246_g170380 , WorldPosition246_g170380 , WorldNormal246_g170380 );
				TEXTURE2D(Texture234_g170380) = _MainAlbedoTex;
				SamplerState Sampler234_g170380 = SS19_g170383;
				float4 Coords234_g170380 = temp_output_37_0_g170380;
				float3 WorldPosition234_g170380 = temp_output_279_0_g170380;
				float4 localSampleStochastic2D234_g170380 = SampleStochastic2D( Texture234_g170380 , Sampler234_g170380 , Coords234_g170380 , WorldPosition234_g170380 );
				TEXTURE2D(Texture263_g170380) = _MainAlbedoTex;
				SamplerState Sampler263_g170380 = SS19_g170383;
				half4 Coords263_g170380 = temp_output_37_0_g170380;
				half3 WorldPosition263_g170380 = temp_output_279_0_g170380;
				half3 WorldNormal263_g170380 = temp_output_280_0_g170380;
				half4 localSampleStochastic3D263_g170380 = SampleStochastic3D( Texture263_g170380 , Sampler263_g170380 , Coords263_g170380 , WorldPosition263_g170380 , WorldNormal263_g170380 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170380;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170380;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170380;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170380;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170380;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170380;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170380;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170382) = _MainShaderTex;
				float localFilterTexture30_g170385 = ( 0.0 );
				SamplerState SS30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170385 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170385 = SamplerDefault30_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170385 = SamplerDefault30_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170385 = SamplerPoint30_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170385 = SamplerLow30_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170385 = SamplerMedium30_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170385 = SamplerHigh30_g170385;
				#endif
				}
				SamplerState Sampler276_g170382 = SS30_g170385;
				float4 temp_output_37_0_g170382 = Local_Coords180_g170372;
				half4 Coords276_g170382 = temp_output_37_0_g170382;
				half2 TexCoord276_g170382 = packedInput.ase_texcoord6.xy;
				half4 localSampleMain276_g170382 = SampleMain( Texture276_g170382 , Sampler276_g170382 , Coords276_g170382 , TexCoord276_g170382 );
				TEXTURE2D(Texture275_g170382) = _MainShaderTex;
				SamplerState Sampler275_g170382 = SS30_g170385;
				half4 Coords275_g170382 = temp_output_37_0_g170382;
				half2 TexCoord275_g170382 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170382 = SampleExtra( Texture275_g170382 , Sampler275_g170382 , Coords275_g170382 , TexCoord275_g170382 );
				TEXTURE2D(Texture238_g170382) = _MainShaderTex;
				SamplerState Sampler238_g170382 = SS30_g170385;
				half4 Coords238_g170382 = temp_output_37_0_g170382;
				float3 temp_output_279_0_g170382 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170382 = temp_output_279_0_g170382;
				half4 localSamplePlanar2D238_g170382 = SamplePlanar2D( Texture238_g170382 , Sampler238_g170382 , Coords238_g170382 , WorldPosition238_g170382 );
				TEXTURE2D(Texture246_g170382) = _MainShaderTex;
				SamplerState Sampler246_g170382 = SS30_g170385;
				half4 Coords246_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition246_g170382 = temp_output_279_0_g170382;
				float3 temp_output_280_0_g170382 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170382 = temp_output_280_0_g170382;
				half4 localSamplePlanar3D246_g170382 = SamplePlanar3D( Texture246_g170382 , Sampler246_g170382 , Coords246_g170382 , WorldPosition246_g170382 , WorldNormal246_g170382 );
				TEXTURE2D(Texture234_g170382) = _MainShaderTex;
				SamplerState Sampler234_g170382 = SS30_g170385;
				float4 Coords234_g170382 = temp_output_37_0_g170382;
				float3 WorldPosition234_g170382 = temp_output_279_0_g170382;
				float4 localSampleStochastic2D234_g170382 = SampleStochastic2D( Texture234_g170382 , Sampler234_g170382 , Coords234_g170382 , WorldPosition234_g170382 );
				TEXTURE2D(Texture263_g170382) = _MainShaderTex;
				SamplerState Sampler263_g170382 = SS30_g170385;
				half4 Coords263_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition263_g170382 = temp_output_279_0_g170382;
				half3 WorldNormal263_g170382 = temp_output_280_0_g170382;
				half4 localSampleStochastic3D263_g170382 = SampleStochastic3D( Texture263_g170382 , Sampler263_g170382 , Coords263_g170382 , WorldPosition263_g170382 , WorldNormal263_g170382 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170382;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170382;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170382;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170377 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170388 = _MainMultiRemap.x;
				float temp_output_9_0_g170388 = ( clampResult17_g170377 - temp_output_7_0_g170388 );
				half Local_MultiMask78_g170372 = saturate( ( ( temp_output_9_0_g170388 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170387 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170387 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170381) = _MainNormalTex;
				float localFilterTexture29_g170384 = ( 0.0 );
				SamplerState SS29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170384 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170384 = SamplerDefault29_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170384 = SamplerDefault29_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170384 = SamplerPoint29_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170384 = SamplerLow29_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170384 = SamplerMedium29_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170384 = SamplerHigh29_g170384;
				#endif
				}
				SamplerState Sampler276_g170381 = SS29_g170384;
				float4 temp_output_37_0_g170381 = Local_Coords180_g170372;
				half4 Coords276_g170381 = temp_output_37_0_g170381;
				half2 TexCoord276_g170381 = packedInput.ase_texcoord6.xy;
				half4 localSampleMain276_g170381 = SampleMain( Texture276_g170381 , Sampler276_g170381 , Coords276_g170381 , TexCoord276_g170381 );
				TEXTURE2D(Texture275_g170381) = _MainNormalTex;
				SamplerState Sampler275_g170381 = SS29_g170384;
				half4 Coords275_g170381 = temp_output_37_0_g170381;
				half2 TexCoord275_g170381 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170381 = SampleExtra( Texture275_g170381 , Sampler275_g170381 , Coords275_g170381 , TexCoord275_g170381 );
				TEXTURE2D(Texture238_g170381) = _MainNormalTex;
				SamplerState Sampler238_g170381 = SS29_g170384;
				half4 Coords238_g170381 = temp_output_37_0_g170381;
				float3 temp_output_279_0_g170381 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170381 = temp_output_279_0_g170381;
				half4 localSamplePlanar2D238_g170381 = SamplePlanar2D( Texture238_g170381 , Sampler238_g170381 , Coords238_g170381 , WorldPosition238_g170381 );
				TEXTURE2D(Texture246_g170381) = _MainNormalTex;
				SamplerState Sampler246_g170381 = SS29_g170384;
				half4 Coords246_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition246_g170381 = temp_output_279_0_g170381;
				float3 temp_output_280_0_g170381 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170381 = temp_output_280_0_g170381;
				half4 localSamplePlanar3D246_g170381 = SamplePlanar3D( Texture246_g170381 , Sampler246_g170381 , Coords246_g170381 , WorldPosition246_g170381 , WorldNormal246_g170381 );
				TEXTURE2D(Texture234_g170381) = _MainNormalTex;
				SamplerState Sampler234_g170381 = SS29_g170384;
				float4 Coords234_g170381 = temp_output_37_0_g170381;
				float3 WorldPosition234_g170381 = temp_output_279_0_g170381;
				float4 localSampleStochastic2D234_g170381 = SampleStochastic2D( Texture234_g170381 , Sampler234_g170381 , Coords234_g170381 , WorldPosition234_g170381 );
				TEXTURE2D(Texture263_g170381) = _MainNormalTex;
				SamplerState Sampler263_g170381 = SS29_g170384;
				half4 Coords263_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition263_g170381 = temp_output_279_0_g170381;
				half3 WorldNormal263_g170381 = temp_output_280_0_g170381;
				half4 localSampleStochastic3D263_g170381 = SampleStochastic3D( Texture263_g170381 , Sampler263_g170381 , Coords263_g170381 , WorldPosition263_g170381 , WorldNormal263_g170381 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170381;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170381;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170381;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3 ase_bitangentWS = packedInput.ase_texcoord9.xyz;
				float3x3 ase_worldToTangent = float3x3(TangentWS.xyz,ase_bitangentWS,NormalWS);
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170387 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, ase_bitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, ase_bitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, ase_bitangentWS.z, NormalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3(dot(tanToWorld0,tanNormal74_g170375), dot(tanToWorld1,tanNormal74_g170375), dot(tanToWorld2,tanNormal74_g170375)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170387 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170387 = Local_Masks109_g170372;
				float4 In_Emissive3_g170387 = half4(1,1,1,1);
				float3 temp_output_3_0_g170376 = Local_Albedo139_g170372;
				float dotResult20_g170376 = dot( temp_output_3_0_g170376 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170376;
				float In_Grayscale3_g170387 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170387 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170387 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170387 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170387 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170387 = temp_cast_4;
				float In_Transmission3_g170387 = 1.0;
				float In_Thickness3_g170387 = 0.0;
				float In_Diffusion3_g170387 = 0.0;
				{
				Data3_g170387.Dummy = In_Dummy3_g170387;
				Data3_g170387.Albedo = In_Albedo3_g170387;
				Data3_g170387.AlbedoRaw = In_AlbedoRaw3_g170387;
				Data3_g170387.NormalTS = In_NormalTS3_g170387;
				Data3_g170387.NormalWS = In_NormalWS3_g170387;
				Data3_g170387.Shader = In_Shader3_g170387;
				Data3_g170387.Emissive= In_Emissive3_g170387;
				Data3_g170387.MultiMask = In_MultiMask3_g170387;
				Data3_g170387.Grayscale = In_Grayscale3_g170387;
				Data3_g170387.Luminosity = In_Luminosity3_g170387;
				Data3_g170387.AlphaClip = In_AlphaClip3_g170387;
				Data3_g170387.AlphaFade = In_AlphaFade3_g170387;
				Data3_g170387.Translucency = In_Translucency3_g170387;
				Data3_g170387.Transmission = In_Transmission3_g170387;
				Data3_g170387.Thickness = In_Thickness3_g170387;
				Data3_g170387.Diffusion = In_Diffusion3_g170387;
				}
				TVEVisualData Data4_g170405 = Data3_g170387;
				float Out_Dummy4_g170405 = 0;
				float3 Out_Albedo4_g170405 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170405 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170405 = float2( 0,0 );
				float3 Out_NormalWS4_g170405 = float3( 0,0,0 );
				float4 Out_Shader4_g170405 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170405 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170405 = 0;
				float Out_Grayscale4_g170405 = 0;
				float Out_Luminosity4_g170405 = 0;
				float Out_AlphaClip4_g170405 = 0;
				float Out_AlphaFade4_g170405 = 0;
				float3 Out_Translucency4_g170405 = float3( 0,0,0 );
				float Out_Transmission4_g170405 = 0;
				float Out_Thickness4_g170405 = 0;
				float Out_Diffusion4_g170405 = 0;
				{
				Out_Dummy4_g170405 = Data4_g170405.Dummy;
				Out_Albedo4_g170405 = Data4_g170405.Albedo;
				Out_AlbedoRaw4_g170405 = Data4_g170405.AlbedoRaw;
				Out_NormalTS4_g170405 = Data4_g170405.NormalTS;
				Out_NormalWS4_g170405 = Data4_g170405.NormalWS;
				Out_Shader4_g170405 = Data4_g170405.Shader;
				Out_Emissive4_g170405= Data4_g170405.Emissive;
				Out_MultiMask4_g170405 = Data4_g170405.MultiMask;
				Out_Grayscale4_g170405 = Data4_g170405.Grayscale;
				Out_Luminosity4_g170405= Data4_g170405.Luminosity;
				Out_AlphaClip4_g170405 = Data4_g170405.AlphaClip;
				Out_AlphaFade4_g170405 = Data4_g170405.AlphaFade;
				Out_Translucency4_g170405 = Data4_g170405.Translucency;
				Out_Transmission4_g170405 = Data4_g170405.Transmission;
				Out_Thickness4_g170405 = Data4_g170405.Thickness;
				Out_Diffusion4_g170405 = Data4_g170405.Diffusion;
				}
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170405;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				float localFilterTexture19_g170411 = ( 0.0 );
				SamplerState SS19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170411 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170411 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170411 = SamplerDefault19_g170411;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170411 = SamplerDefault19_g170411;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170411 = SamplerPoint19_g170411;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170411 = SamplerLow19_g170411;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170411 = SamplerMedium19_g170411;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170411 = SamplerHigh19_g170411;
				#endif
				}
				SamplerState Sampler276_g170395 = SS19_g170411;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord6.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = SS19_g170411;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = SS19_g170411;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170414 = Data16_g170201;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				}
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = SS19_g170411;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = SS19_g170411;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = SS19_g170411;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				float localFilterTexture30_g170413 = ( 0.0 );
				SamplerState SS30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170413 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170413 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170413 = SamplerDefault30_g170413;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170413 = SamplerDefault30_g170413;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170413 = SamplerPoint30_g170413;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170413 = SamplerLow30_g170413;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170413 = SamplerMedium30_g170413;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170413 = SamplerHigh30_g170413;
				#endif
				}
				SamplerState Sampler276_g170397 = SS30_g170413;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord6.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = SS30_g170413;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = SS30_g170413;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = SS30_g170413;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = SS30_g170413;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = SS30_g170413;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170416 = _SecondMultiRemap.x;
				float temp_output_9_0_g170416 = ( clampResult17_g170401 - temp_output_7_0_g170416 );
				float temp_output_765_0_g170394 = saturate( ( ( temp_output_9_0_g170416 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord6.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170418 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170422 = _SecondMaskRemap.x;
				float temp_output_9_0_g170422 = ( clampResult17_g170418 - temp_output_7_0_g170422 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170422 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half Visual_Luminosity1041_g170394 = Out_Luminosity4_g170405;
				float clampResult17_g170427 = clamp( Visual_Luminosity1041_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170428 = _SecondLumaRemap.x;
				float temp_output_9_0_g170428 = ( clampResult17_g170427 - temp_output_7_0_g170428 );
				float lerpResult1036_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170428 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170394 = lerpResult1036_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170405;
				float clampResult17_g170423 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _SecondProjRemap.x;
				float temp_output_9_0_g170425 = ( clampResult17_g170423 - temp_output_7_0_g170425 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170425 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170414;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170419 = _second_vert_mode;
				float temp_output_30_0_g170419 = ( break965_g170394.x * break33_g170419.x );
				float temp_output_29_0_g170419 = ( break965_g170394.y * break33_g170419.y );
				float temp_output_31_0_g170419 = ( break965_g170394.z * break33_g170419.z );
				float temp_output_28_0_g170419 = ( temp_output_30_0_g170419 + temp_output_29_0_g170419 + temp_output_31_0_g170419 + ( break965_g170394.w * break33_g170419.w ) );
				float clampResult17_g170417 = clamp( temp_output_28_0_g170419 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170421 = _SecondMeshRemap.x;
				float temp_output_9_0_g170421 = ( clampResult17_g170417 - temp_output_7_0_g170421 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170421 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170420 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170420 = ( temp_output_6_0_g170420 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170420 = temp_output_6_0_g170420;
				#endif
				half Blend_VertMask918_g170394 = staticSwitch14_g170420;
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatParams204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintParams204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowParams204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoParams204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeParams204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormParams204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowParams204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatParams = In_CoatParams204_g170214;
				Data204_g170214.PaintParams = In_PaintParams204_g170214;
				Data204_g170214.GlowParams = In_GlowParams204_g170214;
				Data204_g170214.AtmoParams = In_AtmoParams204_g170214;
				Data204_g170214.FadeParams = In_FadeParams204_g170214;
				Data204_g170214.FormParams= In_FormParams204_g170214;
				Data204_g170214.FlowParams = In_FlowParams204_g170214;
				}
				TVEGlobalData Data15_g170404 = Data204_g170214;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170404 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatParams15_g170404 = Data15_g170404.CoatParams;
				Out_PaintParams15_g170404 = Data15_g170404.PaintParams;
				Out_GlowParams15_g170404 = Data15_g170404.GlowParams;
				Out_AtmoParams15_g170404= Data15_g170404.AtmoParams;
				Out_FadeParams15_g170404= Data15_g170404.FadeParams;
				Out_FormParams15_g170404 = Data15_g170404.FormParams;
				Out_FlowParams15_g170404 = Data15_g170404.FlowParams;
				}
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170404;
				float temp_output_6_0_g170429 = (Global_CoatParams975_g170394).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170429 = ( temp_output_6_0_g170429 + ( _SecondElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170429 = temp_output_6_0_g170429;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = staticSwitch14_g170429;
				#else
				float staticSwitch971_g170394 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170394 = lerp( 1.0 , staticSwitch971_g170394 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170394 = lerpResult1013_g170394;
				float clampResult17_g170424 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_LumaMask1033_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170426 = _SecondBlendRemap.x;
				float temp_output_9_0_g170426 = ( clampResult17_g170424 - temp_output_7_0_g170426 );
				half Blend_Mask412_g170394 = ( saturate( ( ( temp_output_9_0_g170426 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170415 = Final_Albedo601_g170394;
				float3 In_AlbedoRaw3_g170415 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170405;
				float2 lerpResult40_g170406 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				float localFilterTexture29_g170412 = ( 0.0 );
				SamplerState SS29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170412 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170412 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170412 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170412 = SamplerDefault29_g170412;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170412 = SamplerDefault29_g170412;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170412 = SamplerPoint29_g170412;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170412 = SamplerLow29_g170412;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170412 = SamplerMedium29_g170412;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170412 = SamplerHigh29_g170412;
				#endif
				}
				SamplerState Sampler276_g170396 = SS29_g170412;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord6.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = SS29_g170412;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = SS29_g170412;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = SS29_g170412;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = SS29_g170412;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = SS29_g170412;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170406 = ( lerpResult40_g170406 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170406 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170415 = Final_NormalTS612_g170394;
				float3 appendResult68_g170407 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170407 = appendResult68_g170407;
				float3 worldNormal74_g170407 = normalize( float3(dot(tanToWorld0,tanNormal74_g170407), dot(tanToWorld1,tanNormal74_g170407), dot(tanToWorld2,tanNormal74_g170407)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170407;
				float3 In_NormalWS3_g170415 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170405;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170415 = Final_Masks613_g170394;
				float4 In_Emissive3_g170415 = Out_Emissive4_g170405;
				float3 temp_output_3_0_g170409 = Final_Albedo601_g170394;
				float dotResult20_g170409 = dot( temp_output_3_0_g170409 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170409;
				float In_Grayscale3_g170415 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170415 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170405;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170415 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170405;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170415 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170405;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170415 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170415 = Out_Translucency4_g170405;
				float In_Transmission3_g170415 = Out_Transmission4_g170405;
				float In_Thickness3_g170415 = Out_Thickness4_g170405;
				float In_Diffusion3_g170415 = Out_Diffusion4_g170405;
				{
				Data3_g170415.Dummy = In_Dummy3_g170415;
				Data3_g170415.Albedo = In_Albedo3_g170415;
				Data3_g170415.AlbedoRaw = In_AlbedoRaw3_g170415;
				Data3_g170415.NormalTS = In_NormalTS3_g170415;
				Data3_g170415.NormalWS = In_NormalWS3_g170415;
				Data3_g170415.Shader = In_Shader3_g170415;
				Data3_g170415.Emissive= In_Emissive3_g170415;
				Data3_g170415.MultiMask = In_MultiMask3_g170415;
				Data3_g170415.Grayscale = In_Grayscale3_g170415;
				Data3_g170415.Luminosity = In_Luminosity3_g170415;
				Data3_g170415.AlphaClip = In_AlphaClip3_g170415;
				Data3_g170415.AlphaFade = In_AlphaFade3_g170415;
				Data3_g170415.Translucency = In_Translucency3_g170415;
				Data3_g170415.Transmission = In_Transmission3_g170415;
				Data3_g170415.Thickness = In_Thickness3_g170415;
				Data3_g170415.Diffusion = In_Diffusion3_g170415;
				}
				TVEVisualData Data4_g170446 = Data3_g170415;
				float Out_Dummy4_g170446 = 0;
				float3 Out_Albedo4_g170446 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170446 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170446 = float2( 0,0 );
				float3 Out_NormalWS4_g170446 = float3( 0,0,0 );
				float4 Out_Shader4_g170446 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170446 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170446 = 0;
				float Out_Grayscale4_g170446 = 0;
				float Out_Luminosity4_g170446 = 0;
				float Out_AlphaClip4_g170446 = 0;
				float Out_AlphaFade4_g170446 = 0;
				float3 Out_Translucency4_g170446 = float3( 0,0,0 );
				float Out_Transmission4_g170446 = 0;
				float Out_Thickness4_g170446 = 0;
				float Out_Diffusion4_g170446 = 0;
				{
				Out_Dummy4_g170446 = Data4_g170446.Dummy;
				Out_Albedo4_g170446 = Data4_g170446.Albedo;
				Out_AlbedoRaw4_g170446 = Data4_g170446.AlbedoRaw;
				Out_NormalTS4_g170446 = Data4_g170446.NormalTS;
				Out_NormalWS4_g170446 = Data4_g170446.NormalWS;
				Out_Shader4_g170446 = Data4_g170446.Shader;
				Out_Emissive4_g170446= Data4_g170446.Emissive;
				Out_MultiMask4_g170446 = Data4_g170446.MultiMask;
				Out_Grayscale4_g170446 = Data4_g170446.Grayscale;
				Out_Luminosity4_g170446= Data4_g170446.Luminosity;
				Out_AlphaClip4_g170446 = Data4_g170446.AlphaClip;
				Out_AlphaFade4_g170446 = Data4_g170446.AlphaFade;
				Out_Translucency4_g170446 = Data4_g170446.Translucency;
				Out_Transmission4_g170446 = Data4_g170446.Transmission;
				Out_Thickness4_g170446 = Data4_g170446.Thickness;
				Out_Diffusion4_g170446 = Data4_g170446.Diffusion;
				}
				half3 Visual_Albedo527_g170438 = Out_Albedo4_g170446;
				TEXTURE2D(Texture276_g170439) = _ThirdAlbedoTex;
				float localFilterTexture19_g170455 = ( 0.0 );
				SamplerState SS19_g170455 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170455 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170455 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170455 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170455 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170455 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170455 = SamplerDefault19_g170455;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170455 = SamplerDefault19_g170455;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170455 = SamplerPoint19_g170455;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170455 = SamplerLow19_g170455;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170455 = SamplerMedium19_g170455;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170455 = SamplerHigh19_g170455;
				#endif
				}
				SamplerState Sampler276_g170439 = SS19_g170455;
				half4 Local_LayerCoords790_g170438 = _third_coord_value;
				float4 temp_output_37_0_g170439 = Local_LayerCoords790_g170438;
				half4 Coords276_g170439 = temp_output_37_0_g170439;
				half2 TexCoord276_g170439 = packedInput.ase_texcoord6.xy;
				half4 localSampleMain276_g170439 = SampleMain( Texture276_g170439 , Sampler276_g170439 , Coords276_g170439 , TexCoord276_g170439 );
				TEXTURE2D(Texture275_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170439 = SS19_g170455;
				half4 Coords275_g170439 = temp_output_37_0_g170439;
				half2 TexCoord275_g170439 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170439 = SampleExtra( Texture275_g170439 , Sampler275_g170439 , Coords275_g170439 , TexCoord275_g170439 );
				TEXTURE2D(Texture238_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170439 = SS19_g170455;
				half4 Coords238_g170439 = temp_output_37_0_g170439;
				TVEModelData Data15_g170458 = Data16_g170201;
				float Out_Dummy15_g170458 = 0;
				float3 Out_PositionWS15_g170458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170458 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170458 = float3( 0,0,0 );
				float4 Out_VertexData15_g170458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170458 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170458 = Data15_g170458.Dummy;
				Out_PositionWS15_g170458 = Data15_g170458.PositionWS;
				Out_PositionWO15_g170458 = Data15_g170458.PositionWO;
				Out_PivotWS15_g170458 = Data15_g170458.PivotWS;
				Out_PivotWO15_g170458 = Data15_g170458.PivotWO;
				Out_NormalWS15_g170458 = Data15_g170458.NormalWS;
				Out_ViewDirWS15_g170458 = Data15_g170458.ViewDirWS;
				Out_VertexData15_g170458 = Data15_g170458.VertexData;
				Out_BoundsData15_g170458 = Data15_g170458.BoundsData;
				}
				half3 Model_PositionWO636_g170438 = Out_PositionWO15_g170458;
				float3 temp_output_279_0_g170439 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170439 = temp_output_279_0_g170439;
				half4 localSamplePlanar2D238_g170439 = SamplePlanar2D( Texture238_g170439 , Sampler238_g170439 , Coords238_g170439 , WorldPosition238_g170439 );
				TEXTURE2D(Texture246_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170439 = SS19_g170455;
				half4 Coords246_g170439 = temp_output_37_0_g170439;
				half3 WorldPosition246_g170439 = temp_output_279_0_g170439;
				half3 Model_NormalWS869_g170438 = Out_NormalWS15_g170458;
				float3 temp_output_280_0_g170439 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170439 = temp_output_280_0_g170439;
				half4 localSamplePlanar3D246_g170439 = SamplePlanar3D( Texture246_g170439 , Sampler246_g170439 , Coords246_g170439 , WorldPosition246_g170439 , WorldNormal246_g170439 );
				TEXTURE2D(Texture234_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170439 = SS19_g170455;
				float4 Coords234_g170439 = temp_output_37_0_g170439;
				float3 WorldPosition234_g170439 = temp_output_279_0_g170439;
				float4 localSampleStochastic2D234_g170439 = SampleStochastic2D( Texture234_g170439 , Sampler234_g170439 , Coords234_g170439 , WorldPosition234_g170439 );
				TEXTURE2D(Texture263_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170439 = SS19_g170455;
				half4 Coords263_g170439 = temp_output_37_0_g170439;
				half3 WorldPosition263_g170439 = temp_output_279_0_g170439;
				half3 WorldNormal263_g170439 = temp_output_280_0_g170439;
				half4 localSampleStochastic3D263_g170439 = SampleStochastic3D( Texture263_g170439 , Sampler263_g170439 , Coords263_g170439 , WorldPosition263_g170439 , WorldNormal263_g170439 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170438 = localSampleMain276_g170439;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170438 = localSampleExtra275_g170439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170438 = localSamplePlanar2D238_g170439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170438 = localSamplePlanar3D246_g170439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170438 = localSampleStochastic2D234_g170439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170438 = localSampleStochastic3D263_g170439;
				#else
				float4 staticSwitch693_g170438 = localSampleMain276_g170439;
				#endif
				half4 Local_AlbedoTex777_g170438 = staticSwitch693_g170438;
				float3 lerpResult716_g170438 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170438).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170438 = lerpResult716_g170438;
				TEXTURE2D(Texture276_g170441) = _ThirdShaderTex;
				float localFilterTexture30_g170457 = ( 0.0 );
				SamplerState SS30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170457 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170457 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170457 = SamplerDefault30_g170457;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170457 = SamplerDefault30_g170457;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170457 = SamplerPoint30_g170457;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170457 = SamplerLow30_g170457;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170457 = SamplerMedium30_g170457;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170457 = SamplerHigh30_g170457;
				#endif
				}
				SamplerState Sampler276_g170441 = SS30_g170457;
				float4 temp_output_37_0_g170441 = Local_LayerCoords790_g170438;
				half4 Coords276_g170441 = temp_output_37_0_g170441;
				half2 TexCoord276_g170441 = packedInput.ase_texcoord6.xy;
				half4 localSampleMain276_g170441 = SampleMain( Texture276_g170441 , Sampler276_g170441 , Coords276_g170441 , TexCoord276_g170441 );
				TEXTURE2D(Texture275_g170441) = _ThirdShaderTex;
				SamplerState Sampler275_g170441 = SS30_g170457;
				half4 Coords275_g170441 = temp_output_37_0_g170441;
				half2 TexCoord275_g170441 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170441 = SampleExtra( Texture275_g170441 , Sampler275_g170441 , Coords275_g170441 , TexCoord275_g170441 );
				TEXTURE2D(Texture238_g170441) = _ThirdShaderTex;
				SamplerState Sampler238_g170441 = SS30_g170457;
				half4 Coords238_g170441 = temp_output_37_0_g170441;
				float3 temp_output_279_0_g170441 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170441 = temp_output_279_0_g170441;
				half4 localSamplePlanar2D238_g170441 = SamplePlanar2D( Texture238_g170441 , Sampler238_g170441 , Coords238_g170441 , WorldPosition238_g170441 );
				TEXTURE2D(Texture246_g170441) = _ThirdShaderTex;
				SamplerState Sampler246_g170441 = SS30_g170457;
				half4 Coords246_g170441 = temp_output_37_0_g170441;
				half3 WorldPosition246_g170441 = temp_output_279_0_g170441;
				float3 temp_output_280_0_g170441 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170441 = temp_output_280_0_g170441;
				half4 localSamplePlanar3D246_g170441 = SamplePlanar3D( Texture246_g170441 , Sampler246_g170441 , Coords246_g170441 , WorldPosition246_g170441 , WorldNormal246_g170441 );
				TEXTURE2D(Texture234_g170441) = _ThirdShaderTex;
				SamplerState Sampler234_g170441 = SS30_g170457;
				float4 Coords234_g170441 = temp_output_37_0_g170441;
				float3 WorldPosition234_g170441 = temp_output_279_0_g170441;
				float4 localSampleStochastic2D234_g170441 = SampleStochastic2D( Texture234_g170441 , Sampler234_g170441 , Coords234_g170441 , WorldPosition234_g170441 );
				TEXTURE2D(Texture263_g170441) = _ThirdShaderTex;
				SamplerState Sampler263_g170441 = SS30_g170457;
				half4 Coords263_g170441 = temp_output_37_0_g170441;
				half3 WorldPosition263_g170441 = temp_output_279_0_g170441;
				half3 WorldNormal263_g170441 = temp_output_280_0_g170441;
				half4 localSampleStochastic3D263_g170441 = SampleStochastic3D( Texture263_g170441 , Sampler263_g170441 , Coords263_g170441 , WorldPosition263_g170441 , WorldNormal263_g170441 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170438 = localSampleMain276_g170441;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170438 = localSampleExtra275_g170441;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170438 = localSamplePlanar2D238_g170441;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170438 = localSamplePlanar3D246_g170441;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170438 = localSampleStochastic2D234_g170441;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170438 = localSampleStochastic3D263_g170441;
				#else
				float4 staticSwitch722_g170438 = localSampleMain276_g170441;
				#endif
				half4 Local_ShaderTex775_g170438 = staticSwitch722_g170438;
				float lerpResult739_g170438 = lerp( 1.0 , (Local_ShaderTex775_g170438).y , _ThirdOcclusionValue);
				float4 appendResult749_g170438 = (float4(( (Local_ShaderTex775_g170438).x * _ThirdMetallicValue ) , lerpResult739_g170438 , (Local_ShaderTex775_g170438).z , ( (Local_ShaderTex775_g170438).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170438 = appendResult749_g170438;
				float clampResult17_g170444 = clamp( (Local_Masks750_g170438).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170459 = ( clampResult17_g170444 - temp_output_7_0_g170459 );
				float temp_output_765_0_g170438 = saturate( ( ( temp_output_9_0_g170459 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170438 = temp_output_765_0_g170438;
				float lerpResult705_g170438 = lerp( 1.0 , Local_MultiMask767_g170438 , _ThirdColorMode);
				float4 lerpResult706_g170438 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170438);
				half3 Local_ColorRGB774_g170438 = (lerpResult706_g170438).rgb;
				half3 Local_Albedo768_g170438 = ( Local_AlbedoRGB771_g170438 * Local_ColorRGB774_g170438 );
				float3 lerpResult985_g170438 = lerp( Local_Albedo768_g170438 , ( Visual_Albedo527_g170438 * Local_Albedo768_g170438 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170453) = _ThirdMaskTex;
				SamplerState Sampler276_g170453 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170438 = _third_mask_coord_value;
				float4 temp_output_37_0_g170453 = Local_MaskCoords813_g170438;
				half4 Coords276_g170453 = temp_output_37_0_g170453;
				half2 TexCoord276_g170453 = packedInput.ase_texcoord6.xy;
				half4 localSampleMain276_g170453 = SampleMain( Texture276_g170453 , Sampler276_g170453 , Coords276_g170453 , TexCoord276_g170453 );
				TEXTURE2D(Texture275_g170453) = _ThirdMaskTex;
				SamplerState Sampler275_g170453 = sampler_Linear_Repeat;
				half4 Coords275_g170453 = temp_output_37_0_g170453;
				half2 TexCoord275_g170453 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170453 = SampleExtra( Texture275_g170453 , Sampler275_g170453 , Coords275_g170453 , TexCoord275_g170453 );
				TEXTURE2D(Texture238_g170453) = _ThirdMaskTex;
				SamplerState Sampler238_g170453 = sampler_Linear_Repeat;
				half4 Coords238_g170453 = temp_output_37_0_g170453;
				float3 temp_output_279_0_g170453 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170453 = temp_output_279_0_g170453;
				half4 localSamplePlanar2D238_g170453 = SamplePlanar2D( Texture238_g170453 , Sampler238_g170453 , Coords238_g170453 , WorldPosition238_g170453 );
				TEXTURE2D(Texture246_g170453) = _ThirdMaskTex;
				SamplerState Sampler246_g170453 = sampler_Linear_Repeat;
				half4 Coords246_g170453 = temp_output_37_0_g170453;
				half3 WorldPosition246_g170453 = temp_output_279_0_g170453;
				float3 temp_output_280_0_g170453 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170453 = temp_output_280_0_g170453;
				half4 localSamplePlanar3D246_g170453 = SamplePlanar3D( Texture246_g170453 , Sampler246_g170453 , Coords246_g170453 , WorldPosition246_g170453 , WorldNormal246_g170453 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170438 = localSampleMain276_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170438 = localSampleExtra275_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170438 = localSamplePlanar2D238_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170438 = localSamplePlanar3D246_g170453;
				#else
				float4 staticSwitch817_g170438 = localSampleMain276_g170453;
				#endif
				half4 Local_MaskTex861_g170438 = staticSwitch817_g170438;
				float clampResult17_g170461 = clamp( (Local_MaskTex861_g170438).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170465 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170465 = ( clampResult17_g170461 - temp_output_7_0_g170465 );
				float lerpResult1028_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170465 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170438 = lerpResult1028_g170438;
				half Visual_Luminosity1049_g170438 = Out_Luminosity4_g170446;
				float clampResult17_g170470 = clamp( Visual_Luminosity1049_g170438 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170471 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170471 = ( clampResult17_g170470 - temp_output_7_0_g170471 );
				float lerpResult1040_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170471 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170438 = lerpResult1040_g170438;
				half4 Model_VertexMasks960_g170438 = Out_VertexData15_g170458;
				float4 break961_g170438 = Model_VertexMasks960_g170438;
				float4 break33_g170462 = _third_vert_mode;
				float temp_output_30_0_g170462 = ( break961_g170438.x * break33_g170462.x );
				float temp_output_29_0_g170462 = ( break961_g170438.y * break33_g170462.y );
				float temp_output_31_0_g170462 = ( break961_g170438.z * break33_g170462.z );
				float temp_output_28_0_g170462 = ( temp_output_30_0_g170462 + temp_output_29_0_g170462 + temp_output_31_0_g170462 + ( break961_g170438.w * break33_g170462.w ) );
				float clampResult17_g170460 = clamp( temp_output_28_0_g170462 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170464 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170464 = ( clampResult17_g170460 - temp_output_7_0_g170464 );
				float lerpResult1026_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170464 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170463 = lerpResult1026_g170438;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170463 = ( temp_output_6_0_g170463 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170463 = temp_output_6_0_g170463;
				#endif
				half Blend_VertMask913_g170438 = staticSwitch14_g170463;
				half3 Visual_NormalWS953_g170438 = Out_NormalWS4_g170446;
				float clampResult17_g170466 = clamp( saturate( (Visual_NormalWS953_g170438).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170468 = _ThirdProjRemap.x;
				float temp_output_9_0_g170468 = ( clampResult17_g170466 - temp_output_7_0_g170468 );
				float lerpResult1004_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170468 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170438 = lerpResult1004_g170438;
				TVEGlobalData Data15_g170448 = Data204_g170214;
				float Out_Dummy15_g170448 = 0;
				float4 Out_CoatParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170448 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170448 = Data15_g170448.Dummy;
				Out_CoatParams15_g170448 = Data15_g170448.CoatParams;
				Out_PaintParams15_g170448 = Data15_g170448.PaintParams;
				Out_GlowParams15_g170448 = Data15_g170448.GlowParams;
				Out_AtmoParams15_g170448= Data15_g170448.AtmoParams;
				Out_FadeParams15_g170448= Data15_g170448.FadeParams;
				Out_FormParams15_g170448 = Data15_g170448.FormParams;
				Out_FlowParams15_g170448 = Data15_g170448.FlowParams;
				}
				half4 Global_CoatParams972_g170438 = Out_CoatParams15_g170448;
				float temp_output_6_0_g170472 = (Global_CoatParams972_g170438).y;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170472 = ( temp_output_6_0_g170472 + ( _ThirdElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170472 = temp_output_6_0_g170472;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170438 = staticSwitch14_g170472;
				#else
				float staticSwitch1056_g170438 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170438 = lerp( 1.0 , staticSwitch1056_g170438 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170438 = lerpResult1060_g170438;
				float clampResult17_g170467 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170438 * Blend_LumaMask1046_g170438 * Blend_VertMask913_g170438 * Blend_ProjMask912_g170438 * Blend_GlobalMask968_g170438 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170469 = ( clampResult17_g170467 - temp_output_7_0_g170469 );
				half Detail_Mask412_g170438 = ( saturate( ( ( temp_output_9_0_g170469 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170438 = lerp( Visual_Albedo527_g170438 , lerpResult985_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170438 = lerpResult989_g170438;
				#else
				float3 staticSwitch415_g170438 = Visual_Albedo527_g170438;
				#endif
				half3 Final_Albedo601_g170438 = staticSwitch415_g170438;
				float3 In_Albedo3_g170447 = Final_Albedo601_g170438;
				float3 In_AlbedoRaw3_g170447 = Final_Albedo601_g170438;
				half2 Visual_NormalTS529_g170438 = Out_NormalTS4_g170446;
				float2 lerpResult40_g170449 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170438 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170440) = _ThirdNormalTex;
				float localFilterTexture29_g170456 = ( 0.0 );
				SamplerState SS29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170456 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170456 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170456 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170456 = SamplerDefault29_g170456;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170456 = SamplerDefault29_g170456;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170456 = SamplerPoint29_g170456;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170456 = SamplerLow29_g170456;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170456 = SamplerMedium29_g170456;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170456 = SamplerHigh29_g170456;
				#endif
				}
				SamplerState Sampler276_g170440 = SS29_g170456;
				float4 temp_output_37_0_g170440 = Local_LayerCoords790_g170438;
				half4 Coords276_g170440 = temp_output_37_0_g170440;
				half2 TexCoord276_g170440 = packedInput.ase_texcoord6.xy;
				half4 localSampleMain276_g170440 = SampleMain( Texture276_g170440 , Sampler276_g170440 , Coords276_g170440 , TexCoord276_g170440 );
				TEXTURE2D(Texture275_g170440) = _ThirdNormalTex;
				SamplerState Sampler275_g170440 = SS29_g170456;
				half4 Coords275_g170440 = temp_output_37_0_g170440;
				half2 TexCoord275_g170440 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170440 = SampleExtra( Texture275_g170440 , Sampler275_g170440 , Coords275_g170440 , TexCoord275_g170440 );
				TEXTURE2D(Texture238_g170440) = _ThirdNormalTex;
				SamplerState Sampler238_g170440 = SS29_g170456;
				half4 Coords238_g170440 = temp_output_37_0_g170440;
				float3 temp_output_279_0_g170440 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170440 = temp_output_279_0_g170440;
				half4 localSamplePlanar2D238_g170440 = SamplePlanar2D( Texture238_g170440 , Sampler238_g170440 , Coords238_g170440 , WorldPosition238_g170440 );
				TEXTURE2D(Texture246_g170440) = _ThirdNormalTex;
				SamplerState Sampler246_g170440 = SS29_g170456;
				half4 Coords246_g170440 = temp_output_37_0_g170440;
				half3 WorldPosition246_g170440 = temp_output_279_0_g170440;
				float3 temp_output_280_0_g170440 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170440 = temp_output_280_0_g170440;
				half4 localSamplePlanar3D246_g170440 = SamplePlanar3D( Texture246_g170440 , Sampler246_g170440 , Coords246_g170440 , WorldPosition246_g170440 , WorldNormal246_g170440 );
				TEXTURE2D(Texture234_g170440) = _ThirdNormalTex;
				SamplerState Sampler234_g170440 = SS29_g170456;
				float4 Coords234_g170440 = temp_output_37_0_g170440;
				float3 WorldPosition234_g170440 = temp_output_279_0_g170440;
				float4 localSampleStochastic2D234_g170440 = SampleStochastic2D( Texture234_g170440 , Sampler234_g170440 , Coords234_g170440 , WorldPosition234_g170440 );
				TEXTURE2D(Texture263_g170440) = _ThirdNormalTex;
				SamplerState Sampler263_g170440 = SS29_g170456;
				half4 Coords263_g170440 = temp_output_37_0_g170440;
				half3 WorldPosition263_g170440 = temp_output_279_0_g170440;
				half3 WorldNormal263_g170440 = temp_output_280_0_g170440;
				half4 localSampleStochastic3D263_g170440 = SampleStochastic3D( Texture263_g170440 , Sampler263_g170440 , Coords263_g170440 , WorldPosition263_g170440 , WorldNormal263_g170440 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170438 = localSampleMain276_g170440;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170438 = localSampleExtra275_g170440;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170438 = localSamplePlanar2D238_g170440;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170438 = localSamplePlanar3D246_g170440;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170438 = localSampleStochastic2D234_g170440;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170438 = localSampleStochastic3D263_g170440;
				#else
				float4 staticSwitch698_g170438 = localSampleMain276_g170440;
				#endif
				half4 Local_NormalTex776_g170438 = staticSwitch698_g170438;
				half4 Normal_Packed45_g170442 = Local_NormalTex776_g170438;
				float2 appendResult58_g170442 = (float2(( (Normal_Packed45_g170442).x * (Normal_Packed45_g170442).w ) , (Normal_Packed45_g170442).y));
				half2 Normal_Default50_g170442 = appendResult58_g170442;
				half2 Normal_ASTC41_g170442 = (Normal_Packed45_g170442).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170442 = Normal_ASTC41_g170442;
				#else
				float2 staticSwitch38_g170442 = Normal_Default50_g170442;
				#endif
				half2 Normal_NO_DTX544_g170442 = (Normal_Packed45_g170442).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170442 = Normal_NO_DTX544_g170442;
				#else
				float2 staticSwitch37_g170442 = staticSwitch38_g170442;
				#endif
				float2 temp_output_724_0_g170438 = ( (staticSwitch37_g170442*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170443 = temp_output_724_0_g170438;
				float2 break71_g170443 = Normal_Planar45_g170443;
				float3 appendResult72_g170443 = (float3(break71_g170443.x , 0.0 , break71_g170443.y));
				float2 temp_output_858_0_g170438 = (mul( ase_worldToTangent, appendResult72_g170443 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#else
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#endif
				half2 Local_NormalTS729_g170438 = staticSwitch727_g170438;
				float2 temp_output_36_0_g170449 = ( lerpResult40_g170449 + Local_NormalTS729_g170438 );
				float2 lerpResult405_g170438 = lerp( Visual_NormalTS529_g170438 , temp_output_36_0_g170449 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170438 = lerpResult405_g170438;
				#else
				float2 staticSwitch418_g170438 = Visual_NormalTS529_g170438;
				#endif
				half2 Final_NormalTS612_g170438 = staticSwitch418_g170438;
				float2 In_NormalTS3_g170447 = Final_NormalTS612_g170438;
				float3 appendResult68_g170450 = (float3(Final_NormalTS612_g170438 , 1.0));
				float3 tanNormal74_g170450 = appendResult68_g170450;
				float3 worldNormal74_g170450 = normalize( float3(dot(tanToWorld0,tanNormal74_g170450), dot(tanToWorld1,tanNormal74_g170450), dot(tanToWorld2,tanNormal74_g170450)) );
				half3 Final_NormalWS956_g170438 = worldNormal74_g170450;
				float3 In_NormalWS3_g170447 = Final_NormalWS956_g170438;
				half4 Visual_Shader531_g170438 = Out_Shader4_g170446;
				float4 lerpResult1000_g170438 = lerp( Local_Masks750_g170438 , ( Visual_Shader531_g170438 * Local_Masks750_g170438 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170438 = lerp( Visual_Shader531_g170438 , lerpResult1000_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170438 = lerpResult998_g170438;
				#else
				float4 staticSwitch451_g170438 = Visual_Shader531_g170438;
				#endif
				half4 Final_Masks613_g170438 = staticSwitch451_g170438;
				float4 In_Shader3_g170447 = Final_Masks613_g170438;
				float4 In_Emissive3_g170447 = Out_Emissive4_g170446;
				float3 temp_output_3_0_g170452 = Final_Albedo601_g170438;
				float dotResult20_g170452 = dot( temp_output_3_0_g170452 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170438 = dotResult20_g170452;
				float In_Grayscale3_g170447 = Final_Grayscale615_g170438;
				float clampResult651_g170438 = clamp( saturate( ( Final_Grayscale615_g170438 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170438 = clampResult651_g170438;
				float In_Luminosity3_g170447 = Final_Luminosity652_g170438;
				half Visual_MultiMask547_g170438 = Out_MultiMask4_g170446;
				float lerpResult477_g170438 = lerp( Visual_MultiMask547_g170438 , Local_MultiMask767_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch482_g170438 = lerpResult477_g170438;
				#else
				float staticSwitch482_g170438 = Visual_MultiMask547_g170438;
				#endif
				half Final_MultiMask572_g170438 = staticSwitch482_g170438;
				float In_MultiMask3_g170447 = Final_MultiMask572_g170438;
				half Visual_AlphaClip559_g170438 = Out_AlphaClip4_g170446;
				float temp_output_718_0_g170438 = (Local_AlbedoTex777_g170438).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170438 = ( temp_output_718_0_g170438 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170438 = temp_output_718_0_g170438;
				#endif
				half Local_AlphaClip772_g170438 = staticSwitch924_g170438;
				float lerpResult448_g170438 = lerp( Visual_AlphaClip559_g170438 , Local_AlphaClip772_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch564_g170438 = lerpResult448_g170438;
				#else
				float staticSwitch564_g170438 = Visual_AlphaClip559_g170438;
				#endif
				half Final_AlphaClip602_g170438 = staticSwitch564_g170438;
				float In_AlphaClip3_g170447 = Final_AlphaClip602_g170438;
				half Visual_AlphaFade588_g170438 = Out_AlphaFade4_g170446;
				half Local_AlphaFade773_g170438 = (lerpResult706_g170438).a;
				float lerpResult604_g170438 = lerp( Visual_AlphaFade588_g170438 , Local_AlphaFade773_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch608_g170438 = lerpResult604_g170438;
				#else
				float staticSwitch608_g170438 = Visual_AlphaFade588_g170438;
				#endif
				half Final_AlphaFade611_g170438 = staticSwitch608_g170438;
				float In_AlphaFade3_g170447 = Final_AlphaFade611_g170438;
				float3 In_Translucency3_g170447 = Out_Translucency4_g170446;
				float In_Transmission3_g170447 = Out_Transmission4_g170446;
				float In_Thickness3_g170447 = Out_Thickness4_g170446;
				float In_Diffusion3_g170447 = Out_Diffusion4_g170446;
				{
				Data3_g170447.Dummy = In_Dummy3_g170447;
				Data3_g170447.Albedo = In_Albedo3_g170447;
				Data3_g170447.AlbedoRaw = In_AlbedoRaw3_g170447;
				Data3_g170447.NormalTS = In_NormalTS3_g170447;
				Data3_g170447.NormalWS = In_NormalWS3_g170447;
				Data3_g170447.Shader = In_Shader3_g170447;
				Data3_g170447.Emissive= In_Emissive3_g170447;
				Data3_g170447.MultiMask = In_MultiMask3_g170447;
				Data3_g170447.Grayscale = In_Grayscale3_g170447;
				Data3_g170447.Luminosity = In_Luminosity3_g170447;
				Data3_g170447.AlphaClip = In_AlphaClip3_g170447;
				Data3_g170447.AlphaFade = In_AlphaFade3_g170447;
				Data3_g170447.Translucency = In_Translucency3_g170447;
				Data3_g170447.Transmission = In_Transmission3_g170447;
				Data3_g170447.Thickness = In_Thickness3_g170447;
				Data3_g170447.Diffusion = In_Diffusion3_g170447;
				}
				TVEVisualData Data4_g170545 = Data3_g170447;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				{
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				}
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170552 = Data16_g170201;
				float Out_Dummy15_g170552 = 0;
				float3 Out_PositionWS15_g170552 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170552 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170552 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170552 = float3( 0,0,0 );
				float4 Out_VertexData15_g170552 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170552 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170552 = Data15_g170552.Dummy;
				Out_PositionWS15_g170552 = Data15_g170552.PositionWS;
				Out_PositionWO15_g170552 = Data15_g170552.PositionWO;
				Out_PivotWS15_g170552 = Data15_g170552.PivotWS;
				Out_PivotWO15_g170552 = Data15_g170552.PivotWO;
				Out_NormalWS15_g170552 = Data15_g170552.NormalWS;
				Out_ViewDirWS15_g170552 = Data15_g170552.ViewDirWS;
				Out_VertexData15_g170552 = Data15_g170552.VertexData;
				Out_BoundsData15_g170552 = Data15_g170552.BoundsData;
				}
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170552;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170550 = _occlusion_vert_mode;
				float temp_output_30_0_g170550 = ( break208_g170544.x * break33_g170550.x );
				float temp_output_29_0_g170550 = ( break208_g170544.y * break33_g170550.y );
				float temp_output_31_0_g170550 = ( break208_g170544.z * break33_g170550.z );
				float temp_output_28_0_g170550 = ( temp_output_30_0_g170550 + temp_output_29_0_g170550 + temp_output_31_0_g170550 + ( break208_g170544.w * break33_g170550.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170550;
				float clampResult17_g170548 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170553 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170553 = ( clampResult17_g170548 - temp_output_7_0_g170553 );
				float temp_output_6_0_g170549 = saturate( ( ( temp_output_9_0_g170553 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170549 = ( temp_output_6_0_g170549 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170549 = temp_output_6_0_g170549;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170549;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				{
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				}
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				{
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				}
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170562 = Data16_g170201;
				float Out_Dummy15_g170562 = 0;
				float3 Out_PositionWS15_g170562 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170562 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170562 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170562 = float3( 0,0,0 );
				float4 Out_VertexData15_g170562 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170562 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170562 = Data15_g170562.Dummy;
				Out_PositionWS15_g170562 = Data15_g170562.PositionWS;
				Out_PositionWO15_g170562 = Data15_g170562.PositionWO;
				Out_PivotWS15_g170562 = Data15_g170562.PivotWS;
				Out_PivotWO15_g170562 = Data15_g170562.PivotWO;
				Out_NormalWS15_g170562 = Data15_g170562.NormalWS;
				Out_ViewDirWS15_g170562 = Data15_g170562.ViewDirWS;
				Out_VertexData15_g170562 = Data15_g170562.VertexData;
				Out_BoundsData15_g170562 = Data15_g170562.BoundsData;
				}
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170562;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170563 = _GradientMeshRemap.x;
				float temp_output_9_0_g170563 = ( clampResult17_g170560 - temp_output_7_0_g170563 );
				float temp_output_6_0_g170561 = saturate( ( ( temp_output_9_0_g170563 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170561 = ( temp_output_6_0_g170561 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170561 = temp_output_6_0_g170561;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170561;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				{
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				}
				TVEVisualData Data4_g170566 = Data3_g170557;
				float Out_Dummy4_g170566 = 0;
				float3 Out_Albedo4_g170566 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170566 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170566 = float2( 0,0 );
				float3 Out_NormalWS4_g170566 = float3( 0,0,0 );
				float4 Out_Shader4_g170566 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170566 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170566 = 0;
				float Out_Grayscale4_g170566 = 0;
				float Out_Luminosity4_g170566 = 0;
				float Out_AlphaClip4_g170566 = 0;
				float Out_AlphaFade4_g170566 = 0;
				float3 Out_Translucency4_g170566 = float3( 0,0,0 );
				float Out_Transmission4_g170566 = 0;
				float Out_Thickness4_g170566 = 0;
				float Out_Diffusion4_g170566 = 0;
				{
				Out_Dummy4_g170566 = Data4_g170566.Dummy;
				Out_Albedo4_g170566 = Data4_g170566.Albedo;
				Out_AlbedoRaw4_g170566 = Data4_g170566.AlbedoRaw;
				Out_NormalTS4_g170566 = Data4_g170566.NormalTS;
				Out_NormalWS4_g170566 = Data4_g170566.NormalWS;
				Out_Shader4_g170566 = Data4_g170566.Shader;
				Out_Emissive4_g170566= Data4_g170566.Emissive;
				Out_MultiMask4_g170566 = Data4_g170566.MultiMask;
				Out_Grayscale4_g170566 = Data4_g170566.Grayscale;
				Out_Luminosity4_g170566= Data4_g170566.Luminosity;
				Out_AlphaClip4_g170566 = Data4_g170566.AlphaClip;
				Out_AlphaFade4_g170566 = Data4_g170566.AlphaFade;
				Out_Translucency4_g170566 = Data4_g170566.Translucency;
				Out_Transmission4_g170566 = Data4_g170566.Transmission;
				Out_Thickness4_g170566 = Data4_g170566.Thickness;
				Out_Diffusion4_g170566 = Data4_g170566.Diffusion;
				}
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170566;
				TVEModelData Data15_g170571 = Data16_g170201;
				float Out_Dummy15_g170571 = 0;
				float3 Out_PositionWS15_g170571 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170571 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170571 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170571 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170571 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170571 = float3( 0,0,0 );
				float4 Out_VertexData15_g170571 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170571 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170571 = Data15_g170571.Dummy;
				Out_PositionWS15_g170571 = Data15_g170571.PositionWS;
				Out_PositionWO15_g170571 = Data15_g170571.PositionWO;
				Out_PivotWS15_g170571 = Data15_g170571.PivotWS;
				Out_PivotWO15_g170571 = Data15_g170571.PivotWO;
				Out_NormalWS15_g170571 = Data15_g170571.NormalWS;
				Out_ViewDirWS15_g170571 = Data15_g170571.ViewDirWS;
				Out_VertexData15_g170571 = Data15_g170571.VertexData;
				Out_BoundsData15_g170571 = Data15_g170571.BoundsData;
				}
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170571;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170571;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170568 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170570 = clamp( tex3DNode60_g170568.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170572 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170572 = ( clampResult17_g170570 - temp_output_7_0_g170572 );
				float temp_output_238_0_g170564 = saturate( ( ( temp_output_9_0_g170572 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170566;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170567 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170567 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170567 = Out_NormalTS4_g170566;
				float3 In_NormalWS3_g170567 = Out_NormalWS4_g170566;
				float4 In_Shader3_g170567 = Out_Shader4_g170566;
				float4 In_Emissive3_g170567 = Out_Emissive4_g170566;
				float3 temp_output_3_0_g170565 = Final_Albedo160_g170564;
				float dotResult20_g170565 = dot( temp_output_3_0_g170565 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170564 = dotResult20_g170565;
				float In_Grayscale3_g170567 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170567 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170567 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170567 = Out_AlphaClip4_g170566;
				float In_AlphaFade3_g170567 = Out_AlphaFade4_g170566;
				float3 In_Translucency3_g170567 = Out_Translucency4_g170566;
				float In_Transmission3_g170567 = Out_Transmission4_g170566;
				float In_Thickness3_g170567 = Out_Thickness4_g170566;
				float In_Diffusion3_g170567 = Out_Diffusion4_g170566;
				{
				Data3_g170567.Dummy = In_Dummy3_g170567;
				Data3_g170567.Albedo = In_Albedo3_g170567;
				Data3_g170567.AlbedoRaw = In_AlbedoRaw3_g170567;
				Data3_g170567.NormalTS = In_NormalTS3_g170567;
				Data3_g170567.NormalWS = In_NormalWS3_g170567;
				Data3_g170567.Shader = In_Shader3_g170567;
				Data3_g170567.Emissive= In_Emissive3_g170567;
				Data3_g170567.MultiMask = In_MultiMask3_g170567;
				Data3_g170567.Grayscale = In_Grayscale3_g170567;
				Data3_g170567.Luminosity = In_Luminosity3_g170567;
				Data3_g170567.AlphaClip = In_AlphaClip3_g170567;
				Data3_g170567.AlphaFade = In_AlphaFade3_g170567;
				Data3_g170567.Translucency = In_Translucency3_g170567;
				Data3_g170567.Transmission = In_Transmission3_g170567;
				Data3_g170567.Thickness = In_Thickness3_g170567;
				Data3_g170567.Diffusion = In_Diffusion3_g170567;
				}
				TVEVisualData Data4_g170579 = Data3_g170567;
				float Out_Dummy4_g170579 = 0;
				float3 Out_Albedo4_g170579 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170579 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170579 = float2( 0,0 );
				float3 Out_NormalWS4_g170579 = float3( 0,0,0 );
				float4 Out_Shader4_g170579 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170579 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170579 = 0;
				float Out_Grayscale4_g170579 = 0;
				float Out_Luminosity4_g170579 = 0;
				float Out_AlphaClip4_g170579 = 0;
				float Out_AlphaFade4_g170579 = 0;
				float3 Out_Translucency4_g170579 = float3( 0,0,0 );
				float Out_Transmission4_g170579 = 0;
				float Out_Thickness4_g170579 = 0;
				float Out_Diffusion4_g170579 = 0;
				{
				Out_Dummy4_g170579 = Data4_g170579.Dummy;
				Out_Albedo4_g170579 = Data4_g170579.Albedo;
				Out_AlbedoRaw4_g170579 = Data4_g170579.AlbedoRaw;
				Out_NormalTS4_g170579 = Data4_g170579.NormalTS;
				Out_NormalWS4_g170579 = Data4_g170579.NormalWS;
				Out_Shader4_g170579 = Data4_g170579.Shader;
				Out_Emissive4_g170579= Data4_g170579.Emissive;
				Out_MultiMask4_g170579 = Data4_g170579.MultiMask;
				Out_Grayscale4_g170579 = Data4_g170579.Grayscale;
				Out_Luminosity4_g170579= Data4_g170579.Luminosity;
				Out_AlphaClip4_g170579 = Data4_g170579.AlphaClip;
				Out_AlphaFade4_g170579 = Data4_g170579.AlphaFade;
				Out_Translucency4_g170579 = Data4_g170579.Translucency;
				Out_Transmission4_g170579 = Data4_g170579.Transmission;
				Out_Thickness4_g170579 = Data4_g170579.Thickness;
				Out_Diffusion4_g170579 = Data4_g170579.Diffusion;
				}
				half3 Visual_Albedo139_g170574 = Out_Albedo4_g170579;
				float temp_output_200_12_g170574 = Out_Grayscale4_g170579;
				half Visual_Grayscale150_g170574 = temp_output_200_12_g170574;
				float3 temp_cast_33 = (Visual_Grayscale150_g170574).xxx;
				TVEGlobalData Data15_g170575 = Data204_g170214;
				float Out_Dummy15_g170575 = 0;
				float4 Out_CoatParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170575 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170575 = Data15_g170575.Dummy;
				Out_CoatParams15_g170575 = Data15_g170575.CoatParams;
				Out_PaintParams15_g170575 = Data15_g170575.PaintParams;
				Out_GlowParams15_g170575 = Data15_g170575.GlowParams;
				Out_AtmoParams15_g170575= Data15_g170575.AtmoParams;
				Out_FadeParams15_g170575= Data15_g170575.FadeParams;
				Out_FormParams15_g170575 = Data15_g170575.FormParams;
				Out_FlowParams15_g170575 = Data15_g170575.FlowParams;
				}
				half4 Global_PaintParams209_g170574 = Out_PaintParams15_g170575;
				float4 temp_output_6_0_g170596 = Global_PaintParams209_g170574;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170596 = ( temp_output_6_0_g170596 + ( _TintingElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170596 = temp_output_6_0_g170596;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170574 = staticSwitch14_g170596;
				#else
				float4 staticSwitch283_g170574 = TVE_PaintParams;
				#endif
				float lerpResult412_g170574 = lerp( 1.0 , ( saturate( (staticSwitch283_g170574).w ) * TVE_IsEnabled ) , _TintingGlobalValue);
				half Tinting_GlobalValue285_g170574 = lerpResult412_g170574;
				float3 lerpResult368_g170574 = lerp( Visual_Albedo139_g170574 , temp_cast_33 , ( Tinting_GlobalValue285_g170574 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g170574 = (staticSwitch283_g170574).xyz;
				float temp_output_200_11_g170574 = Out_MultiMask4_g170579;
				half Visual_MultiMask181_g170574 = temp_output_200_11_g170574;
				float lerpResult147_g170574 = lerp( 1.0 , Visual_MultiMask181_g170574 , _TintingMultiValue);
				half Tinting_MutiMask121_g170574 = lerpResult147_g170574;
				half Tinting_TexMask385_g170574 = 1.0;
				float temp_output_200_15_g170574 = Out_Luminosity4_g170579;
				half Visual_Luminosity257_g170574 = temp_output_200_15_g170574;
				float clampResult17_g170586 = clamp( Visual_Luminosity257_g170574 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170591 = _TintingLumaRemap.x;
				float temp_output_9_0_g170591 = ( clampResult17_g170586 - temp_output_7_0_g170591 );
				float lerpResult228_g170574 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170591 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170574 = lerpResult228_g170574;
				TVEModelData Data15_g170580 = Data16_g170201;
				float Out_Dummy15_g170580 = 0;
				float3 Out_PositionWS15_g170580 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170580 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170580 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170580 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170580 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170580 = float3( 0,0,0 );
				float4 Out_VertexData15_g170580 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170580 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170580 = Data15_g170580.Dummy;
				Out_PositionWS15_g170580 = Data15_g170580.PositionWS;
				Out_PositionWO15_g170580 = Data15_g170580.PositionWO;
				Out_PivotWS15_g170580 = Data15_g170580.PivotWS;
				Out_PivotWO15_g170580 = Data15_g170580.PivotWO;
				Out_NormalWS15_g170580 = Data15_g170580.NormalWS;
				Out_ViewDirWS15_g170580 = Data15_g170580.ViewDirWS;
				Out_VertexData15_g170580 = Data15_g170580.VertexData;
				Out_BoundsData15_g170580 = Data15_g170580.BoundsData;
				}
				half4 Model_VertexMasks307_g170574 = Out_VertexData15_g170580;
				float4 break311_g170574 = Model_VertexMasks307_g170574;
				float4 break33_g170583 = _tinting_vert_mode;
				float temp_output_30_0_g170583 = ( break311_g170574.x * break33_g170583.x );
				float temp_output_29_0_g170583 = ( break311_g170574.y * break33_g170583.y );
				float temp_output_31_0_g170583 = ( break311_g170574.z * break33_g170583.z );
				float temp_output_28_0_g170583 = ( temp_output_30_0_g170583 + temp_output_29_0_g170583 + temp_output_31_0_g170583 + ( break311_g170574.w * break33_g170583.w ) );
				float clampResult17_g170585 = clamp( temp_output_28_0_g170583 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170592 = _TintingMeshRemap.x;
				float temp_output_9_0_g170592 = ( clampResult17_g170585 - temp_output_7_0_g170592 );
				float lerpResult370_g170574 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170592 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170587 = lerpResult370_g170574;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170587 = ( temp_output_6_0_g170587 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170587 = temp_output_6_0_g170587;
				#endif
				half Tinting_VertMask309_g170574 = staticSwitch14_g170587;
				half Tinting_NoiseMask213_g170574 = 1.0;
				half Custom_Mask345_g170574 = 1.0;
				float temp_output_7_0_g170595 = _TintingBlendRemap.x;
				float temp_output_9_0_g170595 = ( ( _TintingIntensityValue * Tinting_MutiMask121_g170574 * Tinting_TexMask385_g170574 * Tinting_LumaMask153_g170574 * Tinting_VertMask309_g170574 * Tinting_NoiseMask213_g170574 * Tinting_GlobalValue285_g170574 * Custom_Mask345_g170574 ) - temp_output_7_0_g170595 );
				half Tinting_Mask242_g170574 = ( saturate( ( ( temp_output_9_0_g170595 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170574 = lerp( Visual_Albedo139_g170574 , ( lerpResult368_g170574 * 4.594794 * Tinting_GlobalColor290_g170574 * (_TintingColor).rgb ) , Tinting_Mask242_g170574);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170574 = lerpResult90_g170574;
				#else
				float3 staticSwitch286_g170574 = Visual_Albedo139_g170574;
				#endif
				half3 Final_Albedo97_g170574 = staticSwitch286_g170574;
				float3 In_Albedo3_g170578 = Final_Albedo97_g170574;
				float3 In_AlbedoRaw3_g170578 = Out_AlbedoRaw4_g170579;
				float2 In_NormalTS3_g170578 = Out_NormalTS4_g170579;
				float3 In_NormalWS3_g170578 = Out_NormalWS4_g170579;
				float4 In_Shader3_g170578 = Out_Shader4_g170579;
				float4 In_Emissive3_g170578 = Out_Emissive4_g170579;
				float In_Grayscale3_g170578 = temp_output_200_12_g170574;
				float In_Luminosity3_g170578 = temp_output_200_15_g170574;
				float In_MultiMask3_g170578 = temp_output_200_11_g170574;
				float In_AlphaClip3_g170578 = Out_AlphaClip4_g170579;
				float In_AlphaFade3_g170578 = Out_AlphaFade4_g170579;
				float3 In_Translucency3_g170578 = Out_Translucency4_g170579;
				float In_Transmission3_g170578 = Out_Transmission4_g170579;
				float In_Thickness3_g170578 = Out_Thickness4_g170579;
				float In_Diffusion3_g170578 = Out_Diffusion4_g170579;
				{
				Data3_g170578.Dummy = In_Dummy3_g170578;
				Data3_g170578.Albedo = In_Albedo3_g170578;
				Data3_g170578.AlbedoRaw = In_AlbedoRaw3_g170578;
				Data3_g170578.NormalTS = In_NormalTS3_g170578;
				Data3_g170578.NormalWS = In_NormalWS3_g170578;
				Data3_g170578.Shader = In_Shader3_g170578;
				Data3_g170578.Emissive= In_Emissive3_g170578;
				Data3_g170578.MultiMask = In_MultiMask3_g170578;
				Data3_g170578.Grayscale = In_Grayscale3_g170578;
				Data3_g170578.Luminosity = In_Luminosity3_g170578;
				Data3_g170578.AlphaClip = In_AlphaClip3_g170578;
				Data3_g170578.AlphaFade = In_AlphaFade3_g170578;
				Data3_g170578.Translucency = In_Translucency3_g170578;
				Data3_g170578.Transmission = In_Transmission3_g170578;
				Data3_g170578.Thickness = In_Thickness3_g170578;
				Data3_g170578.Diffusion = In_Diffusion3_g170578;
				}
				TVEVisualData Data4_g170600 = Data3_g170578;
				float Out_Dummy4_g170600 = 0;
				float3 Out_Albedo4_g170600 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170600 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170600 = float2( 0,0 );
				float3 Out_NormalWS4_g170600 = float3( 0,0,0 );
				float4 Out_Shader4_g170600 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170600 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170600 = 0;
				float Out_Grayscale4_g170600 = 0;
				float Out_Luminosity4_g170600 = 0;
				float Out_AlphaClip4_g170600 = 0;
				float Out_AlphaFade4_g170600 = 0;
				float3 Out_Translucency4_g170600 = float3( 0,0,0 );
				float Out_Transmission4_g170600 = 0;
				float Out_Thickness4_g170600 = 0;
				float Out_Diffusion4_g170600 = 0;
				{
				Out_Dummy4_g170600 = Data4_g170600.Dummy;
				Out_Albedo4_g170600 = Data4_g170600.Albedo;
				Out_AlbedoRaw4_g170600 = Data4_g170600.AlbedoRaw;
				Out_NormalTS4_g170600 = Data4_g170600.NormalTS;
				Out_NormalWS4_g170600 = Data4_g170600.NormalWS;
				Out_Shader4_g170600 = Data4_g170600.Shader;
				Out_Emissive4_g170600= Data4_g170600.Emissive;
				Out_MultiMask4_g170600 = Data4_g170600.MultiMask;
				Out_Grayscale4_g170600 = Data4_g170600.Grayscale;
				Out_Luminosity4_g170600= Data4_g170600.Luminosity;
				Out_AlphaClip4_g170600 = Data4_g170600.AlphaClip;
				Out_AlphaFade4_g170600 = Data4_g170600.AlphaFade;
				Out_Translucency4_g170600 = Data4_g170600.Translucency;
				Out_Transmission4_g170600 = Data4_g170600.Transmission;
				Out_Thickness4_g170600 = Data4_g170600.Thickness;
				Out_Diffusion4_g170600 = Data4_g170600.Diffusion;
				}
				half3 Visual_Albedo292_g170598 = Out_Albedo4_g170600;
				float temp_output_280_12_g170598 = Out_Grayscale4_g170600;
				half Visual_Grayscale308_g170598 = temp_output_280_12_g170598;
				float3 temp_cast_34 = (Visual_Grayscale308_g170598).xxx;
				TVEGlobalData Data15_g170599 = Data204_g170214;
				float Out_Dummy15_g170599 = 0;
				float4 Out_CoatParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170599 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170599 = Data15_g170599.Dummy;
				Out_CoatParams15_g170599 = Data15_g170599.CoatParams;
				Out_PaintParams15_g170599 = Data15_g170599.PaintParams;
				Out_GlowParams15_g170599 = Data15_g170599.GlowParams;
				Out_AtmoParams15_g170599= Data15_g170599.AtmoParams;
				Out_FadeParams15_g170599= Data15_g170599.FadeParams;
				Out_FormParams15_g170599 = Data15_g170599.FormParams;
				Out_FlowParams15_g170599 = Data15_g170599.FlowParams;
				}
				half4 Global_AtmoParams314_g170598 = Out_AtmoParams15_g170599;
				float temp_output_6_0_g170619 = (Global_AtmoParams314_g170598).x;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170619 = ( temp_output_6_0_g170619 + ( _DrynessElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170619 = temp_output_6_0_g170619;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170598 = staticSwitch14_g170619;
				#else
				float staticSwitch351_g170598 = TVE_AtmoData.x;
				#endif
				float lerpResult505_g170598 = lerp( 1.0 , ( staticSwitch351_g170598 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalMask352_g170598 = lerpResult505_g170598;
				float3 lerpResult485_g170598 = lerp( Visual_Albedo292_g170598 , temp_cast_34 , ( Dryness_GlobalMask352_g170598 * _DrynessGrayValue ));
				half Dryness_TexMask478_g170598 = 1.0;
				float temp_output_280_11_g170598 = Out_MultiMask4_g170600;
				half Visual_MultiMask310_g170598 = temp_output_280_11_g170598;
				float lerpResult283_g170598 = lerp( 1.0 , Visual_MultiMask310_g170598 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170598 = lerpResult283_g170598;
				float temp_output_280_15_g170598 = Out_Luminosity4_g170600;
				half Visual_Luminosity309_g170598 = temp_output_280_15_g170598;
				float clampResult17_g170610 = clamp( Visual_Luminosity309_g170598 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170615 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170615 = ( clampResult17_g170610 - temp_output_7_0_g170615 );
				float lerpResult295_g170598 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170615 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170598 = lerpResult295_g170598;
				TVEModelData Data15_g170604 = Data16_g170201;
				float Out_Dummy15_g170604 = 0;
				float3 Out_PositionWS15_g170604 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170604 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170604 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170604 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170604 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170604 = float3( 0,0,0 );
				float4 Out_VertexData15_g170604 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170604 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170604 = Data15_g170604.Dummy;
				Out_PositionWS15_g170604 = Data15_g170604.PositionWS;
				Out_PositionWO15_g170604 = Data15_g170604.PositionWO;
				Out_PivotWS15_g170604 = Data15_g170604.PivotWS;
				Out_PivotWO15_g170604 = Data15_g170604.PivotWO;
				Out_NormalWS15_g170604 = Data15_g170604.NormalWS;
				Out_ViewDirWS15_g170604 = Data15_g170604.ViewDirWS;
				Out_VertexData15_g170604 = Data15_g170604.VertexData;
				Out_BoundsData15_g170604 = Data15_g170604.BoundsData;
				}
				half4 Model_VertexMasks386_g170598 = Out_VertexData15_g170604;
				float4 break375_g170598 = Model_VertexMasks386_g170598;
				float4 break33_g170607 = _dryness_vert_mode;
				float temp_output_30_0_g170607 = ( break375_g170598.x * break33_g170607.x );
				float temp_output_29_0_g170607 = ( break375_g170598.y * break33_g170607.y );
				float temp_output_31_0_g170607 = ( break375_g170598.z * break33_g170607.z );
				float temp_output_28_0_g170607 = ( temp_output_30_0_g170607 + temp_output_29_0_g170607 + temp_output_31_0_g170607 + ( break375_g170598.w * break33_g170607.w ) );
				float clampResult17_g170608 = clamp( temp_output_28_0_g170607 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170616 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170616 = ( clampResult17_g170608 - temp_output_7_0_g170616 );
				float lerpResult452_g170598 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170616 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170611 = lerpResult452_g170598;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170611 = ( temp_output_6_0_g170611 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170611 = temp_output_6_0_g170611;
				#endif
				half Dryness_VertMask378_g170598 = staticSwitch14_g170611;
				half Dryness_MaskNoise291_g170598 = 1.0;
				half Custom_Mask411_g170598 = 1.0;
				float temp_output_7_0_g170618 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170618 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170598 * Dryness_MultiMask302_g170598 * Dryness_LumaMask301_g170598 * Dryness_VertMask378_g170598 * Dryness_MaskNoise291_g170598 * Dryness_GlobalMask352_g170598 * Custom_Mask411_g170598 ) - temp_output_7_0_g170618 );
				half Dryness_Mask329_g170598 = saturate( ( ( temp_output_9_0_g170618 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170598 = lerp( Visual_Albedo292_g170598 , ( lerpResult485_g170598 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170598 = lerpResult336_g170598;
				#else
				float3 staticSwitch356_g170598 = Visual_Albedo292_g170598;
				#endif
				half3 Final_Albedo331_g170598 = staticSwitch356_g170598;
				float3 In_Albedo3_g170601 = Final_Albedo331_g170598;
				float3 In_AlbedoRaw3_g170601 = Out_AlbedoRaw4_g170600;
				float2 In_NormalTS3_g170601 = Out_NormalTS4_g170600;
				float3 In_NormalWS3_g170601 = Out_NormalWS4_g170600;
				half4 Visual_Shader415_g170598 = Out_Shader4_g170600;
				float4 break438_g170598 = Visual_Shader415_g170598;
				float4 appendResult439_g170598 = (float4(break438_g170598.x , break438_g170598.y , break438_g170598.z , ( break438_g170598.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170598 = lerp( Visual_Shader415_g170598 , appendResult439_g170598 , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170598 = lerpResult427_g170598;
				#else
				float4 staticSwitch426_g170598 = Visual_Shader415_g170598;
				#endif
				half4 Final_Shader433_g170598 = staticSwitch426_g170598;
				float4 In_Shader3_g170601 = Final_Shader433_g170598;
				float4 In_Emissive3_g170601 = Out_Emissive4_g170600;
				float In_Grayscale3_g170601 = temp_output_280_12_g170598;
				float In_Luminosity3_g170601 = temp_output_280_15_g170598;
				float In_MultiMask3_g170601 = temp_output_280_11_g170598;
				float In_AlphaClip3_g170601 = Out_AlphaClip4_g170600;
				float In_AlphaFade3_g170601 = Out_AlphaFade4_g170600;
				float3 In_Translucency3_g170601 = Out_Translucency4_g170600;
				half Visual_Transmission416_g170598 = Out_Transmission4_g170600;
				float lerpResult421_g170598 = lerp( Visual_Transmission416_g170598 , ( Visual_Transmission416_g170598 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170598 = lerpResult421_g170598;
				#else
				float staticSwitch418_g170598 = Visual_Transmission416_g170598;
				#endif
				half Final_Transmission425_g170598 = staticSwitch418_g170598;
				float In_Transmission3_g170601 = Final_Transmission425_g170598;
				float In_Thickness3_g170601 = Out_Thickness4_g170600;
				float In_Diffusion3_g170601 = Out_Diffusion4_g170600;
				{
				Data3_g170601.Dummy = In_Dummy3_g170601;
				Data3_g170601.Albedo = In_Albedo3_g170601;
				Data3_g170601.AlbedoRaw = In_AlbedoRaw3_g170601;
				Data3_g170601.NormalTS = In_NormalTS3_g170601;
				Data3_g170601.NormalWS = In_NormalWS3_g170601;
				Data3_g170601.Shader = In_Shader3_g170601;
				Data3_g170601.Emissive= In_Emissive3_g170601;
				Data3_g170601.MultiMask = In_MultiMask3_g170601;
				Data3_g170601.Grayscale = In_Grayscale3_g170601;
				Data3_g170601.Luminosity = In_Luminosity3_g170601;
				Data3_g170601.AlphaClip = In_AlphaClip3_g170601;
				Data3_g170601.AlphaFade = In_AlphaFade3_g170601;
				Data3_g170601.Translucency = In_Translucency3_g170601;
				Data3_g170601.Transmission = In_Transmission3_g170601;
				Data3_g170601.Thickness = In_Thickness3_g170601;
				Data3_g170601.Diffusion = In_Diffusion3_g170601;
				}
				TVEVisualData Data4_g170623 = Data3_g170601;
				float Out_Dummy4_g170623 = 0;
				float3 Out_Albedo4_g170623 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170623 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170623 = float2( 0,0 );
				float3 Out_NormalWS4_g170623 = float3( 0,0,0 );
				float4 Out_Shader4_g170623 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170623 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170623 = 0;
				float Out_Grayscale4_g170623 = 0;
				float Out_Luminosity4_g170623 = 0;
				float Out_AlphaClip4_g170623 = 0;
				float Out_AlphaFade4_g170623 = 0;
				float3 Out_Translucency4_g170623 = float3( 0,0,0 );
				float Out_Transmission4_g170623 = 0;
				float Out_Thickness4_g170623 = 0;
				float Out_Diffusion4_g170623 = 0;
				{
				Out_Dummy4_g170623 = Data4_g170623.Dummy;
				Out_Albedo4_g170623 = Data4_g170623.Albedo;
				Out_AlbedoRaw4_g170623 = Data4_g170623.AlbedoRaw;
				Out_NormalTS4_g170623 = Data4_g170623.NormalTS;
				Out_NormalWS4_g170623 = Data4_g170623.NormalWS;
				Out_Shader4_g170623 = Data4_g170623.Shader;
				Out_Emissive4_g170623= Data4_g170623.Emissive;
				Out_MultiMask4_g170623 = Data4_g170623.MultiMask;
				Out_Grayscale4_g170623 = Data4_g170623.Grayscale;
				Out_Luminosity4_g170623= Data4_g170623.Luminosity;
				Out_AlphaClip4_g170623 = Data4_g170623.AlphaClip;
				Out_AlphaFade4_g170623 = Data4_g170623.AlphaFade;
				Out_Translucency4_g170623 = Data4_g170623.Translucency;
				Out_Transmission4_g170623 = Data4_g170623.Transmission;
				Out_Thickness4_g170623 = Data4_g170623.Thickness;
				Out_Diffusion4_g170623 = Data4_g170623.Diffusion;
				}
				half3 Visual_Albedo127_g170622 = Out_Albedo4_g170623;
				float4 vertexToFrag24_g170573 = packedInput.ase_texcoord10;
				half4 Interp_Data4335 = vertexToFrag24_g170573;
				float clampResult208_g170622 = clamp( (Interp_Data4335).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170622 = ( Visual_Albedo127_g170622 + ( ( Visual_Albedo127_g170622 * Visual_Albedo127_g170622 * 200.0 * _motion_highlight_color ) * clampResult208_g170622 ) );
				#else
				float3 staticSwitch214_g170622 = Visual_Albedo127_g170622;
				#endif
				half3 Final_Albedo160_g170622 = staticSwitch214_g170622;
				float3 In_Albedo3_g170624 = Final_Albedo160_g170622;
				float3 In_AlbedoRaw3_g170624 = Out_AlbedoRaw4_g170623;
				float2 In_NormalTS3_g170624 = Out_NormalTS4_g170623;
				float3 In_NormalWS3_g170624 = Out_NormalWS4_g170623;
				float4 In_Shader3_g170624 = Out_Shader4_g170623;
				float4 In_Emissive3_g170624 = Out_Emissive4_g170623;
				float In_Grayscale3_g170624 = Out_Grayscale4_g170623;
				float In_Luminosity3_g170624 = Out_Luminosity4_g170623;
				float In_MultiMask3_g170624 = Out_MultiMask4_g170623;
				float In_AlphaClip3_g170624 = Out_AlphaClip4_g170623;
				float In_AlphaFade3_g170624 = Out_AlphaFade4_g170623;
				float3 In_Translucency3_g170624 = Out_Translucency4_g170623;
				float In_Transmission3_g170624 = Out_Transmission4_g170623;
				float In_Thickness3_g170624 = Out_Thickness4_g170623;
				float In_Diffusion3_g170624 = Out_Diffusion4_g170623;
				{
				Data3_g170624.Dummy = In_Dummy3_g170624;
				Data3_g170624.Albedo = In_Albedo3_g170624;
				Data3_g170624.AlbedoRaw = In_AlbedoRaw3_g170624;
				Data3_g170624.NormalTS = In_NormalTS3_g170624;
				Data3_g170624.NormalWS = In_NormalWS3_g170624;
				Data3_g170624.Shader = In_Shader3_g170624;
				Data3_g170624.Emissive= In_Emissive3_g170624;
				Data3_g170624.MultiMask = In_MultiMask3_g170624;
				Data3_g170624.Grayscale = In_Grayscale3_g170624;
				Data3_g170624.Luminosity = In_Luminosity3_g170624;
				Data3_g170624.AlphaClip = In_AlphaClip3_g170624;
				Data3_g170624.AlphaFade = In_AlphaFade3_g170624;
				Data3_g170624.Translucency = In_Translucency3_g170624;
				Data3_g170624.Transmission = In_Transmission3_g170624;
				Data3_g170624.Thickness = In_Thickness3_g170624;
				Data3_g170624.Diffusion = In_Diffusion3_g170624;
				}
				TVEVisualData Data4_g170626 = Data3_g170624;
				float Out_Dummy4_g170626 = 0;
				float3 Out_Albedo4_g170626 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170626 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170626 = float2( 0,0 );
				float3 Out_NormalWS4_g170626 = float3( 0,0,0 );
				float4 Out_Shader4_g170626 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170626 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170626 = 0;
				float Out_Grayscale4_g170626 = 0;
				float Out_Luminosity4_g170626 = 0;
				float Out_AlphaClip4_g170626 = 0;
				float Out_AlphaFade4_g170626 = 0;
				float3 Out_Translucency4_g170626 = float3( 0,0,0 );
				float Out_Transmission4_g170626 = 0;
				float Out_Thickness4_g170626 = 0;
				float Out_Diffusion4_g170626 = 0;
				{
				Out_Dummy4_g170626 = Data4_g170626.Dummy;
				Out_Albedo4_g170626 = Data4_g170626.Albedo;
				Out_AlbedoRaw4_g170626 = Data4_g170626.AlbedoRaw;
				Out_NormalTS4_g170626 = Data4_g170626.NormalTS;
				Out_NormalWS4_g170626 = Data4_g170626.NormalWS;
				Out_Shader4_g170626 = Data4_g170626.Shader;
				Out_Emissive4_g170626= Data4_g170626.Emissive;
				Out_MultiMask4_g170626 = Data4_g170626.MultiMask;
				Out_Grayscale4_g170626 = Data4_g170626.Grayscale;
				Out_Luminosity4_g170626= Data4_g170626.Luminosity;
				Out_AlphaClip4_g170626 = Data4_g170626.AlphaClip;
				Out_AlphaFade4_g170626 = Data4_g170626.AlphaFade;
				Out_Translucency4_g170626 = Data4_g170626.Translucency;
				Out_Transmission4_g170626 = Data4_g170626.Transmission;
				Out_Thickness4_g170626 = Data4_g170626.Thickness;
				Out_Diffusion4_g170626 = Data4_g170626.Diffusion;
				}
				half3 Visual_Albedo127_g170625 = Out_Albedo4_g170626;
				float3 temp_output_622_0_g170625 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170629) = _OverlayAlbedoTex;
				float localFilterTexture19_g170641 = ( 0.0 );
				SamplerState SS19_g170641 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170641 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170641 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170641 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170641 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170641 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170641 = SamplerDefault19_g170641;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170641 = SamplerDefault19_g170641;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170641 = SamplerPoint19_g170641;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170641 = SamplerLow19_g170641;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170641 = SamplerMedium19_g170641;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170641 = SamplerHigh19_g170641;
				#endif
				}
				SamplerState Sampler238_g170629 = SS19_g170641;
				float4 temp_output_6_0_g170630 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170630 = ( temp_output_6_0_g170630 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170630 = temp_output_6_0_g170630;
				#endif
				half4 Overlay_Coords639_g170625 = staticSwitch14_g170630;
				float4 temp_output_37_0_g170629 = Overlay_Coords639_g170625;
				half4 Coords238_g170629 = temp_output_37_0_g170629;
				TVEModelData Data15_g170643 = Data16_g170201;
				float Out_Dummy15_g170643 = 0;
				float3 Out_PositionWS15_g170643 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170643 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170643 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170643 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170643 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170643 = float3( 0,0,0 );
				float4 Out_VertexData15_g170643 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170643 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170643 = Data15_g170643.Dummy;
				Out_PositionWS15_g170643 = Data15_g170643.PositionWS;
				Out_PositionWO15_g170643 = Data15_g170643.PositionWO;
				Out_PivotWS15_g170643 = Data15_g170643.PivotWS;
				Out_PivotWO15_g170643 = Data15_g170643.PivotWO;
				Out_NormalWS15_g170643 = Data15_g170643.NormalWS;
				Out_ViewDirWS15_g170643 = Data15_g170643.ViewDirWS;
				Out_VertexData15_g170643 = Data15_g170643.VertexData;
				Out_BoundsData15_g170643 = Data15_g170643.BoundsData;
				}
				half3 Model_PositionWO602_g170625 = Out_PositionWO15_g170643;
				float3 temp_output_279_0_g170629 = Model_PositionWO602_g170625;
				half3 WorldPosition238_g170629 = temp_output_279_0_g170629;
				half4 localSamplePlanar2D238_g170629 = SamplePlanar2D( Texture238_g170629 , Sampler238_g170629 , Coords238_g170629 , WorldPosition238_g170629 );
				TEXTURE2D(Texture246_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170629 = SS19_g170641;
				half4 Coords246_g170629 = temp_output_37_0_g170629;
				half3 WorldPosition246_g170629 = temp_output_279_0_g170629;
				half3 Model_NormalWS712_g170625 = Out_NormalWS15_g170643;
				float3 temp_output_280_0_g170629 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170629 = temp_output_280_0_g170629;
				half4 localSamplePlanar3D246_g170629 = SamplePlanar3D( Texture246_g170629 , Sampler246_g170629 , Coords246_g170629 , WorldPosition246_g170629 , WorldNormal246_g170629 );
				TEXTURE2D(Texture234_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170629 = SS19_g170641;
				float4 Coords234_g170629 = temp_output_37_0_g170629;
				float3 WorldPosition234_g170629 = temp_output_279_0_g170629;
				float4 localSampleStochastic2D234_g170629 = SampleStochastic2D( Texture234_g170629 , Sampler234_g170629 , Coords234_g170629 , WorldPosition234_g170629 );
				TEXTURE2D(Texture263_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170629 = SS19_g170641;
				half4 Coords263_g170629 = temp_output_37_0_g170629;
				half3 WorldPosition263_g170629 = temp_output_279_0_g170629;
				half3 WorldNormal263_g170629 = temp_output_280_0_g170629;
				half4 localSampleStochastic3D263_g170629 = SampleStochastic3D( Texture263_g170629 , Sampler263_g170629 , Coords263_g170629 , WorldPosition263_g170629 , WorldNormal263_g170629 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170625 = localSamplePlanar2D238_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170625 = localSamplePlanar3D246_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170625 = localSampleStochastic2D234_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170625 = localSampleStochastic3D263_g170629;
				#else
				float4 staticSwitch676_g170625 = localSamplePlanar2D238_g170629;
				#endif
				half3 Overlay_Albedo526_g170625 = (staticSwitch676_g170625).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170625 = ( temp_output_622_0_g170625 * Overlay_Albedo526_g170625 );
				#else
				float3 staticSwitch578_g170625 = temp_output_622_0_g170625;
				#endif
				float3 temp_output_6_0_g170644 = staticSwitch578_g170625;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170644 = ( temp_output_6_0_g170644 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170644 = temp_output_6_0_g170644;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				TEXTURE2D(Texture246_g170633) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170633 = sampler_Linear_Repeat;
				float4 appendResult863_g170625 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170633 = appendResult863_g170625;
				half4 Coords246_g170633 = temp_output_37_0_g170633;
				float3 temp_output_279_0_g170633 = Model_PositionWO602_g170625;
				half3 WorldPosition246_g170633 = temp_output_279_0_g170633;
				float3 temp_output_280_0_g170633 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170633 = temp_output_280_0_g170633;
				half4 localSamplePlanar3D246_g170633 = SamplePlanar3D( Texture246_g170633 , Sampler246_g170633 , Coords246_g170633 , WorldPosition246_g170633 , WorldNormal246_g170633 );
				half Overlay_GlitterTex854_g170625 = (localSamplePlanar3D246_g170633).x;
				half3 Model_PositionWS879_g170625 = Out_PositionWS15_g170643;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170625 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170625 * 1.0 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170625 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170625 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170625 = staticSwitch868_g170625;
				half Overlay_TexMask908_g170625 = 1.0;
				float3 temp_output_739_21_g170625 = Out_NormalWS4_g170626;
				half3 Visual_NormalWS749_g170625 = temp_output_739_21_g170625;
				float clampResult17_g170650 = clamp( saturate( (Visual_NormalWS749_g170625).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170654 = _OverlayProjRemap.x;
				float temp_output_9_0_g170654 = ( clampResult17_g170650 - temp_output_7_0_g170654 );
				float lerpResult842_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170654 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170625 = lerpResult842_g170625;
				float temp_output_739_15_g170625 = Out_Luminosity4_g170626;
				half Visual_Luminosity654_g170625 = temp_output_739_15_g170625;
				float clampResult17_g170658 = clamp( Visual_Luminosity654_g170625 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170659 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170659 = ( clampResult17_g170658 - temp_output_7_0_g170659 );
				float lerpResult587_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170659 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170625 = lerpResult587_g170625;
				half4 Model_VertexMasks791_g170625 = Out_VertexData15_g170643;
				float4 break792_g170625 = Model_VertexMasks791_g170625;
				float4 break33_g170645 = _overlay_vert_mode;
				float temp_output_30_0_g170645 = ( break792_g170625.x * break33_g170645.x );
				float temp_output_29_0_g170645 = ( break792_g170625.y * break33_g170645.y );
				float temp_output_31_0_g170645 = ( break792_g170625.z * break33_g170645.z );
				float temp_output_28_0_g170645 = ( temp_output_30_0_g170645 + temp_output_29_0_g170645 + temp_output_31_0_g170645 + ( break792_g170625.w * break33_g170645.w ) );
				float clampResult17_g170646 = clamp( temp_output_28_0_g170645 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170655 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170655 = ( clampResult17_g170646 - temp_output_7_0_g170655 );
				float lerpResult881_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170655 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170651 = lerpResult881_g170625;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170651 = ( temp_output_6_0_g170651 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170651 = temp_output_6_0_g170651;
				#endif
				half Overlay_VertMask801_g170625 = staticSwitch14_g170651;
				half Overlay_MaskNoise427_g170625 = 1.0;
				TVEGlobalData Data15_g170627 = Data204_g170214;
				float Out_Dummy15_g170627 = 0;
				float4 Out_CoatParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170627 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170627 = Data15_g170627.Dummy;
				Out_CoatParams15_g170627 = Data15_g170627.CoatParams;
				Out_PaintParams15_g170627 = Data15_g170627.PaintParams;
				Out_GlowParams15_g170627 = Data15_g170627.GlowParams;
				Out_AtmoParams15_g170627= Data15_g170627.AtmoParams;
				Out_FadeParams15_g170627= Data15_g170627.FadeParams;
				Out_FormParams15_g170627 = Data15_g170627.FormParams;
				Out_FlowParams15_g170627 = Data15_g170627.FlowParams;
				}
				half4 Global_AtmoParams516_g170625 = Out_AtmoParams15_g170627;
				float temp_output_6_0_g170660 = (Global_AtmoParams516_g170625).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170660 = ( temp_output_6_0_g170660 + ( _OverlayElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170660 = temp_output_6_0_g170660;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170625 = staticSwitch14_g170660;
				#else
				float staticSwitch705_g170625 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170625 = lerp( 1.0 , ( staticSwitch705_g170625 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170625 = lerpResult937_g170625;
				half Custom_Mask646_g170625 = 1.0;
				float temp_output_7_0_g170657 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170657 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170625 * Overlay_MaskProj457_g170625 * Overlay_MaskLuma438_g170625 * Overlay_VertMask801_g170625 * Overlay_MaskNoise427_g170625 * Overlay_MaskGlobal429_g170625 * Custom_Mask646_g170625 ) - temp_output_7_0_g170657 );
				half Overlay_Mask494_g170625 = saturate( ( ( temp_output_9_0_g170657 / ( _OverlayBlendRemap.y - temp_output_7_0_g170657 ) ) + 0.0001 ) );
				float3 lerpResult467_g170625 = lerp( Visual_Albedo127_g170625 , ( staticSwitch14_g170644 + Overlay_GlitterColor865_g170625 ) , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170625 = lerpResult467_g170625;
				#else
				float3 staticSwitch577_g170625 = Visual_Albedo127_g170625;
				#endif
				half3 Final_Albedo493_g170625 = staticSwitch577_g170625;
				float3 In_Albedo3_g170628 = Final_Albedo493_g170625;
				float3 In_AlbedoRaw3_g170628 = Out_AlbedoRaw4_g170626;
				half2 Visual_NormalTS535_g170625 = Out_NormalTS4_g170626;
				TEXTURE2D(Texture238_g170631) = _OverlayNormalTex;
				float localFilterTexture29_g170642 = ( 0.0 );
				SamplerState SS29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170642 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170642 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170642 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170642 = SamplerDefault29_g170642;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170642 = SamplerDefault29_g170642;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170642 = SamplerPoint29_g170642;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170642 = SamplerLow29_g170642;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170642 = SamplerMedium29_g170642;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170642 = SamplerHigh29_g170642;
				#endif
				}
				SamplerState Sampler238_g170631 = SS29_g170642;
				float4 temp_output_37_0_g170631 = Overlay_Coords639_g170625;
				half4 Coords238_g170631 = temp_output_37_0_g170631;
				float3 temp_output_279_0_g170631 = Model_PositionWO602_g170625;
				half3 WorldPosition238_g170631 = temp_output_279_0_g170631;
				half4 localSamplePlanar2D238_g170631 = SamplePlanar2D( Texture238_g170631 , Sampler238_g170631 , Coords238_g170631 , WorldPosition238_g170631 );
				TEXTURE2D(Texture246_g170631) = _OverlayNormalTex;
				SamplerState Sampler246_g170631 = SS29_g170642;
				half4 Coords246_g170631 = temp_output_37_0_g170631;
				half3 WorldPosition246_g170631 = temp_output_279_0_g170631;
				float3 temp_output_280_0_g170631 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170631 = temp_output_280_0_g170631;
				half4 localSamplePlanar3D246_g170631 = SamplePlanar3D( Texture246_g170631 , Sampler246_g170631 , Coords246_g170631 , WorldPosition246_g170631 , WorldNormal246_g170631 );
				TEXTURE2D(Texture234_g170631) = _OverlayNormalTex;
				SamplerState Sampler234_g170631 = SS29_g170642;
				float4 Coords234_g170631 = temp_output_37_0_g170631;
				float3 WorldPosition234_g170631 = temp_output_279_0_g170631;
				float4 localSampleStochastic2D234_g170631 = SampleStochastic2D( Texture234_g170631 , Sampler234_g170631 , Coords234_g170631 , WorldPosition234_g170631 );
				TEXTURE2D(Texture263_g170631) = _OverlayNormalTex;
				SamplerState Sampler263_g170631 = SS29_g170642;
				half4 Coords263_g170631 = temp_output_37_0_g170631;
				half3 WorldPosition263_g170631 = temp_output_279_0_g170631;
				half3 WorldNormal263_g170631 = temp_output_280_0_g170631;
				half4 localSampleStochastic3D263_g170631 = SampleStochastic3D( Texture263_g170631 , Sampler263_g170631 , Coords263_g170631 , WorldPosition263_g170631 , WorldNormal263_g170631 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170625 = localSamplePlanar2D238_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170625 = localSamplePlanar3D246_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170625 = localSampleStochastic2D234_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170625 = localSampleStochastic3D263_g170631;
				#else
				float4 staticSwitch686_g170625 = localSamplePlanar2D238_g170631;
				#endif
				half4 Normal_Packed45_g170635 = staticSwitch686_g170625;
				float2 appendResult58_g170635 = (float2(( (Normal_Packed45_g170635).x * (Normal_Packed45_g170635).w ) , (Normal_Packed45_g170635).y));
				half2 Normal_Default50_g170635 = appendResult58_g170635;
				half2 Normal_ASTC41_g170635 = (Normal_Packed45_g170635).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170635 = Normal_ASTC41_g170635;
				#else
				float2 staticSwitch38_g170635 = Normal_Default50_g170635;
				#endif
				half2 Normal_NO_DTX544_g170635 = (Normal_Packed45_g170635).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170635 = Normal_NO_DTX544_g170635;
				#else
				float2 staticSwitch37_g170635 = staticSwitch38_g170635;
				#endif
				half2 Normal_Planar45_g170634 = (staticSwitch37_g170635*2.0 + -1.0);
				float2 break71_g170634 = Normal_Planar45_g170634;
				float3 appendResult72_g170634 = (float3(break71_g170634.x , 0.0 , break71_g170634.y));
				half2 Overlay_Normal528_g170625 = (mul( ase_worldToTangent, appendResult72_g170634 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170625 = Overlay_Normal528_g170625;
				#else
				float2 staticSwitch579_g170625 = Visual_NormalTS535_g170625;
				#endif
				float2 lerpResult551_g170625 = lerp( Visual_NormalTS535_g170625 , ( staticSwitch579_g170625 * _OverlayNormalValue ) , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170625 = lerpResult551_g170625;
				#else
				float2 staticSwitch583_g170625 = Visual_NormalTS535_g170625;
				#endif
				half2 Final_NormalTS499_g170625 = staticSwitch583_g170625;
				float2 In_NormalTS3_g170628 = Final_NormalTS499_g170625;
				float3 In_NormalWS3_g170628 = temp_output_739_21_g170625;
				half4 Visual_Masks536_g170625 = Out_Shader4_g170626;
				float4 appendResult585_g170625 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170625 = lerp( Visual_Masks536_g170625 , appendResult585_g170625 , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170625 = lerpResult584_g170625;
				#else
				float4 staticSwitch586_g170625 = Visual_Masks536_g170625;
				#endif
				half4 Final_Masks482_g170625 = staticSwitch586_g170625;
				float4 In_Shader3_g170628 = Final_Masks482_g170625;
				float4 In_Emissive3_g170628 = Out_Emissive4_g170626;
				float temp_output_739_12_g170625 = Out_Grayscale4_g170626;
				float In_Grayscale3_g170628 = temp_output_739_12_g170625;
				float In_Luminosity3_g170628 = temp_output_739_15_g170625;
				float In_MultiMask3_g170628 = Out_MultiMask4_g170626;
				float In_AlphaClip3_g170628 = Out_AlphaClip4_g170626;
				float In_AlphaFade3_g170628 = Out_AlphaFade4_g170626;
				float3 In_Translucency3_g170628 = Out_Translucency4_g170626;
				half Visual_Transmission699_g170625 = Out_Transmission4_g170626;
				float lerpResult746_g170625 = lerp( Visual_Transmission699_g170625 , ( Visual_Transmission699_g170625 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170625 * Overlay_MaskNoise427_g170625 * Overlay_MaskGlobal429_g170625 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170625 = lerpResult746_g170625;
				#else
				float staticSwitch703_g170625 = Visual_Transmission699_g170625;
				#endif
				half Final_Transmission702_g170625 = staticSwitch703_g170625;
				float In_Transmission3_g170628 = Final_Transmission702_g170625;
				float In_Thickness3_g170628 = Out_Thickness4_g170626;
				float In_Diffusion3_g170628 = Out_Diffusion4_g170626;
				{
				Data3_g170628.Dummy = In_Dummy3_g170628;
				Data3_g170628.Albedo = In_Albedo3_g170628;
				Data3_g170628.AlbedoRaw = In_AlbedoRaw3_g170628;
				Data3_g170628.NormalTS = In_NormalTS3_g170628;
				Data3_g170628.NormalWS = In_NormalWS3_g170628;
				Data3_g170628.Shader = In_Shader3_g170628;
				Data3_g170628.Emissive= In_Emissive3_g170628;
				Data3_g170628.MultiMask = In_MultiMask3_g170628;
				Data3_g170628.Grayscale = In_Grayscale3_g170628;
				Data3_g170628.Luminosity = In_Luminosity3_g170628;
				Data3_g170628.AlphaClip = In_AlphaClip3_g170628;
				Data3_g170628.AlphaFade = In_AlphaFade3_g170628;
				Data3_g170628.Translucency = In_Translucency3_g170628;
				Data3_g170628.Transmission = In_Transmission3_g170628;
				Data3_g170628.Thickness = In_Thickness3_g170628;
				Data3_g170628.Diffusion = In_Diffusion3_g170628;
				}
				TVEVisualData Data4_g170663 = Data3_g170628;
				float Out_Dummy4_g170663 = 0;
				float3 Out_Albedo4_g170663 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170663 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170663 = float2( 0,0 );
				float3 Out_NormalWS4_g170663 = float3( 0,0,0 );
				float4 Out_Shader4_g170663 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170663 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170663 = 0;
				float Out_Grayscale4_g170663 = 0;
				float Out_Luminosity4_g170663 = 0;
				float Out_AlphaClip4_g170663 = 0;
				float Out_AlphaFade4_g170663 = 0;
				float3 Out_Translucency4_g170663 = float3( 0,0,0 );
				float Out_Transmission4_g170663 = 0;
				float Out_Thickness4_g170663 = 0;
				float Out_Diffusion4_g170663 = 0;
				{
				Out_Dummy4_g170663 = Data4_g170663.Dummy;
				Out_Albedo4_g170663 = Data4_g170663.Albedo;
				Out_AlbedoRaw4_g170663 = Data4_g170663.AlbedoRaw;
				Out_NormalTS4_g170663 = Data4_g170663.NormalTS;
				Out_NormalWS4_g170663 = Data4_g170663.NormalWS;
				Out_Shader4_g170663 = Data4_g170663.Shader;
				Out_Emissive4_g170663= Data4_g170663.Emissive;
				Out_MultiMask4_g170663 = Data4_g170663.MultiMask;
				Out_Grayscale4_g170663 = Data4_g170663.Grayscale;
				Out_Luminosity4_g170663= Data4_g170663.Luminosity;
				Out_AlphaClip4_g170663 = Data4_g170663.AlphaClip;
				Out_AlphaFade4_g170663 = Data4_g170663.AlphaFade;
				Out_Translucency4_g170663 = Data4_g170663.Translucency;
				Out_Transmission4_g170663 = Data4_g170663.Transmission;
				Out_Thickness4_g170663 = Data4_g170663.Thickness;
				Out_Diffusion4_g170663 = Data4_g170663.Diffusion;
				}
				half3 Visual_Albedo127_g170662 = Out_Albedo4_g170663;
				TVEGlobalData Data15_g170668 = Data204_g170214;
				float Out_Dummy15_g170668 = 0;
				float4 Out_CoatParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170668 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170668 = Data15_g170668.Dummy;
				Out_CoatParams15_g170668 = Data15_g170668.CoatParams;
				Out_PaintParams15_g170668 = Data15_g170668.PaintParams;
				Out_GlowParams15_g170668 = Data15_g170668.GlowParams;
				Out_AtmoParams15_g170668= Data15_g170668.AtmoParams;
				Out_FadeParams15_g170668= Data15_g170668.FadeParams;
				Out_FormParams15_g170668 = Data15_g170668.FormParams;
				Out_FlowParams15_g170668 = Data15_g170668.FlowParams;
				}
				half4 Global_AtmoParams516_g170662 = Out_AtmoParams15_g170668;
				float4 temp_output_6_0_g170689 = Global_AtmoParams516_g170662;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170689 = ( temp_output_6_0_g170689 + ( _WetnessElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170689 = temp_output_6_0_g170689;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170662 = staticSwitch14_g170689;
				#else
				float4 staticSwitch663_g170662 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170662 = lerp( float2( 1,1 ) , (( staticSwitch663_g170662 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170662 = lerpResult1121_g170662;
				half Global_Wetness429_g170662 = break1123_g170662.x;
				half Wetness_Value1042_g170662 = ( _WetnessIntensityValue * Global_Wetness429_g170662 );
				TVEModelData Data15_g170674 = Data16_g170201;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				}
				half4 Model_VertexData1030_g170662 = Out_VertexData15_g170674;
				float4 break1019_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170677 = _wetness_vert_mode;
				float temp_output_30_0_g170677 = ( break1019_g170662.x * break33_g170677.x );
				float temp_output_29_0_g170677 = ( break1019_g170662.y * break33_g170677.y );
				float temp_output_31_0_g170677 = ( break1019_g170662.z * break33_g170677.z );
				float temp_output_28_0_g170677 = ( temp_output_30_0_g170677 + temp_output_29_0_g170677 + temp_output_31_0_g170677 + ( break1019_g170662.w * break33_g170677.w ) );
				float clampResult17_g170676 = clamp( temp_output_28_0_g170677 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170685 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170685 = ( clampResult17_g170676 - temp_output_7_0_g170685 );
				float lerpResult1026_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170685 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170678 = lerpResult1026_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170678 = ( temp_output_6_0_g170678 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170678 = temp_output_6_0_g170678;
				#endif
				float temp_output_1025_0_g170662 = staticSwitch14_g170678;
				half Wetness_VertMask1024_g170662 = temp_output_1025_0_g170662;
				float temp_output_1043_0_g170662 = ( Wetness_Value1042_g170662 * Wetness_VertMask1024_g170662 );
				half Wetness_Mask866_g170662 = temp_output_1043_0_g170662;
				float4 break1083_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170680 = _wetness_water_vert_mode;
				float temp_output_30_0_g170680 = ( break1083_g170662.x * break33_g170680.x );
				float temp_output_29_0_g170680 = ( break1083_g170662.y * break33_g170680.y );
				float temp_output_31_0_g170680 = ( break1083_g170662.z * break33_g170680.z );
				float temp_output_28_0_g170680 = ( temp_output_30_0_g170680 + temp_output_29_0_g170680 + temp_output_31_0_g170680 + ( break1083_g170662.w * break33_g170680.w ) );
				float clampResult17_g170679 = clamp( temp_output_28_0_g170680 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170686 = ( clampResult17_g170679 - temp_output_7_0_g170686 );
				float lerpResult1089_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170686 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170681 = lerpResult1089_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170681 = ( temp_output_6_0_g170681 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170681 = temp_output_6_0_g170681;
				#endif
				float temp_output_1091_0_g170662 = staticSwitch14_g170681;
				half Water_VertMask1094_g170662 = temp_output_1091_0_g170662;
				half4 Visual_Masks536_g170662 = Out_Shader4_g170663;
				float lerpResult1013_g170662 = lerp( 1.0 , (Visual_Masks536_g170662).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170662 = lerpResult1013_g170662;
				float clampResult17_g170675 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170662 * Water_VertMask1094_g170662 ) - Water_HeightMask782_g170662 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170688 = ( clampResult17_g170675 - temp_output_7_0_g170688 );
				half3 Model_NormalWS798_g170662 = Out_NormalWS15_g170674;
				float temp_output_786_0_g170662 = saturate( (Model_NormalWS798_g170662).y );
				half Wetness_ProjMask790_g170662 = temp_output_786_0_g170662;
				half Water_Mask760_g170662 = ( saturate( ( ( temp_output_9_0_g170688 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170662 );
				float3 lerpResult918_g170662 = lerp( Visual_Albedo127_g170662 , ( Visual_Albedo127_g170662 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170662);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170662 = lerpResult918_g170662;
				#else
				float3 staticSwitch946_g170662 = Visual_Albedo127_g170662;
				#endif
				float3 lerpResult768_g170662 = lerp( staticSwitch946_g170662 , ( staticSwitch946_g170662 * staticSwitch946_g170662 ) , _WetnessContrastValue);
				float3 lerpResult651_g170662 = lerp( Visual_Albedo127_g170662 , lerpResult768_g170662 , Wetness_Mask866_g170662);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170662 = lerpResult651_g170662;
				#else
				float3 staticSwitch577_g170662 = Visual_Albedo127_g170662;
				#endif
				half3 Final_Albedo493_g170662 = staticSwitch577_g170662;
				float3 In_Albedo3_g170664 = Final_Albedo493_g170662;
				float3 In_AlbedoRaw3_g170664 = Out_AlbedoRaw4_g170663;
				half2 Visual_Normal535_g170662 = Out_NormalTS4_g170663;
				float lerpResult877_g170662 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170662 * Water_Mask760_g170662 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170662 = ( Visual_Normal535_g170662 * lerpResult877_g170662 );
				#else
				float2 staticSwitch957_g170662 = Visual_Normal535_g170662;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				TEXTURE2D(Texture238_g170672) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170672 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170662 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170672 = appendResult924_g170662;
				half4 Coords238_g170672 = temp_output_37_0_g170672;
				half3 Model_PositionWO602_g170662 = Out_PositionWO15_g170674;
				float3 temp_output_279_0_g170672 = Model_PositionWO602_g170662;
				half3 WorldPosition238_g170672 = temp_output_279_0_g170672;
				half4 localSamplePlanar2D238_g170672 = SamplePlanar2D( Texture238_g170672 , Sampler238_g170672 , Coords238_g170672 , WorldPosition238_g170672 );
				float4 temp_output_1010_0_g170662 = localSamplePlanar2D238_g170672;
				half2 Rain_DropsNormal919_g170662 = (temp_output_1010_0_g170662).zw;
				float2 temp_output_903_0_g170662 = (Rain_DropsNormal919_g170662*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170662 = (temp_output_1010_0_g170662).xy;
				float2 lerpResult904_g170662 = lerp( temp_output_903_0_g170662 , (Rain_RingsNormal713_g170662*2.0 + -1.0) , ( Water_Mask760_g170662 * Water_Mask760_g170662 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170662 = lerpResult904_g170662;
				#else
				float2 staticSwitch960_g170662 = temp_output_903_0_g170662;
				#endif
				half2 Rain_Drops1002_g170662 = ( staticSwitch960_g170662 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170662 = Out_PositionWS15_g170674;
				half Global_Rain955_g170662 = break1123_g170662.y;
				half Rain_Value1067_g170662 = Global_Rain955_g170662;
				float4 break1097_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170683 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170683 = ( break1097_g170662.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1097_g170662.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1097_g170662.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1097_g170662.w * break33_g170683.w ) );
				float clampResult17_g170682 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170687 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170687 = ( clampResult17_g170682 - temp_output_7_0_g170687 );
				float lerpResult1100_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170687 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170684 = lerpResult1100_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				float temp_output_1101_0_g170662 = staticSwitch14_g170684;
				half Rain_VertMask1108_g170662 = temp_output_1101_0_g170662;
				half Rain_Mask999_g170662 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170662 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170662 * Rain_VertMask1108_g170662 );
				half2 Normal_Planar45_g170671 = ( Rain_Drops1002_g170662 * Rain_Mask999_g170662 * Wetness_ProjMask790_g170662 );
				float2 break71_g170671 = Normal_Planar45_g170671;
				float3 appendResult72_g170671 = (float3(break71_g170671.x , 0.0 , break71_g170671.y));
				half2 Wetness_Normal526_g170662 = (mul( ase_worldToTangent, appendResult72_g170671 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170662 = Wetness_Normal526_g170662;
				#else
				float2 staticSwitch583_g170662 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170662 = ( staticSwitch957_g170662 + staticSwitch583_g170662 );
				#else
				float2 staticSwitch774_g170662 = Visual_Normal535_g170662;
				#endif
				half2 Final_Normal499_g170662 = staticSwitch774_g170662;
				float2 In_NormalTS3_g170664 = Final_Normal499_g170662;
				float3 In_NormalWS3_g170664 = Out_NormalWS4_g170663;
				float4 break658_g170662 = Visual_Masks536_g170662;
				float temp_output_935_0_g170662 = ( Wetness_Mask866_g170662 * _WetnessSmoothnessValue );
				float lerpResult941_g170662 = lerp( temp_output_935_0_g170662 , 2.0 , Water_Mask760_g170662);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170662 = lerpResult941_g170662;
				#else
				float staticSwitch959_g170662 = temp_output_935_0_g170662;
				#endif
				float4 appendResult661_g170662 = (float4(break658_g170662.x , break658_g170662.y , break658_g170662.z , saturate( ( break658_g170662.w + staticSwitch959_g170662 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170662 = appendResult661_g170662;
				#else
				float4 staticSwitch586_g170662 = Visual_Masks536_g170662;
				#endif
				half4 Final_Masks482_g170662 = staticSwitch586_g170662;
				float4 In_Shader3_g170664 = Final_Masks482_g170662;
				float4 In_Emissive3_g170664 = Out_Emissive4_g170663;
				float In_Grayscale3_g170664 = Out_Grayscale4_g170663;
				float In_Luminosity3_g170664 = Out_Luminosity4_g170663;
				float In_MultiMask3_g170664 = Out_MultiMask4_g170663;
				float In_AlphaClip3_g170664 = Out_AlphaClip4_g170663;
				float In_AlphaFade3_g170664 = Out_AlphaFade4_g170663;
				float3 In_Translucency3_g170664 = Out_Translucency4_g170663;
				float In_Transmission3_g170664 = Out_Transmission4_g170663;
				float In_Thickness3_g170664 = Out_Thickness4_g170663;
				float In_Diffusion3_g170664 = Out_Diffusion4_g170663;
				{
				Data3_g170664.Dummy = In_Dummy3_g170664;
				Data3_g170664.Albedo = In_Albedo3_g170664;
				Data3_g170664.AlbedoRaw = In_AlbedoRaw3_g170664;
				Data3_g170664.NormalTS = In_NormalTS3_g170664;
				Data3_g170664.NormalWS = In_NormalWS3_g170664;
				Data3_g170664.Shader = In_Shader3_g170664;
				Data3_g170664.Emissive= In_Emissive3_g170664;
				Data3_g170664.MultiMask = In_MultiMask3_g170664;
				Data3_g170664.Grayscale = In_Grayscale3_g170664;
				Data3_g170664.Luminosity = In_Luminosity3_g170664;
				Data3_g170664.AlphaClip = In_AlphaClip3_g170664;
				Data3_g170664.AlphaFade = In_AlphaFade3_g170664;
				Data3_g170664.Translucency = In_Translucency3_g170664;
				Data3_g170664.Transmission = In_Transmission3_g170664;
				Data3_g170664.Thickness = In_Thickness3_g170664;
				Data3_g170664.Diffusion = In_Diffusion3_g170664;
				}
				TVEVisualData Data4_g170694 = Data3_g170664;
				float Out_Dummy4_g170694 = 0;
				float3 Out_Albedo4_g170694 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170694 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170694 = float2( 0,0 );
				float3 Out_NormalWS4_g170694 = float3( 0,0,0 );
				float4 Out_Shader4_g170694 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170694 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170694 = 0;
				float Out_Grayscale4_g170694 = 0;
				float Out_Luminosity4_g170694 = 0;
				float Out_AlphaClip4_g170694 = 0;
				float Out_AlphaFade4_g170694 = 0;
				float3 Out_Translucency4_g170694 = float3( 0,0,0 );
				float Out_Transmission4_g170694 = 0;
				float Out_Thickness4_g170694 = 0;
				float Out_Diffusion4_g170694 = 0;
				{
				Out_Dummy4_g170694 = Data4_g170694.Dummy;
				Out_Albedo4_g170694 = Data4_g170694.Albedo;
				Out_AlbedoRaw4_g170694 = Data4_g170694.AlbedoRaw;
				Out_NormalTS4_g170694 = Data4_g170694.NormalTS;
				Out_NormalWS4_g170694 = Data4_g170694.NormalWS;
				Out_Shader4_g170694 = Data4_g170694.Shader;
				Out_Emissive4_g170694= Data4_g170694.Emissive;
				Out_MultiMask4_g170694 = Data4_g170694.MultiMask;
				Out_Grayscale4_g170694 = Data4_g170694.Grayscale;
				Out_Luminosity4_g170694= Data4_g170694.Luminosity;
				Out_AlphaClip4_g170694 = Data4_g170694.AlphaClip;
				Out_AlphaFade4_g170694 = Data4_g170694.AlphaFade;
				Out_Translucency4_g170694 = Data4_g170694.Translucency;
				Out_Transmission4_g170694 = Data4_g170694.Transmission;
				Out_Thickness4_g170694 = Data4_g170694.Thickness;
				Out_Diffusion4_g170694 = Data4_g170694.Diffusion;
				}
				float3 In_Albedo3_g170692 = Out_Albedo4_g170694;
				float3 In_AlbedoRaw3_g170692 = Out_AlbedoRaw4_g170694;
				float2 In_NormalTS3_g170692 = Out_NormalTS4_g170694;
				float3 In_NormalWS3_g170692 = Out_NormalWS4_g170694;
				float4 In_Shader3_g170692 = Out_Shader4_g170694;
				float4 In_Emissive3_g170692 = Out_Emissive4_g170694;
				float In_Grayscale3_g170692 = Out_Grayscale4_g170694;
				float In_Luminosity3_g170692 = Out_Luminosity4_g170694;
				float temp_output_836_11_g170691 = Out_MultiMask4_g170694;
				float In_MultiMask3_g170692 = temp_output_836_11_g170691;
				half Visual_AlphaClip667_g170691 = Out_AlphaClip4_g170694;
				half Input_True57_g170701 = Visual_AlphaClip667_g170691;
				half True36_g170701 = Input_True57_g170701;
				TVEGlobalData Data15_g170693 = Data204_g170214;
				float Out_Dummy15_g170693 = 0;
				float4 Out_CoatParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170693 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170693 = Data15_g170693.Dummy;
				Out_CoatParams15_g170693 = Data15_g170693.CoatParams;
				Out_PaintParams15_g170693 = Data15_g170693.PaintParams;
				Out_GlowParams15_g170693 = Data15_g170693.GlowParams;
				Out_AtmoParams15_g170693= Data15_g170693.AtmoParams;
				Out_FadeParams15_g170693= Data15_g170693.FadeParams;
				Out_FormParams15_g170693 = Data15_g170693.FormParams;
				Out_FlowParams15_g170693 = Data15_g170693.FlowParams;
				}
				half4 Global_FadeParams516_g170691 = Out_FadeParams15_g170693;
				float temp_output_6_0_g170704 = saturate( (Global_FadeParams516_g170691).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170704 = ( temp_output_6_0_g170704 + ( _CutoutElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170704 = temp_output_6_0_g170704;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170691 = staticSwitch14_g170704;
				#else
				float staticSwitch663_g170691 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170691 = lerp( 1.0 , ( staticSwitch663_g170691 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170691 = lerpResult843_g170691;
				float lerpResult811_g170691 = lerp( 1.0 , Visual_AlphaClip667_g170691 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170691 = lerpResult811_g170691;
				TVEModelData Data15_g170695 = Data16_g170201;
				float Out_Dummy15_g170695 = 0;
				float3 Out_PositionWS15_g170695 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170695 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170695 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170695 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170695 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170695 = float3( 0,0,0 );
				float4 Out_VertexData15_g170695 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170695 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170695 = Data15_g170695.Dummy;
				Out_PositionWS15_g170695 = Data15_g170695.PositionWS;
				Out_PositionWO15_g170695 = Data15_g170695.PositionWO;
				Out_PivotWS15_g170695 = Data15_g170695.PivotWS;
				Out_PivotWO15_g170695 = Data15_g170695.PivotWO;
				Out_NormalWS15_g170695 = Data15_g170695.NormalWS;
				Out_ViewDirWS15_g170695 = Data15_g170695.ViewDirWS;
				Out_VertexData15_g170695 = Data15_g170695.VertexData;
				Out_BoundsData15_g170695 = Data15_g170695.BoundsData;
				}
				half3 Model_PositionWO602_g170691 = Out_PositionWO15_g170695;
				float4 tex3DNode60_g170698 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170691 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170691 = lerp( 1.0 , tex3DNode60_g170698.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170691 = lerpResult673_g170691;
				half4 Model_VertexMasks752_g170691 = Out_VertexData15_g170695;
				float4 break755_g170691 = Model_VertexMasks752_g170691;
				float4 break33_g170696 = _cutout_vert_mode;
				float temp_output_30_0_g170696 = ( break755_g170691.x * break33_g170696.x );
				float temp_output_29_0_g170696 = ( break755_g170691.y * break33_g170696.y );
				float temp_output_31_0_g170696 = ( break755_g170691.z * break33_g170696.z );
				float temp_output_28_0_g170696 = ( temp_output_30_0_g170696 + temp_output_29_0_g170696 + temp_output_31_0_g170696 + ( break755_g170691.w * break33_g170696.w ) );
				float clampResult17_g170697 = clamp( temp_output_28_0_g170696 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170703 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170703 = ( clampResult17_g170697 - temp_output_7_0_g170703 );
				float lerpResult820_g170691 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170703 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170700 = lerpResult820_g170691;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170700 = ( temp_output_6_0_g170700 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170700 = temp_output_6_0_g170700;
				#endif
				float temp_output_801_0_g170691 = staticSwitch14_g170700;
				half Local_VertMask766_g170691 = temp_output_801_0_g170691;
				half Visual_MultiMask671_g170691 = temp_output_836_11_g170691;
				float lerpResult683_g170691 = lerp( 1.0 , Visual_MultiMask671_g170691 , _CutoutMultiValue);
				half Local_MultiMask685_g170691 = lerpResult683_g170691;
				float lerpResult728_g170691 = lerp( Visual_AlphaClip667_g170691 , min( Visual_AlphaClip667_g170691 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170691 ) - ( Local_AlphaMask814_g170691 * Local_NoiseMask678_g170691 * Local_VertMask766_g170691 ) ) ) ) , Local_MultiMask685_g170691);
				half Local_AlphaClip784_g170691 = lerpResult728_g170691;
				half Input_False58_g170701 = Local_AlphaClip784_g170691;
				half False36_g170701 = Input_False58_g170701;
				half localShadowPassCheck36_g170701 = ShadowPassCheck36_g170701( True36_g170701 , False36_g170701 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170691 = Local_AlphaClip784_g170691;
				#else
				float staticSwitch791_g170691 = localShadowPassCheck36_g170701;
				#endif
				float temp_output_6_0_g170702 = staticSwitch791_g170691;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170702 = ( temp_output_6_0_g170702 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170702 = temp_output_6_0_g170702;
				#endif
				float temp_output_798_0_g170691 = staticSwitch14_g170702;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170691 = temp_output_798_0_g170691;
				#else
				float staticSwitch577_g170691 = Visual_AlphaClip667_g170691;
				#endif
				half Final_AlphaClip795_g170691 = staticSwitch577_g170691;
				float In_AlphaClip3_g170692 = Final_AlphaClip795_g170691;
				float In_AlphaFade3_g170692 = Out_AlphaFade4_g170694;
				float3 In_Translucency3_g170692 = Out_Translucency4_g170694;
				float In_Transmission3_g170692 = Out_Transmission4_g170694;
				float In_Thickness3_g170692 = Out_Thickness4_g170694;
				float In_Diffusion3_g170692 = Out_Diffusion4_g170694;
				{
				Data3_g170692.Dummy = In_Dummy3_g170692;
				Data3_g170692.Albedo = In_Albedo3_g170692;
				Data3_g170692.AlbedoRaw = In_AlbedoRaw3_g170692;
				Data3_g170692.NormalTS = In_NormalTS3_g170692;
				Data3_g170692.NormalWS = In_NormalWS3_g170692;
				Data3_g170692.Shader = In_Shader3_g170692;
				Data3_g170692.Emissive= In_Emissive3_g170692;
				Data3_g170692.MultiMask = In_MultiMask3_g170692;
				Data3_g170692.Grayscale = In_Grayscale3_g170692;
				Data3_g170692.Luminosity = In_Luminosity3_g170692;
				Data3_g170692.AlphaClip = In_AlphaClip3_g170692;
				Data3_g170692.AlphaFade = In_AlphaFade3_g170692;
				Data3_g170692.Translucency = In_Translucency3_g170692;
				Data3_g170692.Transmission = In_Transmission3_g170692;
				Data3_g170692.Thickness = In_Thickness3_g170692;
				Data3_g170692.Diffusion = In_Diffusion3_g170692;
				}
				TVEVisualData Data4_g170708 = Data3_g170692;
				float Out_Dummy4_g170708 = 0;
				float3 Out_Albedo4_g170708 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170708 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170708 = float2( 0,0 );
				float3 Out_NormalWS4_g170708 = float3( 0,0,0 );
				float4 Out_Shader4_g170708 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170708 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170708 = 0;
				float Out_Grayscale4_g170708 = 0;
				float Out_Luminosity4_g170708 = 0;
				float Out_AlphaClip4_g170708 = 0;
				float Out_AlphaFade4_g170708 = 0;
				float3 Out_Translucency4_g170708 = float3( 0,0,0 );
				float Out_Transmission4_g170708 = 0;
				float Out_Thickness4_g170708 = 0;
				float Out_Diffusion4_g170708 = 0;
				{
				Out_Dummy4_g170708 = Data4_g170708.Dummy;
				Out_Albedo4_g170708 = Data4_g170708.Albedo;
				Out_AlbedoRaw4_g170708 = Data4_g170708.AlbedoRaw;
				Out_NormalTS4_g170708 = Data4_g170708.NormalTS;
				Out_NormalWS4_g170708 = Data4_g170708.NormalWS;
				Out_Shader4_g170708 = Data4_g170708.Shader;
				Out_Emissive4_g170708= Data4_g170708.Emissive;
				Out_MultiMask4_g170708 = Data4_g170708.MultiMask;
				Out_Grayscale4_g170708 = Data4_g170708.Grayscale;
				Out_Luminosity4_g170708= Data4_g170708.Luminosity;
				Out_AlphaClip4_g170708 = Data4_g170708.AlphaClip;
				Out_AlphaFade4_g170708 = Data4_g170708.AlphaFade;
				Out_Translucency4_g170708 = Data4_g170708.Translucency;
				Out_Transmission4_g170708 = Data4_g170708.Transmission;
				Out_Thickness4_g170708 = Data4_g170708.Thickness;
				Out_Diffusion4_g170708 = Data4_g170708.Diffusion;
				}
				float3 In_Albedo3_g170709 = Out_Albedo4_g170708;
				float3 In_AlbedoRaw3_g170709 = Out_AlbedoRaw4_g170708;
				float2 In_NormalTS3_g170709 = Out_NormalTS4_g170708;
				float3 In_NormalWS3_g170709 = Out_NormalWS4_g170708;
				float4 In_Shader3_g170709 = Out_Shader4_g170708;
				float4 In_Emissive3_g170709 = Out_Emissive4_g170708;
				float In_Grayscale3_g170709 = Out_Grayscale4_g170708;
				float In_Luminosity3_g170709 = Out_Luminosity4_g170708;
				float temp_output_821_11_g170706 = Out_MultiMask4_g170708;
				float In_MultiMask3_g170709 = temp_output_821_11_g170706;
				half Visual_AlphaClip754_g170706 = Out_AlphaClip4_g170708;
				half Input_True57_g170711 = Visual_AlphaClip754_g170706;
				half True36_g170711 = Input_True57_g170711;
				half Dither_Constant768_g170706 = _DitherConstantValue;
				float3 ase_positionWS = GetAbsolutePositionWS( PositionRWS );
				half Dither_BiasProximity881_g170706 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170706 = TVE_DitherParams.w;
				float lerpResult884_g170706 = lerp( 1.0 , Dither_BiasProximity881_g170706 , Dither_BiasEnabled883_g170706);
				float temp_output_7_0_g170717 = _DitherProximityMaxValue;
				float temp_output_9_0_g170717 = ( ( distance( ase_positionWS , _WorldSpaceCameraPos ) * lerpResult884_g170706 ) - temp_output_7_0_g170717 );
				half Dither_Proximity767_g170706 = ( saturate( ( ( temp_output_9_0_g170717 / ( _DitherProximityMinValue - temp_output_7_0_g170717 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170710 = Data16_g170201;
				float Out_Dummy15_g170710 = 0;
				float3 Out_PositionWS15_g170710 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170710 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170710 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170710 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170710 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170710 = float3( 0,0,0 );
				float4 Out_VertexData15_g170710 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170710 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170710 = Data15_g170710.Dummy;
				Out_PositionWS15_g170710 = Data15_g170710.PositionWS;
				Out_PositionWO15_g170710 = Data15_g170710.PositionWO;
				Out_PivotWS15_g170710 = Data15_g170710.PivotWS;
				Out_PivotWO15_g170710 = Data15_g170710.PivotWO;
				Out_NormalWS15_g170710 = Data15_g170710.NormalWS;
				Out_ViewDirWS15_g170710 = Data15_g170710.ViewDirWS;
				Out_VertexData15_g170710 = Data15_g170710.VertexData;
				Out_BoundsData15_g170710 = Data15_g170710.BoundsData;
				}
				half3 Model_PositionWS776_g170706 = Out_PositionWS15_g170710;
				half Dither_BiasDistance882_g170706 = TVE_DitherParams.z;
				float lerpResult888_g170706 = lerp( 1.0 , Dither_BiasDistance882_g170706 , Dither_BiasEnabled883_g170706);
				float temp_output_7_0_g170718 = _DitherDistanceMinValue;
				float temp_output_9_0_g170718 = ( ( distance( Model_PositionWS776_g170706 , _WorldSpaceCameraPos ) * lerpResult888_g170706 ) - temp_output_7_0_g170718 );
				half Dither_Distance856_g170706 = ( saturate( ( ( temp_output_9_0_g170718 / ( _DitherDistanceMaxValue - temp_output_7_0_g170718 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170706 = Out_ViewDirWS15_g170710;
				float3 normalizeResult792_g170706 = normalize( cross( ddy( ase_positionWS ) , ddx( ase_positionWS ) ) );
				float dotResult778_g170706 = dot( Model_ViewDirWS845_g170706 , normalizeResult792_g170706 );
				half Dither_Glancing784_g170706 = ( saturate( ( ( 1.0 - abs( dotResult778_g170706 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170706 = max( max( max( Dither_Constant768_g170706 , Dither_Proximity767_g170706 ) , Dither_Distance856_g170706 ) , Dither_Glancing784_g170706 );
				half3 Model_PositionWO602_g170706 = Out_PositionWO15_g170710;
				float4 tex3DNode60_g170713 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170706 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170706 = tex3DNode60_g170713.r;
				half Local_MaskNoise678_g170706 = temp_output_809_0_g170706;
				half Visual_MultiMask671_g170706 = temp_output_821_11_g170706;
				float lerpResult683_g170706 = lerp( 1.0 , Visual_MultiMask671_g170706 , _DitherMultiValue);
				half Local_MaskMulti685_g170706 = lerpResult683_g170706;
				half Custom_Mask826_g170706 = 1.0;
				float lerpResult728_g170706 = lerp( Visual_AlphaClip754_g170706 , min( Visual_AlphaClip754_g170706 , ( -0.001 - ( Dither_Value429_g170706 - Local_MaskNoise678_g170706 ) ) ) , ( Local_MaskMulti685_g170706 * Custom_Mask826_g170706 ));
				half Local_AlphaClip834_g170706 = lerpResult728_g170706;
				half Input_False58_g170711 = Local_AlphaClip834_g170706;
				half False36_g170711 = Input_False58_g170711;
				half localShadowPassCheck36_g170711 = ShadowPassCheck36_g170711( True36_g170711 , False36_g170711 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170706 = Local_AlphaClip834_g170706;
				#else
				float staticSwitch831_g170706 = localShadowPassCheck36_g170711;
				#endif
				float temp_output_6_0_g170712 = staticSwitch831_g170706;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170712 = ( temp_output_6_0_g170712 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170712 = temp_output_6_0_g170712;
				#endif
				float temp_output_840_0_g170706 = staticSwitch14_g170712;
				#ifdef TVE_DITHER
				float staticSwitch577_g170706 = temp_output_840_0_g170706;
				#else
				float staticSwitch577_g170706 = Visual_AlphaClip754_g170706;
				#endif
				half Final_AlphaClip493_g170706 = staticSwitch577_g170706;
				float In_AlphaClip3_g170709 = Final_AlphaClip493_g170706;
				float In_AlphaFade3_g170709 = Out_AlphaFade4_g170708;
				float3 In_Translucency3_g170709 = Out_Translucency4_g170708;
				float In_Transmission3_g170709 = Out_Transmission4_g170708;
				float In_Thickness3_g170709 = Out_Thickness4_g170708;
				float In_Diffusion3_g170709 = Out_Diffusion4_g170708;
				{
				Data3_g170709.Dummy = In_Dummy3_g170709;
				Data3_g170709.Albedo = In_Albedo3_g170709;
				Data3_g170709.AlbedoRaw = In_AlbedoRaw3_g170709;
				Data3_g170709.NormalTS = In_NormalTS3_g170709;
				Data3_g170709.NormalWS = In_NormalWS3_g170709;
				Data3_g170709.Shader = In_Shader3_g170709;
				Data3_g170709.Emissive= In_Emissive3_g170709;
				Data3_g170709.MultiMask = In_MultiMask3_g170709;
				Data3_g170709.Grayscale = In_Grayscale3_g170709;
				Data3_g170709.Luminosity = In_Luminosity3_g170709;
				Data3_g170709.AlphaClip = In_AlphaClip3_g170709;
				Data3_g170709.AlphaFade = In_AlphaFade3_g170709;
				Data3_g170709.Translucency = In_Translucency3_g170709;
				Data3_g170709.Transmission = In_Transmission3_g170709;
				Data3_g170709.Thickness = In_Thickness3_g170709;
				Data3_g170709.Diffusion = In_Diffusion3_g170709;
				}
				TVEVisualData Data4_g170731 = Data3_g170709;
				float Out_Dummy4_g170731 = 0;
				float3 Out_Albedo4_g170731 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170731 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170731 = float2( 0,0 );
				float3 Out_NormalWS4_g170731 = float3( 0,0,0 );
				float4 Out_Shader4_g170731 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170731 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170731 = 0;
				float Out_Grayscale4_g170731 = 0;
				float Out_Luminosity4_g170731 = 0;
				float Out_AlphaClip4_g170731 = 0;
				float Out_AlphaFade4_g170731 = 0;
				float3 Out_Translucency4_g170731 = float3( 0,0,0 );
				float Out_Transmission4_g170731 = 0;
				float Out_Thickness4_g170731 = 0;
				float Out_Diffusion4_g170731 = 0;
				{
				Out_Dummy4_g170731 = Data4_g170731.Dummy;
				Out_Albedo4_g170731 = Data4_g170731.Albedo;
				Out_AlbedoRaw4_g170731 = Data4_g170731.AlbedoRaw;
				Out_NormalTS4_g170731 = Data4_g170731.NormalTS;
				Out_NormalWS4_g170731 = Data4_g170731.NormalWS;
				Out_Shader4_g170731 = Data4_g170731.Shader;
				Out_Emissive4_g170731= Data4_g170731.Emissive;
				Out_MultiMask4_g170731 = Data4_g170731.MultiMask;
				Out_Grayscale4_g170731 = Data4_g170731.Grayscale;
				Out_Luminosity4_g170731= Data4_g170731.Luminosity;
				Out_AlphaClip4_g170731 = Data4_g170731.AlphaClip;
				Out_AlphaFade4_g170731 = Data4_g170731.AlphaFade;
				Out_Translucency4_g170731 = Data4_g170731.Translucency;
				Out_Transmission4_g170731 = Data4_g170731.Transmission;
				Out_Thickness4_g170731 = Data4_g170731.Thickness;
				Out_Diffusion4_g170731 = Data4_g170731.Diffusion;
				}
				float3 temp_output_297_0_g170727 = Out_Albedo4_g170731;
				float3 In_Albedo3_g170732 = temp_output_297_0_g170727;
				float3 temp_output_297_23_g170727 = Out_AlbedoRaw4_g170731;
				float3 In_AlbedoRaw3_g170732 = temp_output_297_23_g170727;
				float2 In_NormalTS3_g170732 = Out_NormalTS4_g170731;
				float3 In_NormalWS3_g170732 = Out_NormalWS4_g170731;
				float4 In_Shader3_g170732 = Out_Shader4_g170731;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170727 = Out_Emissive4_g170731;
				TVEModelData Data15_g170733 = Data16_g170201;
				float Out_Dummy15_g170733 = 0;
				float3 Out_PositionWS15_g170733 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170733 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170733 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170733 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170733 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170733 = float3( 0,0,0 );
				float4 Out_VertexData15_g170733 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170733 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170733 = Data15_g170733.Dummy;
				Out_PositionWS15_g170733 = Data15_g170733.PositionWS;
				Out_PositionWO15_g170733 = Data15_g170733.PositionWO;
				Out_PivotWS15_g170733 = Data15_g170733.PivotWS;
				Out_PivotWO15_g170733 = Data15_g170733.PivotWO;
				Out_NormalWS15_g170733 = Data15_g170733.NormalWS;
				Out_ViewDirWS15_g170733 = Data15_g170733.ViewDirWS;
				Out_VertexData15_g170733 = Data15_g170733.VertexData;
				Out_BoundsData15_g170733 = Data15_g170733.BoundsData;
				}
				half4 Model_VertexMasks216_g170727 = Out_VertexData15_g170733;
				float4 break251_g170727 = Model_VertexMasks216_g170727;
				float4 break33_g170738 = _emissive_vert_mode;
				float temp_output_30_0_g170738 = ( break251_g170727.x * break33_g170738.x );
				float temp_output_29_0_g170738 = ( break251_g170727.y * break33_g170738.y );
				float temp_output_31_0_g170738 = ( break251_g170727.z * break33_g170738.z );
				float temp_output_28_0_g170738 = ( temp_output_30_0_g170738 + temp_output_29_0_g170738 + temp_output_31_0_g170738 + ( break251_g170727.w * break33_g170738.w ) );
				float clampResult17_g170737 = clamp( temp_output_28_0_g170738 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170741 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170741 = ( clampResult17_g170737 - temp_output_7_0_g170741 );
				float lerpResult303_g170727 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170741 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170740 = lerpResult303_g170727;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170740 = ( temp_output_6_0_g170740 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170740 = temp_output_6_0_g170740;
				#endif
				half Emissive_MeshMask221_g170727 = staticSwitch14_g170740;
				TEXTURE2D(Texture276_g170729) = _EmissiveMaskTex;
				SamplerState Sampler276_g170729 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170730 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170730 = ( temp_output_6_0_g170730 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170730 = temp_output_6_0_g170730;
				#endif
				half4 Emissive_Coords167_g170727 = staticSwitch14_g170730;
				float4 temp_output_37_0_g170729 = Emissive_Coords167_g170727;
				half4 Coords276_g170729 = temp_output_37_0_g170729;
				half2 TexCoord276_g170729 = packedInput.ase_texcoord6.xy;
				half4 localSampleMain276_g170729 = SampleMain( Texture276_g170729 , Sampler276_g170729 , Coords276_g170729 , TexCoord276_g170729 );
				TEXTURE2D(Texture275_g170729) = _EmissiveMaskTex;
				SamplerState Sampler275_g170729 = sampler_Linear_Repeat;
				half4 Coords275_g170729 = temp_output_37_0_g170729;
				half2 TexCoord275_g170729 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170729 = SampleExtra( Texture275_g170729 , Sampler275_g170729 , Coords275_g170729 , TexCoord275_g170729 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170727 = localSampleMain276_g170729;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170727 = localSampleExtra275_g170729;
				#else
				float4 staticSwitch176_g170727 = localSampleMain276_g170729;
				#endif
				half4 Emissive_MaskTex201_g170727 = staticSwitch176_g170727;
				float clampResult17_g170739 = clamp( (Emissive_MaskTex201_g170727).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170742 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170742 = ( clampResult17_g170739 - temp_output_7_0_g170742 );
				float lerpResult302_g170727 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170742 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170727 = lerpResult302_g170727;
				float temp_output_279_0_g170727 = ( Emissive_MeshMask221_g170727 * Emissive_Mask103_g170727 );
				float3 appendResult293_g170727 = (float3(temp_output_279_0_g170727 , temp_output_279_0_g170727 , temp_output_279_0_g170727));
				half3 Local_EmissiveColor278_g170727 = appendResult293_g170727;
				float3 temp_output_316_0_g170727 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170728 = Data204_g170214;
				float Out_Dummy15_g170728 = 0;
				float4 Out_CoatParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170728 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170728 = Data15_g170728.Dummy;
				Out_CoatParams15_g170728 = Data15_g170728.CoatParams;
				Out_PaintParams15_g170728 = Data15_g170728.PaintParams;
				Out_GlowParams15_g170728 = Data15_g170728.GlowParams;
				Out_AtmoParams15_g170728= Data15_g170728.AtmoParams;
				Out_FadeParams15_g170728= Data15_g170728.FadeParams;
				Out_FormParams15_g170728 = Data15_g170728.FormParams;
				Out_FlowParams15_g170728 = Data15_g170728.FlowParams;
				}
				half4 Global_GlowParams179_g170727 = Out_GlowParams15_g170728;
				float3 temp_output_6_0_g170735 = (Global_GlowParams179_g170727).xyz;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170735 = ( temp_output_6_0_g170735 + ( _EmissiveElementMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170735 = temp_output_6_0_g170735;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170727 = staticSwitch14_g170735;
				#else
				float3 staticSwitch228_g170727 = temp_output_316_0_g170727;
				#endif
				float3 lerpResult299_g170727 = lerp( float3( 1,1,1 ) , staticSwitch228_g170727 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170727 = lerpResult299_g170727;
				half3 Visual_AlbedoRaw306_g170727 = temp_output_297_23_g170727;
				float3 lerpResult307_g170727 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170727 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170727 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170727 * lerpResult307_g170727 );
				half3 Emissive_Blend260_g170727 = ( ( (Visual_Emissive255_g170727).xyz * Local_EmissiveColor278_g170727 ) * Local_EmissiveValue88_g170727 );
				float3 temp_output_3_0_g170734 = Emissive_Blend260_g170727;
				float temp_output_15_0_g170734 = _emissive_power_value;
				float3 hdEmission22_g170734 = ASEGetEmissionHDRColor(temp_output_3_0_g170734,temp_output_15_0_g170734,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170727 = temp_output_279_0_g170727;
				float4 appendResult295_g170727 = (float4(hdEmission22_g170734 , Local_EmissiveMask294_g170727));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170727 = appendResult295_g170727;
				#else
				float4 staticSwitch129_g170727 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170727 = staticSwitch129_g170727;
				float4 In_Emissive3_g170732 = Final_Emissive184_g170727;
				float In_Grayscale3_g170732 = Out_Grayscale4_g170731;
				float In_Luminosity3_g170732 = Out_Luminosity4_g170731;
				float temp_output_297_11_g170727 = Out_MultiMask4_g170731;
				float In_MultiMask3_g170732 = temp_output_297_11_g170727;
				float In_AlphaClip3_g170732 = Out_AlphaClip4_g170731;
				float In_AlphaFade3_g170732 = Out_AlphaFade4_g170731;
				float3 In_Translucency3_g170732 = Out_Translucency4_g170731;
				float In_Transmission3_g170732 = Out_Transmission4_g170731;
				float In_Thickness3_g170732 = Out_Thickness4_g170731;
				float In_Diffusion3_g170732 = Out_Diffusion4_g170731;
				{
				Data3_g170732.Dummy = In_Dummy3_g170732;
				Data3_g170732.Albedo = In_Albedo3_g170732;
				Data3_g170732.AlbedoRaw = In_AlbedoRaw3_g170732;
				Data3_g170732.NormalTS = In_NormalTS3_g170732;
				Data3_g170732.NormalWS = In_NormalWS3_g170732;
				Data3_g170732.Shader = In_Shader3_g170732;
				Data3_g170732.Emissive= In_Emissive3_g170732;
				Data3_g170732.MultiMask = In_MultiMask3_g170732;
				Data3_g170732.Grayscale = In_Grayscale3_g170732;
				Data3_g170732.Luminosity = In_Luminosity3_g170732;
				Data3_g170732.AlphaClip = In_AlphaClip3_g170732;
				Data3_g170732.AlphaFade = In_AlphaFade3_g170732;
				Data3_g170732.Translucency = In_Translucency3_g170732;
				Data3_g170732.Transmission = In_Transmission3_g170732;
				Data3_g170732.Thickness = In_Thickness3_g170732;
				Data3_g170732.Diffusion = In_Diffusion3_g170732;
				}
				TVEVisualData Data4_g170763 = Data3_g170732;
				float Out_Dummy4_g170763 = 0;
				float3 Out_Albedo4_g170763 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170763 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170763 = float2( 0,0 );
				float3 Out_NormalWS4_g170763 = float3( 0,0,0 );
				float4 Out_Shader4_g170763 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170763 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170763 = 0;
				float Out_Grayscale4_g170763 = 0;
				float Out_Luminosity4_g170763 = 0;
				float Out_AlphaClip4_g170763 = 0;
				float Out_AlphaFade4_g170763 = 0;
				float3 Out_Translucency4_g170763 = float3( 0,0,0 );
				float Out_Transmission4_g170763 = 0;
				float Out_Thickness4_g170763 = 0;
				float Out_Diffusion4_g170763 = 0;
				{
				Out_Dummy4_g170763 = Data4_g170763.Dummy;
				Out_Albedo4_g170763 = Data4_g170763.Albedo;
				Out_AlbedoRaw4_g170763 = Data4_g170763.AlbedoRaw;
				Out_NormalTS4_g170763 = Data4_g170763.NormalTS;
				Out_NormalWS4_g170763 = Data4_g170763.NormalWS;
				Out_Shader4_g170763 = Data4_g170763.Shader;
				Out_Emissive4_g170763= Data4_g170763.Emissive;
				Out_MultiMask4_g170763 = Data4_g170763.MultiMask;
				Out_Grayscale4_g170763 = Data4_g170763.Grayscale;
				Out_Luminosity4_g170763= Data4_g170763.Luminosity;
				Out_AlphaClip4_g170763 = Data4_g170763.AlphaClip;
				Out_AlphaFade4_g170763 = Data4_g170763.AlphaFade;
				Out_Translucency4_g170763 = Data4_g170763.Translucency;
				Out_Transmission4_g170763 = Data4_g170763.Transmission;
				Out_Thickness4_g170763 = Data4_g170763.Thickness;
				Out_Diffusion4_g170763 = Data4_g170763.Diffusion;
				}
				half3 Visual_Albedo199_g170762 = Out_Albedo4_g170763;
				half3 Final_Albedo312_g170762 = Visual_Albedo199_g170762;
				float3 In_Albedo3_g170764 = Final_Albedo312_g170762;
				float3 In_AlbedoRaw3_g170764 = Out_AlbedoRaw4_g170763;
				float2 In_NormalTS3_g170764 = Out_NormalTS4_g170763;
				float3 In_NormalWS3_g170764 = Out_NormalWS4_g170763;
				float4 In_Shader3_g170764 = Out_Shader4_g170763;
				float4 In_Emissive3_g170764 = Out_Emissive4_g170763;
				float In_Grayscale3_g170764 = Out_Grayscale4_g170763;
				float In_Luminosity3_g170764 = Out_Luminosity4_g170763;
				float temp_output_301_11_g170762 = Out_MultiMask4_g170763;
				float In_MultiMask3_g170764 = temp_output_301_11_g170762;
				float In_AlphaClip3_g170764 = Out_AlphaClip4_g170763;
				float In_AlphaFade3_g170764 = Out_AlphaFade4_g170763;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g170762 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170762 );
				half Visual_Transmission138_g170762 = Out_Transmission4_g170763;
				half Subsurface_Value268_g170762 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170765 = Data204_g170214;
				float Out_Dummy15_g170765 = 0;
				float4 Out_CoatParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170765 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170765 = Data15_g170765.Dummy;
				Out_CoatParams15_g170765 = Data15_g170765.CoatParams;
				Out_PaintParams15_g170765 = Data15_g170765.PaintParams;
				Out_GlowParams15_g170765 = Data15_g170765.GlowParams;
				Out_AtmoParams15_g170765= Data15_g170765.AtmoParams;
				Out_FadeParams15_g170765= Data15_g170765.FadeParams;
				Out_FormParams15_g170765 = Data15_g170765.FormParams;
				Out_FlowParams15_g170765 = Data15_g170765.FlowParams;
				}
				half4 Global_GlowParams373_g170762 = Out_GlowParams15_g170765;
				float temp_output_6_0_g170768 = saturate( (Global_GlowParams373_g170762).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170768 = ( temp_output_6_0_g170768 + ( _SubsurfaceElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170768 = temp_output_6_0_g170768;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170762 = staticSwitch14_g170768;
				#else
				float staticSwitch367_g170762 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g170762 = lerp( 1.0 , staticSwitch367_g170762 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170762 = lerpResult403_g170762;
				half Visual_MultiMask292_g170762 = temp_output_301_11_g170762;
				float lerpResult293_g170762 = lerp( 1.0 , Visual_MultiMask292_g170762 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170762 = lerpResult293_g170762;
				half Custom_Mask363_g170762 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170762 = ( Visual_Transmission138_g170762 * Subsurface_Value268_g170762 * Subsurface_GlobalMask369_g170762 * Subsurface_MultiMask296_g170762 * Custom_Mask363_g170762 );
				#else
				float staticSwitch345_g170762 = 0.0;
				#endif
				half Final_Transmission269_g170762 = staticSwitch345_g170762;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170762 = ( Subsurface_Color264_g170762 * Final_Transmission269_g170762 * 10.0 );
				#else
				float3 staticSwitch348_g170762 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g170762 = staticSwitch348_g170762;
				float3 In_Translucency3_g170764 = Final_Translucency254_g170762;
				float In_Transmission3_g170764 = Final_Transmission269_g170762;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170762 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170762 = 1.0;
				#endif
				half Final_Thickness275_g170762 = staticSwitch351_g170762;
				float In_Thickness3_g170764 = Final_Thickness275_g170762;
				float Final_Diffusion340_g170762 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170764 = Final_Diffusion340_g170762;
				{
				Data3_g170764.Dummy = In_Dummy3_g170764;
				Data3_g170764.Albedo = In_Albedo3_g170764;
				Data3_g170764.AlbedoRaw = In_AlbedoRaw3_g170764;
				Data3_g170764.NormalTS = In_NormalTS3_g170764;
				Data3_g170764.NormalWS = In_NormalWS3_g170764;
				Data3_g170764.Shader = In_Shader3_g170764;
				Data3_g170764.Emissive= In_Emissive3_g170764;
				Data3_g170764.MultiMask = In_MultiMask3_g170764;
				Data3_g170764.Grayscale = In_Grayscale3_g170764;
				Data3_g170764.Luminosity = In_Luminosity3_g170764;
				Data3_g170764.AlphaClip = In_AlphaClip3_g170764;
				Data3_g170764.AlphaFade = In_AlphaFade3_g170764;
				Data3_g170764.Translucency = In_Translucency3_g170764;
				Data3_g170764.Transmission = In_Transmission3_g170764;
				Data3_g170764.Thickness = In_Thickness3_g170764;
				Data3_g170764.Diffusion = In_Diffusion3_g170764;
				}
				TVEVisualData Data4_g170777 = Data3_g170764;
				float Out_Dummy4_g170777 = 0;
				float3 Out_Albedo4_g170777 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170777 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170777 = float2( 0,0 );
				float3 Out_NormalWS4_g170777 = float3( 0,0,0 );
				float4 Out_Shader4_g170777 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170777 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170777 = 0;
				float Out_Grayscale4_g170777 = 0;
				float Out_Luminosity4_g170777 = 0;
				float Out_AlphaClip4_g170777 = 0;
				float Out_AlphaFade4_g170777 = 0;
				float3 Out_Translucency4_g170777 = float3( 0,0,0 );
				float Out_Transmission4_g170777 = 0;
				float Out_Thickness4_g170777 = 0;
				float Out_Diffusion4_g170777 = 0;
				{
				Out_Dummy4_g170777 = Data4_g170777.Dummy;
				Out_Albedo4_g170777 = Data4_g170777.Albedo;
				Out_AlbedoRaw4_g170777 = Data4_g170777.AlbedoRaw;
				Out_NormalTS4_g170777 = Data4_g170777.NormalTS;
				Out_NormalWS4_g170777 = Data4_g170777.NormalWS;
				Out_Shader4_g170777 = Data4_g170777.Shader;
				Out_Emissive4_g170777= Data4_g170777.Emissive;
				Out_MultiMask4_g170777 = Data4_g170777.MultiMask;
				Out_Grayscale4_g170777 = Data4_g170777.Grayscale;
				Out_Luminosity4_g170777= Data4_g170777.Luminosity;
				Out_AlphaClip4_g170777 = Data4_g170777.AlphaClip;
				Out_AlphaFade4_g170777 = Data4_g170777.AlphaFade;
				Out_Translucency4_g170777 = Data4_g170777.Translucency;
				Out_Transmission4_g170777 = Data4_g170777.Transmission;
				Out_Thickness4_g170777 = Data4_g170777.Thickness;
				Out_Diffusion4_g170777 = Data4_g170777.Diffusion;
				}
				half3 Input_Albedo24_g170776 = Out_Albedo4_g170777;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170776 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g170776 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g170776 = staticSwitch22_g170776;
				float4 break24_g170771 = Out_Shader4_g170777;
				half Metallic95_g170771 = break24_g170771.x;
				half Input_Metallic25_g170776 = Metallic95_g170771;
				half OneMinusReflectivity31_g170776 = ( (ColorSpaceDielectricSpec23_g170776).w - ( (ColorSpaceDielectricSpec23_g170776).w * Input_Metallic25_g170776 ) );
				
				float3 appendResult23_g170771 = (float3(Out_NormalTS4_g170777 , 1.0));
				float3 temp_output_13_0_g170775 = appendResult23_g170771;
				float3 temp_output_33_0_g170775 = ( temp_output_13_0_g170775 * _render_normal );
				float3 switchResult12_g170775 = (((IsFrontFace>0)?(temp_output_13_0_g170775):(temp_output_33_0_g170775)));
				
				float localCustomAlphaClip21_g170784 = ( 0.0 );
				float temp_output_3_0_g170784 = Out_AlphaClip4_g170777;
				float Alpha21_g170784 = temp_output_3_0_g170784;
				float temp_output_15_0_g170784 = 0.0;
				float Treshold21_g170784 = temp_output_15_0_g170784;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170784 - Treshold21_g170784);
				#endif
				#endif
				}
				
				surfaceDescription.BaseColor = ( Input_Albedo24_g170776 * OneMinusReflectivity31_g170776 );
				surfaceDescription.Normal = switchResult12_g170775;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = 0;
				#endif

				surfaceDescription.Emission = (Out_Emissive4_g170777).xyz;
				surfaceDescription.Smoothness = break24_g170771.w;
				surfaceDescription.Occlusion = break24_g170771.y;
				surfaceDescription.Alpha = saturate( ( Alpha21_g170784 * Out_AlphaFade4_g170777 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
				surfaceDescription.AlphaClipThresholdShadow = 0.5;
				#endif

				surfaceDescription.AlphaClipThresholdDepthPrepass = 0.5;
				surfaceDescription.AlphaClipThresholdDepthPostpass = 0.5;

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = Out_Thickness4_g170777;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = Out_Transmission4_g170777;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = Out_Diffusion4_g170777;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				#ifdef ASE_BAKEDGI
				surfaceDescription.BakedGI = 0;
				#endif
				#ifdef ASE_BAKEDBACKGI
				surfaceDescription.BakedBackGI = 0;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				#ifdef UNITY_VIRTUAL_TEXTURING
				surfaceDescription.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
				#endif

				GetSurfaceAndBuiltinData( surfaceDescription, input, V, posInput, surfaceData, builtinData );
				ENCODE_INTO_GBUFFER( surfaceData, builtinData, posInput.positionSS, outGBuffer );
				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				#endif
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "META"
			Tags { "LightMode"="Meta" }

			Cull Off

			HLSLPROGRAM
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19702
			#define ASE_SRP_VERSION 170003
			#if !defined(ASE_NEED_CULLFACE)
			#define ASE_NEED_CULLFACE 1
			#endif //ASE_NEED_CULLFACE
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma shader_feature _ EDITOR_VISUALIZATION
			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_LIGHT_TRANSPORT
            #define SCENEPICKINGPASS 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _SecondProjRemap;
			half4 _DrynessLumaRemap;
			float4 _DrynessColor;
			half4 _wetness_water_vert_mode;
			half4 _WetnessWaterMeshRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			half4 _WetnessWaterBlendRemap;
			half4 _TintingBlendRemap;
			half4 _TintingMeshRemap;
			half4 _tinting_vert_mode;
			half4 _object_phase_mode;
			half4 _TintingLumaRemap;
			float4 _TintingColor;
			half4 _wetness_drops_vert_mode;
			half4 _WetnessDropsMeshRemap;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _GradientMeshRemap;
			half4 _WetnessMeshRemap;
			half4 _wetness_vert_mode;
			half4 _MotionBaseMaskRemap;
			half4 _motion_base_proc_mode;
			half4 _motion_tiny_vert_mode;
			half4 _OverlayProjRemap;
			half4 _motion_tiny_proc_mode;
			half4 _MotionSmallMaskRemap;
			half4 _OverlayLumaRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _overlay_coord_value;
			half4 _overlay_vert_mode;
			half4 _OverlayCoordValue;
			half4 _OverlayMeshRemap;
			half4 _OverlayColor;
			half4 _MotionHighlightColor;
			half4 _OverlayBlendRemap;
			half4 _second_vert_mode;
			half4 _DrynessBlendRemap;
			half4 _DrynessMeshRemap;
			half4 _WetnessWaterColor;
			half4 _dryness_vert_mode;
			half4 _motion_base_vert_mode;
			half4 _MotionTinyMaskRemap;
			half4 _GradientColorOne;
			half4 _gradient_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _emissive_coord_value;
			half4 _MainColor;
			half4 _ThirdColorTwo;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _third_coord_value;
			half4 _MainMultiRemap;
			half4 _EmissiveColor;
			half4 _second_coord_value;
			half4 _MainColorTwo;
			half4 _Color;
			half4 _SecondColor;
			half4 _SecondBlendRemap;
			half4 _SecondMultiRemap;
			half4 _SubsurfaceColor;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _SecondMeshRemap;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _SecondLumaRemap;
			half4 _SecondColorTwo;
			half4 _GradientColorTwo;
			half4 _ThirdColor;
			half4 _emissive_vert_mode;
			half4 _occlusion_vert_mode;
			half4 _cutout_vert_mode;
			half4 _CutoutMeshRemap;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _ThirdProjRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdMeshRemap;
			half4 _ThirdMaskCoordValue;
			half4 _third_vert_mode;
			half4 _ThirdLumaRemap;
			half4 _ThirdMaskRemap;
			half4 _SecondCoordValue;
			half4 _third_mask_coord_value;
			half4 _SecondMaskCoordValue;
			half4 _ThirdMultiRemap;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _EmissiveMeshRemap;
			half4 _OverlayGlitterColor;
			half3 _motion_highlight_color;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half _OverlayGlitterIntensityValue;
			half _ThirdBlendAlbedoValue;
			half _DitherGlancingValue;
			half _ThirdIntensityValue;
			half _DitherGlancingAngleValue;
			half _DitherDistanceValue;
			half _DitherDistanceMaxValue;
			half _ThirdMaskValue;
			half _DitherDistanceMinValue;
			half _ThirdLumaValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _DitherProximityMaxValue;
			half _ThirdMeshValue;
			half _DitherConstantValue;
			half _ThirdMeshMode;
			half _CutoutShadowMode;
			half _ThirdProjValue;
			half _ThirdElementMode;
			half _ThirdGlobalValue;
			half _CutoutMultiValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _ThirdNormalValue;
			half _ThirdBlendShaderValue;
			half _ThirdAlphaClipValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _ThirdColorMode;
			half _DitherNoiseTillingValue;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SubsurfaceElementMode;
			half _SubsurfaceIntensityValue;
			half _SecondMeshValue;
			half _SecondMeshMode;
			half _SecondElementMode;
			half _EmissiveExposureValue;
			half _SecondGlobalValue;
			float _emissive_power_value;
			half _SecondBlendIntensityValue;
			half _EmissiveColorMode;
			half _EmissiveGlobalValue;
			half _CutoutNoiseValue;
			half _SecondBlendNormalValue;
			half _SecondNormalValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _ThirdAlbedoValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _ThirdMetallicValue;
			half _DitherMultiValue;
			half _EmissiveElementMode;
			half _CutoutNoiseTillingValue;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _WetnessWaterMeshValue;
			half _WetnessMeshMode;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _WetnessMeshValue;
			half _WetnessGlobalValue;
			half _DrynessLumaValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _OverlaySubsurfaceValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _DrynessGrayValue;
			half _OverlaySmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _OverlayGlobalValue;
			half _MotionHighlightValue;
			half _OverlayElementMode;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _OverlayIntensityValue;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _OverlayGlitterDistValue;
			half _OverlayTextureMode;
			half _OverlayNormalValue;
			half _OverlayGlitterTillingValue;
			half _DrynessGlobalValue;
			half _WetnessWaterBaseValue;
			half _CutoutAlphaValue;
			half _CutoutGlobalValue;
			half _CutoutElementMode;
			half _CutoutIntensityValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _WetnessSmoothnessValue;
			half _WetnessDropsMeshMode;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _WetnessDropsMeshValue;
			half _VariationIntensityValue;
			half _WetnessWaterMeshMode;
			half _VariationMultiValue;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _WetnessDropsDistValue;
			half _TintingIntensityValue;
			half _TintingMultiValue;
			half _WetnessDropsNormalValue;
			half _TintingLumaValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsTillingValue;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _WetnessContrastValue;
			half _DrynessElementMode;
			half _TintingElementMode;
			half _DrynessSmoothnessValue;
			half _SecondAlbedoValue;
			half _SecondLumaValue;
			half _GlobalGlowLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalPivotInfo;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _GlobalGlowPivotValue;
			half _SizeFadeDistMinValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _SizeFadeDistMaxValue;
			half _ObjectCategory;
			half _GlobalAtmoLayerValue;
			half _GlobalFadeLayerValue;
			half _MotionSmallPushValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionSmallMaskMode;
			half _GlobalAtmoPivotValue;
			half _motion_small_mask_mode;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _SizeFadeGlobalValue;
			half _SizeFadeElementMode;
			half _GlobalFlowPivotValue;
			half _GlobalFlowLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _MotionSmallIntensityValue;
			half _MotionTinyIntensityValue;
			half _PerspectiveEnd;
			half _SizeFadeEnd;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _RenderSSR;
			half _IsVersion;
			half _RenderZWrite;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _Cutoff;
			half _PerspectiveCategory;
			half _RenderPriority;
			half _RenderMotion;
			half _SizeFadeCategory;
			half _MotionPushInfo;
			half _MotionElementMode;
			half _MotionWindEnd;
			half _MotionCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _IsSubsurfaceShader;
			half _RenderQueue;
			half _IsGeneralShader;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _HasDefaultTextures;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _RenderShadow;
			half _RenderClip;
			half _RenderFilter;
			half _SecondProjValue;
			half _MotionDistValue;
			half _MotionTinyMaskMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _DetailEnd;
			half _SecondCoordMode;
			half _DetailCategory;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _OcclusionBakeMode;
			half _TintingEnd;
			half _SecondMaskSampleMode;
			half _SecondBakeMode;
			half _SecondMaskValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SubsurfaceThicknessValue;
			half _MainAlphaClipValue;
			half _SecondMaskCoordMode;
			half _MainNormalValue;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainCategory;
			half _MainColorMode;
			half _motion_tiny_mask_mode;
			half _TintingCategory;
			half _DrynessSpace;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseMaskMode;
			half _SubsurfaceEnd;
			half _motion_base_mask_mode;
			half _motion_small_mode;
			half _MotionBasePushValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionTinyNoiseValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionBaseIntensityValue;
			half _DrynessBakeMode;
			half _SubsurfaceDirectValue;
			half _SubsurfaceAmbientValue;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _SubsurfaceNormalValue;
			half _CutoutBakeMode;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceShadowValue;
			half _CutoutEnd;
			half _SubsurfaceAngleValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_SizeFadeParams;
			half4 TVE_FormParams;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			float TVE_FlowLayers[10];
			TEXTURE2D_ARRAY(TVE_FlowBaseTex);
			TEXTURE2D_ARRAY(TVE_FlowNearTex);
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			half4 TVE_AtmoData;
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			half4 TVE_DitherParams;
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#if SHADERPASS == SHADERPASS_LIGHT_TRANSPORT
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
			#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/MetaPass.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 FlowParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv0 : TEXCOORD0;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 uv3 : TEXCOORD3;
				float4 ase_color : COLOR;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				#ifdef EDITOR_VISUALIZATION
				float2 VizUV : TEXCOORD0;
				float4 LightCoord : TEXCOORD1;
				#endif
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half ShadowPassCheck36_g170701( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170711( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				surfaceData.baseColor =					surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness = 				surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

                #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

                #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                #endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
				float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
				float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;

                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
				    #if !defined(SHADER_STAGE_RAY_TRACING)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   #ifdef FRAG_INPUTS_USE_TEXCOORD0
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                       #else
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                       #endif
					   surfaceData.metallic = 0;
				    }
					#endif
				    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData); 
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh  )
			{
				PackedVaryingsMeshToPS output;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);

				TVEModelData Data16_g170761 = (TVEModelData)0;
				float In_Dummy16_g170761 = 0.0;
				TVEModelData Data16_g170745 = (TVEModelData)0;
				half Dummy1575_g170743 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170745 = Dummy1575_g170743;
				TVEModelData Data16_g170721 = (TVEModelData)0;
				float In_Dummy16_g170721 = 0.0;
				TVEModelData Data16_g170491 = (TVEModelData)0;
				half Dummy181_g170474 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170491 = Dummy181_g170474;
				TVEModelData Data16_g170433 = (TVEModelData)0;
				half Dummy181_g170431 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170433 = Dummy181_g170431;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170200 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170200 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170200 = PositionOS131_g170196;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_positionWS;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170200 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170206 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170206 = ( localObjectPosition_UNITY_MATRIX_M14_g170206 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170206 = localObjectPosition_UNITY_MATRIX_M14_g170206;
				#endif
				float3 temp_output_340_7_g170196 = staticSwitch13_g170206;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170208 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170204 = (float3(inputMesh.uv3.x , 0.0 , inputMesh.uv3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170204;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170208 = PivotOS149_g170196;
				float3 PivotsOnlyWS105_g170208 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170208 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170208 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170208 = ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 );
				#endif
				float3 temp_output_341_7_g170196 = staticSwitch13_g170208;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170200 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170200 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170200 = float3( 0,0,0 );
				float3 In_PivotOS16_g170200 = PivotOS149_g170196;
				float3 In_PivotWS16_g170200 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170200 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170200 = NormalOS134_g170196;
				float3 ase_normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170200 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170200 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170200 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170200 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170200 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170200 = VertexMasks171_g170196;
				float mulTime113_g170203 = _TimeParameters.x * 0.52;
				float lerpResult128_g170203 = lerp( mulTime113_g170203 , ( ( mulTime113_g170203 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170196 = PivotWO133_g170196;
				half Pivot_Position322_g170196 = ( break319_g170196.x + break319_g170196.z );
				float mulTime113_g170202 = _TimeParameters.x * 0.27;
				float lerpResult128_g170202 = lerp( mulTime113_g170202 , ( ( mulTime113_g170202 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170205 = _object_phase_mode;
				float temp_output_30_0_g170205 = ( inputMesh.ase_color.r * break33_g170205.x );
				float temp_output_29_0_g170205 = ( inputMesh.ase_color.g * break33_g170205.y );
				float temp_output_31_0_g170205 = ( inputMesh.ase_color.b * break33_g170205.z );
				float temp_output_28_0_g170205 = ( temp_output_30_0_g170205 + temp_output_29_0_g170205 + temp_output_31_0_g170205 + ( inputMesh.ase_color.a * break33_g170205.w ) );
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170205 + Pivot_Position322_g170196 ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(sin( ( lerpResult128_g170203 + Pivot_Position322_g170196 ) ) , sin( ( lerpResult128_g170202 + Pivot_Position322_g170196 ) ) , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_PhaseData16_g170200 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170200 = BoundsData254_g170196;
				float4 In_RotationData16_g170200 = float4( 0,0,0,0 );
				{
				Data16_g170200.Dummy = In_Dummy16_g170200;
				Data16_g170200.PositionOS = In_PositionOS16_g170200;
				Data16_g170200.PositionWS = In_PositionWS16_g170200;
				Data16_g170200.PositionWO = In_PositionWO16_g170200;
				Data16_g170200.PositionRawOS = In_PositionRawOS16_g170200;
				Data16_g170200.PositionAddOS = In_PositionAddOS16_g170200;
				Data16_g170200.PivotOS = In_PivotOS16_g170200;
				Data16_g170200.PivotWS = In_PivotWS16_g170200;
				Data16_g170200.PivotWO = In_PivotWO16_g170200;
				Data16_g170200.NormalOS = In_NormalOS16_g170200;
				Data16_g170200.NormalWS = In_NormalWS16_g170200;
				Data16_g170200.NormalRawOS = In_NormalRawOS16_g170200;
				Data16_g170200.NormalRawWS = In_NormalRawWS16_g170200;
				Data16_g170200.TangentOS = In_TangentOS16_g170200;
				Data16_g170200.ViewDirWS = In_ViewDirWS16_g170200;
				Data16_g170200.VertexData = In_VertexData16_g170200;
				Data16_g170200.PhaseData = In_PhaseData16_g170200;
				Data16_g170200.BoundsData = In_BoundsData16_g170200;
				Data16_g170200.RotationData = In_RotationData16_g170200;
				}
				TVEModelData Data15_g170371 = Data16_g170200;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_PhaseData15_g170371 = Data15_g170371.PhaseData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_PhaseData16_g170370 = Out_PhaseData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.PhaseData = In_PhaseData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_PhaseData15_g170391 = Data15_g170391.PhaseData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_viewDirSafeWS , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_viewDirSafeWS , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_PhaseData16_g170393 = Out_PhaseData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				{
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.PhaseData = In_PhaseData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				}
				TVEModelData Data15_g170432 = Data16_g170393;
				float Out_Dummy15_g170432 = 0;
				float3 Out_PositionOS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170432 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170432 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170432 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170432 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170432 = float3( 0,0,0 );
				float4 Out_VertexData15_g170432 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170432 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170432 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170432 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_PositionOS15_g170432 = Data15_g170432.PositionOS;
				Out_PositionWS15_g170432 = Data15_g170432.PositionWS;
				Out_PositionWO15_g170432 = Data15_g170432.PositionWO;
				Out_PositionRawOS15_g170432 = Data15_g170432.PositionRawOS;
				Out_PositionAddOS15_g170432 = Data15_g170432.PositionAddOS;
				Out_PivotOS15_g170432 = Data15_g170432.PivotOS;
				Out_PivotWS15_g170432 = Data15_g170432.PivotWS;
				Out_PivotWO15_g170432 = Data15_g170432.PivotWO;
				Out_NormalOS15_g170432 = Data15_g170432.NormalOS;
				Out_NormalWS15_g170432 = Data15_g170432.NormalWS;
				Out_NormalRawOS15_g170432 = Data15_g170432.NormalRawOS;
				Out_NormalRawWS15_g170432 = Data15_g170432.NormalRawWS;
				Out_TangentOS15_g170432 = Data15_g170432.TangentOS;
				Out_ViewDirWS15_g170432 = Data15_g170432.ViewDirWS;
				Out_VertexData15_g170432 = Data15_g170432.VertexData;
				Out_PhaseData15_g170432 = Data15_g170432.PhaseData;
				Out_BoundsData15_g170432 = Data15_g170432.BoundsData;
				Out_RotationData15_g170432 = Data15_g170432.RotationData;
				}
				half3 Model_PositionOS147_g170431 = Out_PositionOS15_g170432;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170431 = Out_PivotWO15_g170432;
				half3 Model_PivotWO162_g170431 = temp_output_210_19_g170431;
				float lerpResult216_g170431 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170435 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170435 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170431 ) * lerpResult216_g170431 ) - temp_output_7_0_g170435 );
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatParams204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintParams204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowParams204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoParams204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeParams204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormParams204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowParams204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatParams = In_CoatParams204_g170214;
				Data204_g170214.PaintParams = In_PaintParams204_g170214;
				Data204_g170214.GlowParams = In_GlowParams204_g170214;
				Data204_g170214.AtmoParams = In_AtmoParams204_g170214;
				Data204_g170214.FadeParams = In_FadeParams204_g170214;
				Data204_g170214.FormParams= In_FormParams204_g170214;
				Data204_g170214.FlowParams = In_FlowParams204_g170214;
				}
				TVEGlobalData Data15_g170434 = Data204_g170214;
				float Out_Dummy15_g170434 = 0;
				float4 Out_CoatParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170434 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170434 = Data15_g170434.Dummy;
				Out_CoatParams15_g170434 = Data15_g170434.CoatParams;
				Out_PaintParams15_g170434 = Data15_g170434.PaintParams;
				Out_GlowParams15_g170434 = Data15_g170434.GlowParams;
				Out_AtmoParams15_g170434= Data15_g170434.AtmoParams;
				Out_FadeParams15_g170434= Data15_g170434.FadeParams;
				Out_FormParams15_g170434 = Data15_g170434.FormParams;
				Out_FlowParams15_g170434 = Data15_g170434.FlowParams;
				}
				half4 Input_FormParams188_g170431 = Out_FormParams15_g170434;
				float temp_output_6_0_g170436 = saturate( (Input_FormParams188_g170431).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170436 = ( temp_output_6_0_g170436 + ( _SizeFadeElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170436 = temp_output_6_0_g170436;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170431 = staticSwitch14_g170436;
				#else
				float staticSwitch194_g170431 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170431 = lerp( 1.0 , staticSwitch194_g170431 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170431 = lerpResult213_g170431;
				float temp_output_189_0_g170431 = ( saturate( ( ( temp_output_9_0_g170435 / ( _SizeFadeDistMinValue - temp_output_7_0_g170435 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170431 );
				float3 appendResult200_g170431 = (float3(temp_output_189_0_g170431 , temp_output_189_0_g170431 , temp_output_189_0_g170431));
				float3 appendResult201_g170431 = (float3(1.0 , temp_output_189_0_g170431 , 1.0));
				float3 lerpResult202_g170431 = lerp( appendResult200_g170431 , appendResult201_g170431 , _SizeFadeScaleMode);
				float3 lerpResult184_g170431 = lerp( temp_cast_5 , lerpResult202_g170431 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170431 = ( lerpResult184_g170431 * Model_PositionOS147_g170431 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170431 = temp_output_167_0_g170431;
				#else
				float3 staticSwitch199_g170431 = Model_PositionOS147_g170431;
				#endif
				half3 Final_Position178_g170431 = staticSwitch199_g170431;
				float3 In_PositionOS16_g170433 = Final_Position178_g170431;
				float3 In_PositionWS16_g170433 = Out_PositionWS15_g170432;
				float3 In_PositionWO16_g170433 = Out_PositionWO15_g170432;
				float3 In_PositionRawOS16_g170433 = Out_PositionRawOS15_g170432;
				float3 In_PositionAddOS16_g170433 = Out_PositionAddOS15_g170432;
				float3 temp_output_210_24_g170431 = Out_PivotOS15_g170432;
				float3 In_PivotOS16_g170433 = temp_output_210_24_g170431;
				float3 In_PivotWS16_g170433 = Out_PivotWS15_g170432;
				float3 In_PivotWO16_g170433 = temp_output_210_19_g170431;
				float3 In_NormalOS16_g170433 = Out_NormalOS15_g170432;
				float3 In_NormalWS16_g170433 = Out_NormalWS15_g170432;
				float3 In_NormalRawOS16_g170433 = Out_NormalRawOS15_g170432;
				float3 In_NormalRawWS16_g170433 = Out_NormalRawWS15_g170432;
				float4 In_TangentOS16_g170433 = Out_TangentOS15_g170432;
				float3 In_ViewDirWS16_g170433 = Out_ViewDirWS15_g170432;
				float4 In_VertexData16_g170433 = Out_VertexData15_g170432;
				float4 In_PhaseData16_g170433 = Out_PhaseData15_g170432;
				float4 In_BoundsData16_g170433 = Out_BoundsData15_g170432;
				float4 In_RotationData16_g170433 = Out_RotationData15_g170432;
				{
				Data16_g170433.Dummy = In_Dummy16_g170433;
				Data16_g170433.PositionOS = In_PositionOS16_g170433;
				Data16_g170433.PositionWS = In_PositionWS16_g170433;
				Data16_g170433.PositionWO = In_PositionWO16_g170433;
				Data16_g170433.PositionRawOS = In_PositionRawOS16_g170433;
				Data16_g170433.PositionAddOS = In_PositionAddOS16_g170433;
				Data16_g170433.PivotOS = In_PivotOS16_g170433;
				Data16_g170433.PivotWS = In_PivotWS16_g170433;
				Data16_g170433.PivotWO = In_PivotWO16_g170433;
				Data16_g170433.NormalOS = In_NormalOS16_g170433;
				Data16_g170433.NormalWS = In_NormalWS16_g170433;
				Data16_g170433.NormalRawOS = In_NormalRawOS16_g170433;
				Data16_g170433.NormalRawWS = In_NormalRawWS16_g170433;
				Data16_g170433.TangentOS = In_TangentOS16_g170433;
				Data16_g170433.ViewDirWS = In_ViewDirWS16_g170433;
				Data16_g170433.VertexData = In_VertexData16_g170433;
				Data16_g170433.PhaseData = In_PhaseData16_g170433;
				Data16_g170433.BoundsData = In_BoundsData16_g170433;
				Data16_g170433.RotationData = In_RotationData16_g170433;
				}
				TVEModelData Data15_g170490 = Data16_g170433;
				float Out_Dummy15_g170490 = 0;
				float3 Out_PositionOS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170490 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170490 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170490 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170490 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170490 = float3( 0,0,0 );
				float4 Out_VertexData15_g170490 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170490 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170490 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170490 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170490 = Data15_g170490.Dummy;
				Out_PositionOS15_g170490 = Data15_g170490.PositionOS;
				Out_PositionWS15_g170490 = Data15_g170490.PositionWS;
				Out_PositionWO15_g170490 = Data15_g170490.PositionWO;
				Out_PositionRawOS15_g170490 = Data15_g170490.PositionRawOS;
				Out_PositionAddOS15_g170490 = Data15_g170490.PositionAddOS;
				Out_PivotOS15_g170490 = Data15_g170490.PivotOS;
				Out_PivotWS15_g170490 = Data15_g170490.PivotWS;
				Out_PivotWO15_g170490 = Data15_g170490.PivotWO;
				Out_NormalOS15_g170490 = Data15_g170490.NormalOS;
				Out_NormalWS15_g170490 = Data15_g170490.NormalWS;
				Out_NormalRawOS15_g170490 = Data15_g170490.NormalRawOS;
				Out_NormalRawWS15_g170490 = Data15_g170490.NormalRawWS;
				Out_TangentOS15_g170490 = Data15_g170490.TangentOS;
				Out_ViewDirWS15_g170490 = Data15_g170490.ViewDirWS;
				Out_VertexData15_g170490 = Data15_g170490.VertexData;
				Out_PhaseData15_g170490 = Data15_g170490.PhaseData;
				Out_BoundsData15_g170490 = Data15_g170490.BoundsData;
				Out_RotationData15_g170490 = Data15_g170490.RotationData;
				}
				float3 temp_output_2503_0_g170474 = Out_PositionOS15_g170490;
				float3 In_PositionOS16_g170491 = temp_output_2503_0_g170474;
				float3 temp_output_2503_16_g170474 = Out_PositionWS15_g170490;
				float3 In_PositionWS16_g170491 = temp_output_2503_16_g170474;
				float3 temp_output_2503_17_g170474 = Out_PositionWO15_g170490;
				float3 In_PositionWO16_g170491 = temp_output_2503_17_g170474;
				float3 In_PositionRawOS16_g170491 = Out_PositionRawOS15_g170490;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170474 = Out_VertexData15_g170490;
				half4 Model_VertexMasks518_g170474 = temp_output_2503_29_g170474;
				float4 break1689_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170475 = _motion_small_vert_mode;
				float temp_output_30_0_g170475 = ( break1689_g170474.x * break33_g170475.x );
				float temp_output_29_0_g170475 = ( break1689_g170474.y * break33_g170475.y );
				float temp_output_31_0_g170475 = ( break1689_g170474.z * break33_g170475.z );
				float temp_output_28_0_g170475 = ( temp_output_30_0_g170475 + temp_output_29_0_g170475 + temp_output_31_0_g170475 + ( break1689_g170474.w * break33_g170475.w ) );
				float temp_output_1727_0_g170474 = temp_output_28_0_g170475;
				float4 temp_output_2503_30_g170474 = Out_BoundsData15_g170490;
				half4 Model_BoundsData1322_g170474 = temp_output_2503_30_g170474;
				float4 break33_g170477 = _motion_small_proc_mode;
				float temp_output_30_0_g170477 = ( (Model_BoundsData1322_g170474).z * break33_g170477.x );
				float temp_output_29_0_g170477 = ( (Model_BoundsData1322_g170474).w * break33_g170477.y );
				float temp_output_1734_0_g170474 = ( temp_output_30_0_g170477 + temp_output_29_0_g170477 );
				float lerpResult1906_g170474 = lerp( temp_output_1727_0_g170474 , temp_output_1734_0_g170474 , _motion_small_mask_mode);
				float enc1805_g170474 = inputMesh.uv0.z;
				float2 localDecodeFloatToVector21805_g170474 = DecodeFloatToVector2( enc1805_g170474 );
				float2 break1804_g170474 = localDecodeFloatToVector21805_g170474;
				half Small_Mask_Legacy1806_g170474 = break1804_g170474.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170474 = Small_Mask_Legacy1806_g170474;
				#else
				float staticSwitch1800_g170474 = lerpResult1906_g170474;
				#endif
				float clampResult17_g170479 = clamp( staticSwitch1800_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170488 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170488 = ( clampResult17_g170479 - temp_output_7_0_g170488 );
				float temp_output_6_0_g170486 = saturate( ( ( temp_output_9_0_g170488 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170486 = ( temp_output_6_0_g170486 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170486 = temp_output_6_0_g170486;
				#endif
				half Small_Mask640_g170474 = staticSwitch14_g170486;
				float4 lerpResult836_g170510 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_MotionParams.w);
				half2 Global_WindDirWS2542_g170474 = ((lerpResult836_g170510).xy*2.0 + -1.0);
				half2 Input_WindDirWS803_g170505 = Global_WindDirWS2542_g170474;
				half3 Model_PositionWO162_g170474 = temp_output_2503_17_g170474;
				half3 Input_ModelPositionWO761_g170492 = Model_PositionWO162_g170474;
				float3 temp_output_2503_19_g170474 = Out_PivotWO15_g170490;
				half3 Model_PivotWO402_g170474 = temp_output_2503_19_g170474;
				half3 Input_ModelPivotsWO419_g170492 = Model_PivotWO402_g170474;
				half Input_MotionPivots629_g170492 = _MotionSmallPivotValue;
				float3 lerpResult771_g170492 = lerp( Input_ModelPositionWO761_g170492 , Input_ModelPivotsWO419_g170492 , Input_MotionPivots629_g170492);
				float4 temp_output_2503_27_g170474 = Out_PhaseData15_g170490;
				half4 Model_PhaseData489_g170474 = temp_output_2503_27_g170474;
				half4 Input_ModelMotionData763_g170492 = Model_PhaseData489_g170474;
				half Input_MotionPhase764_g170492 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170474 = ( lerpResult771_g170492 + ( (Input_ModelMotionData763_g170492).z * Input_MotionPhase764_g170492 * 5.0 ) );
				half3 Input_PositionWO419_g170505 = Small_Position1421_g170474;
				half Input_MotionTilling321_g170505 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170505 = ( -(Input_PositionWO419_g170505).xz * Input_MotionTilling321_g170505 * 0.005 );
				float2 temp_output_3_0_g170507 = Noise_Coord515_g170505;
				float2 temp_output_21_0_g170507 = Input_WindDirWS803_g170505;
				float lerpResult128_g170506 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170505 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170505 = ( lerpResult128_g170506 * 0.02 * Input_MotionSpeed62_g170505 );
				float temp_output_15_0_g170507 = Noise_Speed516_g170505;
				float temp_output_23_0_g170507 = frac( temp_output_15_0_g170507 );
				float4 lerpResult39_g170507 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170507 + ( temp_output_21_0_g170507 * temp_output_23_0_g170507 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170507 + ( temp_output_21_0_g170507 * frac( ( temp_output_15_0_g170507 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170507 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170505 = lerpResult39_g170507;
				half2 Noise_DirWS858_g170505 = ((temp_output_635_0_g170505).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170505 = _MotionSmallNoiseValue;
				half Global_WInd769_g170510 = (lerpResult836_g170510).z;
				TVEGlobalData Data15_g170498 = Data204_g170214;
				float Out_Dummy15_g170498 = 0;
				float4 Out_CoatParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170498 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170498 = Data15_g170498.Dummy;
				Out_CoatParams15_g170498 = Data15_g170498.CoatParams;
				Out_PaintParams15_g170498 = Data15_g170498.PaintParams;
				Out_GlowParams15_g170498 = Data15_g170498.GlowParams;
				Out_AtmoParams15_g170498= Data15_g170498.AtmoParams;
				Out_FadeParams15_g170498= Data15_g170498.FadeParams;
				Out_FormParams15_g170498 = Data15_g170498.FormParams;
				Out_FlowParams15_g170498 = Data15_g170498.FlowParams;
				}
				half4 Global_FlowParams2668_g170474 = Out_FlowParams15_g170498;
				half4 Input_GlobalFlow826_g170510 = Global_FlowParams2668_g170474;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170510 = saturate( (Input_GlobalFlow826_g170510).w );
				#else
				float staticSwitch612_g170510 = Global_WInd769_g170510;
				#endif
				float lerpResult853_g170510 = lerp( staticSwitch612_g170510 , saturate( (staticSwitch612_g170510*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170510 = _MotionIntensityValue;
				half Global_WindValue1855_g170474 = ( lerpResult853_g170510 * Input_MotionValue629_g170510 );
				half Input_WindValue881_g170505 = Global_WindValue1855_g170474;
				float lerpResult701_g170505 = lerp( 1.0 , Input_MotionNoise552_g170505 , Input_WindValue881_g170505);
				float2 lerpResult646_g170505 = lerp( Input_WindDirWS803_g170505 , Noise_DirWS858_g170505 , lerpResult701_g170505);
				half2 Small_DirWS817_g170505 = lerpResult646_g170505;
				float2 break823_g170505 = Small_DirWS817_g170505;
				half4 Noise_Params685_g170505 = temp_output_635_0_g170505;
				half Wind_Sinus820_g170505 = ( ((Noise_Params685_g170505).b*2.0 + -1.0) * Input_MotionNoise552_g170505 * 0.6 );
				float3 appendResult824_g170505 = (float3(break823_g170505.x , Wind_Sinus820_g170505 , break823_g170505.y));
				half Input_MotionDelay753_g170505 = _MotionSmallDelayValue;
				float lerpResult756_g170505 = lerp( 1.0 , ( Input_WindValue881_g170505 * Input_WindValue881_g170505 ) , Input_MotionDelay753_g170505);
				half Wind_Delay815_g170505 = lerpResult756_g170505;
				float3 appendResult825_g170505 = (float3(Wind_Delay815_g170505 , 1.0 , Wind_Delay815_g170505));
				float3 temp_output_827_0_g170505 = ( ( appendResult824_g170505 * Input_WindValue881_g170505 ) * appendResult825_g170505 );
				float2 break857_g170505 = Noise_DirWS858_g170505;
				float3 appendResult833_g170505 = (float3(break857_g170505.x , Wind_Sinus820_g170505 , break857_g170505.y));
				half Global_PushWave2675_g170474 = (Input_GlobalFlow826_g170510).z;
				half Input_PushWave890_g170505 = Global_PushWave2675_g170474;
				float2 temp_output_791_0_g170510 = ((Input_GlobalFlow826_g170510).xy*2.0 + -1.0);
				float temp_output_849_0_g170510 = saturate( length( temp_output_791_0_g170510 ) );
				half Global_PushAlpha1504_g170474 = temp_output_849_0_g170510;
				half Input_PushAlpha806_g170505 = ( Global_PushAlpha1504_g170474 * _MotionSmallPushValue );
				float3 lerpResult840_g170505 = lerp( temp_output_827_0_g170505 , ( appendResult833_g170505 * Input_PushWave890_g170505 ) , Input_PushAlpha806_g170505);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170505 = lerpResult840_g170505;
				#else
				float3 staticSwitch829_g170505 = temp_output_827_0_g170505;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half3 Small_Squash1489_g170474 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170505 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Motion789_g170474 = ( _MotionSmallIntensityValue * Small_Mask640_g170474 * Small_Squash1489_g170474 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170474 = Small_Motion789_g170474;
				#else
				float3 staticSwitch495_g170474 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170474 = temp_output_2503_16_g170474;
				half Global_DistMask1820_g170474 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170474 ) / _MotionDistValue ) ) );
				float4 break1710_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170476 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170476 = ( break1710_g170474.x * break33_g170476.x );
				float temp_output_29_0_g170476 = ( break1710_g170474.y * break33_g170476.y );
				float temp_output_31_0_g170476 = ( break1710_g170474.z * break33_g170476.z );
				float temp_output_28_0_g170476 = ( temp_output_30_0_g170476 + temp_output_29_0_g170476 + temp_output_31_0_g170476 + ( break1710_g170474.w * break33_g170476.w ) );
				float temp_output_1729_0_g170474 = temp_output_28_0_g170476;
				float4 break33_g170478 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170478 = ( (Model_BoundsData1322_g170474).z * break33_g170478.x );
				float temp_output_29_0_g170478 = ( (Model_BoundsData1322_g170474).w * break33_g170478.y );
				float temp_output_1735_0_g170474 = ( temp_output_30_0_g170478 + temp_output_29_0_g170478 );
				float lerpResult1908_g170474 = lerp( temp_output_1729_0_g170474 , temp_output_1735_0_g170474 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170474 = break1804_g170474.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170474 = Tiny_Mask_Legacy1807_g170474;
				#else
				float staticSwitch1810_g170474 = lerpResult1908_g170474;
				#endif
				float clampResult17_g170480 = clamp( staticSwitch1810_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170489 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170489 = ( clampResult17_g170480 - temp_output_7_0_g170489 );
				float temp_output_6_0_g170481 = saturate( ( ( temp_output_9_0_g170489 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170481 = ( temp_output_6_0_g170481 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170481 = temp_output_6_0_g170481;
				#endif
				half Tiny_Mask218_g170474 = staticSwitch14_g170481;
				float3 temp_output_2503_20_g170474 = Out_NormalOS15_g170490;
				half3 Model_NormalOS554_g170474 = temp_output_2503_20_g170474;
				half3 Input_NormalOS533_g170494 = Model_NormalOS554_g170474;
				half3 Tiny_Position2469_g170474 = Model_PositionWO162_g170474;
				half3 Input_PositionWO500_g170494 = Tiny_Position2469_g170474;
				half Input_MotionTilling321_g170494 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170496 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170494 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170494 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170494).xz * Input_MotionTilling321_g170494 * 0.005 ) + ( lerpResult128_g170496 * Input_MotionSpeed62_g170494 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170494 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170494 = lerp( ( Input_NormalOS533_g170494 * Flutter_Noise535_g170494 ) , Flutter_Noise535_g170494 , Input_MotionNoise542_g170494);
				half3 Input_ModelPositionWO761_g170493 = Model_PositionWO162_g170474;
				half3 Input_ModelPivotsWO419_g170493 = Model_PivotWO402_g170474;
				half Input_MotionPivots629_g170493 = _MotionBasePivotValue;
				float3 lerpResult771_g170493 = lerp( Input_ModelPositionWO761_g170493 , Input_ModelPivotsWO419_g170493 , Input_MotionPivots629_g170493);
				half4 Input_ModelMotionData763_g170493 = Model_PhaseData489_g170474;
				half Input_MotionPhase764_g170493 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170474 = ( lerpResult771_g170493 + ( (Input_ModelMotionData763_g170493).z * Input_MotionPhase764_g170493 * 5.0 ) );
				half3 Input_PositionWO419_g170499 = Base_Position1394_g170474;
				half Input_MotionTilling321_g170499 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170499 = ( -(Input_PositionWO419_g170499).xz * Input_MotionTilling321_g170499 * 0.005 );
				float2 temp_output_3_0_g170501 = Noise_Coord515_g170499;
				half2 Input_WindDirWS803_g170499 = Global_WindDirWS2542_g170474;
				float2 temp_output_21_0_g170501 = Input_WindDirWS803_g170499;
				float lerpResult128_g170500 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170499 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170499 = ( lerpResult128_g170500 * 0.02 * Input_MotionSpeed62_g170499 );
				float temp_output_15_0_g170501 = Noise_Speed516_g170499;
				float temp_output_23_0_g170501 = frac( temp_output_15_0_g170501 );
				float4 lerpResult39_g170501 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170501 + ( temp_output_21_0_g170501 * temp_output_23_0_g170501 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170501 + ( temp_output_21_0_g170501 * frac( ( temp_output_15_0_g170501 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170501 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170499 = lerpResult39_g170501;
				half4 Noise_Params685_g170499 = temp_output_635_0_g170499;
				half Input_WindValue853_g170499 = Global_WindValue1855_g170474;
				float temp_output_855_0_g170499 = ( (Noise_Params685_g170499).a * Input_WindValue853_g170499 );
				half Input_PushWave858_g170499 = Global_PushWave2675_g170474;
				half Input_PushAlpha806_g170499 = ( Global_PushAlpha1504_g170474 * _MotionBasePushValue );
				float lerpResult831_g170499 = lerp( temp_output_855_0_g170499 , Input_PushWave858_g170499 , Input_PushAlpha806_g170499);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170499 = lerpResult831_g170499;
				#else
				float staticSwitch828_g170499 = temp_output_855_0_g170499;
				#endif
				half Base_Wave1159_g170474 = staticSwitch828_g170499;
				float temp_output_888_0_g170505 = ( (Noise_Params685_g170505).b * Input_WindValue881_g170505 );
				float lerpResult867_g170505 = lerp( temp_output_888_0_g170505 , ( (Noise_Params685_g170505).b * Input_PushWave890_g170505 ) , Input_PushAlpha806_g170505);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170505 = lerpResult867_g170505;
				#else
				float staticSwitch886_g170505 = temp_output_888_0_g170505;
				#endif
				half Small_Wave1427_g170474 = staticSwitch886_g170505;
				float lerpResult2422_g170474 = lerp( Base_Wave1159_g170474 , Small_Wave1427_g170474 , _motion_small_mode);
				half Global_Wave1475_g170474 = lerpResult2422_g170474;
				half Input_GlobalWave546_g170494 = Global_Wave1475_g170474;
				float temp_output_548_0_g170494 = ( Input_GlobalWave546_g170494 * Input_GlobalWave546_g170494 );
				half Flutter_Wave556_g170494 = temp_output_548_0_g170494;
				half3 Tiny_Noise859_g170474 = ( lerpResult537_g170494 * Flutter_Wave556_g170494 );
				half3 Tiny_Flutter1451_g170474 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170474 * Tiny_Mask218_g170474 * Tiny_Noise859_g170474 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170474 = Tiny_Flutter1451_g170474;
				#else
				float3 staticSwitch414_g170474 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170474 = ( staticSwitch495_g170474 + staticSwitch414_g170474 );
				float3 In_PositionAddOS16_g170491 = Final_PositionADD1569_g170474;
				float3 temp_output_2503_24_g170474 = Out_PivotOS15_g170490;
				float3 In_PivotOS16_g170491 = temp_output_2503_24_g170474;
				float3 In_PivotWS16_g170491 = Out_PivotWS15_g170490;
				float3 In_PivotWO16_g170491 = temp_output_2503_19_g170474;
				float3 In_NormalOS16_g170491 = temp_output_2503_20_g170474;
				float3 In_NormalWS16_g170491 = Out_NormalWS15_g170490;
				float3 In_NormalRawOS16_g170491 = Out_NormalRawOS15_g170490;
				float3 In_NormalRawWS16_g170491 = Out_NormalRawWS15_g170490;
				float4 In_TangentOS16_g170491 = Out_TangentOS15_g170490;
				float3 In_ViewDirWS16_g170491 = Out_ViewDirWS15_g170490;
				float4 In_VertexData16_g170491 = temp_output_2503_29_g170474;
				float4 In_PhaseData16_g170491 = temp_output_2503_27_g170474;
				float4 In_BoundsData16_g170491 = temp_output_2503_30_g170474;
				float4 break748_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170483 = _motion_base_vert_mode;
				float temp_output_30_0_g170483 = ( break748_g170474.x * break33_g170483.x );
				float temp_output_29_0_g170483 = ( break748_g170474.y * break33_g170483.y );
				float temp_output_31_0_g170483 = ( break748_g170474.z * break33_g170483.z );
				float temp_output_28_0_g170483 = ( temp_output_30_0_g170483 + temp_output_29_0_g170483 + temp_output_31_0_g170483 + ( break748_g170474.w * break33_g170483.w ) );
				float temp_output_1731_0_g170474 = temp_output_28_0_g170483;
				float4 break33_g170484 = _motion_base_proc_mode;
				float temp_output_30_0_g170484 = ( (Model_BoundsData1322_g170474).z * break33_g170484.x );
				float temp_output_29_0_g170484 = ( (Model_BoundsData1322_g170474).w * break33_g170484.y );
				float temp_output_1733_0_g170474 = ( temp_output_30_0_g170484 + temp_output_29_0_g170484 );
				float lerpResult1904_g170474 = lerp( temp_output_1731_0_g170474 , temp_output_1733_0_g170474 , _motion_base_mask_mode);
				float clampResult17_g170482 = clamp( lerpResult1904_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170487 = ( clampResult17_g170482 - temp_output_7_0_g170487 );
				float temp_output_6_0_g170485 = saturate( ( ( temp_output_9_0_g170487 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170485 = ( temp_output_6_0_g170485 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170485 = temp_output_6_0_g170485;
				#endif
				half Base_Mask217_g170474 = staticSwitch14_g170485;
				half2 Noise_DirWS825_g170499 = ((temp_output_635_0_g170499).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170499 = _MotionBaseNoiseValue;
				float lerpResult701_g170499 = lerp( 1.0 , Input_MotionNoise552_g170499 , Input_WindValue853_g170499);
				float2 lerpResult646_g170499 = lerp( Input_WindDirWS803_g170499 , Noise_DirWS825_g170499 , lerpResult701_g170499);
				half Input_MotionDelay753_g170499 = _MotionBaseDelayValue;
				float lerpResult756_g170499 = lerp( 1.0 , ( Input_WindValue853_g170499 * Input_WindValue853_g170499 ) , Input_MotionDelay753_g170499);
				half Wind_Delay815_g170499 = lerpResult756_g170499;
				float2 temp_output_809_0_g170499 = ( lerpResult646_g170499 * Input_WindValue853_g170499 * Wind_Delay815_g170499 );
				half2 Global_PushDirWS1972_g170474 = temp_output_791_0_g170510;
				half2 Input_PushDirWS807_g170499 = Global_PushDirWS1972_g170474;
				float2 lerpResult811_g170499 = lerp( temp_output_809_0_g170499 , Input_PushDirWS807_g170499 , Input_PushAlpha806_g170499);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170499 = lerpResult811_g170499;
				#else
				float2 staticSwitch808_g170499 = temp_output_809_0_g170499;
				#endif
				float2 break83_g170504 = staticSwitch808_g170499;
				float3 appendResult79_g170504 = (float3(break83_g170504.x , 0.0 , break83_g170504.y));
				half2 Base_Bending893_g170474 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170504 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170474 = ( _MotionBaseIntensityValue * Base_Mask217_g170474 * Base_Bending893_g170474 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170474 = Base_Motion1440_g170474;
				#else
				float2 staticSwitch2384_g170474 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170474 = (float4(staticSwitch2384_g170474 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170474 = appendResult2023_g170474;
				float4 In_RotationData16_g170491 = Final_RotationData1570_g170474;
				{
				Data16_g170491.Dummy = In_Dummy16_g170491;
				Data16_g170491.PositionOS = In_PositionOS16_g170491;
				Data16_g170491.PositionWS = In_PositionWS16_g170491;
				Data16_g170491.PositionWO = In_PositionWO16_g170491;
				Data16_g170491.PositionRawOS = In_PositionRawOS16_g170491;
				Data16_g170491.PositionAddOS = In_PositionAddOS16_g170491;
				Data16_g170491.PivotOS = In_PivotOS16_g170491;
				Data16_g170491.PivotWS = In_PivotWS16_g170491;
				Data16_g170491.PivotWO = In_PivotWO16_g170491;
				Data16_g170491.NormalOS = In_NormalOS16_g170491;
				Data16_g170491.NormalWS = In_NormalWS16_g170491;
				Data16_g170491.NormalRawOS = In_NormalRawOS16_g170491;
				Data16_g170491.NormalRawWS = In_NormalRawWS16_g170491;
				Data16_g170491.TangentOS = In_TangentOS16_g170491;
				Data16_g170491.ViewDirWS = In_ViewDirWS16_g170491;
				Data16_g170491.VertexData = In_VertexData16_g170491;
				Data16_g170491.PhaseData = In_PhaseData16_g170491;
				Data16_g170491.BoundsData = In_BoundsData16_g170491;
				Data16_g170491.RotationData = In_RotationData16_g170491;
				}
				TVEModelData Data15_g170720 = Data16_g170491;
				float Out_Dummy15_g170720 = 0;
				float3 Out_PositionOS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170720 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170720 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170720 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170720 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170720 = float3( 0,0,0 );
				float4 Out_VertexData15_g170720 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170720 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170720 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170720 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170720 = Data15_g170720.Dummy;
				Out_PositionOS15_g170720 = Data15_g170720.PositionOS;
				Out_PositionWS15_g170720 = Data15_g170720.PositionWS;
				Out_PositionWO15_g170720 = Data15_g170720.PositionWO;
				Out_PositionRawOS15_g170720 = Data15_g170720.PositionRawOS;
				Out_PositionAddOS15_g170720 = Data15_g170720.PositionAddOS;
				Out_PivotOS15_g170720 = Data15_g170720.PivotOS;
				Out_PivotWS15_g170720 = Data15_g170720.PivotWS;
				Out_PivotWO15_g170720 = Data15_g170720.PivotWO;
				Out_NormalOS15_g170720 = Data15_g170720.NormalOS;
				Out_NormalWS15_g170720 = Data15_g170720.NormalWS;
				Out_NormalRawOS15_g170720 = Data15_g170720.NormalRawOS;
				Out_NormalRawWS15_g170720 = Data15_g170720.NormalRawWS;
				Out_TangentOS15_g170720 = Data15_g170720.TangentOS;
				Out_ViewDirWS15_g170720 = Data15_g170720.ViewDirWS;
				Out_VertexData15_g170720 = Data15_g170720.VertexData;
				Out_PhaseData15_g170720 = Data15_g170720.PhaseData;
				Out_BoundsData15_g170720 = Data15_g170720.BoundsData;
				Out_RotationData15_g170720 = Data15_g170720.RotationData;
				}
				half3 Model_PositionOS147_g170719 = Out_PositionOS15_g170720;
				half3 Input_False58_g170722 = Model_PositionOS147_g170719;
				half3 VertexPos40_g170723 = Model_PositionOS147_g170719;
				half3 VertexPos40_g170724 = VertexPos40_g170723;
				float3 appendResult74_g170724 = (float3(VertexPos40_g170724.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170724 = appendResult74_g170724;
				float3 break84_g170724 = VertexPos40_g170724;
				float3 appendResult81_g170724 = (float3(0.0 , break84_g170724.y , break84_g170724.z));
				half3 VertexPosOtherAxis82_g170724 = appendResult81_g170724;
				float4 temp_output_1567_33_g170719 = Out_RotationData15_g170720;
				half4 Model_VertexBend1569_g170719 = temp_output_1567_33_g170719;
				half2 Angle44_g170723 = (Model_VertexBend1569_g170719).xy;
				half Angle44_g170724 = (Angle44_g170723).y;
				half3 VertexPos40_g170725 = ( VertexPosRotationAxis50_g170724 + ( VertexPosOtherAxis82_g170724 * cos( Angle44_g170724 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170724 ) * sin( Angle44_g170724 ) ) );
				float3 appendResult74_g170725 = (float3(0.0 , 0.0 , VertexPos40_g170725.z));
				half3 VertexPosRotationAxis50_g170725 = appendResult74_g170725;
				float3 break84_g170725 = VertexPos40_g170725;
				float3 appendResult81_g170725 = (float3(break84_g170725.x , break84_g170725.y , 0.0));
				half3 VertexPosOtherAxis82_g170725 = appendResult81_g170725;
				half Angle44_g170725 = -(Angle44_g170723).x;
				half3 Input_True57_g170722 = ( VertexPosRotationAxis50_g170725 + ( VertexPosOtherAxis82_g170725 * cos( Angle44_g170725 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170725 ) * sin( Angle44_g170725 ) ) );
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170722 = Input_True57_g170722;
				#else
				float3 staticSwitch65_g170722 = Input_False58_g170722;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170722 = Input_True57_g170722;
				#else
				float3 staticSwitch69_g170722 = staticSwitch65_g170722;
				#endif
				float3 temp_output_1578_0_g170719 = staticSwitch69_g170722;
				float3 temp_output_1567_31_g170719 = Out_PositionAddOS15_g170720;
				half3 Model_PositionADD1568_g170719 = temp_output_1567_31_g170719;
				half3 Final_PositionOS178_g170719 = ( temp_output_1578_0_g170719 + Model_PositionADD1568_g170719 );
				float3 In_PositionOS16_g170721 = Final_PositionOS178_g170719;
				float3 In_PositionWS16_g170721 = Out_PositionWS15_g170720;
				float3 In_PositionWO16_g170721 = Out_PositionWO15_g170720;
				float3 In_PositionRawOS16_g170721 = Out_PositionRawOS15_g170720;
				float3 In_PositionAddOS16_g170721 = temp_output_1567_31_g170719;
				float3 In_PivotOS16_g170721 = Out_PivotOS15_g170720;
				float3 In_PivotWS16_g170721 = Out_PivotWS15_g170720;
				float3 In_PivotWO16_g170721 = Out_PivotWO15_g170720;
				float3 In_NormalOS16_g170721 = Out_NormalOS15_g170720;
				float3 In_NormalWS16_g170721 = Out_NormalWS15_g170720;
				float3 In_NormalRawOS16_g170721 = Out_NormalRawOS15_g170720;
				float3 In_NormalRawWS16_g170721 = Out_NormalRawWS15_g170720;
				float4 In_TangentOS16_g170721 = Out_TangentOS15_g170720;
				float3 In_ViewDirWS16_g170721 = Out_ViewDirWS15_g170720;
				float4 In_VertexData16_g170721 = Out_VertexData15_g170720;
				float4 In_PhaseData16_g170721 = Out_PhaseData15_g170720;
				float4 In_BoundsData16_g170721 = Out_BoundsData15_g170720;
				float4 In_RotationData16_g170721 = temp_output_1567_33_g170719;
				{
				Data16_g170721.Dummy = In_Dummy16_g170721;
				Data16_g170721.PositionOS = In_PositionOS16_g170721;
				Data16_g170721.PositionWS = In_PositionWS16_g170721;
				Data16_g170721.PositionWO = In_PositionWO16_g170721;
				Data16_g170721.PositionRawOS = In_PositionRawOS16_g170721;
				Data16_g170721.PositionAddOS = In_PositionAddOS16_g170721;
				Data16_g170721.PivotOS = In_PivotOS16_g170721;
				Data16_g170721.PivotWS = In_PivotWS16_g170721;
				Data16_g170721.PivotWO = In_PivotWO16_g170721;
				Data16_g170721.NormalOS = In_NormalOS16_g170721;
				Data16_g170721.NormalWS = In_NormalWS16_g170721;
				Data16_g170721.NormalRawOS = In_NormalRawOS16_g170721;
				Data16_g170721.NormalRawWS = In_NormalRawWS16_g170721;
				Data16_g170721.TangentOS = In_TangentOS16_g170721;
				Data16_g170721.ViewDirWS = In_ViewDirWS16_g170721;
				Data16_g170721.VertexData = In_VertexData16_g170721;
				Data16_g170721.PhaseData = In_PhaseData16_g170721;
				Data16_g170721.BoundsData = In_BoundsData16_g170721;
				Data16_g170721.RotationData = In_RotationData16_g170721;
				}
				TVEModelData Data15_g170744 = Data16_g170721;
				float Out_Dummy15_g170744 = 0;
				float3 Out_PositionOS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170744 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170744 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170744 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170744 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170744 = float3( 0,0,0 );
				float4 Out_VertexData15_g170744 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170744 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170744 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170744 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170744 = Data15_g170744.Dummy;
				Out_PositionOS15_g170744 = Data15_g170744.PositionOS;
				Out_PositionWS15_g170744 = Data15_g170744.PositionWS;
				Out_PositionWO15_g170744 = Data15_g170744.PositionWO;
				Out_PositionRawOS15_g170744 = Data15_g170744.PositionRawOS;
				Out_PositionAddOS15_g170744 = Data15_g170744.PositionAddOS;
				Out_PivotOS15_g170744 = Data15_g170744.PivotOS;
				Out_PivotWS15_g170744 = Data15_g170744.PivotWS;
				Out_PivotWO15_g170744 = Data15_g170744.PivotWO;
				Out_NormalOS15_g170744 = Data15_g170744.NormalOS;
				Out_NormalWS15_g170744 = Data15_g170744.NormalWS;
				Out_NormalRawOS15_g170744 = Data15_g170744.NormalRawOS;
				Out_NormalRawWS15_g170744 = Data15_g170744.NormalRawWS;
				Out_TangentOS15_g170744 = Data15_g170744.TangentOS;
				Out_ViewDirWS15_g170744 = Data15_g170744.ViewDirWS;
				Out_VertexData15_g170744 = Data15_g170744.VertexData;
				Out_PhaseData15_g170744 = Data15_g170744.PhaseData;
				Out_BoundsData15_g170744 = Data15_g170744.BoundsData;
				Out_RotationData15_g170744 = Data15_g170744.RotationData;
				}
				float3 In_PositionOS16_g170745 = Out_PositionOS15_g170744;
				float3 In_PositionWS16_g170745 = Out_PositionWS15_g170744;
				float3 temp_output_1567_17_g170743 = Out_PositionWO15_g170744;
				float3 In_PositionWO16_g170745 = temp_output_1567_17_g170743;
				float3 temp_output_1567_26_g170743 = Out_PositionRawOS15_g170744;
				float3 In_PositionRawOS16_g170745 = temp_output_1567_26_g170743;
				float3 In_PositionAddOS16_g170745 = Out_PositionAddOS15_g170744;
				float3 In_PivotOS16_g170745 = Out_PivotOS15_g170744;
				float3 In_PivotWS16_g170745 = Out_PivotWS15_g170744;
				float3 In_PivotWO16_g170745 = Out_PivotWO15_g170744;
				half3 Model_NormalOS1568_g170743 = Out_NormalOS15_g170744;
				float3 lerpResult1589_g170743 = lerp( Model_NormalOS1568_g170743 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170743 = temp_output_1567_26_g170743;
				float3 normalizeResult1594_g170743 = ASESafeNormalize( ( Model_PositionRAW1592_g170743 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170743 = lerp( lerpResult1589_g170743 , normalizeResult1594_g170743 , _NormalSphereValue);
				half3 Input_False58_g170758 = lerpResult1585_g170743;
				half3 VertexPos40_g170747 = lerpResult1585_g170743;
				half3 VertexPos40_g170748 = VertexPos40_g170747;
				float3 appendResult74_g170748 = (float3(VertexPos40_g170748.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170748 = appendResult74_g170748;
				float3 break84_g170748 = VertexPos40_g170748;
				float3 appendResult81_g170748 = (float3(0.0 , break84_g170748.y , break84_g170748.z));
				half3 VertexPosOtherAxis82_g170748 = appendResult81_g170748;
				float4 temp_output_1567_33_g170743 = Out_RotationData15_g170744;
				half4 Model_RotationData1583_g170743 = temp_output_1567_33_g170743;
				half2 Angle44_g170747 = Model_RotationData1583_g170743.xy;
				half Angle44_g170748 = (Angle44_g170747).y;
				half3 VertexPos40_g170749 = ( VertexPosRotationAxis50_g170748 + ( VertexPosOtherAxis82_g170748 * cos( Angle44_g170748 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170748 ) * sin( Angle44_g170748 ) ) );
				float3 appendResult74_g170749 = (float3(0.0 , 0.0 , VertexPos40_g170749.z));
				half3 VertexPosRotationAxis50_g170749 = appendResult74_g170749;
				float3 break84_g170749 = VertexPos40_g170749;
				float3 appendResult81_g170749 = (float3(break84_g170749.x , break84_g170749.y , 0.0));
				half3 VertexPosOtherAxis82_g170749 = appendResult81_g170749;
				half Angle44_g170749 = -(Angle44_g170747).x;
				float3 lerpResult1591_g170743 = lerp( lerpResult1585_g170743 , ( VertexPosRotationAxis50_g170749 + ( VertexPosOtherAxis82_g170749 * cos( Angle44_g170749 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170749 ) * sin( Angle44_g170749 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170758 = lerpResult1591_g170743;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170758 = Input_True57_g170758;
				#else
				float3 staticSwitch65_g170758 = Input_False58_g170758;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170758 = Input_True57_g170758;
				#else
				float3 staticSwitch69_g170758 = staticSwitch65_g170758;
				#endif
				float3 temp_output_1715_0_g170743 = staticSwitch69_g170758;
				float4 temp_output_1567_29_g170743 = Out_VertexData15_g170744;
				half4 Model_VertexData1608_g170743 = temp_output_1567_29_g170743;
				float4 break1683_g170743 = Model_VertexData1608_g170743;
				float4 break33_g170750 = _normal_vert_mode;
				float temp_output_30_0_g170750 = ( break1683_g170743.x * break33_g170750.x );
				float temp_output_29_0_g170750 = ( break1683_g170743.y * break33_g170750.y );
				float temp_output_31_0_g170750 = ( break1683_g170743.z * break33_g170750.z );
				float temp_output_28_0_g170750 = ( temp_output_30_0_g170750 + temp_output_29_0_g170750 + temp_output_31_0_g170750 + ( break1683_g170743.w * break33_g170750.w ) );
				float clampResult17_g170751 = clamp( temp_output_28_0_g170750 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170755 = _NormalMeshRemap.x;
				float temp_output_9_0_g170755 = ( clampResult17_g170751 - temp_output_7_0_g170755 );
				float lerpResult1695_g170743 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170755 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170752 = lerpResult1695_g170743;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170752 = ( temp_output_6_0_g170752 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170752 = temp_output_6_0_g170752;
				#endif
				float temp_output_1690_0_g170743 = staticSwitch14_g170752;
				half Normal_MeskMask1691_g170743 = temp_output_1690_0_g170743;
				half Normal_Proj_Mask1647_g170743 = 1.0;
				float temp_output_1699_0_g170743 = ( Normal_MeskMask1691_g170743 * Normal_Proj_Mask1647_g170743 );
				float3 lerpResult1670_g170743 = lerp( Model_NormalOS1568_g170743 , temp_output_1715_0_g170743 , temp_output_1699_0_g170743);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170743 = lerpResult1670_g170743;
				#else
				float3 staticSwitch1716_g170743 = Model_NormalOS1568_g170743;
				#endif
				half3 Final_NormalOS178_g170743 = staticSwitch1716_g170743;
				float3 In_NormalOS16_g170745 = Final_NormalOS178_g170743;
				float3 temp_output_1567_21_g170743 = Out_NormalWS15_g170744;
				float3 In_NormalWS16_g170745 = temp_output_1567_21_g170743;
				float3 In_NormalRawOS16_g170745 = Out_NormalRawOS15_g170744;
				float3 In_NormalRawWS16_g170745 = Out_NormalRawWS15_g170744;
				float4 In_TangentOS16_g170745 = Out_TangentOS15_g170744;
				float3 In_ViewDirWS16_g170745 = Out_ViewDirWS15_g170744;
				float4 In_VertexData16_g170745 = temp_output_1567_29_g170743;
				float4 In_PhaseData16_g170745 = Out_PhaseData15_g170744;
				float4 In_BoundsData16_g170745 = Out_BoundsData15_g170744;
				float4 In_RotationData16_g170745 = temp_output_1567_33_g170743;
				{
				Data16_g170745.Dummy = In_Dummy16_g170745;
				Data16_g170745.PositionOS = In_PositionOS16_g170745;
				Data16_g170745.PositionWS = In_PositionWS16_g170745;
				Data16_g170745.PositionWO = In_PositionWO16_g170745;
				Data16_g170745.PositionRawOS = In_PositionRawOS16_g170745;
				Data16_g170745.PositionAddOS = In_PositionAddOS16_g170745;
				Data16_g170745.PivotOS = In_PivotOS16_g170745;
				Data16_g170745.PivotWS = In_PivotWS16_g170745;
				Data16_g170745.PivotWO = In_PivotWO16_g170745;
				Data16_g170745.NormalOS = In_NormalOS16_g170745;
				Data16_g170745.NormalWS = In_NormalWS16_g170745;
				Data16_g170745.NormalRawOS = In_NormalRawOS16_g170745;
				Data16_g170745.NormalRawWS = In_NormalRawWS16_g170745;
				Data16_g170745.TangentOS = In_TangentOS16_g170745;
				Data16_g170745.ViewDirWS = In_ViewDirWS16_g170745;
				Data16_g170745.VertexData = In_VertexData16_g170745;
				Data16_g170745.PhaseData = In_PhaseData16_g170745;
				Data16_g170745.BoundsData = In_BoundsData16_g170745;
				Data16_g170745.RotationData = In_RotationData16_g170745;
				}
				TVEModelData Data15_g170760 = Data16_g170745;
				float Out_Dummy15_g170760 = 0;
				float3 Out_PositionOS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170760 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170760 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170760 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170760 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170760 = float3( 0,0,0 );
				float4 Out_VertexData15_g170760 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170760 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170760 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170760 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170760 = Data15_g170760.Dummy;
				Out_PositionOS15_g170760 = Data15_g170760.PositionOS;
				Out_PositionWS15_g170760 = Data15_g170760.PositionWS;
				Out_PositionWO15_g170760 = Data15_g170760.PositionWO;
				Out_PositionRawOS15_g170760 = Data15_g170760.PositionRawOS;
				Out_PositionAddOS15_g170760 = Data15_g170760.PositionAddOS;
				Out_PivotOS15_g170760 = Data15_g170760.PivotOS;
				Out_PivotWS15_g170760 = Data15_g170760.PivotWS;
				Out_PivotWO15_g170760 = Data15_g170760.PivotWO;
				Out_NormalOS15_g170760 = Data15_g170760.NormalOS;
				Out_NormalWS15_g170760 = Data15_g170760.NormalWS;
				Out_NormalRawOS15_g170760 = Data15_g170760.NormalRawOS;
				Out_NormalRawWS15_g170760 = Data15_g170760.NormalRawWS;
				Out_TangentOS15_g170760 = Data15_g170760.TangentOS;
				Out_ViewDirWS15_g170760 = Data15_g170760.ViewDirWS;
				Out_VertexData15_g170760 = Data15_g170760.VertexData;
				Out_PhaseData15_g170760 = Data15_g170760.PhaseData;
				Out_BoundsData15_g170760 = Data15_g170760.BoundsData;
				Out_RotationData15_g170760 = Data15_g170760.RotationData;
				}
				float3 temp_output_217_24_g170759 = Out_PivotOS15_g170760;
				float3 In_PositionOS16_g170761 = ( Out_PositionOS15_g170760 + temp_output_217_24_g170759 );
				float3 In_PositionWS16_g170761 = Out_PositionWS15_g170760;
				float3 In_PositionWO16_g170761 = Out_PositionWO15_g170760;
				float3 In_PositionRawOS16_g170761 = Out_PositionRawOS15_g170760;
				float3 In_PositionAddOS16_g170761 = Out_PositionAddOS15_g170760;
				float3 In_PivotOS16_g170761 = temp_output_217_24_g170759;
				float3 In_PivotWS16_g170761 = Out_PivotWS15_g170760;
				float3 In_PivotWO16_g170761 = Out_PivotWO15_g170760;
				float3 In_NormalOS16_g170761 = Out_NormalOS15_g170760;
				float3 In_NormalWS16_g170761 = Out_NormalWS15_g170760;
				float3 In_NormalRawOS16_g170761 = Out_NormalRawOS15_g170760;
				float3 In_NormalRawWS16_g170761 = Out_NormalRawWS15_g170760;
				float4 In_TangentOS16_g170761 = Out_TangentOS15_g170760;
				float3 In_ViewDirWS16_g170761 = Out_ViewDirWS15_g170760;
				float4 In_VertexData16_g170761 = Out_VertexData15_g170760;
				float4 In_PhaseData16_g170761 = Out_PhaseData15_g170760;
				float4 In_BoundsData16_g170761 = Out_BoundsData15_g170760;
				float4 In_RotationData16_g170761 = Out_RotationData15_g170760;
				{
				Data16_g170761.Dummy = In_Dummy16_g170761;
				Data16_g170761.PositionOS = In_PositionOS16_g170761;
				Data16_g170761.PositionWS = In_PositionWS16_g170761;
				Data16_g170761.PositionWO = In_PositionWO16_g170761;
				Data16_g170761.PositionRawOS = In_PositionRawOS16_g170761;
				Data16_g170761.PositionAddOS = In_PositionAddOS16_g170761;
				Data16_g170761.PivotOS = In_PivotOS16_g170761;
				Data16_g170761.PivotWS = In_PivotWS16_g170761;
				Data16_g170761.PivotWO = In_PivotWO16_g170761;
				Data16_g170761.NormalOS = In_NormalOS16_g170761;
				Data16_g170761.NormalWS = In_NormalWS16_g170761;
				Data16_g170761.NormalRawOS = In_NormalRawOS16_g170761;
				Data16_g170761.NormalRawWS = In_NormalRawWS16_g170761;
				Data16_g170761.TangentOS = In_TangentOS16_g170761;
				Data16_g170761.ViewDirWS = In_ViewDirWS16_g170761;
				Data16_g170761.VertexData = In_VertexData16_g170761;
				Data16_g170761.PhaseData = In_PhaseData16_g170761;
				Data16_g170761.BoundsData = In_BoundsData16_g170761;
				Data16_g170761.RotationData = In_RotationData16_g170761;
				}
				TVEModelData Data15_g170774 = Data16_g170761;
				float Out_Dummy15_g170774 = 0;
				float3 Out_PositionOS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170774 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170774 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170774 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170774 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170774 = float3( 0,0,0 );
				float4 Out_VertexData15_g170774 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170774 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170774 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170774 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170774 = Data15_g170774.Dummy;
				Out_PositionOS15_g170774 = Data15_g170774.PositionOS;
				Out_PositionWS15_g170774 = Data15_g170774.PositionWS;
				Out_PositionWO15_g170774 = Data15_g170774.PositionWO;
				Out_PositionRawOS15_g170774 = Data15_g170774.PositionRawOS;
				Out_PositionAddOS15_g170774 = Data15_g170774.PositionAddOS;
				Out_PivotOS15_g170774 = Data15_g170774.PivotOS;
				Out_PivotWS15_g170774 = Data15_g170774.PivotWS;
				Out_PivotWO15_g170774 = Data15_g170774.PivotWO;
				Out_NormalOS15_g170774 = Data15_g170774.NormalOS;
				Out_NormalWS15_g170774 = Data15_g170774.NormalWS;
				Out_NormalRawOS15_g170774 = Data15_g170774.NormalRawOS;
				Out_NormalRawWS15_g170774 = Data15_g170774.NormalRawWS;
				Out_TangentOS15_g170774 = Data15_g170774.TangentOS;
				Out_ViewDirWS15_g170774 = Data15_g170774.ViewDirWS;
				Out_VertexData15_g170774 = Data15_g170774.VertexData;
				Out_PhaseData15_g170774 = Data15_g170774.PhaseData;
				Out_BoundsData15_g170774 = Data15_g170774.BoundsData;
				Out_RotationData15_g170774 = Data15_g170774.RotationData;
				}
				float3 temp_output_31_0_g170771 = Out_PositionOS15_g170774;
				float3 temp_output_6_0_g170785 = ( temp_output_31_0_g170771 + _DisableSRPBatcher );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170785 = ( temp_output_6_0_g170785 + ( 0.0 * 0.0 ) );
				#else
				float3 staticSwitch14_g170785 = temp_output_6_0_g170785;
				#endif
				
				output.ase_texcoord4.xyz = vertexToFrag73_g170196;
				output.ase_texcoord5.xyz = vertexToFrag76_g170196;
				output.ase_texcoord6.xyz = ase_normalWS;
				float3 ase_tangentWS = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				output.ase_texcoord7.xyz = ase_tangentWS;
				float ase_tangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_bitangentWS = cross( ase_normalWS, ase_tangentWS ) * ase_tangentSign;
				output.ase_texcoord8.xyz = ase_bitangentWS;
				float temp_output_6_0_g170497 = ( _MotionHighlightValue * Global_DistMask1820_g170474 * ( Tiny_Mask218_g170474 * Tiny_Mask218_g170474 ) * ( Global_Wave1475_g170474 * Global_Wave1475_g170474 * Global_Wave1475_g170474 * Global_Wave1475_g170474 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Wave_Mask4324 = staticSwitch14_g170497;
				float4 appendResult23_g170573 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask4324));
				float4 vertexToFrag24_g170573 = appendResult23_g170573;
				output.ase_texcoord9 = vertexToFrag24_g170573;
				output.ase_texcoord10.xyz = ase_positionWS;
				
				output.ase_texcoord2 = inputMesh.uv0;
				output.ase_texcoord3.xy = inputMesh.uv2.xy;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord3.zw = 0;
				output.ase_texcoord4.w = 0;
				output.ase_texcoord5.w = 0;
				output.ase_texcoord6.w = 0;
				output.ase_texcoord7.w = 0;
				output.ase_texcoord8.w = 0;
				output.ase_texcoord10.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = staticSwitch14_g170785;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170774;
				inputMesh.tangentOS = Out_TangentOS15_g170774;

				output.positionCS = UnityMetaVertexPosition(inputMesh.positionOS, inputMesh.uv1.xy, inputMesh.uv2.xy, unity_LightmapST, unity_DynamicLightmapST);

				#ifdef EDITOR_VISUALIZATION
					float2 vizUV = 0;
					float4 lightCoord = 0;
					UnityEditorVizData(inputMesh.positionOS.xyz, inputMesh.uv0.xy, inputMesh.uv1.xy, inputMesh.uv2.xy, vizUV, lightCoord);

					output.VizUV.xy = vizUV;
					output.LightCoord = lightCoord;
				#endif

				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv0 : TEXCOORD0;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 uv3 : TEXCOORD3;
				float4 ase_color : COLOR;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv0 = v.uv0;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.uv3 = v.uv3;
				o.ase_color = v.ase_color;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv0 = patch[0].uv0 * bary.x + patch[1].uv0 * bary.y + patch[2].uv0 * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.uv3 = patch[0].uv3 * bary.x + patch[1].uv3 * bary.y + patch[2].uv3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			float4 Frag(PackedVaryingsMeshToPS packedInput  ) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID( packedInput );
				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);
				float3 V = float3(1.0, 1.0, 1.0);

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;
				float localBreakData4_g170777 = ( 0.0 );
				float localCompData3_g170764 = ( 0.0 );
				TVEVisualData Data3_g170764 = (TVEVisualData)0;
				half Dummy145_g170762 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170764 = Dummy145_g170762;
				float localBreakData4_g170763 = ( 0.0 );
				float localCompData3_g170732 = ( 0.0 );
				TVEVisualData Data3_g170732 = (TVEVisualData)0;
				half Dummy145_g170727 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170732 = Dummy145_g170727;
				float localBreakData4_g170731 = ( 0.0 );
				float localCompData3_g170709 = ( 0.0 );
				TVEVisualData Data3_g170709 = (TVEVisualData)0;
				half Dummy594_g170706 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170709 = Dummy594_g170706;
				float localBreakData4_g170708 = ( 0.0 );
				float localCompData3_g170692 = ( 0.0 );
				TVEVisualData Data3_g170692 = (TVEVisualData)0;
				half Dummy594_g170691 = ( _CutoutCategory + _CutoutEnd + _CutoutBakeMode );
				float In_Dummy3_g170692 = Dummy594_g170691;
				float localBreakData4_g170694 = ( 0.0 );
				float localCompData3_g170664 = ( 0.0 );
				TVEVisualData Data3_g170664 = (TVEVisualData)0;
				half Dummy594_g170662 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170664 = Dummy594_g170662;
				float localBreakData4_g170663 = ( 0.0 );
				float localCompData3_g170628 = ( 0.0 );
				TVEVisualData Data3_g170628 = (TVEVisualData)0;
				half Dummy594_g170625 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170628 = Dummy594_g170625;
				float localBreakData4_g170626 = ( 0.0 );
				float localCompData3_g170624 = ( 0.0 );
				TVEVisualData Data3_g170624 = (TVEVisualData)0;
				float In_Dummy3_g170624 = 0.0;
				float localBreakData4_g170623 = ( 0.0 );
				float localCompData3_g170601 = ( 0.0 );
				TVEVisualData Data3_g170601 = (TVEVisualData)0;
				half Dummy205_g170598 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170601 = Dummy205_g170598;
				float localBreakData4_g170600 = ( 0.0 );
				float localCompData3_g170578 = ( 0.0 );
				TVEVisualData Data3_g170578 = (TVEVisualData)0;
				half Dummy205_g170574 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170578 = Dummy205_g170574;
				float localBreakData4_g170579 = ( 0.0 );
				float localCompData3_g170567 = ( 0.0 );
				TVEVisualData Data3_g170567 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170567 = Dummy220_g170564;
				float localBreakData4_g170566 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170447 = ( 0.0 );
				TVEVisualData Data3_g170447 = (TVEVisualData)0;
				half4 Dummy944_g170438 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170447 = Dummy944_g170438.x;
				float localBreakData4_g170446 = ( 0.0 );
				float localCompData3_g170415 = ( 0.0 );
				TVEVisualData Data3_g170415 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170415 = Dummy946_g170394.x;
				float localBreakData4_g170405 = ( 0.0 );
				float localCompData3_g170387 = ( 0.0 );
				TVEVisualData Data3_g170387 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170387 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170380) = _MainAlbedoTex;
				float localFilterTexture19_g170383 = ( 0.0 );
				SamplerState SS19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170383 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170383 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170383 = SamplerDefault19_g170383;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170383 = SamplerDefault19_g170383;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170383 = SamplerPoint19_g170383;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170383 = SamplerLow19_g170383;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170383 = SamplerMedium19_g170383;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170383 = SamplerHigh19_g170383;
				#endif
				}
				SamplerState Sampler276_g170380 = SS19_g170383;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170380 = Local_Coords180_g170372;
				half4 Coords276_g170380 = temp_output_37_0_g170380;
				half2 TexCoord276_g170380 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170380 = SampleMain( Texture276_g170380 , Sampler276_g170380 , Coords276_g170380 , TexCoord276_g170380 );
				TEXTURE2D(Texture275_g170380) = _MainAlbedoTex;
				SamplerState Sampler275_g170380 = SS19_g170383;
				half4 Coords275_g170380 = temp_output_37_0_g170380;
				half2 TexCoord275_g170380 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170380 = SampleExtra( Texture275_g170380 , Sampler275_g170380 , Coords275_g170380 , TexCoord275_g170380 );
				TEXTURE2D(Texture238_g170380) = _MainAlbedoTex;
				SamplerState Sampler238_g170380 = SS19_g170383;
				half4 Coords238_g170380 = temp_output_37_0_g170380;
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord4.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord5.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 ase_normalWS = packedInput.ase_texcoord6.xyz;
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170386 = Data16_g170201;
				float Out_Dummy15_g170386 = 0;
				float3 Out_PositionWS15_g170386 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170386 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170386 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170386 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170386 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170386 = float3( 0,0,0 );
				float4 Out_VertexData15_g170386 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170386 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170386 = Data15_g170386.Dummy;
				Out_PositionWS15_g170386 = Data15_g170386.PositionWS;
				Out_PositionWO15_g170386 = Data15_g170386.PositionWO;
				Out_PivotWS15_g170386 = Data15_g170386.PivotWS;
				Out_PivotWO15_g170386 = Data15_g170386.PivotWO;
				Out_NormalWS15_g170386 = Data15_g170386.NormalWS;
				Out_ViewDirWS15_g170386 = Data15_g170386.ViewDirWS;
				Out_VertexData15_g170386 = Data15_g170386.VertexData;
				Out_BoundsData15_g170386 = Data15_g170386.BoundsData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170386;
				float3 temp_output_279_0_g170380 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170380 = temp_output_279_0_g170380;
				half4 localSamplePlanar2D238_g170380 = SamplePlanar2D( Texture238_g170380 , Sampler238_g170380 , Coords238_g170380 , WorldPosition238_g170380 );
				TEXTURE2D(Texture246_g170380) = _MainAlbedoTex;
				SamplerState Sampler246_g170380 = SS19_g170383;
				half4 Coords246_g170380 = temp_output_37_0_g170380;
				half3 WorldPosition246_g170380 = temp_output_279_0_g170380;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170386;
				float3 temp_output_280_0_g170380 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170380 = temp_output_280_0_g170380;
				half4 localSamplePlanar3D246_g170380 = SamplePlanar3D( Texture246_g170380 , Sampler246_g170380 , Coords246_g170380 , WorldPosition246_g170380 , WorldNormal246_g170380 );
				TEXTURE2D(Texture234_g170380) = _MainAlbedoTex;
				SamplerState Sampler234_g170380 = SS19_g170383;
				float4 Coords234_g170380 = temp_output_37_0_g170380;
				float3 WorldPosition234_g170380 = temp_output_279_0_g170380;
				float4 localSampleStochastic2D234_g170380 = SampleStochastic2D( Texture234_g170380 , Sampler234_g170380 , Coords234_g170380 , WorldPosition234_g170380 );
				TEXTURE2D(Texture263_g170380) = _MainAlbedoTex;
				SamplerState Sampler263_g170380 = SS19_g170383;
				half4 Coords263_g170380 = temp_output_37_0_g170380;
				half3 WorldPosition263_g170380 = temp_output_279_0_g170380;
				half3 WorldNormal263_g170380 = temp_output_280_0_g170380;
				half4 localSampleStochastic3D263_g170380 = SampleStochastic3D( Texture263_g170380 , Sampler263_g170380 , Coords263_g170380 , WorldPosition263_g170380 , WorldNormal263_g170380 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170380;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170380;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170380;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170380;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170380;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170380;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170380;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170382) = _MainShaderTex;
				float localFilterTexture30_g170385 = ( 0.0 );
				SamplerState SS30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170385 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170385 = SamplerDefault30_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170385 = SamplerDefault30_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170385 = SamplerPoint30_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170385 = SamplerLow30_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170385 = SamplerMedium30_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170385 = SamplerHigh30_g170385;
				#endif
				}
				SamplerState Sampler276_g170382 = SS30_g170385;
				float4 temp_output_37_0_g170382 = Local_Coords180_g170372;
				half4 Coords276_g170382 = temp_output_37_0_g170382;
				half2 TexCoord276_g170382 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170382 = SampleMain( Texture276_g170382 , Sampler276_g170382 , Coords276_g170382 , TexCoord276_g170382 );
				TEXTURE2D(Texture275_g170382) = _MainShaderTex;
				SamplerState Sampler275_g170382 = SS30_g170385;
				half4 Coords275_g170382 = temp_output_37_0_g170382;
				half2 TexCoord275_g170382 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170382 = SampleExtra( Texture275_g170382 , Sampler275_g170382 , Coords275_g170382 , TexCoord275_g170382 );
				TEXTURE2D(Texture238_g170382) = _MainShaderTex;
				SamplerState Sampler238_g170382 = SS30_g170385;
				half4 Coords238_g170382 = temp_output_37_0_g170382;
				float3 temp_output_279_0_g170382 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170382 = temp_output_279_0_g170382;
				half4 localSamplePlanar2D238_g170382 = SamplePlanar2D( Texture238_g170382 , Sampler238_g170382 , Coords238_g170382 , WorldPosition238_g170382 );
				TEXTURE2D(Texture246_g170382) = _MainShaderTex;
				SamplerState Sampler246_g170382 = SS30_g170385;
				half4 Coords246_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition246_g170382 = temp_output_279_0_g170382;
				float3 temp_output_280_0_g170382 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170382 = temp_output_280_0_g170382;
				half4 localSamplePlanar3D246_g170382 = SamplePlanar3D( Texture246_g170382 , Sampler246_g170382 , Coords246_g170382 , WorldPosition246_g170382 , WorldNormal246_g170382 );
				TEXTURE2D(Texture234_g170382) = _MainShaderTex;
				SamplerState Sampler234_g170382 = SS30_g170385;
				float4 Coords234_g170382 = temp_output_37_0_g170382;
				float3 WorldPosition234_g170382 = temp_output_279_0_g170382;
				float4 localSampleStochastic2D234_g170382 = SampleStochastic2D( Texture234_g170382 , Sampler234_g170382 , Coords234_g170382 , WorldPosition234_g170382 );
				TEXTURE2D(Texture263_g170382) = _MainShaderTex;
				SamplerState Sampler263_g170382 = SS30_g170385;
				half4 Coords263_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition263_g170382 = temp_output_279_0_g170382;
				half3 WorldNormal263_g170382 = temp_output_280_0_g170382;
				half4 localSampleStochastic3D263_g170382 = SampleStochastic3D( Texture263_g170382 , Sampler263_g170382 , Coords263_g170382 , WorldPosition263_g170382 , WorldNormal263_g170382 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170382;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170382;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170382;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170377 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170388 = _MainMultiRemap.x;
				float temp_output_9_0_g170388 = ( clampResult17_g170377 - temp_output_7_0_g170388 );
				half Local_MultiMask78_g170372 = saturate( ( ( temp_output_9_0_g170388 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170387 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170387 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170381) = _MainNormalTex;
				float localFilterTexture29_g170384 = ( 0.0 );
				SamplerState SS29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170384 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170384 = SamplerDefault29_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170384 = SamplerDefault29_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170384 = SamplerPoint29_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170384 = SamplerLow29_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170384 = SamplerMedium29_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170384 = SamplerHigh29_g170384;
				#endif
				}
				SamplerState Sampler276_g170381 = SS29_g170384;
				float4 temp_output_37_0_g170381 = Local_Coords180_g170372;
				half4 Coords276_g170381 = temp_output_37_0_g170381;
				half2 TexCoord276_g170381 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170381 = SampleMain( Texture276_g170381 , Sampler276_g170381 , Coords276_g170381 , TexCoord276_g170381 );
				TEXTURE2D(Texture275_g170381) = _MainNormalTex;
				SamplerState Sampler275_g170381 = SS29_g170384;
				half4 Coords275_g170381 = temp_output_37_0_g170381;
				half2 TexCoord275_g170381 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170381 = SampleExtra( Texture275_g170381 , Sampler275_g170381 , Coords275_g170381 , TexCoord275_g170381 );
				TEXTURE2D(Texture238_g170381) = _MainNormalTex;
				SamplerState Sampler238_g170381 = SS29_g170384;
				half4 Coords238_g170381 = temp_output_37_0_g170381;
				float3 temp_output_279_0_g170381 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170381 = temp_output_279_0_g170381;
				half4 localSamplePlanar2D238_g170381 = SamplePlanar2D( Texture238_g170381 , Sampler238_g170381 , Coords238_g170381 , WorldPosition238_g170381 );
				TEXTURE2D(Texture246_g170381) = _MainNormalTex;
				SamplerState Sampler246_g170381 = SS29_g170384;
				half4 Coords246_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition246_g170381 = temp_output_279_0_g170381;
				float3 temp_output_280_0_g170381 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170381 = temp_output_280_0_g170381;
				half4 localSamplePlanar3D246_g170381 = SamplePlanar3D( Texture246_g170381 , Sampler246_g170381 , Coords246_g170381 , WorldPosition246_g170381 , WorldNormal246_g170381 );
				TEXTURE2D(Texture234_g170381) = _MainNormalTex;
				SamplerState Sampler234_g170381 = SS29_g170384;
				float4 Coords234_g170381 = temp_output_37_0_g170381;
				float3 WorldPosition234_g170381 = temp_output_279_0_g170381;
				float4 localSampleStochastic2D234_g170381 = SampleStochastic2D( Texture234_g170381 , Sampler234_g170381 , Coords234_g170381 , WorldPosition234_g170381 );
				TEXTURE2D(Texture263_g170381) = _MainNormalTex;
				SamplerState Sampler263_g170381 = SS29_g170384;
				half4 Coords263_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition263_g170381 = temp_output_279_0_g170381;
				half3 WorldNormal263_g170381 = temp_output_280_0_g170381;
				half4 localSampleStochastic3D263_g170381 = SampleStochastic3D( Texture263_g170381 , Sampler263_g170381 , Coords263_g170381 , WorldPosition263_g170381 , WorldNormal263_g170381 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170381;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170381;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170381;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3 ase_tangentWS = packedInput.ase_texcoord7.xyz;
				float3 ase_bitangentWS = packedInput.ase_texcoord8.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_tangentWS,ase_bitangentWS,ase_normalWS);
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170387 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( ase_tangentWS.x, ase_bitangentWS.x, ase_normalWS.x );
				float3 tanToWorld1 = float3( ase_tangentWS.y, ase_bitangentWS.y, ase_normalWS.y );
				float3 tanToWorld2 = float3( ase_tangentWS.z, ase_bitangentWS.z, ase_normalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3(dot(tanToWorld0,tanNormal74_g170375), dot(tanToWorld1,tanNormal74_g170375), dot(tanToWorld2,tanNormal74_g170375)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170387 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170387 = Local_Masks109_g170372;
				float4 In_Emissive3_g170387 = half4(1,1,1,1);
				float3 temp_output_3_0_g170376 = Local_Albedo139_g170372;
				float dotResult20_g170376 = dot( temp_output_3_0_g170376 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170376;
				float In_Grayscale3_g170387 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170387 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170387 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170387 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170387 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170387 = temp_cast_4;
				float In_Transmission3_g170387 = 1.0;
				float In_Thickness3_g170387 = 0.0;
				float In_Diffusion3_g170387 = 0.0;
				{
				Data3_g170387.Dummy = In_Dummy3_g170387;
				Data3_g170387.Albedo = In_Albedo3_g170387;
				Data3_g170387.AlbedoRaw = In_AlbedoRaw3_g170387;
				Data3_g170387.NormalTS = In_NormalTS3_g170387;
				Data3_g170387.NormalWS = In_NormalWS3_g170387;
				Data3_g170387.Shader = In_Shader3_g170387;
				Data3_g170387.Emissive= In_Emissive3_g170387;
				Data3_g170387.MultiMask = In_MultiMask3_g170387;
				Data3_g170387.Grayscale = In_Grayscale3_g170387;
				Data3_g170387.Luminosity = In_Luminosity3_g170387;
				Data3_g170387.AlphaClip = In_AlphaClip3_g170387;
				Data3_g170387.AlphaFade = In_AlphaFade3_g170387;
				Data3_g170387.Translucency = In_Translucency3_g170387;
				Data3_g170387.Transmission = In_Transmission3_g170387;
				Data3_g170387.Thickness = In_Thickness3_g170387;
				Data3_g170387.Diffusion = In_Diffusion3_g170387;
				}
				TVEVisualData Data4_g170405 = Data3_g170387;
				float Out_Dummy4_g170405 = 0;
				float3 Out_Albedo4_g170405 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170405 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170405 = float2( 0,0 );
				float3 Out_NormalWS4_g170405 = float3( 0,0,0 );
				float4 Out_Shader4_g170405 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170405 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170405 = 0;
				float Out_Grayscale4_g170405 = 0;
				float Out_Luminosity4_g170405 = 0;
				float Out_AlphaClip4_g170405 = 0;
				float Out_AlphaFade4_g170405 = 0;
				float3 Out_Translucency4_g170405 = float3( 0,0,0 );
				float Out_Transmission4_g170405 = 0;
				float Out_Thickness4_g170405 = 0;
				float Out_Diffusion4_g170405 = 0;
				{
				Out_Dummy4_g170405 = Data4_g170405.Dummy;
				Out_Albedo4_g170405 = Data4_g170405.Albedo;
				Out_AlbedoRaw4_g170405 = Data4_g170405.AlbedoRaw;
				Out_NormalTS4_g170405 = Data4_g170405.NormalTS;
				Out_NormalWS4_g170405 = Data4_g170405.NormalWS;
				Out_Shader4_g170405 = Data4_g170405.Shader;
				Out_Emissive4_g170405= Data4_g170405.Emissive;
				Out_MultiMask4_g170405 = Data4_g170405.MultiMask;
				Out_Grayscale4_g170405 = Data4_g170405.Grayscale;
				Out_Luminosity4_g170405= Data4_g170405.Luminosity;
				Out_AlphaClip4_g170405 = Data4_g170405.AlphaClip;
				Out_AlphaFade4_g170405 = Data4_g170405.AlphaFade;
				Out_Translucency4_g170405 = Data4_g170405.Translucency;
				Out_Transmission4_g170405 = Data4_g170405.Transmission;
				Out_Thickness4_g170405 = Data4_g170405.Thickness;
				Out_Diffusion4_g170405 = Data4_g170405.Diffusion;
				}
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170405;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				float localFilterTexture19_g170411 = ( 0.0 );
				SamplerState SS19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170411 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170411 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170411 = SamplerDefault19_g170411;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170411 = SamplerDefault19_g170411;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170411 = SamplerPoint19_g170411;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170411 = SamplerLow19_g170411;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170411 = SamplerMedium19_g170411;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170411 = SamplerHigh19_g170411;
				#endif
				}
				SamplerState Sampler276_g170395 = SS19_g170411;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = SS19_g170411;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = SS19_g170411;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170414 = Data16_g170201;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				}
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = SS19_g170411;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = SS19_g170411;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = SS19_g170411;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				float localFilterTexture30_g170413 = ( 0.0 );
				SamplerState SS30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170413 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170413 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170413 = SamplerDefault30_g170413;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170413 = SamplerDefault30_g170413;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170413 = SamplerPoint30_g170413;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170413 = SamplerLow30_g170413;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170413 = SamplerMedium30_g170413;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170413 = SamplerHigh30_g170413;
				#endif
				}
				SamplerState Sampler276_g170397 = SS30_g170413;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = SS30_g170413;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = SS30_g170413;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = SS30_g170413;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = SS30_g170413;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = SS30_g170413;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170416 = _SecondMultiRemap.x;
				float temp_output_9_0_g170416 = ( clampResult17_g170401 - temp_output_7_0_g170416 );
				float temp_output_765_0_g170394 = saturate( ( ( temp_output_9_0_g170416 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170418 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170422 = _SecondMaskRemap.x;
				float temp_output_9_0_g170422 = ( clampResult17_g170418 - temp_output_7_0_g170422 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170422 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half Visual_Luminosity1041_g170394 = Out_Luminosity4_g170405;
				float clampResult17_g170427 = clamp( Visual_Luminosity1041_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170428 = _SecondLumaRemap.x;
				float temp_output_9_0_g170428 = ( clampResult17_g170427 - temp_output_7_0_g170428 );
				float lerpResult1036_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170428 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170394 = lerpResult1036_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170405;
				float clampResult17_g170423 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _SecondProjRemap.x;
				float temp_output_9_0_g170425 = ( clampResult17_g170423 - temp_output_7_0_g170425 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170425 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170414;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170419 = _second_vert_mode;
				float temp_output_30_0_g170419 = ( break965_g170394.x * break33_g170419.x );
				float temp_output_29_0_g170419 = ( break965_g170394.y * break33_g170419.y );
				float temp_output_31_0_g170419 = ( break965_g170394.z * break33_g170419.z );
				float temp_output_28_0_g170419 = ( temp_output_30_0_g170419 + temp_output_29_0_g170419 + temp_output_31_0_g170419 + ( break965_g170394.w * break33_g170419.w ) );
				float clampResult17_g170417 = clamp( temp_output_28_0_g170419 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170421 = _SecondMeshRemap.x;
				float temp_output_9_0_g170421 = ( clampResult17_g170417 - temp_output_7_0_g170421 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170421 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170420 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170420 = ( temp_output_6_0_g170420 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170420 = temp_output_6_0_g170420;
				#endif
				half Blend_VertMask918_g170394 = staticSwitch14_g170420;
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatParams204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintParams204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowParams204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoParams204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeParams204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormParams204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowParams204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatParams = In_CoatParams204_g170214;
				Data204_g170214.PaintParams = In_PaintParams204_g170214;
				Data204_g170214.GlowParams = In_GlowParams204_g170214;
				Data204_g170214.AtmoParams = In_AtmoParams204_g170214;
				Data204_g170214.FadeParams = In_FadeParams204_g170214;
				Data204_g170214.FormParams= In_FormParams204_g170214;
				Data204_g170214.FlowParams = In_FlowParams204_g170214;
				}
				TVEGlobalData Data15_g170404 = Data204_g170214;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170404 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatParams15_g170404 = Data15_g170404.CoatParams;
				Out_PaintParams15_g170404 = Data15_g170404.PaintParams;
				Out_GlowParams15_g170404 = Data15_g170404.GlowParams;
				Out_AtmoParams15_g170404= Data15_g170404.AtmoParams;
				Out_FadeParams15_g170404= Data15_g170404.FadeParams;
				Out_FormParams15_g170404 = Data15_g170404.FormParams;
				Out_FlowParams15_g170404 = Data15_g170404.FlowParams;
				}
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170404;
				float temp_output_6_0_g170429 = (Global_CoatParams975_g170394).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170429 = ( temp_output_6_0_g170429 + ( _SecondElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170429 = temp_output_6_0_g170429;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = staticSwitch14_g170429;
				#else
				float staticSwitch971_g170394 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170394 = lerp( 1.0 , staticSwitch971_g170394 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170394 = lerpResult1013_g170394;
				float clampResult17_g170424 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_LumaMask1033_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170426 = _SecondBlendRemap.x;
				float temp_output_9_0_g170426 = ( clampResult17_g170424 - temp_output_7_0_g170426 );
				half Blend_Mask412_g170394 = ( saturate( ( ( temp_output_9_0_g170426 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170415 = Final_Albedo601_g170394;
				float3 In_AlbedoRaw3_g170415 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170405;
				float2 lerpResult40_g170406 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				float localFilterTexture29_g170412 = ( 0.0 );
				SamplerState SS29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170412 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170412 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170412 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170412 = SamplerDefault29_g170412;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170412 = SamplerDefault29_g170412;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170412 = SamplerPoint29_g170412;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170412 = SamplerLow29_g170412;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170412 = SamplerMedium29_g170412;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170412 = SamplerHigh29_g170412;
				#endif
				}
				SamplerState Sampler276_g170396 = SS29_g170412;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = SS29_g170412;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = SS29_g170412;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = SS29_g170412;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = SS29_g170412;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = SS29_g170412;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170406 = ( lerpResult40_g170406 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170406 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170415 = Final_NormalTS612_g170394;
				float3 appendResult68_g170407 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170407 = appendResult68_g170407;
				float3 worldNormal74_g170407 = normalize( float3(dot(tanToWorld0,tanNormal74_g170407), dot(tanToWorld1,tanNormal74_g170407), dot(tanToWorld2,tanNormal74_g170407)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170407;
				float3 In_NormalWS3_g170415 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170405;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170415 = Final_Masks613_g170394;
				float4 In_Emissive3_g170415 = Out_Emissive4_g170405;
				float3 temp_output_3_0_g170409 = Final_Albedo601_g170394;
				float dotResult20_g170409 = dot( temp_output_3_0_g170409 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170409;
				float In_Grayscale3_g170415 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170415 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170405;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170415 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170405;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170415 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170405;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170415 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170415 = Out_Translucency4_g170405;
				float In_Transmission3_g170415 = Out_Transmission4_g170405;
				float In_Thickness3_g170415 = Out_Thickness4_g170405;
				float In_Diffusion3_g170415 = Out_Diffusion4_g170405;
				{
				Data3_g170415.Dummy = In_Dummy3_g170415;
				Data3_g170415.Albedo = In_Albedo3_g170415;
				Data3_g170415.AlbedoRaw = In_AlbedoRaw3_g170415;
				Data3_g170415.NormalTS = In_NormalTS3_g170415;
				Data3_g170415.NormalWS = In_NormalWS3_g170415;
				Data3_g170415.Shader = In_Shader3_g170415;
				Data3_g170415.Emissive= In_Emissive3_g170415;
				Data3_g170415.MultiMask = In_MultiMask3_g170415;
				Data3_g170415.Grayscale = In_Grayscale3_g170415;
				Data3_g170415.Luminosity = In_Luminosity3_g170415;
				Data3_g170415.AlphaClip = In_AlphaClip3_g170415;
				Data3_g170415.AlphaFade = In_AlphaFade3_g170415;
				Data3_g170415.Translucency = In_Translucency3_g170415;
				Data3_g170415.Transmission = In_Transmission3_g170415;
				Data3_g170415.Thickness = In_Thickness3_g170415;
				Data3_g170415.Diffusion = In_Diffusion3_g170415;
				}
				TVEVisualData Data4_g170446 = Data3_g170415;
				float Out_Dummy4_g170446 = 0;
				float3 Out_Albedo4_g170446 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170446 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170446 = float2( 0,0 );
				float3 Out_NormalWS4_g170446 = float3( 0,0,0 );
				float4 Out_Shader4_g170446 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170446 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170446 = 0;
				float Out_Grayscale4_g170446 = 0;
				float Out_Luminosity4_g170446 = 0;
				float Out_AlphaClip4_g170446 = 0;
				float Out_AlphaFade4_g170446 = 0;
				float3 Out_Translucency4_g170446 = float3( 0,0,0 );
				float Out_Transmission4_g170446 = 0;
				float Out_Thickness4_g170446 = 0;
				float Out_Diffusion4_g170446 = 0;
				{
				Out_Dummy4_g170446 = Data4_g170446.Dummy;
				Out_Albedo4_g170446 = Data4_g170446.Albedo;
				Out_AlbedoRaw4_g170446 = Data4_g170446.AlbedoRaw;
				Out_NormalTS4_g170446 = Data4_g170446.NormalTS;
				Out_NormalWS4_g170446 = Data4_g170446.NormalWS;
				Out_Shader4_g170446 = Data4_g170446.Shader;
				Out_Emissive4_g170446= Data4_g170446.Emissive;
				Out_MultiMask4_g170446 = Data4_g170446.MultiMask;
				Out_Grayscale4_g170446 = Data4_g170446.Grayscale;
				Out_Luminosity4_g170446= Data4_g170446.Luminosity;
				Out_AlphaClip4_g170446 = Data4_g170446.AlphaClip;
				Out_AlphaFade4_g170446 = Data4_g170446.AlphaFade;
				Out_Translucency4_g170446 = Data4_g170446.Translucency;
				Out_Transmission4_g170446 = Data4_g170446.Transmission;
				Out_Thickness4_g170446 = Data4_g170446.Thickness;
				Out_Diffusion4_g170446 = Data4_g170446.Diffusion;
				}
				half3 Visual_Albedo527_g170438 = Out_Albedo4_g170446;
				TEXTURE2D(Texture276_g170439) = _ThirdAlbedoTex;
				float localFilterTexture19_g170455 = ( 0.0 );
				SamplerState SS19_g170455 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170455 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170455 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170455 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170455 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170455 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170455 = SamplerDefault19_g170455;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170455 = SamplerDefault19_g170455;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170455 = SamplerPoint19_g170455;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170455 = SamplerLow19_g170455;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170455 = SamplerMedium19_g170455;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170455 = SamplerHigh19_g170455;
				#endif
				}
				SamplerState Sampler276_g170439 = SS19_g170455;
				half4 Local_LayerCoords790_g170438 = _third_coord_value;
				float4 temp_output_37_0_g170439 = Local_LayerCoords790_g170438;
				half4 Coords276_g170439 = temp_output_37_0_g170439;
				half2 TexCoord276_g170439 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170439 = SampleMain( Texture276_g170439 , Sampler276_g170439 , Coords276_g170439 , TexCoord276_g170439 );
				TEXTURE2D(Texture275_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170439 = SS19_g170455;
				half4 Coords275_g170439 = temp_output_37_0_g170439;
				half2 TexCoord275_g170439 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170439 = SampleExtra( Texture275_g170439 , Sampler275_g170439 , Coords275_g170439 , TexCoord275_g170439 );
				TEXTURE2D(Texture238_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170439 = SS19_g170455;
				half4 Coords238_g170439 = temp_output_37_0_g170439;
				TVEModelData Data15_g170458 = Data16_g170201;
				float Out_Dummy15_g170458 = 0;
				float3 Out_PositionWS15_g170458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170458 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170458 = float3( 0,0,0 );
				float4 Out_VertexData15_g170458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170458 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170458 = Data15_g170458.Dummy;
				Out_PositionWS15_g170458 = Data15_g170458.PositionWS;
				Out_PositionWO15_g170458 = Data15_g170458.PositionWO;
				Out_PivotWS15_g170458 = Data15_g170458.PivotWS;
				Out_PivotWO15_g170458 = Data15_g170458.PivotWO;
				Out_NormalWS15_g170458 = Data15_g170458.NormalWS;
				Out_ViewDirWS15_g170458 = Data15_g170458.ViewDirWS;
				Out_VertexData15_g170458 = Data15_g170458.VertexData;
				Out_BoundsData15_g170458 = Data15_g170458.BoundsData;
				}
				half3 Model_PositionWO636_g170438 = Out_PositionWO15_g170458;
				float3 temp_output_279_0_g170439 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170439 = temp_output_279_0_g170439;
				half4 localSamplePlanar2D238_g170439 = SamplePlanar2D( Texture238_g170439 , Sampler238_g170439 , Coords238_g170439 , WorldPosition238_g170439 );
				TEXTURE2D(Texture246_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170439 = SS19_g170455;
				half4 Coords246_g170439 = temp_output_37_0_g170439;
				half3 WorldPosition246_g170439 = temp_output_279_0_g170439;
				half3 Model_NormalWS869_g170438 = Out_NormalWS15_g170458;
				float3 temp_output_280_0_g170439 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170439 = temp_output_280_0_g170439;
				half4 localSamplePlanar3D246_g170439 = SamplePlanar3D( Texture246_g170439 , Sampler246_g170439 , Coords246_g170439 , WorldPosition246_g170439 , WorldNormal246_g170439 );
				TEXTURE2D(Texture234_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170439 = SS19_g170455;
				float4 Coords234_g170439 = temp_output_37_0_g170439;
				float3 WorldPosition234_g170439 = temp_output_279_0_g170439;
				float4 localSampleStochastic2D234_g170439 = SampleStochastic2D( Texture234_g170439 , Sampler234_g170439 , Coords234_g170439 , WorldPosition234_g170439 );
				TEXTURE2D(Texture263_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170439 = SS19_g170455;
				half4 Coords263_g170439 = temp_output_37_0_g170439;
				half3 WorldPosition263_g170439 = temp_output_279_0_g170439;
				half3 WorldNormal263_g170439 = temp_output_280_0_g170439;
				half4 localSampleStochastic3D263_g170439 = SampleStochastic3D( Texture263_g170439 , Sampler263_g170439 , Coords263_g170439 , WorldPosition263_g170439 , WorldNormal263_g170439 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170438 = localSampleMain276_g170439;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170438 = localSampleExtra275_g170439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170438 = localSamplePlanar2D238_g170439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170438 = localSamplePlanar3D246_g170439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170438 = localSampleStochastic2D234_g170439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170438 = localSampleStochastic3D263_g170439;
				#else
				float4 staticSwitch693_g170438 = localSampleMain276_g170439;
				#endif
				half4 Local_AlbedoTex777_g170438 = staticSwitch693_g170438;
				float3 lerpResult716_g170438 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170438).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170438 = lerpResult716_g170438;
				TEXTURE2D(Texture276_g170441) = _ThirdShaderTex;
				float localFilterTexture30_g170457 = ( 0.0 );
				SamplerState SS30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170457 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170457 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170457 = SamplerDefault30_g170457;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170457 = SamplerDefault30_g170457;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170457 = SamplerPoint30_g170457;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170457 = SamplerLow30_g170457;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170457 = SamplerMedium30_g170457;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170457 = SamplerHigh30_g170457;
				#endif
				}
				SamplerState Sampler276_g170441 = SS30_g170457;
				float4 temp_output_37_0_g170441 = Local_LayerCoords790_g170438;
				half4 Coords276_g170441 = temp_output_37_0_g170441;
				half2 TexCoord276_g170441 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170441 = SampleMain( Texture276_g170441 , Sampler276_g170441 , Coords276_g170441 , TexCoord276_g170441 );
				TEXTURE2D(Texture275_g170441) = _ThirdShaderTex;
				SamplerState Sampler275_g170441 = SS30_g170457;
				half4 Coords275_g170441 = temp_output_37_0_g170441;
				half2 TexCoord275_g170441 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170441 = SampleExtra( Texture275_g170441 , Sampler275_g170441 , Coords275_g170441 , TexCoord275_g170441 );
				TEXTURE2D(Texture238_g170441) = _ThirdShaderTex;
				SamplerState Sampler238_g170441 = SS30_g170457;
				half4 Coords238_g170441 = temp_output_37_0_g170441;
				float3 temp_output_279_0_g170441 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170441 = temp_output_279_0_g170441;
				half4 localSamplePlanar2D238_g170441 = SamplePlanar2D( Texture238_g170441 , Sampler238_g170441 , Coords238_g170441 , WorldPosition238_g170441 );
				TEXTURE2D(Texture246_g170441) = _ThirdShaderTex;
				SamplerState Sampler246_g170441 = SS30_g170457;
				half4 Coords246_g170441 = temp_output_37_0_g170441;
				half3 WorldPosition246_g170441 = temp_output_279_0_g170441;
				float3 temp_output_280_0_g170441 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170441 = temp_output_280_0_g170441;
				half4 localSamplePlanar3D246_g170441 = SamplePlanar3D( Texture246_g170441 , Sampler246_g170441 , Coords246_g170441 , WorldPosition246_g170441 , WorldNormal246_g170441 );
				TEXTURE2D(Texture234_g170441) = _ThirdShaderTex;
				SamplerState Sampler234_g170441 = SS30_g170457;
				float4 Coords234_g170441 = temp_output_37_0_g170441;
				float3 WorldPosition234_g170441 = temp_output_279_0_g170441;
				float4 localSampleStochastic2D234_g170441 = SampleStochastic2D( Texture234_g170441 , Sampler234_g170441 , Coords234_g170441 , WorldPosition234_g170441 );
				TEXTURE2D(Texture263_g170441) = _ThirdShaderTex;
				SamplerState Sampler263_g170441 = SS30_g170457;
				half4 Coords263_g170441 = temp_output_37_0_g170441;
				half3 WorldPosition263_g170441 = temp_output_279_0_g170441;
				half3 WorldNormal263_g170441 = temp_output_280_0_g170441;
				half4 localSampleStochastic3D263_g170441 = SampleStochastic3D( Texture263_g170441 , Sampler263_g170441 , Coords263_g170441 , WorldPosition263_g170441 , WorldNormal263_g170441 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170438 = localSampleMain276_g170441;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170438 = localSampleExtra275_g170441;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170438 = localSamplePlanar2D238_g170441;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170438 = localSamplePlanar3D246_g170441;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170438 = localSampleStochastic2D234_g170441;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170438 = localSampleStochastic3D263_g170441;
				#else
				float4 staticSwitch722_g170438 = localSampleMain276_g170441;
				#endif
				half4 Local_ShaderTex775_g170438 = staticSwitch722_g170438;
				float lerpResult739_g170438 = lerp( 1.0 , (Local_ShaderTex775_g170438).y , _ThirdOcclusionValue);
				float4 appendResult749_g170438 = (float4(( (Local_ShaderTex775_g170438).x * _ThirdMetallicValue ) , lerpResult739_g170438 , (Local_ShaderTex775_g170438).z , ( (Local_ShaderTex775_g170438).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170438 = appendResult749_g170438;
				float clampResult17_g170444 = clamp( (Local_Masks750_g170438).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170459 = ( clampResult17_g170444 - temp_output_7_0_g170459 );
				float temp_output_765_0_g170438 = saturate( ( ( temp_output_9_0_g170459 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170438 = temp_output_765_0_g170438;
				float lerpResult705_g170438 = lerp( 1.0 , Local_MultiMask767_g170438 , _ThirdColorMode);
				float4 lerpResult706_g170438 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170438);
				half3 Local_ColorRGB774_g170438 = (lerpResult706_g170438).rgb;
				half3 Local_Albedo768_g170438 = ( Local_AlbedoRGB771_g170438 * Local_ColorRGB774_g170438 );
				float3 lerpResult985_g170438 = lerp( Local_Albedo768_g170438 , ( Visual_Albedo527_g170438 * Local_Albedo768_g170438 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170453) = _ThirdMaskTex;
				SamplerState Sampler276_g170453 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170438 = _third_mask_coord_value;
				float4 temp_output_37_0_g170453 = Local_MaskCoords813_g170438;
				half4 Coords276_g170453 = temp_output_37_0_g170453;
				half2 TexCoord276_g170453 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170453 = SampleMain( Texture276_g170453 , Sampler276_g170453 , Coords276_g170453 , TexCoord276_g170453 );
				TEXTURE2D(Texture275_g170453) = _ThirdMaskTex;
				SamplerState Sampler275_g170453 = sampler_Linear_Repeat;
				half4 Coords275_g170453 = temp_output_37_0_g170453;
				half2 TexCoord275_g170453 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170453 = SampleExtra( Texture275_g170453 , Sampler275_g170453 , Coords275_g170453 , TexCoord275_g170453 );
				TEXTURE2D(Texture238_g170453) = _ThirdMaskTex;
				SamplerState Sampler238_g170453 = sampler_Linear_Repeat;
				half4 Coords238_g170453 = temp_output_37_0_g170453;
				float3 temp_output_279_0_g170453 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170453 = temp_output_279_0_g170453;
				half4 localSamplePlanar2D238_g170453 = SamplePlanar2D( Texture238_g170453 , Sampler238_g170453 , Coords238_g170453 , WorldPosition238_g170453 );
				TEXTURE2D(Texture246_g170453) = _ThirdMaskTex;
				SamplerState Sampler246_g170453 = sampler_Linear_Repeat;
				half4 Coords246_g170453 = temp_output_37_0_g170453;
				half3 WorldPosition246_g170453 = temp_output_279_0_g170453;
				float3 temp_output_280_0_g170453 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170453 = temp_output_280_0_g170453;
				half4 localSamplePlanar3D246_g170453 = SamplePlanar3D( Texture246_g170453 , Sampler246_g170453 , Coords246_g170453 , WorldPosition246_g170453 , WorldNormal246_g170453 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170438 = localSampleMain276_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170438 = localSampleExtra275_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170438 = localSamplePlanar2D238_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170438 = localSamplePlanar3D246_g170453;
				#else
				float4 staticSwitch817_g170438 = localSampleMain276_g170453;
				#endif
				half4 Local_MaskTex861_g170438 = staticSwitch817_g170438;
				float clampResult17_g170461 = clamp( (Local_MaskTex861_g170438).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170465 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170465 = ( clampResult17_g170461 - temp_output_7_0_g170465 );
				float lerpResult1028_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170465 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170438 = lerpResult1028_g170438;
				half Visual_Luminosity1049_g170438 = Out_Luminosity4_g170446;
				float clampResult17_g170470 = clamp( Visual_Luminosity1049_g170438 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170471 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170471 = ( clampResult17_g170470 - temp_output_7_0_g170471 );
				float lerpResult1040_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170471 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170438 = lerpResult1040_g170438;
				half4 Model_VertexMasks960_g170438 = Out_VertexData15_g170458;
				float4 break961_g170438 = Model_VertexMasks960_g170438;
				float4 break33_g170462 = _third_vert_mode;
				float temp_output_30_0_g170462 = ( break961_g170438.x * break33_g170462.x );
				float temp_output_29_0_g170462 = ( break961_g170438.y * break33_g170462.y );
				float temp_output_31_0_g170462 = ( break961_g170438.z * break33_g170462.z );
				float temp_output_28_0_g170462 = ( temp_output_30_0_g170462 + temp_output_29_0_g170462 + temp_output_31_0_g170462 + ( break961_g170438.w * break33_g170462.w ) );
				float clampResult17_g170460 = clamp( temp_output_28_0_g170462 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170464 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170464 = ( clampResult17_g170460 - temp_output_7_0_g170464 );
				float lerpResult1026_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170464 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170463 = lerpResult1026_g170438;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170463 = ( temp_output_6_0_g170463 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170463 = temp_output_6_0_g170463;
				#endif
				half Blend_VertMask913_g170438 = staticSwitch14_g170463;
				half3 Visual_NormalWS953_g170438 = Out_NormalWS4_g170446;
				float clampResult17_g170466 = clamp( saturate( (Visual_NormalWS953_g170438).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170468 = _ThirdProjRemap.x;
				float temp_output_9_0_g170468 = ( clampResult17_g170466 - temp_output_7_0_g170468 );
				float lerpResult1004_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170468 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170438 = lerpResult1004_g170438;
				TVEGlobalData Data15_g170448 = Data204_g170214;
				float Out_Dummy15_g170448 = 0;
				float4 Out_CoatParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170448 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170448 = Data15_g170448.Dummy;
				Out_CoatParams15_g170448 = Data15_g170448.CoatParams;
				Out_PaintParams15_g170448 = Data15_g170448.PaintParams;
				Out_GlowParams15_g170448 = Data15_g170448.GlowParams;
				Out_AtmoParams15_g170448= Data15_g170448.AtmoParams;
				Out_FadeParams15_g170448= Data15_g170448.FadeParams;
				Out_FormParams15_g170448 = Data15_g170448.FormParams;
				Out_FlowParams15_g170448 = Data15_g170448.FlowParams;
				}
				half4 Global_CoatParams972_g170438 = Out_CoatParams15_g170448;
				float temp_output_6_0_g170472 = (Global_CoatParams972_g170438).y;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170472 = ( temp_output_6_0_g170472 + ( _ThirdElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170472 = temp_output_6_0_g170472;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170438 = staticSwitch14_g170472;
				#else
				float staticSwitch1056_g170438 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170438 = lerp( 1.0 , staticSwitch1056_g170438 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170438 = lerpResult1060_g170438;
				float clampResult17_g170467 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170438 * Blend_LumaMask1046_g170438 * Blend_VertMask913_g170438 * Blend_ProjMask912_g170438 * Blend_GlobalMask968_g170438 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170469 = ( clampResult17_g170467 - temp_output_7_0_g170469 );
				half Detail_Mask412_g170438 = ( saturate( ( ( temp_output_9_0_g170469 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170438 = lerp( Visual_Albedo527_g170438 , lerpResult985_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170438 = lerpResult989_g170438;
				#else
				float3 staticSwitch415_g170438 = Visual_Albedo527_g170438;
				#endif
				half3 Final_Albedo601_g170438 = staticSwitch415_g170438;
				float3 In_Albedo3_g170447 = Final_Albedo601_g170438;
				float3 In_AlbedoRaw3_g170447 = Final_Albedo601_g170438;
				half2 Visual_NormalTS529_g170438 = Out_NormalTS4_g170446;
				float2 lerpResult40_g170449 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170438 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170440) = _ThirdNormalTex;
				float localFilterTexture29_g170456 = ( 0.0 );
				SamplerState SS29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170456 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170456 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170456 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170456 = SamplerDefault29_g170456;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170456 = SamplerDefault29_g170456;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170456 = SamplerPoint29_g170456;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170456 = SamplerLow29_g170456;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170456 = SamplerMedium29_g170456;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170456 = SamplerHigh29_g170456;
				#endif
				}
				SamplerState Sampler276_g170440 = SS29_g170456;
				float4 temp_output_37_0_g170440 = Local_LayerCoords790_g170438;
				half4 Coords276_g170440 = temp_output_37_0_g170440;
				half2 TexCoord276_g170440 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170440 = SampleMain( Texture276_g170440 , Sampler276_g170440 , Coords276_g170440 , TexCoord276_g170440 );
				TEXTURE2D(Texture275_g170440) = _ThirdNormalTex;
				SamplerState Sampler275_g170440 = SS29_g170456;
				half4 Coords275_g170440 = temp_output_37_0_g170440;
				half2 TexCoord275_g170440 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170440 = SampleExtra( Texture275_g170440 , Sampler275_g170440 , Coords275_g170440 , TexCoord275_g170440 );
				TEXTURE2D(Texture238_g170440) = _ThirdNormalTex;
				SamplerState Sampler238_g170440 = SS29_g170456;
				half4 Coords238_g170440 = temp_output_37_0_g170440;
				float3 temp_output_279_0_g170440 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170440 = temp_output_279_0_g170440;
				half4 localSamplePlanar2D238_g170440 = SamplePlanar2D( Texture238_g170440 , Sampler238_g170440 , Coords238_g170440 , WorldPosition238_g170440 );
				TEXTURE2D(Texture246_g170440) = _ThirdNormalTex;
				SamplerState Sampler246_g170440 = SS29_g170456;
				half4 Coords246_g170440 = temp_output_37_0_g170440;
				half3 WorldPosition246_g170440 = temp_output_279_0_g170440;
				float3 temp_output_280_0_g170440 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170440 = temp_output_280_0_g170440;
				half4 localSamplePlanar3D246_g170440 = SamplePlanar3D( Texture246_g170440 , Sampler246_g170440 , Coords246_g170440 , WorldPosition246_g170440 , WorldNormal246_g170440 );
				TEXTURE2D(Texture234_g170440) = _ThirdNormalTex;
				SamplerState Sampler234_g170440 = SS29_g170456;
				float4 Coords234_g170440 = temp_output_37_0_g170440;
				float3 WorldPosition234_g170440 = temp_output_279_0_g170440;
				float4 localSampleStochastic2D234_g170440 = SampleStochastic2D( Texture234_g170440 , Sampler234_g170440 , Coords234_g170440 , WorldPosition234_g170440 );
				TEXTURE2D(Texture263_g170440) = _ThirdNormalTex;
				SamplerState Sampler263_g170440 = SS29_g170456;
				half4 Coords263_g170440 = temp_output_37_0_g170440;
				half3 WorldPosition263_g170440 = temp_output_279_0_g170440;
				half3 WorldNormal263_g170440 = temp_output_280_0_g170440;
				half4 localSampleStochastic3D263_g170440 = SampleStochastic3D( Texture263_g170440 , Sampler263_g170440 , Coords263_g170440 , WorldPosition263_g170440 , WorldNormal263_g170440 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170438 = localSampleMain276_g170440;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170438 = localSampleExtra275_g170440;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170438 = localSamplePlanar2D238_g170440;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170438 = localSamplePlanar3D246_g170440;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170438 = localSampleStochastic2D234_g170440;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170438 = localSampleStochastic3D263_g170440;
				#else
				float4 staticSwitch698_g170438 = localSampleMain276_g170440;
				#endif
				half4 Local_NormalTex776_g170438 = staticSwitch698_g170438;
				half4 Normal_Packed45_g170442 = Local_NormalTex776_g170438;
				float2 appendResult58_g170442 = (float2(( (Normal_Packed45_g170442).x * (Normal_Packed45_g170442).w ) , (Normal_Packed45_g170442).y));
				half2 Normal_Default50_g170442 = appendResult58_g170442;
				half2 Normal_ASTC41_g170442 = (Normal_Packed45_g170442).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170442 = Normal_ASTC41_g170442;
				#else
				float2 staticSwitch38_g170442 = Normal_Default50_g170442;
				#endif
				half2 Normal_NO_DTX544_g170442 = (Normal_Packed45_g170442).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170442 = Normal_NO_DTX544_g170442;
				#else
				float2 staticSwitch37_g170442 = staticSwitch38_g170442;
				#endif
				float2 temp_output_724_0_g170438 = ( (staticSwitch37_g170442*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170443 = temp_output_724_0_g170438;
				float2 break71_g170443 = Normal_Planar45_g170443;
				float3 appendResult72_g170443 = (float3(break71_g170443.x , 0.0 , break71_g170443.y));
				float2 temp_output_858_0_g170438 = (mul( ase_worldToTangent, appendResult72_g170443 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#else
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#endif
				half2 Local_NormalTS729_g170438 = staticSwitch727_g170438;
				float2 temp_output_36_0_g170449 = ( lerpResult40_g170449 + Local_NormalTS729_g170438 );
				float2 lerpResult405_g170438 = lerp( Visual_NormalTS529_g170438 , temp_output_36_0_g170449 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170438 = lerpResult405_g170438;
				#else
				float2 staticSwitch418_g170438 = Visual_NormalTS529_g170438;
				#endif
				half2 Final_NormalTS612_g170438 = staticSwitch418_g170438;
				float2 In_NormalTS3_g170447 = Final_NormalTS612_g170438;
				float3 appendResult68_g170450 = (float3(Final_NormalTS612_g170438 , 1.0));
				float3 tanNormal74_g170450 = appendResult68_g170450;
				float3 worldNormal74_g170450 = normalize( float3(dot(tanToWorld0,tanNormal74_g170450), dot(tanToWorld1,tanNormal74_g170450), dot(tanToWorld2,tanNormal74_g170450)) );
				half3 Final_NormalWS956_g170438 = worldNormal74_g170450;
				float3 In_NormalWS3_g170447 = Final_NormalWS956_g170438;
				half4 Visual_Shader531_g170438 = Out_Shader4_g170446;
				float4 lerpResult1000_g170438 = lerp( Local_Masks750_g170438 , ( Visual_Shader531_g170438 * Local_Masks750_g170438 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170438 = lerp( Visual_Shader531_g170438 , lerpResult1000_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170438 = lerpResult998_g170438;
				#else
				float4 staticSwitch451_g170438 = Visual_Shader531_g170438;
				#endif
				half4 Final_Masks613_g170438 = staticSwitch451_g170438;
				float4 In_Shader3_g170447 = Final_Masks613_g170438;
				float4 In_Emissive3_g170447 = Out_Emissive4_g170446;
				float3 temp_output_3_0_g170452 = Final_Albedo601_g170438;
				float dotResult20_g170452 = dot( temp_output_3_0_g170452 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170438 = dotResult20_g170452;
				float In_Grayscale3_g170447 = Final_Grayscale615_g170438;
				float clampResult651_g170438 = clamp( saturate( ( Final_Grayscale615_g170438 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170438 = clampResult651_g170438;
				float In_Luminosity3_g170447 = Final_Luminosity652_g170438;
				half Visual_MultiMask547_g170438 = Out_MultiMask4_g170446;
				float lerpResult477_g170438 = lerp( Visual_MultiMask547_g170438 , Local_MultiMask767_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch482_g170438 = lerpResult477_g170438;
				#else
				float staticSwitch482_g170438 = Visual_MultiMask547_g170438;
				#endif
				half Final_MultiMask572_g170438 = staticSwitch482_g170438;
				float In_MultiMask3_g170447 = Final_MultiMask572_g170438;
				half Visual_AlphaClip559_g170438 = Out_AlphaClip4_g170446;
				float temp_output_718_0_g170438 = (Local_AlbedoTex777_g170438).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170438 = ( temp_output_718_0_g170438 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170438 = temp_output_718_0_g170438;
				#endif
				half Local_AlphaClip772_g170438 = staticSwitch924_g170438;
				float lerpResult448_g170438 = lerp( Visual_AlphaClip559_g170438 , Local_AlphaClip772_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch564_g170438 = lerpResult448_g170438;
				#else
				float staticSwitch564_g170438 = Visual_AlphaClip559_g170438;
				#endif
				half Final_AlphaClip602_g170438 = staticSwitch564_g170438;
				float In_AlphaClip3_g170447 = Final_AlphaClip602_g170438;
				half Visual_AlphaFade588_g170438 = Out_AlphaFade4_g170446;
				half Local_AlphaFade773_g170438 = (lerpResult706_g170438).a;
				float lerpResult604_g170438 = lerp( Visual_AlphaFade588_g170438 , Local_AlphaFade773_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch608_g170438 = lerpResult604_g170438;
				#else
				float staticSwitch608_g170438 = Visual_AlphaFade588_g170438;
				#endif
				half Final_AlphaFade611_g170438 = staticSwitch608_g170438;
				float In_AlphaFade3_g170447 = Final_AlphaFade611_g170438;
				float3 In_Translucency3_g170447 = Out_Translucency4_g170446;
				float In_Transmission3_g170447 = Out_Transmission4_g170446;
				float In_Thickness3_g170447 = Out_Thickness4_g170446;
				float In_Diffusion3_g170447 = Out_Diffusion4_g170446;
				{
				Data3_g170447.Dummy = In_Dummy3_g170447;
				Data3_g170447.Albedo = In_Albedo3_g170447;
				Data3_g170447.AlbedoRaw = In_AlbedoRaw3_g170447;
				Data3_g170447.NormalTS = In_NormalTS3_g170447;
				Data3_g170447.NormalWS = In_NormalWS3_g170447;
				Data3_g170447.Shader = In_Shader3_g170447;
				Data3_g170447.Emissive= In_Emissive3_g170447;
				Data3_g170447.MultiMask = In_MultiMask3_g170447;
				Data3_g170447.Grayscale = In_Grayscale3_g170447;
				Data3_g170447.Luminosity = In_Luminosity3_g170447;
				Data3_g170447.AlphaClip = In_AlphaClip3_g170447;
				Data3_g170447.AlphaFade = In_AlphaFade3_g170447;
				Data3_g170447.Translucency = In_Translucency3_g170447;
				Data3_g170447.Transmission = In_Transmission3_g170447;
				Data3_g170447.Thickness = In_Thickness3_g170447;
				Data3_g170447.Diffusion = In_Diffusion3_g170447;
				}
				TVEVisualData Data4_g170545 = Data3_g170447;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				{
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				}
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170552 = Data16_g170201;
				float Out_Dummy15_g170552 = 0;
				float3 Out_PositionWS15_g170552 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170552 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170552 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170552 = float3( 0,0,0 );
				float4 Out_VertexData15_g170552 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170552 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170552 = Data15_g170552.Dummy;
				Out_PositionWS15_g170552 = Data15_g170552.PositionWS;
				Out_PositionWO15_g170552 = Data15_g170552.PositionWO;
				Out_PivotWS15_g170552 = Data15_g170552.PivotWS;
				Out_PivotWO15_g170552 = Data15_g170552.PivotWO;
				Out_NormalWS15_g170552 = Data15_g170552.NormalWS;
				Out_ViewDirWS15_g170552 = Data15_g170552.ViewDirWS;
				Out_VertexData15_g170552 = Data15_g170552.VertexData;
				Out_BoundsData15_g170552 = Data15_g170552.BoundsData;
				}
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170552;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170550 = _occlusion_vert_mode;
				float temp_output_30_0_g170550 = ( break208_g170544.x * break33_g170550.x );
				float temp_output_29_0_g170550 = ( break208_g170544.y * break33_g170550.y );
				float temp_output_31_0_g170550 = ( break208_g170544.z * break33_g170550.z );
				float temp_output_28_0_g170550 = ( temp_output_30_0_g170550 + temp_output_29_0_g170550 + temp_output_31_0_g170550 + ( break208_g170544.w * break33_g170550.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170550;
				float clampResult17_g170548 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170553 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170553 = ( clampResult17_g170548 - temp_output_7_0_g170553 );
				float temp_output_6_0_g170549 = saturate( ( ( temp_output_9_0_g170553 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170549 = ( temp_output_6_0_g170549 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170549 = temp_output_6_0_g170549;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170549;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				{
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				}
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				{
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				}
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170562 = Data16_g170201;
				float Out_Dummy15_g170562 = 0;
				float3 Out_PositionWS15_g170562 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170562 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170562 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170562 = float3( 0,0,0 );
				float4 Out_VertexData15_g170562 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170562 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170562 = Data15_g170562.Dummy;
				Out_PositionWS15_g170562 = Data15_g170562.PositionWS;
				Out_PositionWO15_g170562 = Data15_g170562.PositionWO;
				Out_PivotWS15_g170562 = Data15_g170562.PivotWS;
				Out_PivotWO15_g170562 = Data15_g170562.PivotWO;
				Out_NormalWS15_g170562 = Data15_g170562.NormalWS;
				Out_ViewDirWS15_g170562 = Data15_g170562.ViewDirWS;
				Out_VertexData15_g170562 = Data15_g170562.VertexData;
				Out_BoundsData15_g170562 = Data15_g170562.BoundsData;
				}
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170562;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170563 = _GradientMeshRemap.x;
				float temp_output_9_0_g170563 = ( clampResult17_g170560 - temp_output_7_0_g170563 );
				float temp_output_6_0_g170561 = saturate( ( ( temp_output_9_0_g170563 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170561 = ( temp_output_6_0_g170561 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170561 = temp_output_6_0_g170561;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170561;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				{
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				}
				TVEVisualData Data4_g170566 = Data3_g170557;
				float Out_Dummy4_g170566 = 0;
				float3 Out_Albedo4_g170566 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170566 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170566 = float2( 0,0 );
				float3 Out_NormalWS4_g170566 = float3( 0,0,0 );
				float4 Out_Shader4_g170566 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170566 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170566 = 0;
				float Out_Grayscale4_g170566 = 0;
				float Out_Luminosity4_g170566 = 0;
				float Out_AlphaClip4_g170566 = 0;
				float Out_AlphaFade4_g170566 = 0;
				float3 Out_Translucency4_g170566 = float3( 0,0,0 );
				float Out_Transmission4_g170566 = 0;
				float Out_Thickness4_g170566 = 0;
				float Out_Diffusion4_g170566 = 0;
				{
				Out_Dummy4_g170566 = Data4_g170566.Dummy;
				Out_Albedo4_g170566 = Data4_g170566.Albedo;
				Out_AlbedoRaw4_g170566 = Data4_g170566.AlbedoRaw;
				Out_NormalTS4_g170566 = Data4_g170566.NormalTS;
				Out_NormalWS4_g170566 = Data4_g170566.NormalWS;
				Out_Shader4_g170566 = Data4_g170566.Shader;
				Out_Emissive4_g170566= Data4_g170566.Emissive;
				Out_MultiMask4_g170566 = Data4_g170566.MultiMask;
				Out_Grayscale4_g170566 = Data4_g170566.Grayscale;
				Out_Luminosity4_g170566= Data4_g170566.Luminosity;
				Out_AlphaClip4_g170566 = Data4_g170566.AlphaClip;
				Out_AlphaFade4_g170566 = Data4_g170566.AlphaFade;
				Out_Translucency4_g170566 = Data4_g170566.Translucency;
				Out_Transmission4_g170566 = Data4_g170566.Transmission;
				Out_Thickness4_g170566 = Data4_g170566.Thickness;
				Out_Diffusion4_g170566 = Data4_g170566.Diffusion;
				}
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170566;
				TVEModelData Data15_g170571 = Data16_g170201;
				float Out_Dummy15_g170571 = 0;
				float3 Out_PositionWS15_g170571 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170571 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170571 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170571 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170571 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170571 = float3( 0,0,0 );
				float4 Out_VertexData15_g170571 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170571 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170571 = Data15_g170571.Dummy;
				Out_PositionWS15_g170571 = Data15_g170571.PositionWS;
				Out_PositionWO15_g170571 = Data15_g170571.PositionWO;
				Out_PivotWS15_g170571 = Data15_g170571.PivotWS;
				Out_PivotWO15_g170571 = Data15_g170571.PivotWO;
				Out_NormalWS15_g170571 = Data15_g170571.NormalWS;
				Out_ViewDirWS15_g170571 = Data15_g170571.ViewDirWS;
				Out_VertexData15_g170571 = Data15_g170571.VertexData;
				Out_BoundsData15_g170571 = Data15_g170571.BoundsData;
				}
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170571;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170571;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170568 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170570 = clamp( tex3DNode60_g170568.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170572 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170572 = ( clampResult17_g170570 - temp_output_7_0_g170572 );
				float temp_output_238_0_g170564 = saturate( ( ( temp_output_9_0_g170572 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170566;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170567 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170567 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170567 = Out_NormalTS4_g170566;
				float3 In_NormalWS3_g170567 = Out_NormalWS4_g170566;
				float4 In_Shader3_g170567 = Out_Shader4_g170566;
				float4 In_Emissive3_g170567 = Out_Emissive4_g170566;
				float3 temp_output_3_0_g170565 = Final_Albedo160_g170564;
				float dotResult20_g170565 = dot( temp_output_3_0_g170565 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170564 = dotResult20_g170565;
				float In_Grayscale3_g170567 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170567 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170567 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170567 = Out_AlphaClip4_g170566;
				float In_AlphaFade3_g170567 = Out_AlphaFade4_g170566;
				float3 In_Translucency3_g170567 = Out_Translucency4_g170566;
				float In_Transmission3_g170567 = Out_Transmission4_g170566;
				float In_Thickness3_g170567 = Out_Thickness4_g170566;
				float In_Diffusion3_g170567 = Out_Diffusion4_g170566;
				{
				Data3_g170567.Dummy = In_Dummy3_g170567;
				Data3_g170567.Albedo = In_Albedo3_g170567;
				Data3_g170567.AlbedoRaw = In_AlbedoRaw3_g170567;
				Data3_g170567.NormalTS = In_NormalTS3_g170567;
				Data3_g170567.NormalWS = In_NormalWS3_g170567;
				Data3_g170567.Shader = In_Shader3_g170567;
				Data3_g170567.Emissive= In_Emissive3_g170567;
				Data3_g170567.MultiMask = In_MultiMask3_g170567;
				Data3_g170567.Grayscale = In_Grayscale3_g170567;
				Data3_g170567.Luminosity = In_Luminosity3_g170567;
				Data3_g170567.AlphaClip = In_AlphaClip3_g170567;
				Data3_g170567.AlphaFade = In_AlphaFade3_g170567;
				Data3_g170567.Translucency = In_Translucency3_g170567;
				Data3_g170567.Transmission = In_Transmission3_g170567;
				Data3_g170567.Thickness = In_Thickness3_g170567;
				Data3_g170567.Diffusion = In_Diffusion3_g170567;
				}
				TVEVisualData Data4_g170579 = Data3_g170567;
				float Out_Dummy4_g170579 = 0;
				float3 Out_Albedo4_g170579 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170579 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170579 = float2( 0,0 );
				float3 Out_NormalWS4_g170579 = float3( 0,0,0 );
				float4 Out_Shader4_g170579 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170579 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170579 = 0;
				float Out_Grayscale4_g170579 = 0;
				float Out_Luminosity4_g170579 = 0;
				float Out_AlphaClip4_g170579 = 0;
				float Out_AlphaFade4_g170579 = 0;
				float3 Out_Translucency4_g170579 = float3( 0,0,0 );
				float Out_Transmission4_g170579 = 0;
				float Out_Thickness4_g170579 = 0;
				float Out_Diffusion4_g170579 = 0;
				{
				Out_Dummy4_g170579 = Data4_g170579.Dummy;
				Out_Albedo4_g170579 = Data4_g170579.Albedo;
				Out_AlbedoRaw4_g170579 = Data4_g170579.AlbedoRaw;
				Out_NormalTS4_g170579 = Data4_g170579.NormalTS;
				Out_NormalWS4_g170579 = Data4_g170579.NormalWS;
				Out_Shader4_g170579 = Data4_g170579.Shader;
				Out_Emissive4_g170579= Data4_g170579.Emissive;
				Out_MultiMask4_g170579 = Data4_g170579.MultiMask;
				Out_Grayscale4_g170579 = Data4_g170579.Grayscale;
				Out_Luminosity4_g170579= Data4_g170579.Luminosity;
				Out_AlphaClip4_g170579 = Data4_g170579.AlphaClip;
				Out_AlphaFade4_g170579 = Data4_g170579.AlphaFade;
				Out_Translucency4_g170579 = Data4_g170579.Translucency;
				Out_Transmission4_g170579 = Data4_g170579.Transmission;
				Out_Thickness4_g170579 = Data4_g170579.Thickness;
				Out_Diffusion4_g170579 = Data4_g170579.Diffusion;
				}
				half3 Visual_Albedo139_g170574 = Out_Albedo4_g170579;
				float temp_output_200_12_g170574 = Out_Grayscale4_g170579;
				half Visual_Grayscale150_g170574 = temp_output_200_12_g170574;
				float3 temp_cast_33 = (Visual_Grayscale150_g170574).xxx;
				TVEGlobalData Data15_g170575 = Data204_g170214;
				float Out_Dummy15_g170575 = 0;
				float4 Out_CoatParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170575 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170575 = Data15_g170575.Dummy;
				Out_CoatParams15_g170575 = Data15_g170575.CoatParams;
				Out_PaintParams15_g170575 = Data15_g170575.PaintParams;
				Out_GlowParams15_g170575 = Data15_g170575.GlowParams;
				Out_AtmoParams15_g170575= Data15_g170575.AtmoParams;
				Out_FadeParams15_g170575= Data15_g170575.FadeParams;
				Out_FormParams15_g170575 = Data15_g170575.FormParams;
				Out_FlowParams15_g170575 = Data15_g170575.FlowParams;
				}
				half4 Global_PaintParams209_g170574 = Out_PaintParams15_g170575;
				float4 temp_output_6_0_g170596 = Global_PaintParams209_g170574;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170596 = ( temp_output_6_0_g170596 + ( _TintingElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170596 = temp_output_6_0_g170596;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170574 = staticSwitch14_g170596;
				#else
				float4 staticSwitch283_g170574 = TVE_PaintParams;
				#endif
				float lerpResult412_g170574 = lerp( 1.0 , ( saturate( (staticSwitch283_g170574).w ) * TVE_IsEnabled ) , _TintingGlobalValue);
				half Tinting_GlobalValue285_g170574 = lerpResult412_g170574;
				float3 lerpResult368_g170574 = lerp( Visual_Albedo139_g170574 , temp_cast_33 , ( Tinting_GlobalValue285_g170574 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g170574 = (staticSwitch283_g170574).xyz;
				float temp_output_200_11_g170574 = Out_MultiMask4_g170579;
				half Visual_MultiMask181_g170574 = temp_output_200_11_g170574;
				float lerpResult147_g170574 = lerp( 1.0 , Visual_MultiMask181_g170574 , _TintingMultiValue);
				half Tinting_MutiMask121_g170574 = lerpResult147_g170574;
				half Tinting_TexMask385_g170574 = 1.0;
				float temp_output_200_15_g170574 = Out_Luminosity4_g170579;
				half Visual_Luminosity257_g170574 = temp_output_200_15_g170574;
				float clampResult17_g170586 = clamp( Visual_Luminosity257_g170574 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170591 = _TintingLumaRemap.x;
				float temp_output_9_0_g170591 = ( clampResult17_g170586 - temp_output_7_0_g170591 );
				float lerpResult228_g170574 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170591 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170574 = lerpResult228_g170574;
				TVEModelData Data15_g170580 = Data16_g170201;
				float Out_Dummy15_g170580 = 0;
				float3 Out_PositionWS15_g170580 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170580 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170580 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170580 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170580 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170580 = float3( 0,0,0 );
				float4 Out_VertexData15_g170580 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170580 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170580 = Data15_g170580.Dummy;
				Out_PositionWS15_g170580 = Data15_g170580.PositionWS;
				Out_PositionWO15_g170580 = Data15_g170580.PositionWO;
				Out_PivotWS15_g170580 = Data15_g170580.PivotWS;
				Out_PivotWO15_g170580 = Data15_g170580.PivotWO;
				Out_NormalWS15_g170580 = Data15_g170580.NormalWS;
				Out_ViewDirWS15_g170580 = Data15_g170580.ViewDirWS;
				Out_VertexData15_g170580 = Data15_g170580.VertexData;
				Out_BoundsData15_g170580 = Data15_g170580.BoundsData;
				}
				half4 Model_VertexMasks307_g170574 = Out_VertexData15_g170580;
				float4 break311_g170574 = Model_VertexMasks307_g170574;
				float4 break33_g170583 = _tinting_vert_mode;
				float temp_output_30_0_g170583 = ( break311_g170574.x * break33_g170583.x );
				float temp_output_29_0_g170583 = ( break311_g170574.y * break33_g170583.y );
				float temp_output_31_0_g170583 = ( break311_g170574.z * break33_g170583.z );
				float temp_output_28_0_g170583 = ( temp_output_30_0_g170583 + temp_output_29_0_g170583 + temp_output_31_0_g170583 + ( break311_g170574.w * break33_g170583.w ) );
				float clampResult17_g170585 = clamp( temp_output_28_0_g170583 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170592 = _TintingMeshRemap.x;
				float temp_output_9_0_g170592 = ( clampResult17_g170585 - temp_output_7_0_g170592 );
				float lerpResult370_g170574 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170592 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170587 = lerpResult370_g170574;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170587 = ( temp_output_6_0_g170587 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170587 = temp_output_6_0_g170587;
				#endif
				half Tinting_VertMask309_g170574 = staticSwitch14_g170587;
				half Tinting_NoiseMask213_g170574 = 1.0;
				half Custom_Mask345_g170574 = 1.0;
				float temp_output_7_0_g170595 = _TintingBlendRemap.x;
				float temp_output_9_0_g170595 = ( ( _TintingIntensityValue * Tinting_MutiMask121_g170574 * Tinting_TexMask385_g170574 * Tinting_LumaMask153_g170574 * Tinting_VertMask309_g170574 * Tinting_NoiseMask213_g170574 * Tinting_GlobalValue285_g170574 * Custom_Mask345_g170574 ) - temp_output_7_0_g170595 );
				half Tinting_Mask242_g170574 = ( saturate( ( ( temp_output_9_0_g170595 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170574 = lerp( Visual_Albedo139_g170574 , ( lerpResult368_g170574 * 4.594794 * Tinting_GlobalColor290_g170574 * (_TintingColor).rgb ) , Tinting_Mask242_g170574);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170574 = lerpResult90_g170574;
				#else
				float3 staticSwitch286_g170574 = Visual_Albedo139_g170574;
				#endif
				half3 Final_Albedo97_g170574 = staticSwitch286_g170574;
				float3 In_Albedo3_g170578 = Final_Albedo97_g170574;
				float3 In_AlbedoRaw3_g170578 = Out_AlbedoRaw4_g170579;
				float2 In_NormalTS3_g170578 = Out_NormalTS4_g170579;
				float3 In_NormalWS3_g170578 = Out_NormalWS4_g170579;
				float4 In_Shader3_g170578 = Out_Shader4_g170579;
				float4 In_Emissive3_g170578 = Out_Emissive4_g170579;
				float In_Grayscale3_g170578 = temp_output_200_12_g170574;
				float In_Luminosity3_g170578 = temp_output_200_15_g170574;
				float In_MultiMask3_g170578 = temp_output_200_11_g170574;
				float In_AlphaClip3_g170578 = Out_AlphaClip4_g170579;
				float In_AlphaFade3_g170578 = Out_AlphaFade4_g170579;
				float3 In_Translucency3_g170578 = Out_Translucency4_g170579;
				float In_Transmission3_g170578 = Out_Transmission4_g170579;
				float In_Thickness3_g170578 = Out_Thickness4_g170579;
				float In_Diffusion3_g170578 = Out_Diffusion4_g170579;
				{
				Data3_g170578.Dummy = In_Dummy3_g170578;
				Data3_g170578.Albedo = In_Albedo3_g170578;
				Data3_g170578.AlbedoRaw = In_AlbedoRaw3_g170578;
				Data3_g170578.NormalTS = In_NormalTS3_g170578;
				Data3_g170578.NormalWS = In_NormalWS3_g170578;
				Data3_g170578.Shader = In_Shader3_g170578;
				Data3_g170578.Emissive= In_Emissive3_g170578;
				Data3_g170578.MultiMask = In_MultiMask3_g170578;
				Data3_g170578.Grayscale = In_Grayscale3_g170578;
				Data3_g170578.Luminosity = In_Luminosity3_g170578;
				Data3_g170578.AlphaClip = In_AlphaClip3_g170578;
				Data3_g170578.AlphaFade = In_AlphaFade3_g170578;
				Data3_g170578.Translucency = In_Translucency3_g170578;
				Data3_g170578.Transmission = In_Transmission3_g170578;
				Data3_g170578.Thickness = In_Thickness3_g170578;
				Data3_g170578.Diffusion = In_Diffusion3_g170578;
				}
				TVEVisualData Data4_g170600 = Data3_g170578;
				float Out_Dummy4_g170600 = 0;
				float3 Out_Albedo4_g170600 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170600 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170600 = float2( 0,0 );
				float3 Out_NormalWS4_g170600 = float3( 0,0,0 );
				float4 Out_Shader4_g170600 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170600 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170600 = 0;
				float Out_Grayscale4_g170600 = 0;
				float Out_Luminosity4_g170600 = 0;
				float Out_AlphaClip4_g170600 = 0;
				float Out_AlphaFade4_g170600 = 0;
				float3 Out_Translucency4_g170600 = float3( 0,0,0 );
				float Out_Transmission4_g170600 = 0;
				float Out_Thickness4_g170600 = 0;
				float Out_Diffusion4_g170600 = 0;
				{
				Out_Dummy4_g170600 = Data4_g170600.Dummy;
				Out_Albedo4_g170600 = Data4_g170600.Albedo;
				Out_AlbedoRaw4_g170600 = Data4_g170600.AlbedoRaw;
				Out_NormalTS4_g170600 = Data4_g170600.NormalTS;
				Out_NormalWS4_g170600 = Data4_g170600.NormalWS;
				Out_Shader4_g170600 = Data4_g170600.Shader;
				Out_Emissive4_g170600= Data4_g170600.Emissive;
				Out_MultiMask4_g170600 = Data4_g170600.MultiMask;
				Out_Grayscale4_g170600 = Data4_g170600.Grayscale;
				Out_Luminosity4_g170600= Data4_g170600.Luminosity;
				Out_AlphaClip4_g170600 = Data4_g170600.AlphaClip;
				Out_AlphaFade4_g170600 = Data4_g170600.AlphaFade;
				Out_Translucency4_g170600 = Data4_g170600.Translucency;
				Out_Transmission4_g170600 = Data4_g170600.Transmission;
				Out_Thickness4_g170600 = Data4_g170600.Thickness;
				Out_Diffusion4_g170600 = Data4_g170600.Diffusion;
				}
				half3 Visual_Albedo292_g170598 = Out_Albedo4_g170600;
				float temp_output_280_12_g170598 = Out_Grayscale4_g170600;
				half Visual_Grayscale308_g170598 = temp_output_280_12_g170598;
				float3 temp_cast_34 = (Visual_Grayscale308_g170598).xxx;
				TVEGlobalData Data15_g170599 = Data204_g170214;
				float Out_Dummy15_g170599 = 0;
				float4 Out_CoatParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170599 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170599 = Data15_g170599.Dummy;
				Out_CoatParams15_g170599 = Data15_g170599.CoatParams;
				Out_PaintParams15_g170599 = Data15_g170599.PaintParams;
				Out_GlowParams15_g170599 = Data15_g170599.GlowParams;
				Out_AtmoParams15_g170599= Data15_g170599.AtmoParams;
				Out_FadeParams15_g170599= Data15_g170599.FadeParams;
				Out_FormParams15_g170599 = Data15_g170599.FormParams;
				Out_FlowParams15_g170599 = Data15_g170599.FlowParams;
				}
				half4 Global_AtmoParams314_g170598 = Out_AtmoParams15_g170599;
				float temp_output_6_0_g170619 = (Global_AtmoParams314_g170598).x;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170619 = ( temp_output_6_0_g170619 + ( _DrynessElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170619 = temp_output_6_0_g170619;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170598 = staticSwitch14_g170619;
				#else
				float staticSwitch351_g170598 = TVE_AtmoData.x;
				#endif
				float lerpResult505_g170598 = lerp( 1.0 , ( staticSwitch351_g170598 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalMask352_g170598 = lerpResult505_g170598;
				float3 lerpResult485_g170598 = lerp( Visual_Albedo292_g170598 , temp_cast_34 , ( Dryness_GlobalMask352_g170598 * _DrynessGrayValue ));
				half Dryness_TexMask478_g170598 = 1.0;
				float temp_output_280_11_g170598 = Out_MultiMask4_g170600;
				half Visual_MultiMask310_g170598 = temp_output_280_11_g170598;
				float lerpResult283_g170598 = lerp( 1.0 , Visual_MultiMask310_g170598 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170598 = lerpResult283_g170598;
				float temp_output_280_15_g170598 = Out_Luminosity4_g170600;
				half Visual_Luminosity309_g170598 = temp_output_280_15_g170598;
				float clampResult17_g170610 = clamp( Visual_Luminosity309_g170598 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170615 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170615 = ( clampResult17_g170610 - temp_output_7_0_g170615 );
				float lerpResult295_g170598 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170615 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170598 = lerpResult295_g170598;
				TVEModelData Data15_g170604 = Data16_g170201;
				float Out_Dummy15_g170604 = 0;
				float3 Out_PositionWS15_g170604 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170604 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170604 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170604 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170604 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170604 = float3( 0,0,0 );
				float4 Out_VertexData15_g170604 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170604 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170604 = Data15_g170604.Dummy;
				Out_PositionWS15_g170604 = Data15_g170604.PositionWS;
				Out_PositionWO15_g170604 = Data15_g170604.PositionWO;
				Out_PivotWS15_g170604 = Data15_g170604.PivotWS;
				Out_PivotWO15_g170604 = Data15_g170604.PivotWO;
				Out_NormalWS15_g170604 = Data15_g170604.NormalWS;
				Out_ViewDirWS15_g170604 = Data15_g170604.ViewDirWS;
				Out_VertexData15_g170604 = Data15_g170604.VertexData;
				Out_BoundsData15_g170604 = Data15_g170604.BoundsData;
				}
				half4 Model_VertexMasks386_g170598 = Out_VertexData15_g170604;
				float4 break375_g170598 = Model_VertexMasks386_g170598;
				float4 break33_g170607 = _dryness_vert_mode;
				float temp_output_30_0_g170607 = ( break375_g170598.x * break33_g170607.x );
				float temp_output_29_0_g170607 = ( break375_g170598.y * break33_g170607.y );
				float temp_output_31_0_g170607 = ( break375_g170598.z * break33_g170607.z );
				float temp_output_28_0_g170607 = ( temp_output_30_0_g170607 + temp_output_29_0_g170607 + temp_output_31_0_g170607 + ( break375_g170598.w * break33_g170607.w ) );
				float clampResult17_g170608 = clamp( temp_output_28_0_g170607 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170616 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170616 = ( clampResult17_g170608 - temp_output_7_0_g170616 );
				float lerpResult452_g170598 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170616 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170611 = lerpResult452_g170598;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170611 = ( temp_output_6_0_g170611 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170611 = temp_output_6_0_g170611;
				#endif
				half Dryness_VertMask378_g170598 = staticSwitch14_g170611;
				half Dryness_MaskNoise291_g170598 = 1.0;
				half Custom_Mask411_g170598 = 1.0;
				float temp_output_7_0_g170618 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170618 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170598 * Dryness_MultiMask302_g170598 * Dryness_LumaMask301_g170598 * Dryness_VertMask378_g170598 * Dryness_MaskNoise291_g170598 * Dryness_GlobalMask352_g170598 * Custom_Mask411_g170598 ) - temp_output_7_0_g170618 );
				half Dryness_Mask329_g170598 = saturate( ( ( temp_output_9_0_g170618 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170598 = lerp( Visual_Albedo292_g170598 , ( lerpResult485_g170598 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170598 = lerpResult336_g170598;
				#else
				float3 staticSwitch356_g170598 = Visual_Albedo292_g170598;
				#endif
				half3 Final_Albedo331_g170598 = staticSwitch356_g170598;
				float3 In_Albedo3_g170601 = Final_Albedo331_g170598;
				float3 In_AlbedoRaw3_g170601 = Out_AlbedoRaw4_g170600;
				float2 In_NormalTS3_g170601 = Out_NormalTS4_g170600;
				float3 In_NormalWS3_g170601 = Out_NormalWS4_g170600;
				half4 Visual_Shader415_g170598 = Out_Shader4_g170600;
				float4 break438_g170598 = Visual_Shader415_g170598;
				float4 appendResult439_g170598 = (float4(break438_g170598.x , break438_g170598.y , break438_g170598.z , ( break438_g170598.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170598 = lerp( Visual_Shader415_g170598 , appendResult439_g170598 , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170598 = lerpResult427_g170598;
				#else
				float4 staticSwitch426_g170598 = Visual_Shader415_g170598;
				#endif
				half4 Final_Shader433_g170598 = staticSwitch426_g170598;
				float4 In_Shader3_g170601 = Final_Shader433_g170598;
				float4 In_Emissive3_g170601 = Out_Emissive4_g170600;
				float In_Grayscale3_g170601 = temp_output_280_12_g170598;
				float In_Luminosity3_g170601 = temp_output_280_15_g170598;
				float In_MultiMask3_g170601 = temp_output_280_11_g170598;
				float In_AlphaClip3_g170601 = Out_AlphaClip4_g170600;
				float In_AlphaFade3_g170601 = Out_AlphaFade4_g170600;
				float3 In_Translucency3_g170601 = Out_Translucency4_g170600;
				half Visual_Transmission416_g170598 = Out_Transmission4_g170600;
				float lerpResult421_g170598 = lerp( Visual_Transmission416_g170598 , ( Visual_Transmission416_g170598 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170598 = lerpResult421_g170598;
				#else
				float staticSwitch418_g170598 = Visual_Transmission416_g170598;
				#endif
				half Final_Transmission425_g170598 = staticSwitch418_g170598;
				float In_Transmission3_g170601 = Final_Transmission425_g170598;
				float In_Thickness3_g170601 = Out_Thickness4_g170600;
				float In_Diffusion3_g170601 = Out_Diffusion4_g170600;
				{
				Data3_g170601.Dummy = In_Dummy3_g170601;
				Data3_g170601.Albedo = In_Albedo3_g170601;
				Data3_g170601.AlbedoRaw = In_AlbedoRaw3_g170601;
				Data3_g170601.NormalTS = In_NormalTS3_g170601;
				Data3_g170601.NormalWS = In_NormalWS3_g170601;
				Data3_g170601.Shader = In_Shader3_g170601;
				Data3_g170601.Emissive= In_Emissive3_g170601;
				Data3_g170601.MultiMask = In_MultiMask3_g170601;
				Data3_g170601.Grayscale = In_Grayscale3_g170601;
				Data3_g170601.Luminosity = In_Luminosity3_g170601;
				Data3_g170601.AlphaClip = In_AlphaClip3_g170601;
				Data3_g170601.AlphaFade = In_AlphaFade3_g170601;
				Data3_g170601.Translucency = In_Translucency3_g170601;
				Data3_g170601.Transmission = In_Transmission3_g170601;
				Data3_g170601.Thickness = In_Thickness3_g170601;
				Data3_g170601.Diffusion = In_Diffusion3_g170601;
				}
				TVEVisualData Data4_g170623 = Data3_g170601;
				float Out_Dummy4_g170623 = 0;
				float3 Out_Albedo4_g170623 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170623 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170623 = float2( 0,0 );
				float3 Out_NormalWS4_g170623 = float3( 0,0,0 );
				float4 Out_Shader4_g170623 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170623 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170623 = 0;
				float Out_Grayscale4_g170623 = 0;
				float Out_Luminosity4_g170623 = 0;
				float Out_AlphaClip4_g170623 = 0;
				float Out_AlphaFade4_g170623 = 0;
				float3 Out_Translucency4_g170623 = float3( 0,0,0 );
				float Out_Transmission4_g170623 = 0;
				float Out_Thickness4_g170623 = 0;
				float Out_Diffusion4_g170623 = 0;
				{
				Out_Dummy4_g170623 = Data4_g170623.Dummy;
				Out_Albedo4_g170623 = Data4_g170623.Albedo;
				Out_AlbedoRaw4_g170623 = Data4_g170623.AlbedoRaw;
				Out_NormalTS4_g170623 = Data4_g170623.NormalTS;
				Out_NormalWS4_g170623 = Data4_g170623.NormalWS;
				Out_Shader4_g170623 = Data4_g170623.Shader;
				Out_Emissive4_g170623= Data4_g170623.Emissive;
				Out_MultiMask4_g170623 = Data4_g170623.MultiMask;
				Out_Grayscale4_g170623 = Data4_g170623.Grayscale;
				Out_Luminosity4_g170623= Data4_g170623.Luminosity;
				Out_AlphaClip4_g170623 = Data4_g170623.AlphaClip;
				Out_AlphaFade4_g170623 = Data4_g170623.AlphaFade;
				Out_Translucency4_g170623 = Data4_g170623.Translucency;
				Out_Transmission4_g170623 = Data4_g170623.Transmission;
				Out_Thickness4_g170623 = Data4_g170623.Thickness;
				Out_Diffusion4_g170623 = Data4_g170623.Diffusion;
				}
				half3 Visual_Albedo127_g170622 = Out_Albedo4_g170623;
				float4 vertexToFrag24_g170573 = packedInput.ase_texcoord9;
				half4 Interp_Data4335 = vertexToFrag24_g170573;
				float clampResult208_g170622 = clamp( (Interp_Data4335).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170622 = ( Visual_Albedo127_g170622 + ( ( Visual_Albedo127_g170622 * Visual_Albedo127_g170622 * 200.0 * _motion_highlight_color ) * clampResult208_g170622 ) );
				#else
				float3 staticSwitch214_g170622 = Visual_Albedo127_g170622;
				#endif
				half3 Final_Albedo160_g170622 = staticSwitch214_g170622;
				float3 In_Albedo3_g170624 = Final_Albedo160_g170622;
				float3 In_AlbedoRaw3_g170624 = Out_AlbedoRaw4_g170623;
				float2 In_NormalTS3_g170624 = Out_NormalTS4_g170623;
				float3 In_NormalWS3_g170624 = Out_NormalWS4_g170623;
				float4 In_Shader3_g170624 = Out_Shader4_g170623;
				float4 In_Emissive3_g170624 = Out_Emissive4_g170623;
				float In_Grayscale3_g170624 = Out_Grayscale4_g170623;
				float In_Luminosity3_g170624 = Out_Luminosity4_g170623;
				float In_MultiMask3_g170624 = Out_MultiMask4_g170623;
				float In_AlphaClip3_g170624 = Out_AlphaClip4_g170623;
				float In_AlphaFade3_g170624 = Out_AlphaFade4_g170623;
				float3 In_Translucency3_g170624 = Out_Translucency4_g170623;
				float In_Transmission3_g170624 = Out_Transmission4_g170623;
				float In_Thickness3_g170624 = Out_Thickness4_g170623;
				float In_Diffusion3_g170624 = Out_Diffusion4_g170623;
				{
				Data3_g170624.Dummy = In_Dummy3_g170624;
				Data3_g170624.Albedo = In_Albedo3_g170624;
				Data3_g170624.AlbedoRaw = In_AlbedoRaw3_g170624;
				Data3_g170624.NormalTS = In_NormalTS3_g170624;
				Data3_g170624.NormalWS = In_NormalWS3_g170624;
				Data3_g170624.Shader = In_Shader3_g170624;
				Data3_g170624.Emissive= In_Emissive3_g170624;
				Data3_g170624.MultiMask = In_MultiMask3_g170624;
				Data3_g170624.Grayscale = In_Grayscale3_g170624;
				Data3_g170624.Luminosity = In_Luminosity3_g170624;
				Data3_g170624.AlphaClip = In_AlphaClip3_g170624;
				Data3_g170624.AlphaFade = In_AlphaFade3_g170624;
				Data3_g170624.Translucency = In_Translucency3_g170624;
				Data3_g170624.Transmission = In_Transmission3_g170624;
				Data3_g170624.Thickness = In_Thickness3_g170624;
				Data3_g170624.Diffusion = In_Diffusion3_g170624;
				}
				TVEVisualData Data4_g170626 = Data3_g170624;
				float Out_Dummy4_g170626 = 0;
				float3 Out_Albedo4_g170626 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170626 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170626 = float2( 0,0 );
				float3 Out_NormalWS4_g170626 = float3( 0,0,0 );
				float4 Out_Shader4_g170626 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170626 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170626 = 0;
				float Out_Grayscale4_g170626 = 0;
				float Out_Luminosity4_g170626 = 0;
				float Out_AlphaClip4_g170626 = 0;
				float Out_AlphaFade4_g170626 = 0;
				float3 Out_Translucency4_g170626 = float3( 0,0,0 );
				float Out_Transmission4_g170626 = 0;
				float Out_Thickness4_g170626 = 0;
				float Out_Diffusion4_g170626 = 0;
				{
				Out_Dummy4_g170626 = Data4_g170626.Dummy;
				Out_Albedo4_g170626 = Data4_g170626.Albedo;
				Out_AlbedoRaw4_g170626 = Data4_g170626.AlbedoRaw;
				Out_NormalTS4_g170626 = Data4_g170626.NormalTS;
				Out_NormalWS4_g170626 = Data4_g170626.NormalWS;
				Out_Shader4_g170626 = Data4_g170626.Shader;
				Out_Emissive4_g170626= Data4_g170626.Emissive;
				Out_MultiMask4_g170626 = Data4_g170626.MultiMask;
				Out_Grayscale4_g170626 = Data4_g170626.Grayscale;
				Out_Luminosity4_g170626= Data4_g170626.Luminosity;
				Out_AlphaClip4_g170626 = Data4_g170626.AlphaClip;
				Out_AlphaFade4_g170626 = Data4_g170626.AlphaFade;
				Out_Translucency4_g170626 = Data4_g170626.Translucency;
				Out_Transmission4_g170626 = Data4_g170626.Transmission;
				Out_Thickness4_g170626 = Data4_g170626.Thickness;
				Out_Diffusion4_g170626 = Data4_g170626.Diffusion;
				}
				half3 Visual_Albedo127_g170625 = Out_Albedo4_g170626;
				float3 temp_output_622_0_g170625 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170629) = _OverlayAlbedoTex;
				float localFilterTexture19_g170641 = ( 0.0 );
				SamplerState SS19_g170641 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170641 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170641 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170641 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170641 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170641 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170641 = SamplerDefault19_g170641;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170641 = SamplerDefault19_g170641;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170641 = SamplerPoint19_g170641;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170641 = SamplerLow19_g170641;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170641 = SamplerMedium19_g170641;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170641 = SamplerHigh19_g170641;
				#endif
				}
				SamplerState Sampler238_g170629 = SS19_g170641;
				float4 temp_output_6_0_g170630 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170630 = ( temp_output_6_0_g170630 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170630 = temp_output_6_0_g170630;
				#endif
				half4 Overlay_Coords639_g170625 = staticSwitch14_g170630;
				float4 temp_output_37_0_g170629 = Overlay_Coords639_g170625;
				half4 Coords238_g170629 = temp_output_37_0_g170629;
				TVEModelData Data15_g170643 = Data16_g170201;
				float Out_Dummy15_g170643 = 0;
				float3 Out_PositionWS15_g170643 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170643 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170643 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170643 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170643 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170643 = float3( 0,0,0 );
				float4 Out_VertexData15_g170643 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170643 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170643 = Data15_g170643.Dummy;
				Out_PositionWS15_g170643 = Data15_g170643.PositionWS;
				Out_PositionWO15_g170643 = Data15_g170643.PositionWO;
				Out_PivotWS15_g170643 = Data15_g170643.PivotWS;
				Out_PivotWO15_g170643 = Data15_g170643.PivotWO;
				Out_NormalWS15_g170643 = Data15_g170643.NormalWS;
				Out_ViewDirWS15_g170643 = Data15_g170643.ViewDirWS;
				Out_VertexData15_g170643 = Data15_g170643.VertexData;
				Out_BoundsData15_g170643 = Data15_g170643.BoundsData;
				}
				half3 Model_PositionWO602_g170625 = Out_PositionWO15_g170643;
				float3 temp_output_279_0_g170629 = Model_PositionWO602_g170625;
				half3 WorldPosition238_g170629 = temp_output_279_0_g170629;
				half4 localSamplePlanar2D238_g170629 = SamplePlanar2D( Texture238_g170629 , Sampler238_g170629 , Coords238_g170629 , WorldPosition238_g170629 );
				TEXTURE2D(Texture246_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170629 = SS19_g170641;
				half4 Coords246_g170629 = temp_output_37_0_g170629;
				half3 WorldPosition246_g170629 = temp_output_279_0_g170629;
				half3 Model_NormalWS712_g170625 = Out_NormalWS15_g170643;
				float3 temp_output_280_0_g170629 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170629 = temp_output_280_0_g170629;
				half4 localSamplePlanar3D246_g170629 = SamplePlanar3D( Texture246_g170629 , Sampler246_g170629 , Coords246_g170629 , WorldPosition246_g170629 , WorldNormal246_g170629 );
				TEXTURE2D(Texture234_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170629 = SS19_g170641;
				float4 Coords234_g170629 = temp_output_37_0_g170629;
				float3 WorldPosition234_g170629 = temp_output_279_0_g170629;
				float4 localSampleStochastic2D234_g170629 = SampleStochastic2D( Texture234_g170629 , Sampler234_g170629 , Coords234_g170629 , WorldPosition234_g170629 );
				TEXTURE2D(Texture263_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170629 = SS19_g170641;
				half4 Coords263_g170629 = temp_output_37_0_g170629;
				half3 WorldPosition263_g170629 = temp_output_279_0_g170629;
				half3 WorldNormal263_g170629 = temp_output_280_0_g170629;
				half4 localSampleStochastic3D263_g170629 = SampleStochastic3D( Texture263_g170629 , Sampler263_g170629 , Coords263_g170629 , WorldPosition263_g170629 , WorldNormal263_g170629 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170625 = localSamplePlanar2D238_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170625 = localSamplePlanar3D246_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170625 = localSampleStochastic2D234_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170625 = localSampleStochastic3D263_g170629;
				#else
				float4 staticSwitch676_g170625 = localSamplePlanar2D238_g170629;
				#endif
				half3 Overlay_Albedo526_g170625 = (staticSwitch676_g170625).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170625 = ( temp_output_622_0_g170625 * Overlay_Albedo526_g170625 );
				#else
				float3 staticSwitch578_g170625 = temp_output_622_0_g170625;
				#endif
				float3 temp_output_6_0_g170644 = staticSwitch578_g170625;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170644 = ( temp_output_6_0_g170644 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170644 = temp_output_6_0_g170644;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				TEXTURE2D(Texture246_g170633) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170633 = sampler_Linear_Repeat;
				float4 appendResult863_g170625 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170633 = appendResult863_g170625;
				half4 Coords246_g170633 = temp_output_37_0_g170633;
				float3 temp_output_279_0_g170633 = Model_PositionWO602_g170625;
				half3 WorldPosition246_g170633 = temp_output_279_0_g170633;
				float3 temp_output_280_0_g170633 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170633 = temp_output_280_0_g170633;
				half4 localSamplePlanar3D246_g170633 = SamplePlanar3D( Texture246_g170633 , Sampler246_g170633 , Coords246_g170633 , WorldPosition246_g170633 , WorldNormal246_g170633 );
				half Overlay_GlitterTex854_g170625 = (localSamplePlanar3D246_g170633).x;
				half3 Model_PositionWS879_g170625 = Out_PositionWS15_g170643;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170625 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170625 * 1.0 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170625 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170625 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170625 = staticSwitch868_g170625;
				half Overlay_TexMask908_g170625 = 1.0;
				float3 temp_output_739_21_g170625 = Out_NormalWS4_g170626;
				half3 Visual_NormalWS749_g170625 = temp_output_739_21_g170625;
				float clampResult17_g170650 = clamp( saturate( (Visual_NormalWS749_g170625).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170654 = _OverlayProjRemap.x;
				float temp_output_9_0_g170654 = ( clampResult17_g170650 - temp_output_7_0_g170654 );
				float lerpResult842_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170654 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170625 = lerpResult842_g170625;
				float temp_output_739_15_g170625 = Out_Luminosity4_g170626;
				half Visual_Luminosity654_g170625 = temp_output_739_15_g170625;
				float clampResult17_g170658 = clamp( Visual_Luminosity654_g170625 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170659 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170659 = ( clampResult17_g170658 - temp_output_7_0_g170659 );
				float lerpResult587_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170659 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170625 = lerpResult587_g170625;
				half4 Model_VertexMasks791_g170625 = Out_VertexData15_g170643;
				float4 break792_g170625 = Model_VertexMasks791_g170625;
				float4 break33_g170645 = _overlay_vert_mode;
				float temp_output_30_0_g170645 = ( break792_g170625.x * break33_g170645.x );
				float temp_output_29_0_g170645 = ( break792_g170625.y * break33_g170645.y );
				float temp_output_31_0_g170645 = ( break792_g170625.z * break33_g170645.z );
				float temp_output_28_0_g170645 = ( temp_output_30_0_g170645 + temp_output_29_0_g170645 + temp_output_31_0_g170645 + ( break792_g170625.w * break33_g170645.w ) );
				float clampResult17_g170646 = clamp( temp_output_28_0_g170645 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170655 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170655 = ( clampResult17_g170646 - temp_output_7_0_g170655 );
				float lerpResult881_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170655 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170651 = lerpResult881_g170625;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170651 = ( temp_output_6_0_g170651 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170651 = temp_output_6_0_g170651;
				#endif
				half Overlay_VertMask801_g170625 = staticSwitch14_g170651;
				half Overlay_MaskNoise427_g170625 = 1.0;
				TVEGlobalData Data15_g170627 = Data204_g170214;
				float Out_Dummy15_g170627 = 0;
				float4 Out_CoatParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170627 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170627 = Data15_g170627.Dummy;
				Out_CoatParams15_g170627 = Data15_g170627.CoatParams;
				Out_PaintParams15_g170627 = Data15_g170627.PaintParams;
				Out_GlowParams15_g170627 = Data15_g170627.GlowParams;
				Out_AtmoParams15_g170627= Data15_g170627.AtmoParams;
				Out_FadeParams15_g170627= Data15_g170627.FadeParams;
				Out_FormParams15_g170627 = Data15_g170627.FormParams;
				Out_FlowParams15_g170627 = Data15_g170627.FlowParams;
				}
				half4 Global_AtmoParams516_g170625 = Out_AtmoParams15_g170627;
				float temp_output_6_0_g170660 = (Global_AtmoParams516_g170625).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170660 = ( temp_output_6_0_g170660 + ( _OverlayElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170660 = temp_output_6_0_g170660;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170625 = staticSwitch14_g170660;
				#else
				float staticSwitch705_g170625 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170625 = lerp( 1.0 , ( staticSwitch705_g170625 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170625 = lerpResult937_g170625;
				half Custom_Mask646_g170625 = 1.0;
				float temp_output_7_0_g170657 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170657 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170625 * Overlay_MaskProj457_g170625 * Overlay_MaskLuma438_g170625 * Overlay_VertMask801_g170625 * Overlay_MaskNoise427_g170625 * Overlay_MaskGlobal429_g170625 * Custom_Mask646_g170625 ) - temp_output_7_0_g170657 );
				half Overlay_Mask494_g170625 = saturate( ( ( temp_output_9_0_g170657 / ( _OverlayBlendRemap.y - temp_output_7_0_g170657 ) ) + 0.0001 ) );
				float3 lerpResult467_g170625 = lerp( Visual_Albedo127_g170625 , ( staticSwitch14_g170644 + Overlay_GlitterColor865_g170625 ) , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170625 = lerpResult467_g170625;
				#else
				float3 staticSwitch577_g170625 = Visual_Albedo127_g170625;
				#endif
				half3 Final_Albedo493_g170625 = staticSwitch577_g170625;
				float3 In_Albedo3_g170628 = Final_Albedo493_g170625;
				float3 In_AlbedoRaw3_g170628 = Out_AlbedoRaw4_g170626;
				half2 Visual_NormalTS535_g170625 = Out_NormalTS4_g170626;
				TEXTURE2D(Texture238_g170631) = _OverlayNormalTex;
				float localFilterTexture29_g170642 = ( 0.0 );
				SamplerState SS29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170642 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170642 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170642 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170642 = SamplerDefault29_g170642;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170642 = SamplerDefault29_g170642;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170642 = SamplerPoint29_g170642;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170642 = SamplerLow29_g170642;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170642 = SamplerMedium29_g170642;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170642 = SamplerHigh29_g170642;
				#endif
				}
				SamplerState Sampler238_g170631 = SS29_g170642;
				float4 temp_output_37_0_g170631 = Overlay_Coords639_g170625;
				half4 Coords238_g170631 = temp_output_37_0_g170631;
				float3 temp_output_279_0_g170631 = Model_PositionWO602_g170625;
				half3 WorldPosition238_g170631 = temp_output_279_0_g170631;
				half4 localSamplePlanar2D238_g170631 = SamplePlanar2D( Texture238_g170631 , Sampler238_g170631 , Coords238_g170631 , WorldPosition238_g170631 );
				TEXTURE2D(Texture246_g170631) = _OverlayNormalTex;
				SamplerState Sampler246_g170631 = SS29_g170642;
				half4 Coords246_g170631 = temp_output_37_0_g170631;
				half3 WorldPosition246_g170631 = temp_output_279_0_g170631;
				float3 temp_output_280_0_g170631 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170631 = temp_output_280_0_g170631;
				half4 localSamplePlanar3D246_g170631 = SamplePlanar3D( Texture246_g170631 , Sampler246_g170631 , Coords246_g170631 , WorldPosition246_g170631 , WorldNormal246_g170631 );
				TEXTURE2D(Texture234_g170631) = _OverlayNormalTex;
				SamplerState Sampler234_g170631 = SS29_g170642;
				float4 Coords234_g170631 = temp_output_37_0_g170631;
				float3 WorldPosition234_g170631 = temp_output_279_0_g170631;
				float4 localSampleStochastic2D234_g170631 = SampleStochastic2D( Texture234_g170631 , Sampler234_g170631 , Coords234_g170631 , WorldPosition234_g170631 );
				TEXTURE2D(Texture263_g170631) = _OverlayNormalTex;
				SamplerState Sampler263_g170631 = SS29_g170642;
				half4 Coords263_g170631 = temp_output_37_0_g170631;
				half3 WorldPosition263_g170631 = temp_output_279_0_g170631;
				half3 WorldNormal263_g170631 = temp_output_280_0_g170631;
				half4 localSampleStochastic3D263_g170631 = SampleStochastic3D( Texture263_g170631 , Sampler263_g170631 , Coords263_g170631 , WorldPosition263_g170631 , WorldNormal263_g170631 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170625 = localSamplePlanar2D238_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170625 = localSamplePlanar3D246_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170625 = localSampleStochastic2D234_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170625 = localSampleStochastic3D263_g170631;
				#else
				float4 staticSwitch686_g170625 = localSamplePlanar2D238_g170631;
				#endif
				half4 Normal_Packed45_g170635 = staticSwitch686_g170625;
				float2 appendResult58_g170635 = (float2(( (Normal_Packed45_g170635).x * (Normal_Packed45_g170635).w ) , (Normal_Packed45_g170635).y));
				half2 Normal_Default50_g170635 = appendResult58_g170635;
				half2 Normal_ASTC41_g170635 = (Normal_Packed45_g170635).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170635 = Normal_ASTC41_g170635;
				#else
				float2 staticSwitch38_g170635 = Normal_Default50_g170635;
				#endif
				half2 Normal_NO_DTX544_g170635 = (Normal_Packed45_g170635).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170635 = Normal_NO_DTX544_g170635;
				#else
				float2 staticSwitch37_g170635 = staticSwitch38_g170635;
				#endif
				half2 Normal_Planar45_g170634 = (staticSwitch37_g170635*2.0 + -1.0);
				float2 break71_g170634 = Normal_Planar45_g170634;
				float3 appendResult72_g170634 = (float3(break71_g170634.x , 0.0 , break71_g170634.y));
				half2 Overlay_Normal528_g170625 = (mul( ase_worldToTangent, appendResult72_g170634 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170625 = Overlay_Normal528_g170625;
				#else
				float2 staticSwitch579_g170625 = Visual_NormalTS535_g170625;
				#endif
				float2 lerpResult551_g170625 = lerp( Visual_NormalTS535_g170625 , ( staticSwitch579_g170625 * _OverlayNormalValue ) , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170625 = lerpResult551_g170625;
				#else
				float2 staticSwitch583_g170625 = Visual_NormalTS535_g170625;
				#endif
				half2 Final_NormalTS499_g170625 = staticSwitch583_g170625;
				float2 In_NormalTS3_g170628 = Final_NormalTS499_g170625;
				float3 In_NormalWS3_g170628 = temp_output_739_21_g170625;
				half4 Visual_Masks536_g170625 = Out_Shader4_g170626;
				float4 appendResult585_g170625 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170625 = lerp( Visual_Masks536_g170625 , appendResult585_g170625 , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170625 = lerpResult584_g170625;
				#else
				float4 staticSwitch586_g170625 = Visual_Masks536_g170625;
				#endif
				half4 Final_Masks482_g170625 = staticSwitch586_g170625;
				float4 In_Shader3_g170628 = Final_Masks482_g170625;
				float4 In_Emissive3_g170628 = Out_Emissive4_g170626;
				float temp_output_739_12_g170625 = Out_Grayscale4_g170626;
				float In_Grayscale3_g170628 = temp_output_739_12_g170625;
				float In_Luminosity3_g170628 = temp_output_739_15_g170625;
				float In_MultiMask3_g170628 = Out_MultiMask4_g170626;
				float In_AlphaClip3_g170628 = Out_AlphaClip4_g170626;
				float In_AlphaFade3_g170628 = Out_AlphaFade4_g170626;
				float3 In_Translucency3_g170628 = Out_Translucency4_g170626;
				half Visual_Transmission699_g170625 = Out_Transmission4_g170626;
				float lerpResult746_g170625 = lerp( Visual_Transmission699_g170625 , ( Visual_Transmission699_g170625 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170625 * Overlay_MaskNoise427_g170625 * Overlay_MaskGlobal429_g170625 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170625 = lerpResult746_g170625;
				#else
				float staticSwitch703_g170625 = Visual_Transmission699_g170625;
				#endif
				half Final_Transmission702_g170625 = staticSwitch703_g170625;
				float In_Transmission3_g170628 = Final_Transmission702_g170625;
				float In_Thickness3_g170628 = Out_Thickness4_g170626;
				float In_Diffusion3_g170628 = Out_Diffusion4_g170626;
				{
				Data3_g170628.Dummy = In_Dummy3_g170628;
				Data3_g170628.Albedo = In_Albedo3_g170628;
				Data3_g170628.AlbedoRaw = In_AlbedoRaw3_g170628;
				Data3_g170628.NormalTS = In_NormalTS3_g170628;
				Data3_g170628.NormalWS = In_NormalWS3_g170628;
				Data3_g170628.Shader = In_Shader3_g170628;
				Data3_g170628.Emissive= In_Emissive3_g170628;
				Data3_g170628.MultiMask = In_MultiMask3_g170628;
				Data3_g170628.Grayscale = In_Grayscale3_g170628;
				Data3_g170628.Luminosity = In_Luminosity3_g170628;
				Data3_g170628.AlphaClip = In_AlphaClip3_g170628;
				Data3_g170628.AlphaFade = In_AlphaFade3_g170628;
				Data3_g170628.Translucency = In_Translucency3_g170628;
				Data3_g170628.Transmission = In_Transmission3_g170628;
				Data3_g170628.Thickness = In_Thickness3_g170628;
				Data3_g170628.Diffusion = In_Diffusion3_g170628;
				}
				TVEVisualData Data4_g170663 = Data3_g170628;
				float Out_Dummy4_g170663 = 0;
				float3 Out_Albedo4_g170663 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170663 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170663 = float2( 0,0 );
				float3 Out_NormalWS4_g170663 = float3( 0,0,0 );
				float4 Out_Shader4_g170663 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170663 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170663 = 0;
				float Out_Grayscale4_g170663 = 0;
				float Out_Luminosity4_g170663 = 0;
				float Out_AlphaClip4_g170663 = 0;
				float Out_AlphaFade4_g170663 = 0;
				float3 Out_Translucency4_g170663 = float3( 0,0,0 );
				float Out_Transmission4_g170663 = 0;
				float Out_Thickness4_g170663 = 0;
				float Out_Diffusion4_g170663 = 0;
				{
				Out_Dummy4_g170663 = Data4_g170663.Dummy;
				Out_Albedo4_g170663 = Data4_g170663.Albedo;
				Out_AlbedoRaw4_g170663 = Data4_g170663.AlbedoRaw;
				Out_NormalTS4_g170663 = Data4_g170663.NormalTS;
				Out_NormalWS4_g170663 = Data4_g170663.NormalWS;
				Out_Shader4_g170663 = Data4_g170663.Shader;
				Out_Emissive4_g170663= Data4_g170663.Emissive;
				Out_MultiMask4_g170663 = Data4_g170663.MultiMask;
				Out_Grayscale4_g170663 = Data4_g170663.Grayscale;
				Out_Luminosity4_g170663= Data4_g170663.Luminosity;
				Out_AlphaClip4_g170663 = Data4_g170663.AlphaClip;
				Out_AlphaFade4_g170663 = Data4_g170663.AlphaFade;
				Out_Translucency4_g170663 = Data4_g170663.Translucency;
				Out_Transmission4_g170663 = Data4_g170663.Transmission;
				Out_Thickness4_g170663 = Data4_g170663.Thickness;
				Out_Diffusion4_g170663 = Data4_g170663.Diffusion;
				}
				half3 Visual_Albedo127_g170662 = Out_Albedo4_g170663;
				TVEGlobalData Data15_g170668 = Data204_g170214;
				float Out_Dummy15_g170668 = 0;
				float4 Out_CoatParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170668 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170668 = Data15_g170668.Dummy;
				Out_CoatParams15_g170668 = Data15_g170668.CoatParams;
				Out_PaintParams15_g170668 = Data15_g170668.PaintParams;
				Out_GlowParams15_g170668 = Data15_g170668.GlowParams;
				Out_AtmoParams15_g170668= Data15_g170668.AtmoParams;
				Out_FadeParams15_g170668= Data15_g170668.FadeParams;
				Out_FormParams15_g170668 = Data15_g170668.FormParams;
				Out_FlowParams15_g170668 = Data15_g170668.FlowParams;
				}
				half4 Global_AtmoParams516_g170662 = Out_AtmoParams15_g170668;
				float4 temp_output_6_0_g170689 = Global_AtmoParams516_g170662;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170689 = ( temp_output_6_0_g170689 + ( _WetnessElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170689 = temp_output_6_0_g170689;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170662 = staticSwitch14_g170689;
				#else
				float4 staticSwitch663_g170662 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170662 = lerp( float2( 1,1 ) , (( staticSwitch663_g170662 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170662 = lerpResult1121_g170662;
				half Global_Wetness429_g170662 = break1123_g170662.x;
				half Wetness_Value1042_g170662 = ( _WetnessIntensityValue * Global_Wetness429_g170662 );
				TVEModelData Data15_g170674 = Data16_g170201;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				}
				half4 Model_VertexData1030_g170662 = Out_VertexData15_g170674;
				float4 break1019_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170677 = _wetness_vert_mode;
				float temp_output_30_0_g170677 = ( break1019_g170662.x * break33_g170677.x );
				float temp_output_29_0_g170677 = ( break1019_g170662.y * break33_g170677.y );
				float temp_output_31_0_g170677 = ( break1019_g170662.z * break33_g170677.z );
				float temp_output_28_0_g170677 = ( temp_output_30_0_g170677 + temp_output_29_0_g170677 + temp_output_31_0_g170677 + ( break1019_g170662.w * break33_g170677.w ) );
				float clampResult17_g170676 = clamp( temp_output_28_0_g170677 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170685 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170685 = ( clampResult17_g170676 - temp_output_7_0_g170685 );
				float lerpResult1026_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170685 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170678 = lerpResult1026_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170678 = ( temp_output_6_0_g170678 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170678 = temp_output_6_0_g170678;
				#endif
				float temp_output_1025_0_g170662 = staticSwitch14_g170678;
				half Wetness_VertMask1024_g170662 = temp_output_1025_0_g170662;
				float temp_output_1043_0_g170662 = ( Wetness_Value1042_g170662 * Wetness_VertMask1024_g170662 );
				half Wetness_Mask866_g170662 = temp_output_1043_0_g170662;
				float4 break1083_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170680 = _wetness_water_vert_mode;
				float temp_output_30_0_g170680 = ( break1083_g170662.x * break33_g170680.x );
				float temp_output_29_0_g170680 = ( break1083_g170662.y * break33_g170680.y );
				float temp_output_31_0_g170680 = ( break1083_g170662.z * break33_g170680.z );
				float temp_output_28_0_g170680 = ( temp_output_30_0_g170680 + temp_output_29_0_g170680 + temp_output_31_0_g170680 + ( break1083_g170662.w * break33_g170680.w ) );
				float clampResult17_g170679 = clamp( temp_output_28_0_g170680 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170686 = ( clampResult17_g170679 - temp_output_7_0_g170686 );
				float lerpResult1089_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170686 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170681 = lerpResult1089_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170681 = ( temp_output_6_0_g170681 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170681 = temp_output_6_0_g170681;
				#endif
				float temp_output_1091_0_g170662 = staticSwitch14_g170681;
				half Water_VertMask1094_g170662 = temp_output_1091_0_g170662;
				half4 Visual_Masks536_g170662 = Out_Shader4_g170663;
				float lerpResult1013_g170662 = lerp( 1.0 , (Visual_Masks536_g170662).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170662 = lerpResult1013_g170662;
				float clampResult17_g170675 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170662 * Water_VertMask1094_g170662 ) - Water_HeightMask782_g170662 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170688 = ( clampResult17_g170675 - temp_output_7_0_g170688 );
				half3 Model_NormalWS798_g170662 = Out_NormalWS15_g170674;
				float temp_output_786_0_g170662 = saturate( (Model_NormalWS798_g170662).y );
				half Wetness_ProjMask790_g170662 = temp_output_786_0_g170662;
				half Water_Mask760_g170662 = ( saturate( ( ( temp_output_9_0_g170688 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170662 );
				float3 lerpResult918_g170662 = lerp( Visual_Albedo127_g170662 , ( Visual_Albedo127_g170662 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170662);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170662 = lerpResult918_g170662;
				#else
				float3 staticSwitch946_g170662 = Visual_Albedo127_g170662;
				#endif
				float3 lerpResult768_g170662 = lerp( staticSwitch946_g170662 , ( staticSwitch946_g170662 * staticSwitch946_g170662 ) , _WetnessContrastValue);
				float3 lerpResult651_g170662 = lerp( Visual_Albedo127_g170662 , lerpResult768_g170662 , Wetness_Mask866_g170662);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170662 = lerpResult651_g170662;
				#else
				float3 staticSwitch577_g170662 = Visual_Albedo127_g170662;
				#endif
				half3 Final_Albedo493_g170662 = staticSwitch577_g170662;
				float3 In_Albedo3_g170664 = Final_Albedo493_g170662;
				float3 In_AlbedoRaw3_g170664 = Out_AlbedoRaw4_g170663;
				half2 Visual_Normal535_g170662 = Out_NormalTS4_g170663;
				float lerpResult877_g170662 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170662 * Water_Mask760_g170662 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170662 = ( Visual_Normal535_g170662 * lerpResult877_g170662 );
				#else
				float2 staticSwitch957_g170662 = Visual_Normal535_g170662;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				TEXTURE2D(Texture238_g170672) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170672 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170662 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170672 = appendResult924_g170662;
				half4 Coords238_g170672 = temp_output_37_0_g170672;
				half3 Model_PositionWO602_g170662 = Out_PositionWO15_g170674;
				float3 temp_output_279_0_g170672 = Model_PositionWO602_g170662;
				half3 WorldPosition238_g170672 = temp_output_279_0_g170672;
				half4 localSamplePlanar2D238_g170672 = SamplePlanar2D( Texture238_g170672 , Sampler238_g170672 , Coords238_g170672 , WorldPosition238_g170672 );
				float4 temp_output_1010_0_g170662 = localSamplePlanar2D238_g170672;
				half2 Rain_DropsNormal919_g170662 = (temp_output_1010_0_g170662).zw;
				float2 temp_output_903_0_g170662 = (Rain_DropsNormal919_g170662*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170662 = (temp_output_1010_0_g170662).xy;
				float2 lerpResult904_g170662 = lerp( temp_output_903_0_g170662 , (Rain_RingsNormal713_g170662*2.0 + -1.0) , ( Water_Mask760_g170662 * Water_Mask760_g170662 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170662 = lerpResult904_g170662;
				#else
				float2 staticSwitch960_g170662 = temp_output_903_0_g170662;
				#endif
				half2 Rain_Drops1002_g170662 = ( staticSwitch960_g170662 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170662 = Out_PositionWS15_g170674;
				half Global_Rain955_g170662 = break1123_g170662.y;
				half Rain_Value1067_g170662 = Global_Rain955_g170662;
				float4 break1097_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170683 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170683 = ( break1097_g170662.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1097_g170662.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1097_g170662.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1097_g170662.w * break33_g170683.w ) );
				float clampResult17_g170682 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170687 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170687 = ( clampResult17_g170682 - temp_output_7_0_g170687 );
				float lerpResult1100_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170687 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170684 = lerpResult1100_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				float temp_output_1101_0_g170662 = staticSwitch14_g170684;
				half Rain_VertMask1108_g170662 = temp_output_1101_0_g170662;
				half Rain_Mask999_g170662 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170662 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170662 * Rain_VertMask1108_g170662 );
				half2 Normal_Planar45_g170671 = ( Rain_Drops1002_g170662 * Rain_Mask999_g170662 * Wetness_ProjMask790_g170662 );
				float2 break71_g170671 = Normal_Planar45_g170671;
				float3 appendResult72_g170671 = (float3(break71_g170671.x , 0.0 , break71_g170671.y));
				half2 Wetness_Normal526_g170662 = (mul( ase_worldToTangent, appendResult72_g170671 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170662 = Wetness_Normal526_g170662;
				#else
				float2 staticSwitch583_g170662 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170662 = ( staticSwitch957_g170662 + staticSwitch583_g170662 );
				#else
				float2 staticSwitch774_g170662 = Visual_Normal535_g170662;
				#endif
				half2 Final_Normal499_g170662 = staticSwitch774_g170662;
				float2 In_NormalTS3_g170664 = Final_Normal499_g170662;
				float3 In_NormalWS3_g170664 = Out_NormalWS4_g170663;
				float4 break658_g170662 = Visual_Masks536_g170662;
				float temp_output_935_0_g170662 = ( Wetness_Mask866_g170662 * _WetnessSmoothnessValue );
				float lerpResult941_g170662 = lerp( temp_output_935_0_g170662 , 2.0 , Water_Mask760_g170662);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170662 = lerpResult941_g170662;
				#else
				float staticSwitch959_g170662 = temp_output_935_0_g170662;
				#endif
				float4 appendResult661_g170662 = (float4(break658_g170662.x , break658_g170662.y , break658_g170662.z , saturate( ( break658_g170662.w + staticSwitch959_g170662 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170662 = appendResult661_g170662;
				#else
				float4 staticSwitch586_g170662 = Visual_Masks536_g170662;
				#endif
				half4 Final_Masks482_g170662 = staticSwitch586_g170662;
				float4 In_Shader3_g170664 = Final_Masks482_g170662;
				float4 In_Emissive3_g170664 = Out_Emissive4_g170663;
				float In_Grayscale3_g170664 = Out_Grayscale4_g170663;
				float In_Luminosity3_g170664 = Out_Luminosity4_g170663;
				float In_MultiMask3_g170664 = Out_MultiMask4_g170663;
				float In_AlphaClip3_g170664 = Out_AlphaClip4_g170663;
				float In_AlphaFade3_g170664 = Out_AlphaFade4_g170663;
				float3 In_Translucency3_g170664 = Out_Translucency4_g170663;
				float In_Transmission3_g170664 = Out_Transmission4_g170663;
				float In_Thickness3_g170664 = Out_Thickness4_g170663;
				float In_Diffusion3_g170664 = Out_Diffusion4_g170663;
				{
				Data3_g170664.Dummy = In_Dummy3_g170664;
				Data3_g170664.Albedo = In_Albedo3_g170664;
				Data3_g170664.AlbedoRaw = In_AlbedoRaw3_g170664;
				Data3_g170664.NormalTS = In_NormalTS3_g170664;
				Data3_g170664.NormalWS = In_NormalWS3_g170664;
				Data3_g170664.Shader = In_Shader3_g170664;
				Data3_g170664.Emissive= In_Emissive3_g170664;
				Data3_g170664.MultiMask = In_MultiMask3_g170664;
				Data3_g170664.Grayscale = In_Grayscale3_g170664;
				Data3_g170664.Luminosity = In_Luminosity3_g170664;
				Data3_g170664.AlphaClip = In_AlphaClip3_g170664;
				Data3_g170664.AlphaFade = In_AlphaFade3_g170664;
				Data3_g170664.Translucency = In_Translucency3_g170664;
				Data3_g170664.Transmission = In_Transmission3_g170664;
				Data3_g170664.Thickness = In_Thickness3_g170664;
				Data3_g170664.Diffusion = In_Diffusion3_g170664;
				}
				TVEVisualData Data4_g170694 = Data3_g170664;
				float Out_Dummy4_g170694 = 0;
				float3 Out_Albedo4_g170694 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170694 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170694 = float2( 0,0 );
				float3 Out_NormalWS4_g170694 = float3( 0,0,0 );
				float4 Out_Shader4_g170694 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170694 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170694 = 0;
				float Out_Grayscale4_g170694 = 0;
				float Out_Luminosity4_g170694 = 0;
				float Out_AlphaClip4_g170694 = 0;
				float Out_AlphaFade4_g170694 = 0;
				float3 Out_Translucency4_g170694 = float3( 0,0,0 );
				float Out_Transmission4_g170694 = 0;
				float Out_Thickness4_g170694 = 0;
				float Out_Diffusion4_g170694 = 0;
				{
				Out_Dummy4_g170694 = Data4_g170694.Dummy;
				Out_Albedo4_g170694 = Data4_g170694.Albedo;
				Out_AlbedoRaw4_g170694 = Data4_g170694.AlbedoRaw;
				Out_NormalTS4_g170694 = Data4_g170694.NormalTS;
				Out_NormalWS4_g170694 = Data4_g170694.NormalWS;
				Out_Shader4_g170694 = Data4_g170694.Shader;
				Out_Emissive4_g170694= Data4_g170694.Emissive;
				Out_MultiMask4_g170694 = Data4_g170694.MultiMask;
				Out_Grayscale4_g170694 = Data4_g170694.Grayscale;
				Out_Luminosity4_g170694= Data4_g170694.Luminosity;
				Out_AlphaClip4_g170694 = Data4_g170694.AlphaClip;
				Out_AlphaFade4_g170694 = Data4_g170694.AlphaFade;
				Out_Translucency4_g170694 = Data4_g170694.Translucency;
				Out_Transmission4_g170694 = Data4_g170694.Transmission;
				Out_Thickness4_g170694 = Data4_g170694.Thickness;
				Out_Diffusion4_g170694 = Data4_g170694.Diffusion;
				}
				float3 In_Albedo3_g170692 = Out_Albedo4_g170694;
				float3 In_AlbedoRaw3_g170692 = Out_AlbedoRaw4_g170694;
				float2 In_NormalTS3_g170692 = Out_NormalTS4_g170694;
				float3 In_NormalWS3_g170692 = Out_NormalWS4_g170694;
				float4 In_Shader3_g170692 = Out_Shader4_g170694;
				float4 In_Emissive3_g170692 = Out_Emissive4_g170694;
				float In_Grayscale3_g170692 = Out_Grayscale4_g170694;
				float In_Luminosity3_g170692 = Out_Luminosity4_g170694;
				float temp_output_836_11_g170691 = Out_MultiMask4_g170694;
				float In_MultiMask3_g170692 = temp_output_836_11_g170691;
				half Visual_AlphaClip667_g170691 = Out_AlphaClip4_g170694;
				half Input_True57_g170701 = Visual_AlphaClip667_g170691;
				half True36_g170701 = Input_True57_g170701;
				TVEGlobalData Data15_g170693 = Data204_g170214;
				float Out_Dummy15_g170693 = 0;
				float4 Out_CoatParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170693 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170693 = Data15_g170693.Dummy;
				Out_CoatParams15_g170693 = Data15_g170693.CoatParams;
				Out_PaintParams15_g170693 = Data15_g170693.PaintParams;
				Out_GlowParams15_g170693 = Data15_g170693.GlowParams;
				Out_AtmoParams15_g170693= Data15_g170693.AtmoParams;
				Out_FadeParams15_g170693= Data15_g170693.FadeParams;
				Out_FormParams15_g170693 = Data15_g170693.FormParams;
				Out_FlowParams15_g170693 = Data15_g170693.FlowParams;
				}
				half4 Global_FadeParams516_g170691 = Out_FadeParams15_g170693;
				float temp_output_6_0_g170704 = saturate( (Global_FadeParams516_g170691).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170704 = ( temp_output_6_0_g170704 + ( _CutoutElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170704 = temp_output_6_0_g170704;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170691 = staticSwitch14_g170704;
				#else
				float staticSwitch663_g170691 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170691 = lerp( 1.0 , ( staticSwitch663_g170691 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170691 = lerpResult843_g170691;
				float lerpResult811_g170691 = lerp( 1.0 , Visual_AlphaClip667_g170691 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170691 = lerpResult811_g170691;
				TVEModelData Data15_g170695 = Data16_g170201;
				float Out_Dummy15_g170695 = 0;
				float3 Out_PositionWS15_g170695 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170695 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170695 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170695 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170695 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170695 = float3( 0,0,0 );
				float4 Out_VertexData15_g170695 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170695 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170695 = Data15_g170695.Dummy;
				Out_PositionWS15_g170695 = Data15_g170695.PositionWS;
				Out_PositionWO15_g170695 = Data15_g170695.PositionWO;
				Out_PivotWS15_g170695 = Data15_g170695.PivotWS;
				Out_PivotWO15_g170695 = Data15_g170695.PivotWO;
				Out_NormalWS15_g170695 = Data15_g170695.NormalWS;
				Out_ViewDirWS15_g170695 = Data15_g170695.ViewDirWS;
				Out_VertexData15_g170695 = Data15_g170695.VertexData;
				Out_BoundsData15_g170695 = Data15_g170695.BoundsData;
				}
				half3 Model_PositionWO602_g170691 = Out_PositionWO15_g170695;
				float4 tex3DNode60_g170698 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170691 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170691 = lerp( 1.0 , tex3DNode60_g170698.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170691 = lerpResult673_g170691;
				half4 Model_VertexMasks752_g170691 = Out_VertexData15_g170695;
				float4 break755_g170691 = Model_VertexMasks752_g170691;
				float4 break33_g170696 = _cutout_vert_mode;
				float temp_output_30_0_g170696 = ( break755_g170691.x * break33_g170696.x );
				float temp_output_29_0_g170696 = ( break755_g170691.y * break33_g170696.y );
				float temp_output_31_0_g170696 = ( break755_g170691.z * break33_g170696.z );
				float temp_output_28_0_g170696 = ( temp_output_30_0_g170696 + temp_output_29_0_g170696 + temp_output_31_0_g170696 + ( break755_g170691.w * break33_g170696.w ) );
				float clampResult17_g170697 = clamp( temp_output_28_0_g170696 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170703 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170703 = ( clampResult17_g170697 - temp_output_7_0_g170703 );
				float lerpResult820_g170691 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170703 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170700 = lerpResult820_g170691;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170700 = ( temp_output_6_0_g170700 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170700 = temp_output_6_0_g170700;
				#endif
				float temp_output_801_0_g170691 = staticSwitch14_g170700;
				half Local_VertMask766_g170691 = temp_output_801_0_g170691;
				half Visual_MultiMask671_g170691 = temp_output_836_11_g170691;
				float lerpResult683_g170691 = lerp( 1.0 , Visual_MultiMask671_g170691 , _CutoutMultiValue);
				half Local_MultiMask685_g170691 = lerpResult683_g170691;
				float lerpResult728_g170691 = lerp( Visual_AlphaClip667_g170691 , min( Visual_AlphaClip667_g170691 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170691 ) - ( Local_AlphaMask814_g170691 * Local_NoiseMask678_g170691 * Local_VertMask766_g170691 ) ) ) ) , Local_MultiMask685_g170691);
				half Local_AlphaClip784_g170691 = lerpResult728_g170691;
				half Input_False58_g170701 = Local_AlphaClip784_g170691;
				half False36_g170701 = Input_False58_g170701;
				half localShadowPassCheck36_g170701 = ShadowPassCheck36_g170701( True36_g170701 , False36_g170701 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170691 = Local_AlphaClip784_g170691;
				#else
				float staticSwitch791_g170691 = localShadowPassCheck36_g170701;
				#endif
				float temp_output_6_0_g170702 = staticSwitch791_g170691;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170702 = ( temp_output_6_0_g170702 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170702 = temp_output_6_0_g170702;
				#endif
				float temp_output_798_0_g170691 = staticSwitch14_g170702;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170691 = temp_output_798_0_g170691;
				#else
				float staticSwitch577_g170691 = Visual_AlphaClip667_g170691;
				#endif
				half Final_AlphaClip795_g170691 = staticSwitch577_g170691;
				float In_AlphaClip3_g170692 = Final_AlphaClip795_g170691;
				float In_AlphaFade3_g170692 = Out_AlphaFade4_g170694;
				float3 In_Translucency3_g170692 = Out_Translucency4_g170694;
				float In_Transmission3_g170692 = Out_Transmission4_g170694;
				float In_Thickness3_g170692 = Out_Thickness4_g170694;
				float In_Diffusion3_g170692 = Out_Diffusion4_g170694;
				{
				Data3_g170692.Dummy = In_Dummy3_g170692;
				Data3_g170692.Albedo = In_Albedo3_g170692;
				Data3_g170692.AlbedoRaw = In_AlbedoRaw3_g170692;
				Data3_g170692.NormalTS = In_NormalTS3_g170692;
				Data3_g170692.NormalWS = In_NormalWS3_g170692;
				Data3_g170692.Shader = In_Shader3_g170692;
				Data3_g170692.Emissive= In_Emissive3_g170692;
				Data3_g170692.MultiMask = In_MultiMask3_g170692;
				Data3_g170692.Grayscale = In_Grayscale3_g170692;
				Data3_g170692.Luminosity = In_Luminosity3_g170692;
				Data3_g170692.AlphaClip = In_AlphaClip3_g170692;
				Data3_g170692.AlphaFade = In_AlphaFade3_g170692;
				Data3_g170692.Translucency = In_Translucency3_g170692;
				Data3_g170692.Transmission = In_Transmission3_g170692;
				Data3_g170692.Thickness = In_Thickness3_g170692;
				Data3_g170692.Diffusion = In_Diffusion3_g170692;
				}
				TVEVisualData Data4_g170708 = Data3_g170692;
				float Out_Dummy4_g170708 = 0;
				float3 Out_Albedo4_g170708 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170708 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170708 = float2( 0,0 );
				float3 Out_NormalWS4_g170708 = float3( 0,0,0 );
				float4 Out_Shader4_g170708 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170708 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170708 = 0;
				float Out_Grayscale4_g170708 = 0;
				float Out_Luminosity4_g170708 = 0;
				float Out_AlphaClip4_g170708 = 0;
				float Out_AlphaFade4_g170708 = 0;
				float3 Out_Translucency4_g170708 = float3( 0,0,0 );
				float Out_Transmission4_g170708 = 0;
				float Out_Thickness4_g170708 = 0;
				float Out_Diffusion4_g170708 = 0;
				{
				Out_Dummy4_g170708 = Data4_g170708.Dummy;
				Out_Albedo4_g170708 = Data4_g170708.Albedo;
				Out_AlbedoRaw4_g170708 = Data4_g170708.AlbedoRaw;
				Out_NormalTS4_g170708 = Data4_g170708.NormalTS;
				Out_NormalWS4_g170708 = Data4_g170708.NormalWS;
				Out_Shader4_g170708 = Data4_g170708.Shader;
				Out_Emissive4_g170708= Data4_g170708.Emissive;
				Out_MultiMask4_g170708 = Data4_g170708.MultiMask;
				Out_Grayscale4_g170708 = Data4_g170708.Grayscale;
				Out_Luminosity4_g170708= Data4_g170708.Luminosity;
				Out_AlphaClip4_g170708 = Data4_g170708.AlphaClip;
				Out_AlphaFade4_g170708 = Data4_g170708.AlphaFade;
				Out_Translucency4_g170708 = Data4_g170708.Translucency;
				Out_Transmission4_g170708 = Data4_g170708.Transmission;
				Out_Thickness4_g170708 = Data4_g170708.Thickness;
				Out_Diffusion4_g170708 = Data4_g170708.Diffusion;
				}
				float3 In_Albedo3_g170709 = Out_Albedo4_g170708;
				float3 In_AlbedoRaw3_g170709 = Out_AlbedoRaw4_g170708;
				float2 In_NormalTS3_g170709 = Out_NormalTS4_g170708;
				float3 In_NormalWS3_g170709 = Out_NormalWS4_g170708;
				float4 In_Shader3_g170709 = Out_Shader4_g170708;
				float4 In_Emissive3_g170709 = Out_Emissive4_g170708;
				float In_Grayscale3_g170709 = Out_Grayscale4_g170708;
				float In_Luminosity3_g170709 = Out_Luminosity4_g170708;
				float temp_output_821_11_g170706 = Out_MultiMask4_g170708;
				float In_MultiMask3_g170709 = temp_output_821_11_g170706;
				half Visual_AlphaClip754_g170706 = Out_AlphaClip4_g170708;
				half Input_True57_g170711 = Visual_AlphaClip754_g170706;
				half True36_g170711 = Input_True57_g170711;
				half Dither_Constant768_g170706 = _DitherConstantValue;
				float3 ase_positionWS = packedInput.ase_texcoord10.xyz;
				half Dither_BiasProximity881_g170706 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170706 = TVE_DitherParams.w;
				float lerpResult884_g170706 = lerp( 1.0 , Dither_BiasProximity881_g170706 , Dither_BiasEnabled883_g170706);
				float temp_output_7_0_g170717 = _DitherProximityMaxValue;
				float temp_output_9_0_g170717 = ( ( distance( ase_positionWS , _WorldSpaceCameraPos ) * lerpResult884_g170706 ) - temp_output_7_0_g170717 );
				half Dither_Proximity767_g170706 = ( saturate( ( ( temp_output_9_0_g170717 / ( _DitherProximityMinValue - temp_output_7_0_g170717 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170710 = Data16_g170201;
				float Out_Dummy15_g170710 = 0;
				float3 Out_PositionWS15_g170710 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170710 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170710 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170710 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170710 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170710 = float3( 0,0,0 );
				float4 Out_VertexData15_g170710 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170710 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170710 = Data15_g170710.Dummy;
				Out_PositionWS15_g170710 = Data15_g170710.PositionWS;
				Out_PositionWO15_g170710 = Data15_g170710.PositionWO;
				Out_PivotWS15_g170710 = Data15_g170710.PivotWS;
				Out_PivotWO15_g170710 = Data15_g170710.PivotWO;
				Out_NormalWS15_g170710 = Data15_g170710.NormalWS;
				Out_ViewDirWS15_g170710 = Data15_g170710.ViewDirWS;
				Out_VertexData15_g170710 = Data15_g170710.VertexData;
				Out_BoundsData15_g170710 = Data15_g170710.BoundsData;
				}
				half3 Model_PositionWS776_g170706 = Out_PositionWS15_g170710;
				half Dither_BiasDistance882_g170706 = TVE_DitherParams.z;
				float lerpResult888_g170706 = lerp( 1.0 , Dither_BiasDistance882_g170706 , Dither_BiasEnabled883_g170706);
				float temp_output_7_0_g170718 = _DitherDistanceMinValue;
				float temp_output_9_0_g170718 = ( ( distance( Model_PositionWS776_g170706 , _WorldSpaceCameraPos ) * lerpResult888_g170706 ) - temp_output_7_0_g170718 );
				half Dither_Distance856_g170706 = ( saturate( ( ( temp_output_9_0_g170718 / ( _DitherDistanceMaxValue - temp_output_7_0_g170718 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170706 = Out_ViewDirWS15_g170710;
				float3 normalizeResult792_g170706 = normalize( cross( ddy( ase_positionWS ) , ddx( ase_positionWS ) ) );
				float dotResult778_g170706 = dot( Model_ViewDirWS845_g170706 , normalizeResult792_g170706 );
				half Dither_Glancing784_g170706 = ( saturate( ( ( 1.0 - abs( dotResult778_g170706 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170706 = max( max( max( Dither_Constant768_g170706 , Dither_Proximity767_g170706 ) , Dither_Distance856_g170706 ) , Dither_Glancing784_g170706 );
				half3 Model_PositionWO602_g170706 = Out_PositionWO15_g170710;
				float4 tex3DNode60_g170713 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170706 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170706 = tex3DNode60_g170713.r;
				half Local_MaskNoise678_g170706 = temp_output_809_0_g170706;
				half Visual_MultiMask671_g170706 = temp_output_821_11_g170706;
				float lerpResult683_g170706 = lerp( 1.0 , Visual_MultiMask671_g170706 , _DitherMultiValue);
				half Local_MaskMulti685_g170706 = lerpResult683_g170706;
				half Custom_Mask826_g170706 = 1.0;
				float lerpResult728_g170706 = lerp( Visual_AlphaClip754_g170706 , min( Visual_AlphaClip754_g170706 , ( -0.001 - ( Dither_Value429_g170706 - Local_MaskNoise678_g170706 ) ) ) , ( Local_MaskMulti685_g170706 * Custom_Mask826_g170706 ));
				half Local_AlphaClip834_g170706 = lerpResult728_g170706;
				half Input_False58_g170711 = Local_AlphaClip834_g170706;
				half False36_g170711 = Input_False58_g170711;
				half localShadowPassCheck36_g170711 = ShadowPassCheck36_g170711( True36_g170711 , False36_g170711 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170706 = Local_AlphaClip834_g170706;
				#else
				float staticSwitch831_g170706 = localShadowPassCheck36_g170711;
				#endif
				float temp_output_6_0_g170712 = staticSwitch831_g170706;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170712 = ( temp_output_6_0_g170712 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170712 = temp_output_6_0_g170712;
				#endif
				float temp_output_840_0_g170706 = staticSwitch14_g170712;
				#ifdef TVE_DITHER
				float staticSwitch577_g170706 = temp_output_840_0_g170706;
				#else
				float staticSwitch577_g170706 = Visual_AlphaClip754_g170706;
				#endif
				half Final_AlphaClip493_g170706 = staticSwitch577_g170706;
				float In_AlphaClip3_g170709 = Final_AlphaClip493_g170706;
				float In_AlphaFade3_g170709 = Out_AlphaFade4_g170708;
				float3 In_Translucency3_g170709 = Out_Translucency4_g170708;
				float In_Transmission3_g170709 = Out_Transmission4_g170708;
				float In_Thickness3_g170709 = Out_Thickness4_g170708;
				float In_Diffusion3_g170709 = Out_Diffusion4_g170708;
				{
				Data3_g170709.Dummy = In_Dummy3_g170709;
				Data3_g170709.Albedo = In_Albedo3_g170709;
				Data3_g170709.AlbedoRaw = In_AlbedoRaw3_g170709;
				Data3_g170709.NormalTS = In_NormalTS3_g170709;
				Data3_g170709.NormalWS = In_NormalWS3_g170709;
				Data3_g170709.Shader = In_Shader3_g170709;
				Data3_g170709.Emissive= In_Emissive3_g170709;
				Data3_g170709.MultiMask = In_MultiMask3_g170709;
				Data3_g170709.Grayscale = In_Grayscale3_g170709;
				Data3_g170709.Luminosity = In_Luminosity3_g170709;
				Data3_g170709.AlphaClip = In_AlphaClip3_g170709;
				Data3_g170709.AlphaFade = In_AlphaFade3_g170709;
				Data3_g170709.Translucency = In_Translucency3_g170709;
				Data3_g170709.Transmission = In_Transmission3_g170709;
				Data3_g170709.Thickness = In_Thickness3_g170709;
				Data3_g170709.Diffusion = In_Diffusion3_g170709;
				}
				TVEVisualData Data4_g170731 = Data3_g170709;
				float Out_Dummy4_g170731 = 0;
				float3 Out_Albedo4_g170731 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170731 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170731 = float2( 0,0 );
				float3 Out_NormalWS4_g170731 = float3( 0,0,0 );
				float4 Out_Shader4_g170731 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170731 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170731 = 0;
				float Out_Grayscale4_g170731 = 0;
				float Out_Luminosity4_g170731 = 0;
				float Out_AlphaClip4_g170731 = 0;
				float Out_AlphaFade4_g170731 = 0;
				float3 Out_Translucency4_g170731 = float3( 0,0,0 );
				float Out_Transmission4_g170731 = 0;
				float Out_Thickness4_g170731 = 0;
				float Out_Diffusion4_g170731 = 0;
				{
				Out_Dummy4_g170731 = Data4_g170731.Dummy;
				Out_Albedo4_g170731 = Data4_g170731.Albedo;
				Out_AlbedoRaw4_g170731 = Data4_g170731.AlbedoRaw;
				Out_NormalTS4_g170731 = Data4_g170731.NormalTS;
				Out_NormalWS4_g170731 = Data4_g170731.NormalWS;
				Out_Shader4_g170731 = Data4_g170731.Shader;
				Out_Emissive4_g170731= Data4_g170731.Emissive;
				Out_MultiMask4_g170731 = Data4_g170731.MultiMask;
				Out_Grayscale4_g170731 = Data4_g170731.Grayscale;
				Out_Luminosity4_g170731= Data4_g170731.Luminosity;
				Out_AlphaClip4_g170731 = Data4_g170731.AlphaClip;
				Out_AlphaFade4_g170731 = Data4_g170731.AlphaFade;
				Out_Translucency4_g170731 = Data4_g170731.Translucency;
				Out_Transmission4_g170731 = Data4_g170731.Transmission;
				Out_Thickness4_g170731 = Data4_g170731.Thickness;
				Out_Diffusion4_g170731 = Data4_g170731.Diffusion;
				}
				float3 temp_output_297_0_g170727 = Out_Albedo4_g170731;
				float3 In_Albedo3_g170732 = temp_output_297_0_g170727;
				float3 temp_output_297_23_g170727 = Out_AlbedoRaw4_g170731;
				float3 In_AlbedoRaw3_g170732 = temp_output_297_23_g170727;
				float2 In_NormalTS3_g170732 = Out_NormalTS4_g170731;
				float3 In_NormalWS3_g170732 = Out_NormalWS4_g170731;
				float4 In_Shader3_g170732 = Out_Shader4_g170731;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170727 = Out_Emissive4_g170731;
				TVEModelData Data15_g170733 = Data16_g170201;
				float Out_Dummy15_g170733 = 0;
				float3 Out_PositionWS15_g170733 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170733 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170733 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170733 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170733 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170733 = float3( 0,0,0 );
				float4 Out_VertexData15_g170733 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170733 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170733 = Data15_g170733.Dummy;
				Out_PositionWS15_g170733 = Data15_g170733.PositionWS;
				Out_PositionWO15_g170733 = Data15_g170733.PositionWO;
				Out_PivotWS15_g170733 = Data15_g170733.PivotWS;
				Out_PivotWO15_g170733 = Data15_g170733.PivotWO;
				Out_NormalWS15_g170733 = Data15_g170733.NormalWS;
				Out_ViewDirWS15_g170733 = Data15_g170733.ViewDirWS;
				Out_VertexData15_g170733 = Data15_g170733.VertexData;
				Out_BoundsData15_g170733 = Data15_g170733.BoundsData;
				}
				half4 Model_VertexMasks216_g170727 = Out_VertexData15_g170733;
				float4 break251_g170727 = Model_VertexMasks216_g170727;
				float4 break33_g170738 = _emissive_vert_mode;
				float temp_output_30_0_g170738 = ( break251_g170727.x * break33_g170738.x );
				float temp_output_29_0_g170738 = ( break251_g170727.y * break33_g170738.y );
				float temp_output_31_0_g170738 = ( break251_g170727.z * break33_g170738.z );
				float temp_output_28_0_g170738 = ( temp_output_30_0_g170738 + temp_output_29_0_g170738 + temp_output_31_0_g170738 + ( break251_g170727.w * break33_g170738.w ) );
				float clampResult17_g170737 = clamp( temp_output_28_0_g170738 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170741 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170741 = ( clampResult17_g170737 - temp_output_7_0_g170741 );
				float lerpResult303_g170727 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170741 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170740 = lerpResult303_g170727;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170740 = ( temp_output_6_0_g170740 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170740 = temp_output_6_0_g170740;
				#endif
				half Emissive_MeshMask221_g170727 = staticSwitch14_g170740;
				TEXTURE2D(Texture276_g170729) = _EmissiveMaskTex;
				SamplerState Sampler276_g170729 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170730 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170730 = ( temp_output_6_0_g170730 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170730 = temp_output_6_0_g170730;
				#endif
				half4 Emissive_Coords167_g170727 = staticSwitch14_g170730;
				float4 temp_output_37_0_g170729 = Emissive_Coords167_g170727;
				half4 Coords276_g170729 = temp_output_37_0_g170729;
				half2 TexCoord276_g170729 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170729 = SampleMain( Texture276_g170729 , Sampler276_g170729 , Coords276_g170729 , TexCoord276_g170729 );
				TEXTURE2D(Texture275_g170729) = _EmissiveMaskTex;
				SamplerState Sampler275_g170729 = sampler_Linear_Repeat;
				half4 Coords275_g170729 = temp_output_37_0_g170729;
				half2 TexCoord275_g170729 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170729 = SampleExtra( Texture275_g170729 , Sampler275_g170729 , Coords275_g170729 , TexCoord275_g170729 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170727 = localSampleMain276_g170729;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170727 = localSampleExtra275_g170729;
				#else
				float4 staticSwitch176_g170727 = localSampleMain276_g170729;
				#endif
				half4 Emissive_MaskTex201_g170727 = staticSwitch176_g170727;
				float clampResult17_g170739 = clamp( (Emissive_MaskTex201_g170727).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170742 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170742 = ( clampResult17_g170739 - temp_output_7_0_g170742 );
				float lerpResult302_g170727 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170742 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170727 = lerpResult302_g170727;
				float temp_output_279_0_g170727 = ( Emissive_MeshMask221_g170727 * Emissive_Mask103_g170727 );
				float3 appendResult293_g170727 = (float3(temp_output_279_0_g170727 , temp_output_279_0_g170727 , temp_output_279_0_g170727));
				half3 Local_EmissiveColor278_g170727 = appendResult293_g170727;
				float3 temp_output_316_0_g170727 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170728 = Data204_g170214;
				float Out_Dummy15_g170728 = 0;
				float4 Out_CoatParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170728 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170728 = Data15_g170728.Dummy;
				Out_CoatParams15_g170728 = Data15_g170728.CoatParams;
				Out_PaintParams15_g170728 = Data15_g170728.PaintParams;
				Out_GlowParams15_g170728 = Data15_g170728.GlowParams;
				Out_AtmoParams15_g170728= Data15_g170728.AtmoParams;
				Out_FadeParams15_g170728= Data15_g170728.FadeParams;
				Out_FormParams15_g170728 = Data15_g170728.FormParams;
				Out_FlowParams15_g170728 = Data15_g170728.FlowParams;
				}
				half4 Global_GlowParams179_g170727 = Out_GlowParams15_g170728;
				float3 temp_output_6_0_g170735 = (Global_GlowParams179_g170727).xyz;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170735 = ( temp_output_6_0_g170735 + ( _EmissiveElementMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170735 = temp_output_6_0_g170735;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170727 = staticSwitch14_g170735;
				#else
				float3 staticSwitch228_g170727 = temp_output_316_0_g170727;
				#endif
				float3 lerpResult299_g170727 = lerp( float3( 1,1,1 ) , staticSwitch228_g170727 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170727 = lerpResult299_g170727;
				half3 Visual_AlbedoRaw306_g170727 = temp_output_297_23_g170727;
				float3 lerpResult307_g170727 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170727 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170727 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170727 * lerpResult307_g170727 );
				half3 Emissive_Blend260_g170727 = ( ( (Visual_Emissive255_g170727).xyz * Local_EmissiveColor278_g170727 ) * Local_EmissiveValue88_g170727 );
				float3 temp_output_3_0_g170734 = Emissive_Blend260_g170727;
				float temp_output_15_0_g170734 = _emissive_power_value;
				float3 hdEmission22_g170734 = ASEGetEmissionHDRColor(temp_output_3_0_g170734,temp_output_15_0_g170734,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170727 = temp_output_279_0_g170727;
				float4 appendResult295_g170727 = (float4(hdEmission22_g170734 , Local_EmissiveMask294_g170727));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170727 = appendResult295_g170727;
				#else
				float4 staticSwitch129_g170727 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170727 = staticSwitch129_g170727;
				float4 In_Emissive3_g170732 = Final_Emissive184_g170727;
				float In_Grayscale3_g170732 = Out_Grayscale4_g170731;
				float In_Luminosity3_g170732 = Out_Luminosity4_g170731;
				float temp_output_297_11_g170727 = Out_MultiMask4_g170731;
				float In_MultiMask3_g170732 = temp_output_297_11_g170727;
				float In_AlphaClip3_g170732 = Out_AlphaClip4_g170731;
				float In_AlphaFade3_g170732 = Out_AlphaFade4_g170731;
				float3 In_Translucency3_g170732 = Out_Translucency4_g170731;
				float In_Transmission3_g170732 = Out_Transmission4_g170731;
				float In_Thickness3_g170732 = Out_Thickness4_g170731;
				float In_Diffusion3_g170732 = Out_Diffusion4_g170731;
				{
				Data3_g170732.Dummy = In_Dummy3_g170732;
				Data3_g170732.Albedo = In_Albedo3_g170732;
				Data3_g170732.AlbedoRaw = In_AlbedoRaw3_g170732;
				Data3_g170732.NormalTS = In_NormalTS3_g170732;
				Data3_g170732.NormalWS = In_NormalWS3_g170732;
				Data3_g170732.Shader = In_Shader3_g170732;
				Data3_g170732.Emissive= In_Emissive3_g170732;
				Data3_g170732.MultiMask = In_MultiMask3_g170732;
				Data3_g170732.Grayscale = In_Grayscale3_g170732;
				Data3_g170732.Luminosity = In_Luminosity3_g170732;
				Data3_g170732.AlphaClip = In_AlphaClip3_g170732;
				Data3_g170732.AlphaFade = In_AlphaFade3_g170732;
				Data3_g170732.Translucency = In_Translucency3_g170732;
				Data3_g170732.Transmission = In_Transmission3_g170732;
				Data3_g170732.Thickness = In_Thickness3_g170732;
				Data3_g170732.Diffusion = In_Diffusion3_g170732;
				}
				TVEVisualData Data4_g170763 = Data3_g170732;
				float Out_Dummy4_g170763 = 0;
				float3 Out_Albedo4_g170763 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170763 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170763 = float2( 0,0 );
				float3 Out_NormalWS4_g170763 = float3( 0,0,0 );
				float4 Out_Shader4_g170763 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170763 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170763 = 0;
				float Out_Grayscale4_g170763 = 0;
				float Out_Luminosity4_g170763 = 0;
				float Out_AlphaClip4_g170763 = 0;
				float Out_AlphaFade4_g170763 = 0;
				float3 Out_Translucency4_g170763 = float3( 0,0,0 );
				float Out_Transmission4_g170763 = 0;
				float Out_Thickness4_g170763 = 0;
				float Out_Diffusion4_g170763 = 0;
				{
				Out_Dummy4_g170763 = Data4_g170763.Dummy;
				Out_Albedo4_g170763 = Data4_g170763.Albedo;
				Out_AlbedoRaw4_g170763 = Data4_g170763.AlbedoRaw;
				Out_NormalTS4_g170763 = Data4_g170763.NormalTS;
				Out_NormalWS4_g170763 = Data4_g170763.NormalWS;
				Out_Shader4_g170763 = Data4_g170763.Shader;
				Out_Emissive4_g170763= Data4_g170763.Emissive;
				Out_MultiMask4_g170763 = Data4_g170763.MultiMask;
				Out_Grayscale4_g170763 = Data4_g170763.Grayscale;
				Out_Luminosity4_g170763= Data4_g170763.Luminosity;
				Out_AlphaClip4_g170763 = Data4_g170763.AlphaClip;
				Out_AlphaFade4_g170763 = Data4_g170763.AlphaFade;
				Out_Translucency4_g170763 = Data4_g170763.Translucency;
				Out_Transmission4_g170763 = Data4_g170763.Transmission;
				Out_Thickness4_g170763 = Data4_g170763.Thickness;
				Out_Diffusion4_g170763 = Data4_g170763.Diffusion;
				}
				half3 Visual_Albedo199_g170762 = Out_Albedo4_g170763;
				half3 Final_Albedo312_g170762 = Visual_Albedo199_g170762;
				float3 In_Albedo3_g170764 = Final_Albedo312_g170762;
				float3 In_AlbedoRaw3_g170764 = Out_AlbedoRaw4_g170763;
				float2 In_NormalTS3_g170764 = Out_NormalTS4_g170763;
				float3 In_NormalWS3_g170764 = Out_NormalWS4_g170763;
				float4 In_Shader3_g170764 = Out_Shader4_g170763;
				float4 In_Emissive3_g170764 = Out_Emissive4_g170763;
				float In_Grayscale3_g170764 = Out_Grayscale4_g170763;
				float In_Luminosity3_g170764 = Out_Luminosity4_g170763;
				float temp_output_301_11_g170762 = Out_MultiMask4_g170763;
				float In_MultiMask3_g170764 = temp_output_301_11_g170762;
				float In_AlphaClip3_g170764 = Out_AlphaClip4_g170763;
				float In_AlphaFade3_g170764 = Out_AlphaFade4_g170763;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g170762 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170762 );
				half Visual_Transmission138_g170762 = Out_Transmission4_g170763;
				half Subsurface_Value268_g170762 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170765 = Data204_g170214;
				float Out_Dummy15_g170765 = 0;
				float4 Out_CoatParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170765 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170765 = Data15_g170765.Dummy;
				Out_CoatParams15_g170765 = Data15_g170765.CoatParams;
				Out_PaintParams15_g170765 = Data15_g170765.PaintParams;
				Out_GlowParams15_g170765 = Data15_g170765.GlowParams;
				Out_AtmoParams15_g170765= Data15_g170765.AtmoParams;
				Out_FadeParams15_g170765= Data15_g170765.FadeParams;
				Out_FormParams15_g170765 = Data15_g170765.FormParams;
				Out_FlowParams15_g170765 = Data15_g170765.FlowParams;
				}
				half4 Global_GlowParams373_g170762 = Out_GlowParams15_g170765;
				float temp_output_6_0_g170768 = saturate( (Global_GlowParams373_g170762).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170768 = ( temp_output_6_0_g170768 + ( _SubsurfaceElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170768 = temp_output_6_0_g170768;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170762 = staticSwitch14_g170768;
				#else
				float staticSwitch367_g170762 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g170762 = lerp( 1.0 , staticSwitch367_g170762 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170762 = lerpResult403_g170762;
				half Visual_MultiMask292_g170762 = temp_output_301_11_g170762;
				float lerpResult293_g170762 = lerp( 1.0 , Visual_MultiMask292_g170762 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170762 = lerpResult293_g170762;
				half Custom_Mask363_g170762 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170762 = ( Visual_Transmission138_g170762 * Subsurface_Value268_g170762 * Subsurface_GlobalMask369_g170762 * Subsurface_MultiMask296_g170762 * Custom_Mask363_g170762 );
				#else
				float staticSwitch345_g170762 = 0.0;
				#endif
				half Final_Transmission269_g170762 = staticSwitch345_g170762;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170762 = ( Subsurface_Color264_g170762 * Final_Transmission269_g170762 * 10.0 );
				#else
				float3 staticSwitch348_g170762 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g170762 = staticSwitch348_g170762;
				float3 In_Translucency3_g170764 = Final_Translucency254_g170762;
				float In_Transmission3_g170764 = Final_Transmission269_g170762;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170762 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170762 = 1.0;
				#endif
				half Final_Thickness275_g170762 = staticSwitch351_g170762;
				float In_Thickness3_g170764 = Final_Thickness275_g170762;
				float Final_Diffusion340_g170762 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170764 = Final_Diffusion340_g170762;
				{
				Data3_g170764.Dummy = In_Dummy3_g170764;
				Data3_g170764.Albedo = In_Albedo3_g170764;
				Data3_g170764.AlbedoRaw = In_AlbedoRaw3_g170764;
				Data3_g170764.NormalTS = In_NormalTS3_g170764;
				Data3_g170764.NormalWS = In_NormalWS3_g170764;
				Data3_g170764.Shader = In_Shader3_g170764;
				Data3_g170764.Emissive= In_Emissive3_g170764;
				Data3_g170764.MultiMask = In_MultiMask3_g170764;
				Data3_g170764.Grayscale = In_Grayscale3_g170764;
				Data3_g170764.Luminosity = In_Luminosity3_g170764;
				Data3_g170764.AlphaClip = In_AlphaClip3_g170764;
				Data3_g170764.AlphaFade = In_AlphaFade3_g170764;
				Data3_g170764.Translucency = In_Translucency3_g170764;
				Data3_g170764.Transmission = In_Transmission3_g170764;
				Data3_g170764.Thickness = In_Thickness3_g170764;
				Data3_g170764.Diffusion = In_Diffusion3_g170764;
				}
				TVEVisualData Data4_g170777 = Data3_g170764;
				float Out_Dummy4_g170777 = 0;
				float3 Out_Albedo4_g170777 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170777 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170777 = float2( 0,0 );
				float3 Out_NormalWS4_g170777 = float3( 0,0,0 );
				float4 Out_Shader4_g170777 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170777 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170777 = 0;
				float Out_Grayscale4_g170777 = 0;
				float Out_Luminosity4_g170777 = 0;
				float Out_AlphaClip4_g170777 = 0;
				float Out_AlphaFade4_g170777 = 0;
				float3 Out_Translucency4_g170777 = float3( 0,0,0 );
				float Out_Transmission4_g170777 = 0;
				float Out_Thickness4_g170777 = 0;
				float Out_Diffusion4_g170777 = 0;
				{
				Out_Dummy4_g170777 = Data4_g170777.Dummy;
				Out_Albedo4_g170777 = Data4_g170777.Albedo;
				Out_AlbedoRaw4_g170777 = Data4_g170777.AlbedoRaw;
				Out_NormalTS4_g170777 = Data4_g170777.NormalTS;
				Out_NormalWS4_g170777 = Data4_g170777.NormalWS;
				Out_Shader4_g170777 = Data4_g170777.Shader;
				Out_Emissive4_g170777= Data4_g170777.Emissive;
				Out_MultiMask4_g170777 = Data4_g170777.MultiMask;
				Out_Grayscale4_g170777 = Data4_g170777.Grayscale;
				Out_Luminosity4_g170777= Data4_g170777.Luminosity;
				Out_AlphaClip4_g170777 = Data4_g170777.AlphaClip;
				Out_AlphaFade4_g170777 = Data4_g170777.AlphaFade;
				Out_Translucency4_g170777 = Data4_g170777.Translucency;
				Out_Transmission4_g170777 = Data4_g170777.Transmission;
				Out_Thickness4_g170777 = Data4_g170777.Thickness;
				Out_Diffusion4_g170777 = Data4_g170777.Diffusion;
				}
				half3 Input_Albedo24_g170776 = Out_Albedo4_g170777;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170776 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g170776 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g170776 = staticSwitch22_g170776;
				float4 break24_g170771 = Out_Shader4_g170777;
				half Metallic95_g170771 = break24_g170771.x;
				half Input_Metallic25_g170776 = Metallic95_g170771;
				half OneMinusReflectivity31_g170776 = ( (ColorSpaceDielectricSpec23_g170776).w - ( (ColorSpaceDielectricSpec23_g170776).w * Input_Metallic25_g170776 ) );
				
				float3 appendResult23_g170771 = (float3(Out_NormalTS4_g170777 , 1.0));
				float3 temp_output_13_0_g170775 = appendResult23_g170771;
				float3 temp_output_33_0_g170775 = ( temp_output_13_0_g170775 * _render_normal );
				float3 switchResult12_g170775 = (((isFrontFace>0)?(temp_output_13_0_g170775):(temp_output_33_0_g170775)));
				
				float localCustomAlphaClip21_g170784 = ( 0.0 );
				float temp_output_3_0_g170784 = Out_AlphaClip4_g170777;
				float Alpha21_g170784 = temp_output_3_0_g170784;
				float temp_output_15_0_g170784 = 0.0;
				float Treshold21_g170784 = temp_output_15_0_g170784;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170784 - Treshold21_g170784);
				#endif
				#endif
				}
				
				surfaceDescription.BaseColor = ( Input_Albedo24_g170776 * OneMinusReflectivity31_g170776 );
				surfaceDescription.Normal = switchResult12_g170775;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = 0;
				#endif

				surfaceDescription.Emission = (Out_Emissive4_g170777).xyz;
				surfaceDescription.Smoothness = break24_g170771.w;
				surfaceDescription.Occlusion = break24_g170771.y;
				surfaceDescription.Alpha = saturate( ( Alpha21_g170784 * Out_AlphaFade4_g170777 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = Out_Thickness4_g170777;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = Out_Transmission4_g170777;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = Out_Diffusion4_g170777;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				GetSurfaceAndBuiltinData(surfaceDescription,input, V, posInput, surfaceData, builtinData);
				BSDFData bsdfData = ConvertSurfaceDataToBSDFData(input.positionSS.xy, surfaceData);
				LightTransportData lightTransportData = GetLightTransportData(surfaceData, builtinData, bsdfData);

				float4 res = float4( 0.0, 0.0, 0.0, 1.0 );
				UnityMetaInput metaInput;
				metaInput.Albedo = lightTransportData.diffuseColor.rgb;
				metaInput.Emission = lightTransportData.emissiveColor;

			#ifdef EDITOR_VISUALIZATION
				metaInput.VizUV = packedInput.VizUV;
				metaInput.LightCoord = packedInput.LightCoord;
			#endif
				res = UnityMetaFragment(metaInput);

				return res;
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "ShadowCaster"
			Tags { "LightMode"="ShadowCaster" }

			Cull [_CullMode]
			ZWrite On
			ZClip [_ZClip]
			ZTest LEqual
			ColorMask 0

			HLSLPROGRAM
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19702
			#define ASE_SRP_VERSION 170003
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma multi_compile_fragment _ SHADOWS_SHADOWMASK

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_SHADOWS

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _SecondProjRemap;
			half4 _DrynessLumaRemap;
			float4 _DrynessColor;
			half4 _wetness_water_vert_mode;
			half4 _WetnessWaterMeshRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			half4 _WetnessWaterBlendRemap;
			half4 _TintingBlendRemap;
			half4 _TintingMeshRemap;
			half4 _tinting_vert_mode;
			half4 _object_phase_mode;
			half4 _TintingLumaRemap;
			float4 _TintingColor;
			half4 _wetness_drops_vert_mode;
			half4 _WetnessDropsMeshRemap;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _GradientMeshRemap;
			half4 _WetnessMeshRemap;
			half4 _wetness_vert_mode;
			half4 _MotionBaseMaskRemap;
			half4 _motion_base_proc_mode;
			half4 _motion_tiny_vert_mode;
			half4 _OverlayProjRemap;
			half4 _motion_tiny_proc_mode;
			half4 _MotionSmallMaskRemap;
			half4 _OverlayLumaRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _overlay_coord_value;
			half4 _overlay_vert_mode;
			half4 _OverlayCoordValue;
			half4 _OverlayMeshRemap;
			half4 _OverlayColor;
			half4 _MotionHighlightColor;
			half4 _OverlayBlendRemap;
			half4 _second_vert_mode;
			half4 _DrynessBlendRemap;
			half4 _DrynessMeshRemap;
			half4 _WetnessWaterColor;
			half4 _dryness_vert_mode;
			half4 _motion_base_vert_mode;
			half4 _MotionTinyMaskRemap;
			half4 _GradientColorOne;
			half4 _gradient_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _emissive_coord_value;
			half4 _MainColor;
			half4 _ThirdColorTwo;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _third_coord_value;
			half4 _MainMultiRemap;
			half4 _EmissiveColor;
			half4 _second_coord_value;
			half4 _MainColorTwo;
			half4 _Color;
			half4 _SecondColor;
			half4 _SecondBlendRemap;
			half4 _SecondMultiRemap;
			half4 _SubsurfaceColor;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _SecondMeshRemap;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _SecondLumaRemap;
			half4 _SecondColorTwo;
			half4 _GradientColorTwo;
			half4 _ThirdColor;
			half4 _emissive_vert_mode;
			half4 _occlusion_vert_mode;
			half4 _cutout_vert_mode;
			half4 _CutoutMeshRemap;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _ThirdProjRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdMeshRemap;
			half4 _ThirdMaskCoordValue;
			half4 _third_vert_mode;
			half4 _ThirdLumaRemap;
			half4 _ThirdMaskRemap;
			half4 _SecondCoordValue;
			half4 _third_mask_coord_value;
			half4 _SecondMaskCoordValue;
			half4 _ThirdMultiRemap;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _EmissiveMeshRemap;
			half4 _OverlayGlitterColor;
			half3 _motion_highlight_color;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half _OverlayGlitterIntensityValue;
			half _ThirdBlendAlbedoValue;
			half _DitherGlancingValue;
			half _ThirdIntensityValue;
			half _DitherGlancingAngleValue;
			half _DitherDistanceValue;
			half _DitherDistanceMaxValue;
			half _ThirdMaskValue;
			half _DitherDistanceMinValue;
			half _ThirdLumaValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _DitherProximityMaxValue;
			half _ThirdMeshValue;
			half _DitherConstantValue;
			half _ThirdMeshMode;
			half _CutoutShadowMode;
			half _ThirdProjValue;
			half _ThirdElementMode;
			half _ThirdGlobalValue;
			half _CutoutMultiValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _ThirdNormalValue;
			half _ThirdBlendShaderValue;
			half _ThirdAlphaClipValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _ThirdColorMode;
			half _DitherNoiseTillingValue;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SubsurfaceElementMode;
			half _SubsurfaceIntensityValue;
			half _SecondMeshValue;
			half _SecondMeshMode;
			half _SecondElementMode;
			half _EmissiveExposureValue;
			half _SecondGlobalValue;
			float _emissive_power_value;
			half _SecondBlendIntensityValue;
			half _EmissiveColorMode;
			half _EmissiveGlobalValue;
			half _CutoutNoiseValue;
			half _SecondBlendNormalValue;
			half _SecondNormalValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _ThirdAlbedoValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _ThirdMetallicValue;
			half _DitherMultiValue;
			half _EmissiveElementMode;
			half _CutoutNoiseTillingValue;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _WetnessWaterMeshValue;
			half _WetnessMeshMode;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _WetnessMeshValue;
			half _WetnessGlobalValue;
			half _DrynessLumaValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _OverlaySubsurfaceValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _DrynessGrayValue;
			half _OverlaySmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _OverlayGlobalValue;
			half _MotionHighlightValue;
			half _OverlayElementMode;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _OverlayIntensityValue;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _OverlayGlitterDistValue;
			half _OverlayTextureMode;
			half _OverlayNormalValue;
			half _OverlayGlitterTillingValue;
			half _DrynessGlobalValue;
			half _WetnessWaterBaseValue;
			half _CutoutAlphaValue;
			half _CutoutGlobalValue;
			half _CutoutElementMode;
			half _CutoutIntensityValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _WetnessSmoothnessValue;
			half _WetnessDropsMeshMode;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _WetnessDropsMeshValue;
			half _VariationIntensityValue;
			half _WetnessWaterMeshMode;
			half _VariationMultiValue;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _WetnessDropsDistValue;
			half _TintingIntensityValue;
			half _TintingMultiValue;
			half _WetnessDropsNormalValue;
			half _TintingLumaValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsTillingValue;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _WetnessContrastValue;
			half _DrynessElementMode;
			half _TintingElementMode;
			half _DrynessSmoothnessValue;
			half _SecondAlbedoValue;
			half _SecondLumaValue;
			half _GlobalGlowLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalPivotInfo;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _GlobalGlowPivotValue;
			half _SizeFadeDistMinValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _SizeFadeDistMaxValue;
			half _ObjectCategory;
			half _GlobalAtmoLayerValue;
			half _GlobalFadeLayerValue;
			half _MotionSmallPushValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionSmallMaskMode;
			half _GlobalAtmoPivotValue;
			half _motion_small_mask_mode;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _SizeFadeGlobalValue;
			half _SizeFadeElementMode;
			half _GlobalFlowPivotValue;
			half _GlobalFlowLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _MotionSmallIntensityValue;
			half _MotionTinyIntensityValue;
			half _PerspectiveEnd;
			half _SizeFadeEnd;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _RenderSSR;
			half _IsVersion;
			half _RenderZWrite;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _Cutoff;
			half _PerspectiveCategory;
			half _RenderPriority;
			half _RenderMotion;
			half _SizeFadeCategory;
			half _MotionPushInfo;
			half _MotionElementMode;
			half _MotionWindEnd;
			half _MotionCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _IsSubsurfaceShader;
			half _RenderQueue;
			half _IsGeneralShader;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _HasDefaultTextures;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _RenderShadow;
			half _RenderClip;
			half _RenderFilter;
			half _SecondProjValue;
			half _MotionDistValue;
			half _MotionTinyMaskMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _DetailEnd;
			half _SecondCoordMode;
			half _DetailCategory;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _OcclusionBakeMode;
			half _TintingEnd;
			half _SecondMaskSampleMode;
			half _SecondBakeMode;
			half _SecondMaskValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SubsurfaceThicknessValue;
			half _MainAlphaClipValue;
			half _SecondMaskCoordMode;
			half _MainNormalValue;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainCategory;
			half _MainColorMode;
			half _motion_tiny_mask_mode;
			half _TintingCategory;
			half _DrynessSpace;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseMaskMode;
			half _SubsurfaceEnd;
			half _motion_base_mask_mode;
			half _motion_small_mode;
			half _MotionBasePushValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionTinyNoiseValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionBaseIntensityValue;
			half _DrynessBakeMode;
			half _SubsurfaceDirectValue;
			half _SubsurfaceAmbientValue;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _SubsurfaceNormalValue;
			half _CutoutBakeMode;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceShadowValue;
			half _CutoutEnd;
			half _SubsurfaceAngleValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_SizeFadeParams;
			half4 TVE_FormParams;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			float TVE_FlowLayers[10];
			TEXTURE2D_ARRAY(TVE_FlowBaseTex);
			TEXTURE2D_ARRAY(TVE_FlowNearTex);
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			half4 TVE_AtmoData;
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			half4 TVE_DitherParams;
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_RELATIVE_WORLD_POS
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 FlowParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float4 clipPosV : TEXCOORD0;
				float3 positionRWS : TEXCOORD1;
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half ShadowPassCheck36_g170701( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170711( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout AlphaSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				// refraction ShadowCaster
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                    #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
				float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
				float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);

                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

                #if defined(DEBUG_DISPLAY)
				    #if !defined(SHADER_STAGE_RAY_TRACING)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   #ifdef FRAG_INPUTS_USE_TEXCOORD0
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                       #else
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                       #endif
					   surfaceData.metallic = 0;
				    }
					#endif
                    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                #endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(AlphaSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS output;
				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				TVEModelData Data16_g170761 = (TVEModelData)0;
				float In_Dummy16_g170761 = 0.0;
				TVEModelData Data16_g170745 = (TVEModelData)0;
				half Dummy1575_g170743 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170745 = Dummy1575_g170743;
				TVEModelData Data16_g170721 = (TVEModelData)0;
				float In_Dummy16_g170721 = 0.0;
				TVEModelData Data16_g170491 = (TVEModelData)0;
				half Dummy181_g170474 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170491 = Dummy181_g170474;
				TVEModelData Data16_g170433 = (TVEModelData)0;
				half Dummy181_g170431 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170433 = Dummy181_g170431;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170200 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170200 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170200 = PositionOS131_g170196;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_positionWS;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170200 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170206 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170206 = ( localObjectPosition_UNITY_MATRIX_M14_g170206 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170206 = localObjectPosition_UNITY_MATRIX_M14_g170206;
				#endif
				float3 temp_output_340_7_g170196 = staticSwitch13_g170206;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170208 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170204 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170204;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170208 = PivotOS149_g170196;
				float3 PivotsOnlyWS105_g170208 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170208 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170208 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170208 = ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 );
				#endif
				float3 temp_output_341_7_g170196 = staticSwitch13_g170208;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170200 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170200 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170200 = float3( 0,0,0 );
				float3 In_PivotOS16_g170200 = PivotOS149_g170196;
				float3 In_PivotWS16_g170200 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170200 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170200 = NormalOS134_g170196;
				float3 ase_normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170200 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170200 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170200 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170200 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170200 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170200 = VertexMasks171_g170196;
				float mulTime113_g170203 = _TimeParameters.x * 0.52;
				float lerpResult128_g170203 = lerp( mulTime113_g170203 , ( ( mulTime113_g170203 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170196 = PivotWO133_g170196;
				half Pivot_Position322_g170196 = ( break319_g170196.x + break319_g170196.z );
				float mulTime113_g170202 = _TimeParameters.x * 0.27;
				float lerpResult128_g170202 = lerp( mulTime113_g170202 , ( ( mulTime113_g170202 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170205 = _object_phase_mode;
				float temp_output_30_0_g170205 = ( inputMesh.ase_color.r * break33_g170205.x );
				float temp_output_29_0_g170205 = ( inputMesh.ase_color.g * break33_g170205.y );
				float temp_output_31_0_g170205 = ( inputMesh.ase_color.b * break33_g170205.z );
				float temp_output_28_0_g170205 = ( temp_output_30_0_g170205 + temp_output_29_0_g170205 + temp_output_31_0_g170205 + ( inputMesh.ase_color.a * break33_g170205.w ) );
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170205 + Pivot_Position322_g170196 ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(sin( ( lerpResult128_g170203 + Pivot_Position322_g170196 ) ) , sin( ( lerpResult128_g170202 + Pivot_Position322_g170196 ) ) , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_PhaseData16_g170200 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170200 = BoundsData254_g170196;
				float4 In_RotationData16_g170200 = float4( 0,0,0,0 );
				{
				Data16_g170200.Dummy = In_Dummy16_g170200;
				Data16_g170200.PositionOS = In_PositionOS16_g170200;
				Data16_g170200.PositionWS = In_PositionWS16_g170200;
				Data16_g170200.PositionWO = In_PositionWO16_g170200;
				Data16_g170200.PositionRawOS = In_PositionRawOS16_g170200;
				Data16_g170200.PositionAddOS = In_PositionAddOS16_g170200;
				Data16_g170200.PivotOS = In_PivotOS16_g170200;
				Data16_g170200.PivotWS = In_PivotWS16_g170200;
				Data16_g170200.PivotWO = In_PivotWO16_g170200;
				Data16_g170200.NormalOS = In_NormalOS16_g170200;
				Data16_g170200.NormalWS = In_NormalWS16_g170200;
				Data16_g170200.NormalRawOS = In_NormalRawOS16_g170200;
				Data16_g170200.NormalRawWS = In_NormalRawWS16_g170200;
				Data16_g170200.TangentOS = In_TangentOS16_g170200;
				Data16_g170200.ViewDirWS = In_ViewDirWS16_g170200;
				Data16_g170200.VertexData = In_VertexData16_g170200;
				Data16_g170200.PhaseData = In_PhaseData16_g170200;
				Data16_g170200.BoundsData = In_BoundsData16_g170200;
				Data16_g170200.RotationData = In_RotationData16_g170200;
				}
				TVEModelData Data15_g170371 = Data16_g170200;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_PhaseData15_g170371 = Data15_g170371.PhaseData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_PhaseData16_g170370 = Out_PhaseData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.PhaseData = In_PhaseData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_PhaseData15_g170391 = Data15_g170391.PhaseData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_viewDirSafeWS , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_viewDirSafeWS , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_PhaseData16_g170393 = Out_PhaseData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				{
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.PhaseData = In_PhaseData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				}
				TVEModelData Data15_g170432 = Data16_g170393;
				float Out_Dummy15_g170432 = 0;
				float3 Out_PositionOS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170432 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170432 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170432 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170432 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170432 = float3( 0,0,0 );
				float4 Out_VertexData15_g170432 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170432 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170432 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170432 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_PositionOS15_g170432 = Data15_g170432.PositionOS;
				Out_PositionWS15_g170432 = Data15_g170432.PositionWS;
				Out_PositionWO15_g170432 = Data15_g170432.PositionWO;
				Out_PositionRawOS15_g170432 = Data15_g170432.PositionRawOS;
				Out_PositionAddOS15_g170432 = Data15_g170432.PositionAddOS;
				Out_PivotOS15_g170432 = Data15_g170432.PivotOS;
				Out_PivotWS15_g170432 = Data15_g170432.PivotWS;
				Out_PivotWO15_g170432 = Data15_g170432.PivotWO;
				Out_NormalOS15_g170432 = Data15_g170432.NormalOS;
				Out_NormalWS15_g170432 = Data15_g170432.NormalWS;
				Out_NormalRawOS15_g170432 = Data15_g170432.NormalRawOS;
				Out_NormalRawWS15_g170432 = Data15_g170432.NormalRawWS;
				Out_TangentOS15_g170432 = Data15_g170432.TangentOS;
				Out_ViewDirWS15_g170432 = Data15_g170432.ViewDirWS;
				Out_VertexData15_g170432 = Data15_g170432.VertexData;
				Out_PhaseData15_g170432 = Data15_g170432.PhaseData;
				Out_BoundsData15_g170432 = Data15_g170432.BoundsData;
				Out_RotationData15_g170432 = Data15_g170432.RotationData;
				}
				half3 Model_PositionOS147_g170431 = Out_PositionOS15_g170432;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170431 = Out_PivotWO15_g170432;
				half3 Model_PivotWO162_g170431 = temp_output_210_19_g170431;
				float lerpResult216_g170431 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170435 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170435 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170431 ) * lerpResult216_g170431 ) - temp_output_7_0_g170435 );
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatParams204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintParams204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowParams204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoParams204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeParams204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormParams204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowParams204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatParams = In_CoatParams204_g170214;
				Data204_g170214.PaintParams = In_PaintParams204_g170214;
				Data204_g170214.GlowParams = In_GlowParams204_g170214;
				Data204_g170214.AtmoParams = In_AtmoParams204_g170214;
				Data204_g170214.FadeParams = In_FadeParams204_g170214;
				Data204_g170214.FormParams= In_FormParams204_g170214;
				Data204_g170214.FlowParams = In_FlowParams204_g170214;
				}
				TVEGlobalData Data15_g170434 = Data204_g170214;
				float Out_Dummy15_g170434 = 0;
				float4 Out_CoatParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170434 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170434 = Data15_g170434.Dummy;
				Out_CoatParams15_g170434 = Data15_g170434.CoatParams;
				Out_PaintParams15_g170434 = Data15_g170434.PaintParams;
				Out_GlowParams15_g170434 = Data15_g170434.GlowParams;
				Out_AtmoParams15_g170434= Data15_g170434.AtmoParams;
				Out_FadeParams15_g170434= Data15_g170434.FadeParams;
				Out_FormParams15_g170434 = Data15_g170434.FormParams;
				Out_FlowParams15_g170434 = Data15_g170434.FlowParams;
				}
				half4 Input_FormParams188_g170431 = Out_FormParams15_g170434;
				float temp_output_6_0_g170436 = saturate( (Input_FormParams188_g170431).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170436 = ( temp_output_6_0_g170436 + ( _SizeFadeElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170436 = temp_output_6_0_g170436;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170431 = staticSwitch14_g170436;
				#else
				float staticSwitch194_g170431 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170431 = lerp( 1.0 , staticSwitch194_g170431 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170431 = lerpResult213_g170431;
				float temp_output_189_0_g170431 = ( saturate( ( ( temp_output_9_0_g170435 / ( _SizeFadeDistMinValue - temp_output_7_0_g170435 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170431 );
				float3 appendResult200_g170431 = (float3(temp_output_189_0_g170431 , temp_output_189_0_g170431 , temp_output_189_0_g170431));
				float3 appendResult201_g170431 = (float3(1.0 , temp_output_189_0_g170431 , 1.0));
				float3 lerpResult202_g170431 = lerp( appendResult200_g170431 , appendResult201_g170431 , _SizeFadeScaleMode);
				float3 lerpResult184_g170431 = lerp( temp_cast_5 , lerpResult202_g170431 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170431 = ( lerpResult184_g170431 * Model_PositionOS147_g170431 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170431 = temp_output_167_0_g170431;
				#else
				float3 staticSwitch199_g170431 = Model_PositionOS147_g170431;
				#endif
				half3 Final_Position178_g170431 = staticSwitch199_g170431;
				float3 In_PositionOS16_g170433 = Final_Position178_g170431;
				float3 In_PositionWS16_g170433 = Out_PositionWS15_g170432;
				float3 In_PositionWO16_g170433 = Out_PositionWO15_g170432;
				float3 In_PositionRawOS16_g170433 = Out_PositionRawOS15_g170432;
				float3 In_PositionAddOS16_g170433 = Out_PositionAddOS15_g170432;
				float3 temp_output_210_24_g170431 = Out_PivotOS15_g170432;
				float3 In_PivotOS16_g170433 = temp_output_210_24_g170431;
				float3 In_PivotWS16_g170433 = Out_PivotWS15_g170432;
				float3 In_PivotWO16_g170433 = temp_output_210_19_g170431;
				float3 In_NormalOS16_g170433 = Out_NormalOS15_g170432;
				float3 In_NormalWS16_g170433 = Out_NormalWS15_g170432;
				float3 In_NormalRawOS16_g170433 = Out_NormalRawOS15_g170432;
				float3 In_NormalRawWS16_g170433 = Out_NormalRawWS15_g170432;
				float4 In_TangentOS16_g170433 = Out_TangentOS15_g170432;
				float3 In_ViewDirWS16_g170433 = Out_ViewDirWS15_g170432;
				float4 In_VertexData16_g170433 = Out_VertexData15_g170432;
				float4 In_PhaseData16_g170433 = Out_PhaseData15_g170432;
				float4 In_BoundsData16_g170433 = Out_BoundsData15_g170432;
				float4 In_RotationData16_g170433 = Out_RotationData15_g170432;
				{
				Data16_g170433.Dummy = In_Dummy16_g170433;
				Data16_g170433.PositionOS = In_PositionOS16_g170433;
				Data16_g170433.PositionWS = In_PositionWS16_g170433;
				Data16_g170433.PositionWO = In_PositionWO16_g170433;
				Data16_g170433.PositionRawOS = In_PositionRawOS16_g170433;
				Data16_g170433.PositionAddOS = In_PositionAddOS16_g170433;
				Data16_g170433.PivotOS = In_PivotOS16_g170433;
				Data16_g170433.PivotWS = In_PivotWS16_g170433;
				Data16_g170433.PivotWO = In_PivotWO16_g170433;
				Data16_g170433.NormalOS = In_NormalOS16_g170433;
				Data16_g170433.NormalWS = In_NormalWS16_g170433;
				Data16_g170433.NormalRawOS = In_NormalRawOS16_g170433;
				Data16_g170433.NormalRawWS = In_NormalRawWS16_g170433;
				Data16_g170433.TangentOS = In_TangentOS16_g170433;
				Data16_g170433.ViewDirWS = In_ViewDirWS16_g170433;
				Data16_g170433.VertexData = In_VertexData16_g170433;
				Data16_g170433.PhaseData = In_PhaseData16_g170433;
				Data16_g170433.BoundsData = In_BoundsData16_g170433;
				Data16_g170433.RotationData = In_RotationData16_g170433;
				}
				TVEModelData Data15_g170490 = Data16_g170433;
				float Out_Dummy15_g170490 = 0;
				float3 Out_PositionOS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170490 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170490 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170490 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170490 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170490 = float3( 0,0,0 );
				float4 Out_VertexData15_g170490 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170490 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170490 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170490 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170490 = Data15_g170490.Dummy;
				Out_PositionOS15_g170490 = Data15_g170490.PositionOS;
				Out_PositionWS15_g170490 = Data15_g170490.PositionWS;
				Out_PositionWO15_g170490 = Data15_g170490.PositionWO;
				Out_PositionRawOS15_g170490 = Data15_g170490.PositionRawOS;
				Out_PositionAddOS15_g170490 = Data15_g170490.PositionAddOS;
				Out_PivotOS15_g170490 = Data15_g170490.PivotOS;
				Out_PivotWS15_g170490 = Data15_g170490.PivotWS;
				Out_PivotWO15_g170490 = Data15_g170490.PivotWO;
				Out_NormalOS15_g170490 = Data15_g170490.NormalOS;
				Out_NormalWS15_g170490 = Data15_g170490.NormalWS;
				Out_NormalRawOS15_g170490 = Data15_g170490.NormalRawOS;
				Out_NormalRawWS15_g170490 = Data15_g170490.NormalRawWS;
				Out_TangentOS15_g170490 = Data15_g170490.TangentOS;
				Out_ViewDirWS15_g170490 = Data15_g170490.ViewDirWS;
				Out_VertexData15_g170490 = Data15_g170490.VertexData;
				Out_PhaseData15_g170490 = Data15_g170490.PhaseData;
				Out_BoundsData15_g170490 = Data15_g170490.BoundsData;
				Out_RotationData15_g170490 = Data15_g170490.RotationData;
				}
				float3 temp_output_2503_0_g170474 = Out_PositionOS15_g170490;
				float3 In_PositionOS16_g170491 = temp_output_2503_0_g170474;
				float3 temp_output_2503_16_g170474 = Out_PositionWS15_g170490;
				float3 In_PositionWS16_g170491 = temp_output_2503_16_g170474;
				float3 temp_output_2503_17_g170474 = Out_PositionWO15_g170490;
				float3 In_PositionWO16_g170491 = temp_output_2503_17_g170474;
				float3 In_PositionRawOS16_g170491 = Out_PositionRawOS15_g170490;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170474 = Out_VertexData15_g170490;
				half4 Model_VertexMasks518_g170474 = temp_output_2503_29_g170474;
				float4 break1689_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170475 = _motion_small_vert_mode;
				float temp_output_30_0_g170475 = ( break1689_g170474.x * break33_g170475.x );
				float temp_output_29_0_g170475 = ( break1689_g170474.y * break33_g170475.y );
				float temp_output_31_0_g170475 = ( break1689_g170474.z * break33_g170475.z );
				float temp_output_28_0_g170475 = ( temp_output_30_0_g170475 + temp_output_29_0_g170475 + temp_output_31_0_g170475 + ( break1689_g170474.w * break33_g170475.w ) );
				float temp_output_1727_0_g170474 = temp_output_28_0_g170475;
				float4 temp_output_2503_30_g170474 = Out_BoundsData15_g170490;
				half4 Model_BoundsData1322_g170474 = temp_output_2503_30_g170474;
				float4 break33_g170477 = _motion_small_proc_mode;
				float temp_output_30_0_g170477 = ( (Model_BoundsData1322_g170474).z * break33_g170477.x );
				float temp_output_29_0_g170477 = ( (Model_BoundsData1322_g170474).w * break33_g170477.y );
				float temp_output_1734_0_g170474 = ( temp_output_30_0_g170477 + temp_output_29_0_g170477 );
				float lerpResult1906_g170474 = lerp( temp_output_1727_0_g170474 , temp_output_1734_0_g170474 , _motion_small_mask_mode);
				float enc1805_g170474 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170474 = DecodeFloatToVector2( enc1805_g170474 );
				float2 break1804_g170474 = localDecodeFloatToVector21805_g170474;
				half Small_Mask_Legacy1806_g170474 = break1804_g170474.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170474 = Small_Mask_Legacy1806_g170474;
				#else
				float staticSwitch1800_g170474 = lerpResult1906_g170474;
				#endif
				float clampResult17_g170479 = clamp( staticSwitch1800_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170488 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170488 = ( clampResult17_g170479 - temp_output_7_0_g170488 );
				float temp_output_6_0_g170486 = saturate( ( ( temp_output_9_0_g170488 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170486 = ( temp_output_6_0_g170486 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170486 = temp_output_6_0_g170486;
				#endif
				half Small_Mask640_g170474 = staticSwitch14_g170486;
				float4 lerpResult836_g170510 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_MotionParams.w);
				half2 Global_WindDirWS2542_g170474 = ((lerpResult836_g170510).xy*2.0 + -1.0);
				half2 Input_WindDirWS803_g170505 = Global_WindDirWS2542_g170474;
				half3 Model_PositionWO162_g170474 = temp_output_2503_17_g170474;
				half3 Input_ModelPositionWO761_g170492 = Model_PositionWO162_g170474;
				float3 temp_output_2503_19_g170474 = Out_PivotWO15_g170490;
				half3 Model_PivotWO402_g170474 = temp_output_2503_19_g170474;
				half3 Input_ModelPivotsWO419_g170492 = Model_PivotWO402_g170474;
				half Input_MotionPivots629_g170492 = _MotionSmallPivotValue;
				float3 lerpResult771_g170492 = lerp( Input_ModelPositionWO761_g170492 , Input_ModelPivotsWO419_g170492 , Input_MotionPivots629_g170492);
				float4 temp_output_2503_27_g170474 = Out_PhaseData15_g170490;
				half4 Model_PhaseData489_g170474 = temp_output_2503_27_g170474;
				half4 Input_ModelMotionData763_g170492 = Model_PhaseData489_g170474;
				half Input_MotionPhase764_g170492 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170474 = ( lerpResult771_g170492 + ( (Input_ModelMotionData763_g170492).z * Input_MotionPhase764_g170492 * 5.0 ) );
				half3 Input_PositionWO419_g170505 = Small_Position1421_g170474;
				half Input_MotionTilling321_g170505 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170505 = ( -(Input_PositionWO419_g170505).xz * Input_MotionTilling321_g170505 * 0.005 );
				float2 temp_output_3_0_g170507 = Noise_Coord515_g170505;
				float2 temp_output_21_0_g170507 = Input_WindDirWS803_g170505;
				float lerpResult128_g170506 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170505 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170505 = ( lerpResult128_g170506 * 0.02 * Input_MotionSpeed62_g170505 );
				float temp_output_15_0_g170507 = Noise_Speed516_g170505;
				float temp_output_23_0_g170507 = frac( temp_output_15_0_g170507 );
				float4 lerpResult39_g170507 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170507 + ( temp_output_21_0_g170507 * temp_output_23_0_g170507 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170507 + ( temp_output_21_0_g170507 * frac( ( temp_output_15_0_g170507 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170507 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170505 = lerpResult39_g170507;
				half2 Noise_DirWS858_g170505 = ((temp_output_635_0_g170505).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170505 = _MotionSmallNoiseValue;
				half Global_WInd769_g170510 = (lerpResult836_g170510).z;
				TVEGlobalData Data15_g170498 = Data204_g170214;
				float Out_Dummy15_g170498 = 0;
				float4 Out_CoatParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170498 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170498 = Data15_g170498.Dummy;
				Out_CoatParams15_g170498 = Data15_g170498.CoatParams;
				Out_PaintParams15_g170498 = Data15_g170498.PaintParams;
				Out_GlowParams15_g170498 = Data15_g170498.GlowParams;
				Out_AtmoParams15_g170498= Data15_g170498.AtmoParams;
				Out_FadeParams15_g170498= Data15_g170498.FadeParams;
				Out_FormParams15_g170498 = Data15_g170498.FormParams;
				Out_FlowParams15_g170498 = Data15_g170498.FlowParams;
				}
				half4 Global_FlowParams2668_g170474 = Out_FlowParams15_g170498;
				half4 Input_GlobalFlow826_g170510 = Global_FlowParams2668_g170474;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170510 = saturate( (Input_GlobalFlow826_g170510).w );
				#else
				float staticSwitch612_g170510 = Global_WInd769_g170510;
				#endif
				float lerpResult853_g170510 = lerp( staticSwitch612_g170510 , saturate( (staticSwitch612_g170510*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170510 = _MotionIntensityValue;
				half Global_WindValue1855_g170474 = ( lerpResult853_g170510 * Input_MotionValue629_g170510 );
				half Input_WindValue881_g170505 = Global_WindValue1855_g170474;
				float lerpResult701_g170505 = lerp( 1.0 , Input_MotionNoise552_g170505 , Input_WindValue881_g170505);
				float2 lerpResult646_g170505 = lerp( Input_WindDirWS803_g170505 , Noise_DirWS858_g170505 , lerpResult701_g170505);
				half2 Small_DirWS817_g170505 = lerpResult646_g170505;
				float2 break823_g170505 = Small_DirWS817_g170505;
				half4 Noise_Params685_g170505 = temp_output_635_0_g170505;
				half Wind_Sinus820_g170505 = ( ((Noise_Params685_g170505).b*2.0 + -1.0) * Input_MotionNoise552_g170505 * 0.6 );
				float3 appendResult824_g170505 = (float3(break823_g170505.x , Wind_Sinus820_g170505 , break823_g170505.y));
				half Input_MotionDelay753_g170505 = _MotionSmallDelayValue;
				float lerpResult756_g170505 = lerp( 1.0 , ( Input_WindValue881_g170505 * Input_WindValue881_g170505 ) , Input_MotionDelay753_g170505);
				half Wind_Delay815_g170505 = lerpResult756_g170505;
				float3 appendResult825_g170505 = (float3(Wind_Delay815_g170505 , 1.0 , Wind_Delay815_g170505));
				float3 temp_output_827_0_g170505 = ( ( appendResult824_g170505 * Input_WindValue881_g170505 ) * appendResult825_g170505 );
				float2 break857_g170505 = Noise_DirWS858_g170505;
				float3 appendResult833_g170505 = (float3(break857_g170505.x , Wind_Sinus820_g170505 , break857_g170505.y));
				half Global_PushWave2675_g170474 = (Input_GlobalFlow826_g170510).z;
				half Input_PushWave890_g170505 = Global_PushWave2675_g170474;
				float2 temp_output_791_0_g170510 = ((Input_GlobalFlow826_g170510).xy*2.0 + -1.0);
				float temp_output_849_0_g170510 = saturate( length( temp_output_791_0_g170510 ) );
				half Global_PushAlpha1504_g170474 = temp_output_849_0_g170510;
				half Input_PushAlpha806_g170505 = ( Global_PushAlpha1504_g170474 * _MotionSmallPushValue );
				float3 lerpResult840_g170505 = lerp( temp_output_827_0_g170505 , ( appendResult833_g170505 * Input_PushWave890_g170505 ) , Input_PushAlpha806_g170505);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170505 = lerpResult840_g170505;
				#else
				float3 staticSwitch829_g170505 = temp_output_827_0_g170505;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half3 Small_Squash1489_g170474 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170505 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Motion789_g170474 = ( _MotionSmallIntensityValue * Small_Mask640_g170474 * Small_Squash1489_g170474 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170474 = Small_Motion789_g170474;
				#else
				float3 staticSwitch495_g170474 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170474 = temp_output_2503_16_g170474;
				half Global_DistMask1820_g170474 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170474 ) / _MotionDistValue ) ) );
				float4 break1710_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170476 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170476 = ( break1710_g170474.x * break33_g170476.x );
				float temp_output_29_0_g170476 = ( break1710_g170474.y * break33_g170476.y );
				float temp_output_31_0_g170476 = ( break1710_g170474.z * break33_g170476.z );
				float temp_output_28_0_g170476 = ( temp_output_30_0_g170476 + temp_output_29_0_g170476 + temp_output_31_0_g170476 + ( break1710_g170474.w * break33_g170476.w ) );
				float temp_output_1729_0_g170474 = temp_output_28_0_g170476;
				float4 break33_g170478 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170478 = ( (Model_BoundsData1322_g170474).z * break33_g170478.x );
				float temp_output_29_0_g170478 = ( (Model_BoundsData1322_g170474).w * break33_g170478.y );
				float temp_output_1735_0_g170474 = ( temp_output_30_0_g170478 + temp_output_29_0_g170478 );
				float lerpResult1908_g170474 = lerp( temp_output_1729_0_g170474 , temp_output_1735_0_g170474 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170474 = break1804_g170474.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170474 = Tiny_Mask_Legacy1807_g170474;
				#else
				float staticSwitch1810_g170474 = lerpResult1908_g170474;
				#endif
				float clampResult17_g170480 = clamp( staticSwitch1810_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170489 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170489 = ( clampResult17_g170480 - temp_output_7_0_g170489 );
				float temp_output_6_0_g170481 = saturate( ( ( temp_output_9_0_g170489 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170481 = ( temp_output_6_0_g170481 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170481 = temp_output_6_0_g170481;
				#endif
				half Tiny_Mask218_g170474 = staticSwitch14_g170481;
				float3 temp_output_2503_20_g170474 = Out_NormalOS15_g170490;
				half3 Model_NormalOS554_g170474 = temp_output_2503_20_g170474;
				half3 Input_NormalOS533_g170494 = Model_NormalOS554_g170474;
				half3 Tiny_Position2469_g170474 = Model_PositionWO162_g170474;
				half3 Input_PositionWO500_g170494 = Tiny_Position2469_g170474;
				half Input_MotionTilling321_g170494 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170496 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170494 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170494 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170494).xz * Input_MotionTilling321_g170494 * 0.005 ) + ( lerpResult128_g170496 * Input_MotionSpeed62_g170494 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170494 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170494 = lerp( ( Input_NormalOS533_g170494 * Flutter_Noise535_g170494 ) , Flutter_Noise535_g170494 , Input_MotionNoise542_g170494);
				half3 Input_ModelPositionWO761_g170493 = Model_PositionWO162_g170474;
				half3 Input_ModelPivotsWO419_g170493 = Model_PivotWO402_g170474;
				half Input_MotionPivots629_g170493 = _MotionBasePivotValue;
				float3 lerpResult771_g170493 = lerp( Input_ModelPositionWO761_g170493 , Input_ModelPivotsWO419_g170493 , Input_MotionPivots629_g170493);
				half4 Input_ModelMotionData763_g170493 = Model_PhaseData489_g170474;
				half Input_MotionPhase764_g170493 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170474 = ( lerpResult771_g170493 + ( (Input_ModelMotionData763_g170493).z * Input_MotionPhase764_g170493 * 5.0 ) );
				half3 Input_PositionWO419_g170499 = Base_Position1394_g170474;
				half Input_MotionTilling321_g170499 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170499 = ( -(Input_PositionWO419_g170499).xz * Input_MotionTilling321_g170499 * 0.005 );
				float2 temp_output_3_0_g170501 = Noise_Coord515_g170499;
				half2 Input_WindDirWS803_g170499 = Global_WindDirWS2542_g170474;
				float2 temp_output_21_0_g170501 = Input_WindDirWS803_g170499;
				float lerpResult128_g170500 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170499 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170499 = ( lerpResult128_g170500 * 0.02 * Input_MotionSpeed62_g170499 );
				float temp_output_15_0_g170501 = Noise_Speed516_g170499;
				float temp_output_23_0_g170501 = frac( temp_output_15_0_g170501 );
				float4 lerpResult39_g170501 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170501 + ( temp_output_21_0_g170501 * temp_output_23_0_g170501 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170501 + ( temp_output_21_0_g170501 * frac( ( temp_output_15_0_g170501 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170501 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170499 = lerpResult39_g170501;
				half4 Noise_Params685_g170499 = temp_output_635_0_g170499;
				half Input_WindValue853_g170499 = Global_WindValue1855_g170474;
				float temp_output_855_0_g170499 = ( (Noise_Params685_g170499).a * Input_WindValue853_g170499 );
				half Input_PushWave858_g170499 = Global_PushWave2675_g170474;
				half Input_PushAlpha806_g170499 = ( Global_PushAlpha1504_g170474 * _MotionBasePushValue );
				float lerpResult831_g170499 = lerp( temp_output_855_0_g170499 , Input_PushWave858_g170499 , Input_PushAlpha806_g170499);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170499 = lerpResult831_g170499;
				#else
				float staticSwitch828_g170499 = temp_output_855_0_g170499;
				#endif
				half Base_Wave1159_g170474 = staticSwitch828_g170499;
				float temp_output_888_0_g170505 = ( (Noise_Params685_g170505).b * Input_WindValue881_g170505 );
				float lerpResult867_g170505 = lerp( temp_output_888_0_g170505 , ( (Noise_Params685_g170505).b * Input_PushWave890_g170505 ) , Input_PushAlpha806_g170505);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170505 = lerpResult867_g170505;
				#else
				float staticSwitch886_g170505 = temp_output_888_0_g170505;
				#endif
				half Small_Wave1427_g170474 = staticSwitch886_g170505;
				float lerpResult2422_g170474 = lerp( Base_Wave1159_g170474 , Small_Wave1427_g170474 , _motion_small_mode);
				half Global_Wave1475_g170474 = lerpResult2422_g170474;
				half Input_GlobalWave546_g170494 = Global_Wave1475_g170474;
				float temp_output_548_0_g170494 = ( Input_GlobalWave546_g170494 * Input_GlobalWave546_g170494 );
				half Flutter_Wave556_g170494 = temp_output_548_0_g170494;
				half3 Tiny_Noise859_g170474 = ( lerpResult537_g170494 * Flutter_Wave556_g170494 );
				half3 Tiny_Flutter1451_g170474 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170474 * Tiny_Mask218_g170474 * Tiny_Noise859_g170474 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170474 = Tiny_Flutter1451_g170474;
				#else
				float3 staticSwitch414_g170474 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170474 = ( staticSwitch495_g170474 + staticSwitch414_g170474 );
				float3 In_PositionAddOS16_g170491 = Final_PositionADD1569_g170474;
				float3 temp_output_2503_24_g170474 = Out_PivotOS15_g170490;
				float3 In_PivotOS16_g170491 = temp_output_2503_24_g170474;
				float3 In_PivotWS16_g170491 = Out_PivotWS15_g170490;
				float3 In_PivotWO16_g170491 = temp_output_2503_19_g170474;
				float3 In_NormalOS16_g170491 = temp_output_2503_20_g170474;
				float3 In_NormalWS16_g170491 = Out_NormalWS15_g170490;
				float3 In_NormalRawOS16_g170491 = Out_NormalRawOS15_g170490;
				float3 In_NormalRawWS16_g170491 = Out_NormalRawWS15_g170490;
				float4 In_TangentOS16_g170491 = Out_TangentOS15_g170490;
				float3 In_ViewDirWS16_g170491 = Out_ViewDirWS15_g170490;
				float4 In_VertexData16_g170491 = temp_output_2503_29_g170474;
				float4 In_PhaseData16_g170491 = temp_output_2503_27_g170474;
				float4 In_BoundsData16_g170491 = temp_output_2503_30_g170474;
				float4 break748_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170483 = _motion_base_vert_mode;
				float temp_output_30_0_g170483 = ( break748_g170474.x * break33_g170483.x );
				float temp_output_29_0_g170483 = ( break748_g170474.y * break33_g170483.y );
				float temp_output_31_0_g170483 = ( break748_g170474.z * break33_g170483.z );
				float temp_output_28_0_g170483 = ( temp_output_30_0_g170483 + temp_output_29_0_g170483 + temp_output_31_0_g170483 + ( break748_g170474.w * break33_g170483.w ) );
				float temp_output_1731_0_g170474 = temp_output_28_0_g170483;
				float4 break33_g170484 = _motion_base_proc_mode;
				float temp_output_30_0_g170484 = ( (Model_BoundsData1322_g170474).z * break33_g170484.x );
				float temp_output_29_0_g170484 = ( (Model_BoundsData1322_g170474).w * break33_g170484.y );
				float temp_output_1733_0_g170474 = ( temp_output_30_0_g170484 + temp_output_29_0_g170484 );
				float lerpResult1904_g170474 = lerp( temp_output_1731_0_g170474 , temp_output_1733_0_g170474 , _motion_base_mask_mode);
				float clampResult17_g170482 = clamp( lerpResult1904_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170487 = ( clampResult17_g170482 - temp_output_7_0_g170487 );
				float temp_output_6_0_g170485 = saturate( ( ( temp_output_9_0_g170487 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170485 = ( temp_output_6_0_g170485 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170485 = temp_output_6_0_g170485;
				#endif
				half Base_Mask217_g170474 = staticSwitch14_g170485;
				half2 Noise_DirWS825_g170499 = ((temp_output_635_0_g170499).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170499 = _MotionBaseNoiseValue;
				float lerpResult701_g170499 = lerp( 1.0 , Input_MotionNoise552_g170499 , Input_WindValue853_g170499);
				float2 lerpResult646_g170499 = lerp( Input_WindDirWS803_g170499 , Noise_DirWS825_g170499 , lerpResult701_g170499);
				half Input_MotionDelay753_g170499 = _MotionBaseDelayValue;
				float lerpResult756_g170499 = lerp( 1.0 , ( Input_WindValue853_g170499 * Input_WindValue853_g170499 ) , Input_MotionDelay753_g170499);
				half Wind_Delay815_g170499 = lerpResult756_g170499;
				float2 temp_output_809_0_g170499 = ( lerpResult646_g170499 * Input_WindValue853_g170499 * Wind_Delay815_g170499 );
				half2 Global_PushDirWS1972_g170474 = temp_output_791_0_g170510;
				half2 Input_PushDirWS807_g170499 = Global_PushDirWS1972_g170474;
				float2 lerpResult811_g170499 = lerp( temp_output_809_0_g170499 , Input_PushDirWS807_g170499 , Input_PushAlpha806_g170499);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170499 = lerpResult811_g170499;
				#else
				float2 staticSwitch808_g170499 = temp_output_809_0_g170499;
				#endif
				float2 break83_g170504 = staticSwitch808_g170499;
				float3 appendResult79_g170504 = (float3(break83_g170504.x , 0.0 , break83_g170504.y));
				half2 Base_Bending893_g170474 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170504 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170474 = ( _MotionBaseIntensityValue * Base_Mask217_g170474 * Base_Bending893_g170474 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170474 = Base_Motion1440_g170474;
				#else
				float2 staticSwitch2384_g170474 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170474 = (float4(staticSwitch2384_g170474 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170474 = appendResult2023_g170474;
				float4 In_RotationData16_g170491 = Final_RotationData1570_g170474;
				{
				Data16_g170491.Dummy = In_Dummy16_g170491;
				Data16_g170491.PositionOS = In_PositionOS16_g170491;
				Data16_g170491.PositionWS = In_PositionWS16_g170491;
				Data16_g170491.PositionWO = In_PositionWO16_g170491;
				Data16_g170491.PositionRawOS = In_PositionRawOS16_g170491;
				Data16_g170491.PositionAddOS = In_PositionAddOS16_g170491;
				Data16_g170491.PivotOS = In_PivotOS16_g170491;
				Data16_g170491.PivotWS = In_PivotWS16_g170491;
				Data16_g170491.PivotWO = In_PivotWO16_g170491;
				Data16_g170491.NormalOS = In_NormalOS16_g170491;
				Data16_g170491.NormalWS = In_NormalWS16_g170491;
				Data16_g170491.NormalRawOS = In_NormalRawOS16_g170491;
				Data16_g170491.NormalRawWS = In_NormalRawWS16_g170491;
				Data16_g170491.TangentOS = In_TangentOS16_g170491;
				Data16_g170491.ViewDirWS = In_ViewDirWS16_g170491;
				Data16_g170491.VertexData = In_VertexData16_g170491;
				Data16_g170491.PhaseData = In_PhaseData16_g170491;
				Data16_g170491.BoundsData = In_BoundsData16_g170491;
				Data16_g170491.RotationData = In_RotationData16_g170491;
				}
				TVEModelData Data15_g170720 = Data16_g170491;
				float Out_Dummy15_g170720 = 0;
				float3 Out_PositionOS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170720 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170720 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170720 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170720 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170720 = float3( 0,0,0 );
				float4 Out_VertexData15_g170720 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170720 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170720 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170720 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170720 = Data15_g170720.Dummy;
				Out_PositionOS15_g170720 = Data15_g170720.PositionOS;
				Out_PositionWS15_g170720 = Data15_g170720.PositionWS;
				Out_PositionWO15_g170720 = Data15_g170720.PositionWO;
				Out_PositionRawOS15_g170720 = Data15_g170720.PositionRawOS;
				Out_PositionAddOS15_g170720 = Data15_g170720.PositionAddOS;
				Out_PivotOS15_g170720 = Data15_g170720.PivotOS;
				Out_PivotWS15_g170720 = Data15_g170720.PivotWS;
				Out_PivotWO15_g170720 = Data15_g170720.PivotWO;
				Out_NormalOS15_g170720 = Data15_g170720.NormalOS;
				Out_NormalWS15_g170720 = Data15_g170720.NormalWS;
				Out_NormalRawOS15_g170720 = Data15_g170720.NormalRawOS;
				Out_NormalRawWS15_g170720 = Data15_g170720.NormalRawWS;
				Out_TangentOS15_g170720 = Data15_g170720.TangentOS;
				Out_ViewDirWS15_g170720 = Data15_g170720.ViewDirWS;
				Out_VertexData15_g170720 = Data15_g170720.VertexData;
				Out_PhaseData15_g170720 = Data15_g170720.PhaseData;
				Out_BoundsData15_g170720 = Data15_g170720.BoundsData;
				Out_RotationData15_g170720 = Data15_g170720.RotationData;
				}
				half3 Model_PositionOS147_g170719 = Out_PositionOS15_g170720;
				half3 Input_False58_g170722 = Model_PositionOS147_g170719;
				half3 VertexPos40_g170723 = Model_PositionOS147_g170719;
				half3 VertexPos40_g170724 = VertexPos40_g170723;
				float3 appendResult74_g170724 = (float3(VertexPos40_g170724.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170724 = appendResult74_g170724;
				float3 break84_g170724 = VertexPos40_g170724;
				float3 appendResult81_g170724 = (float3(0.0 , break84_g170724.y , break84_g170724.z));
				half3 VertexPosOtherAxis82_g170724 = appendResult81_g170724;
				float4 temp_output_1567_33_g170719 = Out_RotationData15_g170720;
				half4 Model_VertexBend1569_g170719 = temp_output_1567_33_g170719;
				half2 Angle44_g170723 = (Model_VertexBend1569_g170719).xy;
				half Angle44_g170724 = (Angle44_g170723).y;
				half3 VertexPos40_g170725 = ( VertexPosRotationAxis50_g170724 + ( VertexPosOtherAxis82_g170724 * cos( Angle44_g170724 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170724 ) * sin( Angle44_g170724 ) ) );
				float3 appendResult74_g170725 = (float3(0.0 , 0.0 , VertexPos40_g170725.z));
				half3 VertexPosRotationAxis50_g170725 = appendResult74_g170725;
				float3 break84_g170725 = VertexPos40_g170725;
				float3 appendResult81_g170725 = (float3(break84_g170725.x , break84_g170725.y , 0.0));
				half3 VertexPosOtherAxis82_g170725 = appendResult81_g170725;
				half Angle44_g170725 = -(Angle44_g170723).x;
				half3 Input_True57_g170722 = ( VertexPosRotationAxis50_g170725 + ( VertexPosOtherAxis82_g170725 * cos( Angle44_g170725 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170725 ) * sin( Angle44_g170725 ) ) );
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170722 = Input_True57_g170722;
				#else
				float3 staticSwitch65_g170722 = Input_False58_g170722;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170722 = Input_True57_g170722;
				#else
				float3 staticSwitch69_g170722 = staticSwitch65_g170722;
				#endif
				float3 temp_output_1578_0_g170719 = staticSwitch69_g170722;
				float3 temp_output_1567_31_g170719 = Out_PositionAddOS15_g170720;
				half3 Model_PositionADD1568_g170719 = temp_output_1567_31_g170719;
				half3 Final_PositionOS178_g170719 = ( temp_output_1578_0_g170719 + Model_PositionADD1568_g170719 );
				float3 In_PositionOS16_g170721 = Final_PositionOS178_g170719;
				float3 In_PositionWS16_g170721 = Out_PositionWS15_g170720;
				float3 In_PositionWO16_g170721 = Out_PositionWO15_g170720;
				float3 In_PositionRawOS16_g170721 = Out_PositionRawOS15_g170720;
				float3 In_PositionAddOS16_g170721 = temp_output_1567_31_g170719;
				float3 In_PivotOS16_g170721 = Out_PivotOS15_g170720;
				float3 In_PivotWS16_g170721 = Out_PivotWS15_g170720;
				float3 In_PivotWO16_g170721 = Out_PivotWO15_g170720;
				float3 In_NormalOS16_g170721 = Out_NormalOS15_g170720;
				float3 In_NormalWS16_g170721 = Out_NormalWS15_g170720;
				float3 In_NormalRawOS16_g170721 = Out_NormalRawOS15_g170720;
				float3 In_NormalRawWS16_g170721 = Out_NormalRawWS15_g170720;
				float4 In_TangentOS16_g170721 = Out_TangentOS15_g170720;
				float3 In_ViewDirWS16_g170721 = Out_ViewDirWS15_g170720;
				float4 In_VertexData16_g170721 = Out_VertexData15_g170720;
				float4 In_PhaseData16_g170721 = Out_PhaseData15_g170720;
				float4 In_BoundsData16_g170721 = Out_BoundsData15_g170720;
				float4 In_RotationData16_g170721 = temp_output_1567_33_g170719;
				{
				Data16_g170721.Dummy = In_Dummy16_g170721;
				Data16_g170721.PositionOS = In_PositionOS16_g170721;
				Data16_g170721.PositionWS = In_PositionWS16_g170721;
				Data16_g170721.PositionWO = In_PositionWO16_g170721;
				Data16_g170721.PositionRawOS = In_PositionRawOS16_g170721;
				Data16_g170721.PositionAddOS = In_PositionAddOS16_g170721;
				Data16_g170721.PivotOS = In_PivotOS16_g170721;
				Data16_g170721.PivotWS = In_PivotWS16_g170721;
				Data16_g170721.PivotWO = In_PivotWO16_g170721;
				Data16_g170721.NormalOS = In_NormalOS16_g170721;
				Data16_g170721.NormalWS = In_NormalWS16_g170721;
				Data16_g170721.NormalRawOS = In_NormalRawOS16_g170721;
				Data16_g170721.NormalRawWS = In_NormalRawWS16_g170721;
				Data16_g170721.TangentOS = In_TangentOS16_g170721;
				Data16_g170721.ViewDirWS = In_ViewDirWS16_g170721;
				Data16_g170721.VertexData = In_VertexData16_g170721;
				Data16_g170721.PhaseData = In_PhaseData16_g170721;
				Data16_g170721.BoundsData = In_BoundsData16_g170721;
				Data16_g170721.RotationData = In_RotationData16_g170721;
				}
				TVEModelData Data15_g170744 = Data16_g170721;
				float Out_Dummy15_g170744 = 0;
				float3 Out_PositionOS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170744 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170744 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170744 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170744 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170744 = float3( 0,0,0 );
				float4 Out_VertexData15_g170744 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170744 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170744 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170744 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170744 = Data15_g170744.Dummy;
				Out_PositionOS15_g170744 = Data15_g170744.PositionOS;
				Out_PositionWS15_g170744 = Data15_g170744.PositionWS;
				Out_PositionWO15_g170744 = Data15_g170744.PositionWO;
				Out_PositionRawOS15_g170744 = Data15_g170744.PositionRawOS;
				Out_PositionAddOS15_g170744 = Data15_g170744.PositionAddOS;
				Out_PivotOS15_g170744 = Data15_g170744.PivotOS;
				Out_PivotWS15_g170744 = Data15_g170744.PivotWS;
				Out_PivotWO15_g170744 = Data15_g170744.PivotWO;
				Out_NormalOS15_g170744 = Data15_g170744.NormalOS;
				Out_NormalWS15_g170744 = Data15_g170744.NormalWS;
				Out_NormalRawOS15_g170744 = Data15_g170744.NormalRawOS;
				Out_NormalRawWS15_g170744 = Data15_g170744.NormalRawWS;
				Out_TangentOS15_g170744 = Data15_g170744.TangentOS;
				Out_ViewDirWS15_g170744 = Data15_g170744.ViewDirWS;
				Out_VertexData15_g170744 = Data15_g170744.VertexData;
				Out_PhaseData15_g170744 = Data15_g170744.PhaseData;
				Out_BoundsData15_g170744 = Data15_g170744.BoundsData;
				Out_RotationData15_g170744 = Data15_g170744.RotationData;
				}
				float3 In_PositionOS16_g170745 = Out_PositionOS15_g170744;
				float3 In_PositionWS16_g170745 = Out_PositionWS15_g170744;
				float3 temp_output_1567_17_g170743 = Out_PositionWO15_g170744;
				float3 In_PositionWO16_g170745 = temp_output_1567_17_g170743;
				float3 temp_output_1567_26_g170743 = Out_PositionRawOS15_g170744;
				float3 In_PositionRawOS16_g170745 = temp_output_1567_26_g170743;
				float3 In_PositionAddOS16_g170745 = Out_PositionAddOS15_g170744;
				float3 In_PivotOS16_g170745 = Out_PivotOS15_g170744;
				float3 In_PivotWS16_g170745 = Out_PivotWS15_g170744;
				float3 In_PivotWO16_g170745 = Out_PivotWO15_g170744;
				half3 Model_NormalOS1568_g170743 = Out_NormalOS15_g170744;
				float3 lerpResult1589_g170743 = lerp( Model_NormalOS1568_g170743 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170743 = temp_output_1567_26_g170743;
				float3 normalizeResult1594_g170743 = ASESafeNormalize( ( Model_PositionRAW1592_g170743 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170743 = lerp( lerpResult1589_g170743 , normalizeResult1594_g170743 , _NormalSphereValue);
				half3 Input_False58_g170758 = lerpResult1585_g170743;
				half3 VertexPos40_g170747 = lerpResult1585_g170743;
				half3 VertexPos40_g170748 = VertexPos40_g170747;
				float3 appendResult74_g170748 = (float3(VertexPos40_g170748.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170748 = appendResult74_g170748;
				float3 break84_g170748 = VertexPos40_g170748;
				float3 appendResult81_g170748 = (float3(0.0 , break84_g170748.y , break84_g170748.z));
				half3 VertexPosOtherAxis82_g170748 = appendResult81_g170748;
				float4 temp_output_1567_33_g170743 = Out_RotationData15_g170744;
				half4 Model_RotationData1583_g170743 = temp_output_1567_33_g170743;
				half2 Angle44_g170747 = Model_RotationData1583_g170743.xy;
				half Angle44_g170748 = (Angle44_g170747).y;
				half3 VertexPos40_g170749 = ( VertexPosRotationAxis50_g170748 + ( VertexPosOtherAxis82_g170748 * cos( Angle44_g170748 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170748 ) * sin( Angle44_g170748 ) ) );
				float3 appendResult74_g170749 = (float3(0.0 , 0.0 , VertexPos40_g170749.z));
				half3 VertexPosRotationAxis50_g170749 = appendResult74_g170749;
				float3 break84_g170749 = VertexPos40_g170749;
				float3 appendResult81_g170749 = (float3(break84_g170749.x , break84_g170749.y , 0.0));
				half3 VertexPosOtherAxis82_g170749 = appendResult81_g170749;
				half Angle44_g170749 = -(Angle44_g170747).x;
				float3 lerpResult1591_g170743 = lerp( lerpResult1585_g170743 , ( VertexPosRotationAxis50_g170749 + ( VertexPosOtherAxis82_g170749 * cos( Angle44_g170749 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170749 ) * sin( Angle44_g170749 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170758 = lerpResult1591_g170743;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170758 = Input_True57_g170758;
				#else
				float3 staticSwitch65_g170758 = Input_False58_g170758;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170758 = Input_True57_g170758;
				#else
				float3 staticSwitch69_g170758 = staticSwitch65_g170758;
				#endif
				float3 temp_output_1715_0_g170743 = staticSwitch69_g170758;
				float4 temp_output_1567_29_g170743 = Out_VertexData15_g170744;
				half4 Model_VertexData1608_g170743 = temp_output_1567_29_g170743;
				float4 break1683_g170743 = Model_VertexData1608_g170743;
				float4 break33_g170750 = _normal_vert_mode;
				float temp_output_30_0_g170750 = ( break1683_g170743.x * break33_g170750.x );
				float temp_output_29_0_g170750 = ( break1683_g170743.y * break33_g170750.y );
				float temp_output_31_0_g170750 = ( break1683_g170743.z * break33_g170750.z );
				float temp_output_28_0_g170750 = ( temp_output_30_0_g170750 + temp_output_29_0_g170750 + temp_output_31_0_g170750 + ( break1683_g170743.w * break33_g170750.w ) );
				float clampResult17_g170751 = clamp( temp_output_28_0_g170750 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170755 = _NormalMeshRemap.x;
				float temp_output_9_0_g170755 = ( clampResult17_g170751 - temp_output_7_0_g170755 );
				float lerpResult1695_g170743 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170755 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170752 = lerpResult1695_g170743;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170752 = ( temp_output_6_0_g170752 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170752 = temp_output_6_0_g170752;
				#endif
				float temp_output_1690_0_g170743 = staticSwitch14_g170752;
				half Normal_MeskMask1691_g170743 = temp_output_1690_0_g170743;
				half Normal_Proj_Mask1647_g170743 = 1.0;
				float temp_output_1699_0_g170743 = ( Normal_MeskMask1691_g170743 * Normal_Proj_Mask1647_g170743 );
				float3 lerpResult1670_g170743 = lerp( Model_NormalOS1568_g170743 , temp_output_1715_0_g170743 , temp_output_1699_0_g170743);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170743 = lerpResult1670_g170743;
				#else
				float3 staticSwitch1716_g170743 = Model_NormalOS1568_g170743;
				#endif
				half3 Final_NormalOS178_g170743 = staticSwitch1716_g170743;
				float3 In_NormalOS16_g170745 = Final_NormalOS178_g170743;
				float3 temp_output_1567_21_g170743 = Out_NormalWS15_g170744;
				float3 In_NormalWS16_g170745 = temp_output_1567_21_g170743;
				float3 In_NormalRawOS16_g170745 = Out_NormalRawOS15_g170744;
				float3 In_NormalRawWS16_g170745 = Out_NormalRawWS15_g170744;
				float4 In_TangentOS16_g170745 = Out_TangentOS15_g170744;
				float3 In_ViewDirWS16_g170745 = Out_ViewDirWS15_g170744;
				float4 In_VertexData16_g170745 = temp_output_1567_29_g170743;
				float4 In_PhaseData16_g170745 = Out_PhaseData15_g170744;
				float4 In_BoundsData16_g170745 = Out_BoundsData15_g170744;
				float4 In_RotationData16_g170745 = temp_output_1567_33_g170743;
				{
				Data16_g170745.Dummy = In_Dummy16_g170745;
				Data16_g170745.PositionOS = In_PositionOS16_g170745;
				Data16_g170745.PositionWS = In_PositionWS16_g170745;
				Data16_g170745.PositionWO = In_PositionWO16_g170745;
				Data16_g170745.PositionRawOS = In_PositionRawOS16_g170745;
				Data16_g170745.PositionAddOS = In_PositionAddOS16_g170745;
				Data16_g170745.PivotOS = In_PivotOS16_g170745;
				Data16_g170745.PivotWS = In_PivotWS16_g170745;
				Data16_g170745.PivotWO = In_PivotWO16_g170745;
				Data16_g170745.NormalOS = In_NormalOS16_g170745;
				Data16_g170745.NormalWS = In_NormalWS16_g170745;
				Data16_g170745.NormalRawOS = In_NormalRawOS16_g170745;
				Data16_g170745.NormalRawWS = In_NormalRawWS16_g170745;
				Data16_g170745.TangentOS = In_TangentOS16_g170745;
				Data16_g170745.ViewDirWS = In_ViewDirWS16_g170745;
				Data16_g170745.VertexData = In_VertexData16_g170745;
				Data16_g170745.PhaseData = In_PhaseData16_g170745;
				Data16_g170745.BoundsData = In_BoundsData16_g170745;
				Data16_g170745.RotationData = In_RotationData16_g170745;
				}
				TVEModelData Data15_g170760 = Data16_g170745;
				float Out_Dummy15_g170760 = 0;
				float3 Out_PositionOS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170760 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170760 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170760 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170760 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170760 = float3( 0,0,0 );
				float4 Out_VertexData15_g170760 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170760 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170760 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170760 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170760 = Data15_g170760.Dummy;
				Out_PositionOS15_g170760 = Data15_g170760.PositionOS;
				Out_PositionWS15_g170760 = Data15_g170760.PositionWS;
				Out_PositionWO15_g170760 = Data15_g170760.PositionWO;
				Out_PositionRawOS15_g170760 = Data15_g170760.PositionRawOS;
				Out_PositionAddOS15_g170760 = Data15_g170760.PositionAddOS;
				Out_PivotOS15_g170760 = Data15_g170760.PivotOS;
				Out_PivotWS15_g170760 = Data15_g170760.PivotWS;
				Out_PivotWO15_g170760 = Data15_g170760.PivotWO;
				Out_NormalOS15_g170760 = Data15_g170760.NormalOS;
				Out_NormalWS15_g170760 = Data15_g170760.NormalWS;
				Out_NormalRawOS15_g170760 = Data15_g170760.NormalRawOS;
				Out_NormalRawWS15_g170760 = Data15_g170760.NormalRawWS;
				Out_TangentOS15_g170760 = Data15_g170760.TangentOS;
				Out_ViewDirWS15_g170760 = Data15_g170760.ViewDirWS;
				Out_VertexData15_g170760 = Data15_g170760.VertexData;
				Out_PhaseData15_g170760 = Data15_g170760.PhaseData;
				Out_BoundsData15_g170760 = Data15_g170760.BoundsData;
				Out_RotationData15_g170760 = Data15_g170760.RotationData;
				}
				float3 temp_output_217_24_g170759 = Out_PivotOS15_g170760;
				float3 In_PositionOS16_g170761 = ( Out_PositionOS15_g170760 + temp_output_217_24_g170759 );
				float3 In_PositionWS16_g170761 = Out_PositionWS15_g170760;
				float3 In_PositionWO16_g170761 = Out_PositionWO15_g170760;
				float3 In_PositionRawOS16_g170761 = Out_PositionRawOS15_g170760;
				float3 In_PositionAddOS16_g170761 = Out_PositionAddOS15_g170760;
				float3 In_PivotOS16_g170761 = temp_output_217_24_g170759;
				float3 In_PivotWS16_g170761 = Out_PivotWS15_g170760;
				float3 In_PivotWO16_g170761 = Out_PivotWO15_g170760;
				float3 In_NormalOS16_g170761 = Out_NormalOS15_g170760;
				float3 In_NormalWS16_g170761 = Out_NormalWS15_g170760;
				float3 In_NormalRawOS16_g170761 = Out_NormalRawOS15_g170760;
				float3 In_NormalRawWS16_g170761 = Out_NormalRawWS15_g170760;
				float4 In_TangentOS16_g170761 = Out_TangentOS15_g170760;
				float3 In_ViewDirWS16_g170761 = Out_ViewDirWS15_g170760;
				float4 In_VertexData16_g170761 = Out_VertexData15_g170760;
				float4 In_PhaseData16_g170761 = Out_PhaseData15_g170760;
				float4 In_BoundsData16_g170761 = Out_BoundsData15_g170760;
				float4 In_RotationData16_g170761 = Out_RotationData15_g170760;
				{
				Data16_g170761.Dummy = In_Dummy16_g170761;
				Data16_g170761.PositionOS = In_PositionOS16_g170761;
				Data16_g170761.PositionWS = In_PositionWS16_g170761;
				Data16_g170761.PositionWO = In_PositionWO16_g170761;
				Data16_g170761.PositionRawOS = In_PositionRawOS16_g170761;
				Data16_g170761.PositionAddOS = In_PositionAddOS16_g170761;
				Data16_g170761.PivotOS = In_PivotOS16_g170761;
				Data16_g170761.PivotWS = In_PivotWS16_g170761;
				Data16_g170761.PivotWO = In_PivotWO16_g170761;
				Data16_g170761.NormalOS = In_NormalOS16_g170761;
				Data16_g170761.NormalWS = In_NormalWS16_g170761;
				Data16_g170761.NormalRawOS = In_NormalRawOS16_g170761;
				Data16_g170761.NormalRawWS = In_NormalRawWS16_g170761;
				Data16_g170761.TangentOS = In_TangentOS16_g170761;
				Data16_g170761.ViewDirWS = In_ViewDirWS16_g170761;
				Data16_g170761.VertexData = In_VertexData16_g170761;
				Data16_g170761.PhaseData = In_PhaseData16_g170761;
				Data16_g170761.BoundsData = In_BoundsData16_g170761;
				Data16_g170761.RotationData = In_RotationData16_g170761;
				}
				TVEModelData Data15_g170774 = Data16_g170761;
				float Out_Dummy15_g170774 = 0;
				float3 Out_PositionOS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170774 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170774 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170774 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170774 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170774 = float3( 0,0,0 );
				float4 Out_VertexData15_g170774 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170774 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170774 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170774 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170774 = Data15_g170774.Dummy;
				Out_PositionOS15_g170774 = Data15_g170774.PositionOS;
				Out_PositionWS15_g170774 = Data15_g170774.PositionWS;
				Out_PositionWO15_g170774 = Data15_g170774.PositionWO;
				Out_PositionRawOS15_g170774 = Data15_g170774.PositionRawOS;
				Out_PositionAddOS15_g170774 = Data15_g170774.PositionAddOS;
				Out_PivotOS15_g170774 = Data15_g170774.PivotOS;
				Out_PivotWS15_g170774 = Data15_g170774.PivotWS;
				Out_PivotWO15_g170774 = Data15_g170774.PivotWO;
				Out_NormalOS15_g170774 = Data15_g170774.NormalOS;
				Out_NormalWS15_g170774 = Data15_g170774.NormalWS;
				Out_NormalRawOS15_g170774 = Data15_g170774.NormalRawOS;
				Out_NormalRawWS15_g170774 = Data15_g170774.NormalRawWS;
				Out_TangentOS15_g170774 = Data15_g170774.TangentOS;
				Out_ViewDirWS15_g170774 = Data15_g170774.ViewDirWS;
				Out_VertexData15_g170774 = Data15_g170774.VertexData;
				Out_PhaseData15_g170774 = Data15_g170774.PhaseData;
				Out_BoundsData15_g170774 = Data15_g170774.BoundsData;
				Out_RotationData15_g170774 = Data15_g170774.RotationData;
				}
				float3 temp_output_31_0_g170771 = Out_PositionOS15_g170774;
				float3 temp_output_6_0_g170785 = ( temp_output_31_0_g170771 + _DisableSRPBatcher );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170785 = ( temp_output_6_0_g170785 + ( 0.0 * 0.0 ) );
				#else
				float3 staticSwitch14_g170785 = temp_output_6_0_g170785;
				#endif
				
				output.ase_texcoord4.xyz = vertexToFrag73_g170196;
				output.ase_texcoord5.xyz = vertexToFrag76_g170196;
				output.ase_texcoord6.xyz = ase_normalWS;
				float3 ase_tangentWS = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				output.ase_texcoord7.xyz = ase_tangentWS;
				float ase_tangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_bitangentWS = cross( ase_normalWS, ase_tangentWS ) * ase_tangentSign;
				output.ase_texcoord8.xyz = ase_bitangentWS;
				float temp_output_6_0_g170497 = ( _MotionHighlightValue * Global_DistMask1820_g170474 * ( Tiny_Mask218_g170474 * Tiny_Mask218_g170474 ) * ( Global_Wave1475_g170474 * Global_Wave1475_g170474 * Global_Wave1475_g170474 * Global_Wave1475_g170474 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Wave_Mask4324 = staticSwitch14_g170497;
				float4 appendResult23_g170573 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask4324));
				float4 vertexToFrag24_g170573 = appendResult23_g170573;
				output.ase_texcoord9 = vertexToFrag24_g170573;
				
				output.ase_texcoord2 = inputMesh.ase_texcoord;
				output.ase_texcoord3.xy = inputMesh.ase_texcoord2.xy;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord3.zw = 0;
				output.ase_texcoord4.w = 0;
				output.ase_texcoord5.w = 0;
				output.ase_texcoord6.w = 0;
				output.ase_texcoord7.w = 0;
				output.ase_texcoord8.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = staticSwitch14_g170785;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170774;
				inputMesh.tangentOS = Out_TangentOS15_g170774;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				output.positionCS = TransformWorldToHClip(positionRWS);
				output.clipPosV = output.positionCS;
				output.positionRWS = positionRWS;
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif

						#if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
					)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				UNITY_SETUP_INSTANCE_ID(packedInput);
		
				float3 PositionRWS = packedInput.positionRWS;
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float4 ClipPos = packedInput.clipPosV;
				float4 ScreenPos = ComputeScreenPos( packedInput.clipPosV, _ProjectionParams.x );

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;
				input.positionRWS = PositionRWS;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half IsFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				AlphaSurfaceDescription surfaceDescription = (AlphaSurfaceDescription)0;
				float localCustomAlphaClip21_g170784 = ( 0.0 );
				float localBreakData4_g170777 = ( 0.0 );
				float localCompData3_g170764 = ( 0.0 );
				TVEVisualData Data3_g170764 = (TVEVisualData)0;
				half Dummy145_g170762 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170764 = Dummy145_g170762;
				float localBreakData4_g170763 = ( 0.0 );
				float localCompData3_g170732 = ( 0.0 );
				TVEVisualData Data3_g170732 = (TVEVisualData)0;
				half Dummy145_g170727 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170732 = Dummy145_g170727;
				float localBreakData4_g170731 = ( 0.0 );
				float localCompData3_g170709 = ( 0.0 );
				TVEVisualData Data3_g170709 = (TVEVisualData)0;
				half Dummy594_g170706 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170709 = Dummy594_g170706;
				float localBreakData4_g170708 = ( 0.0 );
				float localCompData3_g170692 = ( 0.0 );
				TVEVisualData Data3_g170692 = (TVEVisualData)0;
				half Dummy594_g170691 = ( _CutoutCategory + _CutoutEnd + _CutoutBakeMode );
				float In_Dummy3_g170692 = Dummy594_g170691;
				float localBreakData4_g170694 = ( 0.0 );
				float localCompData3_g170664 = ( 0.0 );
				TVEVisualData Data3_g170664 = (TVEVisualData)0;
				half Dummy594_g170662 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170664 = Dummy594_g170662;
				float localBreakData4_g170663 = ( 0.0 );
				float localCompData3_g170628 = ( 0.0 );
				TVEVisualData Data3_g170628 = (TVEVisualData)0;
				half Dummy594_g170625 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170628 = Dummy594_g170625;
				float localBreakData4_g170626 = ( 0.0 );
				float localCompData3_g170624 = ( 0.0 );
				TVEVisualData Data3_g170624 = (TVEVisualData)0;
				float In_Dummy3_g170624 = 0.0;
				float localBreakData4_g170623 = ( 0.0 );
				float localCompData3_g170601 = ( 0.0 );
				TVEVisualData Data3_g170601 = (TVEVisualData)0;
				half Dummy205_g170598 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170601 = Dummy205_g170598;
				float localBreakData4_g170600 = ( 0.0 );
				float localCompData3_g170578 = ( 0.0 );
				TVEVisualData Data3_g170578 = (TVEVisualData)0;
				half Dummy205_g170574 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170578 = Dummy205_g170574;
				float localBreakData4_g170579 = ( 0.0 );
				float localCompData3_g170567 = ( 0.0 );
				TVEVisualData Data3_g170567 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170567 = Dummy220_g170564;
				float localBreakData4_g170566 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170447 = ( 0.0 );
				TVEVisualData Data3_g170447 = (TVEVisualData)0;
				half4 Dummy944_g170438 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170447 = Dummy944_g170438.x;
				float localBreakData4_g170446 = ( 0.0 );
				float localCompData3_g170415 = ( 0.0 );
				TVEVisualData Data3_g170415 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170415 = Dummy946_g170394.x;
				float localBreakData4_g170405 = ( 0.0 );
				float localCompData3_g170387 = ( 0.0 );
				TVEVisualData Data3_g170387 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170387 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170380) = _MainAlbedoTex;
				float localFilterTexture19_g170383 = ( 0.0 );
				SamplerState SS19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170383 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170383 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170383 = SamplerDefault19_g170383;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170383 = SamplerDefault19_g170383;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170383 = SamplerPoint19_g170383;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170383 = SamplerLow19_g170383;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170383 = SamplerMedium19_g170383;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170383 = SamplerHigh19_g170383;
				#endif
				}
				SamplerState Sampler276_g170380 = SS19_g170383;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170380 = Local_Coords180_g170372;
				half4 Coords276_g170380 = temp_output_37_0_g170380;
				half2 TexCoord276_g170380 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170380 = SampleMain( Texture276_g170380 , Sampler276_g170380 , Coords276_g170380 , TexCoord276_g170380 );
				TEXTURE2D(Texture275_g170380) = _MainAlbedoTex;
				SamplerState Sampler275_g170380 = SS19_g170383;
				half4 Coords275_g170380 = temp_output_37_0_g170380;
				half2 TexCoord275_g170380 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170380 = SampleExtra( Texture275_g170380 , Sampler275_g170380 , Coords275_g170380 , TexCoord275_g170380 );
				TEXTURE2D(Texture238_g170380) = _MainAlbedoTex;
				SamplerState Sampler238_g170380 = SS19_g170383;
				half4 Coords238_g170380 = temp_output_37_0_g170380;
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord4.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord5.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 ase_normalWS = packedInput.ase_texcoord6.xyz;
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170386 = Data16_g170201;
				float Out_Dummy15_g170386 = 0;
				float3 Out_PositionWS15_g170386 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170386 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170386 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170386 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170386 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170386 = float3( 0,0,0 );
				float4 Out_VertexData15_g170386 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170386 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170386 = Data15_g170386.Dummy;
				Out_PositionWS15_g170386 = Data15_g170386.PositionWS;
				Out_PositionWO15_g170386 = Data15_g170386.PositionWO;
				Out_PivotWS15_g170386 = Data15_g170386.PivotWS;
				Out_PivotWO15_g170386 = Data15_g170386.PivotWO;
				Out_NormalWS15_g170386 = Data15_g170386.NormalWS;
				Out_ViewDirWS15_g170386 = Data15_g170386.ViewDirWS;
				Out_VertexData15_g170386 = Data15_g170386.VertexData;
				Out_BoundsData15_g170386 = Data15_g170386.BoundsData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170386;
				float3 temp_output_279_0_g170380 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170380 = temp_output_279_0_g170380;
				half4 localSamplePlanar2D238_g170380 = SamplePlanar2D( Texture238_g170380 , Sampler238_g170380 , Coords238_g170380 , WorldPosition238_g170380 );
				TEXTURE2D(Texture246_g170380) = _MainAlbedoTex;
				SamplerState Sampler246_g170380 = SS19_g170383;
				half4 Coords246_g170380 = temp_output_37_0_g170380;
				half3 WorldPosition246_g170380 = temp_output_279_0_g170380;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170386;
				float3 temp_output_280_0_g170380 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170380 = temp_output_280_0_g170380;
				half4 localSamplePlanar3D246_g170380 = SamplePlanar3D( Texture246_g170380 , Sampler246_g170380 , Coords246_g170380 , WorldPosition246_g170380 , WorldNormal246_g170380 );
				TEXTURE2D(Texture234_g170380) = _MainAlbedoTex;
				SamplerState Sampler234_g170380 = SS19_g170383;
				float4 Coords234_g170380 = temp_output_37_0_g170380;
				float3 WorldPosition234_g170380 = temp_output_279_0_g170380;
				float4 localSampleStochastic2D234_g170380 = SampleStochastic2D( Texture234_g170380 , Sampler234_g170380 , Coords234_g170380 , WorldPosition234_g170380 );
				TEXTURE2D(Texture263_g170380) = _MainAlbedoTex;
				SamplerState Sampler263_g170380 = SS19_g170383;
				half4 Coords263_g170380 = temp_output_37_0_g170380;
				half3 WorldPosition263_g170380 = temp_output_279_0_g170380;
				half3 WorldNormal263_g170380 = temp_output_280_0_g170380;
				half4 localSampleStochastic3D263_g170380 = SampleStochastic3D( Texture263_g170380 , Sampler263_g170380 , Coords263_g170380 , WorldPosition263_g170380 , WorldNormal263_g170380 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170380;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170380;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170380;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170380;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170380;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170380;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170380;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170382) = _MainShaderTex;
				float localFilterTexture30_g170385 = ( 0.0 );
				SamplerState SS30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170385 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170385 = SamplerDefault30_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170385 = SamplerDefault30_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170385 = SamplerPoint30_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170385 = SamplerLow30_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170385 = SamplerMedium30_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170385 = SamplerHigh30_g170385;
				#endif
				}
				SamplerState Sampler276_g170382 = SS30_g170385;
				float4 temp_output_37_0_g170382 = Local_Coords180_g170372;
				half4 Coords276_g170382 = temp_output_37_0_g170382;
				half2 TexCoord276_g170382 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170382 = SampleMain( Texture276_g170382 , Sampler276_g170382 , Coords276_g170382 , TexCoord276_g170382 );
				TEXTURE2D(Texture275_g170382) = _MainShaderTex;
				SamplerState Sampler275_g170382 = SS30_g170385;
				half4 Coords275_g170382 = temp_output_37_0_g170382;
				half2 TexCoord275_g170382 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170382 = SampleExtra( Texture275_g170382 , Sampler275_g170382 , Coords275_g170382 , TexCoord275_g170382 );
				TEXTURE2D(Texture238_g170382) = _MainShaderTex;
				SamplerState Sampler238_g170382 = SS30_g170385;
				half4 Coords238_g170382 = temp_output_37_0_g170382;
				float3 temp_output_279_0_g170382 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170382 = temp_output_279_0_g170382;
				half4 localSamplePlanar2D238_g170382 = SamplePlanar2D( Texture238_g170382 , Sampler238_g170382 , Coords238_g170382 , WorldPosition238_g170382 );
				TEXTURE2D(Texture246_g170382) = _MainShaderTex;
				SamplerState Sampler246_g170382 = SS30_g170385;
				half4 Coords246_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition246_g170382 = temp_output_279_0_g170382;
				float3 temp_output_280_0_g170382 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170382 = temp_output_280_0_g170382;
				half4 localSamplePlanar3D246_g170382 = SamplePlanar3D( Texture246_g170382 , Sampler246_g170382 , Coords246_g170382 , WorldPosition246_g170382 , WorldNormal246_g170382 );
				TEXTURE2D(Texture234_g170382) = _MainShaderTex;
				SamplerState Sampler234_g170382 = SS30_g170385;
				float4 Coords234_g170382 = temp_output_37_0_g170382;
				float3 WorldPosition234_g170382 = temp_output_279_0_g170382;
				float4 localSampleStochastic2D234_g170382 = SampleStochastic2D( Texture234_g170382 , Sampler234_g170382 , Coords234_g170382 , WorldPosition234_g170382 );
				TEXTURE2D(Texture263_g170382) = _MainShaderTex;
				SamplerState Sampler263_g170382 = SS30_g170385;
				half4 Coords263_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition263_g170382 = temp_output_279_0_g170382;
				half3 WorldNormal263_g170382 = temp_output_280_0_g170382;
				half4 localSampleStochastic3D263_g170382 = SampleStochastic3D( Texture263_g170382 , Sampler263_g170382 , Coords263_g170382 , WorldPosition263_g170382 , WorldNormal263_g170382 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170382;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170382;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170382;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170377 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170388 = _MainMultiRemap.x;
				float temp_output_9_0_g170388 = ( clampResult17_g170377 - temp_output_7_0_g170388 );
				half Local_MultiMask78_g170372 = saturate( ( ( temp_output_9_0_g170388 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170387 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170387 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170381) = _MainNormalTex;
				float localFilterTexture29_g170384 = ( 0.0 );
				SamplerState SS29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170384 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170384 = SamplerDefault29_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170384 = SamplerDefault29_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170384 = SamplerPoint29_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170384 = SamplerLow29_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170384 = SamplerMedium29_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170384 = SamplerHigh29_g170384;
				#endif
				}
				SamplerState Sampler276_g170381 = SS29_g170384;
				float4 temp_output_37_0_g170381 = Local_Coords180_g170372;
				half4 Coords276_g170381 = temp_output_37_0_g170381;
				half2 TexCoord276_g170381 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170381 = SampleMain( Texture276_g170381 , Sampler276_g170381 , Coords276_g170381 , TexCoord276_g170381 );
				TEXTURE2D(Texture275_g170381) = _MainNormalTex;
				SamplerState Sampler275_g170381 = SS29_g170384;
				half4 Coords275_g170381 = temp_output_37_0_g170381;
				half2 TexCoord275_g170381 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170381 = SampleExtra( Texture275_g170381 , Sampler275_g170381 , Coords275_g170381 , TexCoord275_g170381 );
				TEXTURE2D(Texture238_g170381) = _MainNormalTex;
				SamplerState Sampler238_g170381 = SS29_g170384;
				half4 Coords238_g170381 = temp_output_37_0_g170381;
				float3 temp_output_279_0_g170381 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170381 = temp_output_279_0_g170381;
				half4 localSamplePlanar2D238_g170381 = SamplePlanar2D( Texture238_g170381 , Sampler238_g170381 , Coords238_g170381 , WorldPosition238_g170381 );
				TEXTURE2D(Texture246_g170381) = _MainNormalTex;
				SamplerState Sampler246_g170381 = SS29_g170384;
				half4 Coords246_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition246_g170381 = temp_output_279_0_g170381;
				float3 temp_output_280_0_g170381 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170381 = temp_output_280_0_g170381;
				half4 localSamplePlanar3D246_g170381 = SamplePlanar3D( Texture246_g170381 , Sampler246_g170381 , Coords246_g170381 , WorldPosition246_g170381 , WorldNormal246_g170381 );
				TEXTURE2D(Texture234_g170381) = _MainNormalTex;
				SamplerState Sampler234_g170381 = SS29_g170384;
				float4 Coords234_g170381 = temp_output_37_0_g170381;
				float3 WorldPosition234_g170381 = temp_output_279_0_g170381;
				float4 localSampleStochastic2D234_g170381 = SampleStochastic2D( Texture234_g170381 , Sampler234_g170381 , Coords234_g170381 , WorldPosition234_g170381 );
				TEXTURE2D(Texture263_g170381) = _MainNormalTex;
				SamplerState Sampler263_g170381 = SS29_g170384;
				half4 Coords263_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition263_g170381 = temp_output_279_0_g170381;
				half3 WorldNormal263_g170381 = temp_output_280_0_g170381;
				half4 localSampleStochastic3D263_g170381 = SampleStochastic3D( Texture263_g170381 , Sampler263_g170381 , Coords263_g170381 , WorldPosition263_g170381 , WorldNormal263_g170381 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170381;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170381;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170381;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3 ase_tangentWS = packedInput.ase_texcoord7.xyz;
				float3 ase_bitangentWS = packedInput.ase_texcoord8.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_tangentWS,ase_bitangentWS,ase_normalWS);
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170387 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( ase_tangentWS.x, ase_bitangentWS.x, ase_normalWS.x );
				float3 tanToWorld1 = float3( ase_tangentWS.y, ase_bitangentWS.y, ase_normalWS.y );
				float3 tanToWorld2 = float3( ase_tangentWS.z, ase_bitangentWS.z, ase_normalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3(dot(tanToWorld0,tanNormal74_g170375), dot(tanToWorld1,tanNormal74_g170375), dot(tanToWorld2,tanNormal74_g170375)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170387 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170387 = Local_Masks109_g170372;
				float4 In_Emissive3_g170387 = half4(1,1,1,1);
				float3 temp_output_3_0_g170376 = Local_Albedo139_g170372;
				float dotResult20_g170376 = dot( temp_output_3_0_g170376 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170376;
				float In_Grayscale3_g170387 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170387 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170387 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170387 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170387 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170387 = temp_cast_4;
				float In_Transmission3_g170387 = 1.0;
				float In_Thickness3_g170387 = 0.0;
				float In_Diffusion3_g170387 = 0.0;
				{
				Data3_g170387.Dummy = In_Dummy3_g170387;
				Data3_g170387.Albedo = In_Albedo3_g170387;
				Data3_g170387.AlbedoRaw = In_AlbedoRaw3_g170387;
				Data3_g170387.NormalTS = In_NormalTS3_g170387;
				Data3_g170387.NormalWS = In_NormalWS3_g170387;
				Data3_g170387.Shader = In_Shader3_g170387;
				Data3_g170387.Emissive= In_Emissive3_g170387;
				Data3_g170387.MultiMask = In_MultiMask3_g170387;
				Data3_g170387.Grayscale = In_Grayscale3_g170387;
				Data3_g170387.Luminosity = In_Luminosity3_g170387;
				Data3_g170387.AlphaClip = In_AlphaClip3_g170387;
				Data3_g170387.AlphaFade = In_AlphaFade3_g170387;
				Data3_g170387.Translucency = In_Translucency3_g170387;
				Data3_g170387.Transmission = In_Transmission3_g170387;
				Data3_g170387.Thickness = In_Thickness3_g170387;
				Data3_g170387.Diffusion = In_Diffusion3_g170387;
				}
				TVEVisualData Data4_g170405 = Data3_g170387;
				float Out_Dummy4_g170405 = 0;
				float3 Out_Albedo4_g170405 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170405 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170405 = float2( 0,0 );
				float3 Out_NormalWS4_g170405 = float3( 0,0,0 );
				float4 Out_Shader4_g170405 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170405 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170405 = 0;
				float Out_Grayscale4_g170405 = 0;
				float Out_Luminosity4_g170405 = 0;
				float Out_AlphaClip4_g170405 = 0;
				float Out_AlphaFade4_g170405 = 0;
				float3 Out_Translucency4_g170405 = float3( 0,0,0 );
				float Out_Transmission4_g170405 = 0;
				float Out_Thickness4_g170405 = 0;
				float Out_Diffusion4_g170405 = 0;
				{
				Out_Dummy4_g170405 = Data4_g170405.Dummy;
				Out_Albedo4_g170405 = Data4_g170405.Albedo;
				Out_AlbedoRaw4_g170405 = Data4_g170405.AlbedoRaw;
				Out_NormalTS4_g170405 = Data4_g170405.NormalTS;
				Out_NormalWS4_g170405 = Data4_g170405.NormalWS;
				Out_Shader4_g170405 = Data4_g170405.Shader;
				Out_Emissive4_g170405= Data4_g170405.Emissive;
				Out_MultiMask4_g170405 = Data4_g170405.MultiMask;
				Out_Grayscale4_g170405 = Data4_g170405.Grayscale;
				Out_Luminosity4_g170405= Data4_g170405.Luminosity;
				Out_AlphaClip4_g170405 = Data4_g170405.AlphaClip;
				Out_AlphaFade4_g170405 = Data4_g170405.AlphaFade;
				Out_Translucency4_g170405 = Data4_g170405.Translucency;
				Out_Transmission4_g170405 = Data4_g170405.Transmission;
				Out_Thickness4_g170405 = Data4_g170405.Thickness;
				Out_Diffusion4_g170405 = Data4_g170405.Diffusion;
				}
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170405;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				float localFilterTexture19_g170411 = ( 0.0 );
				SamplerState SS19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170411 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170411 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170411 = SamplerDefault19_g170411;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170411 = SamplerDefault19_g170411;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170411 = SamplerPoint19_g170411;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170411 = SamplerLow19_g170411;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170411 = SamplerMedium19_g170411;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170411 = SamplerHigh19_g170411;
				#endif
				}
				SamplerState Sampler276_g170395 = SS19_g170411;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = SS19_g170411;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = SS19_g170411;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170414 = Data16_g170201;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				}
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = SS19_g170411;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = SS19_g170411;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = SS19_g170411;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				float localFilterTexture30_g170413 = ( 0.0 );
				SamplerState SS30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170413 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170413 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170413 = SamplerDefault30_g170413;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170413 = SamplerDefault30_g170413;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170413 = SamplerPoint30_g170413;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170413 = SamplerLow30_g170413;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170413 = SamplerMedium30_g170413;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170413 = SamplerHigh30_g170413;
				#endif
				}
				SamplerState Sampler276_g170397 = SS30_g170413;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = SS30_g170413;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = SS30_g170413;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = SS30_g170413;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = SS30_g170413;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = SS30_g170413;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170416 = _SecondMultiRemap.x;
				float temp_output_9_0_g170416 = ( clampResult17_g170401 - temp_output_7_0_g170416 );
				float temp_output_765_0_g170394 = saturate( ( ( temp_output_9_0_g170416 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170418 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170422 = _SecondMaskRemap.x;
				float temp_output_9_0_g170422 = ( clampResult17_g170418 - temp_output_7_0_g170422 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170422 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half Visual_Luminosity1041_g170394 = Out_Luminosity4_g170405;
				float clampResult17_g170427 = clamp( Visual_Luminosity1041_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170428 = _SecondLumaRemap.x;
				float temp_output_9_0_g170428 = ( clampResult17_g170427 - temp_output_7_0_g170428 );
				float lerpResult1036_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170428 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170394 = lerpResult1036_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170405;
				float clampResult17_g170423 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _SecondProjRemap.x;
				float temp_output_9_0_g170425 = ( clampResult17_g170423 - temp_output_7_0_g170425 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170425 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170414;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170419 = _second_vert_mode;
				float temp_output_30_0_g170419 = ( break965_g170394.x * break33_g170419.x );
				float temp_output_29_0_g170419 = ( break965_g170394.y * break33_g170419.y );
				float temp_output_31_0_g170419 = ( break965_g170394.z * break33_g170419.z );
				float temp_output_28_0_g170419 = ( temp_output_30_0_g170419 + temp_output_29_0_g170419 + temp_output_31_0_g170419 + ( break965_g170394.w * break33_g170419.w ) );
				float clampResult17_g170417 = clamp( temp_output_28_0_g170419 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170421 = _SecondMeshRemap.x;
				float temp_output_9_0_g170421 = ( clampResult17_g170417 - temp_output_7_0_g170421 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170421 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170420 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170420 = ( temp_output_6_0_g170420 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170420 = temp_output_6_0_g170420;
				#endif
				half Blend_VertMask918_g170394 = staticSwitch14_g170420;
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatParams204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintParams204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowParams204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoParams204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeParams204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormParams204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowParams204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatParams = In_CoatParams204_g170214;
				Data204_g170214.PaintParams = In_PaintParams204_g170214;
				Data204_g170214.GlowParams = In_GlowParams204_g170214;
				Data204_g170214.AtmoParams = In_AtmoParams204_g170214;
				Data204_g170214.FadeParams = In_FadeParams204_g170214;
				Data204_g170214.FormParams= In_FormParams204_g170214;
				Data204_g170214.FlowParams = In_FlowParams204_g170214;
				}
				TVEGlobalData Data15_g170404 = Data204_g170214;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170404 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatParams15_g170404 = Data15_g170404.CoatParams;
				Out_PaintParams15_g170404 = Data15_g170404.PaintParams;
				Out_GlowParams15_g170404 = Data15_g170404.GlowParams;
				Out_AtmoParams15_g170404= Data15_g170404.AtmoParams;
				Out_FadeParams15_g170404= Data15_g170404.FadeParams;
				Out_FormParams15_g170404 = Data15_g170404.FormParams;
				Out_FlowParams15_g170404 = Data15_g170404.FlowParams;
				}
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170404;
				float temp_output_6_0_g170429 = (Global_CoatParams975_g170394).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170429 = ( temp_output_6_0_g170429 + ( _SecondElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170429 = temp_output_6_0_g170429;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = staticSwitch14_g170429;
				#else
				float staticSwitch971_g170394 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170394 = lerp( 1.0 , staticSwitch971_g170394 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170394 = lerpResult1013_g170394;
				float clampResult17_g170424 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_LumaMask1033_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170426 = _SecondBlendRemap.x;
				float temp_output_9_0_g170426 = ( clampResult17_g170424 - temp_output_7_0_g170426 );
				half Blend_Mask412_g170394 = ( saturate( ( ( temp_output_9_0_g170426 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170415 = Final_Albedo601_g170394;
				float3 In_AlbedoRaw3_g170415 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170405;
				float2 lerpResult40_g170406 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				float localFilterTexture29_g170412 = ( 0.0 );
				SamplerState SS29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170412 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170412 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170412 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170412 = SamplerDefault29_g170412;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170412 = SamplerDefault29_g170412;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170412 = SamplerPoint29_g170412;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170412 = SamplerLow29_g170412;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170412 = SamplerMedium29_g170412;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170412 = SamplerHigh29_g170412;
				#endif
				}
				SamplerState Sampler276_g170396 = SS29_g170412;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = SS29_g170412;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = SS29_g170412;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = SS29_g170412;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = SS29_g170412;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = SS29_g170412;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170406 = ( lerpResult40_g170406 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170406 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170415 = Final_NormalTS612_g170394;
				float3 appendResult68_g170407 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170407 = appendResult68_g170407;
				float3 worldNormal74_g170407 = normalize( float3(dot(tanToWorld0,tanNormal74_g170407), dot(tanToWorld1,tanNormal74_g170407), dot(tanToWorld2,tanNormal74_g170407)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170407;
				float3 In_NormalWS3_g170415 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170405;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170415 = Final_Masks613_g170394;
				float4 In_Emissive3_g170415 = Out_Emissive4_g170405;
				float3 temp_output_3_0_g170409 = Final_Albedo601_g170394;
				float dotResult20_g170409 = dot( temp_output_3_0_g170409 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170409;
				float In_Grayscale3_g170415 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170415 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170405;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170415 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170405;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170415 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170405;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170415 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170415 = Out_Translucency4_g170405;
				float In_Transmission3_g170415 = Out_Transmission4_g170405;
				float In_Thickness3_g170415 = Out_Thickness4_g170405;
				float In_Diffusion3_g170415 = Out_Diffusion4_g170405;
				{
				Data3_g170415.Dummy = In_Dummy3_g170415;
				Data3_g170415.Albedo = In_Albedo3_g170415;
				Data3_g170415.AlbedoRaw = In_AlbedoRaw3_g170415;
				Data3_g170415.NormalTS = In_NormalTS3_g170415;
				Data3_g170415.NormalWS = In_NormalWS3_g170415;
				Data3_g170415.Shader = In_Shader3_g170415;
				Data3_g170415.Emissive= In_Emissive3_g170415;
				Data3_g170415.MultiMask = In_MultiMask3_g170415;
				Data3_g170415.Grayscale = In_Grayscale3_g170415;
				Data3_g170415.Luminosity = In_Luminosity3_g170415;
				Data3_g170415.AlphaClip = In_AlphaClip3_g170415;
				Data3_g170415.AlphaFade = In_AlphaFade3_g170415;
				Data3_g170415.Translucency = In_Translucency3_g170415;
				Data3_g170415.Transmission = In_Transmission3_g170415;
				Data3_g170415.Thickness = In_Thickness3_g170415;
				Data3_g170415.Diffusion = In_Diffusion3_g170415;
				}
				TVEVisualData Data4_g170446 = Data3_g170415;
				float Out_Dummy4_g170446 = 0;
				float3 Out_Albedo4_g170446 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170446 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170446 = float2( 0,0 );
				float3 Out_NormalWS4_g170446 = float3( 0,0,0 );
				float4 Out_Shader4_g170446 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170446 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170446 = 0;
				float Out_Grayscale4_g170446 = 0;
				float Out_Luminosity4_g170446 = 0;
				float Out_AlphaClip4_g170446 = 0;
				float Out_AlphaFade4_g170446 = 0;
				float3 Out_Translucency4_g170446 = float3( 0,0,0 );
				float Out_Transmission4_g170446 = 0;
				float Out_Thickness4_g170446 = 0;
				float Out_Diffusion4_g170446 = 0;
				{
				Out_Dummy4_g170446 = Data4_g170446.Dummy;
				Out_Albedo4_g170446 = Data4_g170446.Albedo;
				Out_AlbedoRaw4_g170446 = Data4_g170446.AlbedoRaw;
				Out_NormalTS4_g170446 = Data4_g170446.NormalTS;
				Out_NormalWS4_g170446 = Data4_g170446.NormalWS;
				Out_Shader4_g170446 = Data4_g170446.Shader;
				Out_Emissive4_g170446= Data4_g170446.Emissive;
				Out_MultiMask4_g170446 = Data4_g170446.MultiMask;
				Out_Grayscale4_g170446 = Data4_g170446.Grayscale;
				Out_Luminosity4_g170446= Data4_g170446.Luminosity;
				Out_AlphaClip4_g170446 = Data4_g170446.AlphaClip;
				Out_AlphaFade4_g170446 = Data4_g170446.AlphaFade;
				Out_Translucency4_g170446 = Data4_g170446.Translucency;
				Out_Transmission4_g170446 = Data4_g170446.Transmission;
				Out_Thickness4_g170446 = Data4_g170446.Thickness;
				Out_Diffusion4_g170446 = Data4_g170446.Diffusion;
				}
				half3 Visual_Albedo527_g170438 = Out_Albedo4_g170446;
				TEXTURE2D(Texture276_g170439) = _ThirdAlbedoTex;
				float localFilterTexture19_g170455 = ( 0.0 );
				SamplerState SS19_g170455 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170455 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170455 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170455 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170455 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170455 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170455 = SamplerDefault19_g170455;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170455 = SamplerDefault19_g170455;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170455 = SamplerPoint19_g170455;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170455 = SamplerLow19_g170455;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170455 = SamplerMedium19_g170455;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170455 = SamplerHigh19_g170455;
				#endif
				}
				SamplerState Sampler276_g170439 = SS19_g170455;
				half4 Local_LayerCoords790_g170438 = _third_coord_value;
				float4 temp_output_37_0_g170439 = Local_LayerCoords790_g170438;
				half4 Coords276_g170439 = temp_output_37_0_g170439;
				half2 TexCoord276_g170439 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170439 = SampleMain( Texture276_g170439 , Sampler276_g170439 , Coords276_g170439 , TexCoord276_g170439 );
				TEXTURE2D(Texture275_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170439 = SS19_g170455;
				half4 Coords275_g170439 = temp_output_37_0_g170439;
				half2 TexCoord275_g170439 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170439 = SampleExtra( Texture275_g170439 , Sampler275_g170439 , Coords275_g170439 , TexCoord275_g170439 );
				TEXTURE2D(Texture238_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170439 = SS19_g170455;
				half4 Coords238_g170439 = temp_output_37_0_g170439;
				TVEModelData Data15_g170458 = Data16_g170201;
				float Out_Dummy15_g170458 = 0;
				float3 Out_PositionWS15_g170458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170458 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170458 = float3( 0,0,0 );
				float4 Out_VertexData15_g170458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170458 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170458 = Data15_g170458.Dummy;
				Out_PositionWS15_g170458 = Data15_g170458.PositionWS;
				Out_PositionWO15_g170458 = Data15_g170458.PositionWO;
				Out_PivotWS15_g170458 = Data15_g170458.PivotWS;
				Out_PivotWO15_g170458 = Data15_g170458.PivotWO;
				Out_NormalWS15_g170458 = Data15_g170458.NormalWS;
				Out_ViewDirWS15_g170458 = Data15_g170458.ViewDirWS;
				Out_VertexData15_g170458 = Data15_g170458.VertexData;
				Out_BoundsData15_g170458 = Data15_g170458.BoundsData;
				}
				half3 Model_PositionWO636_g170438 = Out_PositionWO15_g170458;
				float3 temp_output_279_0_g170439 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170439 = temp_output_279_0_g170439;
				half4 localSamplePlanar2D238_g170439 = SamplePlanar2D( Texture238_g170439 , Sampler238_g170439 , Coords238_g170439 , WorldPosition238_g170439 );
				TEXTURE2D(Texture246_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170439 = SS19_g170455;
				half4 Coords246_g170439 = temp_output_37_0_g170439;
				half3 WorldPosition246_g170439 = temp_output_279_0_g170439;
				half3 Model_NormalWS869_g170438 = Out_NormalWS15_g170458;
				float3 temp_output_280_0_g170439 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170439 = temp_output_280_0_g170439;
				half4 localSamplePlanar3D246_g170439 = SamplePlanar3D( Texture246_g170439 , Sampler246_g170439 , Coords246_g170439 , WorldPosition246_g170439 , WorldNormal246_g170439 );
				TEXTURE2D(Texture234_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170439 = SS19_g170455;
				float4 Coords234_g170439 = temp_output_37_0_g170439;
				float3 WorldPosition234_g170439 = temp_output_279_0_g170439;
				float4 localSampleStochastic2D234_g170439 = SampleStochastic2D( Texture234_g170439 , Sampler234_g170439 , Coords234_g170439 , WorldPosition234_g170439 );
				TEXTURE2D(Texture263_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170439 = SS19_g170455;
				half4 Coords263_g170439 = temp_output_37_0_g170439;
				half3 WorldPosition263_g170439 = temp_output_279_0_g170439;
				half3 WorldNormal263_g170439 = temp_output_280_0_g170439;
				half4 localSampleStochastic3D263_g170439 = SampleStochastic3D( Texture263_g170439 , Sampler263_g170439 , Coords263_g170439 , WorldPosition263_g170439 , WorldNormal263_g170439 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170438 = localSampleMain276_g170439;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170438 = localSampleExtra275_g170439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170438 = localSamplePlanar2D238_g170439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170438 = localSamplePlanar3D246_g170439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170438 = localSampleStochastic2D234_g170439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170438 = localSampleStochastic3D263_g170439;
				#else
				float4 staticSwitch693_g170438 = localSampleMain276_g170439;
				#endif
				half4 Local_AlbedoTex777_g170438 = staticSwitch693_g170438;
				float3 lerpResult716_g170438 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170438).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170438 = lerpResult716_g170438;
				TEXTURE2D(Texture276_g170441) = _ThirdShaderTex;
				float localFilterTexture30_g170457 = ( 0.0 );
				SamplerState SS30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170457 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170457 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170457 = SamplerDefault30_g170457;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170457 = SamplerDefault30_g170457;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170457 = SamplerPoint30_g170457;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170457 = SamplerLow30_g170457;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170457 = SamplerMedium30_g170457;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170457 = SamplerHigh30_g170457;
				#endif
				}
				SamplerState Sampler276_g170441 = SS30_g170457;
				float4 temp_output_37_0_g170441 = Local_LayerCoords790_g170438;
				half4 Coords276_g170441 = temp_output_37_0_g170441;
				half2 TexCoord276_g170441 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170441 = SampleMain( Texture276_g170441 , Sampler276_g170441 , Coords276_g170441 , TexCoord276_g170441 );
				TEXTURE2D(Texture275_g170441) = _ThirdShaderTex;
				SamplerState Sampler275_g170441 = SS30_g170457;
				half4 Coords275_g170441 = temp_output_37_0_g170441;
				half2 TexCoord275_g170441 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170441 = SampleExtra( Texture275_g170441 , Sampler275_g170441 , Coords275_g170441 , TexCoord275_g170441 );
				TEXTURE2D(Texture238_g170441) = _ThirdShaderTex;
				SamplerState Sampler238_g170441 = SS30_g170457;
				half4 Coords238_g170441 = temp_output_37_0_g170441;
				float3 temp_output_279_0_g170441 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170441 = temp_output_279_0_g170441;
				half4 localSamplePlanar2D238_g170441 = SamplePlanar2D( Texture238_g170441 , Sampler238_g170441 , Coords238_g170441 , WorldPosition238_g170441 );
				TEXTURE2D(Texture246_g170441) = _ThirdShaderTex;
				SamplerState Sampler246_g170441 = SS30_g170457;
				half4 Coords246_g170441 = temp_output_37_0_g170441;
				half3 WorldPosition246_g170441 = temp_output_279_0_g170441;
				float3 temp_output_280_0_g170441 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170441 = temp_output_280_0_g170441;
				half4 localSamplePlanar3D246_g170441 = SamplePlanar3D( Texture246_g170441 , Sampler246_g170441 , Coords246_g170441 , WorldPosition246_g170441 , WorldNormal246_g170441 );
				TEXTURE2D(Texture234_g170441) = _ThirdShaderTex;
				SamplerState Sampler234_g170441 = SS30_g170457;
				float4 Coords234_g170441 = temp_output_37_0_g170441;
				float3 WorldPosition234_g170441 = temp_output_279_0_g170441;
				float4 localSampleStochastic2D234_g170441 = SampleStochastic2D( Texture234_g170441 , Sampler234_g170441 , Coords234_g170441 , WorldPosition234_g170441 );
				TEXTURE2D(Texture263_g170441) = _ThirdShaderTex;
				SamplerState Sampler263_g170441 = SS30_g170457;
				half4 Coords263_g170441 = temp_output_37_0_g170441;
				half3 WorldPosition263_g170441 = temp_output_279_0_g170441;
				half3 WorldNormal263_g170441 = temp_output_280_0_g170441;
				half4 localSampleStochastic3D263_g170441 = SampleStochastic3D( Texture263_g170441 , Sampler263_g170441 , Coords263_g170441 , WorldPosition263_g170441 , WorldNormal263_g170441 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170438 = localSampleMain276_g170441;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170438 = localSampleExtra275_g170441;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170438 = localSamplePlanar2D238_g170441;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170438 = localSamplePlanar3D246_g170441;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170438 = localSampleStochastic2D234_g170441;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170438 = localSampleStochastic3D263_g170441;
				#else
				float4 staticSwitch722_g170438 = localSampleMain276_g170441;
				#endif
				half4 Local_ShaderTex775_g170438 = staticSwitch722_g170438;
				float lerpResult739_g170438 = lerp( 1.0 , (Local_ShaderTex775_g170438).y , _ThirdOcclusionValue);
				float4 appendResult749_g170438 = (float4(( (Local_ShaderTex775_g170438).x * _ThirdMetallicValue ) , lerpResult739_g170438 , (Local_ShaderTex775_g170438).z , ( (Local_ShaderTex775_g170438).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170438 = appendResult749_g170438;
				float clampResult17_g170444 = clamp( (Local_Masks750_g170438).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170459 = ( clampResult17_g170444 - temp_output_7_0_g170459 );
				float temp_output_765_0_g170438 = saturate( ( ( temp_output_9_0_g170459 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170438 = temp_output_765_0_g170438;
				float lerpResult705_g170438 = lerp( 1.0 , Local_MultiMask767_g170438 , _ThirdColorMode);
				float4 lerpResult706_g170438 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170438);
				half3 Local_ColorRGB774_g170438 = (lerpResult706_g170438).rgb;
				half3 Local_Albedo768_g170438 = ( Local_AlbedoRGB771_g170438 * Local_ColorRGB774_g170438 );
				float3 lerpResult985_g170438 = lerp( Local_Albedo768_g170438 , ( Visual_Albedo527_g170438 * Local_Albedo768_g170438 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170453) = _ThirdMaskTex;
				SamplerState Sampler276_g170453 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170438 = _third_mask_coord_value;
				float4 temp_output_37_0_g170453 = Local_MaskCoords813_g170438;
				half4 Coords276_g170453 = temp_output_37_0_g170453;
				half2 TexCoord276_g170453 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170453 = SampleMain( Texture276_g170453 , Sampler276_g170453 , Coords276_g170453 , TexCoord276_g170453 );
				TEXTURE2D(Texture275_g170453) = _ThirdMaskTex;
				SamplerState Sampler275_g170453 = sampler_Linear_Repeat;
				half4 Coords275_g170453 = temp_output_37_0_g170453;
				half2 TexCoord275_g170453 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170453 = SampleExtra( Texture275_g170453 , Sampler275_g170453 , Coords275_g170453 , TexCoord275_g170453 );
				TEXTURE2D(Texture238_g170453) = _ThirdMaskTex;
				SamplerState Sampler238_g170453 = sampler_Linear_Repeat;
				half4 Coords238_g170453 = temp_output_37_0_g170453;
				float3 temp_output_279_0_g170453 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170453 = temp_output_279_0_g170453;
				half4 localSamplePlanar2D238_g170453 = SamplePlanar2D( Texture238_g170453 , Sampler238_g170453 , Coords238_g170453 , WorldPosition238_g170453 );
				TEXTURE2D(Texture246_g170453) = _ThirdMaskTex;
				SamplerState Sampler246_g170453 = sampler_Linear_Repeat;
				half4 Coords246_g170453 = temp_output_37_0_g170453;
				half3 WorldPosition246_g170453 = temp_output_279_0_g170453;
				float3 temp_output_280_0_g170453 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170453 = temp_output_280_0_g170453;
				half4 localSamplePlanar3D246_g170453 = SamplePlanar3D( Texture246_g170453 , Sampler246_g170453 , Coords246_g170453 , WorldPosition246_g170453 , WorldNormal246_g170453 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170438 = localSampleMain276_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170438 = localSampleExtra275_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170438 = localSamplePlanar2D238_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170438 = localSamplePlanar3D246_g170453;
				#else
				float4 staticSwitch817_g170438 = localSampleMain276_g170453;
				#endif
				half4 Local_MaskTex861_g170438 = staticSwitch817_g170438;
				float clampResult17_g170461 = clamp( (Local_MaskTex861_g170438).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170465 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170465 = ( clampResult17_g170461 - temp_output_7_0_g170465 );
				float lerpResult1028_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170465 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170438 = lerpResult1028_g170438;
				half Visual_Luminosity1049_g170438 = Out_Luminosity4_g170446;
				float clampResult17_g170470 = clamp( Visual_Luminosity1049_g170438 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170471 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170471 = ( clampResult17_g170470 - temp_output_7_0_g170471 );
				float lerpResult1040_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170471 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170438 = lerpResult1040_g170438;
				half4 Model_VertexMasks960_g170438 = Out_VertexData15_g170458;
				float4 break961_g170438 = Model_VertexMasks960_g170438;
				float4 break33_g170462 = _third_vert_mode;
				float temp_output_30_0_g170462 = ( break961_g170438.x * break33_g170462.x );
				float temp_output_29_0_g170462 = ( break961_g170438.y * break33_g170462.y );
				float temp_output_31_0_g170462 = ( break961_g170438.z * break33_g170462.z );
				float temp_output_28_0_g170462 = ( temp_output_30_0_g170462 + temp_output_29_0_g170462 + temp_output_31_0_g170462 + ( break961_g170438.w * break33_g170462.w ) );
				float clampResult17_g170460 = clamp( temp_output_28_0_g170462 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170464 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170464 = ( clampResult17_g170460 - temp_output_7_0_g170464 );
				float lerpResult1026_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170464 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170463 = lerpResult1026_g170438;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170463 = ( temp_output_6_0_g170463 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170463 = temp_output_6_0_g170463;
				#endif
				half Blend_VertMask913_g170438 = staticSwitch14_g170463;
				half3 Visual_NormalWS953_g170438 = Out_NormalWS4_g170446;
				float clampResult17_g170466 = clamp( saturate( (Visual_NormalWS953_g170438).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170468 = _ThirdProjRemap.x;
				float temp_output_9_0_g170468 = ( clampResult17_g170466 - temp_output_7_0_g170468 );
				float lerpResult1004_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170468 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170438 = lerpResult1004_g170438;
				TVEGlobalData Data15_g170448 = Data204_g170214;
				float Out_Dummy15_g170448 = 0;
				float4 Out_CoatParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170448 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170448 = Data15_g170448.Dummy;
				Out_CoatParams15_g170448 = Data15_g170448.CoatParams;
				Out_PaintParams15_g170448 = Data15_g170448.PaintParams;
				Out_GlowParams15_g170448 = Data15_g170448.GlowParams;
				Out_AtmoParams15_g170448= Data15_g170448.AtmoParams;
				Out_FadeParams15_g170448= Data15_g170448.FadeParams;
				Out_FormParams15_g170448 = Data15_g170448.FormParams;
				Out_FlowParams15_g170448 = Data15_g170448.FlowParams;
				}
				half4 Global_CoatParams972_g170438 = Out_CoatParams15_g170448;
				float temp_output_6_0_g170472 = (Global_CoatParams972_g170438).y;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170472 = ( temp_output_6_0_g170472 + ( _ThirdElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170472 = temp_output_6_0_g170472;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170438 = staticSwitch14_g170472;
				#else
				float staticSwitch1056_g170438 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170438 = lerp( 1.0 , staticSwitch1056_g170438 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170438 = lerpResult1060_g170438;
				float clampResult17_g170467 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170438 * Blend_LumaMask1046_g170438 * Blend_VertMask913_g170438 * Blend_ProjMask912_g170438 * Blend_GlobalMask968_g170438 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170469 = ( clampResult17_g170467 - temp_output_7_0_g170469 );
				half Detail_Mask412_g170438 = ( saturate( ( ( temp_output_9_0_g170469 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170438 = lerp( Visual_Albedo527_g170438 , lerpResult985_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170438 = lerpResult989_g170438;
				#else
				float3 staticSwitch415_g170438 = Visual_Albedo527_g170438;
				#endif
				half3 Final_Albedo601_g170438 = staticSwitch415_g170438;
				float3 In_Albedo3_g170447 = Final_Albedo601_g170438;
				float3 In_AlbedoRaw3_g170447 = Final_Albedo601_g170438;
				half2 Visual_NormalTS529_g170438 = Out_NormalTS4_g170446;
				float2 lerpResult40_g170449 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170438 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170440) = _ThirdNormalTex;
				float localFilterTexture29_g170456 = ( 0.0 );
				SamplerState SS29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170456 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170456 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170456 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170456 = SamplerDefault29_g170456;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170456 = SamplerDefault29_g170456;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170456 = SamplerPoint29_g170456;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170456 = SamplerLow29_g170456;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170456 = SamplerMedium29_g170456;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170456 = SamplerHigh29_g170456;
				#endif
				}
				SamplerState Sampler276_g170440 = SS29_g170456;
				float4 temp_output_37_0_g170440 = Local_LayerCoords790_g170438;
				half4 Coords276_g170440 = temp_output_37_0_g170440;
				half2 TexCoord276_g170440 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170440 = SampleMain( Texture276_g170440 , Sampler276_g170440 , Coords276_g170440 , TexCoord276_g170440 );
				TEXTURE2D(Texture275_g170440) = _ThirdNormalTex;
				SamplerState Sampler275_g170440 = SS29_g170456;
				half4 Coords275_g170440 = temp_output_37_0_g170440;
				half2 TexCoord275_g170440 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170440 = SampleExtra( Texture275_g170440 , Sampler275_g170440 , Coords275_g170440 , TexCoord275_g170440 );
				TEXTURE2D(Texture238_g170440) = _ThirdNormalTex;
				SamplerState Sampler238_g170440 = SS29_g170456;
				half4 Coords238_g170440 = temp_output_37_0_g170440;
				float3 temp_output_279_0_g170440 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170440 = temp_output_279_0_g170440;
				half4 localSamplePlanar2D238_g170440 = SamplePlanar2D( Texture238_g170440 , Sampler238_g170440 , Coords238_g170440 , WorldPosition238_g170440 );
				TEXTURE2D(Texture246_g170440) = _ThirdNormalTex;
				SamplerState Sampler246_g170440 = SS29_g170456;
				half4 Coords246_g170440 = temp_output_37_0_g170440;
				half3 WorldPosition246_g170440 = temp_output_279_0_g170440;
				float3 temp_output_280_0_g170440 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170440 = temp_output_280_0_g170440;
				half4 localSamplePlanar3D246_g170440 = SamplePlanar3D( Texture246_g170440 , Sampler246_g170440 , Coords246_g170440 , WorldPosition246_g170440 , WorldNormal246_g170440 );
				TEXTURE2D(Texture234_g170440) = _ThirdNormalTex;
				SamplerState Sampler234_g170440 = SS29_g170456;
				float4 Coords234_g170440 = temp_output_37_0_g170440;
				float3 WorldPosition234_g170440 = temp_output_279_0_g170440;
				float4 localSampleStochastic2D234_g170440 = SampleStochastic2D( Texture234_g170440 , Sampler234_g170440 , Coords234_g170440 , WorldPosition234_g170440 );
				TEXTURE2D(Texture263_g170440) = _ThirdNormalTex;
				SamplerState Sampler263_g170440 = SS29_g170456;
				half4 Coords263_g170440 = temp_output_37_0_g170440;
				half3 WorldPosition263_g170440 = temp_output_279_0_g170440;
				half3 WorldNormal263_g170440 = temp_output_280_0_g170440;
				half4 localSampleStochastic3D263_g170440 = SampleStochastic3D( Texture263_g170440 , Sampler263_g170440 , Coords263_g170440 , WorldPosition263_g170440 , WorldNormal263_g170440 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170438 = localSampleMain276_g170440;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170438 = localSampleExtra275_g170440;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170438 = localSamplePlanar2D238_g170440;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170438 = localSamplePlanar3D246_g170440;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170438 = localSampleStochastic2D234_g170440;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170438 = localSampleStochastic3D263_g170440;
				#else
				float4 staticSwitch698_g170438 = localSampleMain276_g170440;
				#endif
				half4 Local_NormalTex776_g170438 = staticSwitch698_g170438;
				half4 Normal_Packed45_g170442 = Local_NormalTex776_g170438;
				float2 appendResult58_g170442 = (float2(( (Normal_Packed45_g170442).x * (Normal_Packed45_g170442).w ) , (Normal_Packed45_g170442).y));
				half2 Normal_Default50_g170442 = appendResult58_g170442;
				half2 Normal_ASTC41_g170442 = (Normal_Packed45_g170442).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170442 = Normal_ASTC41_g170442;
				#else
				float2 staticSwitch38_g170442 = Normal_Default50_g170442;
				#endif
				half2 Normal_NO_DTX544_g170442 = (Normal_Packed45_g170442).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170442 = Normal_NO_DTX544_g170442;
				#else
				float2 staticSwitch37_g170442 = staticSwitch38_g170442;
				#endif
				float2 temp_output_724_0_g170438 = ( (staticSwitch37_g170442*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170443 = temp_output_724_0_g170438;
				float2 break71_g170443 = Normal_Planar45_g170443;
				float3 appendResult72_g170443 = (float3(break71_g170443.x , 0.0 , break71_g170443.y));
				float2 temp_output_858_0_g170438 = (mul( ase_worldToTangent, appendResult72_g170443 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#else
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#endif
				half2 Local_NormalTS729_g170438 = staticSwitch727_g170438;
				float2 temp_output_36_0_g170449 = ( lerpResult40_g170449 + Local_NormalTS729_g170438 );
				float2 lerpResult405_g170438 = lerp( Visual_NormalTS529_g170438 , temp_output_36_0_g170449 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170438 = lerpResult405_g170438;
				#else
				float2 staticSwitch418_g170438 = Visual_NormalTS529_g170438;
				#endif
				half2 Final_NormalTS612_g170438 = staticSwitch418_g170438;
				float2 In_NormalTS3_g170447 = Final_NormalTS612_g170438;
				float3 appendResult68_g170450 = (float3(Final_NormalTS612_g170438 , 1.0));
				float3 tanNormal74_g170450 = appendResult68_g170450;
				float3 worldNormal74_g170450 = normalize( float3(dot(tanToWorld0,tanNormal74_g170450), dot(tanToWorld1,tanNormal74_g170450), dot(tanToWorld2,tanNormal74_g170450)) );
				half3 Final_NormalWS956_g170438 = worldNormal74_g170450;
				float3 In_NormalWS3_g170447 = Final_NormalWS956_g170438;
				half4 Visual_Shader531_g170438 = Out_Shader4_g170446;
				float4 lerpResult1000_g170438 = lerp( Local_Masks750_g170438 , ( Visual_Shader531_g170438 * Local_Masks750_g170438 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170438 = lerp( Visual_Shader531_g170438 , lerpResult1000_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170438 = lerpResult998_g170438;
				#else
				float4 staticSwitch451_g170438 = Visual_Shader531_g170438;
				#endif
				half4 Final_Masks613_g170438 = staticSwitch451_g170438;
				float4 In_Shader3_g170447 = Final_Masks613_g170438;
				float4 In_Emissive3_g170447 = Out_Emissive4_g170446;
				float3 temp_output_3_0_g170452 = Final_Albedo601_g170438;
				float dotResult20_g170452 = dot( temp_output_3_0_g170452 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170438 = dotResult20_g170452;
				float In_Grayscale3_g170447 = Final_Grayscale615_g170438;
				float clampResult651_g170438 = clamp( saturate( ( Final_Grayscale615_g170438 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170438 = clampResult651_g170438;
				float In_Luminosity3_g170447 = Final_Luminosity652_g170438;
				half Visual_MultiMask547_g170438 = Out_MultiMask4_g170446;
				float lerpResult477_g170438 = lerp( Visual_MultiMask547_g170438 , Local_MultiMask767_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch482_g170438 = lerpResult477_g170438;
				#else
				float staticSwitch482_g170438 = Visual_MultiMask547_g170438;
				#endif
				half Final_MultiMask572_g170438 = staticSwitch482_g170438;
				float In_MultiMask3_g170447 = Final_MultiMask572_g170438;
				half Visual_AlphaClip559_g170438 = Out_AlphaClip4_g170446;
				float temp_output_718_0_g170438 = (Local_AlbedoTex777_g170438).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170438 = ( temp_output_718_0_g170438 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170438 = temp_output_718_0_g170438;
				#endif
				half Local_AlphaClip772_g170438 = staticSwitch924_g170438;
				float lerpResult448_g170438 = lerp( Visual_AlphaClip559_g170438 , Local_AlphaClip772_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch564_g170438 = lerpResult448_g170438;
				#else
				float staticSwitch564_g170438 = Visual_AlphaClip559_g170438;
				#endif
				half Final_AlphaClip602_g170438 = staticSwitch564_g170438;
				float In_AlphaClip3_g170447 = Final_AlphaClip602_g170438;
				half Visual_AlphaFade588_g170438 = Out_AlphaFade4_g170446;
				half Local_AlphaFade773_g170438 = (lerpResult706_g170438).a;
				float lerpResult604_g170438 = lerp( Visual_AlphaFade588_g170438 , Local_AlphaFade773_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch608_g170438 = lerpResult604_g170438;
				#else
				float staticSwitch608_g170438 = Visual_AlphaFade588_g170438;
				#endif
				half Final_AlphaFade611_g170438 = staticSwitch608_g170438;
				float In_AlphaFade3_g170447 = Final_AlphaFade611_g170438;
				float3 In_Translucency3_g170447 = Out_Translucency4_g170446;
				float In_Transmission3_g170447 = Out_Transmission4_g170446;
				float In_Thickness3_g170447 = Out_Thickness4_g170446;
				float In_Diffusion3_g170447 = Out_Diffusion4_g170446;
				{
				Data3_g170447.Dummy = In_Dummy3_g170447;
				Data3_g170447.Albedo = In_Albedo3_g170447;
				Data3_g170447.AlbedoRaw = In_AlbedoRaw3_g170447;
				Data3_g170447.NormalTS = In_NormalTS3_g170447;
				Data3_g170447.NormalWS = In_NormalWS3_g170447;
				Data3_g170447.Shader = In_Shader3_g170447;
				Data3_g170447.Emissive= In_Emissive3_g170447;
				Data3_g170447.MultiMask = In_MultiMask3_g170447;
				Data3_g170447.Grayscale = In_Grayscale3_g170447;
				Data3_g170447.Luminosity = In_Luminosity3_g170447;
				Data3_g170447.AlphaClip = In_AlphaClip3_g170447;
				Data3_g170447.AlphaFade = In_AlphaFade3_g170447;
				Data3_g170447.Translucency = In_Translucency3_g170447;
				Data3_g170447.Transmission = In_Transmission3_g170447;
				Data3_g170447.Thickness = In_Thickness3_g170447;
				Data3_g170447.Diffusion = In_Diffusion3_g170447;
				}
				TVEVisualData Data4_g170545 = Data3_g170447;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				{
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				}
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170552 = Data16_g170201;
				float Out_Dummy15_g170552 = 0;
				float3 Out_PositionWS15_g170552 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170552 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170552 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170552 = float3( 0,0,0 );
				float4 Out_VertexData15_g170552 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170552 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170552 = Data15_g170552.Dummy;
				Out_PositionWS15_g170552 = Data15_g170552.PositionWS;
				Out_PositionWO15_g170552 = Data15_g170552.PositionWO;
				Out_PivotWS15_g170552 = Data15_g170552.PivotWS;
				Out_PivotWO15_g170552 = Data15_g170552.PivotWO;
				Out_NormalWS15_g170552 = Data15_g170552.NormalWS;
				Out_ViewDirWS15_g170552 = Data15_g170552.ViewDirWS;
				Out_VertexData15_g170552 = Data15_g170552.VertexData;
				Out_BoundsData15_g170552 = Data15_g170552.BoundsData;
				}
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170552;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170550 = _occlusion_vert_mode;
				float temp_output_30_0_g170550 = ( break208_g170544.x * break33_g170550.x );
				float temp_output_29_0_g170550 = ( break208_g170544.y * break33_g170550.y );
				float temp_output_31_0_g170550 = ( break208_g170544.z * break33_g170550.z );
				float temp_output_28_0_g170550 = ( temp_output_30_0_g170550 + temp_output_29_0_g170550 + temp_output_31_0_g170550 + ( break208_g170544.w * break33_g170550.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170550;
				float clampResult17_g170548 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170553 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170553 = ( clampResult17_g170548 - temp_output_7_0_g170553 );
				float temp_output_6_0_g170549 = saturate( ( ( temp_output_9_0_g170553 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170549 = ( temp_output_6_0_g170549 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170549 = temp_output_6_0_g170549;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170549;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				{
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				}
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				{
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				}
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170562 = Data16_g170201;
				float Out_Dummy15_g170562 = 0;
				float3 Out_PositionWS15_g170562 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170562 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170562 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170562 = float3( 0,0,0 );
				float4 Out_VertexData15_g170562 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170562 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170562 = Data15_g170562.Dummy;
				Out_PositionWS15_g170562 = Data15_g170562.PositionWS;
				Out_PositionWO15_g170562 = Data15_g170562.PositionWO;
				Out_PivotWS15_g170562 = Data15_g170562.PivotWS;
				Out_PivotWO15_g170562 = Data15_g170562.PivotWO;
				Out_NormalWS15_g170562 = Data15_g170562.NormalWS;
				Out_ViewDirWS15_g170562 = Data15_g170562.ViewDirWS;
				Out_VertexData15_g170562 = Data15_g170562.VertexData;
				Out_BoundsData15_g170562 = Data15_g170562.BoundsData;
				}
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170562;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170563 = _GradientMeshRemap.x;
				float temp_output_9_0_g170563 = ( clampResult17_g170560 - temp_output_7_0_g170563 );
				float temp_output_6_0_g170561 = saturate( ( ( temp_output_9_0_g170563 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170561 = ( temp_output_6_0_g170561 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170561 = temp_output_6_0_g170561;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170561;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				{
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				}
				TVEVisualData Data4_g170566 = Data3_g170557;
				float Out_Dummy4_g170566 = 0;
				float3 Out_Albedo4_g170566 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170566 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170566 = float2( 0,0 );
				float3 Out_NormalWS4_g170566 = float3( 0,0,0 );
				float4 Out_Shader4_g170566 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170566 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170566 = 0;
				float Out_Grayscale4_g170566 = 0;
				float Out_Luminosity4_g170566 = 0;
				float Out_AlphaClip4_g170566 = 0;
				float Out_AlphaFade4_g170566 = 0;
				float3 Out_Translucency4_g170566 = float3( 0,0,0 );
				float Out_Transmission4_g170566 = 0;
				float Out_Thickness4_g170566 = 0;
				float Out_Diffusion4_g170566 = 0;
				{
				Out_Dummy4_g170566 = Data4_g170566.Dummy;
				Out_Albedo4_g170566 = Data4_g170566.Albedo;
				Out_AlbedoRaw4_g170566 = Data4_g170566.AlbedoRaw;
				Out_NormalTS4_g170566 = Data4_g170566.NormalTS;
				Out_NormalWS4_g170566 = Data4_g170566.NormalWS;
				Out_Shader4_g170566 = Data4_g170566.Shader;
				Out_Emissive4_g170566= Data4_g170566.Emissive;
				Out_MultiMask4_g170566 = Data4_g170566.MultiMask;
				Out_Grayscale4_g170566 = Data4_g170566.Grayscale;
				Out_Luminosity4_g170566= Data4_g170566.Luminosity;
				Out_AlphaClip4_g170566 = Data4_g170566.AlphaClip;
				Out_AlphaFade4_g170566 = Data4_g170566.AlphaFade;
				Out_Translucency4_g170566 = Data4_g170566.Translucency;
				Out_Transmission4_g170566 = Data4_g170566.Transmission;
				Out_Thickness4_g170566 = Data4_g170566.Thickness;
				Out_Diffusion4_g170566 = Data4_g170566.Diffusion;
				}
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170566;
				TVEModelData Data15_g170571 = Data16_g170201;
				float Out_Dummy15_g170571 = 0;
				float3 Out_PositionWS15_g170571 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170571 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170571 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170571 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170571 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170571 = float3( 0,0,0 );
				float4 Out_VertexData15_g170571 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170571 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170571 = Data15_g170571.Dummy;
				Out_PositionWS15_g170571 = Data15_g170571.PositionWS;
				Out_PositionWO15_g170571 = Data15_g170571.PositionWO;
				Out_PivotWS15_g170571 = Data15_g170571.PivotWS;
				Out_PivotWO15_g170571 = Data15_g170571.PivotWO;
				Out_NormalWS15_g170571 = Data15_g170571.NormalWS;
				Out_ViewDirWS15_g170571 = Data15_g170571.ViewDirWS;
				Out_VertexData15_g170571 = Data15_g170571.VertexData;
				Out_BoundsData15_g170571 = Data15_g170571.BoundsData;
				}
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170571;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170571;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170568 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170570 = clamp( tex3DNode60_g170568.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170572 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170572 = ( clampResult17_g170570 - temp_output_7_0_g170572 );
				float temp_output_238_0_g170564 = saturate( ( ( temp_output_9_0_g170572 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170566;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170567 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170567 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170567 = Out_NormalTS4_g170566;
				float3 In_NormalWS3_g170567 = Out_NormalWS4_g170566;
				float4 In_Shader3_g170567 = Out_Shader4_g170566;
				float4 In_Emissive3_g170567 = Out_Emissive4_g170566;
				float3 temp_output_3_0_g170565 = Final_Albedo160_g170564;
				float dotResult20_g170565 = dot( temp_output_3_0_g170565 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170564 = dotResult20_g170565;
				float In_Grayscale3_g170567 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170567 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170567 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170567 = Out_AlphaClip4_g170566;
				float In_AlphaFade3_g170567 = Out_AlphaFade4_g170566;
				float3 In_Translucency3_g170567 = Out_Translucency4_g170566;
				float In_Transmission3_g170567 = Out_Transmission4_g170566;
				float In_Thickness3_g170567 = Out_Thickness4_g170566;
				float In_Diffusion3_g170567 = Out_Diffusion4_g170566;
				{
				Data3_g170567.Dummy = In_Dummy3_g170567;
				Data3_g170567.Albedo = In_Albedo3_g170567;
				Data3_g170567.AlbedoRaw = In_AlbedoRaw3_g170567;
				Data3_g170567.NormalTS = In_NormalTS3_g170567;
				Data3_g170567.NormalWS = In_NormalWS3_g170567;
				Data3_g170567.Shader = In_Shader3_g170567;
				Data3_g170567.Emissive= In_Emissive3_g170567;
				Data3_g170567.MultiMask = In_MultiMask3_g170567;
				Data3_g170567.Grayscale = In_Grayscale3_g170567;
				Data3_g170567.Luminosity = In_Luminosity3_g170567;
				Data3_g170567.AlphaClip = In_AlphaClip3_g170567;
				Data3_g170567.AlphaFade = In_AlphaFade3_g170567;
				Data3_g170567.Translucency = In_Translucency3_g170567;
				Data3_g170567.Transmission = In_Transmission3_g170567;
				Data3_g170567.Thickness = In_Thickness3_g170567;
				Data3_g170567.Diffusion = In_Diffusion3_g170567;
				}
				TVEVisualData Data4_g170579 = Data3_g170567;
				float Out_Dummy4_g170579 = 0;
				float3 Out_Albedo4_g170579 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170579 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170579 = float2( 0,0 );
				float3 Out_NormalWS4_g170579 = float3( 0,0,0 );
				float4 Out_Shader4_g170579 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170579 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170579 = 0;
				float Out_Grayscale4_g170579 = 0;
				float Out_Luminosity4_g170579 = 0;
				float Out_AlphaClip4_g170579 = 0;
				float Out_AlphaFade4_g170579 = 0;
				float3 Out_Translucency4_g170579 = float3( 0,0,0 );
				float Out_Transmission4_g170579 = 0;
				float Out_Thickness4_g170579 = 0;
				float Out_Diffusion4_g170579 = 0;
				{
				Out_Dummy4_g170579 = Data4_g170579.Dummy;
				Out_Albedo4_g170579 = Data4_g170579.Albedo;
				Out_AlbedoRaw4_g170579 = Data4_g170579.AlbedoRaw;
				Out_NormalTS4_g170579 = Data4_g170579.NormalTS;
				Out_NormalWS4_g170579 = Data4_g170579.NormalWS;
				Out_Shader4_g170579 = Data4_g170579.Shader;
				Out_Emissive4_g170579= Data4_g170579.Emissive;
				Out_MultiMask4_g170579 = Data4_g170579.MultiMask;
				Out_Grayscale4_g170579 = Data4_g170579.Grayscale;
				Out_Luminosity4_g170579= Data4_g170579.Luminosity;
				Out_AlphaClip4_g170579 = Data4_g170579.AlphaClip;
				Out_AlphaFade4_g170579 = Data4_g170579.AlphaFade;
				Out_Translucency4_g170579 = Data4_g170579.Translucency;
				Out_Transmission4_g170579 = Data4_g170579.Transmission;
				Out_Thickness4_g170579 = Data4_g170579.Thickness;
				Out_Diffusion4_g170579 = Data4_g170579.Diffusion;
				}
				half3 Visual_Albedo139_g170574 = Out_Albedo4_g170579;
				float temp_output_200_12_g170574 = Out_Grayscale4_g170579;
				half Visual_Grayscale150_g170574 = temp_output_200_12_g170574;
				float3 temp_cast_33 = (Visual_Grayscale150_g170574).xxx;
				TVEGlobalData Data15_g170575 = Data204_g170214;
				float Out_Dummy15_g170575 = 0;
				float4 Out_CoatParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170575 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170575 = Data15_g170575.Dummy;
				Out_CoatParams15_g170575 = Data15_g170575.CoatParams;
				Out_PaintParams15_g170575 = Data15_g170575.PaintParams;
				Out_GlowParams15_g170575 = Data15_g170575.GlowParams;
				Out_AtmoParams15_g170575= Data15_g170575.AtmoParams;
				Out_FadeParams15_g170575= Data15_g170575.FadeParams;
				Out_FormParams15_g170575 = Data15_g170575.FormParams;
				Out_FlowParams15_g170575 = Data15_g170575.FlowParams;
				}
				half4 Global_PaintParams209_g170574 = Out_PaintParams15_g170575;
				float4 temp_output_6_0_g170596 = Global_PaintParams209_g170574;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170596 = ( temp_output_6_0_g170596 + ( _TintingElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170596 = temp_output_6_0_g170596;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170574 = staticSwitch14_g170596;
				#else
				float4 staticSwitch283_g170574 = TVE_PaintParams;
				#endif
				float lerpResult412_g170574 = lerp( 1.0 , ( saturate( (staticSwitch283_g170574).w ) * TVE_IsEnabled ) , _TintingGlobalValue);
				half Tinting_GlobalValue285_g170574 = lerpResult412_g170574;
				float3 lerpResult368_g170574 = lerp( Visual_Albedo139_g170574 , temp_cast_33 , ( Tinting_GlobalValue285_g170574 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g170574 = (staticSwitch283_g170574).xyz;
				float temp_output_200_11_g170574 = Out_MultiMask4_g170579;
				half Visual_MultiMask181_g170574 = temp_output_200_11_g170574;
				float lerpResult147_g170574 = lerp( 1.0 , Visual_MultiMask181_g170574 , _TintingMultiValue);
				half Tinting_MutiMask121_g170574 = lerpResult147_g170574;
				half Tinting_TexMask385_g170574 = 1.0;
				float temp_output_200_15_g170574 = Out_Luminosity4_g170579;
				half Visual_Luminosity257_g170574 = temp_output_200_15_g170574;
				float clampResult17_g170586 = clamp( Visual_Luminosity257_g170574 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170591 = _TintingLumaRemap.x;
				float temp_output_9_0_g170591 = ( clampResult17_g170586 - temp_output_7_0_g170591 );
				float lerpResult228_g170574 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170591 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170574 = lerpResult228_g170574;
				TVEModelData Data15_g170580 = Data16_g170201;
				float Out_Dummy15_g170580 = 0;
				float3 Out_PositionWS15_g170580 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170580 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170580 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170580 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170580 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170580 = float3( 0,0,0 );
				float4 Out_VertexData15_g170580 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170580 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170580 = Data15_g170580.Dummy;
				Out_PositionWS15_g170580 = Data15_g170580.PositionWS;
				Out_PositionWO15_g170580 = Data15_g170580.PositionWO;
				Out_PivotWS15_g170580 = Data15_g170580.PivotWS;
				Out_PivotWO15_g170580 = Data15_g170580.PivotWO;
				Out_NormalWS15_g170580 = Data15_g170580.NormalWS;
				Out_ViewDirWS15_g170580 = Data15_g170580.ViewDirWS;
				Out_VertexData15_g170580 = Data15_g170580.VertexData;
				Out_BoundsData15_g170580 = Data15_g170580.BoundsData;
				}
				half4 Model_VertexMasks307_g170574 = Out_VertexData15_g170580;
				float4 break311_g170574 = Model_VertexMasks307_g170574;
				float4 break33_g170583 = _tinting_vert_mode;
				float temp_output_30_0_g170583 = ( break311_g170574.x * break33_g170583.x );
				float temp_output_29_0_g170583 = ( break311_g170574.y * break33_g170583.y );
				float temp_output_31_0_g170583 = ( break311_g170574.z * break33_g170583.z );
				float temp_output_28_0_g170583 = ( temp_output_30_0_g170583 + temp_output_29_0_g170583 + temp_output_31_0_g170583 + ( break311_g170574.w * break33_g170583.w ) );
				float clampResult17_g170585 = clamp( temp_output_28_0_g170583 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170592 = _TintingMeshRemap.x;
				float temp_output_9_0_g170592 = ( clampResult17_g170585 - temp_output_7_0_g170592 );
				float lerpResult370_g170574 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170592 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170587 = lerpResult370_g170574;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170587 = ( temp_output_6_0_g170587 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170587 = temp_output_6_0_g170587;
				#endif
				half Tinting_VertMask309_g170574 = staticSwitch14_g170587;
				half Tinting_NoiseMask213_g170574 = 1.0;
				half Custom_Mask345_g170574 = 1.0;
				float temp_output_7_0_g170595 = _TintingBlendRemap.x;
				float temp_output_9_0_g170595 = ( ( _TintingIntensityValue * Tinting_MutiMask121_g170574 * Tinting_TexMask385_g170574 * Tinting_LumaMask153_g170574 * Tinting_VertMask309_g170574 * Tinting_NoiseMask213_g170574 * Tinting_GlobalValue285_g170574 * Custom_Mask345_g170574 ) - temp_output_7_0_g170595 );
				half Tinting_Mask242_g170574 = ( saturate( ( ( temp_output_9_0_g170595 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170574 = lerp( Visual_Albedo139_g170574 , ( lerpResult368_g170574 * 4.594794 * Tinting_GlobalColor290_g170574 * (_TintingColor).rgb ) , Tinting_Mask242_g170574);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170574 = lerpResult90_g170574;
				#else
				float3 staticSwitch286_g170574 = Visual_Albedo139_g170574;
				#endif
				half3 Final_Albedo97_g170574 = staticSwitch286_g170574;
				float3 In_Albedo3_g170578 = Final_Albedo97_g170574;
				float3 In_AlbedoRaw3_g170578 = Out_AlbedoRaw4_g170579;
				float2 In_NormalTS3_g170578 = Out_NormalTS4_g170579;
				float3 In_NormalWS3_g170578 = Out_NormalWS4_g170579;
				float4 In_Shader3_g170578 = Out_Shader4_g170579;
				float4 In_Emissive3_g170578 = Out_Emissive4_g170579;
				float In_Grayscale3_g170578 = temp_output_200_12_g170574;
				float In_Luminosity3_g170578 = temp_output_200_15_g170574;
				float In_MultiMask3_g170578 = temp_output_200_11_g170574;
				float In_AlphaClip3_g170578 = Out_AlphaClip4_g170579;
				float In_AlphaFade3_g170578 = Out_AlphaFade4_g170579;
				float3 In_Translucency3_g170578 = Out_Translucency4_g170579;
				float In_Transmission3_g170578 = Out_Transmission4_g170579;
				float In_Thickness3_g170578 = Out_Thickness4_g170579;
				float In_Diffusion3_g170578 = Out_Diffusion4_g170579;
				{
				Data3_g170578.Dummy = In_Dummy3_g170578;
				Data3_g170578.Albedo = In_Albedo3_g170578;
				Data3_g170578.AlbedoRaw = In_AlbedoRaw3_g170578;
				Data3_g170578.NormalTS = In_NormalTS3_g170578;
				Data3_g170578.NormalWS = In_NormalWS3_g170578;
				Data3_g170578.Shader = In_Shader3_g170578;
				Data3_g170578.Emissive= In_Emissive3_g170578;
				Data3_g170578.MultiMask = In_MultiMask3_g170578;
				Data3_g170578.Grayscale = In_Grayscale3_g170578;
				Data3_g170578.Luminosity = In_Luminosity3_g170578;
				Data3_g170578.AlphaClip = In_AlphaClip3_g170578;
				Data3_g170578.AlphaFade = In_AlphaFade3_g170578;
				Data3_g170578.Translucency = In_Translucency3_g170578;
				Data3_g170578.Transmission = In_Transmission3_g170578;
				Data3_g170578.Thickness = In_Thickness3_g170578;
				Data3_g170578.Diffusion = In_Diffusion3_g170578;
				}
				TVEVisualData Data4_g170600 = Data3_g170578;
				float Out_Dummy4_g170600 = 0;
				float3 Out_Albedo4_g170600 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170600 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170600 = float2( 0,0 );
				float3 Out_NormalWS4_g170600 = float3( 0,0,0 );
				float4 Out_Shader4_g170600 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170600 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170600 = 0;
				float Out_Grayscale4_g170600 = 0;
				float Out_Luminosity4_g170600 = 0;
				float Out_AlphaClip4_g170600 = 0;
				float Out_AlphaFade4_g170600 = 0;
				float3 Out_Translucency4_g170600 = float3( 0,0,0 );
				float Out_Transmission4_g170600 = 0;
				float Out_Thickness4_g170600 = 0;
				float Out_Diffusion4_g170600 = 0;
				{
				Out_Dummy4_g170600 = Data4_g170600.Dummy;
				Out_Albedo4_g170600 = Data4_g170600.Albedo;
				Out_AlbedoRaw4_g170600 = Data4_g170600.AlbedoRaw;
				Out_NormalTS4_g170600 = Data4_g170600.NormalTS;
				Out_NormalWS4_g170600 = Data4_g170600.NormalWS;
				Out_Shader4_g170600 = Data4_g170600.Shader;
				Out_Emissive4_g170600= Data4_g170600.Emissive;
				Out_MultiMask4_g170600 = Data4_g170600.MultiMask;
				Out_Grayscale4_g170600 = Data4_g170600.Grayscale;
				Out_Luminosity4_g170600= Data4_g170600.Luminosity;
				Out_AlphaClip4_g170600 = Data4_g170600.AlphaClip;
				Out_AlphaFade4_g170600 = Data4_g170600.AlphaFade;
				Out_Translucency4_g170600 = Data4_g170600.Translucency;
				Out_Transmission4_g170600 = Data4_g170600.Transmission;
				Out_Thickness4_g170600 = Data4_g170600.Thickness;
				Out_Diffusion4_g170600 = Data4_g170600.Diffusion;
				}
				half3 Visual_Albedo292_g170598 = Out_Albedo4_g170600;
				float temp_output_280_12_g170598 = Out_Grayscale4_g170600;
				half Visual_Grayscale308_g170598 = temp_output_280_12_g170598;
				float3 temp_cast_34 = (Visual_Grayscale308_g170598).xxx;
				TVEGlobalData Data15_g170599 = Data204_g170214;
				float Out_Dummy15_g170599 = 0;
				float4 Out_CoatParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170599 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170599 = Data15_g170599.Dummy;
				Out_CoatParams15_g170599 = Data15_g170599.CoatParams;
				Out_PaintParams15_g170599 = Data15_g170599.PaintParams;
				Out_GlowParams15_g170599 = Data15_g170599.GlowParams;
				Out_AtmoParams15_g170599= Data15_g170599.AtmoParams;
				Out_FadeParams15_g170599= Data15_g170599.FadeParams;
				Out_FormParams15_g170599 = Data15_g170599.FormParams;
				Out_FlowParams15_g170599 = Data15_g170599.FlowParams;
				}
				half4 Global_AtmoParams314_g170598 = Out_AtmoParams15_g170599;
				float temp_output_6_0_g170619 = (Global_AtmoParams314_g170598).x;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170619 = ( temp_output_6_0_g170619 + ( _DrynessElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170619 = temp_output_6_0_g170619;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170598 = staticSwitch14_g170619;
				#else
				float staticSwitch351_g170598 = TVE_AtmoData.x;
				#endif
				float lerpResult505_g170598 = lerp( 1.0 , ( staticSwitch351_g170598 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalMask352_g170598 = lerpResult505_g170598;
				float3 lerpResult485_g170598 = lerp( Visual_Albedo292_g170598 , temp_cast_34 , ( Dryness_GlobalMask352_g170598 * _DrynessGrayValue ));
				half Dryness_TexMask478_g170598 = 1.0;
				float temp_output_280_11_g170598 = Out_MultiMask4_g170600;
				half Visual_MultiMask310_g170598 = temp_output_280_11_g170598;
				float lerpResult283_g170598 = lerp( 1.0 , Visual_MultiMask310_g170598 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170598 = lerpResult283_g170598;
				float temp_output_280_15_g170598 = Out_Luminosity4_g170600;
				half Visual_Luminosity309_g170598 = temp_output_280_15_g170598;
				float clampResult17_g170610 = clamp( Visual_Luminosity309_g170598 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170615 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170615 = ( clampResult17_g170610 - temp_output_7_0_g170615 );
				float lerpResult295_g170598 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170615 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170598 = lerpResult295_g170598;
				TVEModelData Data15_g170604 = Data16_g170201;
				float Out_Dummy15_g170604 = 0;
				float3 Out_PositionWS15_g170604 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170604 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170604 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170604 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170604 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170604 = float3( 0,0,0 );
				float4 Out_VertexData15_g170604 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170604 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170604 = Data15_g170604.Dummy;
				Out_PositionWS15_g170604 = Data15_g170604.PositionWS;
				Out_PositionWO15_g170604 = Data15_g170604.PositionWO;
				Out_PivotWS15_g170604 = Data15_g170604.PivotWS;
				Out_PivotWO15_g170604 = Data15_g170604.PivotWO;
				Out_NormalWS15_g170604 = Data15_g170604.NormalWS;
				Out_ViewDirWS15_g170604 = Data15_g170604.ViewDirWS;
				Out_VertexData15_g170604 = Data15_g170604.VertexData;
				Out_BoundsData15_g170604 = Data15_g170604.BoundsData;
				}
				half4 Model_VertexMasks386_g170598 = Out_VertexData15_g170604;
				float4 break375_g170598 = Model_VertexMasks386_g170598;
				float4 break33_g170607 = _dryness_vert_mode;
				float temp_output_30_0_g170607 = ( break375_g170598.x * break33_g170607.x );
				float temp_output_29_0_g170607 = ( break375_g170598.y * break33_g170607.y );
				float temp_output_31_0_g170607 = ( break375_g170598.z * break33_g170607.z );
				float temp_output_28_0_g170607 = ( temp_output_30_0_g170607 + temp_output_29_0_g170607 + temp_output_31_0_g170607 + ( break375_g170598.w * break33_g170607.w ) );
				float clampResult17_g170608 = clamp( temp_output_28_0_g170607 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170616 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170616 = ( clampResult17_g170608 - temp_output_7_0_g170616 );
				float lerpResult452_g170598 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170616 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170611 = lerpResult452_g170598;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170611 = ( temp_output_6_0_g170611 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170611 = temp_output_6_0_g170611;
				#endif
				half Dryness_VertMask378_g170598 = staticSwitch14_g170611;
				half Dryness_MaskNoise291_g170598 = 1.0;
				half Custom_Mask411_g170598 = 1.0;
				float temp_output_7_0_g170618 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170618 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170598 * Dryness_MultiMask302_g170598 * Dryness_LumaMask301_g170598 * Dryness_VertMask378_g170598 * Dryness_MaskNoise291_g170598 * Dryness_GlobalMask352_g170598 * Custom_Mask411_g170598 ) - temp_output_7_0_g170618 );
				half Dryness_Mask329_g170598 = saturate( ( ( temp_output_9_0_g170618 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170598 = lerp( Visual_Albedo292_g170598 , ( lerpResult485_g170598 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170598 = lerpResult336_g170598;
				#else
				float3 staticSwitch356_g170598 = Visual_Albedo292_g170598;
				#endif
				half3 Final_Albedo331_g170598 = staticSwitch356_g170598;
				float3 In_Albedo3_g170601 = Final_Albedo331_g170598;
				float3 In_AlbedoRaw3_g170601 = Out_AlbedoRaw4_g170600;
				float2 In_NormalTS3_g170601 = Out_NormalTS4_g170600;
				float3 In_NormalWS3_g170601 = Out_NormalWS4_g170600;
				half4 Visual_Shader415_g170598 = Out_Shader4_g170600;
				float4 break438_g170598 = Visual_Shader415_g170598;
				float4 appendResult439_g170598 = (float4(break438_g170598.x , break438_g170598.y , break438_g170598.z , ( break438_g170598.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170598 = lerp( Visual_Shader415_g170598 , appendResult439_g170598 , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170598 = lerpResult427_g170598;
				#else
				float4 staticSwitch426_g170598 = Visual_Shader415_g170598;
				#endif
				half4 Final_Shader433_g170598 = staticSwitch426_g170598;
				float4 In_Shader3_g170601 = Final_Shader433_g170598;
				float4 In_Emissive3_g170601 = Out_Emissive4_g170600;
				float In_Grayscale3_g170601 = temp_output_280_12_g170598;
				float In_Luminosity3_g170601 = temp_output_280_15_g170598;
				float In_MultiMask3_g170601 = temp_output_280_11_g170598;
				float In_AlphaClip3_g170601 = Out_AlphaClip4_g170600;
				float In_AlphaFade3_g170601 = Out_AlphaFade4_g170600;
				float3 In_Translucency3_g170601 = Out_Translucency4_g170600;
				half Visual_Transmission416_g170598 = Out_Transmission4_g170600;
				float lerpResult421_g170598 = lerp( Visual_Transmission416_g170598 , ( Visual_Transmission416_g170598 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170598 = lerpResult421_g170598;
				#else
				float staticSwitch418_g170598 = Visual_Transmission416_g170598;
				#endif
				half Final_Transmission425_g170598 = staticSwitch418_g170598;
				float In_Transmission3_g170601 = Final_Transmission425_g170598;
				float In_Thickness3_g170601 = Out_Thickness4_g170600;
				float In_Diffusion3_g170601 = Out_Diffusion4_g170600;
				{
				Data3_g170601.Dummy = In_Dummy3_g170601;
				Data3_g170601.Albedo = In_Albedo3_g170601;
				Data3_g170601.AlbedoRaw = In_AlbedoRaw3_g170601;
				Data3_g170601.NormalTS = In_NormalTS3_g170601;
				Data3_g170601.NormalWS = In_NormalWS3_g170601;
				Data3_g170601.Shader = In_Shader3_g170601;
				Data3_g170601.Emissive= In_Emissive3_g170601;
				Data3_g170601.MultiMask = In_MultiMask3_g170601;
				Data3_g170601.Grayscale = In_Grayscale3_g170601;
				Data3_g170601.Luminosity = In_Luminosity3_g170601;
				Data3_g170601.AlphaClip = In_AlphaClip3_g170601;
				Data3_g170601.AlphaFade = In_AlphaFade3_g170601;
				Data3_g170601.Translucency = In_Translucency3_g170601;
				Data3_g170601.Transmission = In_Transmission3_g170601;
				Data3_g170601.Thickness = In_Thickness3_g170601;
				Data3_g170601.Diffusion = In_Diffusion3_g170601;
				}
				TVEVisualData Data4_g170623 = Data3_g170601;
				float Out_Dummy4_g170623 = 0;
				float3 Out_Albedo4_g170623 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170623 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170623 = float2( 0,0 );
				float3 Out_NormalWS4_g170623 = float3( 0,0,0 );
				float4 Out_Shader4_g170623 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170623 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170623 = 0;
				float Out_Grayscale4_g170623 = 0;
				float Out_Luminosity4_g170623 = 0;
				float Out_AlphaClip4_g170623 = 0;
				float Out_AlphaFade4_g170623 = 0;
				float3 Out_Translucency4_g170623 = float3( 0,0,0 );
				float Out_Transmission4_g170623 = 0;
				float Out_Thickness4_g170623 = 0;
				float Out_Diffusion4_g170623 = 0;
				{
				Out_Dummy4_g170623 = Data4_g170623.Dummy;
				Out_Albedo4_g170623 = Data4_g170623.Albedo;
				Out_AlbedoRaw4_g170623 = Data4_g170623.AlbedoRaw;
				Out_NormalTS4_g170623 = Data4_g170623.NormalTS;
				Out_NormalWS4_g170623 = Data4_g170623.NormalWS;
				Out_Shader4_g170623 = Data4_g170623.Shader;
				Out_Emissive4_g170623= Data4_g170623.Emissive;
				Out_MultiMask4_g170623 = Data4_g170623.MultiMask;
				Out_Grayscale4_g170623 = Data4_g170623.Grayscale;
				Out_Luminosity4_g170623= Data4_g170623.Luminosity;
				Out_AlphaClip4_g170623 = Data4_g170623.AlphaClip;
				Out_AlphaFade4_g170623 = Data4_g170623.AlphaFade;
				Out_Translucency4_g170623 = Data4_g170623.Translucency;
				Out_Transmission4_g170623 = Data4_g170623.Transmission;
				Out_Thickness4_g170623 = Data4_g170623.Thickness;
				Out_Diffusion4_g170623 = Data4_g170623.Diffusion;
				}
				half3 Visual_Albedo127_g170622 = Out_Albedo4_g170623;
				float4 vertexToFrag24_g170573 = packedInput.ase_texcoord9;
				half4 Interp_Data4335 = vertexToFrag24_g170573;
				float clampResult208_g170622 = clamp( (Interp_Data4335).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170622 = ( Visual_Albedo127_g170622 + ( ( Visual_Albedo127_g170622 * Visual_Albedo127_g170622 * 200.0 * _motion_highlight_color ) * clampResult208_g170622 ) );
				#else
				float3 staticSwitch214_g170622 = Visual_Albedo127_g170622;
				#endif
				half3 Final_Albedo160_g170622 = staticSwitch214_g170622;
				float3 In_Albedo3_g170624 = Final_Albedo160_g170622;
				float3 In_AlbedoRaw3_g170624 = Out_AlbedoRaw4_g170623;
				float2 In_NormalTS3_g170624 = Out_NormalTS4_g170623;
				float3 In_NormalWS3_g170624 = Out_NormalWS4_g170623;
				float4 In_Shader3_g170624 = Out_Shader4_g170623;
				float4 In_Emissive3_g170624 = Out_Emissive4_g170623;
				float In_Grayscale3_g170624 = Out_Grayscale4_g170623;
				float In_Luminosity3_g170624 = Out_Luminosity4_g170623;
				float In_MultiMask3_g170624 = Out_MultiMask4_g170623;
				float In_AlphaClip3_g170624 = Out_AlphaClip4_g170623;
				float In_AlphaFade3_g170624 = Out_AlphaFade4_g170623;
				float3 In_Translucency3_g170624 = Out_Translucency4_g170623;
				float In_Transmission3_g170624 = Out_Transmission4_g170623;
				float In_Thickness3_g170624 = Out_Thickness4_g170623;
				float In_Diffusion3_g170624 = Out_Diffusion4_g170623;
				{
				Data3_g170624.Dummy = In_Dummy3_g170624;
				Data3_g170624.Albedo = In_Albedo3_g170624;
				Data3_g170624.AlbedoRaw = In_AlbedoRaw3_g170624;
				Data3_g170624.NormalTS = In_NormalTS3_g170624;
				Data3_g170624.NormalWS = In_NormalWS3_g170624;
				Data3_g170624.Shader = In_Shader3_g170624;
				Data3_g170624.Emissive= In_Emissive3_g170624;
				Data3_g170624.MultiMask = In_MultiMask3_g170624;
				Data3_g170624.Grayscale = In_Grayscale3_g170624;
				Data3_g170624.Luminosity = In_Luminosity3_g170624;
				Data3_g170624.AlphaClip = In_AlphaClip3_g170624;
				Data3_g170624.AlphaFade = In_AlphaFade3_g170624;
				Data3_g170624.Translucency = In_Translucency3_g170624;
				Data3_g170624.Transmission = In_Transmission3_g170624;
				Data3_g170624.Thickness = In_Thickness3_g170624;
				Data3_g170624.Diffusion = In_Diffusion3_g170624;
				}
				TVEVisualData Data4_g170626 = Data3_g170624;
				float Out_Dummy4_g170626 = 0;
				float3 Out_Albedo4_g170626 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170626 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170626 = float2( 0,0 );
				float3 Out_NormalWS4_g170626 = float3( 0,0,0 );
				float4 Out_Shader4_g170626 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170626 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170626 = 0;
				float Out_Grayscale4_g170626 = 0;
				float Out_Luminosity4_g170626 = 0;
				float Out_AlphaClip4_g170626 = 0;
				float Out_AlphaFade4_g170626 = 0;
				float3 Out_Translucency4_g170626 = float3( 0,0,0 );
				float Out_Transmission4_g170626 = 0;
				float Out_Thickness4_g170626 = 0;
				float Out_Diffusion4_g170626 = 0;
				{
				Out_Dummy4_g170626 = Data4_g170626.Dummy;
				Out_Albedo4_g170626 = Data4_g170626.Albedo;
				Out_AlbedoRaw4_g170626 = Data4_g170626.AlbedoRaw;
				Out_NormalTS4_g170626 = Data4_g170626.NormalTS;
				Out_NormalWS4_g170626 = Data4_g170626.NormalWS;
				Out_Shader4_g170626 = Data4_g170626.Shader;
				Out_Emissive4_g170626= Data4_g170626.Emissive;
				Out_MultiMask4_g170626 = Data4_g170626.MultiMask;
				Out_Grayscale4_g170626 = Data4_g170626.Grayscale;
				Out_Luminosity4_g170626= Data4_g170626.Luminosity;
				Out_AlphaClip4_g170626 = Data4_g170626.AlphaClip;
				Out_AlphaFade4_g170626 = Data4_g170626.AlphaFade;
				Out_Translucency4_g170626 = Data4_g170626.Translucency;
				Out_Transmission4_g170626 = Data4_g170626.Transmission;
				Out_Thickness4_g170626 = Data4_g170626.Thickness;
				Out_Diffusion4_g170626 = Data4_g170626.Diffusion;
				}
				half3 Visual_Albedo127_g170625 = Out_Albedo4_g170626;
				float3 temp_output_622_0_g170625 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170629) = _OverlayAlbedoTex;
				float localFilterTexture19_g170641 = ( 0.0 );
				SamplerState SS19_g170641 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170641 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170641 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170641 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170641 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170641 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170641 = SamplerDefault19_g170641;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170641 = SamplerDefault19_g170641;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170641 = SamplerPoint19_g170641;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170641 = SamplerLow19_g170641;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170641 = SamplerMedium19_g170641;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170641 = SamplerHigh19_g170641;
				#endif
				}
				SamplerState Sampler238_g170629 = SS19_g170641;
				float4 temp_output_6_0_g170630 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170630 = ( temp_output_6_0_g170630 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170630 = temp_output_6_0_g170630;
				#endif
				half4 Overlay_Coords639_g170625 = staticSwitch14_g170630;
				float4 temp_output_37_0_g170629 = Overlay_Coords639_g170625;
				half4 Coords238_g170629 = temp_output_37_0_g170629;
				TVEModelData Data15_g170643 = Data16_g170201;
				float Out_Dummy15_g170643 = 0;
				float3 Out_PositionWS15_g170643 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170643 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170643 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170643 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170643 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170643 = float3( 0,0,0 );
				float4 Out_VertexData15_g170643 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170643 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170643 = Data15_g170643.Dummy;
				Out_PositionWS15_g170643 = Data15_g170643.PositionWS;
				Out_PositionWO15_g170643 = Data15_g170643.PositionWO;
				Out_PivotWS15_g170643 = Data15_g170643.PivotWS;
				Out_PivotWO15_g170643 = Data15_g170643.PivotWO;
				Out_NormalWS15_g170643 = Data15_g170643.NormalWS;
				Out_ViewDirWS15_g170643 = Data15_g170643.ViewDirWS;
				Out_VertexData15_g170643 = Data15_g170643.VertexData;
				Out_BoundsData15_g170643 = Data15_g170643.BoundsData;
				}
				half3 Model_PositionWO602_g170625 = Out_PositionWO15_g170643;
				float3 temp_output_279_0_g170629 = Model_PositionWO602_g170625;
				half3 WorldPosition238_g170629 = temp_output_279_0_g170629;
				half4 localSamplePlanar2D238_g170629 = SamplePlanar2D( Texture238_g170629 , Sampler238_g170629 , Coords238_g170629 , WorldPosition238_g170629 );
				TEXTURE2D(Texture246_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170629 = SS19_g170641;
				half4 Coords246_g170629 = temp_output_37_0_g170629;
				half3 WorldPosition246_g170629 = temp_output_279_0_g170629;
				half3 Model_NormalWS712_g170625 = Out_NormalWS15_g170643;
				float3 temp_output_280_0_g170629 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170629 = temp_output_280_0_g170629;
				half4 localSamplePlanar3D246_g170629 = SamplePlanar3D( Texture246_g170629 , Sampler246_g170629 , Coords246_g170629 , WorldPosition246_g170629 , WorldNormal246_g170629 );
				TEXTURE2D(Texture234_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170629 = SS19_g170641;
				float4 Coords234_g170629 = temp_output_37_0_g170629;
				float3 WorldPosition234_g170629 = temp_output_279_0_g170629;
				float4 localSampleStochastic2D234_g170629 = SampleStochastic2D( Texture234_g170629 , Sampler234_g170629 , Coords234_g170629 , WorldPosition234_g170629 );
				TEXTURE2D(Texture263_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170629 = SS19_g170641;
				half4 Coords263_g170629 = temp_output_37_0_g170629;
				half3 WorldPosition263_g170629 = temp_output_279_0_g170629;
				half3 WorldNormal263_g170629 = temp_output_280_0_g170629;
				half4 localSampleStochastic3D263_g170629 = SampleStochastic3D( Texture263_g170629 , Sampler263_g170629 , Coords263_g170629 , WorldPosition263_g170629 , WorldNormal263_g170629 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170625 = localSamplePlanar2D238_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170625 = localSamplePlanar3D246_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170625 = localSampleStochastic2D234_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170625 = localSampleStochastic3D263_g170629;
				#else
				float4 staticSwitch676_g170625 = localSamplePlanar2D238_g170629;
				#endif
				half3 Overlay_Albedo526_g170625 = (staticSwitch676_g170625).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170625 = ( temp_output_622_0_g170625 * Overlay_Albedo526_g170625 );
				#else
				float3 staticSwitch578_g170625 = temp_output_622_0_g170625;
				#endif
				float3 temp_output_6_0_g170644 = staticSwitch578_g170625;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170644 = ( temp_output_6_0_g170644 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170644 = temp_output_6_0_g170644;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				TEXTURE2D(Texture246_g170633) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170633 = sampler_Linear_Repeat;
				float4 appendResult863_g170625 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170633 = appendResult863_g170625;
				half4 Coords246_g170633 = temp_output_37_0_g170633;
				float3 temp_output_279_0_g170633 = Model_PositionWO602_g170625;
				half3 WorldPosition246_g170633 = temp_output_279_0_g170633;
				float3 temp_output_280_0_g170633 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170633 = temp_output_280_0_g170633;
				half4 localSamplePlanar3D246_g170633 = SamplePlanar3D( Texture246_g170633 , Sampler246_g170633 , Coords246_g170633 , WorldPosition246_g170633 , WorldNormal246_g170633 );
				half Overlay_GlitterTex854_g170625 = (localSamplePlanar3D246_g170633).x;
				half3 Model_PositionWS879_g170625 = Out_PositionWS15_g170643;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170625 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170625 * 1.0 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170625 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170625 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170625 = staticSwitch868_g170625;
				half Overlay_TexMask908_g170625 = 1.0;
				float3 temp_output_739_21_g170625 = Out_NormalWS4_g170626;
				half3 Visual_NormalWS749_g170625 = temp_output_739_21_g170625;
				float clampResult17_g170650 = clamp( saturate( (Visual_NormalWS749_g170625).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170654 = _OverlayProjRemap.x;
				float temp_output_9_0_g170654 = ( clampResult17_g170650 - temp_output_7_0_g170654 );
				float lerpResult842_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170654 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170625 = lerpResult842_g170625;
				float temp_output_739_15_g170625 = Out_Luminosity4_g170626;
				half Visual_Luminosity654_g170625 = temp_output_739_15_g170625;
				float clampResult17_g170658 = clamp( Visual_Luminosity654_g170625 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170659 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170659 = ( clampResult17_g170658 - temp_output_7_0_g170659 );
				float lerpResult587_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170659 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170625 = lerpResult587_g170625;
				half4 Model_VertexMasks791_g170625 = Out_VertexData15_g170643;
				float4 break792_g170625 = Model_VertexMasks791_g170625;
				float4 break33_g170645 = _overlay_vert_mode;
				float temp_output_30_0_g170645 = ( break792_g170625.x * break33_g170645.x );
				float temp_output_29_0_g170645 = ( break792_g170625.y * break33_g170645.y );
				float temp_output_31_0_g170645 = ( break792_g170625.z * break33_g170645.z );
				float temp_output_28_0_g170645 = ( temp_output_30_0_g170645 + temp_output_29_0_g170645 + temp_output_31_0_g170645 + ( break792_g170625.w * break33_g170645.w ) );
				float clampResult17_g170646 = clamp( temp_output_28_0_g170645 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170655 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170655 = ( clampResult17_g170646 - temp_output_7_0_g170655 );
				float lerpResult881_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170655 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170651 = lerpResult881_g170625;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170651 = ( temp_output_6_0_g170651 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170651 = temp_output_6_0_g170651;
				#endif
				half Overlay_VertMask801_g170625 = staticSwitch14_g170651;
				half Overlay_MaskNoise427_g170625 = 1.0;
				TVEGlobalData Data15_g170627 = Data204_g170214;
				float Out_Dummy15_g170627 = 0;
				float4 Out_CoatParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170627 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170627 = Data15_g170627.Dummy;
				Out_CoatParams15_g170627 = Data15_g170627.CoatParams;
				Out_PaintParams15_g170627 = Data15_g170627.PaintParams;
				Out_GlowParams15_g170627 = Data15_g170627.GlowParams;
				Out_AtmoParams15_g170627= Data15_g170627.AtmoParams;
				Out_FadeParams15_g170627= Data15_g170627.FadeParams;
				Out_FormParams15_g170627 = Data15_g170627.FormParams;
				Out_FlowParams15_g170627 = Data15_g170627.FlowParams;
				}
				half4 Global_AtmoParams516_g170625 = Out_AtmoParams15_g170627;
				float temp_output_6_0_g170660 = (Global_AtmoParams516_g170625).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170660 = ( temp_output_6_0_g170660 + ( _OverlayElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170660 = temp_output_6_0_g170660;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170625 = staticSwitch14_g170660;
				#else
				float staticSwitch705_g170625 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170625 = lerp( 1.0 , ( staticSwitch705_g170625 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170625 = lerpResult937_g170625;
				half Custom_Mask646_g170625 = 1.0;
				float temp_output_7_0_g170657 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170657 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170625 * Overlay_MaskProj457_g170625 * Overlay_MaskLuma438_g170625 * Overlay_VertMask801_g170625 * Overlay_MaskNoise427_g170625 * Overlay_MaskGlobal429_g170625 * Custom_Mask646_g170625 ) - temp_output_7_0_g170657 );
				half Overlay_Mask494_g170625 = saturate( ( ( temp_output_9_0_g170657 / ( _OverlayBlendRemap.y - temp_output_7_0_g170657 ) ) + 0.0001 ) );
				float3 lerpResult467_g170625 = lerp( Visual_Albedo127_g170625 , ( staticSwitch14_g170644 + Overlay_GlitterColor865_g170625 ) , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170625 = lerpResult467_g170625;
				#else
				float3 staticSwitch577_g170625 = Visual_Albedo127_g170625;
				#endif
				half3 Final_Albedo493_g170625 = staticSwitch577_g170625;
				float3 In_Albedo3_g170628 = Final_Albedo493_g170625;
				float3 In_AlbedoRaw3_g170628 = Out_AlbedoRaw4_g170626;
				half2 Visual_NormalTS535_g170625 = Out_NormalTS4_g170626;
				TEXTURE2D(Texture238_g170631) = _OverlayNormalTex;
				float localFilterTexture29_g170642 = ( 0.0 );
				SamplerState SS29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170642 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170642 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170642 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170642 = SamplerDefault29_g170642;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170642 = SamplerDefault29_g170642;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170642 = SamplerPoint29_g170642;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170642 = SamplerLow29_g170642;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170642 = SamplerMedium29_g170642;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170642 = SamplerHigh29_g170642;
				#endif
				}
				SamplerState Sampler238_g170631 = SS29_g170642;
				float4 temp_output_37_0_g170631 = Overlay_Coords639_g170625;
				half4 Coords238_g170631 = temp_output_37_0_g170631;
				float3 temp_output_279_0_g170631 = Model_PositionWO602_g170625;
				half3 WorldPosition238_g170631 = temp_output_279_0_g170631;
				half4 localSamplePlanar2D238_g170631 = SamplePlanar2D( Texture238_g170631 , Sampler238_g170631 , Coords238_g170631 , WorldPosition238_g170631 );
				TEXTURE2D(Texture246_g170631) = _OverlayNormalTex;
				SamplerState Sampler246_g170631 = SS29_g170642;
				half4 Coords246_g170631 = temp_output_37_0_g170631;
				half3 WorldPosition246_g170631 = temp_output_279_0_g170631;
				float3 temp_output_280_0_g170631 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170631 = temp_output_280_0_g170631;
				half4 localSamplePlanar3D246_g170631 = SamplePlanar3D( Texture246_g170631 , Sampler246_g170631 , Coords246_g170631 , WorldPosition246_g170631 , WorldNormal246_g170631 );
				TEXTURE2D(Texture234_g170631) = _OverlayNormalTex;
				SamplerState Sampler234_g170631 = SS29_g170642;
				float4 Coords234_g170631 = temp_output_37_0_g170631;
				float3 WorldPosition234_g170631 = temp_output_279_0_g170631;
				float4 localSampleStochastic2D234_g170631 = SampleStochastic2D( Texture234_g170631 , Sampler234_g170631 , Coords234_g170631 , WorldPosition234_g170631 );
				TEXTURE2D(Texture263_g170631) = _OverlayNormalTex;
				SamplerState Sampler263_g170631 = SS29_g170642;
				half4 Coords263_g170631 = temp_output_37_0_g170631;
				half3 WorldPosition263_g170631 = temp_output_279_0_g170631;
				half3 WorldNormal263_g170631 = temp_output_280_0_g170631;
				half4 localSampleStochastic3D263_g170631 = SampleStochastic3D( Texture263_g170631 , Sampler263_g170631 , Coords263_g170631 , WorldPosition263_g170631 , WorldNormal263_g170631 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170625 = localSamplePlanar2D238_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170625 = localSamplePlanar3D246_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170625 = localSampleStochastic2D234_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170625 = localSampleStochastic3D263_g170631;
				#else
				float4 staticSwitch686_g170625 = localSamplePlanar2D238_g170631;
				#endif
				half4 Normal_Packed45_g170635 = staticSwitch686_g170625;
				float2 appendResult58_g170635 = (float2(( (Normal_Packed45_g170635).x * (Normal_Packed45_g170635).w ) , (Normal_Packed45_g170635).y));
				half2 Normal_Default50_g170635 = appendResult58_g170635;
				half2 Normal_ASTC41_g170635 = (Normal_Packed45_g170635).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170635 = Normal_ASTC41_g170635;
				#else
				float2 staticSwitch38_g170635 = Normal_Default50_g170635;
				#endif
				half2 Normal_NO_DTX544_g170635 = (Normal_Packed45_g170635).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170635 = Normal_NO_DTX544_g170635;
				#else
				float2 staticSwitch37_g170635 = staticSwitch38_g170635;
				#endif
				half2 Normal_Planar45_g170634 = (staticSwitch37_g170635*2.0 + -1.0);
				float2 break71_g170634 = Normal_Planar45_g170634;
				float3 appendResult72_g170634 = (float3(break71_g170634.x , 0.0 , break71_g170634.y));
				half2 Overlay_Normal528_g170625 = (mul( ase_worldToTangent, appendResult72_g170634 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170625 = Overlay_Normal528_g170625;
				#else
				float2 staticSwitch579_g170625 = Visual_NormalTS535_g170625;
				#endif
				float2 lerpResult551_g170625 = lerp( Visual_NormalTS535_g170625 , ( staticSwitch579_g170625 * _OverlayNormalValue ) , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170625 = lerpResult551_g170625;
				#else
				float2 staticSwitch583_g170625 = Visual_NormalTS535_g170625;
				#endif
				half2 Final_NormalTS499_g170625 = staticSwitch583_g170625;
				float2 In_NormalTS3_g170628 = Final_NormalTS499_g170625;
				float3 In_NormalWS3_g170628 = temp_output_739_21_g170625;
				half4 Visual_Masks536_g170625 = Out_Shader4_g170626;
				float4 appendResult585_g170625 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170625 = lerp( Visual_Masks536_g170625 , appendResult585_g170625 , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170625 = lerpResult584_g170625;
				#else
				float4 staticSwitch586_g170625 = Visual_Masks536_g170625;
				#endif
				half4 Final_Masks482_g170625 = staticSwitch586_g170625;
				float4 In_Shader3_g170628 = Final_Masks482_g170625;
				float4 In_Emissive3_g170628 = Out_Emissive4_g170626;
				float temp_output_739_12_g170625 = Out_Grayscale4_g170626;
				float In_Grayscale3_g170628 = temp_output_739_12_g170625;
				float In_Luminosity3_g170628 = temp_output_739_15_g170625;
				float In_MultiMask3_g170628 = Out_MultiMask4_g170626;
				float In_AlphaClip3_g170628 = Out_AlphaClip4_g170626;
				float In_AlphaFade3_g170628 = Out_AlphaFade4_g170626;
				float3 In_Translucency3_g170628 = Out_Translucency4_g170626;
				half Visual_Transmission699_g170625 = Out_Transmission4_g170626;
				float lerpResult746_g170625 = lerp( Visual_Transmission699_g170625 , ( Visual_Transmission699_g170625 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170625 * Overlay_MaskNoise427_g170625 * Overlay_MaskGlobal429_g170625 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170625 = lerpResult746_g170625;
				#else
				float staticSwitch703_g170625 = Visual_Transmission699_g170625;
				#endif
				half Final_Transmission702_g170625 = staticSwitch703_g170625;
				float In_Transmission3_g170628 = Final_Transmission702_g170625;
				float In_Thickness3_g170628 = Out_Thickness4_g170626;
				float In_Diffusion3_g170628 = Out_Diffusion4_g170626;
				{
				Data3_g170628.Dummy = In_Dummy3_g170628;
				Data3_g170628.Albedo = In_Albedo3_g170628;
				Data3_g170628.AlbedoRaw = In_AlbedoRaw3_g170628;
				Data3_g170628.NormalTS = In_NormalTS3_g170628;
				Data3_g170628.NormalWS = In_NormalWS3_g170628;
				Data3_g170628.Shader = In_Shader3_g170628;
				Data3_g170628.Emissive= In_Emissive3_g170628;
				Data3_g170628.MultiMask = In_MultiMask3_g170628;
				Data3_g170628.Grayscale = In_Grayscale3_g170628;
				Data3_g170628.Luminosity = In_Luminosity3_g170628;
				Data3_g170628.AlphaClip = In_AlphaClip3_g170628;
				Data3_g170628.AlphaFade = In_AlphaFade3_g170628;
				Data3_g170628.Translucency = In_Translucency3_g170628;
				Data3_g170628.Transmission = In_Transmission3_g170628;
				Data3_g170628.Thickness = In_Thickness3_g170628;
				Data3_g170628.Diffusion = In_Diffusion3_g170628;
				}
				TVEVisualData Data4_g170663 = Data3_g170628;
				float Out_Dummy4_g170663 = 0;
				float3 Out_Albedo4_g170663 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170663 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170663 = float2( 0,0 );
				float3 Out_NormalWS4_g170663 = float3( 0,0,0 );
				float4 Out_Shader4_g170663 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170663 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170663 = 0;
				float Out_Grayscale4_g170663 = 0;
				float Out_Luminosity4_g170663 = 0;
				float Out_AlphaClip4_g170663 = 0;
				float Out_AlphaFade4_g170663 = 0;
				float3 Out_Translucency4_g170663 = float3( 0,0,0 );
				float Out_Transmission4_g170663 = 0;
				float Out_Thickness4_g170663 = 0;
				float Out_Diffusion4_g170663 = 0;
				{
				Out_Dummy4_g170663 = Data4_g170663.Dummy;
				Out_Albedo4_g170663 = Data4_g170663.Albedo;
				Out_AlbedoRaw4_g170663 = Data4_g170663.AlbedoRaw;
				Out_NormalTS4_g170663 = Data4_g170663.NormalTS;
				Out_NormalWS4_g170663 = Data4_g170663.NormalWS;
				Out_Shader4_g170663 = Data4_g170663.Shader;
				Out_Emissive4_g170663= Data4_g170663.Emissive;
				Out_MultiMask4_g170663 = Data4_g170663.MultiMask;
				Out_Grayscale4_g170663 = Data4_g170663.Grayscale;
				Out_Luminosity4_g170663= Data4_g170663.Luminosity;
				Out_AlphaClip4_g170663 = Data4_g170663.AlphaClip;
				Out_AlphaFade4_g170663 = Data4_g170663.AlphaFade;
				Out_Translucency4_g170663 = Data4_g170663.Translucency;
				Out_Transmission4_g170663 = Data4_g170663.Transmission;
				Out_Thickness4_g170663 = Data4_g170663.Thickness;
				Out_Diffusion4_g170663 = Data4_g170663.Diffusion;
				}
				half3 Visual_Albedo127_g170662 = Out_Albedo4_g170663;
				TVEGlobalData Data15_g170668 = Data204_g170214;
				float Out_Dummy15_g170668 = 0;
				float4 Out_CoatParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170668 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170668 = Data15_g170668.Dummy;
				Out_CoatParams15_g170668 = Data15_g170668.CoatParams;
				Out_PaintParams15_g170668 = Data15_g170668.PaintParams;
				Out_GlowParams15_g170668 = Data15_g170668.GlowParams;
				Out_AtmoParams15_g170668= Data15_g170668.AtmoParams;
				Out_FadeParams15_g170668= Data15_g170668.FadeParams;
				Out_FormParams15_g170668 = Data15_g170668.FormParams;
				Out_FlowParams15_g170668 = Data15_g170668.FlowParams;
				}
				half4 Global_AtmoParams516_g170662 = Out_AtmoParams15_g170668;
				float4 temp_output_6_0_g170689 = Global_AtmoParams516_g170662;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170689 = ( temp_output_6_0_g170689 + ( _WetnessElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170689 = temp_output_6_0_g170689;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170662 = staticSwitch14_g170689;
				#else
				float4 staticSwitch663_g170662 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170662 = lerp( float2( 1,1 ) , (( staticSwitch663_g170662 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170662 = lerpResult1121_g170662;
				half Global_Wetness429_g170662 = break1123_g170662.x;
				half Wetness_Value1042_g170662 = ( _WetnessIntensityValue * Global_Wetness429_g170662 );
				TVEModelData Data15_g170674 = Data16_g170201;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				}
				half4 Model_VertexData1030_g170662 = Out_VertexData15_g170674;
				float4 break1019_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170677 = _wetness_vert_mode;
				float temp_output_30_0_g170677 = ( break1019_g170662.x * break33_g170677.x );
				float temp_output_29_0_g170677 = ( break1019_g170662.y * break33_g170677.y );
				float temp_output_31_0_g170677 = ( break1019_g170662.z * break33_g170677.z );
				float temp_output_28_0_g170677 = ( temp_output_30_0_g170677 + temp_output_29_0_g170677 + temp_output_31_0_g170677 + ( break1019_g170662.w * break33_g170677.w ) );
				float clampResult17_g170676 = clamp( temp_output_28_0_g170677 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170685 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170685 = ( clampResult17_g170676 - temp_output_7_0_g170685 );
				float lerpResult1026_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170685 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170678 = lerpResult1026_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170678 = ( temp_output_6_0_g170678 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170678 = temp_output_6_0_g170678;
				#endif
				float temp_output_1025_0_g170662 = staticSwitch14_g170678;
				half Wetness_VertMask1024_g170662 = temp_output_1025_0_g170662;
				float temp_output_1043_0_g170662 = ( Wetness_Value1042_g170662 * Wetness_VertMask1024_g170662 );
				half Wetness_Mask866_g170662 = temp_output_1043_0_g170662;
				float4 break1083_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170680 = _wetness_water_vert_mode;
				float temp_output_30_0_g170680 = ( break1083_g170662.x * break33_g170680.x );
				float temp_output_29_0_g170680 = ( break1083_g170662.y * break33_g170680.y );
				float temp_output_31_0_g170680 = ( break1083_g170662.z * break33_g170680.z );
				float temp_output_28_0_g170680 = ( temp_output_30_0_g170680 + temp_output_29_0_g170680 + temp_output_31_0_g170680 + ( break1083_g170662.w * break33_g170680.w ) );
				float clampResult17_g170679 = clamp( temp_output_28_0_g170680 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170686 = ( clampResult17_g170679 - temp_output_7_0_g170686 );
				float lerpResult1089_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170686 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170681 = lerpResult1089_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170681 = ( temp_output_6_0_g170681 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170681 = temp_output_6_0_g170681;
				#endif
				float temp_output_1091_0_g170662 = staticSwitch14_g170681;
				half Water_VertMask1094_g170662 = temp_output_1091_0_g170662;
				half4 Visual_Masks536_g170662 = Out_Shader4_g170663;
				float lerpResult1013_g170662 = lerp( 1.0 , (Visual_Masks536_g170662).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170662 = lerpResult1013_g170662;
				float clampResult17_g170675 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170662 * Water_VertMask1094_g170662 ) - Water_HeightMask782_g170662 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170688 = ( clampResult17_g170675 - temp_output_7_0_g170688 );
				half3 Model_NormalWS798_g170662 = Out_NormalWS15_g170674;
				float temp_output_786_0_g170662 = saturate( (Model_NormalWS798_g170662).y );
				half Wetness_ProjMask790_g170662 = temp_output_786_0_g170662;
				half Water_Mask760_g170662 = ( saturate( ( ( temp_output_9_0_g170688 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170662 );
				float3 lerpResult918_g170662 = lerp( Visual_Albedo127_g170662 , ( Visual_Albedo127_g170662 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170662);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170662 = lerpResult918_g170662;
				#else
				float3 staticSwitch946_g170662 = Visual_Albedo127_g170662;
				#endif
				float3 lerpResult768_g170662 = lerp( staticSwitch946_g170662 , ( staticSwitch946_g170662 * staticSwitch946_g170662 ) , _WetnessContrastValue);
				float3 lerpResult651_g170662 = lerp( Visual_Albedo127_g170662 , lerpResult768_g170662 , Wetness_Mask866_g170662);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170662 = lerpResult651_g170662;
				#else
				float3 staticSwitch577_g170662 = Visual_Albedo127_g170662;
				#endif
				half3 Final_Albedo493_g170662 = staticSwitch577_g170662;
				float3 In_Albedo3_g170664 = Final_Albedo493_g170662;
				float3 In_AlbedoRaw3_g170664 = Out_AlbedoRaw4_g170663;
				half2 Visual_Normal535_g170662 = Out_NormalTS4_g170663;
				float lerpResult877_g170662 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170662 * Water_Mask760_g170662 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170662 = ( Visual_Normal535_g170662 * lerpResult877_g170662 );
				#else
				float2 staticSwitch957_g170662 = Visual_Normal535_g170662;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				TEXTURE2D(Texture238_g170672) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170672 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170662 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170672 = appendResult924_g170662;
				half4 Coords238_g170672 = temp_output_37_0_g170672;
				half3 Model_PositionWO602_g170662 = Out_PositionWO15_g170674;
				float3 temp_output_279_0_g170672 = Model_PositionWO602_g170662;
				half3 WorldPosition238_g170672 = temp_output_279_0_g170672;
				half4 localSamplePlanar2D238_g170672 = SamplePlanar2D( Texture238_g170672 , Sampler238_g170672 , Coords238_g170672 , WorldPosition238_g170672 );
				float4 temp_output_1010_0_g170662 = localSamplePlanar2D238_g170672;
				half2 Rain_DropsNormal919_g170662 = (temp_output_1010_0_g170662).zw;
				float2 temp_output_903_0_g170662 = (Rain_DropsNormal919_g170662*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170662 = (temp_output_1010_0_g170662).xy;
				float2 lerpResult904_g170662 = lerp( temp_output_903_0_g170662 , (Rain_RingsNormal713_g170662*2.0 + -1.0) , ( Water_Mask760_g170662 * Water_Mask760_g170662 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170662 = lerpResult904_g170662;
				#else
				float2 staticSwitch960_g170662 = temp_output_903_0_g170662;
				#endif
				half2 Rain_Drops1002_g170662 = ( staticSwitch960_g170662 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170662 = Out_PositionWS15_g170674;
				half Global_Rain955_g170662 = break1123_g170662.y;
				half Rain_Value1067_g170662 = Global_Rain955_g170662;
				float4 break1097_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170683 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170683 = ( break1097_g170662.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1097_g170662.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1097_g170662.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1097_g170662.w * break33_g170683.w ) );
				float clampResult17_g170682 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170687 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170687 = ( clampResult17_g170682 - temp_output_7_0_g170687 );
				float lerpResult1100_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170687 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170684 = lerpResult1100_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				float temp_output_1101_0_g170662 = staticSwitch14_g170684;
				half Rain_VertMask1108_g170662 = temp_output_1101_0_g170662;
				half Rain_Mask999_g170662 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170662 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170662 * Rain_VertMask1108_g170662 );
				half2 Normal_Planar45_g170671 = ( Rain_Drops1002_g170662 * Rain_Mask999_g170662 * Wetness_ProjMask790_g170662 );
				float2 break71_g170671 = Normal_Planar45_g170671;
				float3 appendResult72_g170671 = (float3(break71_g170671.x , 0.0 , break71_g170671.y));
				half2 Wetness_Normal526_g170662 = (mul( ase_worldToTangent, appendResult72_g170671 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170662 = Wetness_Normal526_g170662;
				#else
				float2 staticSwitch583_g170662 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170662 = ( staticSwitch957_g170662 + staticSwitch583_g170662 );
				#else
				float2 staticSwitch774_g170662 = Visual_Normal535_g170662;
				#endif
				half2 Final_Normal499_g170662 = staticSwitch774_g170662;
				float2 In_NormalTS3_g170664 = Final_Normal499_g170662;
				float3 In_NormalWS3_g170664 = Out_NormalWS4_g170663;
				float4 break658_g170662 = Visual_Masks536_g170662;
				float temp_output_935_0_g170662 = ( Wetness_Mask866_g170662 * _WetnessSmoothnessValue );
				float lerpResult941_g170662 = lerp( temp_output_935_0_g170662 , 2.0 , Water_Mask760_g170662);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170662 = lerpResult941_g170662;
				#else
				float staticSwitch959_g170662 = temp_output_935_0_g170662;
				#endif
				float4 appendResult661_g170662 = (float4(break658_g170662.x , break658_g170662.y , break658_g170662.z , saturate( ( break658_g170662.w + staticSwitch959_g170662 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170662 = appendResult661_g170662;
				#else
				float4 staticSwitch586_g170662 = Visual_Masks536_g170662;
				#endif
				half4 Final_Masks482_g170662 = staticSwitch586_g170662;
				float4 In_Shader3_g170664 = Final_Masks482_g170662;
				float4 In_Emissive3_g170664 = Out_Emissive4_g170663;
				float In_Grayscale3_g170664 = Out_Grayscale4_g170663;
				float In_Luminosity3_g170664 = Out_Luminosity4_g170663;
				float In_MultiMask3_g170664 = Out_MultiMask4_g170663;
				float In_AlphaClip3_g170664 = Out_AlphaClip4_g170663;
				float In_AlphaFade3_g170664 = Out_AlphaFade4_g170663;
				float3 In_Translucency3_g170664 = Out_Translucency4_g170663;
				float In_Transmission3_g170664 = Out_Transmission4_g170663;
				float In_Thickness3_g170664 = Out_Thickness4_g170663;
				float In_Diffusion3_g170664 = Out_Diffusion4_g170663;
				{
				Data3_g170664.Dummy = In_Dummy3_g170664;
				Data3_g170664.Albedo = In_Albedo3_g170664;
				Data3_g170664.AlbedoRaw = In_AlbedoRaw3_g170664;
				Data3_g170664.NormalTS = In_NormalTS3_g170664;
				Data3_g170664.NormalWS = In_NormalWS3_g170664;
				Data3_g170664.Shader = In_Shader3_g170664;
				Data3_g170664.Emissive= In_Emissive3_g170664;
				Data3_g170664.MultiMask = In_MultiMask3_g170664;
				Data3_g170664.Grayscale = In_Grayscale3_g170664;
				Data3_g170664.Luminosity = In_Luminosity3_g170664;
				Data3_g170664.AlphaClip = In_AlphaClip3_g170664;
				Data3_g170664.AlphaFade = In_AlphaFade3_g170664;
				Data3_g170664.Translucency = In_Translucency3_g170664;
				Data3_g170664.Transmission = In_Transmission3_g170664;
				Data3_g170664.Thickness = In_Thickness3_g170664;
				Data3_g170664.Diffusion = In_Diffusion3_g170664;
				}
				TVEVisualData Data4_g170694 = Data3_g170664;
				float Out_Dummy4_g170694 = 0;
				float3 Out_Albedo4_g170694 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170694 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170694 = float2( 0,0 );
				float3 Out_NormalWS4_g170694 = float3( 0,0,0 );
				float4 Out_Shader4_g170694 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170694 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170694 = 0;
				float Out_Grayscale4_g170694 = 0;
				float Out_Luminosity4_g170694 = 0;
				float Out_AlphaClip4_g170694 = 0;
				float Out_AlphaFade4_g170694 = 0;
				float3 Out_Translucency4_g170694 = float3( 0,0,0 );
				float Out_Transmission4_g170694 = 0;
				float Out_Thickness4_g170694 = 0;
				float Out_Diffusion4_g170694 = 0;
				{
				Out_Dummy4_g170694 = Data4_g170694.Dummy;
				Out_Albedo4_g170694 = Data4_g170694.Albedo;
				Out_AlbedoRaw4_g170694 = Data4_g170694.AlbedoRaw;
				Out_NormalTS4_g170694 = Data4_g170694.NormalTS;
				Out_NormalWS4_g170694 = Data4_g170694.NormalWS;
				Out_Shader4_g170694 = Data4_g170694.Shader;
				Out_Emissive4_g170694= Data4_g170694.Emissive;
				Out_MultiMask4_g170694 = Data4_g170694.MultiMask;
				Out_Grayscale4_g170694 = Data4_g170694.Grayscale;
				Out_Luminosity4_g170694= Data4_g170694.Luminosity;
				Out_AlphaClip4_g170694 = Data4_g170694.AlphaClip;
				Out_AlphaFade4_g170694 = Data4_g170694.AlphaFade;
				Out_Translucency4_g170694 = Data4_g170694.Translucency;
				Out_Transmission4_g170694 = Data4_g170694.Transmission;
				Out_Thickness4_g170694 = Data4_g170694.Thickness;
				Out_Diffusion4_g170694 = Data4_g170694.Diffusion;
				}
				float3 In_Albedo3_g170692 = Out_Albedo4_g170694;
				float3 In_AlbedoRaw3_g170692 = Out_AlbedoRaw4_g170694;
				float2 In_NormalTS3_g170692 = Out_NormalTS4_g170694;
				float3 In_NormalWS3_g170692 = Out_NormalWS4_g170694;
				float4 In_Shader3_g170692 = Out_Shader4_g170694;
				float4 In_Emissive3_g170692 = Out_Emissive4_g170694;
				float In_Grayscale3_g170692 = Out_Grayscale4_g170694;
				float In_Luminosity3_g170692 = Out_Luminosity4_g170694;
				float temp_output_836_11_g170691 = Out_MultiMask4_g170694;
				float In_MultiMask3_g170692 = temp_output_836_11_g170691;
				half Visual_AlphaClip667_g170691 = Out_AlphaClip4_g170694;
				half Input_True57_g170701 = Visual_AlphaClip667_g170691;
				half True36_g170701 = Input_True57_g170701;
				TVEGlobalData Data15_g170693 = Data204_g170214;
				float Out_Dummy15_g170693 = 0;
				float4 Out_CoatParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170693 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170693 = Data15_g170693.Dummy;
				Out_CoatParams15_g170693 = Data15_g170693.CoatParams;
				Out_PaintParams15_g170693 = Data15_g170693.PaintParams;
				Out_GlowParams15_g170693 = Data15_g170693.GlowParams;
				Out_AtmoParams15_g170693= Data15_g170693.AtmoParams;
				Out_FadeParams15_g170693= Data15_g170693.FadeParams;
				Out_FormParams15_g170693 = Data15_g170693.FormParams;
				Out_FlowParams15_g170693 = Data15_g170693.FlowParams;
				}
				half4 Global_FadeParams516_g170691 = Out_FadeParams15_g170693;
				float temp_output_6_0_g170704 = saturate( (Global_FadeParams516_g170691).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170704 = ( temp_output_6_0_g170704 + ( _CutoutElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170704 = temp_output_6_0_g170704;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170691 = staticSwitch14_g170704;
				#else
				float staticSwitch663_g170691 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170691 = lerp( 1.0 , ( staticSwitch663_g170691 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170691 = lerpResult843_g170691;
				float lerpResult811_g170691 = lerp( 1.0 , Visual_AlphaClip667_g170691 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170691 = lerpResult811_g170691;
				TVEModelData Data15_g170695 = Data16_g170201;
				float Out_Dummy15_g170695 = 0;
				float3 Out_PositionWS15_g170695 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170695 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170695 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170695 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170695 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170695 = float3( 0,0,0 );
				float4 Out_VertexData15_g170695 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170695 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170695 = Data15_g170695.Dummy;
				Out_PositionWS15_g170695 = Data15_g170695.PositionWS;
				Out_PositionWO15_g170695 = Data15_g170695.PositionWO;
				Out_PivotWS15_g170695 = Data15_g170695.PivotWS;
				Out_PivotWO15_g170695 = Data15_g170695.PivotWO;
				Out_NormalWS15_g170695 = Data15_g170695.NormalWS;
				Out_ViewDirWS15_g170695 = Data15_g170695.ViewDirWS;
				Out_VertexData15_g170695 = Data15_g170695.VertexData;
				Out_BoundsData15_g170695 = Data15_g170695.BoundsData;
				}
				half3 Model_PositionWO602_g170691 = Out_PositionWO15_g170695;
				float4 tex3DNode60_g170698 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170691 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170691 = lerp( 1.0 , tex3DNode60_g170698.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170691 = lerpResult673_g170691;
				half4 Model_VertexMasks752_g170691 = Out_VertexData15_g170695;
				float4 break755_g170691 = Model_VertexMasks752_g170691;
				float4 break33_g170696 = _cutout_vert_mode;
				float temp_output_30_0_g170696 = ( break755_g170691.x * break33_g170696.x );
				float temp_output_29_0_g170696 = ( break755_g170691.y * break33_g170696.y );
				float temp_output_31_0_g170696 = ( break755_g170691.z * break33_g170696.z );
				float temp_output_28_0_g170696 = ( temp_output_30_0_g170696 + temp_output_29_0_g170696 + temp_output_31_0_g170696 + ( break755_g170691.w * break33_g170696.w ) );
				float clampResult17_g170697 = clamp( temp_output_28_0_g170696 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170703 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170703 = ( clampResult17_g170697 - temp_output_7_0_g170703 );
				float lerpResult820_g170691 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170703 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170700 = lerpResult820_g170691;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170700 = ( temp_output_6_0_g170700 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170700 = temp_output_6_0_g170700;
				#endif
				float temp_output_801_0_g170691 = staticSwitch14_g170700;
				half Local_VertMask766_g170691 = temp_output_801_0_g170691;
				half Visual_MultiMask671_g170691 = temp_output_836_11_g170691;
				float lerpResult683_g170691 = lerp( 1.0 , Visual_MultiMask671_g170691 , _CutoutMultiValue);
				half Local_MultiMask685_g170691 = lerpResult683_g170691;
				float lerpResult728_g170691 = lerp( Visual_AlphaClip667_g170691 , min( Visual_AlphaClip667_g170691 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170691 ) - ( Local_AlphaMask814_g170691 * Local_NoiseMask678_g170691 * Local_VertMask766_g170691 ) ) ) ) , Local_MultiMask685_g170691);
				half Local_AlphaClip784_g170691 = lerpResult728_g170691;
				half Input_False58_g170701 = Local_AlphaClip784_g170691;
				half False36_g170701 = Input_False58_g170701;
				half localShadowPassCheck36_g170701 = ShadowPassCheck36_g170701( True36_g170701 , False36_g170701 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170691 = Local_AlphaClip784_g170691;
				#else
				float staticSwitch791_g170691 = localShadowPassCheck36_g170701;
				#endif
				float temp_output_6_0_g170702 = staticSwitch791_g170691;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170702 = ( temp_output_6_0_g170702 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170702 = temp_output_6_0_g170702;
				#endif
				float temp_output_798_0_g170691 = staticSwitch14_g170702;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170691 = temp_output_798_0_g170691;
				#else
				float staticSwitch577_g170691 = Visual_AlphaClip667_g170691;
				#endif
				half Final_AlphaClip795_g170691 = staticSwitch577_g170691;
				float In_AlphaClip3_g170692 = Final_AlphaClip795_g170691;
				float In_AlphaFade3_g170692 = Out_AlphaFade4_g170694;
				float3 In_Translucency3_g170692 = Out_Translucency4_g170694;
				float In_Transmission3_g170692 = Out_Transmission4_g170694;
				float In_Thickness3_g170692 = Out_Thickness4_g170694;
				float In_Diffusion3_g170692 = Out_Diffusion4_g170694;
				{
				Data3_g170692.Dummy = In_Dummy3_g170692;
				Data3_g170692.Albedo = In_Albedo3_g170692;
				Data3_g170692.AlbedoRaw = In_AlbedoRaw3_g170692;
				Data3_g170692.NormalTS = In_NormalTS3_g170692;
				Data3_g170692.NormalWS = In_NormalWS3_g170692;
				Data3_g170692.Shader = In_Shader3_g170692;
				Data3_g170692.Emissive= In_Emissive3_g170692;
				Data3_g170692.MultiMask = In_MultiMask3_g170692;
				Data3_g170692.Grayscale = In_Grayscale3_g170692;
				Data3_g170692.Luminosity = In_Luminosity3_g170692;
				Data3_g170692.AlphaClip = In_AlphaClip3_g170692;
				Data3_g170692.AlphaFade = In_AlphaFade3_g170692;
				Data3_g170692.Translucency = In_Translucency3_g170692;
				Data3_g170692.Transmission = In_Transmission3_g170692;
				Data3_g170692.Thickness = In_Thickness3_g170692;
				Data3_g170692.Diffusion = In_Diffusion3_g170692;
				}
				TVEVisualData Data4_g170708 = Data3_g170692;
				float Out_Dummy4_g170708 = 0;
				float3 Out_Albedo4_g170708 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170708 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170708 = float2( 0,0 );
				float3 Out_NormalWS4_g170708 = float3( 0,0,0 );
				float4 Out_Shader4_g170708 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170708 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170708 = 0;
				float Out_Grayscale4_g170708 = 0;
				float Out_Luminosity4_g170708 = 0;
				float Out_AlphaClip4_g170708 = 0;
				float Out_AlphaFade4_g170708 = 0;
				float3 Out_Translucency4_g170708 = float3( 0,0,0 );
				float Out_Transmission4_g170708 = 0;
				float Out_Thickness4_g170708 = 0;
				float Out_Diffusion4_g170708 = 0;
				{
				Out_Dummy4_g170708 = Data4_g170708.Dummy;
				Out_Albedo4_g170708 = Data4_g170708.Albedo;
				Out_AlbedoRaw4_g170708 = Data4_g170708.AlbedoRaw;
				Out_NormalTS4_g170708 = Data4_g170708.NormalTS;
				Out_NormalWS4_g170708 = Data4_g170708.NormalWS;
				Out_Shader4_g170708 = Data4_g170708.Shader;
				Out_Emissive4_g170708= Data4_g170708.Emissive;
				Out_MultiMask4_g170708 = Data4_g170708.MultiMask;
				Out_Grayscale4_g170708 = Data4_g170708.Grayscale;
				Out_Luminosity4_g170708= Data4_g170708.Luminosity;
				Out_AlphaClip4_g170708 = Data4_g170708.AlphaClip;
				Out_AlphaFade4_g170708 = Data4_g170708.AlphaFade;
				Out_Translucency4_g170708 = Data4_g170708.Translucency;
				Out_Transmission4_g170708 = Data4_g170708.Transmission;
				Out_Thickness4_g170708 = Data4_g170708.Thickness;
				Out_Diffusion4_g170708 = Data4_g170708.Diffusion;
				}
				float3 In_Albedo3_g170709 = Out_Albedo4_g170708;
				float3 In_AlbedoRaw3_g170709 = Out_AlbedoRaw4_g170708;
				float2 In_NormalTS3_g170709 = Out_NormalTS4_g170708;
				float3 In_NormalWS3_g170709 = Out_NormalWS4_g170708;
				float4 In_Shader3_g170709 = Out_Shader4_g170708;
				float4 In_Emissive3_g170709 = Out_Emissive4_g170708;
				float In_Grayscale3_g170709 = Out_Grayscale4_g170708;
				float In_Luminosity3_g170709 = Out_Luminosity4_g170708;
				float temp_output_821_11_g170706 = Out_MultiMask4_g170708;
				float In_MultiMask3_g170709 = temp_output_821_11_g170706;
				half Visual_AlphaClip754_g170706 = Out_AlphaClip4_g170708;
				half Input_True57_g170711 = Visual_AlphaClip754_g170706;
				half True36_g170711 = Input_True57_g170711;
				half Dither_Constant768_g170706 = _DitherConstantValue;
				float3 ase_positionWS = GetAbsolutePositionWS( PositionRWS );
				half Dither_BiasProximity881_g170706 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170706 = TVE_DitherParams.w;
				float lerpResult884_g170706 = lerp( 1.0 , Dither_BiasProximity881_g170706 , Dither_BiasEnabled883_g170706);
				float temp_output_7_0_g170717 = _DitherProximityMaxValue;
				float temp_output_9_0_g170717 = ( ( distance( ase_positionWS , _WorldSpaceCameraPos ) * lerpResult884_g170706 ) - temp_output_7_0_g170717 );
				half Dither_Proximity767_g170706 = ( saturate( ( ( temp_output_9_0_g170717 / ( _DitherProximityMinValue - temp_output_7_0_g170717 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170710 = Data16_g170201;
				float Out_Dummy15_g170710 = 0;
				float3 Out_PositionWS15_g170710 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170710 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170710 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170710 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170710 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170710 = float3( 0,0,0 );
				float4 Out_VertexData15_g170710 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170710 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170710 = Data15_g170710.Dummy;
				Out_PositionWS15_g170710 = Data15_g170710.PositionWS;
				Out_PositionWO15_g170710 = Data15_g170710.PositionWO;
				Out_PivotWS15_g170710 = Data15_g170710.PivotWS;
				Out_PivotWO15_g170710 = Data15_g170710.PivotWO;
				Out_NormalWS15_g170710 = Data15_g170710.NormalWS;
				Out_ViewDirWS15_g170710 = Data15_g170710.ViewDirWS;
				Out_VertexData15_g170710 = Data15_g170710.VertexData;
				Out_BoundsData15_g170710 = Data15_g170710.BoundsData;
				}
				half3 Model_PositionWS776_g170706 = Out_PositionWS15_g170710;
				half Dither_BiasDistance882_g170706 = TVE_DitherParams.z;
				float lerpResult888_g170706 = lerp( 1.0 , Dither_BiasDistance882_g170706 , Dither_BiasEnabled883_g170706);
				float temp_output_7_0_g170718 = _DitherDistanceMinValue;
				float temp_output_9_0_g170718 = ( ( distance( Model_PositionWS776_g170706 , _WorldSpaceCameraPos ) * lerpResult888_g170706 ) - temp_output_7_0_g170718 );
				half Dither_Distance856_g170706 = ( saturate( ( ( temp_output_9_0_g170718 / ( _DitherDistanceMaxValue - temp_output_7_0_g170718 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170706 = Out_ViewDirWS15_g170710;
				float3 normalizeResult792_g170706 = normalize( cross( ddy( ase_positionWS ) , ddx( ase_positionWS ) ) );
				float dotResult778_g170706 = dot( Model_ViewDirWS845_g170706 , normalizeResult792_g170706 );
				half Dither_Glancing784_g170706 = ( saturate( ( ( 1.0 - abs( dotResult778_g170706 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170706 = max( max( max( Dither_Constant768_g170706 , Dither_Proximity767_g170706 ) , Dither_Distance856_g170706 ) , Dither_Glancing784_g170706 );
				half3 Model_PositionWO602_g170706 = Out_PositionWO15_g170710;
				float4 tex3DNode60_g170713 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170706 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170706 = tex3DNode60_g170713.r;
				half Local_MaskNoise678_g170706 = temp_output_809_0_g170706;
				half Visual_MultiMask671_g170706 = temp_output_821_11_g170706;
				float lerpResult683_g170706 = lerp( 1.0 , Visual_MultiMask671_g170706 , _DitherMultiValue);
				half Local_MaskMulti685_g170706 = lerpResult683_g170706;
				half Custom_Mask826_g170706 = 1.0;
				float lerpResult728_g170706 = lerp( Visual_AlphaClip754_g170706 , min( Visual_AlphaClip754_g170706 , ( -0.001 - ( Dither_Value429_g170706 - Local_MaskNoise678_g170706 ) ) ) , ( Local_MaskMulti685_g170706 * Custom_Mask826_g170706 ));
				half Local_AlphaClip834_g170706 = lerpResult728_g170706;
				half Input_False58_g170711 = Local_AlphaClip834_g170706;
				half False36_g170711 = Input_False58_g170711;
				half localShadowPassCheck36_g170711 = ShadowPassCheck36_g170711( True36_g170711 , False36_g170711 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170706 = Local_AlphaClip834_g170706;
				#else
				float staticSwitch831_g170706 = localShadowPassCheck36_g170711;
				#endif
				float temp_output_6_0_g170712 = staticSwitch831_g170706;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170712 = ( temp_output_6_0_g170712 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170712 = temp_output_6_0_g170712;
				#endif
				float temp_output_840_0_g170706 = staticSwitch14_g170712;
				#ifdef TVE_DITHER
				float staticSwitch577_g170706 = temp_output_840_0_g170706;
				#else
				float staticSwitch577_g170706 = Visual_AlphaClip754_g170706;
				#endif
				half Final_AlphaClip493_g170706 = staticSwitch577_g170706;
				float In_AlphaClip3_g170709 = Final_AlphaClip493_g170706;
				float In_AlphaFade3_g170709 = Out_AlphaFade4_g170708;
				float3 In_Translucency3_g170709 = Out_Translucency4_g170708;
				float In_Transmission3_g170709 = Out_Transmission4_g170708;
				float In_Thickness3_g170709 = Out_Thickness4_g170708;
				float In_Diffusion3_g170709 = Out_Diffusion4_g170708;
				{
				Data3_g170709.Dummy = In_Dummy3_g170709;
				Data3_g170709.Albedo = In_Albedo3_g170709;
				Data3_g170709.AlbedoRaw = In_AlbedoRaw3_g170709;
				Data3_g170709.NormalTS = In_NormalTS3_g170709;
				Data3_g170709.NormalWS = In_NormalWS3_g170709;
				Data3_g170709.Shader = In_Shader3_g170709;
				Data3_g170709.Emissive= In_Emissive3_g170709;
				Data3_g170709.MultiMask = In_MultiMask3_g170709;
				Data3_g170709.Grayscale = In_Grayscale3_g170709;
				Data3_g170709.Luminosity = In_Luminosity3_g170709;
				Data3_g170709.AlphaClip = In_AlphaClip3_g170709;
				Data3_g170709.AlphaFade = In_AlphaFade3_g170709;
				Data3_g170709.Translucency = In_Translucency3_g170709;
				Data3_g170709.Transmission = In_Transmission3_g170709;
				Data3_g170709.Thickness = In_Thickness3_g170709;
				Data3_g170709.Diffusion = In_Diffusion3_g170709;
				}
				TVEVisualData Data4_g170731 = Data3_g170709;
				float Out_Dummy4_g170731 = 0;
				float3 Out_Albedo4_g170731 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170731 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170731 = float2( 0,0 );
				float3 Out_NormalWS4_g170731 = float3( 0,0,0 );
				float4 Out_Shader4_g170731 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170731 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170731 = 0;
				float Out_Grayscale4_g170731 = 0;
				float Out_Luminosity4_g170731 = 0;
				float Out_AlphaClip4_g170731 = 0;
				float Out_AlphaFade4_g170731 = 0;
				float3 Out_Translucency4_g170731 = float3( 0,0,0 );
				float Out_Transmission4_g170731 = 0;
				float Out_Thickness4_g170731 = 0;
				float Out_Diffusion4_g170731 = 0;
				{
				Out_Dummy4_g170731 = Data4_g170731.Dummy;
				Out_Albedo4_g170731 = Data4_g170731.Albedo;
				Out_AlbedoRaw4_g170731 = Data4_g170731.AlbedoRaw;
				Out_NormalTS4_g170731 = Data4_g170731.NormalTS;
				Out_NormalWS4_g170731 = Data4_g170731.NormalWS;
				Out_Shader4_g170731 = Data4_g170731.Shader;
				Out_Emissive4_g170731= Data4_g170731.Emissive;
				Out_MultiMask4_g170731 = Data4_g170731.MultiMask;
				Out_Grayscale4_g170731 = Data4_g170731.Grayscale;
				Out_Luminosity4_g170731= Data4_g170731.Luminosity;
				Out_AlphaClip4_g170731 = Data4_g170731.AlphaClip;
				Out_AlphaFade4_g170731 = Data4_g170731.AlphaFade;
				Out_Translucency4_g170731 = Data4_g170731.Translucency;
				Out_Transmission4_g170731 = Data4_g170731.Transmission;
				Out_Thickness4_g170731 = Data4_g170731.Thickness;
				Out_Diffusion4_g170731 = Data4_g170731.Diffusion;
				}
				float3 temp_output_297_0_g170727 = Out_Albedo4_g170731;
				float3 In_Albedo3_g170732 = temp_output_297_0_g170727;
				float3 temp_output_297_23_g170727 = Out_AlbedoRaw4_g170731;
				float3 In_AlbedoRaw3_g170732 = temp_output_297_23_g170727;
				float2 In_NormalTS3_g170732 = Out_NormalTS4_g170731;
				float3 In_NormalWS3_g170732 = Out_NormalWS4_g170731;
				float4 In_Shader3_g170732 = Out_Shader4_g170731;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170727 = Out_Emissive4_g170731;
				TVEModelData Data15_g170733 = Data16_g170201;
				float Out_Dummy15_g170733 = 0;
				float3 Out_PositionWS15_g170733 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170733 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170733 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170733 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170733 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170733 = float3( 0,0,0 );
				float4 Out_VertexData15_g170733 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170733 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170733 = Data15_g170733.Dummy;
				Out_PositionWS15_g170733 = Data15_g170733.PositionWS;
				Out_PositionWO15_g170733 = Data15_g170733.PositionWO;
				Out_PivotWS15_g170733 = Data15_g170733.PivotWS;
				Out_PivotWO15_g170733 = Data15_g170733.PivotWO;
				Out_NormalWS15_g170733 = Data15_g170733.NormalWS;
				Out_ViewDirWS15_g170733 = Data15_g170733.ViewDirWS;
				Out_VertexData15_g170733 = Data15_g170733.VertexData;
				Out_BoundsData15_g170733 = Data15_g170733.BoundsData;
				}
				half4 Model_VertexMasks216_g170727 = Out_VertexData15_g170733;
				float4 break251_g170727 = Model_VertexMasks216_g170727;
				float4 break33_g170738 = _emissive_vert_mode;
				float temp_output_30_0_g170738 = ( break251_g170727.x * break33_g170738.x );
				float temp_output_29_0_g170738 = ( break251_g170727.y * break33_g170738.y );
				float temp_output_31_0_g170738 = ( break251_g170727.z * break33_g170738.z );
				float temp_output_28_0_g170738 = ( temp_output_30_0_g170738 + temp_output_29_0_g170738 + temp_output_31_0_g170738 + ( break251_g170727.w * break33_g170738.w ) );
				float clampResult17_g170737 = clamp( temp_output_28_0_g170738 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170741 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170741 = ( clampResult17_g170737 - temp_output_7_0_g170741 );
				float lerpResult303_g170727 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170741 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170740 = lerpResult303_g170727;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170740 = ( temp_output_6_0_g170740 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170740 = temp_output_6_0_g170740;
				#endif
				half Emissive_MeshMask221_g170727 = staticSwitch14_g170740;
				TEXTURE2D(Texture276_g170729) = _EmissiveMaskTex;
				SamplerState Sampler276_g170729 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170730 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170730 = ( temp_output_6_0_g170730 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170730 = temp_output_6_0_g170730;
				#endif
				half4 Emissive_Coords167_g170727 = staticSwitch14_g170730;
				float4 temp_output_37_0_g170729 = Emissive_Coords167_g170727;
				half4 Coords276_g170729 = temp_output_37_0_g170729;
				half2 TexCoord276_g170729 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170729 = SampleMain( Texture276_g170729 , Sampler276_g170729 , Coords276_g170729 , TexCoord276_g170729 );
				TEXTURE2D(Texture275_g170729) = _EmissiveMaskTex;
				SamplerState Sampler275_g170729 = sampler_Linear_Repeat;
				half4 Coords275_g170729 = temp_output_37_0_g170729;
				half2 TexCoord275_g170729 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170729 = SampleExtra( Texture275_g170729 , Sampler275_g170729 , Coords275_g170729 , TexCoord275_g170729 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170727 = localSampleMain276_g170729;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170727 = localSampleExtra275_g170729;
				#else
				float4 staticSwitch176_g170727 = localSampleMain276_g170729;
				#endif
				half4 Emissive_MaskTex201_g170727 = staticSwitch176_g170727;
				float clampResult17_g170739 = clamp( (Emissive_MaskTex201_g170727).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170742 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170742 = ( clampResult17_g170739 - temp_output_7_0_g170742 );
				float lerpResult302_g170727 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170742 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170727 = lerpResult302_g170727;
				float temp_output_279_0_g170727 = ( Emissive_MeshMask221_g170727 * Emissive_Mask103_g170727 );
				float3 appendResult293_g170727 = (float3(temp_output_279_0_g170727 , temp_output_279_0_g170727 , temp_output_279_0_g170727));
				half3 Local_EmissiveColor278_g170727 = appendResult293_g170727;
				float3 temp_output_316_0_g170727 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170728 = Data204_g170214;
				float Out_Dummy15_g170728 = 0;
				float4 Out_CoatParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170728 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170728 = Data15_g170728.Dummy;
				Out_CoatParams15_g170728 = Data15_g170728.CoatParams;
				Out_PaintParams15_g170728 = Data15_g170728.PaintParams;
				Out_GlowParams15_g170728 = Data15_g170728.GlowParams;
				Out_AtmoParams15_g170728= Data15_g170728.AtmoParams;
				Out_FadeParams15_g170728= Data15_g170728.FadeParams;
				Out_FormParams15_g170728 = Data15_g170728.FormParams;
				Out_FlowParams15_g170728 = Data15_g170728.FlowParams;
				}
				half4 Global_GlowParams179_g170727 = Out_GlowParams15_g170728;
				float3 temp_output_6_0_g170735 = (Global_GlowParams179_g170727).xyz;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170735 = ( temp_output_6_0_g170735 + ( _EmissiveElementMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170735 = temp_output_6_0_g170735;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170727 = staticSwitch14_g170735;
				#else
				float3 staticSwitch228_g170727 = temp_output_316_0_g170727;
				#endif
				float3 lerpResult299_g170727 = lerp( float3( 1,1,1 ) , staticSwitch228_g170727 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170727 = lerpResult299_g170727;
				half3 Visual_AlbedoRaw306_g170727 = temp_output_297_23_g170727;
				float3 lerpResult307_g170727 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170727 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170727 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170727 * lerpResult307_g170727 );
				half3 Emissive_Blend260_g170727 = ( ( (Visual_Emissive255_g170727).xyz * Local_EmissiveColor278_g170727 ) * Local_EmissiveValue88_g170727 );
				float3 temp_output_3_0_g170734 = Emissive_Blend260_g170727;
				float temp_output_15_0_g170734 = _emissive_power_value;
				float3 hdEmission22_g170734 = ASEGetEmissionHDRColor(temp_output_3_0_g170734,temp_output_15_0_g170734,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170727 = temp_output_279_0_g170727;
				float4 appendResult295_g170727 = (float4(hdEmission22_g170734 , Local_EmissiveMask294_g170727));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170727 = appendResult295_g170727;
				#else
				float4 staticSwitch129_g170727 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170727 = staticSwitch129_g170727;
				float4 In_Emissive3_g170732 = Final_Emissive184_g170727;
				float In_Grayscale3_g170732 = Out_Grayscale4_g170731;
				float In_Luminosity3_g170732 = Out_Luminosity4_g170731;
				float temp_output_297_11_g170727 = Out_MultiMask4_g170731;
				float In_MultiMask3_g170732 = temp_output_297_11_g170727;
				float In_AlphaClip3_g170732 = Out_AlphaClip4_g170731;
				float In_AlphaFade3_g170732 = Out_AlphaFade4_g170731;
				float3 In_Translucency3_g170732 = Out_Translucency4_g170731;
				float In_Transmission3_g170732 = Out_Transmission4_g170731;
				float In_Thickness3_g170732 = Out_Thickness4_g170731;
				float In_Diffusion3_g170732 = Out_Diffusion4_g170731;
				{
				Data3_g170732.Dummy = In_Dummy3_g170732;
				Data3_g170732.Albedo = In_Albedo3_g170732;
				Data3_g170732.AlbedoRaw = In_AlbedoRaw3_g170732;
				Data3_g170732.NormalTS = In_NormalTS3_g170732;
				Data3_g170732.NormalWS = In_NormalWS3_g170732;
				Data3_g170732.Shader = In_Shader3_g170732;
				Data3_g170732.Emissive= In_Emissive3_g170732;
				Data3_g170732.MultiMask = In_MultiMask3_g170732;
				Data3_g170732.Grayscale = In_Grayscale3_g170732;
				Data3_g170732.Luminosity = In_Luminosity3_g170732;
				Data3_g170732.AlphaClip = In_AlphaClip3_g170732;
				Data3_g170732.AlphaFade = In_AlphaFade3_g170732;
				Data3_g170732.Translucency = In_Translucency3_g170732;
				Data3_g170732.Transmission = In_Transmission3_g170732;
				Data3_g170732.Thickness = In_Thickness3_g170732;
				Data3_g170732.Diffusion = In_Diffusion3_g170732;
				}
				TVEVisualData Data4_g170763 = Data3_g170732;
				float Out_Dummy4_g170763 = 0;
				float3 Out_Albedo4_g170763 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170763 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170763 = float2( 0,0 );
				float3 Out_NormalWS4_g170763 = float3( 0,0,0 );
				float4 Out_Shader4_g170763 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170763 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170763 = 0;
				float Out_Grayscale4_g170763 = 0;
				float Out_Luminosity4_g170763 = 0;
				float Out_AlphaClip4_g170763 = 0;
				float Out_AlphaFade4_g170763 = 0;
				float3 Out_Translucency4_g170763 = float3( 0,0,0 );
				float Out_Transmission4_g170763 = 0;
				float Out_Thickness4_g170763 = 0;
				float Out_Diffusion4_g170763 = 0;
				{
				Out_Dummy4_g170763 = Data4_g170763.Dummy;
				Out_Albedo4_g170763 = Data4_g170763.Albedo;
				Out_AlbedoRaw4_g170763 = Data4_g170763.AlbedoRaw;
				Out_NormalTS4_g170763 = Data4_g170763.NormalTS;
				Out_NormalWS4_g170763 = Data4_g170763.NormalWS;
				Out_Shader4_g170763 = Data4_g170763.Shader;
				Out_Emissive4_g170763= Data4_g170763.Emissive;
				Out_MultiMask4_g170763 = Data4_g170763.MultiMask;
				Out_Grayscale4_g170763 = Data4_g170763.Grayscale;
				Out_Luminosity4_g170763= Data4_g170763.Luminosity;
				Out_AlphaClip4_g170763 = Data4_g170763.AlphaClip;
				Out_AlphaFade4_g170763 = Data4_g170763.AlphaFade;
				Out_Translucency4_g170763 = Data4_g170763.Translucency;
				Out_Transmission4_g170763 = Data4_g170763.Transmission;
				Out_Thickness4_g170763 = Data4_g170763.Thickness;
				Out_Diffusion4_g170763 = Data4_g170763.Diffusion;
				}
				half3 Visual_Albedo199_g170762 = Out_Albedo4_g170763;
				half3 Final_Albedo312_g170762 = Visual_Albedo199_g170762;
				float3 In_Albedo3_g170764 = Final_Albedo312_g170762;
				float3 In_AlbedoRaw3_g170764 = Out_AlbedoRaw4_g170763;
				float2 In_NormalTS3_g170764 = Out_NormalTS4_g170763;
				float3 In_NormalWS3_g170764 = Out_NormalWS4_g170763;
				float4 In_Shader3_g170764 = Out_Shader4_g170763;
				float4 In_Emissive3_g170764 = Out_Emissive4_g170763;
				float In_Grayscale3_g170764 = Out_Grayscale4_g170763;
				float In_Luminosity3_g170764 = Out_Luminosity4_g170763;
				float temp_output_301_11_g170762 = Out_MultiMask4_g170763;
				float In_MultiMask3_g170764 = temp_output_301_11_g170762;
				float In_AlphaClip3_g170764 = Out_AlphaClip4_g170763;
				float In_AlphaFade3_g170764 = Out_AlphaFade4_g170763;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g170762 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170762 );
				half Visual_Transmission138_g170762 = Out_Transmission4_g170763;
				half Subsurface_Value268_g170762 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170765 = Data204_g170214;
				float Out_Dummy15_g170765 = 0;
				float4 Out_CoatParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170765 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170765 = Data15_g170765.Dummy;
				Out_CoatParams15_g170765 = Data15_g170765.CoatParams;
				Out_PaintParams15_g170765 = Data15_g170765.PaintParams;
				Out_GlowParams15_g170765 = Data15_g170765.GlowParams;
				Out_AtmoParams15_g170765= Data15_g170765.AtmoParams;
				Out_FadeParams15_g170765= Data15_g170765.FadeParams;
				Out_FormParams15_g170765 = Data15_g170765.FormParams;
				Out_FlowParams15_g170765 = Data15_g170765.FlowParams;
				}
				half4 Global_GlowParams373_g170762 = Out_GlowParams15_g170765;
				float temp_output_6_0_g170768 = saturate( (Global_GlowParams373_g170762).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170768 = ( temp_output_6_0_g170768 + ( _SubsurfaceElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170768 = temp_output_6_0_g170768;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170762 = staticSwitch14_g170768;
				#else
				float staticSwitch367_g170762 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g170762 = lerp( 1.0 , staticSwitch367_g170762 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170762 = lerpResult403_g170762;
				half Visual_MultiMask292_g170762 = temp_output_301_11_g170762;
				float lerpResult293_g170762 = lerp( 1.0 , Visual_MultiMask292_g170762 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170762 = lerpResult293_g170762;
				half Custom_Mask363_g170762 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170762 = ( Visual_Transmission138_g170762 * Subsurface_Value268_g170762 * Subsurface_GlobalMask369_g170762 * Subsurface_MultiMask296_g170762 * Custom_Mask363_g170762 );
				#else
				float staticSwitch345_g170762 = 0.0;
				#endif
				half Final_Transmission269_g170762 = staticSwitch345_g170762;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170762 = ( Subsurface_Color264_g170762 * Final_Transmission269_g170762 * 10.0 );
				#else
				float3 staticSwitch348_g170762 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g170762 = staticSwitch348_g170762;
				float3 In_Translucency3_g170764 = Final_Translucency254_g170762;
				float In_Transmission3_g170764 = Final_Transmission269_g170762;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170762 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170762 = 1.0;
				#endif
				half Final_Thickness275_g170762 = staticSwitch351_g170762;
				float In_Thickness3_g170764 = Final_Thickness275_g170762;
				float Final_Diffusion340_g170762 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170764 = Final_Diffusion340_g170762;
				{
				Data3_g170764.Dummy = In_Dummy3_g170764;
				Data3_g170764.Albedo = In_Albedo3_g170764;
				Data3_g170764.AlbedoRaw = In_AlbedoRaw3_g170764;
				Data3_g170764.NormalTS = In_NormalTS3_g170764;
				Data3_g170764.NormalWS = In_NormalWS3_g170764;
				Data3_g170764.Shader = In_Shader3_g170764;
				Data3_g170764.Emissive= In_Emissive3_g170764;
				Data3_g170764.MultiMask = In_MultiMask3_g170764;
				Data3_g170764.Grayscale = In_Grayscale3_g170764;
				Data3_g170764.Luminosity = In_Luminosity3_g170764;
				Data3_g170764.AlphaClip = In_AlphaClip3_g170764;
				Data3_g170764.AlphaFade = In_AlphaFade3_g170764;
				Data3_g170764.Translucency = In_Translucency3_g170764;
				Data3_g170764.Transmission = In_Transmission3_g170764;
				Data3_g170764.Thickness = In_Thickness3_g170764;
				Data3_g170764.Diffusion = In_Diffusion3_g170764;
				}
				TVEVisualData Data4_g170777 = Data3_g170764;
				float Out_Dummy4_g170777 = 0;
				float3 Out_Albedo4_g170777 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170777 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170777 = float2( 0,0 );
				float3 Out_NormalWS4_g170777 = float3( 0,0,0 );
				float4 Out_Shader4_g170777 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170777 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170777 = 0;
				float Out_Grayscale4_g170777 = 0;
				float Out_Luminosity4_g170777 = 0;
				float Out_AlphaClip4_g170777 = 0;
				float Out_AlphaFade4_g170777 = 0;
				float3 Out_Translucency4_g170777 = float3( 0,0,0 );
				float Out_Transmission4_g170777 = 0;
				float Out_Thickness4_g170777 = 0;
				float Out_Diffusion4_g170777 = 0;
				{
				Out_Dummy4_g170777 = Data4_g170777.Dummy;
				Out_Albedo4_g170777 = Data4_g170777.Albedo;
				Out_AlbedoRaw4_g170777 = Data4_g170777.AlbedoRaw;
				Out_NormalTS4_g170777 = Data4_g170777.NormalTS;
				Out_NormalWS4_g170777 = Data4_g170777.NormalWS;
				Out_Shader4_g170777 = Data4_g170777.Shader;
				Out_Emissive4_g170777= Data4_g170777.Emissive;
				Out_MultiMask4_g170777 = Data4_g170777.MultiMask;
				Out_Grayscale4_g170777 = Data4_g170777.Grayscale;
				Out_Luminosity4_g170777= Data4_g170777.Luminosity;
				Out_AlphaClip4_g170777 = Data4_g170777.AlphaClip;
				Out_AlphaFade4_g170777 = Data4_g170777.AlphaFade;
				Out_Translucency4_g170777 = Data4_g170777.Translucency;
				Out_Transmission4_g170777 = Data4_g170777.Transmission;
				Out_Thickness4_g170777 = Data4_g170777.Thickness;
				Out_Diffusion4_g170777 = Data4_g170777.Diffusion;
				}
				float temp_output_3_0_g170784 = Out_AlphaClip4_g170777;
				float Alpha21_g170784 = temp_output_3_0_g170784;
				float temp_output_15_0_g170784 = 0.0;
				float Treshold21_g170784 = temp_output_15_0_g170784;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170784 - Treshold21_g170784);
				#endif
				#endif
				}
				
				surfaceDescription.Alpha = saturate( ( Alpha21_g170784 * Out_AlphaFade4_g170777 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
				surfaceDescription.AlphaClipThresholdShadow = 0.5;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				float bias = max(abs(ddx(posInput.deviceDepth)), abs(ddy(posInput.deviceDepth))) * _SlopeScaleDepthBias;
				outputDepth += bias;
				#endif

				#ifdef WRITE_MSAA_DEPTH
					depthColor = packedInput.vmesh.positionCS.z;
					depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
				#endif

				#if defined(WRITE_NORMAL_BUFFER)
				EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
				#endif

                #if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
				    DecalPrepassData decalPrepassData;
                    #ifdef _DISABLE_DECALS
				    ZERO_INITIALIZE(DecalPrepassData, decalPrepassData);
                    #else
				    decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
                    #endif
				    decalPrepassData.renderingLayerMask = GetMeshRenderingLayerMask();
				    EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
				#endif
			}
			ENDHLSL
		}

		
		Pass
		{
			
			Name "SceneSelectionPass"
			Tags { "LightMode"="SceneSelectionPass" }

			Cull Off

			HLSLPROGRAM
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19702
			#define ASE_SRP_VERSION 170003
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma editor_sync_compilation
            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_DEPTH_ONLY
		    #define SCENESELECTIONPASS 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _SecondProjRemap;
			half4 _DrynessLumaRemap;
			float4 _DrynessColor;
			half4 _wetness_water_vert_mode;
			half4 _WetnessWaterMeshRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			half4 _WetnessWaterBlendRemap;
			half4 _TintingBlendRemap;
			half4 _TintingMeshRemap;
			half4 _tinting_vert_mode;
			half4 _object_phase_mode;
			half4 _TintingLumaRemap;
			float4 _TintingColor;
			half4 _wetness_drops_vert_mode;
			half4 _WetnessDropsMeshRemap;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _GradientMeshRemap;
			half4 _WetnessMeshRemap;
			half4 _wetness_vert_mode;
			half4 _MotionBaseMaskRemap;
			half4 _motion_base_proc_mode;
			half4 _motion_tiny_vert_mode;
			half4 _OverlayProjRemap;
			half4 _motion_tiny_proc_mode;
			half4 _MotionSmallMaskRemap;
			half4 _OverlayLumaRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _overlay_coord_value;
			half4 _overlay_vert_mode;
			half4 _OverlayCoordValue;
			half4 _OverlayMeshRemap;
			half4 _OverlayColor;
			half4 _MotionHighlightColor;
			half4 _OverlayBlendRemap;
			half4 _second_vert_mode;
			half4 _DrynessBlendRemap;
			half4 _DrynessMeshRemap;
			half4 _WetnessWaterColor;
			half4 _dryness_vert_mode;
			half4 _motion_base_vert_mode;
			half4 _MotionTinyMaskRemap;
			half4 _GradientColorOne;
			half4 _gradient_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _emissive_coord_value;
			half4 _MainColor;
			half4 _ThirdColorTwo;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _third_coord_value;
			half4 _MainMultiRemap;
			half4 _EmissiveColor;
			half4 _second_coord_value;
			half4 _MainColorTwo;
			half4 _Color;
			half4 _SecondColor;
			half4 _SecondBlendRemap;
			half4 _SecondMultiRemap;
			half4 _SubsurfaceColor;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _SecondMeshRemap;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _SecondLumaRemap;
			half4 _SecondColorTwo;
			half4 _GradientColorTwo;
			half4 _ThirdColor;
			half4 _emissive_vert_mode;
			half4 _occlusion_vert_mode;
			half4 _cutout_vert_mode;
			half4 _CutoutMeshRemap;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _ThirdProjRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdMeshRemap;
			half4 _ThirdMaskCoordValue;
			half4 _third_vert_mode;
			half4 _ThirdLumaRemap;
			half4 _ThirdMaskRemap;
			half4 _SecondCoordValue;
			half4 _third_mask_coord_value;
			half4 _SecondMaskCoordValue;
			half4 _ThirdMultiRemap;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _EmissiveMeshRemap;
			half4 _OverlayGlitterColor;
			half3 _motion_highlight_color;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half _OverlayGlitterIntensityValue;
			half _ThirdBlendAlbedoValue;
			half _DitherGlancingValue;
			half _ThirdIntensityValue;
			half _DitherGlancingAngleValue;
			half _DitherDistanceValue;
			half _DitherDistanceMaxValue;
			half _ThirdMaskValue;
			half _DitherDistanceMinValue;
			half _ThirdLumaValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _DitherProximityMaxValue;
			half _ThirdMeshValue;
			half _DitherConstantValue;
			half _ThirdMeshMode;
			half _CutoutShadowMode;
			half _ThirdProjValue;
			half _ThirdElementMode;
			half _ThirdGlobalValue;
			half _CutoutMultiValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _ThirdNormalValue;
			half _ThirdBlendShaderValue;
			half _ThirdAlphaClipValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _ThirdColorMode;
			half _DitherNoiseTillingValue;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SubsurfaceElementMode;
			half _SubsurfaceIntensityValue;
			half _SecondMeshValue;
			half _SecondMeshMode;
			half _SecondElementMode;
			half _EmissiveExposureValue;
			half _SecondGlobalValue;
			float _emissive_power_value;
			half _SecondBlendIntensityValue;
			half _EmissiveColorMode;
			half _EmissiveGlobalValue;
			half _CutoutNoiseValue;
			half _SecondBlendNormalValue;
			half _SecondNormalValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _ThirdAlbedoValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _ThirdMetallicValue;
			half _DitherMultiValue;
			half _EmissiveElementMode;
			half _CutoutNoiseTillingValue;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _WetnessWaterMeshValue;
			half _WetnessMeshMode;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _WetnessMeshValue;
			half _WetnessGlobalValue;
			half _DrynessLumaValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _OverlaySubsurfaceValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _DrynessGrayValue;
			half _OverlaySmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _OverlayGlobalValue;
			half _MotionHighlightValue;
			half _OverlayElementMode;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _OverlayIntensityValue;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _OverlayGlitterDistValue;
			half _OverlayTextureMode;
			half _OverlayNormalValue;
			half _OverlayGlitterTillingValue;
			half _DrynessGlobalValue;
			half _WetnessWaterBaseValue;
			half _CutoutAlphaValue;
			half _CutoutGlobalValue;
			half _CutoutElementMode;
			half _CutoutIntensityValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _WetnessSmoothnessValue;
			half _WetnessDropsMeshMode;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _WetnessDropsMeshValue;
			half _VariationIntensityValue;
			half _WetnessWaterMeshMode;
			half _VariationMultiValue;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _WetnessDropsDistValue;
			half _TintingIntensityValue;
			half _TintingMultiValue;
			half _WetnessDropsNormalValue;
			half _TintingLumaValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsTillingValue;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _WetnessContrastValue;
			half _DrynessElementMode;
			half _TintingElementMode;
			half _DrynessSmoothnessValue;
			half _SecondAlbedoValue;
			half _SecondLumaValue;
			half _GlobalGlowLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalPivotInfo;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _GlobalGlowPivotValue;
			half _SizeFadeDistMinValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _SizeFadeDistMaxValue;
			half _ObjectCategory;
			half _GlobalAtmoLayerValue;
			half _GlobalFadeLayerValue;
			half _MotionSmallPushValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionSmallMaskMode;
			half _GlobalAtmoPivotValue;
			half _motion_small_mask_mode;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _SizeFadeGlobalValue;
			half _SizeFadeElementMode;
			half _GlobalFlowPivotValue;
			half _GlobalFlowLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _MotionSmallIntensityValue;
			half _MotionTinyIntensityValue;
			half _PerspectiveEnd;
			half _SizeFadeEnd;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _RenderSSR;
			half _IsVersion;
			half _RenderZWrite;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _Cutoff;
			half _PerspectiveCategory;
			half _RenderPriority;
			half _RenderMotion;
			half _SizeFadeCategory;
			half _MotionPushInfo;
			half _MotionElementMode;
			half _MotionWindEnd;
			half _MotionCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _IsSubsurfaceShader;
			half _RenderQueue;
			half _IsGeneralShader;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _HasDefaultTextures;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _RenderShadow;
			half _RenderClip;
			half _RenderFilter;
			half _SecondProjValue;
			half _MotionDistValue;
			half _MotionTinyMaskMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _DetailEnd;
			half _SecondCoordMode;
			half _DetailCategory;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _OcclusionBakeMode;
			half _TintingEnd;
			half _SecondMaskSampleMode;
			half _SecondBakeMode;
			half _SecondMaskValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SubsurfaceThicknessValue;
			half _MainAlphaClipValue;
			half _SecondMaskCoordMode;
			half _MainNormalValue;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainCategory;
			half _MainColorMode;
			half _motion_tiny_mask_mode;
			half _TintingCategory;
			half _DrynessSpace;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseMaskMode;
			half _SubsurfaceEnd;
			half _motion_base_mask_mode;
			half _motion_small_mode;
			half _MotionBasePushValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionTinyNoiseValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionBaseIntensityValue;
			half _DrynessBakeMode;
			half _SubsurfaceDirectValue;
			half _SubsurfaceAmbientValue;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _SubsurfaceNormalValue;
			half _CutoutBakeMode;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceShadowValue;
			half _CutoutEnd;
			half _SubsurfaceAngleValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_SizeFadeParams;
			half4 TVE_FormParams;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			float TVE_FlowLayers[10];
			TEXTURE2D_ARRAY(TVE_FlowBaseTex);
			TEXTURE2D_ARRAY(TVE_FlowNearTex);
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			half4 TVE_AtmoData;
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			half4 TVE_DitherParams;
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_RELATIVE_WORLD_POS
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 FlowParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float4 ase_texcoord1 : TEXCOORD1;
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_color : COLOR;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half ShadowPassCheck36_g170701( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170711( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SceneSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				//refraction SceneSelectionPass
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
                    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);

                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

                #if defined(DEBUG_DISPLAY)
				    #if !defined(SHADER_STAGE_RAY_TRACING)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   #ifdef FRAG_INPUTS_USE_TEXCOORD0
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                       #else
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                       #endif
					   surfaceData.metallic = 0;
				    }
					#endif
                     ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                #endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SceneSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS output;
				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				TVEModelData Data16_g170761 = (TVEModelData)0;
				float In_Dummy16_g170761 = 0.0;
				TVEModelData Data16_g170745 = (TVEModelData)0;
				half Dummy1575_g170743 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170745 = Dummy1575_g170743;
				TVEModelData Data16_g170721 = (TVEModelData)0;
				float In_Dummy16_g170721 = 0.0;
				TVEModelData Data16_g170491 = (TVEModelData)0;
				half Dummy181_g170474 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170491 = Dummy181_g170474;
				TVEModelData Data16_g170433 = (TVEModelData)0;
				half Dummy181_g170431 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170433 = Dummy181_g170431;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170200 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170200 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170200 = PositionOS131_g170196;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_positionWS;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170200 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170206 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170206 = ( localObjectPosition_UNITY_MATRIX_M14_g170206 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170206 = localObjectPosition_UNITY_MATRIX_M14_g170206;
				#endif
				float3 temp_output_340_7_g170196 = staticSwitch13_g170206;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170208 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170204 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170204;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170208 = PivotOS149_g170196;
				float3 PivotsOnlyWS105_g170208 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170208 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170208 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170208 = ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 );
				#endif
				float3 temp_output_341_7_g170196 = staticSwitch13_g170208;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170200 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170200 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170200 = float3( 0,0,0 );
				float3 In_PivotOS16_g170200 = PivotOS149_g170196;
				float3 In_PivotWS16_g170200 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170200 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170200 = NormalOS134_g170196;
				float3 ase_normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170200 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170200 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170200 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170200 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170200 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170200 = VertexMasks171_g170196;
				float mulTime113_g170203 = _TimeParameters.x * 0.52;
				float lerpResult128_g170203 = lerp( mulTime113_g170203 , ( ( mulTime113_g170203 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170196 = PivotWO133_g170196;
				half Pivot_Position322_g170196 = ( break319_g170196.x + break319_g170196.z );
				float mulTime113_g170202 = _TimeParameters.x * 0.27;
				float lerpResult128_g170202 = lerp( mulTime113_g170202 , ( ( mulTime113_g170202 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170205 = _object_phase_mode;
				float temp_output_30_0_g170205 = ( inputMesh.ase_color.r * break33_g170205.x );
				float temp_output_29_0_g170205 = ( inputMesh.ase_color.g * break33_g170205.y );
				float temp_output_31_0_g170205 = ( inputMesh.ase_color.b * break33_g170205.z );
				float temp_output_28_0_g170205 = ( temp_output_30_0_g170205 + temp_output_29_0_g170205 + temp_output_31_0_g170205 + ( inputMesh.ase_color.a * break33_g170205.w ) );
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170205 + Pivot_Position322_g170196 ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(sin( ( lerpResult128_g170203 + Pivot_Position322_g170196 ) ) , sin( ( lerpResult128_g170202 + Pivot_Position322_g170196 ) ) , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_PhaseData16_g170200 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170200 = BoundsData254_g170196;
				float4 In_RotationData16_g170200 = float4( 0,0,0,0 );
				{
				Data16_g170200.Dummy = In_Dummy16_g170200;
				Data16_g170200.PositionOS = In_PositionOS16_g170200;
				Data16_g170200.PositionWS = In_PositionWS16_g170200;
				Data16_g170200.PositionWO = In_PositionWO16_g170200;
				Data16_g170200.PositionRawOS = In_PositionRawOS16_g170200;
				Data16_g170200.PositionAddOS = In_PositionAddOS16_g170200;
				Data16_g170200.PivotOS = In_PivotOS16_g170200;
				Data16_g170200.PivotWS = In_PivotWS16_g170200;
				Data16_g170200.PivotWO = In_PivotWO16_g170200;
				Data16_g170200.NormalOS = In_NormalOS16_g170200;
				Data16_g170200.NormalWS = In_NormalWS16_g170200;
				Data16_g170200.NormalRawOS = In_NormalRawOS16_g170200;
				Data16_g170200.NormalRawWS = In_NormalRawWS16_g170200;
				Data16_g170200.TangentOS = In_TangentOS16_g170200;
				Data16_g170200.ViewDirWS = In_ViewDirWS16_g170200;
				Data16_g170200.VertexData = In_VertexData16_g170200;
				Data16_g170200.PhaseData = In_PhaseData16_g170200;
				Data16_g170200.BoundsData = In_BoundsData16_g170200;
				Data16_g170200.RotationData = In_RotationData16_g170200;
				}
				TVEModelData Data15_g170371 = Data16_g170200;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_PhaseData15_g170371 = Data15_g170371.PhaseData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_PhaseData16_g170370 = Out_PhaseData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.PhaseData = In_PhaseData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_PhaseData15_g170391 = Data15_g170391.PhaseData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_viewDirSafeWS , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_viewDirSafeWS , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_PhaseData16_g170393 = Out_PhaseData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				{
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.PhaseData = In_PhaseData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				}
				TVEModelData Data15_g170432 = Data16_g170393;
				float Out_Dummy15_g170432 = 0;
				float3 Out_PositionOS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170432 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170432 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170432 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170432 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170432 = float3( 0,0,0 );
				float4 Out_VertexData15_g170432 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170432 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170432 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170432 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_PositionOS15_g170432 = Data15_g170432.PositionOS;
				Out_PositionWS15_g170432 = Data15_g170432.PositionWS;
				Out_PositionWO15_g170432 = Data15_g170432.PositionWO;
				Out_PositionRawOS15_g170432 = Data15_g170432.PositionRawOS;
				Out_PositionAddOS15_g170432 = Data15_g170432.PositionAddOS;
				Out_PivotOS15_g170432 = Data15_g170432.PivotOS;
				Out_PivotWS15_g170432 = Data15_g170432.PivotWS;
				Out_PivotWO15_g170432 = Data15_g170432.PivotWO;
				Out_NormalOS15_g170432 = Data15_g170432.NormalOS;
				Out_NormalWS15_g170432 = Data15_g170432.NormalWS;
				Out_NormalRawOS15_g170432 = Data15_g170432.NormalRawOS;
				Out_NormalRawWS15_g170432 = Data15_g170432.NormalRawWS;
				Out_TangentOS15_g170432 = Data15_g170432.TangentOS;
				Out_ViewDirWS15_g170432 = Data15_g170432.ViewDirWS;
				Out_VertexData15_g170432 = Data15_g170432.VertexData;
				Out_PhaseData15_g170432 = Data15_g170432.PhaseData;
				Out_BoundsData15_g170432 = Data15_g170432.BoundsData;
				Out_RotationData15_g170432 = Data15_g170432.RotationData;
				}
				half3 Model_PositionOS147_g170431 = Out_PositionOS15_g170432;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170431 = Out_PivotWO15_g170432;
				half3 Model_PivotWO162_g170431 = temp_output_210_19_g170431;
				float lerpResult216_g170431 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170435 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170435 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170431 ) * lerpResult216_g170431 ) - temp_output_7_0_g170435 );
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatParams204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintParams204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowParams204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoParams204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeParams204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormParams204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowParams204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatParams = In_CoatParams204_g170214;
				Data204_g170214.PaintParams = In_PaintParams204_g170214;
				Data204_g170214.GlowParams = In_GlowParams204_g170214;
				Data204_g170214.AtmoParams = In_AtmoParams204_g170214;
				Data204_g170214.FadeParams = In_FadeParams204_g170214;
				Data204_g170214.FormParams= In_FormParams204_g170214;
				Data204_g170214.FlowParams = In_FlowParams204_g170214;
				}
				TVEGlobalData Data15_g170434 = Data204_g170214;
				float Out_Dummy15_g170434 = 0;
				float4 Out_CoatParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170434 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170434 = Data15_g170434.Dummy;
				Out_CoatParams15_g170434 = Data15_g170434.CoatParams;
				Out_PaintParams15_g170434 = Data15_g170434.PaintParams;
				Out_GlowParams15_g170434 = Data15_g170434.GlowParams;
				Out_AtmoParams15_g170434= Data15_g170434.AtmoParams;
				Out_FadeParams15_g170434= Data15_g170434.FadeParams;
				Out_FormParams15_g170434 = Data15_g170434.FormParams;
				Out_FlowParams15_g170434 = Data15_g170434.FlowParams;
				}
				half4 Input_FormParams188_g170431 = Out_FormParams15_g170434;
				float temp_output_6_0_g170436 = saturate( (Input_FormParams188_g170431).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170436 = ( temp_output_6_0_g170436 + ( _SizeFadeElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170436 = temp_output_6_0_g170436;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170431 = staticSwitch14_g170436;
				#else
				float staticSwitch194_g170431 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170431 = lerp( 1.0 , staticSwitch194_g170431 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170431 = lerpResult213_g170431;
				float temp_output_189_0_g170431 = ( saturate( ( ( temp_output_9_0_g170435 / ( _SizeFadeDistMinValue - temp_output_7_0_g170435 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170431 );
				float3 appendResult200_g170431 = (float3(temp_output_189_0_g170431 , temp_output_189_0_g170431 , temp_output_189_0_g170431));
				float3 appendResult201_g170431 = (float3(1.0 , temp_output_189_0_g170431 , 1.0));
				float3 lerpResult202_g170431 = lerp( appendResult200_g170431 , appendResult201_g170431 , _SizeFadeScaleMode);
				float3 lerpResult184_g170431 = lerp( temp_cast_5 , lerpResult202_g170431 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170431 = ( lerpResult184_g170431 * Model_PositionOS147_g170431 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170431 = temp_output_167_0_g170431;
				#else
				float3 staticSwitch199_g170431 = Model_PositionOS147_g170431;
				#endif
				half3 Final_Position178_g170431 = staticSwitch199_g170431;
				float3 In_PositionOS16_g170433 = Final_Position178_g170431;
				float3 In_PositionWS16_g170433 = Out_PositionWS15_g170432;
				float3 In_PositionWO16_g170433 = Out_PositionWO15_g170432;
				float3 In_PositionRawOS16_g170433 = Out_PositionRawOS15_g170432;
				float3 In_PositionAddOS16_g170433 = Out_PositionAddOS15_g170432;
				float3 temp_output_210_24_g170431 = Out_PivotOS15_g170432;
				float3 In_PivotOS16_g170433 = temp_output_210_24_g170431;
				float3 In_PivotWS16_g170433 = Out_PivotWS15_g170432;
				float3 In_PivotWO16_g170433 = temp_output_210_19_g170431;
				float3 In_NormalOS16_g170433 = Out_NormalOS15_g170432;
				float3 In_NormalWS16_g170433 = Out_NormalWS15_g170432;
				float3 In_NormalRawOS16_g170433 = Out_NormalRawOS15_g170432;
				float3 In_NormalRawWS16_g170433 = Out_NormalRawWS15_g170432;
				float4 In_TangentOS16_g170433 = Out_TangentOS15_g170432;
				float3 In_ViewDirWS16_g170433 = Out_ViewDirWS15_g170432;
				float4 In_VertexData16_g170433 = Out_VertexData15_g170432;
				float4 In_PhaseData16_g170433 = Out_PhaseData15_g170432;
				float4 In_BoundsData16_g170433 = Out_BoundsData15_g170432;
				float4 In_RotationData16_g170433 = Out_RotationData15_g170432;
				{
				Data16_g170433.Dummy = In_Dummy16_g170433;
				Data16_g170433.PositionOS = In_PositionOS16_g170433;
				Data16_g170433.PositionWS = In_PositionWS16_g170433;
				Data16_g170433.PositionWO = In_PositionWO16_g170433;
				Data16_g170433.PositionRawOS = In_PositionRawOS16_g170433;
				Data16_g170433.PositionAddOS = In_PositionAddOS16_g170433;
				Data16_g170433.PivotOS = In_PivotOS16_g170433;
				Data16_g170433.PivotWS = In_PivotWS16_g170433;
				Data16_g170433.PivotWO = In_PivotWO16_g170433;
				Data16_g170433.NormalOS = In_NormalOS16_g170433;
				Data16_g170433.NormalWS = In_NormalWS16_g170433;
				Data16_g170433.NormalRawOS = In_NormalRawOS16_g170433;
				Data16_g170433.NormalRawWS = In_NormalRawWS16_g170433;
				Data16_g170433.TangentOS = In_TangentOS16_g170433;
				Data16_g170433.ViewDirWS = In_ViewDirWS16_g170433;
				Data16_g170433.VertexData = In_VertexData16_g170433;
				Data16_g170433.PhaseData = In_PhaseData16_g170433;
				Data16_g170433.BoundsData = In_BoundsData16_g170433;
				Data16_g170433.RotationData = In_RotationData16_g170433;
				}
				TVEModelData Data15_g170490 = Data16_g170433;
				float Out_Dummy15_g170490 = 0;
				float3 Out_PositionOS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170490 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170490 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170490 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170490 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170490 = float3( 0,0,0 );
				float4 Out_VertexData15_g170490 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170490 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170490 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170490 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170490 = Data15_g170490.Dummy;
				Out_PositionOS15_g170490 = Data15_g170490.PositionOS;
				Out_PositionWS15_g170490 = Data15_g170490.PositionWS;
				Out_PositionWO15_g170490 = Data15_g170490.PositionWO;
				Out_PositionRawOS15_g170490 = Data15_g170490.PositionRawOS;
				Out_PositionAddOS15_g170490 = Data15_g170490.PositionAddOS;
				Out_PivotOS15_g170490 = Data15_g170490.PivotOS;
				Out_PivotWS15_g170490 = Data15_g170490.PivotWS;
				Out_PivotWO15_g170490 = Data15_g170490.PivotWO;
				Out_NormalOS15_g170490 = Data15_g170490.NormalOS;
				Out_NormalWS15_g170490 = Data15_g170490.NormalWS;
				Out_NormalRawOS15_g170490 = Data15_g170490.NormalRawOS;
				Out_NormalRawWS15_g170490 = Data15_g170490.NormalRawWS;
				Out_TangentOS15_g170490 = Data15_g170490.TangentOS;
				Out_ViewDirWS15_g170490 = Data15_g170490.ViewDirWS;
				Out_VertexData15_g170490 = Data15_g170490.VertexData;
				Out_PhaseData15_g170490 = Data15_g170490.PhaseData;
				Out_BoundsData15_g170490 = Data15_g170490.BoundsData;
				Out_RotationData15_g170490 = Data15_g170490.RotationData;
				}
				float3 temp_output_2503_0_g170474 = Out_PositionOS15_g170490;
				float3 In_PositionOS16_g170491 = temp_output_2503_0_g170474;
				float3 temp_output_2503_16_g170474 = Out_PositionWS15_g170490;
				float3 In_PositionWS16_g170491 = temp_output_2503_16_g170474;
				float3 temp_output_2503_17_g170474 = Out_PositionWO15_g170490;
				float3 In_PositionWO16_g170491 = temp_output_2503_17_g170474;
				float3 In_PositionRawOS16_g170491 = Out_PositionRawOS15_g170490;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170474 = Out_VertexData15_g170490;
				half4 Model_VertexMasks518_g170474 = temp_output_2503_29_g170474;
				float4 break1689_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170475 = _motion_small_vert_mode;
				float temp_output_30_0_g170475 = ( break1689_g170474.x * break33_g170475.x );
				float temp_output_29_0_g170475 = ( break1689_g170474.y * break33_g170475.y );
				float temp_output_31_0_g170475 = ( break1689_g170474.z * break33_g170475.z );
				float temp_output_28_0_g170475 = ( temp_output_30_0_g170475 + temp_output_29_0_g170475 + temp_output_31_0_g170475 + ( break1689_g170474.w * break33_g170475.w ) );
				float temp_output_1727_0_g170474 = temp_output_28_0_g170475;
				float4 temp_output_2503_30_g170474 = Out_BoundsData15_g170490;
				half4 Model_BoundsData1322_g170474 = temp_output_2503_30_g170474;
				float4 break33_g170477 = _motion_small_proc_mode;
				float temp_output_30_0_g170477 = ( (Model_BoundsData1322_g170474).z * break33_g170477.x );
				float temp_output_29_0_g170477 = ( (Model_BoundsData1322_g170474).w * break33_g170477.y );
				float temp_output_1734_0_g170474 = ( temp_output_30_0_g170477 + temp_output_29_0_g170477 );
				float lerpResult1906_g170474 = lerp( temp_output_1727_0_g170474 , temp_output_1734_0_g170474 , _motion_small_mask_mode);
				float enc1805_g170474 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170474 = DecodeFloatToVector2( enc1805_g170474 );
				float2 break1804_g170474 = localDecodeFloatToVector21805_g170474;
				half Small_Mask_Legacy1806_g170474 = break1804_g170474.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170474 = Small_Mask_Legacy1806_g170474;
				#else
				float staticSwitch1800_g170474 = lerpResult1906_g170474;
				#endif
				float clampResult17_g170479 = clamp( staticSwitch1800_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170488 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170488 = ( clampResult17_g170479 - temp_output_7_0_g170488 );
				float temp_output_6_0_g170486 = saturate( ( ( temp_output_9_0_g170488 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170486 = ( temp_output_6_0_g170486 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170486 = temp_output_6_0_g170486;
				#endif
				half Small_Mask640_g170474 = staticSwitch14_g170486;
				float4 lerpResult836_g170510 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_MotionParams.w);
				half2 Global_WindDirWS2542_g170474 = ((lerpResult836_g170510).xy*2.0 + -1.0);
				half2 Input_WindDirWS803_g170505 = Global_WindDirWS2542_g170474;
				half3 Model_PositionWO162_g170474 = temp_output_2503_17_g170474;
				half3 Input_ModelPositionWO761_g170492 = Model_PositionWO162_g170474;
				float3 temp_output_2503_19_g170474 = Out_PivotWO15_g170490;
				half3 Model_PivotWO402_g170474 = temp_output_2503_19_g170474;
				half3 Input_ModelPivotsWO419_g170492 = Model_PivotWO402_g170474;
				half Input_MotionPivots629_g170492 = _MotionSmallPivotValue;
				float3 lerpResult771_g170492 = lerp( Input_ModelPositionWO761_g170492 , Input_ModelPivotsWO419_g170492 , Input_MotionPivots629_g170492);
				float4 temp_output_2503_27_g170474 = Out_PhaseData15_g170490;
				half4 Model_PhaseData489_g170474 = temp_output_2503_27_g170474;
				half4 Input_ModelMotionData763_g170492 = Model_PhaseData489_g170474;
				half Input_MotionPhase764_g170492 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170474 = ( lerpResult771_g170492 + ( (Input_ModelMotionData763_g170492).z * Input_MotionPhase764_g170492 * 5.0 ) );
				half3 Input_PositionWO419_g170505 = Small_Position1421_g170474;
				half Input_MotionTilling321_g170505 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170505 = ( -(Input_PositionWO419_g170505).xz * Input_MotionTilling321_g170505 * 0.005 );
				float2 temp_output_3_0_g170507 = Noise_Coord515_g170505;
				float2 temp_output_21_0_g170507 = Input_WindDirWS803_g170505;
				float lerpResult128_g170506 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170505 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170505 = ( lerpResult128_g170506 * 0.02 * Input_MotionSpeed62_g170505 );
				float temp_output_15_0_g170507 = Noise_Speed516_g170505;
				float temp_output_23_0_g170507 = frac( temp_output_15_0_g170507 );
				float4 lerpResult39_g170507 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170507 + ( temp_output_21_0_g170507 * temp_output_23_0_g170507 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170507 + ( temp_output_21_0_g170507 * frac( ( temp_output_15_0_g170507 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170507 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170505 = lerpResult39_g170507;
				half2 Noise_DirWS858_g170505 = ((temp_output_635_0_g170505).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170505 = _MotionSmallNoiseValue;
				half Global_WInd769_g170510 = (lerpResult836_g170510).z;
				TVEGlobalData Data15_g170498 = Data204_g170214;
				float Out_Dummy15_g170498 = 0;
				float4 Out_CoatParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170498 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170498 = Data15_g170498.Dummy;
				Out_CoatParams15_g170498 = Data15_g170498.CoatParams;
				Out_PaintParams15_g170498 = Data15_g170498.PaintParams;
				Out_GlowParams15_g170498 = Data15_g170498.GlowParams;
				Out_AtmoParams15_g170498= Data15_g170498.AtmoParams;
				Out_FadeParams15_g170498= Data15_g170498.FadeParams;
				Out_FormParams15_g170498 = Data15_g170498.FormParams;
				Out_FlowParams15_g170498 = Data15_g170498.FlowParams;
				}
				half4 Global_FlowParams2668_g170474 = Out_FlowParams15_g170498;
				half4 Input_GlobalFlow826_g170510 = Global_FlowParams2668_g170474;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170510 = saturate( (Input_GlobalFlow826_g170510).w );
				#else
				float staticSwitch612_g170510 = Global_WInd769_g170510;
				#endif
				float lerpResult853_g170510 = lerp( staticSwitch612_g170510 , saturate( (staticSwitch612_g170510*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170510 = _MotionIntensityValue;
				half Global_WindValue1855_g170474 = ( lerpResult853_g170510 * Input_MotionValue629_g170510 );
				half Input_WindValue881_g170505 = Global_WindValue1855_g170474;
				float lerpResult701_g170505 = lerp( 1.0 , Input_MotionNoise552_g170505 , Input_WindValue881_g170505);
				float2 lerpResult646_g170505 = lerp( Input_WindDirWS803_g170505 , Noise_DirWS858_g170505 , lerpResult701_g170505);
				half2 Small_DirWS817_g170505 = lerpResult646_g170505;
				float2 break823_g170505 = Small_DirWS817_g170505;
				half4 Noise_Params685_g170505 = temp_output_635_0_g170505;
				half Wind_Sinus820_g170505 = ( ((Noise_Params685_g170505).b*2.0 + -1.0) * Input_MotionNoise552_g170505 * 0.6 );
				float3 appendResult824_g170505 = (float3(break823_g170505.x , Wind_Sinus820_g170505 , break823_g170505.y));
				half Input_MotionDelay753_g170505 = _MotionSmallDelayValue;
				float lerpResult756_g170505 = lerp( 1.0 , ( Input_WindValue881_g170505 * Input_WindValue881_g170505 ) , Input_MotionDelay753_g170505);
				half Wind_Delay815_g170505 = lerpResult756_g170505;
				float3 appendResult825_g170505 = (float3(Wind_Delay815_g170505 , 1.0 , Wind_Delay815_g170505));
				float3 temp_output_827_0_g170505 = ( ( appendResult824_g170505 * Input_WindValue881_g170505 ) * appendResult825_g170505 );
				float2 break857_g170505 = Noise_DirWS858_g170505;
				float3 appendResult833_g170505 = (float3(break857_g170505.x , Wind_Sinus820_g170505 , break857_g170505.y));
				half Global_PushWave2675_g170474 = (Input_GlobalFlow826_g170510).z;
				half Input_PushWave890_g170505 = Global_PushWave2675_g170474;
				float2 temp_output_791_0_g170510 = ((Input_GlobalFlow826_g170510).xy*2.0 + -1.0);
				float temp_output_849_0_g170510 = saturate( length( temp_output_791_0_g170510 ) );
				half Global_PushAlpha1504_g170474 = temp_output_849_0_g170510;
				half Input_PushAlpha806_g170505 = ( Global_PushAlpha1504_g170474 * _MotionSmallPushValue );
				float3 lerpResult840_g170505 = lerp( temp_output_827_0_g170505 , ( appendResult833_g170505 * Input_PushWave890_g170505 ) , Input_PushAlpha806_g170505);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170505 = lerpResult840_g170505;
				#else
				float3 staticSwitch829_g170505 = temp_output_827_0_g170505;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half3 Small_Squash1489_g170474 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170505 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Motion789_g170474 = ( _MotionSmallIntensityValue * Small_Mask640_g170474 * Small_Squash1489_g170474 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170474 = Small_Motion789_g170474;
				#else
				float3 staticSwitch495_g170474 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170474 = temp_output_2503_16_g170474;
				half Global_DistMask1820_g170474 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170474 ) / _MotionDistValue ) ) );
				float4 break1710_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170476 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170476 = ( break1710_g170474.x * break33_g170476.x );
				float temp_output_29_0_g170476 = ( break1710_g170474.y * break33_g170476.y );
				float temp_output_31_0_g170476 = ( break1710_g170474.z * break33_g170476.z );
				float temp_output_28_0_g170476 = ( temp_output_30_0_g170476 + temp_output_29_0_g170476 + temp_output_31_0_g170476 + ( break1710_g170474.w * break33_g170476.w ) );
				float temp_output_1729_0_g170474 = temp_output_28_0_g170476;
				float4 break33_g170478 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170478 = ( (Model_BoundsData1322_g170474).z * break33_g170478.x );
				float temp_output_29_0_g170478 = ( (Model_BoundsData1322_g170474).w * break33_g170478.y );
				float temp_output_1735_0_g170474 = ( temp_output_30_0_g170478 + temp_output_29_0_g170478 );
				float lerpResult1908_g170474 = lerp( temp_output_1729_0_g170474 , temp_output_1735_0_g170474 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170474 = break1804_g170474.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170474 = Tiny_Mask_Legacy1807_g170474;
				#else
				float staticSwitch1810_g170474 = lerpResult1908_g170474;
				#endif
				float clampResult17_g170480 = clamp( staticSwitch1810_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170489 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170489 = ( clampResult17_g170480 - temp_output_7_0_g170489 );
				float temp_output_6_0_g170481 = saturate( ( ( temp_output_9_0_g170489 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170481 = ( temp_output_6_0_g170481 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170481 = temp_output_6_0_g170481;
				#endif
				half Tiny_Mask218_g170474 = staticSwitch14_g170481;
				float3 temp_output_2503_20_g170474 = Out_NormalOS15_g170490;
				half3 Model_NormalOS554_g170474 = temp_output_2503_20_g170474;
				half3 Input_NormalOS533_g170494 = Model_NormalOS554_g170474;
				half3 Tiny_Position2469_g170474 = Model_PositionWO162_g170474;
				half3 Input_PositionWO500_g170494 = Tiny_Position2469_g170474;
				half Input_MotionTilling321_g170494 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170496 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170494 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170494 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170494).xz * Input_MotionTilling321_g170494 * 0.005 ) + ( lerpResult128_g170496 * Input_MotionSpeed62_g170494 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170494 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170494 = lerp( ( Input_NormalOS533_g170494 * Flutter_Noise535_g170494 ) , Flutter_Noise535_g170494 , Input_MotionNoise542_g170494);
				half3 Input_ModelPositionWO761_g170493 = Model_PositionWO162_g170474;
				half3 Input_ModelPivotsWO419_g170493 = Model_PivotWO402_g170474;
				half Input_MotionPivots629_g170493 = _MotionBasePivotValue;
				float3 lerpResult771_g170493 = lerp( Input_ModelPositionWO761_g170493 , Input_ModelPivotsWO419_g170493 , Input_MotionPivots629_g170493);
				half4 Input_ModelMotionData763_g170493 = Model_PhaseData489_g170474;
				half Input_MotionPhase764_g170493 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170474 = ( lerpResult771_g170493 + ( (Input_ModelMotionData763_g170493).z * Input_MotionPhase764_g170493 * 5.0 ) );
				half3 Input_PositionWO419_g170499 = Base_Position1394_g170474;
				half Input_MotionTilling321_g170499 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170499 = ( -(Input_PositionWO419_g170499).xz * Input_MotionTilling321_g170499 * 0.005 );
				float2 temp_output_3_0_g170501 = Noise_Coord515_g170499;
				half2 Input_WindDirWS803_g170499 = Global_WindDirWS2542_g170474;
				float2 temp_output_21_0_g170501 = Input_WindDirWS803_g170499;
				float lerpResult128_g170500 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170499 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170499 = ( lerpResult128_g170500 * 0.02 * Input_MotionSpeed62_g170499 );
				float temp_output_15_0_g170501 = Noise_Speed516_g170499;
				float temp_output_23_0_g170501 = frac( temp_output_15_0_g170501 );
				float4 lerpResult39_g170501 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170501 + ( temp_output_21_0_g170501 * temp_output_23_0_g170501 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170501 + ( temp_output_21_0_g170501 * frac( ( temp_output_15_0_g170501 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170501 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170499 = lerpResult39_g170501;
				half4 Noise_Params685_g170499 = temp_output_635_0_g170499;
				half Input_WindValue853_g170499 = Global_WindValue1855_g170474;
				float temp_output_855_0_g170499 = ( (Noise_Params685_g170499).a * Input_WindValue853_g170499 );
				half Input_PushWave858_g170499 = Global_PushWave2675_g170474;
				half Input_PushAlpha806_g170499 = ( Global_PushAlpha1504_g170474 * _MotionBasePushValue );
				float lerpResult831_g170499 = lerp( temp_output_855_0_g170499 , Input_PushWave858_g170499 , Input_PushAlpha806_g170499);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170499 = lerpResult831_g170499;
				#else
				float staticSwitch828_g170499 = temp_output_855_0_g170499;
				#endif
				half Base_Wave1159_g170474 = staticSwitch828_g170499;
				float temp_output_888_0_g170505 = ( (Noise_Params685_g170505).b * Input_WindValue881_g170505 );
				float lerpResult867_g170505 = lerp( temp_output_888_0_g170505 , ( (Noise_Params685_g170505).b * Input_PushWave890_g170505 ) , Input_PushAlpha806_g170505);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170505 = lerpResult867_g170505;
				#else
				float staticSwitch886_g170505 = temp_output_888_0_g170505;
				#endif
				half Small_Wave1427_g170474 = staticSwitch886_g170505;
				float lerpResult2422_g170474 = lerp( Base_Wave1159_g170474 , Small_Wave1427_g170474 , _motion_small_mode);
				half Global_Wave1475_g170474 = lerpResult2422_g170474;
				half Input_GlobalWave546_g170494 = Global_Wave1475_g170474;
				float temp_output_548_0_g170494 = ( Input_GlobalWave546_g170494 * Input_GlobalWave546_g170494 );
				half Flutter_Wave556_g170494 = temp_output_548_0_g170494;
				half3 Tiny_Noise859_g170474 = ( lerpResult537_g170494 * Flutter_Wave556_g170494 );
				half3 Tiny_Flutter1451_g170474 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170474 * Tiny_Mask218_g170474 * Tiny_Noise859_g170474 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170474 = Tiny_Flutter1451_g170474;
				#else
				float3 staticSwitch414_g170474 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170474 = ( staticSwitch495_g170474 + staticSwitch414_g170474 );
				float3 In_PositionAddOS16_g170491 = Final_PositionADD1569_g170474;
				float3 temp_output_2503_24_g170474 = Out_PivotOS15_g170490;
				float3 In_PivotOS16_g170491 = temp_output_2503_24_g170474;
				float3 In_PivotWS16_g170491 = Out_PivotWS15_g170490;
				float3 In_PivotWO16_g170491 = temp_output_2503_19_g170474;
				float3 In_NormalOS16_g170491 = temp_output_2503_20_g170474;
				float3 In_NormalWS16_g170491 = Out_NormalWS15_g170490;
				float3 In_NormalRawOS16_g170491 = Out_NormalRawOS15_g170490;
				float3 In_NormalRawWS16_g170491 = Out_NormalRawWS15_g170490;
				float4 In_TangentOS16_g170491 = Out_TangentOS15_g170490;
				float3 In_ViewDirWS16_g170491 = Out_ViewDirWS15_g170490;
				float4 In_VertexData16_g170491 = temp_output_2503_29_g170474;
				float4 In_PhaseData16_g170491 = temp_output_2503_27_g170474;
				float4 In_BoundsData16_g170491 = temp_output_2503_30_g170474;
				float4 break748_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170483 = _motion_base_vert_mode;
				float temp_output_30_0_g170483 = ( break748_g170474.x * break33_g170483.x );
				float temp_output_29_0_g170483 = ( break748_g170474.y * break33_g170483.y );
				float temp_output_31_0_g170483 = ( break748_g170474.z * break33_g170483.z );
				float temp_output_28_0_g170483 = ( temp_output_30_0_g170483 + temp_output_29_0_g170483 + temp_output_31_0_g170483 + ( break748_g170474.w * break33_g170483.w ) );
				float temp_output_1731_0_g170474 = temp_output_28_0_g170483;
				float4 break33_g170484 = _motion_base_proc_mode;
				float temp_output_30_0_g170484 = ( (Model_BoundsData1322_g170474).z * break33_g170484.x );
				float temp_output_29_0_g170484 = ( (Model_BoundsData1322_g170474).w * break33_g170484.y );
				float temp_output_1733_0_g170474 = ( temp_output_30_0_g170484 + temp_output_29_0_g170484 );
				float lerpResult1904_g170474 = lerp( temp_output_1731_0_g170474 , temp_output_1733_0_g170474 , _motion_base_mask_mode);
				float clampResult17_g170482 = clamp( lerpResult1904_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170487 = ( clampResult17_g170482 - temp_output_7_0_g170487 );
				float temp_output_6_0_g170485 = saturate( ( ( temp_output_9_0_g170487 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170485 = ( temp_output_6_0_g170485 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170485 = temp_output_6_0_g170485;
				#endif
				half Base_Mask217_g170474 = staticSwitch14_g170485;
				half2 Noise_DirWS825_g170499 = ((temp_output_635_0_g170499).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170499 = _MotionBaseNoiseValue;
				float lerpResult701_g170499 = lerp( 1.0 , Input_MotionNoise552_g170499 , Input_WindValue853_g170499);
				float2 lerpResult646_g170499 = lerp( Input_WindDirWS803_g170499 , Noise_DirWS825_g170499 , lerpResult701_g170499);
				half Input_MotionDelay753_g170499 = _MotionBaseDelayValue;
				float lerpResult756_g170499 = lerp( 1.0 , ( Input_WindValue853_g170499 * Input_WindValue853_g170499 ) , Input_MotionDelay753_g170499);
				half Wind_Delay815_g170499 = lerpResult756_g170499;
				float2 temp_output_809_0_g170499 = ( lerpResult646_g170499 * Input_WindValue853_g170499 * Wind_Delay815_g170499 );
				half2 Global_PushDirWS1972_g170474 = temp_output_791_0_g170510;
				half2 Input_PushDirWS807_g170499 = Global_PushDirWS1972_g170474;
				float2 lerpResult811_g170499 = lerp( temp_output_809_0_g170499 , Input_PushDirWS807_g170499 , Input_PushAlpha806_g170499);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170499 = lerpResult811_g170499;
				#else
				float2 staticSwitch808_g170499 = temp_output_809_0_g170499;
				#endif
				float2 break83_g170504 = staticSwitch808_g170499;
				float3 appendResult79_g170504 = (float3(break83_g170504.x , 0.0 , break83_g170504.y));
				half2 Base_Bending893_g170474 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170504 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170474 = ( _MotionBaseIntensityValue * Base_Mask217_g170474 * Base_Bending893_g170474 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170474 = Base_Motion1440_g170474;
				#else
				float2 staticSwitch2384_g170474 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170474 = (float4(staticSwitch2384_g170474 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170474 = appendResult2023_g170474;
				float4 In_RotationData16_g170491 = Final_RotationData1570_g170474;
				{
				Data16_g170491.Dummy = In_Dummy16_g170491;
				Data16_g170491.PositionOS = In_PositionOS16_g170491;
				Data16_g170491.PositionWS = In_PositionWS16_g170491;
				Data16_g170491.PositionWO = In_PositionWO16_g170491;
				Data16_g170491.PositionRawOS = In_PositionRawOS16_g170491;
				Data16_g170491.PositionAddOS = In_PositionAddOS16_g170491;
				Data16_g170491.PivotOS = In_PivotOS16_g170491;
				Data16_g170491.PivotWS = In_PivotWS16_g170491;
				Data16_g170491.PivotWO = In_PivotWO16_g170491;
				Data16_g170491.NormalOS = In_NormalOS16_g170491;
				Data16_g170491.NormalWS = In_NormalWS16_g170491;
				Data16_g170491.NormalRawOS = In_NormalRawOS16_g170491;
				Data16_g170491.NormalRawWS = In_NormalRawWS16_g170491;
				Data16_g170491.TangentOS = In_TangentOS16_g170491;
				Data16_g170491.ViewDirWS = In_ViewDirWS16_g170491;
				Data16_g170491.VertexData = In_VertexData16_g170491;
				Data16_g170491.PhaseData = In_PhaseData16_g170491;
				Data16_g170491.BoundsData = In_BoundsData16_g170491;
				Data16_g170491.RotationData = In_RotationData16_g170491;
				}
				TVEModelData Data15_g170720 = Data16_g170491;
				float Out_Dummy15_g170720 = 0;
				float3 Out_PositionOS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170720 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170720 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170720 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170720 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170720 = float3( 0,0,0 );
				float4 Out_VertexData15_g170720 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170720 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170720 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170720 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170720 = Data15_g170720.Dummy;
				Out_PositionOS15_g170720 = Data15_g170720.PositionOS;
				Out_PositionWS15_g170720 = Data15_g170720.PositionWS;
				Out_PositionWO15_g170720 = Data15_g170720.PositionWO;
				Out_PositionRawOS15_g170720 = Data15_g170720.PositionRawOS;
				Out_PositionAddOS15_g170720 = Data15_g170720.PositionAddOS;
				Out_PivotOS15_g170720 = Data15_g170720.PivotOS;
				Out_PivotWS15_g170720 = Data15_g170720.PivotWS;
				Out_PivotWO15_g170720 = Data15_g170720.PivotWO;
				Out_NormalOS15_g170720 = Data15_g170720.NormalOS;
				Out_NormalWS15_g170720 = Data15_g170720.NormalWS;
				Out_NormalRawOS15_g170720 = Data15_g170720.NormalRawOS;
				Out_NormalRawWS15_g170720 = Data15_g170720.NormalRawWS;
				Out_TangentOS15_g170720 = Data15_g170720.TangentOS;
				Out_ViewDirWS15_g170720 = Data15_g170720.ViewDirWS;
				Out_VertexData15_g170720 = Data15_g170720.VertexData;
				Out_PhaseData15_g170720 = Data15_g170720.PhaseData;
				Out_BoundsData15_g170720 = Data15_g170720.BoundsData;
				Out_RotationData15_g170720 = Data15_g170720.RotationData;
				}
				half3 Model_PositionOS147_g170719 = Out_PositionOS15_g170720;
				half3 Input_False58_g170722 = Model_PositionOS147_g170719;
				half3 VertexPos40_g170723 = Model_PositionOS147_g170719;
				half3 VertexPos40_g170724 = VertexPos40_g170723;
				float3 appendResult74_g170724 = (float3(VertexPos40_g170724.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170724 = appendResult74_g170724;
				float3 break84_g170724 = VertexPos40_g170724;
				float3 appendResult81_g170724 = (float3(0.0 , break84_g170724.y , break84_g170724.z));
				half3 VertexPosOtherAxis82_g170724 = appendResult81_g170724;
				float4 temp_output_1567_33_g170719 = Out_RotationData15_g170720;
				half4 Model_VertexBend1569_g170719 = temp_output_1567_33_g170719;
				half2 Angle44_g170723 = (Model_VertexBend1569_g170719).xy;
				half Angle44_g170724 = (Angle44_g170723).y;
				half3 VertexPos40_g170725 = ( VertexPosRotationAxis50_g170724 + ( VertexPosOtherAxis82_g170724 * cos( Angle44_g170724 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170724 ) * sin( Angle44_g170724 ) ) );
				float3 appendResult74_g170725 = (float3(0.0 , 0.0 , VertexPos40_g170725.z));
				half3 VertexPosRotationAxis50_g170725 = appendResult74_g170725;
				float3 break84_g170725 = VertexPos40_g170725;
				float3 appendResult81_g170725 = (float3(break84_g170725.x , break84_g170725.y , 0.0));
				half3 VertexPosOtherAxis82_g170725 = appendResult81_g170725;
				half Angle44_g170725 = -(Angle44_g170723).x;
				half3 Input_True57_g170722 = ( VertexPosRotationAxis50_g170725 + ( VertexPosOtherAxis82_g170725 * cos( Angle44_g170725 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170725 ) * sin( Angle44_g170725 ) ) );
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170722 = Input_True57_g170722;
				#else
				float3 staticSwitch65_g170722 = Input_False58_g170722;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170722 = Input_True57_g170722;
				#else
				float3 staticSwitch69_g170722 = staticSwitch65_g170722;
				#endif
				float3 temp_output_1578_0_g170719 = staticSwitch69_g170722;
				float3 temp_output_1567_31_g170719 = Out_PositionAddOS15_g170720;
				half3 Model_PositionADD1568_g170719 = temp_output_1567_31_g170719;
				half3 Final_PositionOS178_g170719 = ( temp_output_1578_0_g170719 + Model_PositionADD1568_g170719 );
				float3 In_PositionOS16_g170721 = Final_PositionOS178_g170719;
				float3 In_PositionWS16_g170721 = Out_PositionWS15_g170720;
				float3 In_PositionWO16_g170721 = Out_PositionWO15_g170720;
				float3 In_PositionRawOS16_g170721 = Out_PositionRawOS15_g170720;
				float3 In_PositionAddOS16_g170721 = temp_output_1567_31_g170719;
				float3 In_PivotOS16_g170721 = Out_PivotOS15_g170720;
				float3 In_PivotWS16_g170721 = Out_PivotWS15_g170720;
				float3 In_PivotWO16_g170721 = Out_PivotWO15_g170720;
				float3 In_NormalOS16_g170721 = Out_NormalOS15_g170720;
				float3 In_NormalWS16_g170721 = Out_NormalWS15_g170720;
				float3 In_NormalRawOS16_g170721 = Out_NormalRawOS15_g170720;
				float3 In_NormalRawWS16_g170721 = Out_NormalRawWS15_g170720;
				float4 In_TangentOS16_g170721 = Out_TangentOS15_g170720;
				float3 In_ViewDirWS16_g170721 = Out_ViewDirWS15_g170720;
				float4 In_VertexData16_g170721 = Out_VertexData15_g170720;
				float4 In_PhaseData16_g170721 = Out_PhaseData15_g170720;
				float4 In_BoundsData16_g170721 = Out_BoundsData15_g170720;
				float4 In_RotationData16_g170721 = temp_output_1567_33_g170719;
				{
				Data16_g170721.Dummy = In_Dummy16_g170721;
				Data16_g170721.PositionOS = In_PositionOS16_g170721;
				Data16_g170721.PositionWS = In_PositionWS16_g170721;
				Data16_g170721.PositionWO = In_PositionWO16_g170721;
				Data16_g170721.PositionRawOS = In_PositionRawOS16_g170721;
				Data16_g170721.PositionAddOS = In_PositionAddOS16_g170721;
				Data16_g170721.PivotOS = In_PivotOS16_g170721;
				Data16_g170721.PivotWS = In_PivotWS16_g170721;
				Data16_g170721.PivotWO = In_PivotWO16_g170721;
				Data16_g170721.NormalOS = In_NormalOS16_g170721;
				Data16_g170721.NormalWS = In_NormalWS16_g170721;
				Data16_g170721.NormalRawOS = In_NormalRawOS16_g170721;
				Data16_g170721.NormalRawWS = In_NormalRawWS16_g170721;
				Data16_g170721.TangentOS = In_TangentOS16_g170721;
				Data16_g170721.ViewDirWS = In_ViewDirWS16_g170721;
				Data16_g170721.VertexData = In_VertexData16_g170721;
				Data16_g170721.PhaseData = In_PhaseData16_g170721;
				Data16_g170721.BoundsData = In_BoundsData16_g170721;
				Data16_g170721.RotationData = In_RotationData16_g170721;
				}
				TVEModelData Data15_g170744 = Data16_g170721;
				float Out_Dummy15_g170744 = 0;
				float3 Out_PositionOS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170744 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170744 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170744 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170744 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170744 = float3( 0,0,0 );
				float4 Out_VertexData15_g170744 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170744 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170744 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170744 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170744 = Data15_g170744.Dummy;
				Out_PositionOS15_g170744 = Data15_g170744.PositionOS;
				Out_PositionWS15_g170744 = Data15_g170744.PositionWS;
				Out_PositionWO15_g170744 = Data15_g170744.PositionWO;
				Out_PositionRawOS15_g170744 = Data15_g170744.PositionRawOS;
				Out_PositionAddOS15_g170744 = Data15_g170744.PositionAddOS;
				Out_PivotOS15_g170744 = Data15_g170744.PivotOS;
				Out_PivotWS15_g170744 = Data15_g170744.PivotWS;
				Out_PivotWO15_g170744 = Data15_g170744.PivotWO;
				Out_NormalOS15_g170744 = Data15_g170744.NormalOS;
				Out_NormalWS15_g170744 = Data15_g170744.NormalWS;
				Out_NormalRawOS15_g170744 = Data15_g170744.NormalRawOS;
				Out_NormalRawWS15_g170744 = Data15_g170744.NormalRawWS;
				Out_TangentOS15_g170744 = Data15_g170744.TangentOS;
				Out_ViewDirWS15_g170744 = Data15_g170744.ViewDirWS;
				Out_VertexData15_g170744 = Data15_g170744.VertexData;
				Out_PhaseData15_g170744 = Data15_g170744.PhaseData;
				Out_BoundsData15_g170744 = Data15_g170744.BoundsData;
				Out_RotationData15_g170744 = Data15_g170744.RotationData;
				}
				float3 In_PositionOS16_g170745 = Out_PositionOS15_g170744;
				float3 In_PositionWS16_g170745 = Out_PositionWS15_g170744;
				float3 temp_output_1567_17_g170743 = Out_PositionWO15_g170744;
				float3 In_PositionWO16_g170745 = temp_output_1567_17_g170743;
				float3 temp_output_1567_26_g170743 = Out_PositionRawOS15_g170744;
				float3 In_PositionRawOS16_g170745 = temp_output_1567_26_g170743;
				float3 In_PositionAddOS16_g170745 = Out_PositionAddOS15_g170744;
				float3 In_PivotOS16_g170745 = Out_PivotOS15_g170744;
				float3 In_PivotWS16_g170745 = Out_PivotWS15_g170744;
				float3 In_PivotWO16_g170745 = Out_PivotWO15_g170744;
				half3 Model_NormalOS1568_g170743 = Out_NormalOS15_g170744;
				float3 lerpResult1589_g170743 = lerp( Model_NormalOS1568_g170743 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170743 = temp_output_1567_26_g170743;
				float3 normalizeResult1594_g170743 = ASESafeNormalize( ( Model_PositionRAW1592_g170743 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170743 = lerp( lerpResult1589_g170743 , normalizeResult1594_g170743 , _NormalSphereValue);
				half3 Input_False58_g170758 = lerpResult1585_g170743;
				half3 VertexPos40_g170747 = lerpResult1585_g170743;
				half3 VertexPos40_g170748 = VertexPos40_g170747;
				float3 appendResult74_g170748 = (float3(VertexPos40_g170748.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170748 = appendResult74_g170748;
				float3 break84_g170748 = VertexPos40_g170748;
				float3 appendResult81_g170748 = (float3(0.0 , break84_g170748.y , break84_g170748.z));
				half3 VertexPosOtherAxis82_g170748 = appendResult81_g170748;
				float4 temp_output_1567_33_g170743 = Out_RotationData15_g170744;
				half4 Model_RotationData1583_g170743 = temp_output_1567_33_g170743;
				half2 Angle44_g170747 = Model_RotationData1583_g170743.xy;
				half Angle44_g170748 = (Angle44_g170747).y;
				half3 VertexPos40_g170749 = ( VertexPosRotationAxis50_g170748 + ( VertexPosOtherAxis82_g170748 * cos( Angle44_g170748 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170748 ) * sin( Angle44_g170748 ) ) );
				float3 appendResult74_g170749 = (float3(0.0 , 0.0 , VertexPos40_g170749.z));
				half3 VertexPosRotationAxis50_g170749 = appendResult74_g170749;
				float3 break84_g170749 = VertexPos40_g170749;
				float3 appendResult81_g170749 = (float3(break84_g170749.x , break84_g170749.y , 0.0));
				half3 VertexPosOtherAxis82_g170749 = appendResult81_g170749;
				half Angle44_g170749 = -(Angle44_g170747).x;
				float3 lerpResult1591_g170743 = lerp( lerpResult1585_g170743 , ( VertexPosRotationAxis50_g170749 + ( VertexPosOtherAxis82_g170749 * cos( Angle44_g170749 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170749 ) * sin( Angle44_g170749 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170758 = lerpResult1591_g170743;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170758 = Input_True57_g170758;
				#else
				float3 staticSwitch65_g170758 = Input_False58_g170758;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170758 = Input_True57_g170758;
				#else
				float3 staticSwitch69_g170758 = staticSwitch65_g170758;
				#endif
				float3 temp_output_1715_0_g170743 = staticSwitch69_g170758;
				float4 temp_output_1567_29_g170743 = Out_VertexData15_g170744;
				half4 Model_VertexData1608_g170743 = temp_output_1567_29_g170743;
				float4 break1683_g170743 = Model_VertexData1608_g170743;
				float4 break33_g170750 = _normal_vert_mode;
				float temp_output_30_0_g170750 = ( break1683_g170743.x * break33_g170750.x );
				float temp_output_29_0_g170750 = ( break1683_g170743.y * break33_g170750.y );
				float temp_output_31_0_g170750 = ( break1683_g170743.z * break33_g170750.z );
				float temp_output_28_0_g170750 = ( temp_output_30_0_g170750 + temp_output_29_0_g170750 + temp_output_31_0_g170750 + ( break1683_g170743.w * break33_g170750.w ) );
				float clampResult17_g170751 = clamp( temp_output_28_0_g170750 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170755 = _NormalMeshRemap.x;
				float temp_output_9_0_g170755 = ( clampResult17_g170751 - temp_output_7_0_g170755 );
				float lerpResult1695_g170743 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170755 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170752 = lerpResult1695_g170743;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170752 = ( temp_output_6_0_g170752 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170752 = temp_output_6_0_g170752;
				#endif
				float temp_output_1690_0_g170743 = staticSwitch14_g170752;
				half Normal_MeskMask1691_g170743 = temp_output_1690_0_g170743;
				half Normal_Proj_Mask1647_g170743 = 1.0;
				float temp_output_1699_0_g170743 = ( Normal_MeskMask1691_g170743 * Normal_Proj_Mask1647_g170743 );
				float3 lerpResult1670_g170743 = lerp( Model_NormalOS1568_g170743 , temp_output_1715_0_g170743 , temp_output_1699_0_g170743);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170743 = lerpResult1670_g170743;
				#else
				float3 staticSwitch1716_g170743 = Model_NormalOS1568_g170743;
				#endif
				half3 Final_NormalOS178_g170743 = staticSwitch1716_g170743;
				float3 In_NormalOS16_g170745 = Final_NormalOS178_g170743;
				float3 temp_output_1567_21_g170743 = Out_NormalWS15_g170744;
				float3 In_NormalWS16_g170745 = temp_output_1567_21_g170743;
				float3 In_NormalRawOS16_g170745 = Out_NormalRawOS15_g170744;
				float3 In_NormalRawWS16_g170745 = Out_NormalRawWS15_g170744;
				float4 In_TangentOS16_g170745 = Out_TangentOS15_g170744;
				float3 In_ViewDirWS16_g170745 = Out_ViewDirWS15_g170744;
				float4 In_VertexData16_g170745 = temp_output_1567_29_g170743;
				float4 In_PhaseData16_g170745 = Out_PhaseData15_g170744;
				float4 In_BoundsData16_g170745 = Out_BoundsData15_g170744;
				float4 In_RotationData16_g170745 = temp_output_1567_33_g170743;
				{
				Data16_g170745.Dummy = In_Dummy16_g170745;
				Data16_g170745.PositionOS = In_PositionOS16_g170745;
				Data16_g170745.PositionWS = In_PositionWS16_g170745;
				Data16_g170745.PositionWO = In_PositionWO16_g170745;
				Data16_g170745.PositionRawOS = In_PositionRawOS16_g170745;
				Data16_g170745.PositionAddOS = In_PositionAddOS16_g170745;
				Data16_g170745.PivotOS = In_PivotOS16_g170745;
				Data16_g170745.PivotWS = In_PivotWS16_g170745;
				Data16_g170745.PivotWO = In_PivotWO16_g170745;
				Data16_g170745.NormalOS = In_NormalOS16_g170745;
				Data16_g170745.NormalWS = In_NormalWS16_g170745;
				Data16_g170745.NormalRawOS = In_NormalRawOS16_g170745;
				Data16_g170745.NormalRawWS = In_NormalRawWS16_g170745;
				Data16_g170745.TangentOS = In_TangentOS16_g170745;
				Data16_g170745.ViewDirWS = In_ViewDirWS16_g170745;
				Data16_g170745.VertexData = In_VertexData16_g170745;
				Data16_g170745.PhaseData = In_PhaseData16_g170745;
				Data16_g170745.BoundsData = In_BoundsData16_g170745;
				Data16_g170745.RotationData = In_RotationData16_g170745;
				}
				TVEModelData Data15_g170760 = Data16_g170745;
				float Out_Dummy15_g170760 = 0;
				float3 Out_PositionOS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170760 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170760 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170760 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170760 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170760 = float3( 0,0,0 );
				float4 Out_VertexData15_g170760 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170760 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170760 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170760 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170760 = Data15_g170760.Dummy;
				Out_PositionOS15_g170760 = Data15_g170760.PositionOS;
				Out_PositionWS15_g170760 = Data15_g170760.PositionWS;
				Out_PositionWO15_g170760 = Data15_g170760.PositionWO;
				Out_PositionRawOS15_g170760 = Data15_g170760.PositionRawOS;
				Out_PositionAddOS15_g170760 = Data15_g170760.PositionAddOS;
				Out_PivotOS15_g170760 = Data15_g170760.PivotOS;
				Out_PivotWS15_g170760 = Data15_g170760.PivotWS;
				Out_PivotWO15_g170760 = Data15_g170760.PivotWO;
				Out_NormalOS15_g170760 = Data15_g170760.NormalOS;
				Out_NormalWS15_g170760 = Data15_g170760.NormalWS;
				Out_NormalRawOS15_g170760 = Data15_g170760.NormalRawOS;
				Out_NormalRawWS15_g170760 = Data15_g170760.NormalRawWS;
				Out_TangentOS15_g170760 = Data15_g170760.TangentOS;
				Out_ViewDirWS15_g170760 = Data15_g170760.ViewDirWS;
				Out_VertexData15_g170760 = Data15_g170760.VertexData;
				Out_PhaseData15_g170760 = Data15_g170760.PhaseData;
				Out_BoundsData15_g170760 = Data15_g170760.BoundsData;
				Out_RotationData15_g170760 = Data15_g170760.RotationData;
				}
				float3 temp_output_217_24_g170759 = Out_PivotOS15_g170760;
				float3 In_PositionOS16_g170761 = ( Out_PositionOS15_g170760 + temp_output_217_24_g170759 );
				float3 In_PositionWS16_g170761 = Out_PositionWS15_g170760;
				float3 In_PositionWO16_g170761 = Out_PositionWO15_g170760;
				float3 In_PositionRawOS16_g170761 = Out_PositionRawOS15_g170760;
				float3 In_PositionAddOS16_g170761 = Out_PositionAddOS15_g170760;
				float3 In_PivotOS16_g170761 = temp_output_217_24_g170759;
				float3 In_PivotWS16_g170761 = Out_PivotWS15_g170760;
				float3 In_PivotWO16_g170761 = Out_PivotWO15_g170760;
				float3 In_NormalOS16_g170761 = Out_NormalOS15_g170760;
				float3 In_NormalWS16_g170761 = Out_NormalWS15_g170760;
				float3 In_NormalRawOS16_g170761 = Out_NormalRawOS15_g170760;
				float3 In_NormalRawWS16_g170761 = Out_NormalRawWS15_g170760;
				float4 In_TangentOS16_g170761 = Out_TangentOS15_g170760;
				float3 In_ViewDirWS16_g170761 = Out_ViewDirWS15_g170760;
				float4 In_VertexData16_g170761 = Out_VertexData15_g170760;
				float4 In_PhaseData16_g170761 = Out_PhaseData15_g170760;
				float4 In_BoundsData16_g170761 = Out_BoundsData15_g170760;
				float4 In_RotationData16_g170761 = Out_RotationData15_g170760;
				{
				Data16_g170761.Dummy = In_Dummy16_g170761;
				Data16_g170761.PositionOS = In_PositionOS16_g170761;
				Data16_g170761.PositionWS = In_PositionWS16_g170761;
				Data16_g170761.PositionWO = In_PositionWO16_g170761;
				Data16_g170761.PositionRawOS = In_PositionRawOS16_g170761;
				Data16_g170761.PositionAddOS = In_PositionAddOS16_g170761;
				Data16_g170761.PivotOS = In_PivotOS16_g170761;
				Data16_g170761.PivotWS = In_PivotWS16_g170761;
				Data16_g170761.PivotWO = In_PivotWO16_g170761;
				Data16_g170761.NormalOS = In_NormalOS16_g170761;
				Data16_g170761.NormalWS = In_NormalWS16_g170761;
				Data16_g170761.NormalRawOS = In_NormalRawOS16_g170761;
				Data16_g170761.NormalRawWS = In_NormalRawWS16_g170761;
				Data16_g170761.TangentOS = In_TangentOS16_g170761;
				Data16_g170761.ViewDirWS = In_ViewDirWS16_g170761;
				Data16_g170761.VertexData = In_VertexData16_g170761;
				Data16_g170761.PhaseData = In_PhaseData16_g170761;
				Data16_g170761.BoundsData = In_BoundsData16_g170761;
				Data16_g170761.RotationData = In_RotationData16_g170761;
				}
				TVEModelData Data15_g170774 = Data16_g170761;
				float Out_Dummy15_g170774 = 0;
				float3 Out_PositionOS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170774 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170774 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170774 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170774 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170774 = float3( 0,0,0 );
				float4 Out_VertexData15_g170774 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170774 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170774 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170774 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170774 = Data15_g170774.Dummy;
				Out_PositionOS15_g170774 = Data15_g170774.PositionOS;
				Out_PositionWS15_g170774 = Data15_g170774.PositionWS;
				Out_PositionWO15_g170774 = Data15_g170774.PositionWO;
				Out_PositionRawOS15_g170774 = Data15_g170774.PositionRawOS;
				Out_PositionAddOS15_g170774 = Data15_g170774.PositionAddOS;
				Out_PivotOS15_g170774 = Data15_g170774.PivotOS;
				Out_PivotWS15_g170774 = Data15_g170774.PivotWS;
				Out_PivotWO15_g170774 = Data15_g170774.PivotWO;
				Out_NormalOS15_g170774 = Data15_g170774.NormalOS;
				Out_NormalWS15_g170774 = Data15_g170774.NormalWS;
				Out_NormalRawOS15_g170774 = Data15_g170774.NormalRawOS;
				Out_NormalRawWS15_g170774 = Data15_g170774.NormalRawWS;
				Out_TangentOS15_g170774 = Data15_g170774.TangentOS;
				Out_ViewDirWS15_g170774 = Data15_g170774.ViewDirWS;
				Out_VertexData15_g170774 = Data15_g170774.VertexData;
				Out_PhaseData15_g170774 = Data15_g170774.PhaseData;
				Out_BoundsData15_g170774 = Data15_g170774.BoundsData;
				Out_RotationData15_g170774 = Data15_g170774.RotationData;
				}
				float3 temp_output_31_0_g170771 = Out_PositionOS15_g170774;
				float3 temp_output_6_0_g170785 = ( temp_output_31_0_g170771 + _DisableSRPBatcher );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170785 = ( temp_output_6_0_g170785 + ( 0.0 * 0.0 ) );
				#else
				float3 staticSwitch14_g170785 = temp_output_6_0_g170785;
				#endif
				
				output.ase_texcoord3.xyz = vertexToFrag73_g170196;
				output.ase_texcoord4.xyz = vertexToFrag76_g170196;
				output.ase_texcoord5.xyz = ase_normalWS;
				float3 ase_tangentWS = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				output.ase_texcoord6.xyz = ase_tangentWS;
				float ase_tangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_bitangentWS = cross( ase_normalWS, ase_tangentWS ) * ase_tangentSign;
				output.ase_texcoord7.xyz = ase_bitangentWS;
				float temp_output_6_0_g170497 = ( _MotionHighlightValue * Global_DistMask1820_g170474 * ( Tiny_Mask218_g170474 * Tiny_Mask218_g170474 ) * ( Global_Wave1475_g170474 * Global_Wave1475_g170474 * Global_Wave1475_g170474 * Global_Wave1475_g170474 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Wave_Mask4324 = staticSwitch14_g170497;
				float4 appendResult23_g170573 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask4324));
				float4 vertexToFrag24_g170573 = appendResult23_g170573;
				output.ase_texcoord8 = vertexToFrag24_g170573;
				
				output.ase_texcoord1 = inputMesh.ase_texcoord;
				output.ase_texcoord2.xy = inputMesh.ase_texcoord2.xy;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord2.zw = 0;
				output.ase_texcoord3.w = 0;
				output.ase_texcoord4.w = 0;
				output.ase_texcoord5.w = 0;
				output.ase_texcoord6.w = 0;
				output.ase_texcoord7.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = staticSwitch14_g170785;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170774;
				inputMesh.tangentOS = Out_TangentOS15_g170774;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						, out float4 outColor : SV_Target0
						#if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
					)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );

				float3 PositionRWS = packedInput.positionRWS;
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;
				input.positionRWS = PositionRWS;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half IsFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				SceneSurfaceDescription surfaceDescription = (SceneSurfaceDescription)0;
				float localCustomAlphaClip21_g170784 = ( 0.0 );
				float localBreakData4_g170777 = ( 0.0 );
				float localCompData3_g170764 = ( 0.0 );
				TVEVisualData Data3_g170764 = (TVEVisualData)0;
				half Dummy145_g170762 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170764 = Dummy145_g170762;
				float localBreakData4_g170763 = ( 0.0 );
				float localCompData3_g170732 = ( 0.0 );
				TVEVisualData Data3_g170732 = (TVEVisualData)0;
				half Dummy145_g170727 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170732 = Dummy145_g170727;
				float localBreakData4_g170731 = ( 0.0 );
				float localCompData3_g170709 = ( 0.0 );
				TVEVisualData Data3_g170709 = (TVEVisualData)0;
				half Dummy594_g170706 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170709 = Dummy594_g170706;
				float localBreakData4_g170708 = ( 0.0 );
				float localCompData3_g170692 = ( 0.0 );
				TVEVisualData Data3_g170692 = (TVEVisualData)0;
				half Dummy594_g170691 = ( _CutoutCategory + _CutoutEnd + _CutoutBakeMode );
				float In_Dummy3_g170692 = Dummy594_g170691;
				float localBreakData4_g170694 = ( 0.0 );
				float localCompData3_g170664 = ( 0.0 );
				TVEVisualData Data3_g170664 = (TVEVisualData)0;
				half Dummy594_g170662 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170664 = Dummy594_g170662;
				float localBreakData4_g170663 = ( 0.0 );
				float localCompData3_g170628 = ( 0.0 );
				TVEVisualData Data3_g170628 = (TVEVisualData)0;
				half Dummy594_g170625 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170628 = Dummy594_g170625;
				float localBreakData4_g170626 = ( 0.0 );
				float localCompData3_g170624 = ( 0.0 );
				TVEVisualData Data3_g170624 = (TVEVisualData)0;
				float In_Dummy3_g170624 = 0.0;
				float localBreakData4_g170623 = ( 0.0 );
				float localCompData3_g170601 = ( 0.0 );
				TVEVisualData Data3_g170601 = (TVEVisualData)0;
				half Dummy205_g170598 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170601 = Dummy205_g170598;
				float localBreakData4_g170600 = ( 0.0 );
				float localCompData3_g170578 = ( 0.0 );
				TVEVisualData Data3_g170578 = (TVEVisualData)0;
				half Dummy205_g170574 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170578 = Dummy205_g170574;
				float localBreakData4_g170579 = ( 0.0 );
				float localCompData3_g170567 = ( 0.0 );
				TVEVisualData Data3_g170567 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170567 = Dummy220_g170564;
				float localBreakData4_g170566 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170447 = ( 0.0 );
				TVEVisualData Data3_g170447 = (TVEVisualData)0;
				half4 Dummy944_g170438 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170447 = Dummy944_g170438.x;
				float localBreakData4_g170446 = ( 0.0 );
				float localCompData3_g170415 = ( 0.0 );
				TVEVisualData Data3_g170415 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170415 = Dummy946_g170394.x;
				float localBreakData4_g170405 = ( 0.0 );
				float localCompData3_g170387 = ( 0.0 );
				TVEVisualData Data3_g170387 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170387 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170380) = _MainAlbedoTex;
				float localFilterTexture19_g170383 = ( 0.0 );
				SamplerState SS19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170383 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170383 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170383 = SamplerDefault19_g170383;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170383 = SamplerDefault19_g170383;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170383 = SamplerPoint19_g170383;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170383 = SamplerLow19_g170383;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170383 = SamplerMedium19_g170383;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170383 = SamplerHigh19_g170383;
				#endif
				}
				SamplerState Sampler276_g170380 = SS19_g170383;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170380 = Local_Coords180_g170372;
				half4 Coords276_g170380 = temp_output_37_0_g170380;
				half2 TexCoord276_g170380 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170380 = SampleMain( Texture276_g170380 , Sampler276_g170380 , Coords276_g170380 , TexCoord276_g170380 );
				TEXTURE2D(Texture275_g170380) = _MainAlbedoTex;
				SamplerState Sampler275_g170380 = SS19_g170383;
				half4 Coords275_g170380 = temp_output_37_0_g170380;
				half2 TexCoord275_g170380 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170380 = SampleExtra( Texture275_g170380 , Sampler275_g170380 , Coords275_g170380 , TexCoord275_g170380 );
				TEXTURE2D(Texture238_g170380) = _MainAlbedoTex;
				SamplerState Sampler238_g170380 = SS19_g170383;
				half4 Coords238_g170380 = temp_output_37_0_g170380;
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord3.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord4.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 ase_normalWS = packedInput.ase_texcoord5.xyz;
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170386 = Data16_g170201;
				float Out_Dummy15_g170386 = 0;
				float3 Out_PositionWS15_g170386 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170386 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170386 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170386 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170386 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170386 = float3( 0,0,0 );
				float4 Out_VertexData15_g170386 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170386 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170386 = Data15_g170386.Dummy;
				Out_PositionWS15_g170386 = Data15_g170386.PositionWS;
				Out_PositionWO15_g170386 = Data15_g170386.PositionWO;
				Out_PivotWS15_g170386 = Data15_g170386.PivotWS;
				Out_PivotWO15_g170386 = Data15_g170386.PivotWO;
				Out_NormalWS15_g170386 = Data15_g170386.NormalWS;
				Out_ViewDirWS15_g170386 = Data15_g170386.ViewDirWS;
				Out_VertexData15_g170386 = Data15_g170386.VertexData;
				Out_BoundsData15_g170386 = Data15_g170386.BoundsData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170386;
				float3 temp_output_279_0_g170380 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170380 = temp_output_279_0_g170380;
				half4 localSamplePlanar2D238_g170380 = SamplePlanar2D( Texture238_g170380 , Sampler238_g170380 , Coords238_g170380 , WorldPosition238_g170380 );
				TEXTURE2D(Texture246_g170380) = _MainAlbedoTex;
				SamplerState Sampler246_g170380 = SS19_g170383;
				half4 Coords246_g170380 = temp_output_37_0_g170380;
				half3 WorldPosition246_g170380 = temp_output_279_0_g170380;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170386;
				float3 temp_output_280_0_g170380 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170380 = temp_output_280_0_g170380;
				half4 localSamplePlanar3D246_g170380 = SamplePlanar3D( Texture246_g170380 , Sampler246_g170380 , Coords246_g170380 , WorldPosition246_g170380 , WorldNormal246_g170380 );
				TEXTURE2D(Texture234_g170380) = _MainAlbedoTex;
				SamplerState Sampler234_g170380 = SS19_g170383;
				float4 Coords234_g170380 = temp_output_37_0_g170380;
				float3 WorldPosition234_g170380 = temp_output_279_0_g170380;
				float4 localSampleStochastic2D234_g170380 = SampleStochastic2D( Texture234_g170380 , Sampler234_g170380 , Coords234_g170380 , WorldPosition234_g170380 );
				TEXTURE2D(Texture263_g170380) = _MainAlbedoTex;
				SamplerState Sampler263_g170380 = SS19_g170383;
				half4 Coords263_g170380 = temp_output_37_0_g170380;
				half3 WorldPosition263_g170380 = temp_output_279_0_g170380;
				half3 WorldNormal263_g170380 = temp_output_280_0_g170380;
				half4 localSampleStochastic3D263_g170380 = SampleStochastic3D( Texture263_g170380 , Sampler263_g170380 , Coords263_g170380 , WorldPosition263_g170380 , WorldNormal263_g170380 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170380;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170380;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170380;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170380;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170380;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170380;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170380;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170382) = _MainShaderTex;
				float localFilterTexture30_g170385 = ( 0.0 );
				SamplerState SS30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170385 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170385 = SamplerDefault30_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170385 = SamplerDefault30_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170385 = SamplerPoint30_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170385 = SamplerLow30_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170385 = SamplerMedium30_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170385 = SamplerHigh30_g170385;
				#endif
				}
				SamplerState Sampler276_g170382 = SS30_g170385;
				float4 temp_output_37_0_g170382 = Local_Coords180_g170372;
				half4 Coords276_g170382 = temp_output_37_0_g170382;
				half2 TexCoord276_g170382 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170382 = SampleMain( Texture276_g170382 , Sampler276_g170382 , Coords276_g170382 , TexCoord276_g170382 );
				TEXTURE2D(Texture275_g170382) = _MainShaderTex;
				SamplerState Sampler275_g170382 = SS30_g170385;
				half4 Coords275_g170382 = temp_output_37_0_g170382;
				half2 TexCoord275_g170382 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170382 = SampleExtra( Texture275_g170382 , Sampler275_g170382 , Coords275_g170382 , TexCoord275_g170382 );
				TEXTURE2D(Texture238_g170382) = _MainShaderTex;
				SamplerState Sampler238_g170382 = SS30_g170385;
				half4 Coords238_g170382 = temp_output_37_0_g170382;
				float3 temp_output_279_0_g170382 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170382 = temp_output_279_0_g170382;
				half4 localSamplePlanar2D238_g170382 = SamplePlanar2D( Texture238_g170382 , Sampler238_g170382 , Coords238_g170382 , WorldPosition238_g170382 );
				TEXTURE2D(Texture246_g170382) = _MainShaderTex;
				SamplerState Sampler246_g170382 = SS30_g170385;
				half4 Coords246_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition246_g170382 = temp_output_279_0_g170382;
				float3 temp_output_280_0_g170382 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170382 = temp_output_280_0_g170382;
				half4 localSamplePlanar3D246_g170382 = SamplePlanar3D( Texture246_g170382 , Sampler246_g170382 , Coords246_g170382 , WorldPosition246_g170382 , WorldNormal246_g170382 );
				TEXTURE2D(Texture234_g170382) = _MainShaderTex;
				SamplerState Sampler234_g170382 = SS30_g170385;
				float4 Coords234_g170382 = temp_output_37_0_g170382;
				float3 WorldPosition234_g170382 = temp_output_279_0_g170382;
				float4 localSampleStochastic2D234_g170382 = SampleStochastic2D( Texture234_g170382 , Sampler234_g170382 , Coords234_g170382 , WorldPosition234_g170382 );
				TEXTURE2D(Texture263_g170382) = _MainShaderTex;
				SamplerState Sampler263_g170382 = SS30_g170385;
				half4 Coords263_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition263_g170382 = temp_output_279_0_g170382;
				half3 WorldNormal263_g170382 = temp_output_280_0_g170382;
				half4 localSampleStochastic3D263_g170382 = SampleStochastic3D( Texture263_g170382 , Sampler263_g170382 , Coords263_g170382 , WorldPosition263_g170382 , WorldNormal263_g170382 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170382;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170382;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170382;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170377 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170388 = _MainMultiRemap.x;
				float temp_output_9_0_g170388 = ( clampResult17_g170377 - temp_output_7_0_g170388 );
				half Local_MultiMask78_g170372 = saturate( ( ( temp_output_9_0_g170388 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170387 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170387 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170381) = _MainNormalTex;
				float localFilterTexture29_g170384 = ( 0.0 );
				SamplerState SS29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170384 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170384 = SamplerDefault29_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170384 = SamplerDefault29_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170384 = SamplerPoint29_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170384 = SamplerLow29_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170384 = SamplerMedium29_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170384 = SamplerHigh29_g170384;
				#endif
				}
				SamplerState Sampler276_g170381 = SS29_g170384;
				float4 temp_output_37_0_g170381 = Local_Coords180_g170372;
				half4 Coords276_g170381 = temp_output_37_0_g170381;
				half2 TexCoord276_g170381 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170381 = SampleMain( Texture276_g170381 , Sampler276_g170381 , Coords276_g170381 , TexCoord276_g170381 );
				TEXTURE2D(Texture275_g170381) = _MainNormalTex;
				SamplerState Sampler275_g170381 = SS29_g170384;
				half4 Coords275_g170381 = temp_output_37_0_g170381;
				half2 TexCoord275_g170381 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170381 = SampleExtra( Texture275_g170381 , Sampler275_g170381 , Coords275_g170381 , TexCoord275_g170381 );
				TEXTURE2D(Texture238_g170381) = _MainNormalTex;
				SamplerState Sampler238_g170381 = SS29_g170384;
				half4 Coords238_g170381 = temp_output_37_0_g170381;
				float3 temp_output_279_0_g170381 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170381 = temp_output_279_0_g170381;
				half4 localSamplePlanar2D238_g170381 = SamplePlanar2D( Texture238_g170381 , Sampler238_g170381 , Coords238_g170381 , WorldPosition238_g170381 );
				TEXTURE2D(Texture246_g170381) = _MainNormalTex;
				SamplerState Sampler246_g170381 = SS29_g170384;
				half4 Coords246_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition246_g170381 = temp_output_279_0_g170381;
				float3 temp_output_280_0_g170381 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170381 = temp_output_280_0_g170381;
				half4 localSamplePlanar3D246_g170381 = SamplePlanar3D( Texture246_g170381 , Sampler246_g170381 , Coords246_g170381 , WorldPosition246_g170381 , WorldNormal246_g170381 );
				TEXTURE2D(Texture234_g170381) = _MainNormalTex;
				SamplerState Sampler234_g170381 = SS29_g170384;
				float4 Coords234_g170381 = temp_output_37_0_g170381;
				float3 WorldPosition234_g170381 = temp_output_279_0_g170381;
				float4 localSampleStochastic2D234_g170381 = SampleStochastic2D( Texture234_g170381 , Sampler234_g170381 , Coords234_g170381 , WorldPosition234_g170381 );
				TEXTURE2D(Texture263_g170381) = _MainNormalTex;
				SamplerState Sampler263_g170381 = SS29_g170384;
				half4 Coords263_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition263_g170381 = temp_output_279_0_g170381;
				half3 WorldNormal263_g170381 = temp_output_280_0_g170381;
				half4 localSampleStochastic3D263_g170381 = SampleStochastic3D( Texture263_g170381 , Sampler263_g170381 , Coords263_g170381 , WorldPosition263_g170381 , WorldNormal263_g170381 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170381;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170381;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170381;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3 ase_tangentWS = packedInput.ase_texcoord6.xyz;
				float3 ase_bitangentWS = packedInput.ase_texcoord7.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_tangentWS,ase_bitangentWS,ase_normalWS);
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170387 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( ase_tangentWS.x, ase_bitangentWS.x, ase_normalWS.x );
				float3 tanToWorld1 = float3( ase_tangentWS.y, ase_bitangentWS.y, ase_normalWS.y );
				float3 tanToWorld2 = float3( ase_tangentWS.z, ase_bitangentWS.z, ase_normalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3(dot(tanToWorld0,tanNormal74_g170375), dot(tanToWorld1,tanNormal74_g170375), dot(tanToWorld2,tanNormal74_g170375)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170387 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170387 = Local_Masks109_g170372;
				float4 In_Emissive3_g170387 = half4(1,1,1,1);
				float3 temp_output_3_0_g170376 = Local_Albedo139_g170372;
				float dotResult20_g170376 = dot( temp_output_3_0_g170376 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170376;
				float In_Grayscale3_g170387 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170387 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170387 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170387 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170387 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170387 = temp_cast_4;
				float In_Transmission3_g170387 = 1.0;
				float In_Thickness3_g170387 = 0.0;
				float In_Diffusion3_g170387 = 0.0;
				{
				Data3_g170387.Dummy = In_Dummy3_g170387;
				Data3_g170387.Albedo = In_Albedo3_g170387;
				Data3_g170387.AlbedoRaw = In_AlbedoRaw3_g170387;
				Data3_g170387.NormalTS = In_NormalTS3_g170387;
				Data3_g170387.NormalWS = In_NormalWS3_g170387;
				Data3_g170387.Shader = In_Shader3_g170387;
				Data3_g170387.Emissive= In_Emissive3_g170387;
				Data3_g170387.MultiMask = In_MultiMask3_g170387;
				Data3_g170387.Grayscale = In_Grayscale3_g170387;
				Data3_g170387.Luminosity = In_Luminosity3_g170387;
				Data3_g170387.AlphaClip = In_AlphaClip3_g170387;
				Data3_g170387.AlphaFade = In_AlphaFade3_g170387;
				Data3_g170387.Translucency = In_Translucency3_g170387;
				Data3_g170387.Transmission = In_Transmission3_g170387;
				Data3_g170387.Thickness = In_Thickness3_g170387;
				Data3_g170387.Diffusion = In_Diffusion3_g170387;
				}
				TVEVisualData Data4_g170405 = Data3_g170387;
				float Out_Dummy4_g170405 = 0;
				float3 Out_Albedo4_g170405 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170405 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170405 = float2( 0,0 );
				float3 Out_NormalWS4_g170405 = float3( 0,0,0 );
				float4 Out_Shader4_g170405 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170405 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170405 = 0;
				float Out_Grayscale4_g170405 = 0;
				float Out_Luminosity4_g170405 = 0;
				float Out_AlphaClip4_g170405 = 0;
				float Out_AlphaFade4_g170405 = 0;
				float3 Out_Translucency4_g170405 = float3( 0,0,0 );
				float Out_Transmission4_g170405 = 0;
				float Out_Thickness4_g170405 = 0;
				float Out_Diffusion4_g170405 = 0;
				{
				Out_Dummy4_g170405 = Data4_g170405.Dummy;
				Out_Albedo4_g170405 = Data4_g170405.Albedo;
				Out_AlbedoRaw4_g170405 = Data4_g170405.AlbedoRaw;
				Out_NormalTS4_g170405 = Data4_g170405.NormalTS;
				Out_NormalWS4_g170405 = Data4_g170405.NormalWS;
				Out_Shader4_g170405 = Data4_g170405.Shader;
				Out_Emissive4_g170405= Data4_g170405.Emissive;
				Out_MultiMask4_g170405 = Data4_g170405.MultiMask;
				Out_Grayscale4_g170405 = Data4_g170405.Grayscale;
				Out_Luminosity4_g170405= Data4_g170405.Luminosity;
				Out_AlphaClip4_g170405 = Data4_g170405.AlphaClip;
				Out_AlphaFade4_g170405 = Data4_g170405.AlphaFade;
				Out_Translucency4_g170405 = Data4_g170405.Translucency;
				Out_Transmission4_g170405 = Data4_g170405.Transmission;
				Out_Thickness4_g170405 = Data4_g170405.Thickness;
				Out_Diffusion4_g170405 = Data4_g170405.Diffusion;
				}
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170405;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				float localFilterTexture19_g170411 = ( 0.0 );
				SamplerState SS19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170411 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170411 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170411 = SamplerDefault19_g170411;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170411 = SamplerDefault19_g170411;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170411 = SamplerPoint19_g170411;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170411 = SamplerLow19_g170411;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170411 = SamplerMedium19_g170411;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170411 = SamplerHigh19_g170411;
				#endif
				}
				SamplerState Sampler276_g170395 = SS19_g170411;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = SS19_g170411;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = SS19_g170411;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170414 = Data16_g170201;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				}
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = SS19_g170411;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = SS19_g170411;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = SS19_g170411;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				float localFilterTexture30_g170413 = ( 0.0 );
				SamplerState SS30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170413 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170413 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170413 = SamplerDefault30_g170413;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170413 = SamplerDefault30_g170413;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170413 = SamplerPoint30_g170413;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170413 = SamplerLow30_g170413;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170413 = SamplerMedium30_g170413;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170413 = SamplerHigh30_g170413;
				#endif
				}
				SamplerState Sampler276_g170397 = SS30_g170413;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = SS30_g170413;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = SS30_g170413;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = SS30_g170413;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = SS30_g170413;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = SS30_g170413;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170416 = _SecondMultiRemap.x;
				float temp_output_9_0_g170416 = ( clampResult17_g170401 - temp_output_7_0_g170416 );
				float temp_output_765_0_g170394 = saturate( ( ( temp_output_9_0_g170416 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170418 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170422 = _SecondMaskRemap.x;
				float temp_output_9_0_g170422 = ( clampResult17_g170418 - temp_output_7_0_g170422 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170422 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half Visual_Luminosity1041_g170394 = Out_Luminosity4_g170405;
				float clampResult17_g170427 = clamp( Visual_Luminosity1041_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170428 = _SecondLumaRemap.x;
				float temp_output_9_0_g170428 = ( clampResult17_g170427 - temp_output_7_0_g170428 );
				float lerpResult1036_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170428 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170394 = lerpResult1036_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170405;
				float clampResult17_g170423 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _SecondProjRemap.x;
				float temp_output_9_0_g170425 = ( clampResult17_g170423 - temp_output_7_0_g170425 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170425 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170414;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170419 = _second_vert_mode;
				float temp_output_30_0_g170419 = ( break965_g170394.x * break33_g170419.x );
				float temp_output_29_0_g170419 = ( break965_g170394.y * break33_g170419.y );
				float temp_output_31_0_g170419 = ( break965_g170394.z * break33_g170419.z );
				float temp_output_28_0_g170419 = ( temp_output_30_0_g170419 + temp_output_29_0_g170419 + temp_output_31_0_g170419 + ( break965_g170394.w * break33_g170419.w ) );
				float clampResult17_g170417 = clamp( temp_output_28_0_g170419 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170421 = _SecondMeshRemap.x;
				float temp_output_9_0_g170421 = ( clampResult17_g170417 - temp_output_7_0_g170421 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170421 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170420 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170420 = ( temp_output_6_0_g170420 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170420 = temp_output_6_0_g170420;
				#endif
				half Blend_VertMask918_g170394 = staticSwitch14_g170420;
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatParams204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintParams204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowParams204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoParams204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeParams204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormParams204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowParams204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatParams = In_CoatParams204_g170214;
				Data204_g170214.PaintParams = In_PaintParams204_g170214;
				Data204_g170214.GlowParams = In_GlowParams204_g170214;
				Data204_g170214.AtmoParams = In_AtmoParams204_g170214;
				Data204_g170214.FadeParams = In_FadeParams204_g170214;
				Data204_g170214.FormParams= In_FormParams204_g170214;
				Data204_g170214.FlowParams = In_FlowParams204_g170214;
				}
				TVEGlobalData Data15_g170404 = Data204_g170214;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170404 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatParams15_g170404 = Data15_g170404.CoatParams;
				Out_PaintParams15_g170404 = Data15_g170404.PaintParams;
				Out_GlowParams15_g170404 = Data15_g170404.GlowParams;
				Out_AtmoParams15_g170404= Data15_g170404.AtmoParams;
				Out_FadeParams15_g170404= Data15_g170404.FadeParams;
				Out_FormParams15_g170404 = Data15_g170404.FormParams;
				Out_FlowParams15_g170404 = Data15_g170404.FlowParams;
				}
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170404;
				float temp_output_6_0_g170429 = (Global_CoatParams975_g170394).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170429 = ( temp_output_6_0_g170429 + ( _SecondElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170429 = temp_output_6_0_g170429;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = staticSwitch14_g170429;
				#else
				float staticSwitch971_g170394 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170394 = lerp( 1.0 , staticSwitch971_g170394 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170394 = lerpResult1013_g170394;
				float clampResult17_g170424 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_LumaMask1033_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170426 = _SecondBlendRemap.x;
				float temp_output_9_0_g170426 = ( clampResult17_g170424 - temp_output_7_0_g170426 );
				half Blend_Mask412_g170394 = ( saturate( ( ( temp_output_9_0_g170426 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170415 = Final_Albedo601_g170394;
				float3 In_AlbedoRaw3_g170415 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170405;
				float2 lerpResult40_g170406 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				float localFilterTexture29_g170412 = ( 0.0 );
				SamplerState SS29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170412 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170412 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170412 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170412 = SamplerDefault29_g170412;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170412 = SamplerDefault29_g170412;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170412 = SamplerPoint29_g170412;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170412 = SamplerLow29_g170412;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170412 = SamplerMedium29_g170412;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170412 = SamplerHigh29_g170412;
				#endif
				}
				SamplerState Sampler276_g170396 = SS29_g170412;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = SS29_g170412;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = SS29_g170412;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = SS29_g170412;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = SS29_g170412;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = SS29_g170412;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170406 = ( lerpResult40_g170406 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170406 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170415 = Final_NormalTS612_g170394;
				float3 appendResult68_g170407 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170407 = appendResult68_g170407;
				float3 worldNormal74_g170407 = normalize( float3(dot(tanToWorld0,tanNormal74_g170407), dot(tanToWorld1,tanNormal74_g170407), dot(tanToWorld2,tanNormal74_g170407)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170407;
				float3 In_NormalWS3_g170415 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170405;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170415 = Final_Masks613_g170394;
				float4 In_Emissive3_g170415 = Out_Emissive4_g170405;
				float3 temp_output_3_0_g170409 = Final_Albedo601_g170394;
				float dotResult20_g170409 = dot( temp_output_3_0_g170409 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170409;
				float In_Grayscale3_g170415 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170415 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170405;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170415 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170405;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170415 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170405;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170415 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170415 = Out_Translucency4_g170405;
				float In_Transmission3_g170415 = Out_Transmission4_g170405;
				float In_Thickness3_g170415 = Out_Thickness4_g170405;
				float In_Diffusion3_g170415 = Out_Diffusion4_g170405;
				{
				Data3_g170415.Dummy = In_Dummy3_g170415;
				Data3_g170415.Albedo = In_Albedo3_g170415;
				Data3_g170415.AlbedoRaw = In_AlbedoRaw3_g170415;
				Data3_g170415.NormalTS = In_NormalTS3_g170415;
				Data3_g170415.NormalWS = In_NormalWS3_g170415;
				Data3_g170415.Shader = In_Shader3_g170415;
				Data3_g170415.Emissive= In_Emissive3_g170415;
				Data3_g170415.MultiMask = In_MultiMask3_g170415;
				Data3_g170415.Grayscale = In_Grayscale3_g170415;
				Data3_g170415.Luminosity = In_Luminosity3_g170415;
				Data3_g170415.AlphaClip = In_AlphaClip3_g170415;
				Data3_g170415.AlphaFade = In_AlphaFade3_g170415;
				Data3_g170415.Translucency = In_Translucency3_g170415;
				Data3_g170415.Transmission = In_Transmission3_g170415;
				Data3_g170415.Thickness = In_Thickness3_g170415;
				Data3_g170415.Diffusion = In_Diffusion3_g170415;
				}
				TVEVisualData Data4_g170446 = Data3_g170415;
				float Out_Dummy4_g170446 = 0;
				float3 Out_Albedo4_g170446 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170446 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170446 = float2( 0,0 );
				float3 Out_NormalWS4_g170446 = float3( 0,0,0 );
				float4 Out_Shader4_g170446 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170446 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170446 = 0;
				float Out_Grayscale4_g170446 = 0;
				float Out_Luminosity4_g170446 = 0;
				float Out_AlphaClip4_g170446 = 0;
				float Out_AlphaFade4_g170446 = 0;
				float3 Out_Translucency4_g170446 = float3( 0,0,0 );
				float Out_Transmission4_g170446 = 0;
				float Out_Thickness4_g170446 = 0;
				float Out_Diffusion4_g170446 = 0;
				{
				Out_Dummy4_g170446 = Data4_g170446.Dummy;
				Out_Albedo4_g170446 = Data4_g170446.Albedo;
				Out_AlbedoRaw4_g170446 = Data4_g170446.AlbedoRaw;
				Out_NormalTS4_g170446 = Data4_g170446.NormalTS;
				Out_NormalWS4_g170446 = Data4_g170446.NormalWS;
				Out_Shader4_g170446 = Data4_g170446.Shader;
				Out_Emissive4_g170446= Data4_g170446.Emissive;
				Out_MultiMask4_g170446 = Data4_g170446.MultiMask;
				Out_Grayscale4_g170446 = Data4_g170446.Grayscale;
				Out_Luminosity4_g170446= Data4_g170446.Luminosity;
				Out_AlphaClip4_g170446 = Data4_g170446.AlphaClip;
				Out_AlphaFade4_g170446 = Data4_g170446.AlphaFade;
				Out_Translucency4_g170446 = Data4_g170446.Translucency;
				Out_Transmission4_g170446 = Data4_g170446.Transmission;
				Out_Thickness4_g170446 = Data4_g170446.Thickness;
				Out_Diffusion4_g170446 = Data4_g170446.Diffusion;
				}
				half3 Visual_Albedo527_g170438 = Out_Albedo4_g170446;
				TEXTURE2D(Texture276_g170439) = _ThirdAlbedoTex;
				float localFilterTexture19_g170455 = ( 0.0 );
				SamplerState SS19_g170455 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170455 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170455 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170455 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170455 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170455 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170455 = SamplerDefault19_g170455;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170455 = SamplerDefault19_g170455;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170455 = SamplerPoint19_g170455;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170455 = SamplerLow19_g170455;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170455 = SamplerMedium19_g170455;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170455 = SamplerHigh19_g170455;
				#endif
				}
				SamplerState Sampler276_g170439 = SS19_g170455;
				half4 Local_LayerCoords790_g170438 = _third_coord_value;
				float4 temp_output_37_0_g170439 = Local_LayerCoords790_g170438;
				half4 Coords276_g170439 = temp_output_37_0_g170439;
				half2 TexCoord276_g170439 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170439 = SampleMain( Texture276_g170439 , Sampler276_g170439 , Coords276_g170439 , TexCoord276_g170439 );
				TEXTURE2D(Texture275_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170439 = SS19_g170455;
				half4 Coords275_g170439 = temp_output_37_0_g170439;
				half2 TexCoord275_g170439 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170439 = SampleExtra( Texture275_g170439 , Sampler275_g170439 , Coords275_g170439 , TexCoord275_g170439 );
				TEXTURE2D(Texture238_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170439 = SS19_g170455;
				half4 Coords238_g170439 = temp_output_37_0_g170439;
				TVEModelData Data15_g170458 = Data16_g170201;
				float Out_Dummy15_g170458 = 0;
				float3 Out_PositionWS15_g170458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170458 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170458 = float3( 0,0,0 );
				float4 Out_VertexData15_g170458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170458 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170458 = Data15_g170458.Dummy;
				Out_PositionWS15_g170458 = Data15_g170458.PositionWS;
				Out_PositionWO15_g170458 = Data15_g170458.PositionWO;
				Out_PivotWS15_g170458 = Data15_g170458.PivotWS;
				Out_PivotWO15_g170458 = Data15_g170458.PivotWO;
				Out_NormalWS15_g170458 = Data15_g170458.NormalWS;
				Out_ViewDirWS15_g170458 = Data15_g170458.ViewDirWS;
				Out_VertexData15_g170458 = Data15_g170458.VertexData;
				Out_BoundsData15_g170458 = Data15_g170458.BoundsData;
				}
				half3 Model_PositionWO636_g170438 = Out_PositionWO15_g170458;
				float3 temp_output_279_0_g170439 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170439 = temp_output_279_0_g170439;
				half4 localSamplePlanar2D238_g170439 = SamplePlanar2D( Texture238_g170439 , Sampler238_g170439 , Coords238_g170439 , WorldPosition238_g170439 );
				TEXTURE2D(Texture246_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170439 = SS19_g170455;
				half4 Coords246_g170439 = temp_output_37_0_g170439;
				half3 WorldPosition246_g170439 = temp_output_279_0_g170439;
				half3 Model_NormalWS869_g170438 = Out_NormalWS15_g170458;
				float3 temp_output_280_0_g170439 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170439 = temp_output_280_0_g170439;
				half4 localSamplePlanar3D246_g170439 = SamplePlanar3D( Texture246_g170439 , Sampler246_g170439 , Coords246_g170439 , WorldPosition246_g170439 , WorldNormal246_g170439 );
				TEXTURE2D(Texture234_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170439 = SS19_g170455;
				float4 Coords234_g170439 = temp_output_37_0_g170439;
				float3 WorldPosition234_g170439 = temp_output_279_0_g170439;
				float4 localSampleStochastic2D234_g170439 = SampleStochastic2D( Texture234_g170439 , Sampler234_g170439 , Coords234_g170439 , WorldPosition234_g170439 );
				TEXTURE2D(Texture263_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170439 = SS19_g170455;
				half4 Coords263_g170439 = temp_output_37_0_g170439;
				half3 WorldPosition263_g170439 = temp_output_279_0_g170439;
				half3 WorldNormal263_g170439 = temp_output_280_0_g170439;
				half4 localSampleStochastic3D263_g170439 = SampleStochastic3D( Texture263_g170439 , Sampler263_g170439 , Coords263_g170439 , WorldPosition263_g170439 , WorldNormal263_g170439 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170438 = localSampleMain276_g170439;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170438 = localSampleExtra275_g170439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170438 = localSamplePlanar2D238_g170439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170438 = localSamplePlanar3D246_g170439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170438 = localSampleStochastic2D234_g170439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170438 = localSampleStochastic3D263_g170439;
				#else
				float4 staticSwitch693_g170438 = localSampleMain276_g170439;
				#endif
				half4 Local_AlbedoTex777_g170438 = staticSwitch693_g170438;
				float3 lerpResult716_g170438 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170438).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170438 = lerpResult716_g170438;
				TEXTURE2D(Texture276_g170441) = _ThirdShaderTex;
				float localFilterTexture30_g170457 = ( 0.0 );
				SamplerState SS30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170457 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170457 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170457 = SamplerDefault30_g170457;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170457 = SamplerDefault30_g170457;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170457 = SamplerPoint30_g170457;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170457 = SamplerLow30_g170457;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170457 = SamplerMedium30_g170457;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170457 = SamplerHigh30_g170457;
				#endif
				}
				SamplerState Sampler276_g170441 = SS30_g170457;
				float4 temp_output_37_0_g170441 = Local_LayerCoords790_g170438;
				half4 Coords276_g170441 = temp_output_37_0_g170441;
				half2 TexCoord276_g170441 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170441 = SampleMain( Texture276_g170441 , Sampler276_g170441 , Coords276_g170441 , TexCoord276_g170441 );
				TEXTURE2D(Texture275_g170441) = _ThirdShaderTex;
				SamplerState Sampler275_g170441 = SS30_g170457;
				half4 Coords275_g170441 = temp_output_37_0_g170441;
				half2 TexCoord275_g170441 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170441 = SampleExtra( Texture275_g170441 , Sampler275_g170441 , Coords275_g170441 , TexCoord275_g170441 );
				TEXTURE2D(Texture238_g170441) = _ThirdShaderTex;
				SamplerState Sampler238_g170441 = SS30_g170457;
				half4 Coords238_g170441 = temp_output_37_0_g170441;
				float3 temp_output_279_0_g170441 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170441 = temp_output_279_0_g170441;
				half4 localSamplePlanar2D238_g170441 = SamplePlanar2D( Texture238_g170441 , Sampler238_g170441 , Coords238_g170441 , WorldPosition238_g170441 );
				TEXTURE2D(Texture246_g170441) = _ThirdShaderTex;
				SamplerState Sampler246_g170441 = SS30_g170457;
				half4 Coords246_g170441 = temp_output_37_0_g170441;
				half3 WorldPosition246_g170441 = temp_output_279_0_g170441;
				float3 temp_output_280_0_g170441 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170441 = temp_output_280_0_g170441;
				half4 localSamplePlanar3D246_g170441 = SamplePlanar3D( Texture246_g170441 , Sampler246_g170441 , Coords246_g170441 , WorldPosition246_g170441 , WorldNormal246_g170441 );
				TEXTURE2D(Texture234_g170441) = _ThirdShaderTex;
				SamplerState Sampler234_g170441 = SS30_g170457;
				float4 Coords234_g170441 = temp_output_37_0_g170441;
				float3 WorldPosition234_g170441 = temp_output_279_0_g170441;
				float4 localSampleStochastic2D234_g170441 = SampleStochastic2D( Texture234_g170441 , Sampler234_g170441 , Coords234_g170441 , WorldPosition234_g170441 );
				TEXTURE2D(Texture263_g170441) = _ThirdShaderTex;
				SamplerState Sampler263_g170441 = SS30_g170457;
				half4 Coords263_g170441 = temp_output_37_0_g170441;
				half3 WorldPosition263_g170441 = temp_output_279_0_g170441;
				half3 WorldNormal263_g170441 = temp_output_280_0_g170441;
				half4 localSampleStochastic3D263_g170441 = SampleStochastic3D( Texture263_g170441 , Sampler263_g170441 , Coords263_g170441 , WorldPosition263_g170441 , WorldNormal263_g170441 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170438 = localSampleMain276_g170441;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170438 = localSampleExtra275_g170441;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170438 = localSamplePlanar2D238_g170441;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170438 = localSamplePlanar3D246_g170441;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170438 = localSampleStochastic2D234_g170441;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170438 = localSampleStochastic3D263_g170441;
				#else
				float4 staticSwitch722_g170438 = localSampleMain276_g170441;
				#endif
				half4 Local_ShaderTex775_g170438 = staticSwitch722_g170438;
				float lerpResult739_g170438 = lerp( 1.0 , (Local_ShaderTex775_g170438).y , _ThirdOcclusionValue);
				float4 appendResult749_g170438 = (float4(( (Local_ShaderTex775_g170438).x * _ThirdMetallicValue ) , lerpResult739_g170438 , (Local_ShaderTex775_g170438).z , ( (Local_ShaderTex775_g170438).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170438 = appendResult749_g170438;
				float clampResult17_g170444 = clamp( (Local_Masks750_g170438).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170459 = ( clampResult17_g170444 - temp_output_7_0_g170459 );
				float temp_output_765_0_g170438 = saturate( ( ( temp_output_9_0_g170459 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170438 = temp_output_765_0_g170438;
				float lerpResult705_g170438 = lerp( 1.0 , Local_MultiMask767_g170438 , _ThirdColorMode);
				float4 lerpResult706_g170438 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170438);
				half3 Local_ColorRGB774_g170438 = (lerpResult706_g170438).rgb;
				half3 Local_Albedo768_g170438 = ( Local_AlbedoRGB771_g170438 * Local_ColorRGB774_g170438 );
				float3 lerpResult985_g170438 = lerp( Local_Albedo768_g170438 , ( Visual_Albedo527_g170438 * Local_Albedo768_g170438 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170453) = _ThirdMaskTex;
				SamplerState Sampler276_g170453 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170438 = _third_mask_coord_value;
				float4 temp_output_37_0_g170453 = Local_MaskCoords813_g170438;
				half4 Coords276_g170453 = temp_output_37_0_g170453;
				half2 TexCoord276_g170453 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170453 = SampleMain( Texture276_g170453 , Sampler276_g170453 , Coords276_g170453 , TexCoord276_g170453 );
				TEXTURE2D(Texture275_g170453) = _ThirdMaskTex;
				SamplerState Sampler275_g170453 = sampler_Linear_Repeat;
				half4 Coords275_g170453 = temp_output_37_0_g170453;
				half2 TexCoord275_g170453 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170453 = SampleExtra( Texture275_g170453 , Sampler275_g170453 , Coords275_g170453 , TexCoord275_g170453 );
				TEXTURE2D(Texture238_g170453) = _ThirdMaskTex;
				SamplerState Sampler238_g170453 = sampler_Linear_Repeat;
				half4 Coords238_g170453 = temp_output_37_0_g170453;
				float3 temp_output_279_0_g170453 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170453 = temp_output_279_0_g170453;
				half4 localSamplePlanar2D238_g170453 = SamplePlanar2D( Texture238_g170453 , Sampler238_g170453 , Coords238_g170453 , WorldPosition238_g170453 );
				TEXTURE2D(Texture246_g170453) = _ThirdMaskTex;
				SamplerState Sampler246_g170453 = sampler_Linear_Repeat;
				half4 Coords246_g170453 = temp_output_37_0_g170453;
				half3 WorldPosition246_g170453 = temp_output_279_0_g170453;
				float3 temp_output_280_0_g170453 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170453 = temp_output_280_0_g170453;
				half4 localSamplePlanar3D246_g170453 = SamplePlanar3D( Texture246_g170453 , Sampler246_g170453 , Coords246_g170453 , WorldPosition246_g170453 , WorldNormal246_g170453 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170438 = localSampleMain276_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170438 = localSampleExtra275_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170438 = localSamplePlanar2D238_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170438 = localSamplePlanar3D246_g170453;
				#else
				float4 staticSwitch817_g170438 = localSampleMain276_g170453;
				#endif
				half4 Local_MaskTex861_g170438 = staticSwitch817_g170438;
				float clampResult17_g170461 = clamp( (Local_MaskTex861_g170438).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170465 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170465 = ( clampResult17_g170461 - temp_output_7_0_g170465 );
				float lerpResult1028_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170465 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170438 = lerpResult1028_g170438;
				half Visual_Luminosity1049_g170438 = Out_Luminosity4_g170446;
				float clampResult17_g170470 = clamp( Visual_Luminosity1049_g170438 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170471 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170471 = ( clampResult17_g170470 - temp_output_7_0_g170471 );
				float lerpResult1040_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170471 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170438 = lerpResult1040_g170438;
				half4 Model_VertexMasks960_g170438 = Out_VertexData15_g170458;
				float4 break961_g170438 = Model_VertexMasks960_g170438;
				float4 break33_g170462 = _third_vert_mode;
				float temp_output_30_0_g170462 = ( break961_g170438.x * break33_g170462.x );
				float temp_output_29_0_g170462 = ( break961_g170438.y * break33_g170462.y );
				float temp_output_31_0_g170462 = ( break961_g170438.z * break33_g170462.z );
				float temp_output_28_0_g170462 = ( temp_output_30_0_g170462 + temp_output_29_0_g170462 + temp_output_31_0_g170462 + ( break961_g170438.w * break33_g170462.w ) );
				float clampResult17_g170460 = clamp( temp_output_28_0_g170462 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170464 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170464 = ( clampResult17_g170460 - temp_output_7_0_g170464 );
				float lerpResult1026_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170464 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170463 = lerpResult1026_g170438;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170463 = ( temp_output_6_0_g170463 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170463 = temp_output_6_0_g170463;
				#endif
				half Blend_VertMask913_g170438 = staticSwitch14_g170463;
				half3 Visual_NormalWS953_g170438 = Out_NormalWS4_g170446;
				float clampResult17_g170466 = clamp( saturate( (Visual_NormalWS953_g170438).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170468 = _ThirdProjRemap.x;
				float temp_output_9_0_g170468 = ( clampResult17_g170466 - temp_output_7_0_g170468 );
				float lerpResult1004_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170468 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170438 = lerpResult1004_g170438;
				TVEGlobalData Data15_g170448 = Data204_g170214;
				float Out_Dummy15_g170448 = 0;
				float4 Out_CoatParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170448 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170448 = Data15_g170448.Dummy;
				Out_CoatParams15_g170448 = Data15_g170448.CoatParams;
				Out_PaintParams15_g170448 = Data15_g170448.PaintParams;
				Out_GlowParams15_g170448 = Data15_g170448.GlowParams;
				Out_AtmoParams15_g170448= Data15_g170448.AtmoParams;
				Out_FadeParams15_g170448= Data15_g170448.FadeParams;
				Out_FormParams15_g170448 = Data15_g170448.FormParams;
				Out_FlowParams15_g170448 = Data15_g170448.FlowParams;
				}
				half4 Global_CoatParams972_g170438 = Out_CoatParams15_g170448;
				float temp_output_6_0_g170472 = (Global_CoatParams972_g170438).y;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170472 = ( temp_output_6_0_g170472 + ( _ThirdElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170472 = temp_output_6_0_g170472;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170438 = staticSwitch14_g170472;
				#else
				float staticSwitch1056_g170438 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170438 = lerp( 1.0 , staticSwitch1056_g170438 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170438 = lerpResult1060_g170438;
				float clampResult17_g170467 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170438 * Blend_LumaMask1046_g170438 * Blend_VertMask913_g170438 * Blend_ProjMask912_g170438 * Blend_GlobalMask968_g170438 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170469 = ( clampResult17_g170467 - temp_output_7_0_g170469 );
				half Detail_Mask412_g170438 = ( saturate( ( ( temp_output_9_0_g170469 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170438 = lerp( Visual_Albedo527_g170438 , lerpResult985_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170438 = lerpResult989_g170438;
				#else
				float3 staticSwitch415_g170438 = Visual_Albedo527_g170438;
				#endif
				half3 Final_Albedo601_g170438 = staticSwitch415_g170438;
				float3 In_Albedo3_g170447 = Final_Albedo601_g170438;
				float3 In_AlbedoRaw3_g170447 = Final_Albedo601_g170438;
				half2 Visual_NormalTS529_g170438 = Out_NormalTS4_g170446;
				float2 lerpResult40_g170449 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170438 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170440) = _ThirdNormalTex;
				float localFilterTexture29_g170456 = ( 0.0 );
				SamplerState SS29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170456 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170456 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170456 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170456 = SamplerDefault29_g170456;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170456 = SamplerDefault29_g170456;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170456 = SamplerPoint29_g170456;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170456 = SamplerLow29_g170456;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170456 = SamplerMedium29_g170456;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170456 = SamplerHigh29_g170456;
				#endif
				}
				SamplerState Sampler276_g170440 = SS29_g170456;
				float4 temp_output_37_0_g170440 = Local_LayerCoords790_g170438;
				half4 Coords276_g170440 = temp_output_37_0_g170440;
				half2 TexCoord276_g170440 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170440 = SampleMain( Texture276_g170440 , Sampler276_g170440 , Coords276_g170440 , TexCoord276_g170440 );
				TEXTURE2D(Texture275_g170440) = _ThirdNormalTex;
				SamplerState Sampler275_g170440 = SS29_g170456;
				half4 Coords275_g170440 = temp_output_37_0_g170440;
				half2 TexCoord275_g170440 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170440 = SampleExtra( Texture275_g170440 , Sampler275_g170440 , Coords275_g170440 , TexCoord275_g170440 );
				TEXTURE2D(Texture238_g170440) = _ThirdNormalTex;
				SamplerState Sampler238_g170440 = SS29_g170456;
				half4 Coords238_g170440 = temp_output_37_0_g170440;
				float3 temp_output_279_0_g170440 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170440 = temp_output_279_0_g170440;
				half4 localSamplePlanar2D238_g170440 = SamplePlanar2D( Texture238_g170440 , Sampler238_g170440 , Coords238_g170440 , WorldPosition238_g170440 );
				TEXTURE2D(Texture246_g170440) = _ThirdNormalTex;
				SamplerState Sampler246_g170440 = SS29_g170456;
				half4 Coords246_g170440 = temp_output_37_0_g170440;
				half3 WorldPosition246_g170440 = temp_output_279_0_g170440;
				float3 temp_output_280_0_g170440 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170440 = temp_output_280_0_g170440;
				half4 localSamplePlanar3D246_g170440 = SamplePlanar3D( Texture246_g170440 , Sampler246_g170440 , Coords246_g170440 , WorldPosition246_g170440 , WorldNormal246_g170440 );
				TEXTURE2D(Texture234_g170440) = _ThirdNormalTex;
				SamplerState Sampler234_g170440 = SS29_g170456;
				float4 Coords234_g170440 = temp_output_37_0_g170440;
				float3 WorldPosition234_g170440 = temp_output_279_0_g170440;
				float4 localSampleStochastic2D234_g170440 = SampleStochastic2D( Texture234_g170440 , Sampler234_g170440 , Coords234_g170440 , WorldPosition234_g170440 );
				TEXTURE2D(Texture263_g170440) = _ThirdNormalTex;
				SamplerState Sampler263_g170440 = SS29_g170456;
				half4 Coords263_g170440 = temp_output_37_0_g170440;
				half3 WorldPosition263_g170440 = temp_output_279_0_g170440;
				half3 WorldNormal263_g170440 = temp_output_280_0_g170440;
				half4 localSampleStochastic3D263_g170440 = SampleStochastic3D( Texture263_g170440 , Sampler263_g170440 , Coords263_g170440 , WorldPosition263_g170440 , WorldNormal263_g170440 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170438 = localSampleMain276_g170440;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170438 = localSampleExtra275_g170440;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170438 = localSamplePlanar2D238_g170440;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170438 = localSamplePlanar3D246_g170440;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170438 = localSampleStochastic2D234_g170440;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170438 = localSampleStochastic3D263_g170440;
				#else
				float4 staticSwitch698_g170438 = localSampleMain276_g170440;
				#endif
				half4 Local_NormalTex776_g170438 = staticSwitch698_g170438;
				half4 Normal_Packed45_g170442 = Local_NormalTex776_g170438;
				float2 appendResult58_g170442 = (float2(( (Normal_Packed45_g170442).x * (Normal_Packed45_g170442).w ) , (Normal_Packed45_g170442).y));
				half2 Normal_Default50_g170442 = appendResult58_g170442;
				half2 Normal_ASTC41_g170442 = (Normal_Packed45_g170442).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170442 = Normal_ASTC41_g170442;
				#else
				float2 staticSwitch38_g170442 = Normal_Default50_g170442;
				#endif
				half2 Normal_NO_DTX544_g170442 = (Normal_Packed45_g170442).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170442 = Normal_NO_DTX544_g170442;
				#else
				float2 staticSwitch37_g170442 = staticSwitch38_g170442;
				#endif
				float2 temp_output_724_0_g170438 = ( (staticSwitch37_g170442*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170443 = temp_output_724_0_g170438;
				float2 break71_g170443 = Normal_Planar45_g170443;
				float3 appendResult72_g170443 = (float3(break71_g170443.x , 0.0 , break71_g170443.y));
				float2 temp_output_858_0_g170438 = (mul( ase_worldToTangent, appendResult72_g170443 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#else
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#endif
				half2 Local_NormalTS729_g170438 = staticSwitch727_g170438;
				float2 temp_output_36_0_g170449 = ( lerpResult40_g170449 + Local_NormalTS729_g170438 );
				float2 lerpResult405_g170438 = lerp( Visual_NormalTS529_g170438 , temp_output_36_0_g170449 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170438 = lerpResult405_g170438;
				#else
				float2 staticSwitch418_g170438 = Visual_NormalTS529_g170438;
				#endif
				half2 Final_NormalTS612_g170438 = staticSwitch418_g170438;
				float2 In_NormalTS3_g170447 = Final_NormalTS612_g170438;
				float3 appendResult68_g170450 = (float3(Final_NormalTS612_g170438 , 1.0));
				float3 tanNormal74_g170450 = appendResult68_g170450;
				float3 worldNormal74_g170450 = normalize( float3(dot(tanToWorld0,tanNormal74_g170450), dot(tanToWorld1,tanNormal74_g170450), dot(tanToWorld2,tanNormal74_g170450)) );
				half3 Final_NormalWS956_g170438 = worldNormal74_g170450;
				float3 In_NormalWS3_g170447 = Final_NormalWS956_g170438;
				half4 Visual_Shader531_g170438 = Out_Shader4_g170446;
				float4 lerpResult1000_g170438 = lerp( Local_Masks750_g170438 , ( Visual_Shader531_g170438 * Local_Masks750_g170438 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170438 = lerp( Visual_Shader531_g170438 , lerpResult1000_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170438 = lerpResult998_g170438;
				#else
				float4 staticSwitch451_g170438 = Visual_Shader531_g170438;
				#endif
				half4 Final_Masks613_g170438 = staticSwitch451_g170438;
				float4 In_Shader3_g170447 = Final_Masks613_g170438;
				float4 In_Emissive3_g170447 = Out_Emissive4_g170446;
				float3 temp_output_3_0_g170452 = Final_Albedo601_g170438;
				float dotResult20_g170452 = dot( temp_output_3_0_g170452 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170438 = dotResult20_g170452;
				float In_Grayscale3_g170447 = Final_Grayscale615_g170438;
				float clampResult651_g170438 = clamp( saturate( ( Final_Grayscale615_g170438 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170438 = clampResult651_g170438;
				float In_Luminosity3_g170447 = Final_Luminosity652_g170438;
				half Visual_MultiMask547_g170438 = Out_MultiMask4_g170446;
				float lerpResult477_g170438 = lerp( Visual_MultiMask547_g170438 , Local_MultiMask767_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch482_g170438 = lerpResult477_g170438;
				#else
				float staticSwitch482_g170438 = Visual_MultiMask547_g170438;
				#endif
				half Final_MultiMask572_g170438 = staticSwitch482_g170438;
				float In_MultiMask3_g170447 = Final_MultiMask572_g170438;
				half Visual_AlphaClip559_g170438 = Out_AlphaClip4_g170446;
				float temp_output_718_0_g170438 = (Local_AlbedoTex777_g170438).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170438 = ( temp_output_718_0_g170438 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170438 = temp_output_718_0_g170438;
				#endif
				half Local_AlphaClip772_g170438 = staticSwitch924_g170438;
				float lerpResult448_g170438 = lerp( Visual_AlphaClip559_g170438 , Local_AlphaClip772_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch564_g170438 = lerpResult448_g170438;
				#else
				float staticSwitch564_g170438 = Visual_AlphaClip559_g170438;
				#endif
				half Final_AlphaClip602_g170438 = staticSwitch564_g170438;
				float In_AlphaClip3_g170447 = Final_AlphaClip602_g170438;
				half Visual_AlphaFade588_g170438 = Out_AlphaFade4_g170446;
				half Local_AlphaFade773_g170438 = (lerpResult706_g170438).a;
				float lerpResult604_g170438 = lerp( Visual_AlphaFade588_g170438 , Local_AlphaFade773_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch608_g170438 = lerpResult604_g170438;
				#else
				float staticSwitch608_g170438 = Visual_AlphaFade588_g170438;
				#endif
				half Final_AlphaFade611_g170438 = staticSwitch608_g170438;
				float In_AlphaFade3_g170447 = Final_AlphaFade611_g170438;
				float3 In_Translucency3_g170447 = Out_Translucency4_g170446;
				float In_Transmission3_g170447 = Out_Transmission4_g170446;
				float In_Thickness3_g170447 = Out_Thickness4_g170446;
				float In_Diffusion3_g170447 = Out_Diffusion4_g170446;
				{
				Data3_g170447.Dummy = In_Dummy3_g170447;
				Data3_g170447.Albedo = In_Albedo3_g170447;
				Data3_g170447.AlbedoRaw = In_AlbedoRaw3_g170447;
				Data3_g170447.NormalTS = In_NormalTS3_g170447;
				Data3_g170447.NormalWS = In_NormalWS3_g170447;
				Data3_g170447.Shader = In_Shader3_g170447;
				Data3_g170447.Emissive= In_Emissive3_g170447;
				Data3_g170447.MultiMask = In_MultiMask3_g170447;
				Data3_g170447.Grayscale = In_Grayscale3_g170447;
				Data3_g170447.Luminosity = In_Luminosity3_g170447;
				Data3_g170447.AlphaClip = In_AlphaClip3_g170447;
				Data3_g170447.AlphaFade = In_AlphaFade3_g170447;
				Data3_g170447.Translucency = In_Translucency3_g170447;
				Data3_g170447.Transmission = In_Transmission3_g170447;
				Data3_g170447.Thickness = In_Thickness3_g170447;
				Data3_g170447.Diffusion = In_Diffusion3_g170447;
				}
				TVEVisualData Data4_g170545 = Data3_g170447;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				{
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				}
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170552 = Data16_g170201;
				float Out_Dummy15_g170552 = 0;
				float3 Out_PositionWS15_g170552 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170552 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170552 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170552 = float3( 0,0,0 );
				float4 Out_VertexData15_g170552 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170552 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170552 = Data15_g170552.Dummy;
				Out_PositionWS15_g170552 = Data15_g170552.PositionWS;
				Out_PositionWO15_g170552 = Data15_g170552.PositionWO;
				Out_PivotWS15_g170552 = Data15_g170552.PivotWS;
				Out_PivotWO15_g170552 = Data15_g170552.PivotWO;
				Out_NormalWS15_g170552 = Data15_g170552.NormalWS;
				Out_ViewDirWS15_g170552 = Data15_g170552.ViewDirWS;
				Out_VertexData15_g170552 = Data15_g170552.VertexData;
				Out_BoundsData15_g170552 = Data15_g170552.BoundsData;
				}
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170552;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170550 = _occlusion_vert_mode;
				float temp_output_30_0_g170550 = ( break208_g170544.x * break33_g170550.x );
				float temp_output_29_0_g170550 = ( break208_g170544.y * break33_g170550.y );
				float temp_output_31_0_g170550 = ( break208_g170544.z * break33_g170550.z );
				float temp_output_28_0_g170550 = ( temp_output_30_0_g170550 + temp_output_29_0_g170550 + temp_output_31_0_g170550 + ( break208_g170544.w * break33_g170550.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170550;
				float clampResult17_g170548 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170553 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170553 = ( clampResult17_g170548 - temp_output_7_0_g170553 );
				float temp_output_6_0_g170549 = saturate( ( ( temp_output_9_0_g170553 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170549 = ( temp_output_6_0_g170549 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170549 = temp_output_6_0_g170549;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170549;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				{
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				}
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				{
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				}
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170562 = Data16_g170201;
				float Out_Dummy15_g170562 = 0;
				float3 Out_PositionWS15_g170562 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170562 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170562 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170562 = float3( 0,0,0 );
				float4 Out_VertexData15_g170562 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170562 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170562 = Data15_g170562.Dummy;
				Out_PositionWS15_g170562 = Data15_g170562.PositionWS;
				Out_PositionWO15_g170562 = Data15_g170562.PositionWO;
				Out_PivotWS15_g170562 = Data15_g170562.PivotWS;
				Out_PivotWO15_g170562 = Data15_g170562.PivotWO;
				Out_NormalWS15_g170562 = Data15_g170562.NormalWS;
				Out_ViewDirWS15_g170562 = Data15_g170562.ViewDirWS;
				Out_VertexData15_g170562 = Data15_g170562.VertexData;
				Out_BoundsData15_g170562 = Data15_g170562.BoundsData;
				}
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170562;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170563 = _GradientMeshRemap.x;
				float temp_output_9_0_g170563 = ( clampResult17_g170560 - temp_output_7_0_g170563 );
				float temp_output_6_0_g170561 = saturate( ( ( temp_output_9_0_g170563 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170561 = ( temp_output_6_0_g170561 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170561 = temp_output_6_0_g170561;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170561;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				{
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				}
				TVEVisualData Data4_g170566 = Data3_g170557;
				float Out_Dummy4_g170566 = 0;
				float3 Out_Albedo4_g170566 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170566 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170566 = float2( 0,0 );
				float3 Out_NormalWS4_g170566 = float3( 0,0,0 );
				float4 Out_Shader4_g170566 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170566 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170566 = 0;
				float Out_Grayscale4_g170566 = 0;
				float Out_Luminosity4_g170566 = 0;
				float Out_AlphaClip4_g170566 = 0;
				float Out_AlphaFade4_g170566 = 0;
				float3 Out_Translucency4_g170566 = float3( 0,0,0 );
				float Out_Transmission4_g170566 = 0;
				float Out_Thickness4_g170566 = 0;
				float Out_Diffusion4_g170566 = 0;
				{
				Out_Dummy4_g170566 = Data4_g170566.Dummy;
				Out_Albedo4_g170566 = Data4_g170566.Albedo;
				Out_AlbedoRaw4_g170566 = Data4_g170566.AlbedoRaw;
				Out_NormalTS4_g170566 = Data4_g170566.NormalTS;
				Out_NormalWS4_g170566 = Data4_g170566.NormalWS;
				Out_Shader4_g170566 = Data4_g170566.Shader;
				Out_Emissive4_g170566= Data4_g170566.Emissive;
				Out_MultiMask4_g170566 = Data4_g170566.MultiMask;
				Out_Grayscale4_g170566 = Data4_g170566.Grayscale;
				Out_Luminosity4_g170566= Data4_g170566.Luminosity;
				Out_AlphaClip4_g170566 = Data4_g170566.AlphaClip;
				Out_AlphaFade4_g170566 = Data4_g170566.AlphaFade;
				Out_Translucency4_g170566 = Data4_g170566.Translucency;
				Out_Transmission4_g170566 = Data4_g170566.Transmission;
				Out_Thickness4_g170566 = Data4_g170566.Thickness;
				Out_Diffusion4_g170566 = Data4_g170566.Diffusion;
				}
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170566;
				TVEModelData Data15_g170571 = Data16_g170201;
				float Out_Dummy15_g170571 = 0;
				float3 Out_PositionWS15_g170571 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170571 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170571 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170571 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170571 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170571 = float3( 0,0,0 );
				float4 Out_VertexData15_g170571 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170571 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170571 = Data15_g170571.Dummy;
				Out_PositionWS15_g170571 = Data15_g170571.PositionWS;
				Out_PositionWO15_g170571 = Data15_g170571.PositionWO;
				Out_PivotWS15_g170571 = Data15_g170571.PivotWS;
				Out_PivotWO15_g170571 = Data15_g170571.PivotWO;
				Out_NormalWS15_g170571 = Data15_g170571.NormalWS;
				Out_ViewDirWS15_g170571 = Data15_g170571.ViewDirWS;
				Out_VertexData15_g170571 = Data15_g170571.VertexData;
				Out_BoundsData15_g170571 = Data15_g170571.BoundsData;
				}
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170571;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170571;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170568 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170570 = clamp( tex3DNode60_g170568.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170572 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170572 = ( clampResult17_g170570 - temp_output_7_0_g170572 );
				float temp_output_238_0_g170564 = saturate( ( ( temp_output_9_0_g170572 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170566;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170567 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170567 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170567 = Out_NormalTS4_g170566;
				float3 In_NormalWS3_g170567 = Out_NormalWS4_g170566;
				float4 In_Shader3_g170567 = Out_Shader4_g170566;
				float4 In_Emissive3_g170567 = Out_Emissive4_g170566;
				float3 temp_output_3_0_g170565 = Final_Albedo160_g170564;
				float dotResult20_g170565 = dot( temp_output_3_0_g170565 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170564 = dotResult20_g170565;
				float In_Grayscale3_g170567 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170567 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170567 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170567 = Out_AlphaClip4_g170566;
				float In_AlphaFade3_g170567 = Out_AlphaFade4_g170566;
				float3 In_Translucency3_g170567 = Out_Translucency4_g170566;
				float In_Transmission3_g170567 = Out_Transmission4_g170566;
				float In_Thickness3_g170567 = Out_Thickness4_g170566;
				float In_Diffusion3_g170567 = Out_Diffusion4_g170566;
				{
				Data3_g170567.Dummy = In_Dummy3_g170567;
				Data3_g170567.Albedo = In_Albedo3_g170567;
				Data3_g170567.AlbedoRaw = In_AlbedoRaw3_g170567;
				Data3_g170567.NormalTS = In_NormalTS3_g170567;
				Data3_g170567.NormalWS = In_NormalWS3_g170567;
				Data3_g170567.Shader = In_Shader3_g170567;
				Data3_g170567.Emissive= In_Emissive3_g170567;
				Data3_g170567.MultiMask = In_MultiMask3_g170567;
				Data3_g170567.Grayscale = In_Grayscale3_g170567;
				Data3_g170567.Luminosity = In_Luminosity3_g170567;
				Data3_g170567.AlphaClip = In_AlphaClip3_g170567;
				Data3_g170567.AlphaFade = In_AlphaFade3_g170567;
				Data3_g170567.Translucency = In_Translucency3_g170567;
				Data3_g170567.Transmission = In_Transmission3_g170567;
				Data3_g170567.Thickness = In_Thickness3_g170567;
				Data3_g170567.Diffusion = In_Diffusion3_g170567;
				}
				TVEVisualData Data4_g170579 = Data3_g170567;
				float Out_Dummy4_g170579 = 0;
				float3 Out_Albedo4_g170579 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170579 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170579 = float2( 0,0 );
				float3 Out_NormalWS4_g170579 = float3( 0,0,0 );
				float4 Out_Shader4_g170579 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170579 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170579 = 0;
				float Out_Grayscale4_g170579 = 0;
				float Out_Luminosity4_g170579 = 0;
				float Out_AlphaClip4_g170579 = 0;
				float Out_AlphaFade4_g170579 = 0;
				float3 Out_Translucency4_g170579 = float3( 0,0,0 );
				float Out_Transmission4_g170579 = 0;
				float Out_Thickness4_g170579 = 0;
				float Out_Diffusion4_g170579 = 0;
				{
				Out_Dummy4_g170579 = Data4_g170579.Dummy;
				Out_Albedo4_g170579 = Data4_g170579.Albedo;
				Out_AlbedoRaw4_g170579 = Data4_g170579.AlbedoRaw;
				Out_NormalTS4_g170579 = Data4_g170579.NormalTS;
				Out_NormalWS4_g170579 = Data4_g170579.NormalWS;
				Out_Shader4_g170579 = Data4_g170579.Shader;
				Out_Emissive4_g170579= Data4_g170579.Emissive;
				Out_MultiMask4_g170579 = Data4_g170579.MultiMask;
				Out_Grayscale4_g170579 = Data4_g170579.Grayscale;
				Out_Luminosity4_g170579= Data4_g170579.Luminosity;
				Out_AlphaClip4_g170579 = Data4_g170579.AlphaClip;
				Out_AlphaFade4_g170579 = Data4_g170579.AlphaFade;
				Out_Translucency4_g170579 = Data4_g170579.Translucency;
				Out_Transmission4_g170579 = Data4_g170579.Transmission;
				Out_Thickness4_g170579 = Data4_g170579.Thickness;
				Out_Diffusion4_g170579 = Data4_g170579.Diffusion;
				}
				half3 Visual_Albedo139_g170574 = Out_Albedo4_g170579;
				float temp_output_200_12_g170574 = Out_Grayscale4_g170579;
				half Visual_Grayscale150_g170574 = temp_output_200_12_g170574;
				float3 temp_cast_33 = (Visual_Grayscale150_g170574).xxx;
				TVEGlobalData Data15_g170575 = Data204_g170214;
				float Out_Dummy15_g170575 = 0;
				float4 Out_CoatParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170575 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170575 = Data15_g170575.Dummy;
				Out_CoatParams15_g170575 = Data15_g170575.CoatParams;
				Out_PaintParams15_g170575 = Data15_g170575.PaintParams;
				Out_GlowParams15_g170575 = Data15_g170575.GlowParams;
				Out_AtmoParams15_g170575= Data15_g170575.AtmoParams;
				Out_FadeParams15_g170575= Data15_g170575.FadeParams;
				Out_FormParams15_g170575 = Data15_g170575.FormParams;
				Out_FlowParams15_g170575 = Data15_g170575.FlowParams;
				}
				half4 Global_PaintParams209_g170574 = Out_PaintParams15_g170575;
				float4 temp_output_6_0_g170596 = Global_PaintParams209_g170574;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170596 = ( temp_output_6_0_g170596 + ( _TintingElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170596 = temp_output_6_0_g170596;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170574 = staticSwitch14_g170596;
				#else
				float4 staticSwitch283_g170574 = TVE_PaintParams;
				#endif
				float lerpResult412_g170574 = lerp( 1.0 , ( saturate( (staticSwitch283_g170574).w ) * TVE_IsEnabled ) , _TintingGlobalValue);
				half Tinting_GlobalValue285_g170574 = lerpResult412_g170574;
				float3 lerpResult368_g170574 = lerp( Visual_Albedo139_g170574 , temp_cast_33 , ( Tinting_GlobalValue285_g170574 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g170574 = (staticSwitch283_g170574).xyz;
				float temp_output_200_11_g170574 = Out_MultiMask4_g170579;
				half Visual_MultiMask181_g170574 = temp_output_200_11_g170574;
				float lerpResult147_g170574 = lerp( 1.0 , Visual_MultiMask181_g170574 , _TintingMultiValue);
				half Tinting_MutiMask121_g170574 = lerpResult147_g170574;
				half Tinting_TexMask385_g170574 = 1.0;
				float temp_output_200_15_g170574 = Out_Luminosity4_g170579;
				half Visual_Luminosity257_g170574 = temp_output_200_15_g170574;
				float clampResult17_g170586 = clamp( Visual_Luminosity257_g170574 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170591 = _TintingLumaRemap.x;
				float temp_output_9_0_g170591 = ( clampResult17_g170586 - temp_output_7_0_g170591 );
				float lerpResult228_g170574 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170591 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170574 = lerpResult228_g170574;
				TVEModelData Data15_g170580 = Data16_g170201;
				float Out_Dummy15_g170580 = 0;
				float3 Out_PositionWS15_g170580 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170580 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170580 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170580 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170580 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170580 = float3( 0,0,0 );
				float4 Out_VertexData15_g170580 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170580 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170580 = Data15_g170580.Dummy;
				Out_PositionWS15_g170580 = Data15_g170580.PositionWS;
				Out_PositionWO15_g170580 = Data15_g170580.PositionWO;
				Out_PivotWS15_g170580 = Data15_g170580.PivotWS;
				Out_PivotWO15_g170580 = Data15_g170580.PivotWO;
				Out_NormalWS15_g170580 = Data15_g170580.NormalWS;
				Out_ViewDirWS15_g170580 = Data15_g170580.ViewDirWS;
				Out_VertexData15_g170580 = Data15_g170580.VertexData;
				Out_BoundsData15_g170580 = Data15_g170580.BoundsData;
				}
				half4 Model_VertexMasks307_g170574 = Out_VertexData15_g170580;
				float4 break311_g170574 = Model_VertexMasks307_g170574;
				float4 break33_g170583 = _tinting_vert_mode;
				float temp_output_30_0_g170583 = ( break311_g170574.x * break33_g170583.x );
				float temp_output_29_0_g170583 = ( break311_g170574.y * break33_g170583.y );
				float temp_output_31_0_g170583 = ( break311_g170574.z * break33_g170583.z );
				float temp_output_28_0_g170583 = ( temp_output_30_0_g170583 + temp_output_29_0_g170583 + temp_output_31_0_g170583 + ( break311_g170574.w * break33_g170583.w ) );
				float clampResult17_g170585 = clamp( temp_output_28_0_g170583 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170592 = _TintingMeshRemap.x;
				float temp_output_9_0_g170592 = ( clampResult17_g170585 - temp_output_7_0_g170592 );
				float lerpResult370_g170574 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170592 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170587 = lerpResult370_g170574;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170587 = ( temp_output_6_0_g170587 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170587 = temp_output_6_0_g170587;
				#endif
				half Tinting_VertMask309_g170574 = staticSwitch14_g170587;
				half Tinting_NoiseMask213_g170574 = 1.0;
				half Custom_Mask345_g170574 = 1.0;
				float temp_output_7_0_g170595 = _TintingBlendRemap.x;
				float temp_output_9_0_g170595 = ( ( _TintingIntensityValue * Tinting_MutiMask121_g170574 * Tinting_TexMask385_g170574 * Tinting_LumaMask153_g170574 * Tinting_VertMask309_g170574 * Tinting_NoiseMask213_g170574 * Tinting_GlobalValue285_g170574 * Custom_Mask345_g170574 ) - temp_output_7_0_g170595 );
				half Tinting_Mask242_g170574 = ( saturate( ( ( temp_output_9_0_g170595 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170574 = lerp( Visual_Albedo139_g170574 , ( lerpResult368_g170574 * 4.594794 * Tinting_GlobalColor290_g170574 * (_TintingColor).rgb ) , Tinting_Mask242_g170574);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170574 = lerpResult90_g170574;
				#else
				float3 staticSwitch286_g170574 = Visual_Albedo139_g170574;
				#endif
				half3 Final_Albedo97_g170574 = staticSwitch286_g170574;
				float3 In_Albedo3_g170578 = Final_Albedo97_g170574;
				float3 In_AlbedoRaw3_g170578 = Out_AlbedoRaw4_g170579;
				float2 In_NormalTS3_g170578 = Out_NormalTS4_g170579;
				float3 In_NormalWS3_g170578 = Out_NormalWS4_g170579;
				float4 In_Shader3_g170578 = Out_Shader4_g170579;
				float4 In_Emissive3_g170578 = Out_Emissive4_g170579;
				float In_Grayscale3_g170578 = temp_output_200_12_g170574;
				float In_Luminosity3_g170578 = temp_output_200_15_g170574;
				float In_MultiMask3_g170578 = temp_output_200_11_g170574;
				float In_AlphaClip3_g170578 = Out_AlphaClip4_g170579;
				float In_AlphaFade3_g170578 = Out_AlphaFade4_g170579;
				float3 In_Translucency3_g170578 = Out_Translucency4_g170579;
				float In_Transmission3_g170578 = Out_Transmission4_g170579;
				float In_Thickness3_g170578 = Out_Thickness4_g170579;
				float In_Diffusion3_g170578 = Out_Diffusion4_g170579;
				{
				Data3_g170578.Dummy = In_Dummy3_g170578;
				Data3_g170578.Albedo = In_Albedo3_g170578;
				Data3_g170578.AlbedoRaw = In_AlbedoRaw3_g170578;
				Data3_g170578.NormalTS = In_NormalTS3_g170578;
				Data3_g170578.NormalWS = In_NormalWS3_g170578;
				Data3_g170578.Shader = In_Shader3_g170578;
				Data3_g170578.Emissive= In_Emissive3_g170578;
				Data3_g170578.MultiMask = In_MultiMask3_g170578;
				Data3_g170578.Grayscale = In_Grayscale3_g170578;
				Data3_g170578.Luminosity = In_Luminosity3_g170578;
				Data3_g170578.AlphaClip = In_AlphaClip3_g170578;
				Data3_g170578.AlphaFade = In_AlphaFade3_g170578;
				Data3_g170578.Translucency = In_Translucency3_g170578;
				Data3_g170578.Transmission = In_Transmission3_g170578;
				Data3_g170578.Thickness = In_Thickness3_g170578;
				Data3_g170578.Diffusion = In_Diffusion3_g170578;
				}
				TVEVisualData Data4_g170600 = Data3_g170578;
				float Out_Dummy4_g170600 = 0;
				float3 Out_Albedo4_g170600 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170600 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170600 = float2( 0,0 );
				float3 Out_NormalWS4_g170600 = float3( 0,0,0 );
				float4 Out_Shader4_g170600 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170600 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170600 = 0;
				float Out_Grayscale4_g170600 = 0;
				float Out_Luminosity4_g170600 = 0;
				float Out_AlphaClip4_g170600 = 0;
				float Out_AlphaFade4_g170600 = 0;
				float3 Out_Translucency4_g170600 = float3( 0,0,0 );
				float Out_Transmission4_g170600 = 0;
				float Out_Thickness4_g170600 = 0;
				float Out_Diffusion4_g170600 = 0;
				{
				Out_Dummy4_g170600 = Data4_g170600.Dummy;
				Out_Albedo4_g170600 = Data4_g170600.Albedo;
				Out_AlbedoRaw4_g170600 = Data4_g170600.AlbedoRaw;
				Out_NormalTS4_g170600 = Data4_g170600.NormalTS;
				Out_NormalWS4_g170600 = Data4_g170600.NormalWS;
				Out_Shader4_g170600 = Data4_g170600.Shader;
				Out_Emissive4_g170600= Data4_g170600.Emissive;
				Out_MultiMask4_g170600 = Data4_g170600.MultiMask;
				Out_Grayscale4_g170600 = Data4_g170600.Grayscale;
				Out_Luminosity4_g170600= Data4_g170600.Luminosity;
				Out_AlphaClip4_g170600 = Data4_g170600.AlphaClip;
				Out_AlphaFade4_g170600 = Data4_g170600.AlphaFade;
				Out_Translucency4_g170600 = Data4_g170600.Translucency;
				Out_Transmission4_g170600 = Data4_g170600.Transmission;
				Out_Thickness4_g170600 = Data4_g170600.Thickness;
				Out_Diffusion4_g170600 = Data4_g170600.Diffusion;
				}
				half3 Visual_Albedo292_g170598 = Out_Albedo4_g170600;
				float temp_output_280_12_g170598 = Out_Grayscale4_g170600;
				half Visual_Grayscale308_g170598 = temp_output_280_12_g170598;
				float3 temp_cast_34 = (Visual_Grayscale308_g170598).xxx;
				TVEGlobalData Data15_g170599 = Data204_g170214;
				float Out_Dummy15_g170599 = 0;
				float4 Out_CoatParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170599 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170599 = Data15_g170599.Dummy;
				Out_CoatParams15_g170599 = Data15_g170599.CoatParams;
				Out_PaintParams15_g170599 = Data15_g170599.PaintParams;
				Out_GlowParams15_g170599 = Data15_g170599.GlowParams;
				Out_AtmoParams15_g170599= Data15_g170599.AtmoParams;
				Out_FadeParams15_g170599= Data15_g170599.FadeParams;
				Out_FormParams15_g170599 = Data15_g170599.FormParams;
				Out_FlowParams15_g170599 = Data15_g170599.FlowParams;
				}
				half4 Global_AtmoParams314_g170598 = Out_AtmoParams15_g170599;
				float temp_output_6_0_g170619 = (Global_AtmoParams314_g170598).x;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170619 = ( temp_output_6_0_g170619 + ( _DrynessElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170619 = temp_output_6_0_g170619;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170598 = staticSwitch14_g170619;
				#else
				float staticSwitch351_g170598 = TVE_AtmoData.x;
				#endif
				float lerpResult505_g170598 = lerp( 1.0 , ( staticSwitch351_g170598 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalMask352_g170598 = lerpResult505_g170598;
				float3 lerpResult485_g170598 = lerp( Visual_Albedo292_g170598 , temp_cast_34 , ( Dryness_GlobalMask352_g170598 * _DrynessGrayValue ));
				half Dryness_TexMask478_g170598 = 1.0;
				float temp_output_280_11_g170598 = Out_MultiMask4_g170600;
				half Visual_MultiMask310_g170598 = temp_output_280_11_g170598;
				float lerpResult283_g170598 = lerp( 1.0 , Visual_MultiMask310_g170598 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170598 = lerpResult283_g170598;
				float temp_output_280_15_g170598 = Out_Luminosity4_g170600;
				half Visual_Luminosity309_g170598 = temp_output_280_15_g170598;
				float clampResult17_g170610 = clamp( Visual_Luminosity309_g170598 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170615 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170615 = ( clampResult17_g170610 - temp_output_7_0_g170615 );
				float lerpResult295_g170598 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170615 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170598 = lerpResult295_g170598;
				TVEModelData Data15_g170604 = Data16_g170201;
				float Out_Dummy15_g170604 = 0;
				float3 Out_PositionWS15_g170604 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170604 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170604 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170604 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170604 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170604 = float3( 0,0,0 );
				float4 Out_VertexData15_g170604 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170604 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170604 = Data15_g170604.Dummy;
				Out_PositionWS15_g170604 = Data15_g170604.PositionWS;
				Out_PositionWO15_g170604 = Data15_g170604.PositionWO;
				Out_PivotWS15_g170604 = Data15_g170604.PivotWS;
				Out_PivotWO15_g170604 = Data15_g170604.PivotWO;
				Out_NormalWS15_g170604 = Data15_g170604.NormalWS;
				Out_ViewDirWS15_g170604 = Data15_g170604.ViewDirWS;
				Out_VertexData15_g170604 = Data15_g170604.VertexData;
				Out_BoundsData15_g170604 = Data15_g170604.BoundsData;
				}
				half4 Model_VertexMasks386_g170598 = Out_VertexData15_g170604;
				float4 break375_g170598 = Model_VertexMasks386_g170598;
				float4 break33_g170607 = _dryness_vert_mode;
				float temp_output_30_0_g170607 = ( break375_g170598.x * break33_g170607.x );
				float temp_output_29_0_g170607 = ( break375_g170598.y * break33_g170607.y );
				float temp_output_31_0_g170607 = ( break375_g170598.z * break33_g170607.z );
				float temp_output_28_0_g170607 = ( temp_output_30_0_g170607 + temp_output_29_0_g170607 + temp_output_31_0_g170607 + ( break375_g170598.w * break33_g170607.w ) );
				float clampResult17_g170608 = clamp( temp_output_28_0_g170607 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170616 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170616 = ( clampResult17_g170608 - temp_output_7_0_g170616 );
				float lerpResult452_g170598 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170616 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170611 = lerpResult452_g170598;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170611 = ( temp_output_6_0_g170611 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170611 = temp_output_6_0_g170611;
				#endif
				half Dryness_VertMask378_g170598 = staticSwitch14_g170611;
				half Dryness_MaskNoise291_g170598 = 1.0;
				half Custom_Mask411_g170598 = 1.0;
				float temp_output_7_0_g170618 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170618 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170598 * Dryness_MultiMask302_g170598 * Dryness_LumaMask301_g170598 * Dryness_VertMask378_g170598 * Dryness_MaskNoise291_g170598 * Dryness_GlobalMask352_g170598 * Custom_Mask411_g170598 ) - temp_output_7_0_g170618 );
				half Dryness_Mask329_g170598 = saturate( ( ( temp_output_9_0_g170618 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170598 = lerp( Visual_Albedo292_g170598 , ( lerpResult485_g170598 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170598 = lerpResult336_g170598;
				#else
				float3 staticSwitch356_g170598 = Visual_Albedo292_g170598;
				#endif
				half3 Final_Albedo331_g170598 = staticSwitch356_g170598;
				float3 In_Albedo3_g170601 = Final_Albedo331_g170598;
				float3 In_AlbedoRaw3_g170601 = Out_AlbedoRaw4_g170600;
				float2 In_NormalTS3_g170601 = Out_NormalTS4_g170600;
				float3 In_NormalWS3_g170601 = Out_NormalWS4_g170600;
				half4 Visual_Shader415_g170598 = Out_Shader4_g170600;
				float4 break438_g170598 = Visual_Shader415_g170598;
				float4 appendResult439_g170598 = (float4(break438_g170598.x , break438_g170598.y , break438_g170598.z , ( break438_g170598.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170598 = lerp( Visual_Shader415_g170598 , appendResult439_g170598 , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170598 = lerpResult427_g170598;
				#else
				float4 staticSwitch426_g170598 = Visual_Shader415_g170598;
				#endif
				half4 Final_Shader433_g170598 = staticSwitch426_g170598;
				float4 In_Shader3_g170601 = Final_Shader433_g170598;
				float4 In_Emissive3_g170601 = Out_Emissive4_g170600;
				float In_Grayscale3_g170601 = temp_output_280_12_g170598;
				float In_Luminosity3_g170601 = temp_output_280_15_g170598;
				float In_MultiMask3_g170601 = temp_output_280_11_g170598;
				float In_AlphaClip3_g170601 = Out_AlphaClip4_g170600;
				float In_AlphaFade3_g170601 = Out_AlphaFade4_g170600;
				float3 In_Translucency3_g170601 = Out_Translucency4_g170600;
				half Visual_Transmission416_g170598 = Out_Transmission4_g170600;
				float lerpResult421_g170598 = lerp( Visual_Transmission416_g170598 , ( Visual_Transmission416_g170598 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170598 = lerpResult421_g170598;
				#else
				float staticSwitch418_g170598 = Visual_Transmission416_g170598;
				#endif
				half Final_Transmission425_g170598 = staticSwitch418_g170598;
				float In_Transmission3_g170601 = Final_Transmission425_g170598;
				float In_Thickness3_g170601 = Out_Thickness4_g170600;
				float In_Diffusion3_g170601 = Out_Diffusion4_g170600;
				{
				Data3_g170601.Dummy = In_Dummy3_g170601;
				Data3_g170601.Albedo = In_Albedo3_g170601;
				Data3_g170601.AlbedoRaw = In_AlbedoRaw3_g170601;
				Data3_g170601.NormalTS = In_NormalTS3_g170601;
				Data3_g170601.NormalWS = In_NormalWS3_g170601;
				Data3_g170601.Shader = In_Shader3_g170601;
				Data3_g170601.Emissive= In_Emissive3_g170601;
				Data3_g170601.MultiMask = In_MultiMask3_g170601;
				Data3_g170601.Grayscale = In_Grayscale3_g170601;
				Data3_g170601.Luminosity = In_Luminosity3_g170601;
				Data3_g170601.AlphaClip = In_AlphaClip3_g170601;
				Data3_g170601.AlphaFade = In_AlphaFade3_g170601;
				Data3_g170601.Translucency = In_Translucency3_g170601;
				Data3_g170601.Transmission = In_Transmission3_g170601;
				Data3_g170601.Thickness = In_Thickness3_g170601;
				Data3_g170601.Diffusion = In_Diffusion3_g170601;
				}
				TVEVisualData Data4_g170623 = Data3_g170601;
				float Out_Dummy4_g170623 = 0;
				float3 Out_Albedo4_g170623 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170623 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170623 = float2( 0,0 );
				float3 Out_NormalWS4_g170623 = float3( 0,0,0 );
				float4 Out_Shader4_g170623 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170623 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170623 = 0;
				float Out_Grayscale4_g170623 = 0;
				float Out_Luminosity4_g170623 = 0;
				float Out_AlphaClip4_g170623 = 0;
				float Out_AlphaFade4_g170623 = 0;
				float3 Out_Translucency4_g170623 = float3( 0,0,0 );
				float Out_Transmission4_g170623 = 0;
				float Out_Thickness4_g170623 = 0;
				float Out_Diffusion4_g170623 = 0;
				{
				Out_Dummy4_g170623 = Data4_g170623.Dummy;
				Out_Albedo4_g170623 = Data4_g170623.Albedo;
				Out_AlbedoRaw4_g170623 = Data4_g170623.AlbedoRaw;
				Out_NormalTS4_g170623 = Data4_g170623.NormalTS;
				Out_NormalWS4_g170623 = Data4_g170623.NormalWS;
				Out_Shader4_g170623 = Data4_g170623.Shader;
				Out_Emissive4_g170623= Data4_g170623.Emissive;
				Out_MultiMask4_g170623 = Data4_g170623.MultiMask;
				Out_Grayscale4_g170623 = Data4_g170623.Grayscale;
				Out_Luminosity4_g170623= Data4_g170623.Luminosity;
				Out_AlphaClip4_g170623 = Data4_g170623.AlphaClip;
				Out_AlphaFade4_g170623 = Data4_g170623.AlphaFade;
				Out_Translucency4_g170623 = Data4_g170623.Translucency;
				Out_Transmission4_g170623 = Data4_g170623.Transmission;
				Out_Thickness4_g170623 = Data4_g170623.Thickness;
				Out_Diffusion4_g170623 = Data4_g170623.Diffusion;
				}
				half3 Visual_Albedo127_g170622 = Out_Albedo4_g170623;
				float4 vertexToFrag24_g170573 = packedInput.ase_texcoord8;
				half4 Interp_Data4335 = vertexToFrag24_g170573;
				float clampResult208_g170622 = clamp( (Interp_Data4335).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170622 = ( Visual_Albedo127_g170622 + ( ( Visual_Albedo127_g170622 * Visual_Albedo127_g170622 * 200.0 * _motion_highlight_color ) * clampResult208_g170622 ) );
				#else
				float3 staticSwitch214_g170622 = Visual_Albedo127_g170622;
				#endif
				half3 Final_Albedo160_g170622 = staticSwitch214_g170622;
				float3 In_Albedo3_g170624 = Final_Albedo160_g170622;
				float3 In_AlbedoRaw3_g170624 = Out_AlbedoRaw4_g170623;
				float2 In_NormalTS3_g170624 = Out_NormalTS4_g170623;
				float3 In_NormalWS3_g170624 = Out_NormalWS4_g170623;
				float4 In_Shader3_g170624 = Out_Shader4_g170623;
				float4 In_Emissive3_g170624 = Out_Emissive4_g170623;
				float In_Grayscale3_g170624 = Out_Grayscale4_g170623;
				float In_Luminosity3_g170624 = Out_Luminosity4_g170623;
				float In_MultiMask3_g170624 = Out_MultiMask4_g170623;
				float In_AlphaClip3_g170624 = Out_AlphaClip4_g170623;
				float In_AlphaFade3_g170624 = Out_AlphaFade4_g170623;
				float3 In_Translucency3_g170624 = Out_Translucency4_g170623;
				float In_Transmission3_g170624 = Out_Transmission4_g170623;
				float In_Thickness3_g170624 = Out_Thickness4_g170623;
				float In_Diffusion3_g170624 = Out_Diffusion4_g170623;
				{
				Data3_g170624.Dummy = In_Dummy3_g170624;
				Data3_g170624.Albedo = In_Albedo3_g170624;
				Data3_g170624.AlbedoRaw = In_AlbedoRaw3_g170624;
				Data3_g170624.NormalTS = In_NormalTS3_g170624;
				Data3_g170624.NormalWS = In_NormalWS3_g170624;
				Data3_g170624.Shader = In_Shader3_g170624;
				Data3_g170624.Emissive= In_Emissive3_g170624;
				Data3_g170624.MultiMask = In_MultiMask3_g170624;
				Data3_g170624.Grayscale = In_Grayscale3_g170624;
				Data3_g170624.Luminosity = In_Luminosity3_g170624;
				Data3_g170624.AlphaClip = In_AlphaClip3_g170624;
				Data3_g170624.AlphaFade = In_AlphaFade3_g170624;
				Data3_g170624.Translucency = In_Translucency3_g170624;
				Data3_g170624.Transmission = In_Transmission3_g170624;
				Data3_g170624.Thickness = In_Thickness3_g170624;
				Data3_g170624.Diffusion = In_Diffusion3_g170624;
				}
				TVEVisualData Data4_g170626 = Data3_g170624;
				float Out_Dummy4_g170626 = 0;
				float3 Out_Albedo4_g170626 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170626 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170626 = float2( 0,0 );
				float3 Out_NormalWS4_g170626 = float3( 0,0,0 );
				float4 Out_Shader4_g170626 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170626 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170626 = 0;
				float Out_Grayscale4_g170626 = 0;
				float Out_Luminosity4_g170626 = 0;
				float Out_AlphaClip4_g170626 = 0;
				float Out_AlphaFade4_g170626 = 0;
				float3 Out_Translucency4_g170626 = float3( 0,0,0 );
				float Out_Transmission4_g170626 = 0;
				float Out_Thickness4_g170626 = 0;
				float Out_Diffusion4_g170626 = 0;
				{
				Out_Dummy4_g170626 = Data4_g170626.Dummy;
				Out_Albedo4_g170626 = Data4_g170626.Albedo;
				Out_AlbedoRaw4_g170626 = Data4_g170626.AlbedoRaw;
				Out_NormalTS4_g170626 = Data4_g170626.NormalTS;
				Out_NormalWS4_g170626 = Data4_g170626.NormalWS;
				Out_Shader4_g170626 = Data4_g170626.Shader;
				Out_Emissive4_g170626= Data4_g170626.Emissive;
				Out_MultiMask4_g170626 = Data4_g170626.MultiMask;
				Out_Grayscale4_g170626 = Data4_g170626.Grayscale;
				Out_Luminosity4_g170626= Data4_g170626.Luminosity;
				Out_AlphaClip4_g170626 = Data4_g170626.AlphaClip;
				Out_AlphaFade4_g170626 = Data4_g170626.AlphaFade;
				Out_Translucency4_g170626 = Data4_g170626.Translucency;
				Out_Transmission4_g170626 = Data4_g170626.Transmission;
				Out_Thickness4_g170626 = Data4_g170626.Thickness;
				Out_Diffusion4_g170626 = Data4_g170626.Diffusion;
				}
				half3 Visual_Albedo127_g170625 = Out_Albedo4_g170626;
				float3 temp_output_622_0_g170625 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170629) = _OverlayAlbedoTex;
				float localFilterTexture19_g170641 = ( 0.0 );
				SamplerState SS19_g170641 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170641 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170641 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170641 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170641 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170641 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170641 = SamplerDefault19_g170641;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170641 = SamplerDefault19_g170641;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170641 = SamplerPoint19_g170641;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170641 = SamplerLow19_g170641;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170641 = SamplerMedium19_g170641;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170641 = SamplerHigh19_g170641;
				#endif
				}
				SamplerState Sampler238_g170629 = SS19_g170641;
				float4 temp_output_6_0_g170630 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170630 = ( temp_output_6_0_g170630 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170630 = temp_output_6_0_g170630;
				#endif
				half4 Overlay_Coords639_g170625 = staticSwitch14_g170630;
				float4 temp_output_37_0_g170629 = Overlay_Coords639_g170625;
				half4 Coords238_g170629 = temp_output_37_0_g170629;
				TVEModelData Data15_g170643 = Data16_g170201;
				float Out_Dummy15_g170643 = 0;
				float3 Out_PositionWS15_g170643 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170643 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170643 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170643 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170643 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170643 = float3( 0,0,0 );
				float4 Out_VertexData15_g170643 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170643 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170643 = Data15_g170643.Dummy;
				Out_PositionWS15_g170643 = Data15_g170643.PositionWS;
				Out_PositionWO15_g170643 = Data15_g170643.PositionWO;
				Out_PivotWS15_g170643 = Data15_g170643.PivotWS;
				Out_PivotWO15_g170643 = Data15_g170643.PivotWO;
				Out_NormalWS15_g170643 = Data15_g170643.NormalWS;
				Out_ViewDirWS15_g170643 = Data15_g170643.ViewDirWS;
				Out_VertexData15_g170643 = Data15_g170643.VertexData;
				Out_BoundsData15_g170643 = Data15_g170643.BoundsData;
				}
				half3 Model_PositionWO602_g170625 = Out_PositionWO15_g170643;
				float3 temp_output_279_0_g170629 = Model_PositionWO602_g170625;
				half3 WorldPosition238_g170629 = temp_output_279_0_g170629;
				half4 localSamplePlanar2D238_g170629 = SamplePlanar2D( Texture238_g170629 , Sampler238_g170629 , Coords238_g170629 , WorldPosition238_g170629 );
				TEXTURE2D(Texture246_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170629 = SS19_g170641;
				half4 Coords246_g170629 = temp_output_37_0_g170629;
				half3 WorldPosition246_g170629 = temp_output_279_0_g170629;
				half3 Model_NormalWS712_g170625 = Out_NormalWS15_g170643;
				float3 temp_output_280_0_g170629 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170629 = temp_output_280_0_g170629;
				half4 localSamplePlanar3D246_g170629 = SamplePlanar3D( Texture246_g170629 , Sampler246_g170629 , Coords246_g170629 , WorldPosition246_g170629 , WorldNormal246_g170629 );
				TEXTURE2D(Texture234_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170629 = SS19_g170641;
				float4 Coords234_g170629 = temp_output_37_0_g170629;
				float3 WorldPosition234_g170629 = temp_output_279_0_g170629;
				float4 localSampleStochastic2D234_g170629 = SampleStochastic2D( Texture234_g170629 , Sampler234_g170629 , Coords234_g170629 , WorldPosition234_g170629 );
				TEXTURE2D(Texture263_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170629 = SS19_g170641;
				half4 Coords263_g170629 = temp_output_37_0_g170629;
				half3 WorldPosition263_g170629 = temp_output_279_0_g170629;
				half3 WorldNormal263_g170629 = temp_output_280_0_g170629;
				half4 localSampleStochastic3D263_g170629 = SampleStochastic3D( Texture263_g170629 , Sampler263_g170629 , Coords263_g170629 , WorldPosition263_g170629 , WorldNormal263_g170629 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170625 = localSamplePlanar2D238_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170625 = localSamplePlanar3D246_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170625 = localSampleStochastic2D234_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170625 = localSampleStochastic3D263_g170629;
				#else
				float4 staticSwitch676_g170625 = localSamplePlanar2D238_g170629;
				#endif
				half3 Overlay_Albedo526_g170625 = (staticSwitch676_g170625).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170625 = ( temp_output_622_0_g170625 * Overlay_Albedo526_g170625 );
				#else
				float3 staticSwitch578_g170625 = temp_output_622_0_g170625;
				#endif
				float3 temp_output_6_0_g170644 = staticSwitch578_g170625;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170644 = ( temp_output_6_0_g170644 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170644 = temp_output_6_0_g170644;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				TEXTURE2D(Texture246_g170633) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170633 = sampler_Linear_Repeat;
				float4 appendResult863_g170625 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170633 = appendResult863_g170625;
				half4 Coords246_g170633 = temp_output_37_0_g170633;
				float3 temp_output_279_0_g170633 = Model_PositionWO602_g170625;
				half3 WorldPosition246_g170633 = temp_output_279_0_g170633;
				float3 temp_output_280_0_g170633 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170633 = temp_output_280_0_g170633;
				half4 localSamplePlanar3D246_g170633 = SamplePlanar3D( Texture246_g170633 , Sampler246_g170633 , Coords246_g170633 , WorldPosition246_g170633 , WorldNormal246_g170633 );
				half Overlay_GlitterTex854_g170625 = (localSamplePlanar3D246_g170633).x;
				half3 Model_PositionWS879_g170625 = Out_PositionWS15_g170643;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170625 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170625 * 1.0 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170625 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170625 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170625 = staticSwitch868_g170625;
				half Overlay_TexMask908_g170625 = 1.0;
				float3 temp_output_739_21_g170625 = Out_NormalWS4_g170626;
				half3 Visual_NormalWS749_g170625 = temp_output_739_21_g170625;
				float clampResult17_g170650 = clamp( saturate( (Visual_NormalWS749_g170625).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170654 = _OverlayProjRemap.x;
				float temp_output_9_0_g170654 = ( clampResult17_g170650 - temp_output_7_0_g170654 );
				float lerpResult842_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170654 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170625 = lerpResult842_g170625;
				float temp_output_739_15_g170625 = Out_Luminosity4_g170626;
				half Visual_Luminosity654_g170625 = temp_output_739_15_g170625;
				float clampResult17_g170658 = clamp( Visual_Luminosity654_g170625 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170659 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170659 = ( clampResult17_g170658 - temp_output_7_0_g170659 );
				float lerpResult587_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170659 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170625 = lerpResult587_g170625;
				half4 Model_VertexMasks791_g170625 = Out_VertexData15_g170643;
				float4 break792_g170625 = Model_VertexMasks791_g170625;
				float4 break33_g170645 = _overlay_vert_mode;
				float temp_output_30_0_g170645 = ( break792_g170625.x * break33_g170645.x );
				float temp_output_29_0_g170645 = ( break792_g170625.y * break33_g170645.y );
				float temp_output_31_0_g170645 = ( break792_g170625.z * break33_g170645.z );
				float temp_output_28_0_g170645 = ( temp_output_30_0_g170645 + temp_output_29_0_g170645 + temp_output_31_0_g170645 + ( break792_g170625.w * break33_g170645.w ) );
				float clampResult17_g170646 = clamp( temp_output_28_0_g170645 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170655 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170655 = ( clampResult17_g170646 - temp_output_7_0_g170655 );
				float lerpResult881_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170655 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170651 = lerpResult881_g170625;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170651 = ( temp_output_6_0_g170651 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170651 = temp_output_6_0_g170651;
				#endif
				half Overlay_VertMask801_g170625 = staticSwitch14_g170651;
				half Overlay_MaskNoise427_g170625 = 1.0;
				TVEGlobalData Data15_g170627 = Data204_g170214;
				float Out_Dummy15_g170627 = 0;
				float4 Out_CoatParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170627 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170627 = Data15_g170627.Dummy;
				Out_CoatParams15_g170627 = Data15_g170627.CoatParams;
				Out_PaintParams15_g170627 = Data15_g170627.PaintParams;
				Out_GlowParams15_g170627 = Data15_g170627.GlowParams;
				Out_AtmoParams15_g170627= Data15_g170627.AtmoParams;
				Out_FadeParams15_g170627= Data15_g170627.FadeParams;
				Out_FormParams15_g170627 = Data15_g170627.FormParams;
				Out_FlowParams15_g170627 = Data15_g170627.FlowParams;
				}
				half4 Global_AtmoParams516_g170625 = Out_AtmoParams15_g170627;
				float temp_output_6_0_g170660 = (Global_AtmoParams516_g170625).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170660 = ( temp_output_6_0_g170660 + ( _OverlayElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170660 = temp_output_6_0_g170660;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170625 = staticSwitch14_g170660;
				#else
				float staticSwitch705_g170625 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170625 = lerp( 1.0 , ( staticSwitch705_g170625 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170625 = lerpResult937_g170625;
				half Custom_Mask646_g170625 = 1.0;
				float temp_output_7_0_g170657 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170657 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170625 * Overlay_MaskProj457_g170625 * Overlay_MaskLuma438_g170625 * Overlay_VertMask801_g170625 * Overlay_MaskNoise427_g170625 * Overlay_MaskGlobal429_g170625 * Custom_Mask646_g170625 ) - temp_output_7_0_g170657 );
				half Overlay_Mask494_g170625 = saturate( ( ( temp_output_9_0_g170657 / ( _OverlayBlendRemap.y - temp_output_7_0_g170657 ) ) + 0.0001 ) );
				float3 lerpResult467_g170625 = lerp( Visual_Albedo127_g170625 , ( staticSwitch14_g170644 + Overlay_GlitterColor865_g170625 ) , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170625 = lerpResult467_g170625;
				#else
				float3 staticSwitch577_g170625 = Visual_Albedo127_g170625;
				#endif
				half3 Final_Albedo493_g170625 = staticSwitch577_g170625;
				float3 In_Albedo3_g170628 = Final_Albedo493_g170625;
				float3 In_AlbedoRaw3_g170628 = Out_AlbedoRaw4_g170626;
				half2 Visual_NormalTS535_g170625 = Out_NormalTS4_g170626;
				TEXTURE2D(Texture238_g170631) = _OverlayNormalTex;
				float localFilterTexture29_g170642 = ( 0.0 );
				SamplerState SS29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170642 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170642 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170642 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170642 = SamplerDefault29_g170642;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170642 = SamplerDefault29_g170642;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170642 = SamplerPoint29_g170642;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170642 = SamplerLow29_g170642;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170642 = SamplerMedium29_g170642;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170642 = SamplerHigh29_g170642;
				#endif
				}
				SamplerState Sampler238_g170631 = SS29_g170642;
				float4 temp_output_37_0_g170631 = Overlay_Coords639_g170625;
				half4 Coords238_g170631 = temp_output_37_0_g170631;
				float3 temp_output_279_0_g170631 = Model_PositionWO602_g170625;
				half3 WorldPosition238_g170631 = temp_output_279_0_g170631;
				half4 localSamplePlanar2D238_g170631 = SamplePlanar2D( Texture238_g170631 , Sampler238_g170631 , Coords238_g170631 , WorldPosition238_g170631 );
				TEXTURE2D(Texture246_g170631) = _OverlayNormalTex;
				SamplerState Sampler246_g170631 = SS29_g170642;
				half4 Coords246_g170631 = temp_output_37_0_g170631;
				half3 WorldPosition246_g170631 = temp_output_279_0_g170631;
				float3 temp_output_280_0_g170631 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170631 = temp_output_280_0_g170631;
				half4 localSamplePlanar3D246_g170631 = SamplePlanar3D( Texture246_g170631 , Sampler246_g170631 , Coords246_g170631 , WorldPosition246_g170631 , WorldNormal246_g170631 );
				TEXTURE2D(Texture234_g170631) = _OverlayNormalTex;
				SamplerState Sampler234_g170631 = SS29_g170642;
				float4 Coords234_g170631 = temp_output_37_0_g170631;
				float3 WorldPosition234_g170631 = temp_output_279_0_g170631;
				float4 localSampleStochastic2D234_g170631 = SampleStochastic2D( Texture234_g170631 , Sampler234_g170631 , Coords234_g170631 , WorldPosition234_g170631 );
				TEXTURE2D(Texture263_g170631) = _OverlayNormalTex;
				SamplerState Sampler263_g170631 = SS29_g170642;
				half4 Coords263_g170631 = temp_output_37_0_g170631;
				half3 WorldPosition263_g170631 = temp_output_279_0_g170631;
				half3 WorldNormal263_g170631 = temp_output_280_0_g170631;
				half4 localSampleStochastic3D263_g170631 = SampleStochastic3D( Texture263_g170631 , Sampler263_g170631 , Coords263_g170631 , WorldPosition263_g170631 , WorldNormal263_g170631 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170625 = localSamplePlanar2D238_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170625 = localSamplePlanar3D246_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170625 = localSampleStochastic2D234_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170625 = localSampleStochastic3D263_g170631;
				#else
				float4 staticSwitch686_g170625 = localSamplePlanar2D238_g170631;
				#endif
				half4 Normal_Packed45_g170635 = staticSwitch686_g170625;
				float2 appendResult58_g170635 = (float2(( (Normal_Packed45_g170635).x * (Normal_Packed45_g170635).w ) , (Normal_Packed45_g170635).y));
				half2 Normal_Default50_g170635 = appendResult58_g170635;
				half2 Normal_ASTC41_g170635 = (Normal_Packed45_g170635).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170635 = Normal_ASTC41_g170635;
				#else
				float2 staticSwitch38_g170635 = Normal_Default50_g170635;
				#endif
				half2 Normal_NO_DTX544_g170635 = (Normal_Packed45_g170635).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170635 = Normal_NO_DTX544_g170635;
				#else
				float2 staticSwitch37_g170635 = staticSwitch38_g170635;
				#endif
				half2 Normal_Planar45_g170634 = (staticSwitch37_g170635*2.0 + -1.0);
				float2 break71_g170634 = Normal_Planar45_g170634;
				float3 appendResult72_g170634 = (float3(break71_g170634.x , 0.0 , break71_g170634.y));
				half2 Overlay_Normal528_g170625 = (mul( ase_worldToTangent, appendResult72_g170634 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170625 = Overlay_Normal528_g170625;
				#else
				float2 staticSwitch579_g170625 = Visual_NormalTS535_g170625;
				#endif
				float2 lerpResult551_g170625 = lerp( Visual_NormalTS535_g170625 , ( staticSwitch579_g170625 * _OverlayNormalValue ) , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170625 = lerpResult551_g170625;
				#else
				float2 staticSwitch583_g170625 = Visual_NormalTS535_g170625;
				#endif
				half2 Final_NormalTS499_g170625 = staticSwitch583_g170625;
				float2 In_NormalTS3_g170628 = Final_NormalTS499_g170625;
				float3 In_NormalWS3_g170628 = temp_output_739_21_g170625;
				half4 Visual_Masks536_g170625 = Out_Shader4_g170626;
				float4 appendResult585_g170625 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170625 = lerp( Visual_Masks536_g170625 , appendResult585_g170625 , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170625 = lerpResult584_g170625;
				#else
				float4 staticSwitch586_g170625 = Visual_Masks536_g170625;
				#endif
				half4 Final_Masks482_g170625 = staticSwitch586_g170625;
				float4 In_Shader3_g170628 = Final_Masks482_g170625;
				float4 In_Emissive3_g170628 = Out_Emissive4_g170626;
				float temp_output_739_12_g170625 = Out_Grayscale4_g170626;
				float In_Grayscale3_g170628 = temp_output_739_12_g170625;
				float In_Luminosity3_g170628 = temp_output_739_15_g170625;
				float In_MultiMask3_g170628 = Out_MultiMask4_g170626;
				float In_AlphaClip3_g170628 = Out_AlphaClip4_g170626;
				float In_AlphaFade3_g170628 = Out_AlphaFade4_g170626;
				float3 In_Translucency3_g170628 = Out_Translucency4_g170626;
				half Visual_Transmission699_g170625 = Out_Transmission4_g170626;
				float lerpResult746_g170625 = lerp( Visual_Transmission699_g170625 , ( Visual_Transmission699_g170625 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170625 * Overlay_MaskNoise427_g170625 * Overlay_MaskGlobal429_g170625 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170625 = lerpResult746_g170625;
				#else
				float staticSwitch703_g170625 = Visual_Transmission699_g170625;
				#endif
				half Final_Transmission702_g170625 = staticSwitch703_g170625;
				float In_Transmission3_g170628 = Final_Transmission702_g170625;
				float In_Thickness3_g170628 = Out_Thickness4_g170626;
				float In_Diffusion3_g170628 = Out_Diffusion4_g170626;
				{
				Data3_g170628.Dummy = In_Dummy3_g170628;
				Data3_g170628.Albedo = In_Albedo3_g170628;
				Data3_g170628.AlbedoRaw = In_AlbedoRaw3_g170628;
				Data3_g170628.NormalTS = In_NormalTS3_g170628;
				Data3_g170628.NormalWS = In_NormalWS3_g170628;
				Data3_g170628.Shader = In_Shader3_g170628;
				Data3_g170628.Emissive= In_Emissive3_g170628;
				Data3_g170628.MultiMask = In_MultiMask3_g170628;
				Data3_g170628.Grayscale = In_Grayscale3_g170628;
				Data3_g170628.Luminosity = In_Luminosity3_g170628;
				Data3_g170628.AlphaClip = In_AlphaClip3_g170628;
				Data3_g170628.AlphaFade = In_AlphaFade3_g170628;
				Data3_g170628.Translucency = In_Translucency3_g170628;
				Data3_g170628.Transmission = In_Transmission3_g170628;
				Data3_g170628.Thickness = In_Thickness3_g170628;
				Data3_g170628.Diffusion = In_Diffusion3_g170628;
				}
				TVEVisualData Data4_g170663 = Data3_g170628;
				float Out_Dummy4_g170663 = 0;
				float3 Out_Albedo4_g170663 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170663 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170663 = float2( 0,0 );
				float3 Out_NormalWS4_g170663 = float3( 0,0,0 );
				float4 Out_Shader4_g170663 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170663 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170663 = 0;
				float Out_Grayscale4_g170663 = 0;
				float Out_Luminosity4_g170663 = 0;
				float Out_AlphaClip4_g170663 = 0;
				float Out_AlphaFade4_g170663 = 0;
				float3 Out_Translucency4_g170663 = float3( 0,0,0 );
				float Out_Transmission4_g170663 = 0;
				float Out_Thickness4_g170663 = 0;
				float Out_Diffusion4_g170663 = 0;
				{
				Out_Dummy4_g170663 = Data4_g170663.Dummy;
				Out_Albedo4_g170663 = Data4_g170663.Albedo;
				Out_AlbedoRaw4_g170663 = Data4_g170663.AlbedoRaw;
				Out_NormalTS4_g170663 = Data4_g170663.NormalTS;
				Out_NormalWS4_g170663 = Data4_g170663.NormalWS;
				Out_Shader4_g170663 = Data4_g170663.Shader;
				Out_Emissive4_g170663= Data4_g170663.Emissive;
				Out_MultiMask4_g170663 = Data4_g170663.MultiMask;
				Out_Grayscale4_g170663 = Data4_g170663.Grayscale;
				Out_Luminosity4_g170663= Data4_g170663.Luminosity;
				Out_AlphaClip4_g170663 = Data4_g170663.AlphaClip;
				Out_AlphaFade4_g170663 = Data4_g170663.AlphaFade;
				Out_Translucency4_g170663 = Data4_g170663.Translucency;
				Out_Transmission4_g170663 = Data4_g170663.Transmission;
				Out_Thickness4_g170663 = Data4_g170663.Thickness;
				Out_Diffusion4_g170663 = Data4_g170663.Diffusion;
				}
				half3 Visual_Albedo127_g170662 = Out_Albedo4_g170663;
				TVEGlobalData Data15_g170668 = Data204_g170214;
				float Out_Dummy15_g170668 = 0;
				float4 Out_CoatParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170668 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170668 = Data15_g170668.Dummy;
				Out_CoatParams15_g170668 = Data15_g170668.CoatParams;
				Out_PaintParams15_g170668 = Data15_g170668.PaintParams;
				Out_GlowParams15_g170668 = Data15_g170668.GlowParams;
				Out_AtmoParams15_g170668= Data15_g170668.AtmoParams;
				Out_FadeParams15_g170668= Data15_g170668.FadeParams;
				Out_FormParams15_g170668 = Data15_g170668.FormParams;
				Out_FlowParams15_g170668 = Data15_g170668.FlowParams;
				}
				half4 Global_AtmoParams516_g170662 = Out_AtmoParams15_g170668;
				float4 temp_output_6_0_g170689 = Global_AtmoParams516_g170662;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170689 = ( temp_output_6_0_g170689 + ( _WetnessElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170689 = temp_output_6_0_g170689;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170662 = staticSwitch14_g170689;
				#else
				float4 staticSwitch663_g170662 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170662 = lerp( float2( 1,1 ) , (( staticSwitch663_g170662 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170662 = lerpResult1121_g170662;
				half Global_Wetness429_g170662 = break1123_g170662.x;
				half Wetness_Value1042_g170662 = ( _WetnessIntensityValue * Global_Wetness429_g170662 );
				TVEModelData Data15_g170674 = Data16_g170201;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				}
				half4 Model_VertexData1030_g170662 = Out_VertexData15_g170674;
				float4 break1019_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170677 = _wetness_vert_mode;
				float temp_output_30_0_g170677 = ( break1019_g170662.x * break33_g170677.x );
				float temp_output_29_0_g170677 = ( break1019_g170662.y * break33_g170677.y );
				float temp_output_31_0_g170677 = ( break1019_g170662.z * break33_g170677.z );
				float temp_output_28_0_g170677 = ( temp_output_30_0_g170677 + temp_output_29_0_g170677 + temp_output_31_0_g170677 + ( break1019_g170662.w * break33_g170677.w ) );
				float clampResult17_g170676 = clamp( temp_output_28_0_g170677 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170685 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170685 = ( clampResult17_g170676 - temp_output_7_0_g170685 );
				float lerpResult1026_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170685 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170678 = lerpResult1026_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170678 = ( temp_output_6_0_g170678 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170678 = temp_output_6_0_g170678;
				#endif
				float temp_output_1025_0_g170662 = staticSwitch14_g170678;
				half Wetness_VertMask1024_g170662 = temp_output_1025_0_g170662;
				float temp_output_1043_0_g170662 = ( Wetness_Value1042_g170662 * Wetness_VertMask1024_g170662 );
				half Wetness_Mask866_g170662 = temp_output_1043_0_g170662;
				float4 break1083_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170680 = _wetness_water_vert_mode;
				float temp_output_30_0_g170680 = ( break1083_g170662.x * break33_g170680.x );
				float temp_output_29_0_g170680 = ( break1083_g170662.y * break33_g170680.y );
				float temp_output_31_0_g170680 = ( break1083_g170662.z * break33_g170680.z );
				float temp_output_28_0_g170680 = ( temp_output_30_0_g170680 + temp_output_29_0_g170680 + temp_output_31_0_g170680 + ( break1083_g170662.w * break33_g170680.w ) );
				float clampResult17_g170679 = clamp( temp_output_28_0_g170680 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170686 = ( clampResult17_g170679 - temp_output_7_0_g170686 );
				float lerpResult1089_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170686 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170681 = lerpResult1089_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170681 = ( temp_output_6_0_g170681 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170681 = temp_output_6_0_g170681;
				#endif
				float temp_output_1091_0_g170662 = staticSwitch14_g170681;
				half Water_VertMask1094_g170662 = temp_output_1091_0_g170662;
				half4 Visual_Masks536_g170662 = Out_Shader4_g170663;
				float lerpResult1013_g170662 = lerp( 1.0 , (Visual_Masks536_g170662).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170662 = lerpResult1013_g170662;
				float clampResult17_g170675 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170662 * Water_VertMask1094_g170662 ) - Water_HeightMask782_g170662 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170688 = ( clampResult17_g170675 - temp_output_7_0_g170688 );
				half3 Model_NormalWS798_g170662 = Out_NormalWS15_g170674;
				float temp_output_786_0_g170662 = saturate( (Model_NormalWS798_g170662).y );
				half Wetness_ProjMask790_g170662 = temp_output_786_0_g170662;
				half Water_Mask760_g170662 = ( saturate( ( ( temp_output_9_0_g170688 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170662 );
				float3 lerpResult918_g170662 = lerp( Visual_Albedo127_g170662 , ( Visual_Albedo127_g170662 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170662);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170662 = lerpResult918_g170662;
				#else
				float3 staticSwitch946_g170662 = Visual_Albedo127_g170662;
				#endif
				float3 lerpResult768_g170662 = lerp( staticSwitch946_g170662 , ( staticSwitch946_g170662 * staticSwitch946_g170662 ) , _WetnessContrastValue);
				float3 lerpResult651_g170662 = lerp( Visual_Albedo127_g170662 , lerpResult768_g170662 , Wetness_Mask866_g170662);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170662 = lerpResult651_g170662;
				#else
				float3 staticSwitch577_g170662 = Visual_Albedo127_g170662;
				#endif
				half3 Final_Albedo493_g170662 = staticSwitch577_g170662;
				float3 In_Albedo3_g170664 = Final_Albedo493_g170662;
				float3 In_AlbedoRaw3_g170664 = Out_AlbedoRaw4_g170663;
				half2 Visual_Normal535_g170662 = Out_NormalTS4_g170663;
				float lerpResult877_g170662 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170662 * Water_Mask760_g170662 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170662 = ( Visual_Normal535_g170662 * lerpResult877_g170662 );
				#else
				float2 staticSwitch957_g170662 = Visual_Normal535_g170662;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				TEXTURE2D(Texture238_g170672) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170672 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170662 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170672 = appendResult924_g170662;
				half4 Coords238_g170672 = temp_output_37_0_g170672;
				half3 Model_PositionWO602_g170662 = Out_PositionWO15_g170674;
				float3 temp_output_279_0_g170672 = Model_PositionWO602_g170662;
				half3 WorldPosition238_g170672 = temp_output_279_0_g170672;
				half4 localSamplePlanar2D238_g170672 = SamplePlanar2D( Texture238_g170672 , Sampler238_g170672 , Coords238_g170672 , WorldPosition238_g170672 );
				float4 temp_output_1010_0_g170662 = localSamplePlanar2D238_g170672;
				half2 Rain_DropsNormal919_g170662 = (temp_output_1010_0_g170662).zw;
				float2 temp_output_903_0_g170662 = (Rain_DropsNormal919_g170662*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170662 = (temp_output_1010_0_g170662).xy;
				float2 lerpResult904_g170662 = lerp( temp_output_903_0_g170662 , (Rain_RingsNormal713_g170662*2.0 + -1.0) , ( Water_Mask760_g170662 * Water_Mask760_g170662 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170662 = lerpResult904_g170662;
				#else
				float2 staticSwitch960_g170662 = temp_output_903_0_g170662;
				#endif
				half2 Rain_Drops1002_g170662 = ( staticSwitch960_g170662 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170662 = Out_PositionWS15_g170674;
				half Global_Rain955_g170662 = break1123_g170662.y;
				half Rain_Value1067_g170662 = Global_Rain955_g170662;
				float4 break1097_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170683 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170683 = ( break1097_g170662.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1097_g170662.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1097_g170662.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1097_g170662.w * break33_g170683.w ) );
				float clampResult17_g170682 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170687 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170687 = ( clampResult17_g170682 - temp_output_7_0_g170687 );
				float lerpResult1100_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170687 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170684 = lerpResult1100_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				float temp_output_1101_0_g170662 = staticSwitch14_g170684;
				half Rain_VertMask1108_g170662 = temp_output_1101_0_g170662;
				half Rain_Mask999_g170662 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170662 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170662 * Rain_VertMask1108_g170662 );
				half2 Normal_Planar45_g170671 = ( Rain_Drops1002_g170662 * Rain_Mask999_g170662 * Wetness_ProjMask790_g170662 );
				float2 break71_g170671 = Normal_Planar45_g170671;
				float3 appendResult72_g170671 = (float3(break71_g170671.x , 0.0 , break71_g170671.y));
				half2 Wetness_Normal526_g170662 = (mul( ase_worldToTangent, appendResult72_g170671 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170662 = Wetness_Normal526_g170662;
				#else
				float2 staticSwitch583_g170662 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170662 = ( staticSwitch957_g170662 + staticSwitch583_g170662 );
				#else
				float2 staticSwitch774_g170662 = Visual_Normal535_g170662;
				#endif
				half2 Final_Normal499_g170662 = staticSwitch774_g170662;
				float2 In_NormalTS3_g170664 = Final_Normal499_g170662;
				float3 In_NormalWS3_g170664 = Out_NormalWS4_g170663;
				float4 break658_g170662 = Visual_Masks536_g170662;
				float temp_output_935_0_g170662 = ( Wetness_Mask866_g170662 * _WetnessSmoothnessValue );
				float lerpResult941_g170662 = lerp( temp_output_935_0_g170662 , 2.0 , Water_Mask760_g170662);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170662 = lerpResult941_g170662;
				#else
				float staticSwitch959_g170662 = temp_output_935_0_g170662;
				#endif
				float4 appendResult661_g170662 = (float4(break658_g170662.x , break658_g170662.y , break658_g170662.z , saturate( ( break658_g170662.w + staticSwitch959_g170662 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170662 = appendResult661_g170662;
				#else
				float4 staticSwitch586_g170662 = Visual_Masks536_g170662;
				#endif
				half4 Final_Masks482_g170662 = staticSwitch586_g170662;
				float4 In_Shader3_g170664 = Final_Masks482_g170662;
				float4 In_Emissive3_g170664 = Out_Emissive4_g170663;
				float In_Grayscale3_g170664 = Out_Grayscale4_g170663;
				float In_Luminosity3_g170664 = Out_Luminosity4_g170663;
				float In_MultiMask3_g170664 = Out_MultiMask4_g170663;
				float In_AlphaClip3_g170664 = Out_AlphaClip4_g170663;
				float In_AlphaFade3_g170664 = Out_AlphaFade4_g170663;
				float3 In_Translucency3_g170664 = Out_Translucency4_g170663;
				float In_Transmission3_g170664 = Out_Transmission4_g170663;
				float In_Thickness3_g170664 = Out_Thickness4_g170663;
				float In_Diffusion3_g170664 = Out_Diffusion4_g170663;
				{
				Data3_g170664.Dummy = In_Dummy3_g170664;
				Data3_g170664.Albedo = In_Albedo3_g170664;
				Data3_g170664.AlbedoRaw = In_AlbedoRaw3_g170664;
				Data3_g170664.NormalTS = In_NormalTS3_g170664;
				Data3_g170664.NormalWS = In_NormalWS3_g170664;
				Data3_g170664.Shader = In_Shader3_g170664;
				Data3_g170664.Emissive= In_Emissive3_g170664;
				Data3_g170664.MultiMask = In_MultiMask3_g170664;
				Data3_g170664.Grayscale = In_Grayscale3_g170664;
				Data3_g170664.Luminosity = In_Luminosity3_g170664;
				Data3_g170664.AlphaClip = In_AlphaClip3_g170664;
				Data3_g170664.AlphaFade = In_AlphaFade3_g170664;
				Data3_g170664.Translucency = In_Translucency3_g170664;
				Data3_g170664.Transmission = In_Transmission3_g170664;
				Data3_g170664.Thickness = In_Thickness3_g170664;
				Data3_g170664.Diffusion = In_Diffusion3_g170664;
				}
				TVEVisualData Data4_g170694 = Data3_g170664;
				float Out_Dummy4_g170694 = 0;
				float3 Out_Albedo4_g170694 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170694 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170694 = float2( 0,0 );
				float3 Out_NormalWS4_g170694 = float3( 0,0,0 );
				float4 Out_Shader4_g170694 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170694 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170694 = 0;
				float Out_Grayscale4_g170694 = 0;
				float Out_Luminosity4_g170694 = 0;
				float Out_AlphaClip4_g170694 = 0;
				float Out_AlphaFade4_g170694 = 0;
				float3 Out_Translucency4_g170694 = float3( 0,0,0 );
				float Out_Transmission4_g170694 = 0;
				float Out_Thickness4_g170694 = 0;
				float Out_Diffusion4_g170694 = 0;
				{
				Out_Dummy4_g170694 = Data4_g170694.Dummy;
				Out_Albedo4_g170694 = Data4_g170694.Albedo;
				Out_AlbedoRaw4_g170694 = Data4_g170694.AlbedoRaw;
				Out_NormalTS4_g170694 = Data4_g170694.NormalTS;
				Out_NormalWS4_g170694 = Data4_g170694.NormalWS;
				Out_Shader4_g170694 = Data4_g170694.Shader;
				Out_Emissive4_g170694= Data4_g170694.Emissive;
				Out_MultiMask4_g170694 = Data4_g170694.MultiMask;
				Out_Grayscale4_g170694 = Data4_g170694.Grayscale;
				Out_Luminosity4_g170694= Data4_g170694.Luminosity;
				Out_AlphaClip4_g170694 = Data4_g170694.AlphaClip;
				Out_AlphaFade4_g170694 = Data4_g170694.AlphaFade;
				Out_Translucency4_g170694 = Data4_g170694.Translucency;
				Out_Transmission4_g170694 = Data4_g170694.Transmission;
				Out_Thickness4_g170694 = Data4_g170694.Thickness;
				Out_Diffusion4_g170694 = Data4_g170694.Diffusion;
				}
				float3 In_Albedo3_g170692 = Out_Albedo4_g170694;
				float3 In_AlbedoRaw3_g170692 = Out_AlbedoRaw4_g170694;
				float2 In_NormalTS3_g170692 = Out_NormalTS4_g170694;
				float3 In_NormalWS3_g170692 = Out_NormalWS4_g170694;
				float4 In_Shader3_g170692 = Out_Shader4_g170694;
				float4 In_Emissive3_g170692 = Out_Emissive4_g170694;
				float In_Grayscale3_g170692 = Out_Grayscale4_g170694;
				float In_Luminosity3_g170692 = Out_Luminosity4_g170694;
				float temp_output_836_11_g170691 = Out_MultiMask4_g170694;
				float In_MultiMask3_g170692 = temp_output_836_11_g170691;
				half Visual_AlphaClip667_g170691 = Out_AlphaClip4_g170694;
				half Input_True57_g170701 = Visual_AlphaClip667_g170691;
				half True36_g170701 = Input_True57_g170701;
				TVEGlobalData Data15_g170693 = Data204_g170214;
				float Out_Dummy15_g170693 = 0;
				float4 Out_CoatParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170693 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170693 = Data15_g170693.Dummy;
				Out_CoatParams15_g170693 = Data15_g170693.CoatParams;
				Out_PaintParams15_g170693 = Data15_g170693.PaintParams;
				Out_GlowParams15_g170693 = Data15_g170693.GlowParams;
				Out_AtmoParams15_g170693= Data15_g170693.AtmoParams;
				Out_FadeParams15_g170693= Data15_g170693.FadeParams;
				Out_FormParams15_g170693 = Data15_g170693.FormParams;
				Out_FlowParams15_g170693 = Data15_g170693.FlowParams;
				}
				half4 Global_FadeParams516_g170691 = Out_FadeParams15_g170693;
				float temp_output_6_0_g170704 = saturate( (Global_FadeParams516_g170691).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170704 = ( temp_output_6_0_g170704 + ( _CutoutElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170704 = temp_output_6_0_g170704;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170691 = staticSwitch14_g170704;
				#else
				float staticSwitch663_g170691 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170691 = lerp( 1.0 , ( staticSwitch663_g170691 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170691 = lerpResult843_g170691;
				float lerpResult811_g170691 = lerp( 1.0 , Visual_AlphaClip667_g170691 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170691 = lerpResult811_g170691;
				TVEModelData Data15_g170695 = Data16_g170201;
				float Out_Dummy15_g170695 = 0;
				float3 Out_PositionWS15_g170695 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170695 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170695 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170695 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170695 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170695 = float3( 0,0,0 );
				float4 Out_VertexData15_g170695 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170695 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170695 = Data15_g170695.Dummy;
				Out_PositionWS15_g170695 = Data15_g170695.PositionWS;
				Out_PositionWO15_g170695 = Data15_g170695.PositionWO;
				Out_PivotWS15_g170695 = Data15_g170695.PivotWS;
				Out_PivotWO15_g170695 = Data15_g170695.PivotWO;
				Out_NormalWS15_g170695 = Data15_g170695.NormalWS;
				Out_ViewDirWS15_g170695 = Data15_g170695.ViewDirWS;
				Out_VertexData15_g170695 = Data15_g170695.VertexData;
				Out_BoundsData15_g170695 = Data15_g170695.BoundsData;
				}
				half3 Model_PositionWO602_g170691 = Out_PositionWO15_g170695;
				float4 tex3DNode60_g170698 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170691 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170691 = lerp( 1.0 , tex3DNode60_g170698.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170691 = lerpResult673_g170691;
				half4 Model_VertexMasks752_g170691 = Out_VertexData15_g170695;
				float4 break755_g170691 = Model_VertexMasks752_g170691;
				float4 break33_g170696 = _cutout_vert_mode;
				float temp_output_30_0_g170696 = ( break755_g170691.x * break33_g170696.x );
				float temp_output_29_0_g170696 = ( break755_g170691.y * break33_g170696.y );
				float temp_output_31_0_g170696 = ( break755_g170691.z * break33_g170696.z );
				float temp_output_28_0_g170696 = ( temp_output_30_0_g170696 + temp_output_29_0_g170696 + temp_output_31_0_g170696 + ( break755_g170691.w * break33_g170696.w ) );
				float clampResult17_g170697 = clamp( temp_output_28_0_g170696 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170703 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170703 = ( clampResult17_g170697 - temp_output_7_0_g170703 );
				float lerpResult820_g170691 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170703 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170700 = lerpResult820_g170691;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170700 = ( temp_output_6_0_g170700 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170700 = temp_output_6_0_g170700;
				#endif
				float temp_output_801_0_g170691 = staticSwitch14_g170700;
				half Local_VertMask766_g170691 = temp_output_801_0_g170691;
				half Visual_MultiMask671_g170691 = temp_output_836_11_g170691;
				float lerpResult683_g170691 = lerp( 1.0 , Visual_MultiMask671_g170691 , _CutoutMultiValue);
				half Local_MultiMask685_g170691 = lerpResult683_g170691;
				float lerpResult728_g170691 = lerp( Visual_AlphaClip667_g170691 , min( Visual_AlphaClip667_g170691 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170691 ) - ( Local_AlphaMask814_g170691 * Local_NoiseMask678_g170691 * Local_VertMask766_g170691 ) ) ) ) , Local_MultiMask685_g170691);
				half Local_AlphaClip784_g170691 = lerpResult728_g170691;
				half Input_False58_g170701 = Local_AlphaClip784_g170691;
				half False36_g170701 = Input_False58_g170701;
				half localShadowPassCheck36_g170701 = ShadowPassCheck36_g170701( True36_g170701 , False36_g170701 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170691 = Local_AlphaClip784_g170691;
				#else
				float staticSwitch791_g170691 = localShadowPassCheck36_g170701;
				#endif
				float temp_output_6_0_g170702 = staticSwitch791_g170691;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170702 = ( temp_output_6_0_g170702 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170702 = temp_output_6_0_g170702;
				#endif
				float temp_output_798_0_g170691 = staticSwitch14_g170702;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170691 = temp_output_798_0_g170691;
				#else
				float staticSwitch577_g170691 = Visual_AlphaClip667_g170691;
				#endif
				half Final_AlphaClip795_g170691 = staticSwitch577_g170691;
				float In_AlphaClip3_g170692 = Final_AlphaClip795_g170691;
				float In_AlphaFade3_g170692 = Out_AlphaFade4_g170694;
				float3 In_Translucency3_g170692 = Out_Translucency4_g170694;
				float In_Transmission3_g170692 = Out_Transmission4_g170694;
				float In_Thickness3_g170692 = Out_Thickness4_g170694;
				float In_Diffusion3_g170692 = Out_Diffusion4_g170694;
				{
				Data3_g170692.Dummy = In_Dummy3_g170692;
				Data3_g170692.Albedo = In_Albedo3_g170692;
				Data3_g170692.AlbedoRaw = In_AlbedoRaw3_g170692;
				Data3_g170692.NormalTS = In_NormalTS3_g170692;
				Data3_g170692.NormalWS = In_NormalWS3_g170692;
				Data3_g170692.Shader = In_Shader3_g170692;
				Data3_g170692.Emissive= In_Emissive3_g170692;
				Data3_g170692.MultiMask = In_MultiMask3_g170692;
				Data3_g170692.Grayscale = In_Grayscale3_g170692;
				Data3_g170692.Luminosity = In_Luminosity3_g170692;
				Data3_g170692.AlphaClip = In_AlphaClip3_g170692;
				Data3_g170692.AlphaFade = In_AlphaFade3_g170692;
				Data3_g170692.Translucency = In_Translucency3_g170692;
				Data3_g170692.Transmission = In_Transmission3_g170692;
				Data3_g170692.Thickness = In_Thickness3_g170692;
				Data3_g170692.Diffusion = In_Diffusion3_g170692;
				}
				TVEVisualData Data4_g170708 = Data3_g170692;
				float Out_Dummy4_g170708 = 0;
				float3 Out_Albedo4_g170708 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170708 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170708 = float2( 0,0 );
				float3 Out_NormalWS4_g170708 = float3( 0,0,0 );
				float4 Out_Shader4_g170708 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170708 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170708 = 0;
				float Out_Grayscale4_g170708 = 0;
				float Out_Luminosity4_g170708 = 0;
				float Out_AlphaClip4_g170708 = 0;
				float Out_AlphaFade4_g170708 = 0;
				float3 Out_Translucency4_g170708 = float3( 0,0,0 );
				float Out_Transmission4_g170708 = 0;
				float Out_Thickness4_g170708 = 0;
				float Out_Diffusion4_g170708 = 0;
				{
				Out_Dummy4_g170708 = Data4_g170708.Dummy;
				Out_Albedo4_g170708 = Data4_g170708.Albedo;
				Out_AlbedoRaw4_g170708 = Data4_g170708.AlbedoRaw;
				Out_NormalTS4_g170708 = Data4_g170708.NormalTS;
				Out_NormalWS4_g170708 = Data4_g170708.NormalWS;
				Out_Shader4_g170708 = Data4_g170708.Shader;
				Out_Emissive4_g170708= Data4_g170708.Emissive;
				Out_MultiMask4_g170708 = Data4_g170708.MultiMask;
				Out_Grayscale4_g170708 = Data4_g170708.Grayscale;
				Out_Luminosity4_g170708= Data4_g170708.Luminosity;
				Out_AlphaClip4_g170708 = Data4_g170708.AlphaClip;
				Out_AlphaFade4_g170708 = Data4_g170708.AlphaFade;
				Out_Translucency4_g170708 = Data4_g170708.Translucency;
				Out_Transmission4_g170708 = Data4_g170708.Transmission;
				Out_Thickness4_g170708 = Data4_g170708.Thickness;
				Out_Diffusion4_g170708 = Data4_g170708.Diffusion;
				}
				float3 In_Albedo3_g170709 = Out_Albedo4_g170708;
				float3 In_AlbedoRaw3_g170709 = Out_AlbedoRaw4_g170708;
				float2 In_NormalTS3_g170709 = Out_NormalTS4_g170708;
				float3 In_NormalWS3_g170709 = Out_NormalWS4_g170708;
				float4 In_Shader3_g170709 = Out_Shader4_g170708;
				float4 In_Emissive3_g170709 = Out_Emissive4_g170708;
				float In_Grayscale3_g170709 = Out_Grayscale4_g170708;
				float In_Luminosity3_g170709 = Out_Luminosity4_g170708;
				float temp_output_821_11_g170706 = Out_MultiMask4_g170708;
				float In_MultiMask3_g170709 = temp_output_821_11_g170706;
				half Visual_AlphaClip754_g170706 = Out_AlphaClip4_g170708;
				half Input_True57_g170711 = Visual_AlphaClip754_g170706;
				half True36_g170711 = Input_True57_g170711;
				half Dither_Constant768_g170706 = _DitherConstantValue;
				float3 ase_positionWS = GetAbsolutePositionWS( PositionRWS );
				half Dither_BiasProximity881_g170706 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170706 = TVE_DitherParams.w;
				float lerpResult884_g170706 = lerp( 1.0 , Dither_BiasProximity881_g170706 , Dither_BiasEnabled883_g170706);
				float temp_output_7_0_g170717 = _DitherProximityMaxValue;
				float temp_output_9_0_g170717 = ( ( distance( ase_positionWS , _WorldSpaceCameraPos ) * lerpResult884_g170706 ) - temp_output_7_0_g170717 );
				half Dither_Proximity767_g170706 = ( saturate( ( ( temp_output_9_0_g170717 / ( _DitherProximityMinValue - temp_output_7_0_g170717 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170710 = Data16_g170201;
				float Out_Dummy15_g170710 = 0;
				float3 Out_PositionWS15_g170710 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170710 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170710 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170710 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170710 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170710 = float3( 0,0,0 );
				float4 Out_VertexData15_g170710 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170710 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170710 = Data15_g170710.Dummy;
				Out_PositionWS15_g170710 = Data15_g170710.PositionWS;
				Out_PositionWO15_g170710 = Data15_g170710.PositionWO;
				Out_PivotWS15_g170710 = Data15_g170710.PivotWS;
				Out_PivotWO15_g170710 = Data15_g170710.PivotWO;
				Out_NormalWS15_g170710 = Data15_g170710.NormalWS;
				Out_ViewDirWS15_g170710 = Data15_g170710.ViewDirWS;
				Out_VertexData15_g170710 = Data15_g170710.VertexData;
				Out_BoundsData15_g170710 = Data15_g170710.BoundsData;
				}
				half3 Model_PositionWS776_g170706 = Out_PositionWS15_g170710;
				half Dither_BiasDistance882_g170706 = TVE_DitherParams.z;
				float lerpResult888_g170706 = lerp( 1.0 , Dither_BiasDistance882_g170706 , Dither_BiasEnabled883_g170706);
				float temp_output_7_0_g170718 = _DitherDistanceMinValue;
				float temp_output_9_0_g170718 = ( ( distance( Model_PositionWS776_g170706 , _WorldSpaceCameraPos ) * lerpResult888_g170706 ) - temp_output_7_0_g170718 );
				half Dither_Distance856_g170706 = ( saturate( ( ( temp_output_9_0_g170718 / ( _DitherDistanceMaxValue - temp_output_7_0_g170718 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170706 = Out_ViewDirWS15_g170710;
				float3 normalizeResult792_g170706 = normalize( cross( ddy( ase_positionWS ) , ddx( ase_positionWS ) ) );
				float dotResult778_g170706 = dot( Model_ViewDirWS845_g170706 , normalizeResult792_g170706 );
				half Dither_Glancing784_g170706 = ( saturate( ( ( 1.0 - abs( dotResult778_g170706 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170706 = max( max( max( Dither_Constant768_g170706 , Dither_Proximity767_g170706 ) , Dither_Distance856_g170706 ) , Dither_Glancing784_g170706 );
				half3 Model_PositionWO602_g170706 = Out_PositionWO15_g170710;
				float4 tex3DNode60_g170713 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170706 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170706 = tex3DNode60_g170713.r;
				half Local_MaskNoise678_g170706 = temp_output_809_0_g170706;
				half Visual_MultiMask671_g170706 = temp_output_821_11_g170706;
				float lerpResult683_g170706 = lerp( 1.0 , Visual_MultiMask671_g170706 , _DitherMultiValue);
				half Local_MaskMulti685_g170706 = lerpResult683_g170706;
				half Custom_Mask826_g170706 = 1.0;
				float lerpResult728_g170706 = lerp( Visual_AlphaClip754_g170706 , min( Visual_AlphaClip754_g170706 , ( -0.001 - ( Dither_Value429_g170706 - Local_MaskNoise678_g170706 ) ) ) , ( Local_MaskMulti685_g170706 * Custom_Mask826_g170706 ));
				half Local_AlphaClip834_g170706 = lerpResult728_g170706;
				half Input_False58_g170711 = Local_AlphaClip834_g170706;
				half False36_g170711 = Input_False58_g170711;
				half localShadowPassCheck36_g170711 = ShadowPassCheck36_g170711( True36_g170711 , False36_g170711 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170706 = Local_AlphaClip834_g170706;
				#else
				float staticSwitch831_g170706 = localShadowPassCheck36_g170711;
				#endif
				float temp_output_6_0_g170712 = staticSwitch831_g170706;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170712 = ( temp_output_6_0_g170712 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170712 = temp_output_6_0_g170712;
				#endif
				float temp_output_840_0_g170706 = staticSwitch14_g170712;
				#ifdef TVE_DITHER
				float staticSwitch577_g170706 = temp_output_840_0_g170706;
				#else
				float staticSwitch577_g170706 = Visual_AlphaClip754_g170706;
				#endif
				half Final_AlphaClip493_g170706 = staticSwitch577_g170706;
				float In_AlphaClip3_g170709 = Final_AlphaClip493_g170706;
				float In_AlphaFade3_g170709 = Out_AlphaFade4_g170708;
				float3 In_Translucency3_g170709 = Out_Translucency4_g170708;
				float In_Transmission3_g170709 = Out_Transmission4_g170708;
				float In_Thickness3_g170709 = Out_Thickness4_g170708;
				float In_Diffusion3_g170709 = Out_Diffusion4_g170708;
				{
				Data3_g170709.Dummy = In_Dummy3_g170709;
				Data3_g170709.Albedo = In_Albedo3_g170709;
				Data3_g170709.AlbedoRaw = In_AlbedoRaw3_g170709;
				Data3_g170709.NormalTS = In_NormalTS3_g170709;
				Data3_g170709.NormalWS = In_NormalWS3_g170709;
				Data3_g170709.Shader = In_Shader3_g170709;
				Data3_g170709.Emissive= In_Emissive3_g170709;
				Data3_g170709.MultiMask = In_MultiMask3_g170709;
				Data3_g170709.Grayscale = In_Grayscale3_g170709;
				Data3_g170709.Luminosity = In_Luminosity3_g170709;
				Data3_g170709.AlphaClip = In_AlphaClip3_g170709;
				Data3_g170709.AlphaFade = In_AlphaFade3_g170709;
				Data3_g170709.Translucency = In_Translucency3_g170709;
				Data3_g170709.Transmission = In_Transmission3_g170709;
				Data3_g170709.Thickness = In_Thickness3_g170709;
				Data3_g170709.Diffusion = In_Diffusion3_g170709;
				}
				TVEVisualData Data4_g170731 = Data3_g170709;
				float Out_Dummy4_g170731 = 0;
				float3 Out_Albedo4_g170731 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170731 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170731 = float2( 0,0 );
				float3 Out_NormalWS4_g170731 = float3( 0,0,0 );
				float4 Out_Shader4_g170731 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170731 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170731 = 0;
				float Out_Grayscale4_g170731 = 0;
				float Out_Luminosity4_g170731 = 0;
				float Out_AlphaClip4_g170731 = 0;
				float Out_AlphaFade4_g170731 = 0;
				float3 Out_Translucency4_g170731 = float3( 0,0,0 );
				float Out_Transmission4_g170731 = 0;
				float Out_Thickness4_g170731 = 0;
				float Out_Diffusion4_g170731 = 0;
				{
				Out_Dummy4_g170731 = Data4_g170731.Dummy;
				Out_Albedo4_g170731 = Data4_g170731.Albedo;
				Out_AlbedoRaw4_g170731 = Data4_g170731.AlbedoRaw;
				Out_NormalTS4_g170731 = Data4_g170731.NormalTS;
				Out_NormalWS4_g170731 = Data4_g170731.NormalWS;
				Out_Shader4_g170731 = Data4_g170731.Shader;
				Out_Emissive4_g170731= Data4_g170731.Emissive;
				Out_MultiMask4_g170731 = Data4_g170731.MultiMask;
				Out_Grayscale4_g170731 = Data4_g170731.Grayscale;
				Out_Luminosity4_g170731= Data4_g170731.Luminosity;
				Out_AlphaClip4_g170731 = Data4_g170731.AlphaClip;
				Out_AlphaFade4_g170731 = Data4_g170731.AlphaFade;
				Out_Translucency4_g170731 = Data4_g170731.Translucency;
				Out_Transmission4_g170731 = Data4_g170731.Transmission;
				Out_Thickness4_g170731 = Data4_g170731.Thickness;
				Out_Diffusion4_g170731 = Data4_g170731.Diffusion;
				}
				float3 temp_output_297_0_g170727 = Out_Albedo4_g170731;
				float3 In_Albedo3_g170732 = temp_output_297_0_g170727;
				float3 temp_output_297_23_g170727 = Out_AlbedoRaw4_g170731;
				float3 In_AlbedoRaw3_g170732 = temp_output_297_23_g170727;
				float2 In_NormalTS3_g170732 = Out_NormalTS4_g170731;
				float3 In_NormalWS3_g170732 = Out_NormalWS4_g170731;
				float4 In_Shader3_g170732 = Out_Shader4_g170731;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170727 = Out_Emissive4_g170731;
				TVEModelData Data15_g170733 = Data16_g170201;
				float Out_Dummy15_g170733 = 0;
				float3 Out_PositionWS15_g170733 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170733 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170733 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170733 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170733 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170733 = float3( 0,0,0 );
				float4 Out_VertexData15_g170733 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170733 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170733 = Data15_g170733.Dummy;
				Out_PositionWS15_g170733 = Data15_g170733.PositionWS;
				Out_PositionWO15_g170733 = Data15_g170733.PositionWO;
				Out_PivotWS15_g170733 = Data15_g170733.PivotWS;
				Out_PivotWO15_g170733 = Data15_g170733.PivotWO;
				Out_NormalWS15_g170733 = Data15_g170733.NormalWS;
				Out_ViewDirWS15_g170733 = Data15_g170733.ViewDirWS;
				Out_VertexData15_g170733 = Data15_g170733.VertexData;
				Out_BoundsData15_g170733 = Data15_g170733.BoundsData;
				}
				half4 Model_VertexMasks216_g170727 = Out_VertexData15_g170733;
				float4 break251_g170727 = Model_VertexMasks216_g170727;
				float4 break33_g170738 = _emissive_vert_mode;
				float temp_output_30_0_g170738 = ( break251_g170727.x * break33_g170738.x );
				float temp_output_29_0_g170738 = ( break251_g170727.y * break33_g170738.y );
				float temp_output_31_0_g170738 = ( break251_g170727.z * break33_g170738.z );
				float temp_output_28_0_g170738 = ( temp_output_30_0_g170738 + temp_output_29_0_g170738 + temp_output_31_0_g170738 + ( break251_g170727.w * break33_g170738.w ) );
				float clampResult17_g170737 = clamp( temp_output_28_0_g170738 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170741 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170741 = ( clampResult17_g170737 - temp_output_7_0_g170741 );
				float lerpResult303_g170727 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170741 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170740 = lerpResult303_g170727;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170740 = ( temp_output_6_0_g170740 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170740 = temp_output_6_0_g170740;
				#endif
				half Emissive_MeshMask221_g170727 = staticSwitch14_g170740;
				TEXTURE2D(Texture276_g170729) = _EmissiveMaskTex;
				SamplerState Sampler276_g170729 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170730 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170730 = ( temp_output_6_0_g170730 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170730 = temp_output_6_0_g170730;
				#endif
				half4 Emissive_Coords167_g170727 = staticSwitch14_g170730;
				float4 temp_output_37_0_g170729 = Emissive_Coords167_g170727;
				half4 Coords276_g170729 = temp_output_37_0_g170729;
				half2 TexCoord276_g170729 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170729 = SampleMain( Texture276_g170729 , Sampler276_g170729 , Coords276_g170729 , TexCoord276_g170729 );
				TEXTURE2D(Texture275_g170729) = _EmissiveMaskTex;
				SamplerState Sampler275_g170729 = sampler_Linear_Repeat;
				half4 Coords275_g170729 = temp_output_37_0_g170729;
				half2 TexCoord275_g170729 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170729 = SampleExtra( Texture275_g170729 , Sampler275_g170729 , Coords275_g170729 , TexCoord275_g170729 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170727 = localSampleMain276_g170729;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170727 = localSampleExtra275_g170729;
				#else
				float4 staticSwitch176_g170727 = localSampleMain276_g170729;
				#endif
				half4 Emissive_MaskTex201_g170727 = staticSwitch176_g170727;
				float clampResult17_g170739 = clamp( (Emissive_MaskTex201_g170727).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170742 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170742 = ( clampResult17_g170739 - temp_output_7_0_g170742 );
				float lerpResult302_g170727 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170742 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170727 = lerpResult302_g170727;
				float temp_output_279_0_g170727 = ( Emissive_MeshMask221_g170727 * Emissive_Mask103_g170727 );
				float3 appendResult293_g170727 = (float3(temp_output_279_0_g170727 , temp_output_279_0_g170727 , temp_output_279_0_g170727));
				half3 Local_EmissiveColor278_g170727 = appendResult293_g170727;
				float3 temp_output_316_0_g170727 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170728 = Data204_g170214;
				float Out_Dummy15_g170728 = 0;
				float4 Out_CoatParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170728 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170728 = Data15_g170728.Dummy;
				Out_CoatParams15_g170728 = Data15_g170728.CoatParams;
				Out_PaintParams15_g170728 = Data15_g170728.PaintParams;
				Out_GlowParams15_g170728 = Data15_g170728.GlowParams;
				Out_AtmoParams15_g170728= Data15_g170728.AtmoParams;
				Out_FadeParams15_g170728= Data15_g170728.FadeParams;
				Out_FormParams15_g170728 = Data15_g170728.FormParams;
				Out_FlowParams15_g170728 = Data15_g170728.FlowParams;
				}
				half4 Global_GlowParams179_g170727 = Out_GlowParams15_g170728;
				float3 temp_output_6_0_g170735 = (Global_GlowParams179_g170727).xyz;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170735 = ( temp_output_6_0_g170735 + ( _EmissiveElementMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170735 = temp_output_6_0_g170735;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170727 = staticSwitch14_g170735;
				#else
				float3 staticSwitch228_g170727 = temp_output_316_0_g170727;
				#endif
				float3 lerpResult299_g170727 = lerp( float3( 1,1,1 ) , staticSwitch228_g170727 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170727 = lerpResult299_g170727;
				half3 Visual_AlbedoRaw306_g170727 = temp_output_297_23_g170727;
				float3 lerpResult307_g170727 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170727 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170727 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170727 * lerpResult307_g170727 );
				half3 Emissive_Blend260_g170727 = ( ( (Visual_Emissive255_g170727).xyz * Local_EmissiveColor278_g170727 ) * Local_EmissiveValue88_g170727 );
				float3 temp_output_3_0_g170734 = Emissive_Blend260_g170727;
				float temp_output_15_0_g170734 = _emissive_power_value;
				float3 hdEmission22_g170734 = ASEGetEmissionHDRColor(temp_output_3_0_g170734,temp_output_15_0_g170734,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170727 = temp_output_279_0_g170727;
				float4 appendResult295_g170727 = (float4(hdEmission22_g170734 , Local_EmissiveMask294_g170727));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170727 = appendResult295_g170727;
				#else
				float4 staticSwitch129_g170727 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170727 = staticSwitch129_g170727;
				float4 In_Emissive3_g170732 = Final_Emissive184_g170727;
				float In_Grayscale3_g170732 = Out_Grayscale4_g170731;
				float In_Luminosity3_g170732 = Out_Luminosity4_g170731;
				float temp_output_297_11_g170727 = Out_MultiMask4_g170731;
				float In_MultiMask3_g170732 = temp_output_297_11_g170727;
				float In_AlphaClip3_g170732 = Out_AlphaClip4_g170731;
				float In_AlphaFade3_g170732 = Out_AlphaFade4_g170731;
				float3 In_Translucency3_g170732 = Out_Translucency4_g170731;
				float In_Transmission3_g170732 = Out_Transmission4_g170731;
				float In_Thickness3_g170732 = Out_Thickness4_g170731;
				float In_Diffusion3_g170732 = Out_Diffusion4_g170731;
				{
				Data3_g170732.Dummy = In_Dummy3_g170732;
				Data3_g170732.Albedo = In_Albedo3_g170732;
				Data3_g170732.AlbedoRaw = In_AlbedoRaw3_g170732;
				Data3_g170732.NormalTS = In_NormalTS3_g170732;
				Data3_g170732.NormalWS = In_NormalWS3_g170732;
				Data3_g170732.Shader = In_Shader3_g170732;
				Data3_g170732.Emissive= In_Emissive3_g170732;
				Data3_g170732.MultiMask = In_MultiMask3_g170732;
				Data3_g170732.Grayscale = In_Grayscale3_g170732;
				Data3_g170732.Luminosity = In_Luminosity3_g170732;
				Data3_g170732.AlphaClip = In_AlphaClip3_g170732;
				Data3_g170732.AlphaFade = In_AlphaFade3_g170732;
				Data3_g170732.Translucency = In_Translucency3_g170732;
				Data3_g170732.Transmission = In_Transmission3_g170732;
				Data3_g170732.Thickness = In_Thickness3_g170732;
				Data3_g170732.Diffusion = In_Diffusion3_g170732;
				}
				TVEVisualData Data4_g170763 = Data3_g170732;
				float Out_Dummy4_g170763 = 0;
				float3 Out_Albedo4_g170763 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170763 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170763 = float2( 0,0 );
				float3 Out_NormalWS4_g170763 = float3( 0,0,0 );
				float4 Out_Shader4_g170763 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170763 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170763 = 0;
				float Out_Grayscale4_g170763 = 0;
				float Out_Luminosity4_g170763 = 0;
				float Out_AlphaClip4_g170763 = 0;
				float Out_AlphaFade4_g170763 = 0;
				float3 Out_Translucency4_g170763 = float3( 0,0,0 );
				float Out_Transmission4_g170763 = 0;
				float Out_Thickness4_g170763 = 0;
				float Out_Diffusion4_g170763 = 0;
				{
				Out_Dummy4_g170763 = Data4_g170763.Dummy;
				Out_Albedo4_g170763 = Data4_g170763.Albedo;
				Out_AlbedoRaw4_g170763 = Data4_g170763.AlbedoRaw;
				Out_NormalTS4_g170763 = Data4_g170763.NormalTS;
				Out_NormalWS4_g170763 = Data4_g170763.NormalWS;
				Out_Shader4_g170763 = Data4_g170763.Shader;
				Out_Emissive4_g170763= Data4_g170763.Emissive;
				Out_MultiMask4_g170763 = Data4_g170763.MultiMask;
				Out_Grayscale4_g170763 = Data4_g170763.Grayscale;
				Out_Luminosity4_g170763= Data4_g170763.Luminosity;
				Out_AlphaClip4_g170763 = Data4_g170763.AlphaClip;
				Out_AlphaFade4_g170763 = Data4_g170763.AlphaFade;
				Out_Translucency4_g170763 = Data4_g170763.Translucency;
				Out_Transmission4_g170763 = Data4_g170763.Transmission;
				Out_Thickness4_g170763 = Data4_g170763.Thickness;
				Out_Diffusion4_g170763 = Data4_g170763.Diffusion;
				}
				half3 Visual_Albedo199_g170762 = Out_Albedo4_g170763;
				half3 Final_Albedo312_g170762 = Visual_Albedo199_g170762;
				float3 In_Albedo3_g170764 = Final_Albedo312_g170762;
				float3 In_AlbedoRaw3_g170764 = Out_AlbedoRaw4_g170763;
				float2 In_NormalTS3_g170764 = Out_NormalTS4_g170763;
				float3 In_NormalWS3_g170764 = Out_NormalWS4_g170763;
				float4 In_Shader3_g170764 = Out_Shader4_g170763;
				float4 In_Emissive3_g170764 = Out_Emissive4_g170763;
				float In_Grayscale3_g170764 = Out_Grayscale4_g170763;
				float In_Luminosity3_g170764 = Out_Luminosity4_g170763;
				float temp_output_301_11_g170762 = Out_MultiMask4_g170763;
				float In_MultiMask3_g170764 = temp_output_301_11_g170762;
				float In_AlphaClip3_g170764 = Out_AlphaClip4_g170763;
				float In_AlphaFade3_g170764 = Out_AlphaFade4_g170763;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g170762 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170762 );
				half Visual_Transmission138_g170762 = Out_Transmission4_g170763;
				half Subsurface_Value268_g170762 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170765 = Data204_g170214;
				float Out_Dummy15_g170765 = 0;
				float4 Out_CoatParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170765 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170765 = Data15_g170765.Dummy;
				Out_CoatParams15_g170765 = Data15_g170765.CoatParams;
				Out_PaintParams15_g170765 = Data15_g170765.PaintParams;
				Out_GlowParams15_g170765 = Data15_g170765.GlowParams;
				Out_AtmoParams15_g170765= Data15_g170765.AtmoParams;
				Out_FadeParams15_g170765= Data15_g170765.FadeParams;
				Out_FormParams15_g170765 = Data15_g170765.FormParams;
				Out_FlowParams15_g170765 = Data15_g170765.FlowParams;
				}
				half4 Global_GlowParams373_g170762 = Out_GlowParams15_g170765;
				float temp_output_6_0_g170768 = saturate( (Global_GlowParams373_g170762).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170768 = ( temp_output_6_0_g170768 + ( _SubsurfaceElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170768 = temp_output_6_0_g170768;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170762 = staticSwitch14_g170768;
				#else
				float staticSwitch367_g170762 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g170762 = lerp( 1.0 , staticSwitch367_g170762 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170762 = lerpResult403_g170762;
				half Visual_MultiMask292_g170762 = temp_output_301_11_g170762;
				float lerpResult293_g170762 = lerp( 1.0 , Visual_MultiMask292_g170762 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170762 = lerpResult293_g170762;
				half Custom_Mask363_g170762 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170762 = ( Visual_Transmission138_g170762 * Subsurface_Value268_g170762 * Subsurface_GlobalMask369_g170762 * Subsurface_MultiMask296_g170762 * Custom_Mask363_g170762 );
				#else
				float staticSwitch345_g170762 = 0.0;
				#endif
				half Final_Transmission269_g170762 = staticSwitch345_g170762;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170762 = ( Subsurface_Color264_g170762 * Final_Transmission269_g170762 * 10.0 );
				#else
				float3 staticSwitch348_g170762 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g170762 = staticSwitch348_g170762;
				float3 In_Translucency3_g170764 = Final_Translucency254_g170762;
				float In_Transmission3_g170764 = Final_Transmission269_g170762;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170762 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170762 = 1.0;
				#endif
				half Final_Thickness275_g170762 = staticSwitch351_g170762;
				float In_Thickness3_g170764 = Final_Thickness275_g170762;
				float Final_Diffusion340_g170762 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170764 = Final_Diffusion340_g170762;
				{
				Data3_g170764.Dummy = In_Dummy3_g170764;
				Data3_g170764.Albedo = In_Albedo3_g170764;
				Data3_g170764.AlbedoRaw = In_AlbedoRaw3_g170764;
				Data3_g170764.NormalTS = In_NormalTS3_g170764;
				Data3_g170764.NormalWS = In_NormalWS3_g170764;
				Data3_g170764.Shader = In_Shader3_g170764;
				Data3_g170764.Emissive= In_Emissive3_g170764;
				Data3_g170764.MultiMask = In_MultiMask3_g170764;
				Data3_g170764.Grayscale = In_Grayscale3_g170764;
				Data3_g170764.Luminosity = In_Luminosity3_g170764;
				Data3_g170764.AlphaClip = In_AlphaClip3_g170764;
				Data3_g170764.AlphaFade = In_AlphaFade3_g170764;
				Data3_g170764.Translucency = In_Translucency3_g170764;
				Data3_g170764.Transmission = In_Transmission3_g170764;
				Data3_g170764.Thickness = In_Thickness3_g170764;
				Data3_g170764.Diffusion = In_Diffusion3_g170764;
				}
				TVEVisualData Data4_g170777 = Data3_g170764;
				float Out_Dummy4_g170777 = 0;
				float3 Out_Albedo4_g170777 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170777 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170777 = float2( 0,0 );
				float3 Out_NormalWS4_g170777 = float3( 0,0,0 );
				float4 Out_Shader4_g170777 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170777 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170777 = 0;
				float Out_Grayscale4_g170777 = 0;
				float Out_Luminosity4_g170777 = 0;
				float Out_AlphaClip4_g170777 = 0;
				float Out_AlphaFade4_g170777 = 0;
				float3 Out_Translucency4_g170777 = float3( 0,0,0 );
				float Out_Transmission4_g170777 = 0;
				float Out_Thickness4_g170777 = 0;
				float Out_Diffusion4_g170777 = 0;
				{
				Out_Dummy4_g170777 = Data4_g170777.Dummy;
				Out_Albedo4_g170777 = Data4_g170777.Albedo;
				Out_AlbedoRaw4_g170777 = Data4_g170777.AlbedoRaw;
				Out_NormalTS4_g170777 = Data4_g170777.NormalTS;
				Out_NormalWS4_g170777 = Data4_g170777.NormalWS;
				Out_Shader4_g170777 = Data4_g170777.Shader;
				Out_Emissive4_g170777= Data4_g170777.Emissive;
				Out_MultiMask4_g170777 = Data4_g170777.MultiMask;
				Out_Grayscale4_g170777 = Data4_g170777.Grayscale;
				Out_Luminosity4_g170777= Data4_g170777.Luminosity;
				Out_AlphaClip4_g170777 = Data4_g170777.AlphaClip;
				Out_AlphaFade4_g170777 = Data4_g170777.AlphaFade;
				Out_Translucency4_g170777 = Data4_g170777.Translucency;
				Out_Transmission4_g170777 = Data4_g170777.Transmission;
				Out_Thickness4_g170777 = Data4_g170777.Thickness;
				Out_Diffusion4_g170777 = Data4_g170777.Diffusion;
				}
				float temp_output_3_0_g170784 = Out_AlphaClip4_g170777;
				float Alpha21_g170784 = temp_output_3_0_g170784;
				float temp_output_15_0_g170784 = 0.0;
				float Treshold21_g170784 = temp_output_15_0_g170784;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170784 - Treshold21_g170784);
				#endif
				#endif
				}
				
				surfaceDescription.Alpha = saturate( ( Alpha21_g170784 * Out_AlphaFade4_g170777 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				#endif

				outColor = float4( _ObjectId, _PassValue, 1.0, 1.0 );
			}
			ENDHLSL
		}

		
		Pass
		{
			
			Name "DepthOnly"
			Tags { "LightMode"="DepthOnly" }

			Cull [_CullMode]
			ZWrite On

			Stencil
			{
				Ref [_StencilRefDepth]
				WriteMask [_StencilWriteMaskDepth]
				Comp Always
				Pass Replace
			}


			HLSLPROGRAM
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19702
			#define ASE_SRP_VERSION 170003
			#if !defined(ASE_NEED_CULLFACE)
			#define ASE_NEED_CULLFACE 1
			#endif //ASE_NEED_CULLFACE
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile _ WRITE_NORMAL_BUFFER
            #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
            #pragma multi_compile_fragment _ WRITE_DECAL_BUFFER WRITE_RENDERING_LAYER

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_DEPTH_ONLY

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _SecondProjRemap;
			half4 _DrynessLumaRemap;
			float4 _DrynessColor;
			half4 _wetness_water_vert_mode;
			half4 _WetnessWaterMeshRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			half4 _WetnessWaterBlendRemap;
			half4 _TintingBlendRemap;
			half4 _TintingMeshRemap;
			half4 _tinting_vert_mode;
			half4 _object_phase_mode;
			half4 _TintingLumaRemap;
			float4 _TintingColor;
			half4 _wetness_drops_vert_mode;
			half4 _WetnessDropsMeshRemap;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _GradientMeshRemap;
			half4 _WetnessMeshRemap;
			half4 _wetness_vert_mode;
			half4 _MotionBaseMaskRemap;
			half4 _motion_base_proc_mode;
			half4 _motion_tiny_vert_mode;
			half4 _OverlayProjRemap;
			half4 _motion_tiny_proc_mode;
			half4 _MotionSmallMaskRemap;
			half4 _OverlayLumaRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _overlay_coord_value;
			half4 _overlay_vert_mode;
			half4 _OverlayCoordValue;
			half4 _OverlayMeshRemap;
			half4 _OverlayColor;
			half4 _MotionHighlightColor;
			half4 _OverlayBlendRemap;
			half4 _second_vert_mode;
			half4 _DrynessBlendRemap;
			half4 _DrynessMeshRemap;
			half4 _WetnessWaterColor;
			half4 _dryness_vert_mode;
			half4 _motion_base_vert_mode;
			half4 _MotionTinyMaskRemap;
			half4 _GradientColorOne;
			half4 _gradient_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _emissive_coord_value;
			half4 _MainColor;
			half4 _ThirdColorTwo;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _third_coord_value;
			half4 _MainMultiRemap;
			half4 _EmissiveColor;
			half4 _second_coord_value;
			half4 _MainColorTwo;
			half4 _Color;
			half4 _SecondColor;
			half4 _SecondBlendRemap;
			half4 _SecondMultiRemap;
			half4 _SubsurfaceColor;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _SecondMeshRemap;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _SecondLumaRemap;
			half4 _SecondColorTwo;
			half4 _GradientColorTwo;
			half4 _ThirdColor;
			half4 _emissive_vert_mode;
			half4 _occlusion_vert_mode;
			half4 _cutout_vert_mode;
			half4 _CutoutMeshRemap;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _ThirdProjRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdMeshRemap;
			half4 _ThirdMaskCoordValue;
			half4 _third_vert_mode;
			half4 _ThirdLumaRemap;
			half4 _ThirdMaskRemap;
			half4 _SecondCoordValue;
			half4 _third_mask_coord_value;
			half4 _SecondMaskCoordValue;
			half4 _ThirdMultiRemap;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _EmissiveMeshRemap;
			half4 _OverlayGlitterColor;
			half3 _motion_highlight_color;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half _OverlayGlitterIntensityValue;
			half _ThirdBlendAlbedoValue;
			half _DitherGlancingValue;
			half _ThirdIntensityValue;
			half _DitherGlancingAngleValue;
			half _DitherDistanceValue;
			half _DitherDistanceMaxValue;
			half _ThirdMaskValue;
			half _DitherDistanceMinValue;
			half _ThirdLumaValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _DitherProximityMaxValue;
			half _ThirdMeshValue;
			half _DitherConstantValue;
			half _ThirdMeshMode;
			half _CutoutShadowMode;
			half _ThirdProjValue;
			half _ThirdElementMode;
			half _ThirdGlobalValue;
			half _CutoutMultiValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _ThirdNormalValue;
			half _ThirdBlendShaderValue;
			half _ThirdAlphaClipValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _ThirdColorMode;
			half _DitherNoiseTillingValue;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SubsurfaceElementMode;
			half _SubsurfaceIntensityValue;
			half _SecondMeshValue;
			half _SecondMeshMode;
			half _SecondElementMode;
			half _EmissiveExposureValue;
			half _SecondGlobalValue;
			float _emissive_power_value;
			half _SecondBlendIntensityValue;
			half _EmissiveColorMode;
			half _EmissiveGlobalValue;
			half _CutoutNoiseValue;
			half _SecondBlendNormalValue;
			half _SecondNormalValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _ThirdAlbedoValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _ThirdMetallicValue;
			half _DitherMultiValue;
			half _EmissiveElementMode;
			half _CutoutNoiseTillingValue;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _WetnessWaterMeshValue;
			half _WetnessMeshMode;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _WetnessMeshValue;
			half _WetnessGlobalValue;
			half _DrynessLumaValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _OverlaySubsurfaceValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _DrynessGrayValue;
			half _OverlaySmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _OverlayGlobalValue;
			half _MotionHighlightValue;
			half _OverlayElementMode;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _OverlayIntensityValue;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _OverlayGlitterDistValue;
			half _OverlayTextureMode;
			half _OverlayNormalValue;
			half _OverlayGlitterTillingValue;
			half _DrynessGlobalValue;
			half _WetnessWaterBaseValue;
			half _CutoutAlphaValue;
			half _CutoutGlobalValue;
			half _CutoutElementMode;
			half _CutoutIntensityValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _WetnessSmoothnessValue;
			half _WetnessDropsMeshMode;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _WetnessDropsMeshValue;
			half _VariationIntensityValue;
			half _WetnessWaterMeshMode;
			half _VariationMultiValue;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _WetnessDropsDistValue;
			half _TintingIntensityValue;
			half _TintingMultiValue;
			half _WetnessDropsNormalValue;
			half _TintingLumaValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsTillingValue;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _WetnessContrastValue;
			half _DrynessElementMode;
			half _TintingElementMode;
			half _DrynessSmoothnessValue;
			half _SecondAlbedoValue;
			half _SecondLumaValue;
			half _GlobalGlowLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalPivotInfo;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _GlobalGlowPivotValue;
			half _SizeFadeDistMinValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _SizeFadeDistMaxValue;
			half _ObjectCategory;
			half _GlobalAtmoLayerValue;
			half _GlobalFadeLayerValue;
			half _MotionSmallPushValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionSmallMaskMode;
			half _GlobalAtmoPivotValue;
			half _motion_small_mask_mode;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _SizeFadeGlobalValue;
			half _SizeFadeElementMode;
			half _GlobalFlowPivotValue;
			half _GlobalFlowLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _MotionSmallIntensityValue;
			half _MotionTinyIntensityValue;
			half _PerspectiveEnd;
			half _SizeFadeEnd;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _RenderSSR;
			half _IsVersion;
			half _RenderZWrite;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _Cutoff;
			half _PerspectiveCategory;
			half _RenderPriority;
			half _RenderMotion;
			half _SizeFadeCategory;
			half _MotionPushInfo;
			half _MotionElementMode;
			half _MotionWindEnd;
			half _MotionCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _IsSubsurfaceShader;
			half _RenderQueue;
			half _IsGeneralShader;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _HasDefaultTextures;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _RenderShadow;
			half _RenderClip;
			half _RenderFilter;
			half _SecondProjValue;
			half _MotionDistValue;
			half _MotionTinyMaskMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _DetailEnd;
			half _SecondCoordMode;
			half _DetailCategory;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _OcclusionBakeMode;
			half _TintingEnd;
			half _SecondMaskSampleMode;
			half _SecondBakeMode;
			half _SecondMaskValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SubsurfaceThicknessValue;
			half _MainAlphaClipValue;
			half _SecondMaskCoordMode;
			half _MainNormalValue;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainCategory;
			half _MainColorMode;
			half _motion_tiny_mask_mode;
			half _TintingCategory;
			half _DrynessSpace;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseMaskMode;
			half _SubsurfaceEnd;
			half _motion_base_mask_mode;
			half _motion_small_mode;
			half _MotionBasePushValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionTinyNoiseValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionBaseIntensityValue;
			half _DrynessBakeMode;
			half _SubsurfaceDirectValue;
			half _SubsurfaceAmbientValue;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _SubsurfaceNormalValue;
			half _CutoutBakeMode;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceShadowValue;
			half _CutoutEnd;
			half _SubsurfaceAngleValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_SizeFadeParams;
			half4 TVE_FormParams;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			float TVE_FlowLayers[10];
			TEXTURE2D_ARRAY(TVE_FlowBaseTex);
			TEXTURE2D_ARRAY(TVE_FlowNearTex);
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			half4 TVE_AtmoData;
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			half4 TVE_DitherParams;
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_RELATIVE_WORLD_POS
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 FlowParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float4 clipPosV : TEXCOORD0;
				float3 positionRWS : TEXCOORD1;
				float3 normalWS : TEXCOORD2;
				float4 tangentWS : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_color : COLOR;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half ShadowPassCheck36_g170701( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170711( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SmoothSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
				    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
				    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;

                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

                #if defined(DEBUG_DISPLAY)
				    #if !defined(SHADER_STAGE_RAY_TRACING)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   #ifdef FRAG_INPUTS_USE_TEXCOORD0
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                       #else
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                       #endif
					   surfaceData.metallic = 0;
				    }
					#endif
                     ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                #endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SmoothSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalPrepassBuffer.hlsl"
			#endif

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS output;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				TVEModelData Data16_g170761 = (TVEModelData)0;
				float In_Dummy16_g170761 = 0.0;
				TVEModelData Data16_g170745 = (TVEModelData)0;
				half Dummy1575_g170743 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170745 = Dummy1575_g170743;
				TVEModelData Data16_g170721 = (TVEModelData)0;
				float In_Dummy16_g170721 = 0.0;
				TVEModelData Data16_g170491 = (TVEModelData)0;
				half Dummy181_g170474 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170491 = Dummy181_g170474;
				TVEModelData Data16_g170433 = (TVEModelData)0;
				half Dummy181_g170431 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170433 = Dummy181_g170431;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170200 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170200 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170200 = PositionOS131_g170196;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_positionWS;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170200 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170206 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170206 = ( localObjectPosition_UNITY_MATRIX_M14_g170206 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170206 = localObjectPosition_UNITY_MATRIX_M14_g170206;
				#endif
				float3 temp_output_340_7_g170196 = staticSwitch13_g170206;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170208 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170204 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170204;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170208 = PivotOS149_g170196;
				float3 PivotsOnlyWS105_g170208 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170208 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170208 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170208 = ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 );
				#endif
				float3 temp_output_341_7_g170196 = staticSwitch13_g170208;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170200 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170200 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170200 = float3( 0,0,0 );
				float3 In_PivotOS16_g170200 = PivotOS149_g170196;
				float3 In_PivotWS16_g170200 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170200 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170200 = NormalOS134_g170196;
				float3 ase_normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170200 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170200 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170200 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170200 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170200 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170200 = VertexMasks171_g170196;
				float mulTime113_g170203 = _TimeParameters.x * 0.52;
				float lerpResult128_g170203 = lerp( mulTime113_g170203 , ( ( mulTime113_g170203 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170196 = PivotWO133_g170196;
				half Pivot_Position322_g170196 = ( break319_g170196.x + break319_g170196.z );
				float mulTime113_g170202 = _TimeParameters.x * 0.27;
				float lerpResult128_g170202 = lerp( mulTime113_g170202 , ( ( mulTime113_g170202 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170205 = _object_phase_mode;
				float temp_output_30_0_g170205 = ( inputMesh.ase_color.r * break33_g170205.x );
				float temp_output_29_0_g170205 = ( inputMesh.ase_color.g * break33_g170205.y );
				float temp_output_31_0_g170205 = ( inputMesh.ase_color.b * break33_g170205.z );
				float temp_output_28_0_g170205 = ( temp_output_30_0_g170205 + temp_output_29_0_g170205 + temp_output_31_0_g170205 + ( inputMesh.ase_color.a * break33_g170205.w ) );
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170205 + Pivot_Position322_g170196 ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(sin( ( lerpResult128_g170203 + Pivot_Position322_g170196 ) ) , sin( ( lerpResult128_g170202 + Pivot_Position322_g170196 ) ) , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_PhaseData16_g170200 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170200 = BoundsData254_g170196;
				float4 In_RotationData16_g170200 = float4( 0,0,0,0 );
				{
				Data16_g170200.Dummy = In_Dummy16_g170200;
				Data16_g170200.PositionOS = In_PositionOS16_g170200;
				Data16_g170200.PositionWS = In_PositionWS16_g170200;
				Data16_g170200.PositionWO = In_PositionWO16_g170200;
				Data16_g170200.PositionRawOS = In_PositionRawOS16_g170200;
				Data16_g170200.PositionAddOS = In_PositionAddOS16_g170200;
				Data16_g170200.PivotOS = In_PivotOS16_g170200;
				Data16_g170200.PivotWS = In_PivotWS16_g170200;
				Data16_g170200.PivotWO = In_PivotWO16_g170200;
				Data16_g170200.NormalOS = In_NormalOS16_g170200;
				Data16_g170200.NormalWS = In_NormalWS16_g170200;
				Data16_g170200.NormalRawOS = In_NormalRawOS16_g170200;
				Data16_g170200.NormalRawWS = In_NormalRawWS16_g170200;
				Data16_g170200.TangentOS = In_TangentOS16_g170200;
				Data16_g170200.ViewDirWS = In_ViewDirWS16_g170200;
				Data16_g170200.VertexData = In_VertexData16_g170200;
				Data16_g170200.PhaseData = In_PhaseData16_g170200;
				Data16_g170200.BoundsData = In_BoundsData16_g170200;
				Data16_g170200.RotationData = In_RotationData16_g170200;
				}
				TVEModelData Data15_g170371 = Data16_g170200;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_PhaseData15_g170371 = Data15_g170371.PhaseData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_PhaseData16_g170370 = Out_PhaseData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.PhaseData = In_PhaseData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_PhaseData15_g170391 = Data15_g170391.PhaseData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_viewDirSafeWS , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_viewDirSafeWS , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_PhaseData16_g170393 = Out_PhaseData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				{
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.PhaseData = In_PhaseData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				}
				TVEModelData Data15_g170432 = Data16_g170393;
				float Out_Dummy15_g170432 = 0;
				float3 Out_PositionOS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170432 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170432 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170432 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170432 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170432 = float3( 0,0,0 );
				float4 Out_VertexData15_g170432 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170432 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170432 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170432 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_PositionOS15_g170432 = Data15_g170432.PositionOS;
				Out_PositionWS15_g170432 = Data15_g170432.PositionWS;
				Out_PositionWO15_g170432 = Data15_g170432.PositionWO;
				Out_PositionRawOS15_g170432 = Data15_g170432.PositionRawOS;
				Out_PositionAddOS15_g170432 = Data15_g170432.PositionAddOS;
				Out_PivotOS15_g170432 = Data15_g170432.PivotOS;
				Out_PivotWS15_g170432 = Data15_g170432.PivotWS;
				Out_PivotWO15_g170432 = Data15_g170432.PivotWO;
				Out_NormalOS15_g170432 = Data15_g170432.NormalOS;
				Out_NormalWS15_g170432 = Data15_g170432.NormalWS;
				Out_NormalRawOS15_g170432 = Data15_g170432.NormalRawOS;
				Out_NormalRawWS15_g170432 = Data15_g170432.NormalRawWS;
				Out_TangentOS15_g170432 = Data15_g170432.TangentOS;
				Out_ViewDirWS15_g170432 = Data15_g170432.ViewDirWS;
				Out_VertexData15_g170432 = Data15_g170432.VertexData;
				Out_PhaseData15_g170432 = Data15_g170432.PhaseData;
				Out_BoundsData15_g170432 = Data15_g170432.BoundsData;
				Out_RotationData15_g170432 = Data15_g170432.RotationData;
				}
				half3 Model_PositionOS147_g170431 = Out_PositionOS15_g170432;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170431 = Out_PivotWO15_g170432;
				half3 Model_PivotWO162_g170431 = temp_output_210_19_g170431;
				float lerpResult216_g170431 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170435 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170435 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170431 ) * lerpResult216_g170431 ) - temp_output_7_0_g170435 );
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatParams204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintParams204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowParams204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoParams204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeParams204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormParams204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowParams204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatParams = In_CoatParams204_g170214;
				Data204_g170214.PaintParams = In_PaintParams204_g170214;
				Data204_g170214.GlowParams = In_GlowParams204_g170214;
				Data204_g170214.AtmoParams = In_AtmoParams204_g170214;
				Data204_g170214.FadeParams = In_FadeParams204_g170214;
				Data204_g170214.FormParams= In_FormParams204_g170214;
				Data204_g170214.FlowParams = In_FlowParams204_g170214;
				}
				TVEGlobalData Data15_g170434 = Data204_g170214;
				float Out_Dummy15_g170434 = 0;
				float4 Out_CoatParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170434 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170434 = Data15_g170434.Dummy;
				Out_CoatParams15_g170434 = Data15_g170434.CoatParams;
				Out_PaintParams15_g170434 = Data15_g170434.PaintParams;
				Out_GlowParams15_g170434 = Data15_g170434.GlowParams;
				Out_AtmoParams15_g170434= Data15_g170434.AtmoParams;
				Out_FadeParams15_g170434= Data15_g170434.FadeParams;
				Out_FormParams15_g170434 = Data15_g170434.FormParams;
				Out_FlowParams15_g170434 = Data15_g170434.FlowParams;
				}
				half4 Input_FormParams188_g170431 = Out_FormParams15_g170434;
				float temp_output_6_0_g170436 = saturate( (Input_FormParams188_g170431).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170436 = ( temp_output_6_0_g170436 + ( _SizeFadeElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170436 = temp_output_6_0_g170436;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170431 = staticSwitch14_g170436;
				#else
				float staticSwitch194_g170431 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170431 = lerp( 1.0 , staticSwitch194_g170431 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170431 = lerpResult213_g170431;
				float temp_output_189_0_g170431 = ( saturate( ( ( temp_output_9_0_g170435 / ( _SizeFadeDistMinValue - temp_output_7_0_g170435 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170431 );
				float3 appendResult200_g170431 = (float3(temp_output_189_0_g170431 , temp_output_189_0_g170431 , temp_output_189_0_g170431));
				float3 appendResult201_g170431 = (float3(1.0 , temp_output_189_0_g170431 , 1.0));
				float3 lerpResult202_g170431 = lerp( appendResult200_g170431 , appendResult201_g170431 , _SizeFadeScaleMode);
				float3 lerpResult184_g170431 = lerp( temp_cast_5 , lerpResult202_g170431 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170431 = ( lerpResult184_g170431 * Model_PositionOS147_g170431 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170431 = temp_output_167_0_g170431;
				#else
				float3 staticSwitch199_g170431 = Model_PositionOS147_g170431;
				#endif
				half3 Final_Position178_g170431 = staticSwitch199_g170431;
				float3 In_PositionOS16_g170433 = Final_Position178_g170431;
				float3 In_PositionWS16_g170433 = Out_PositionWS15_g170432;
				float3 In_PositionWO16_g170433 = Out_PositionWO15_g170432;
				float3 In_PositionRawOS16_g170433 = Out_PositionRawOS15_g170432;
				float3 In_PositionAddOS16_g170433 = Out_PositionAddOS15_g170432;
				float3 temp_output_210_24_g170431 = Out_PivotOS15_g170432;
				float3 In_PivotOS16_g170433 = temp_output_210_24_g170431;
				float3 In_PivotWS16_g170433 = Out_PivotWS15_g170432;
				float3 In_PivotWO16_g170433 = temp_output_210_19_g170431;
				float3 In_NormalOS16_g170433 = Out_NormalOS15_g170432;
				float3 In_NormalWS16_g170433 = Out_NormalWS15_g170432;
				float3 In_NormalRawOS16_g170433 = Out_NormalRawOS15_g170432;
				float3 In_NormalRawWS16_g170433 = Out_NormalRawWS15_g170432;
				float4 In_TangentOS16_g170433 = Out_TangentOS15_g170432;
				float3 In_ViewDirWS16_g170433 = Out_ViewDirWS15_g170432;
				float4 In_VertexData16_g170433 = Out_VertexData15_g170432;
				float4 In_PhaseData16_g170433 = Out_PhaseData15_g170432;
				float4 In_BoundsData16_g170433 = Out_BoundsData15_g170432;
				float4 In_RotationData16_g170433 = Out_RotationData15_g170432;
				{
				Data16_g170433.Dummy = In_Dummy16_g170433;
				Data16_g170433.PositionOS = In_PositionOS16_g170433;
				Data16_g170433.PositionWS = In_PositionWS16_g170433;
				Data16_g170433.PositionWO = In_PositionWO16_g170433;
				Data16_g170433.PositionRawOS = In_PositionRawOS16_g170433;
				Data16_g170433.PositionAddOS = In_PositionAddOS16_g170433;
				Data16_g170433.PivotOS = In_PivotOS16_g170433;
				Data16_g170433.PivotWS = In_PivotWS16_g170433;
				Data16_g170433.PivotWO = In_PivotWO16_g170433;
				Data16_g170433.NormalOS = In_NormalOS16_g170433;
				Data16_g170433.NormalWS = In_NormalWS16_g170433;
				Data16_g170433.NormalRawOS = In_NormalRawOS16_g170433;
				Data16_g170433.NormalRawWS = In_NormalRawWS16_g170433;
				Data16_g170433.TangentOS = In_TangentOS16_g170433;
				Data16_g170433.ViewDirWS = In_ViewDirWS16_g170433;
				Data16_g170433.VertexData = In_VertexData16_g170433;
				Data16_g170433.PhaseData = In_PhaseData16_g170433;
				Data16_g170433.BoundsData = In_BoundsData16_g170433;
				Data16_g170433.RotationData = In_RotationData16_g170433;
				}
				TVEModelData Data15_g170490 = Data16_g170433;
				float Out_Dummy15_g170490 = 0;
				float3 Out_PositionOS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170490 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170490 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170490 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170490 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170490 = float3( 0,0,0 );
				float4 Out_VertexData15_g170490 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170490 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170490 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170490 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170490 = Data15_g170490.Dummy;
				Out_PositionOS15_g170490 = Data15_g170490.PositionOS;
				Out_PositionWS15_g170490 = Data15_g170490.PositionWS;
				Out_PositionWO15_g170490 = Data15_g170490.PositionWO;
				Out_PositionRawOS15_g170490 = Data15_g170490.PositionRawOS;
				Out_PositionAddOS15_g170490 = Data15_g170490.PositionAddOS;
				Out_PivotOS15_g170490 = Data15_g170490.PivotOS;
				Out_PivotWS15_g170490 = Data15_g170490.PivotWS;
				Out_PivotWO15_g170490 = Data15_g170490.PivotWO;
				Out_NormalOS15_g170490 = Data15_g170490.NormalOS;
				Out_NormalWS15_g170490 = Data15_g170490.NormalWS;
				Out_NormalRawOS15_g170490 = Data15_g170490.NormalRawOS;
				Out_NormalRawWS15_g170490 = Data15_g170490.NormalRawWS;
				Out_TangentOS15_g170490 = Data15_g170490.TangentOS;
				Out_ViewDirWS15_g170490 = Data15_g170490.ViewDirWS;
				Out_VertexData15_g170490 = Data15_g170490.VertexData;
				Out_PhaseData15_g170490 = Data15_g170490.PhaseData;
				Out_BoundsData15_g170490 = Data15_g170490.BoundsData;
				Out_RotationData15_g170490 = Data15_g170490.RotationData;
				}
				float3 temp_output_2503_0_g170474 = Out_PositionOS15_g170490;
				float3 In_PositionOS16_g170491 = temp_output_2503_0_g170474;
				float3 temp_output_2503_16_g170474 = Out_PositionWS15_g170490;
				float3 In_PositionWS16_g170491 = temp_output_2503_16_g170474;
				float3 temp_output_2503_17_g170474 = Out_PositionWO15_g170490;
				float3 In_PositionWO16_g170491 = temp_output_2503_17_g170474;
				float3 In_PositionRawOS16_g170491 = Out_PositionRawOS15_g170490;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170474 = Out_VertexData15_g170490;
				half4 Model_VertexMasks518_g170474 = temp_output_2503_29_g170474;
				float4 break1689_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170475 = _motion_small_vert_mode;
				float temp_output_30_0_g170475 = ( break1689_g170474.x * break33_g170475.x );
				float temp_output_29_0_g170475 = ( break1689_g170474.y * break33_g170475.y );
				float temp_output_31_0_g170475 = ( break1689_g170474.z * break33_g170475.z );
				float temp_output_28_0_g170475 = ( temp_output_30_0_g170475 + temp_output_29_0_g170475 + temp_output_31_0_g170475 + ( break1689_g170474.w * break33_g170475.w ) );
				float temp_output_1727_0_g170474 = temp_output_28_0_g170475;
				float4 temp_output_2503_30_g170474 = Out_BoundsData15_g170490;
				half4 Model_BoundsData1322_g170474 = temp_output_2503_30_g170474;
				float4 break33_g170477 = _motion_small_proc_mode;
				float temp_output_30_0_g170477 = ( (Model_BoundsData1322_g170474).z * break33_g170477.x );
				float temp_output_29_0_g170477 = ( (Model_BoundsData1322_g170474).w * break33_g170477.y );
				float temp_output_1734_0_g170474 = ( temp_output_30_0_g170477 + temp_output_29_0_g170477 );
				float lerpResult1906_g170474 = lerp( temp_output_1727_0_g170474 , temp_output_1734_0_g170474 , _motion_small_mask_mode);
				float enc1805_g170474 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170474 = DecodeFloatToVector2( enc1805_g170474 );
				float2 break1804_g170474 = localDecodeFloatToVector21805_g170474;
				half Small_Mask_Legacy1806_g170474 = break1804_g170474.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170474 = Small_Mask_Legacy1806_g170474;
				#else
				float staticSwitch1800_g170474 = lerpResult1906_g170474;
				#endif
				float clampResult17_g170479 = clamp( staticSwitch1800_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170488 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170488 = ( clampResult17_g170479 - temp_output_7_0_g170488 );
				float temp_output_6_0_g170486 = saturate( ( ( temp_output_9_0_g170488 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170486 = ( temp_output_6_0_g170486 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170486 = temp_output_6_0_g170486;
				#endif
				half Small_Mask640_g170474 = staticSwitch14_g170486;
				float4 lerpResult836_g170510 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_MotionParams.w);
				half2 Global_WindDirWS2542_g170474 = ((lerpResult836_g170510).xy*2.0 + -1.0);
				half2 Input_WindDirWS803_g170505 = Global_WindDirWS2542_g170474;
				half3 Model_PositionWO162_g170474 = temp_output_2503_17_g170474;
				half3 Input_ModelPositionWO761_g170492 = Model_PositionWO162_g170474;
				float3 temp_output_2503_19_g170474 = Out_PivotWO15_g170490;
				half3 Model_PivotWO402_g170474 = temp_output_2503_19_g170474;
				half3 Input_ModelPivotsWO419_g170492 = Model_PivotWO402_g170474;
				half Input_MotionPivots629_g170492 = _MotionSmallPivotValue;
				float3 lerpResult771_g170492 = lerp( Input_ModelPositionWO761_g170492 , Input_ModelPivotsWO419_g170492 , Input_MotionPivots629_g170492);
				float4 temp_output_2503_27_g170474 = Out_PhaseData15_g170490;
				half4 Model_PhaseData489_g170474 = temp_output_2503_27_g170474;
				half4 Input_ModelMotionData763_g170492 = Model_PhaseData489_g170474;
				half Input_MotionPhase764_g170492 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170474 = ( lerpResult771_g170492 + ( (Input_ModelMotionData763_g170492).z * Input_MotionPhase764_g170492 * 5.0 ) );
				half3 Input_PositionWO419_g170505 = Small_Position1421_g170474;
				half Input_MotionTilling321_g170505 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170505 = ( -(Input_PositionWO419_g170505).xz * Input_MotionTilling321_g170505 * 0.005 );
				float2 temp_output_3_0_g170507 = Noise_Coord515_g170505;
				float2 temp_output_21_0_g170507 = Input_WindDirWS803_g170505;
				float lerpResult128_g170506 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170505 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170505 = ( lerpResult128_g170506 * 0.02 * Input_MotionSpeed62_g170505 );
				float temp_output_15_0_g170507 = Noise_Speed516_g170505;
				float temp_output_23_0_g170507 = frac( temp_output_15_0_g170507 );
				float4 lerpResult39_g170507 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170507 + ( temp_output_21_0_g170507 * temp_output_23_0_g170507 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170507 + ( temp_output_21_0_g170507 * frac( ( temp_output_15_0_g170507 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170507 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170505 = lerpResult39_g170507;
				half2 Noise_DirWS858_g170505 = ((temp_output_635_0_g170505).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170505 = _MotionSmallNoiseValue;
				half Global_WInd769_g170510 = (lerpResult836_g170510).z;
				TVEGlobalData Data15_g170498 = Data204_g170214;
				float Out_Dummy15_g170498 = 0;
				float4 Out_CoatParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170498 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170498 = Data15_g170498.Dummy;
				Out_CoatParams15_g170498 = Data15_g170498.CoatParams;
				Out_PaintParams15_g170498 = Data15_g170498.PaintParams;
				Out_GlowParams15_g170498 = Data15_g170498.GlowParams;
				Out_AtmoParams15_g170498= Data15_g170498.AtmoParams;
				Out_FadeParams15_g170498= Data15_g170498.FadeParams;
				Out_FormParams15_g170498 = Data15_g170498.FormParams;
				Out_FlowParams15_g170498 = Data15_g170498.FlowParams;
				}
				half4 Global_FlowParams2668_g170474 = Out_FlowParams15_g170498;
				half4 Input_GlobalFlow826_g170510 = Global_FlowParams2668_g170474;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170510 = saturate( (Input_GlobalFlow826_g170510).w );
				#else
				float staticSwitch612_g170510 = Global_WInd769_g170510;
				#endif
				float lerpResult853_g170510 = lerp( staticSwitch612_g170510 , saturate( (staticSwitch612_g170510*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170510 = _MotionIntensityValue;
				half Global_WindValue1855_g170474 = ( lerpResult853_g170510 * Input_MotionValue629_g170510 );
				half Input_WindValue881_g170505 = Global_WindValue1855_g170474;
				float lerpResult701_g170505 = lerp( 1.0 , Input_MotionNoise552_g170505 , Input_WindValue881_g170505);
				float2 lerpResult646_g170505 = lerp( Input_WindDirWS803_g170505 , Noise_DirWS858_g170505 , lerpResult701_g170505);
				half2 Small_DirWS817_g170505 = lerpResult646_g170505;
				float2 break823_g170505 = Small_DirWS817_g170505;
				half4 Noise_Params685_g170505 = temp_output_635_0_g170505;
				half Wind_Sinus820_g170505 = ( ((Noise_Params685_g170505).b*2.0 + -1.0) * Input_MotionNoise552_g170505 * 0.6 );
				float3 appendResult824_g170505 = (float3(break823_g170505.x , Wind_Sinus820_g170505 , break823_g170505.y));
				half Input_MotionDelay753_g170505 = _MotionSmallDelayValue;
				float lerpResult756_g170505 = lerp( 1.0 , ( Input_WindValue881_g170505 * Input_WindValue881_g170505 ) , Input_MotionDelay753_g170505);
				half Wind_Delay815_g170505 = lerpResult756_g170505;
				float3 appendResult825_g170505 = (float3(Wind_Delay815_g170505 , 1.0 , Wind_Delay815_g170505));
				float3 temp_output_827_0_g170505 = ( ( appendResult824_g170505 * Input_WindValue881_g170505 ) * appendResult825_g170505 );
				float2 break857_g170505 = Noise_DirWS858_g170505;
				float3 appendResult833_g170505 = (float3(break857_g170505.x , Wind_Sinus820_g170505 , break857_g170505.y));
				half Global_PushWave2675_g170474 = (Input_GlobalFlow826_g170510).z;
				half Input_PushWave890_g170505 = Global_PushWave2675_g170474;
				float2 temp_output_791_0_g170510 = ((Input_GlobalFlow826_g170510).xy*2.0 + -1.0);
				float temp_output_849_0_g170510 = saturate( length( temp_output_791_0_g170510 ) );
				half Global_PushAlpha1504_g170474 = temp_output_849_0_g170510;
				half Input_PushAlpha806_g170505 = ( Global_PushAlpha1504_g170474 * _MotionSmallPushValue );
				float3 lerpResult840_g170505 = lerp( temp_output_827_0_g170505 , ( appendResult833_g170505 * Input_PushWave890_g170505 ) , Input_PushAlpha806_g170505);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170505 = lerpResult840_g170505;
				#else
				float3 staticSwitch829_g170505 = temp_output_827_0_g170505;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half3 Small_Squash1489_g170474 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170505 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Motion789_g170474 = ( _MotionSmallIntensityValue * Small_Mask640_g170474 * Small_Squash1489_g170474 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170474 = Small_Motion789_g170474;
				#else
				float3 staticSwitch495_g170474 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170474 = temp_output_2503_16_g170474;
				half Global_DistMask1820_g170474 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170474 ) / _MotionDistValue ) ) );
				float4 break1710_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170476 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170476 = ( break1710_g170474.x * break33_g170476.x );
				float temp_output_29_0_g170476 = ( break1710_g170474.y * break33_g170476.y );
				float temp_output_31_0_g170476 = ( break1710_g170474.z * break33_g170476.z );
				float temp_output_28_0_g170476 = ( temp_output_30_0_g170476 + temp_output_29_0_g170476 + temp_output_31_0_g170476 + ( break1710_g170474.w * break33_g170476.w ) );
				float temp_output_1729_0_g170474 = temp_output_28_0_g170476;
				float4 break33_g170478 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170478 = ( (Model_BoundsData1322_g170474).z * break33_g170478.x );
				float temp_output_29_0_g170478 = ( (Model_BoundsData1322_g170474).w * break33_g170478.y );
				float temp_output_1735_0_g170474 = ( temp_output_30_0_g170478 + temp_output_29_0_g170478 );
				float lerpResult1908_g170474 = lerp( temp_output_1729_0_g170474 , temp_output_1735_0_g170474 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170474 = break1804_g170474.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170474 = Tiny_Mask_Legacy1807_g170474;
				#else
				float staticSwitch1810_g170474 = lerpResult1908_g170474;
				#endif
				float clampResult17_g170480 = clamp( staticSwitch1810_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170489 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170489 = ( clampResult17_g170480 - temp_output_7_0_g170489 );
				float temp_output_6_0_g170481 = saturate( ( ( temp_output_9_0_g170489 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170481 = ( temp_output_6_0_g170481 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170481 = temp_output_6_0_g170481;
				#endif
				half Tiny_Mask218_g170474 = staticSwitch14_g170481;
				float3 temp_output_2503_20_g170474 = Out_NormalOS15_g170490;
				half3 Model_NormalOS554_g170474 = temp_output_2503_20_g170474;
				half3 Input_NormalOS533_g170494 = Model_NormalOS554_g170474;
				half3 Tiny_Position2469_g170474 = Model_PositionWO162_g170474;
				half3 Input_PositionWO500_g170494 = Tiny_Position2469_g170474;
				half Input_MotionTilling321_g170494 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170496 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170494 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170494 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170494).xz * Input_MotionTilling321_g170494 * 0.005 ) + ( lerpResult128_g170496 * Input_MotionSpeed62_g170494 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170494 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170494 = lerp( ( Input_NormalOS533_g170494 * Flutter_Noise535_g170494 ) , Flutter_Noise535_g170494 , Input_MotionNoise542_g170494);
				half3 Input_ModelPositionWO761_g170493 = Model_PositionWO162_g170474;
				half3 Input_ModelPivotsWO419_g170493 = Model_PivotWO402_g170474;
				half Input_MotionPivots629_g170493 = _MotionBasePivotValue;
				float3 lerpResult771_g170493 = lerp( Input_ModelPositionWO761_g170493 , Input_ModelPivotsWO419_g170493 , Input_MotionPivots629_g170493);
				half4 Input_ModelMotionData763_g170493 = Model_PhaseData489_g170474;
				half Input_MotionPhase764_g170493 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170474 = ( lerpResult771_g170493 + ( (Input_ModelMotionData763_g170493).z * Input_MotionPhase764_g170493 * 5.0 ) );
				half3 Input_PositionWO419_g170499 = Base_Position1394_g170474;
				half Input_MotionTilling321_g170499 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170499 = ( -(Input_PositionWO419_g170499).xz * Input_MotionTilling321_g170499 * 0.005 );
				float2 temp_output_3_0_g170501 = Noise_Coord515_g170499;
				half2 Input_WindDirWS803_g170499 = Global_WindDirWS2542_g170474;
				float2 temp_output_21_0_g170501 = Input_WindDirWS803_g170499;
				float lerpResult128_g170500 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170499 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170499 = ( lerpResult128_g170500 * 0.02 * Input_MotionSpeed62_g170499 );
				float temp_output_15_0_g170501 = Noise_Speed516_g170499;
				float temp_output_23_0_g170501 = frac( temp_output_15_0_g170501 );
				float4 lerpResult39_g170501 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170501 + ( temp_output_21_0_g170501 * temp_output_23_0_g170501 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170501 + ( temp_output_21_0_g170501 * frac( ( temp_output_15_0_g170501 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170501 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170499 = lerpResult39_g170501;
				half4 Noise_Params685_g170499 = temp_output_635_0_g170499;
				half Input_WindValue853_g170499 = Global_WindValue1855_g170474;
				float temp_output_855_0_g170499 = ( (Noise_Params685_g170499).a * Input_WindValue853_g170499 );
				half Input_PushWave858_g170499 = Global_PushWave2675_g170474;
				half Input_PushAlpha806_g170499 = ( Global_PushAlpha1504_g170474 * _MotionBasePushValue );
				float lerpResult831_g170499 = lerp( temp_output_855_0_g170499 , Input_PushWave858_g170499 , Input_PushAlpha806_g170499);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170499 = lerpResult831_g170499;
				#else
				float staticSwitch828_g170499 = temp_output_855_0_g170499;
				#endif
				half Base_Wave1159_g170474 = staticSwitch828_g170499;
				float temp_output_888_0_g170505 = ( (Noise_Params685_g170505).b * Input_WindValue881_g170505 );
				float lerpResult867_g170505 = lerp( temp_output_888_0_g170505 , ( (Noise_Params685_g170505).b * Input_PushWave890_g170505 ) , Input_PushAlpha806_g170505);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170505 = lerpResult867_g170505;
				#else
				float staticSwitch886_g170505 = temp_output_888_0_g170505;
				#endif
				half Small_Wave1427_g170474 = staticSwitch886_g170505;
				float lerpResult2422_g170474 = lerp( Base_Wave1159_g170474 , Small_Wave1427_g170474 , _motion_small_mode);
				half Global_Wave1475_g170474 = lerpResult2422_g170474;
				half Input_GlobalWave546_g170494 = Global_Wave1475_g170474;
				float temp_output_548_0_g170494 = ( Input_GlobalWave546_g170494 * Input_GlobalWave546_g170494 );
				half Flutter_Wave556_g170494 = temp_output_548_0_g170494;
				half3 Tiny_Noise859_g170474 = ( lerpResult537_g170494 * Flutter_Wave556_g170494 );
				half3 Tiny_Flutter1451_g170474 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170474 * Tiny_Mask218_g170474 * Tiny_Noise859_g170474 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170474 = Tiny_Flutter1451_g170474;
				#else
				float3 staticSwitch414_g170474 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170474 = ( staticSwitch495_g170474 + staticSwitch414_g170474 );
				float3 In_PositionAddOS16_g170491 = Final_PositionADD1569_g170474;
				float3 temp_output_2503_24_g170474 = Out_PivotOS15_g170490;
				float3 In_PivotOS16_g170491 = temp_output_2503_24_g170474;
				float3 In_PivotWS16_g170491 = Out_PivotWS15_g170490;
				float3 In_PivotWO16_g170491 = temp_output_2503_19_g170474;
				float3 In_NormalOS16_g170491 = temp_output_2503_20_g170474;
				float3 In_NormalWS16_g170491 = Out_NormalWS15_g170490;
				float3 In_NormalRawOS16_g170491 = Out_NormalRawOS15_g170490;
				float3 In_NormalRawWS16_g170491 = Out_NormalRawWS15_g170490;
				float4 In_TangentOS16_g170491 = Out_TangentOS15_g170490;
				float3 In_ViewDirWS16_g170491 = Out_ViewDirWS15_g170490;
				float4 In_VertexData16_g170491 = temp_output_2503_29_g170474;
				float4 In_PhaseData16_g170491 = temp_output_2503_27_g170474;
				float4 In_BoundsData16_g170491 = temp_output_2503_30_g170474;
				float4 break748_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170483 = _motion_base_vert_mode;
				float temp_output_30_0_g170483 = ( break748_g170474.x * break33_g170483.x );
				float temp_output_29_0_g170483 = ( break748_g170474.y * break33_g170483.y );
				float temp_output_31_0_g170483 = ( break748_g170474.z * break33_g170483.z );
				float temp_output_28_0_g170483 = ( temp_output_30_0_g170483 + temp_output_29_0_g170483 + temp_output_31_0_g170483 + ( break748_g170474.w * break33_g170483.w ) );
				float temp_output_1731_0_g170474 = temp_output_28_0_g170483;
				float4 break33_g170484 = _motion_base_proc_mode;
				float temp_output_30_0_g170484 = ( (Model_BoundsData1322_g170474).z * break33_g170484.x );
				float temp_output_29_0_g170484 = ( (Model_BoundsData1322_g170474).w * break33_g170484.y );
				float temp_output_1733_0_g170474 = ( temp_output_30_0_g170484 + temp_output_29_0_g170484 );
				float lerpResult1904_g170474 = lerp( temp_output_1731_0_g170474 , temp_output_1733_0_g170474 , _motion_base_mask_mode);
				float clampResult17_g170482 = clamp( lerpResult1904_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170487 = ( clampResult17_g170482 - temp_output_7_0_g170487 );
				float temp_output_6_0_g170485 = saturate( ( ( temp_output_9_0_g170487 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170485 = ( temp_output_6_0_g170485 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170485 = temp_output_6_0_g170485;
				#endif
				half Base_Mask217_g170474 = staticSwitch14_g170485;
				half2 Noise_DirWS825_g170499 = ((temp_output_635_0_g170499).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170499 = _MotionBaseNoiseValue;
				float lerpResult701_g170499 = lerp( 1.0 , Input_MotionNoise552_g170499 , Input_WindValue853_g170499);
				float2 lerpResult646_g170499 = lerp( Input_WindDirWS803_g170499 , Noise_DirWS825_g170499 , lerpResult701_g170499);
				half Input_MotionDelay753_g170499 = _MotionBaseDelayValue;
				float lerpResult756_g170499 = lerp( 1.0 , ( Input_WindValue853_g170499 * Input_WindValue853_g170499 ) , Input_MotionDelay753_g170499);
				half Wind_Delay815_g170499 = lerpResult756_g170499;
				float2 temp_output_809_0_g170499 = ( lerpResult646_g170499 * Input_WindValue853_g170499 * Wind_Delay815_g170499 );
				half2 Global_PushDirWS1972_g170474 = temp_output_791_0_g170510;
				half2 Input_PushDirWS807_g170499 = Global_PushDirWS1972_g170474;
				float2 lerpResult811_g170499 = lerp( temp_output_809_0_g170499 , Input_PushDirWS807_g170499 , Input_PushAlpha806_g170499);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170499 = lerpResult811_g170499;
				#else
				float2 staticSwitch808_g170499 = temp_output_809_0_g170499;
				#endif
				float2 break83_g170504 = staticSwitch808_g170499;
				float3 appendResult79_g170504 = (float3(break83_g170504.x , 0.0 , break83_g170504.y));
				half2 Base_Bending893_g170474 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170504 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170474 = ( _MotionBaseIntensityValue * Base_Mask217_g170474 * Base_Bending893_g170474 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170474 = Base_Motion1440_g170474;
				#else
				float2 staticSwitch2384_g170474 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170474 = (float4(staticSwitch2384_g170474 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170474 = appendResult2023_g170474;
				float4 In_RotationData16_g170491 = Final_RotationData1570_g170474;
				{
				Data16_g170491.Dummy = In_Dummy16_g170491;
				Data16_g170491.PositionOS = In_PositionOS16_g170491;
				Data16_g170491.PositionWS = In_PositionWS16_g170491;
				Data16_g170491.PositionWO = In_PositionWO16_g170491;
				Data16_g170491.PositionRawOS = In_PositionRawOS16_g170491;
				Data16_g170491.PositionAddOS = In_PositionAddOS16_g170491;
				Data16_g170491.PivotOS = In_PivotOS16_g170491;
				Data16_g170491.PivotWS = In_PivotWS16_g170491;
				Data16_g170491.PivotWO = In_PivotWO16_g170491;
				Data16_g170491.NormalOS = In_NormalOS16_g170491;
				Data16_g170491.NormalWS = In_NormalWS16_g170491;
				Data16_g170491.NormalRawOS = In_NormalRawOS16_g170491;
				Data16_g170491.NormalRawWS = In_NormalRawWS16_g170491;
				Data16_g170491.TangentOS = In_TangentOS16_g170491;
				Data16_g170491.ViewDirWS = In_ViewDirWS16_g170491;
				Data16_g170491.VertexData = In_VertexData16_g170491;
				Data16_g170491.PhaseData = In_PhaseData16_g170491;
				Data16_g170491.BoundsData = In_BoundsData16_g170491;
				Data16_g170491.RotationData = In_RotationData16_g170491;
				}
				TVEModelData Data15_g170720 = Data16_g170491;
				float Out_Dummy15_g170720 = 0;
				float3 Out_PositionOS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170720 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170720 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170720 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170720 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170720 = float3( 0,0,0 );
				float4 Out_VertexData15_g170720 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170720 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170720 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170720 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170720 = Data15_g170720.Dummy;
				Out_PositionOS15_g170720 = Data15_g170720.PositionOS;
				Out_PositionWS15_g170720 = Data15_g170720.PositionWS;
				Out_PositionWO15_g170720 = Data15_g170720.PositionWO;
				Out_PositionRawOS15_g170720 = Data15_g170720.PositionRawOS;
				Out_PositionAddOS15_g170720 = Data15_g170720.PositionAddOS;
				Out_PivotOS15_g170720 = Data15_g170720.PivotOS;
				Out_PivotWS15_g170720 = Data15_g170720.PivotWS;
				Out_PivotWO15_g170720 = Data15_g170720.PivotWO;
				Out_NormalOS15_g170720 = Data15_g170720.NormalOS;
				Out_NormalWS15_g170720 = Data15_g170720.NormalWS;
				Out_NormalRawOS15_g170720 = Data15_g170720.NormalRawOS;
				Out_NormalRawWS15_g170720 = Data15_g170720.NormalRawWS;
				Out_TangentOS15_g170720 = Data15_g170720.TangentOS;
				Out_ViewDirWS15_g170720 = Data15_g170720.ViewDirWS;
				Out_VertexData15_g170720 = Data15_g170720.VertexData;
				Out_PhaseData15_g170720 = Data15_g170720.PhaseData;
				Out_BoundsData15_g170720 = Data15_g170720.BoundsData;
				Out_RotationData15_g170720 = Data15_g170720.RotationData;
				}
				half3 Model_PositionOS147_g170719 = Out_PositionOS15_g170720;
				half3 Input_False58_g170722 = Model_PositionOS147_g170719;
				half3 VertexPos40_g170723 = Model_PositionOS147_g170719;
				half3 VertexPos40_g170724 = VertexPos40_g170723;
				float3 appendResult74_g170724 = (float3(VertexPos40_g170724.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170724 = appendResult74_g170724;
				float3 break84_g170724 = VertexPos40_g170724;
				float3 appendResult81_g170724 = (float3(0.0 , break84_g170724.y , break84_g170724.z));
				half3 VertexPosOtherAxis82_g170724 = appendResult81_g170724;
				float4 temp_output_1567_33_g170719 = Out_RotationData15_g170720;
				half4 Model_VertexBend1569_g170719 = temp_output_1567_33_g170719;
				half2 Angle44_g170723 = (Model_VertexBend1569_g170719).xy;
				half Angle44_g170724 = (Angle44_g170723).y;
				half3 VertexPos40_g170725 = ( VertexPosRotationAxis50_g170724 + ( VertexPosOtherAxis82_g170724 * cos( Angle44_g170724 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170724 ) * sin( Angle44_g170724 ) ) );
				float3 appendResult74_g170725 = (float3(0.0 , 0.0 , VertexPos40_g170725.z));
				half3 VertexPosRotationAxis50_g170725 = appendResult74_g170725;
				float3 break84_g170725 = VertexPos40_g170725;
				float3 appendResult81_g170725 = (float3(break84_g170725.x , break84_g170725.y , 0.0));
				half3 VertexPosOtherAxis82_g170725 = appendResult81_g170725;
				half Angle44_g170725 = -(Angle44_g170723).x;
				half3 Input_True57_g170722 = ( VertexPosRotationAxis50_g170725 + ( VertexPosOtherAxis82_g170725 * cos( Angle44_g170725 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170725 ) * sin( Angle44_g170725 ) ) );
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170722 = Input_True57_g170722;
				#else
				float3 staticSwitch65_g170722 = Input_False58_g170722;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170722 = Input_True57_g170722;
				#else
				float3 staticSwitch69_g170722 = staticSwitch65_g170722;
				#endif
				float3 temp_output_1578_0_g170719 = staticSwitch69_g170722;
				float3 temp_output_1567_31_g170719 = Out_PositionAddOS15_g170720;
				half3 Model_PositionADD1568_g170719 = temp_output_1567_31_g170719;
				half3 Final_PositionOS178_g170719 = ( temp_output_1578_0_g170719 + Model_PositionADD1568_g170719 );
				float3 In_PositionOS16_g170721 = Final_PositionOS178_g170719;
				float3 In_PositionWS16_g170721 = Out_PositionWS15_g170720;
				float3 In_PositionWO16_g170721 = Out_PositionWO15_g170720;
				float3 In_PositionRawOS16_g170721 = Out_PositionRawOS15_g170720;
				float3 In_PositionAddOS16_g170721 = temp_output_1567_31_g170719;
				float3 In_PivotOS16_g170721 = Out_PivotOS15_g170720;
				float3 In_PivotWS16_g170721 = Out_PivotWS15_g170720;
				float3 In_PivotWO16_g170721 = Out_PivotWO15_g170720;
				float3 In_NormalOS16_g170721 = Out_NormalOS15_g170720;
				float3 In_NormalWS16_g170721 = Out_NormalWS15_g170720;
				float3 In_NormalRawOS16_g170721 = Out_NormalRawOS15_g170720;
				float3 In_NormalRawWS16_g170721 = Out_NormalRawWS15_g170720;
				float4 In_TangentOS16_g170721 = Out_TangentOS15_g170720;
				float3 In_ViewDirWS16_g170721 = Out_ViewDirWS15_g170720;
				float4 In_VertexData16_g170721 = Out_VertexData15_g170720;
				float4 In_PhaseData16_g170721 = Out_PhaseData15_g170720;
				float4 In_BoundsData16_g170721 = Out_BoundsData15_g170720;
				float4 In_RotationData16_g170721 = temp_output_1567_33_g170719;
				{
				Data16_g170721.Dummy = In_Dummy16_g170721;
				Data16_g170721.PositionOS = In_PositionOS16_g170721;
				Data16_g170721.PositionWS = In_PositionWS16_g170721;
				Data16_g170721.PositionWO = In_PositionWO16_g170721;
				Data16_g170721.PositionRawOS = In_PositionRawOS16_g170721;
				Data16_g170721.PositionAddOS = In_PositionAddOS16_g170721;
				Data16_g170721.PivotOS = In_PivotOS16_g170721;
				Data16_g170721.PivotWS = In_PivotWS16_g170721;
				Data16_g170721.PivotWO = In_PivotWO16_g170721;
				Data16_g170721.NormalOS = In_NormalOS16_g170721;
				Data16_g170721.NormalWS = In_NormalWS16_g170721;
				Data16_g170721.NormalRawOS = In_NormalRawOS16_g170721;
				Data16_g170721.NormalRawWS = In_NormalRawWS16_g170721;
				Data16_g170721.TangentOS = In_TangentOS16_g170721;
				Data16_g170721.ViewDirWS = In_ViewDirWS16_g170721;
				Data16_g170721.VertexData = In_VertexData16_g170721;
				Data16_g170721.PhaseData = In_PhaseData16_g170721;
				Data16_g170721.BoundsData = In_BoundsData16_g170721;
				Data16_g170721.RotationData = In_RotationData16_g170721;
				}
				TVEModelData Data15_g170744 = Data16_g170721;
				float Out_Dummy15_g170744 = 0;
				float3 Out_PositionOS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170744 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170744 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170744 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170744 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170744 = float3( 0,0,0 );
				float4 Out_VertexData15_g170744 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170744 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170744 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170744 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170744 = Data15_g170744.Dummy;
				Out_PositionOS15_g170744 = Data15_g170744.PositionOS;
				Out_PositionWS15_g170744 = Data15_g170744.PositionWS;
				Out_PositionWO15_g170744 = Data15_g170744.PositionWO;
				Out_PositionRawOS15_g170744 = Data15_g170744.PositionRawOS;
				Out_PositionAddOS15_g170744 = Data15_g170744.PositionAddOS;
				Out_PivotOS15_g170744 = Data15_g170744.PivotOS;
				Out_PivotWS15_g170744 = Data15_g170744.PivotWS;
				Out_PivotWO15_g170744 = Data15_g170744.PivotWO;
				Out_NormalOS15_g170744 = Data15_g170744.NormalOS;
				Out_NormalWS15_g170744 = Data15_g170744.NormalWS;
				Out_NormalRawOS15_g170744 = Data15_g170744.NormalRawOS;
				Out_NormalRawWS15_g170744 = Data15_g170744.NormalRawWS;
				Out_TangentOS15_g170744 = Data15_g170744.TangentOS;
				Out_ViewDirWS15_g170744 = Data15_g170744.ViewDirWS;
				Out_VertexData15_g170744 = Data15_g170744.VertexData;
				Out_PhaseData15_g170744 = Data15_g170744.PhaseData;
				Out_BoundsData15_g170744 = Data15_g170744.BoundsData;
				Out_RotationData15_g170744 = Data15_g170744.RotationData;
				}
				float3 In_PositionOS16_g170745 = Out_PositionOS15_g170744;
				float3 In_PositionWS16_g170745 = Out_PositionWS15_g170744;
				float3 temp_output_1567_17_g170743 = Out_PositionWO15_g170744;
				float3 In_PositionWO16_g170745 = temp_output_1567_17_g170743;
				float3 temp_output_1567_26_g170743 = Out_PositionRawOS15_g170744;
				float3 In_PositionRawOS16_g170745 = temp_output_1567_26_g170743;
				float3 In_PositionAddOS16_g170745 = Out_PositionAddOS15_g170744;
				float3 In_PivotOS16_g170745 = Out_PivotOS15_g170744;
				float3 In_PivotWS16_g170745 = Out_PivotWS15_g170744;
				float3 In_PivotWO16_g170745 = Out_PivotWO15_g170744;
				half3 Model_NormalOS1568_g170743 = Out_NormalOS15_g170744;
				float3 lerpResult1589_g170743 = lerp( Model_NormalOS1568_g170743 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170743 = temp_output_1567_26_g170743;
				float3 normalizeResult1594_g170743 = ASESafeNormalize( ( Model_PositionRAW1592_g170743 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170743 = lerp( lerpResult1589_g170743 , normalizeResult1594_g170743 , _NormalSphereValue);
				half3 Input_False58_g170758 = lerpResult1585_g170743;
				half3 VertexPos40_g170747 = lerpResult1585_g170743;
				half3 VertexPos40_g170748 = VertexPos40_g170747;
				float3 appendResult74_g170748 = (float3(VertexPos40_g170748.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170748 = appendResult74_g170748;
				float3 break84_g170748 = VertexPos40_g170748;
				float3 appendResult81_g170748 = (float3(0.0 , break84_g170748.y , break84_g170748.z));
				half3 VertexPosOtherAxis82_g170748 = appendResult81_g170748;
				float4 temp_output_1567_33_g170743 = Out_RotationData15_g170744;
				half4 Model_RotationData1583_g170743 = temp_output_1567_33_g170743;
				half2 Angle44_g170747 = Model_RotationData1583_g170743.xy;
				half Angle44_g170748 = (Angle44_g170747).y;
				half3 VertexPos40_g170749 = ( VertexPosRotationAxis50_g170748 + ( VertexPosOtherAxis82_g170748 * cos( Angle44_g170748 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170748 ) * sin( Angle44_g170748 ) ) );
				float3 appendResult74_g170749 = (float3(0.0 , 0.0 , VertexPos40_g170749.z));
				half3 VertexPosRotationAxis50_g170749 = appendResult74_g170749;
				float3 break84_g170749 = VertexPos40_g170749;
				float3 appendResult81_g170749 = (float3(break84_g170749.x , break84_g170749.y , 0.0));
				half3 VertexPosOtherAxis82_g170749 = appendResult81_g170749;
				half Angle44_g170749 = -(Angle44_g170747).x;
				float3 lerpResult1591_g170743 = lerp( lerpResult1585_g170743 , ( VertexPosRotationAxis50_g170749 + ( VertexPosOtherAxis82_g170749 * cos( Angle44_g170749 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170749 ) * sin( Angle44_g170749 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170758 = lerpResult1591_g170743;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170758 = Input_True57_g170758;
				#else
				float3 staticSwitch65_g170758 = Input_False58_g170758;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170758 = Input_True57_g170758;
				#else
				float3 staticSwitch69_g170758 = staticSwitch65_g170758;
				#endif
				float3 temp_output_1715_0_g170743 = staticSwitch69_g170758;
				float4 temp_output_1567_29_g170743 = Out_VertexData15_g170744;
				half4 Model_VertexData1608_g170743 = temp_output_1567_29_g170743;
				float4 break1683_g170743 = Model_VertexData1608_g170743;
				float4 break33_g170750 = _normal_vert_mode;
				float temp_output_30_0_g170750 = ( break1683_g170743.x * break33_g170750.x );
				float temp_output_29_0_g170750 = ( break1683_g170743.y * break33_g170750.y );
				float temp_output_31_0_g170750 = ( break1683_g170743.z * break33_g170750.z );
				float temp_output_28_0_g170750 = ( temp_output_30_0_g170750 + temp_output_29_0_g170750 + temp_output_31_0_g170750 + ( break1683_g170743.w * break33_g170750.w ) );
				float clampResult17_g170751 = clamp( temp_output_28_0_g170750 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170755 = _NormalMeshRemap.x;
				float temp_output_9_0_g170755 = ( clampResult17_g170751 - temp_output_7_0_g170755 );
				float lerpResult1695_g170743 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170755 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170752 = lerpResult1695_g170743;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170752 = ( temp_output_6_0_g170752 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170752 = temp_output_6_0_g170752;
				#endif
				float temp_output_1690_0_g170743 = staticSwitch14_g170752;
				half Normal_MeskMask1691_g170743 = temp_output_1690_0_g170743;
				half Normal_Proj_Mask1647_g170743 = 1.0;
				float temp_output_1699_0_g170743 = ( Normal_MeskMask1691_g170743 * Normal_Proj_Mask1647_g170743 );
				float3 lerpResult1670_g170743 = lerp( Model_NormalOS1568_g170743 , temp_output_1715_0_g170743 , temp_output_1699_0_g170743);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170743 = lerpResult1670_g170743;
				#else
				float3 staticSwitch1716_g170743 = Model_NormalOS1568_g170743;
				#endif
				half3 Final_NormalOS178_g170743 = staticSwitch1716_g170743;
				float3 In_NormalOS16_g170745 = Final_NormalOS178_g170743;
				float3 temp_output_1567_21_g170743 = Out_NormalWS15_g170744;
				float3 In_NormalWS16_g170745 = temp_output_1567_21_g170743;
				float3 In_NormalRawOS16_g170745 = Out_NormalRawOS15_g170744;
				float3 In_NormalRawWS16_g170745 = Out_NormalRawWS15_g170744;
				float4 In_TangentOS16_g170745 = Out_TangentOS15_g170744;
				float3 In_ViewDirWS16_g170745 = Out_ViewDirWS15_g170744;
				float4 In_VertexData16_g170745 = temp_output_1567_29_g170743;
				float4 In_PhaseData16_g170745 = Out_PhaseData15_g170744;
				float4 In_BoundsData16_g170745 = Out_BoundsData15_g170744;
				float4 In_RotationData16_g170745 = temp_output_1567_33_g170743;
				{
				Data16_g170745.Dummy = In_Dummy16_g170745;
				Data16_g170745.PositionOS = In_PositionOS16_g170745;
				Data16_g170745.PositionWS = In_PositionWS16_g170745;
				Data16_g170745.PositionWO = In_PositionWO16_g170745;
				Data16_g170745.PositionRawOS = In_PositionRawOS16_g170745;
				Data16_g170745.PositionAddOS = In_PositionAddOS16_g170745;
				Data16_g170745.PivotOS = In_PivotOS16_g170745;
				Data16_g170745.PivotWS = In_PivotWS16_g170745;
				Data16_g170745.PivotWO = In_PivotWO16_g170745;
				Data16_g170745.NormalOS = In_NormalOS16_g170745;
				Data16_g170745.NormalWS = In_NormalWS16_g170745;
				Data16_g170745.NormalRawOS = In_NormalRawOS16_g170745;
				Data16_g170745.NormalRawWS = In_NormalRawWS16_g170745;
				Data16_g170745.TangentOS = In_TangentOS16_g170745;
				Data16_g170745.ViewDirWS = In_ViewDirWS16_g170745;
				Data16_g170745.VertexData = In_VertexData16_g170745;
				Data16_g170745.PhaseData = In_PhaseData16_g170745;
				Data16_g170745.BoundsData = In_BoundsData16_g170745;
				Data16_g170745.RotationData = In_RotationData16_g170745;
				}
				TVEModelData Data15_g170760 = Data16_g170745;
				float Out_Dummy15_g170760 = 0;
				float3 Out_PositionOS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170760 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170760 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170760 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170760 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170760 = float3( 0,0,0 );
				float4 Out_VertexData15_g170760 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170760 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170760 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170760 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170760 = Data15_g170760.Dummy;
				Out_PositionOS15_g170760 = Data15_g170760.PositionOS;
				Out_PositionWS15_g170760 = Data15_g170760.PositionWS;
				Out_PositionWO15_g170760 = Data15_g170760.PositionWO;
				Out_PositionRawOS15_g170760 = Data15_g170760.PositionRawOS;
				Out_PositionAddOS15_g170760 = Data15_g170760.PositionAddOS;
				Out_PivotOS15_g170760 = Data15_g170760.PivotOS;
				Out_PivotWS15_g170760 = Data15_g170760.PivotWS;
				Out_PivotWO15_g170760 = Data15_g170760.PivotWO;
				Out_NormalOS15_g170760 = Data15_g170760.NormalOS;
				Out_NormalWS15_g170760 = Data15_g170760.NormalWS;
				Out_NormalRawOS15_g170760 = Data15_g170760.NormalRawOS;
				Out_NormalRawWS15_g170760 = Data15_g170760.NormalRawWS;
				Out_TangentOS15_g170760 = Data15_g170760.TangentOS;
				Out_ViewDirWS15_g170760 = Data15_g170760.ViewDirWS;
				Out_VertexData15_g170760 = Data15_g170760.VertexData;
				Out_PhaseData15_g170760 = Data15_g170760.PhaseData;
				Out_BoundsData15_g170760 = Data15_g170760.BoundsData;
				Out_RotationData15_g170760 = Data15_g170760.RotationData;
				}
				float3 temp_output_217_24_g170759 = Out_PivotOS15_g170760;
				float3 In_PositionOS16_g170761 = ( Out_PositionOS15_g170760 + temp_output_217_24_g170759 );
				float3 In_PositionWS16_g170761 = Out_PositionWS15_g170760;
				float3 In_PositionWO16_g170761 = Out_PositionWO15_g170760;
				float3 In_PositionRawOS16_g170761 = Out_PositionRawOS15_g170760;
				float3 In_PositionAddOS16_g170761 = Out_PositionAddOS15_g170760;
				float3 In_PivotOS16_g170761 = temp_output_217_24_g170759;
				float3 In_PivotWS16_g170761 = Out_PivotWS15_g170760;
				float3 In_PivotWO16_g170761 = Out_PivotWO15_g170760;
				float3 In_NormalOS16_g170761 = Out_NormalOS15_g170760;
				float3 In_NormalWS16_g170761 = Out_NormalWS15_g170760;
				float3 In_NormalRawOS16_g170761 = Out_NormalRawOS15_g170760;
				float3 In_NormalRawWS16_g170761 = Out_NormalRawWS15_g170760;
				float4 In_TangentOS16_g170761 = Out_TangentOS15_g170760;
				float3 In_ViewDirWS16_g170761 = Out_ViewDirWS15_g170760;
				float4 In_VertexData16_g170761 = Out_VertexData15_g170760;
				float4 In_PhaseData16_g170761 = Out_PhaseData15_g170760;
				float4 In_BoundsData16_g170761 = Out_BoundsData15_g170760;
				float4 In_RotationData16_g170761 = Out_RotationData15_g170760;
				{
				Data16_g170761.Dummy = In_Dummy16_g170761;
				Data16_g170761.PositionOS = In_PositionOS16_g170761;
				Data16_g170761.PositionWS = In_PositionWS16_g170761;
				Data16_g170761.PositionWO = In_PositionWO16_g170761;
				Data16_g170761.PositionRawOS = In_PositionRawOS16_g170761;
				Data16_g170761.PositionAddOS = In_PositionAddOS16_g170761;
				Data16_g170761.PivotOS = In_PivotOS16_g170761;
				Data16_g170761.PivotWS = In_PivotWS16_g170761;
				Data16_g170761.PivotWO = In_PivotWO16_g170761;
				Data16_g170761.NormalOS = In_NormalOS16_g170761;
				Data16_g170761.NormalWS = In_NormalWS16_g170761;
				Data16_g170761.NormalRawOS = In_NormalRawOS16_g170761;
				Data16_g170761.NormalRawWS = In_NormalRawWS16_g170761;
				Data16_g170761.TangentOS = In_TangentOS16_g170761;
				Data16_g170761.ViewDirWS = In_ViewDirWS16_g170761;
				Data16_g170761.VertexData = In_VertexData16_g170761;
				Data16_g170761.PhaseData = In_PhaseData16_g170761;
				Data16_g170761.BoundsData = In_BoundsData16_g170761;
				Data16_g170761.RotationData = In_RotationData16_g170761;
				}
				TVEModelData Data15_g170774 = Data16_g170761;
				float Out_Dummy15_g170774 = 0;
				float3 Out_PositionOS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170774 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170774 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170774 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170774 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170774 = float3( 0,0,0 );
				float4 Out_VertexData15_g170774 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170774 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170774 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170774 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170774 = Data15_g170774.Dummy;
				Out_PositionOS15_g170774 = Data15_g170774.PositionOS;
				Out_PositionWS15_g170774 = Data15_g170774.PositionWS;
				Out_PositionWO15_g170774 = Data15_g170774.PositionWO;
				Out_PositionRawOS15_g170774 = Data15_g170774.PositionRawOS;
				Out_PositionAddOS15_g170774 = Data15_g170774.PositionAddOS;
				Out_PivotOS15_g170774 = Data15_g170774.PivotOS;
				Out_PivotWS15_g170774 = Data15_g170774.PivotWS;
				Out_PivotWO15_g170774 = Data15_g170774.PivotWO;
				Out_NormalOS15_g170774 = Data15_g170774.NormalOS;
				Out_NormalWS15_g170774 = Data15_g170774.NormalWS;
				Out_NormalRawOS15_g170774 = Data15_g170774.NormalRawOS;
				Out_NormalRawWS15_g170774 = Data15_g170774.NormalRawWS;
				Out_TangentOS15_g170774 = Data15_g170774.TangentOS;
				Out_ViewDirWS15_g170774 = Data15_g170774.ViewDirWS;
				Out_VertexData15_g170774 = Data15_g170774.VertexData;
				Out_PhaseData15_g170774 = Data15_g170774.PhaseData;
				Out_BoundsData15_g170774 = Data15_g170774.BoundsData;
				Out_RotationData15_g170774 = Data15_g170774.RotationData;
				}
				float3 temp_output_31_0_g170771 = Out_PositionOS15_g170774;
				float3 temp_output_6_0_g170785 = ( temp_output_31_0_g170771 + _DisableSRPBatcher );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170785 = ( temp_output_6_0_g170785 + ( 0.0 * 0.0 ) );
				#else
				float3 staticSwitch14_g170785 = temp_output_6_0_g170785;
				#endif
				
				output.ase_texcoord6.xyz = vertexToFrag73_g170196;
				output.ase_texcoord7.xyz = vertexToFrag76_g170196;
				float3 ase_tangentWS = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				float ase_tangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_bitangentWS = cross( ase_normalWS, ase_tangentWS ) * ase_tangentSign;
				output.ase_texcoord8.xyz = ase_bitangentWS;
				float temp_output_6_0_g170497 = ( _MotionHighlightValue * Global_DistMask1820_g170474 * ( Tiny_Mask218_g170474 * Tiny_Mask218_g170474 ) * ( Global_Wave1475_g170474 * Global_Wave1475_g170474 * Global_Wave1475_g170474 * Global_Wave1475_g170474 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Wave_Mask4324 = staticSwitch14_g170497;
				float4 appendResult23_g170573 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask4324));
				float4 vertexToFrag24_g170573 = appendResult23_g170573;
				output.ase_texcoord9 = vertexToFrag24_g170573;
				
				output.ase_texcoord4 = inputMesh.ase_texcoord;
				output.ase_texcoord5.xy = inputMesh.ase_texcoord2.xy;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord5.zw = 0;
				output.ase_texcoord6.w = 0;
				output.ase_texcoord7.w = 0;
				output.ase_texcoord8.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = staticSwitch14_g170785;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170774;
				inputMesh.tangentOS = Out_TangentOS15_g170774;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.clipPosV = output.positionCS;
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif

						#if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
					)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				UNITY_SETUP_INSTANCE_ID(packedInput);

				float3 PositionRWS = packedInput.positionRWS;
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float4 ClipPos = packedInput.clipPosV;
				float4 ScreenPos = ComputeScreenPos( packedInput.clipPosV, _ProjectionParams.x );
		
				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = PositionRWS;
				input.tangentToWorld = BuildTangentToWorld(TangentWS, NormalWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half IsFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				SmoothSurfaceDescription surfaceDescription = (SmoothSurfaceDescription)0;
				float localBreakData4_g170777 = ( 0.0 );
				float localCompData3_g170764 = ( 0.0 );
				TVEVisualData Data3_g170764 = (TVEVisualData)0;
				half Dummy145_g170762 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170764 = Dummy145_g170762;
				float localBreakData4_g170763 = ( 0.0 );
				float localCompData3_g170732 = ( 0.0 );
				TVEVisualData Data3_g170732 = (TVEVisualData)0;
				half Dummy145_g170727 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170732 = Dummy145_g170727;
				float localBreakData4_g170731 = ( 0.0 );
				float localCompData3_g170709 = ( 0.0 );
				TVEVisualData Data3_g170709 = (TVEVisualData)0;
				half Dummy594_g170706 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170709 = Dummy594_g170706;
				float localBreakData4_g170708 = ( 0.0 );
				float localCompData3_g170692 = ( 0.0 );
				TVEVisualData Data3_g170692 = (TVEVisualData)0;
				half Dummy594_g170691 = ( _CutoutCategory + _CutoutEnd + _CutoutBakeMode );
				float In_Dummy3_g170692 = Dummy594_g170691;
				float localBreakData4_g170694 = ( 0.0 );
				float localCompData3_g170664 = ( 0.0 );
				TVEVisualData Data3_g170664 = (TVEVisualData)0;
				half Dummy594_g170662 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170664 = Dummy594_g170662;
				float localBreakData4_g170663 = ( 0.0 );
				float localCompData3_g170628 = ( 0.0 );
				TVEVisualData Data3_g170628 = (TVEVisualData)0;
				half Dummy594_g170625 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170628 = Dummy594_g170625;
				float localBreakData4_g170626 = ( 0.0 );
				float localCompData3_g170624 = ( 0.0 );
				TVEVisualData Data3_g170624 = (TVEVisualData)0;
				float In_Dummy3_g170624 = 0.0;
				float localBreakData4_g170623 = ( 0.0 );
				float localCompData3_g170601 = ( 0.0 );
				TVEVisualData Data3_g170601 = (TVEVisualData)0;
				half Dummy205_g170598 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170601 = Dummy205_g170598;
				float localBreakData4_g170600 = ( 0.0 );
				float localCompData3_g170578 = ( 0.0 );
				TVEVisualData Data3_g170578 = (TVEVisualData)0;
				half Dummy205_g170574 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170578 = Dummy205_g170574;
				float localBreakData4_g170579 = ( 0.0 );
				float localCompData3_g170567 = ( 0.0 );
				TVEVisualData Data3_g170567 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170567 = Dummy220_g170564;
				float localBreakData4_g170566 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170447 = ( 0.0 );
				TVEVisualData Data3_g170447 = (TVEVisualData)0;
				half4 Dummy944_g170438 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170447 = Dummy944_g170438.x;
				float localBreakData4_g170446 = ( 0.0 );
				float localCompData3_g170415 = ( 0.0 );
				TVEVisualData Data3_g170415 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170415 = Dummy946_g170394.x;
				float localBreakData4_g170405 = ( 0.0 );
				float localCompData3_g170387 = ( 0.0 );
				TVEVisualData Data3_g170387 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170387 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170380) = _MainAlbedoTex;
				float localFilterTexture19_g170383 = ( 0.0 );
				SamplerState SS19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170383 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170383 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170383 = SamplerDefault19_g170383;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170383 = SamplerDefault19_g170383;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170383 = SamplerPoint19_g170383;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170383 = SamplerLow19_g170383;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170383 = SamplerMedium19_g170383;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170383 = SamplerHigh19_g170383;
				#endif
				}
				SamplerState Sampler276_g170380 = SS19_g170383;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170380 = Local_Coords180_g170372;
				half4 Coords276_g170380 = temp_output_37_0_g170380;
				half2 TexCoord276_g170380 = packedInput.ase_texcoord4.xy;
				half4 localSampleMain276_g170380 = SampleMain( Texture276_g170380 , Sampler276_g170380 , Coords276_g170380 , TexCoord276_g170380 );
				TEXTURE2D(Texture275_g170380) = _MainAlbedoTex;
				SamplerState Sampler275_g170380 = SS19_g170383;
				half4 Coords275_g170380 = temp_output_37_0_g170380;
				half2 TexCoord275_g170380 = packedInput.ase_texcoord5.xy;
				half4 localSampleExtra275_g170380 = SampleExtra( Texture275_g170380 , Sampler275_g170380 , Coords275_g170380 , TexCoord275_g170380 );
				TEXTURE2D(Texture238_g170380) = _MainAlbedoTex;
				SamplerState Sampler238_g170380 = SS19_g170383;
				half4 Coords238_g170380 = temp_output_37_0_g170380;
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord6.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord7.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170386 = Data16_g170201;
				float Out_Dummy15_g170386 = 0;
				float3 Out_PositionWS15_g170386 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170386 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170386 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170386 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170386 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170386 = float3( 0,0,0 );
				float4 Out_VertexData15_g170386 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170386 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170386 = Data15_g170386.Dummy;
				Out_PositionWS15_g170386 = Data15_g170386.PositionWS;
				Out_PositionWO15_g170386 = Data15_g170386.PositionWO;
				Out_PivotWS15_g170386 = Data15_g170386.PivotWS;
				Out_PivotWO15_g170386 = Data15_g170386.PivotWO;
				Out_NormalWS15_g170386 = Data15_g170386.NormalWS;
				Out_ViewDirWS15_g170386 = Data15_g170386.ViewDirWS;
				Out_VertexData15_g170386 = Data15_g170386.VertexData;
				Out_BoundsData15_g170386 = Data15_g170386.BoundsData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170386;
				float3 temp_output_279_0_g170380 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170380 = temp_output_279_0_g170380;
				half4 localSamplePlanar2D238_g170380 = SamplePlanar2D( Texture238_g170380 , Sampler238_g170380 , Coords238_g170380 , WorldPosition238_g170380 );
				TEXTURE2D(Texture246_g170380) = _MainAlbedoTex;
				SamplerState Sampler246_g170380 = SS19_g170383;
				half4 Coords246_g170380 = temp_output_37_0_g170380;
				half3 WorldPosition246_g170380 = temp_output_279_0_g170380;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170386;
				float3 temp_output_280_0_g170380 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170380 = temp_output_280_0_g170380;
				half4 localSamplePlanar3D246_g170380 = SamplePlanar3D( Texture246_g170380 , Sampler246_g170380 , Coords246_g170380 , WorldPosition246_g170380 , WorldNormal246_g170380 );
				TEXTURE2D(Texture234_g170380) = _MainAlbedoTex;
				SamplerState Sampler234_g170380 = SS19_g170383;
				float4 Coords234_g170380 = temp_output_37_0_g170380;
				float3 WorldPosition234_g170380 = temp_output_279_0_g170380;
				float4 localSampleStochastic2D234_g170380 = SampleStochastic2D( Texture234_g170380 , Sampler234_g170380 , Coords234_g170380 , WorldPosition234_g170380 );
				TEXTURE2D(Texture263_g170380) = _MainAlbedoTex;
				SamplerState Sampler263_g170380 = SS19_g170383;
				half4 Coords263_g170380 = temp_output_37_0_g170380;
				half3 WorldPosition263_g170380 = temp_output_279_0_g170380;
				half3 WorldNormal263_g170380 = temp_output_280_0_g170380;
				half4 localSampleStochastic3D263_g170380 = SampleStochastic3D( Texture263_g170380 , Sampler263_g170380 , Coords263_g170380 , WorldPosition263_g170380 , WorldNormal263_g170380 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170380;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170380;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170380;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170380;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170380;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170380;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170380;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170382) = _MainShaderTex;
				float localFilterTexture30_g170385 = ( 0.0 );
				SamplerState SS30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170385 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170385 = SamplerDefault30_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170385 = SamplerDefault30_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170385 = SamplerPoint30_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170385 = SamplerLow30_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170385 = SamplerMedium30_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170385 = SamplerHigh30_g170385;
				#endif
				}
				SamplerState Sampler276_g170382 = SS30_g170385;
				float4 temp_output_37_0_g170382 = Local_Coords180_g170372;
				half4 Coords276_g170382 = temp_output_37_0_g170382;
				half2 TexCoord276_g170382 = packedInput.ase_texcoord4.xy;
				half4 localSampleMain276_g170382 = SampleMain( Texture276_g170382 , Sampler276_g170382 , Coords276_g170382 , TexCoord276_g170382 );
				TEXTURE2D(Texture275_g170382) = _MainShaderTex;
				SamplerState Sampler275_g170382 = SS30_g170385;
				half4 Coords275_g170382 = temp_output_37_0_g170382;
				half2 TexCoord275_g170382 = packedInput.ase_texcoord5.xy;
				half4 localSampleExtra275_g170382 = SampleExtra( Texture275_g170382 , Sampler275_g170382 , Coords275_g170382 , TexCoord275_g170382 );
				TEXTURE2D(Texture238_g170382) = _MainShaderTex;
				SamplerState Sampler238_g170382 = SS30_g170385;
				half4 Coords238_g170382 = temp_output_37_0_g170382;
				float3 temp_output_279_0_g170382 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170382 = temp_output_279_0_g170382;
				half4 localSamplePlanar2D238_g170382 = SamplePlanar2D( Texture238_g170382 , Sampler238_g170382 , Coords238_g170382 , WorldPosition238_g170382 );
				TEXTURE2D(Texture246_g170382) = _MainShaderTex;
				SamplerState Sampler246_g170382 = SS30_g170385;
				half4 Coords246_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition246_g170382 = temp_output_279_0_g170382;
				float3 temp_output_280_0_g170382 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170382 = temp_output_280_0_g170382;
				half4 localSamplePlanar3D246_g170382 = SamplePlanar3D( Texture246_g170382 , Sampler246_g170382 , Coords246_g170382 , WorldPosition246_g170382 , WorldNormal246_g170382 );
				TEXTURE2D(Texture234_g170382) = _MainShaderTex;
				SamplerState Sampler234_g170382 = SS30_g170385;
				float4 Coords234_g170382 = temp_output_37_0_g170382;
				float3 WorldPosition234_g170382 = temp_output_279_0_g170382;
				float4 localSampleStochastic2D234_g170382 = SampleStochastic2D( Texture234_g170382 , Sampler234_g170382 , Coords234_g170382 , WorldPosition234_g170382 );
				TEXTURE2D(Texture263_g170382) = _MainShaderTex;
				SamplerState Sampler263_g170382 = SS30_g170385;
				half4 Coords263_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition263_g170382 = temp_output_279_0_g170382;
				half3 WorldNormal263_g170382 = temp_output_280_0_g170382;
				half4 localSampleStochastic3D263_g170382 = SampleStochastic3D( Texture263_g170382 , Sampler263_g170382 , Coords263_g170382 , WorldPosition263_g170382 , WorldNormal263_g170382 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170382;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170382;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170382;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170377 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170388 = _MainMultiRemap.x;
				float temp_output_9_0_g170388 = ( clampResult17_g170377 - temp_output_7_0_g170388 );
				half Local_MultiMask78_g170372 = saturate( ( ( temp_output_9_0_g170388 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170387 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170387 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170381) = _MainNormalTex;
				float localFilterTexture29_g170384 = ( 0.0 );
				SamplerState SS29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170384 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170384 = SamplerDefault29_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170384 = SamplerDefault29_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170384 = SamplerPoint29_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170384 = SamplerLow29_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170384 = SamplerMedium29_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170384 = SamplerHigh29_g170384;
				#endif
				}
				SamplerState Sampler276_g170381 = SS29_g170384;
				float4 temp_output_37_0_g170381 = Local_Coords180_g170372;
				half4 Coords276_g170381 = temp_output_37_0_g170381;
				half2 TexCoord276_g170381 = packedInput.ase_texcoord4.xy;
				half4 localSampleMain276_g170381 = SampleMain( Texture276_g170381 , Sampler276_g170381 , Coords276_g170381 , TexCoord276_g170381 );
				TEXTURE2D(Texture275_g170381) = _MainNormalTex;
				SamplerState Sampler275_g170381 = SS29_g170384;
				half4 Coords275_g170381 = temp_output_37_0_g170381;
				half2 TexCoord275_g170381 = packedInput.ase_texcoord5.xy;
				half4 localSampleExtra275_g170381 = SampleExtra( Texture275_g170381 , Sampler275_g170381 , Coords275_g170381 , TexCoord275_g170381 );
				TEXTURE2D(Texture238_g170381) = _MainNormalTex;
				SamplerState Sampler238_g170381 = SS29_g170384;
				half4 Coords238_g170381 = temp_output_37_0_g170381;
				float3 temp_output_279_0_g170381 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170381 = temp_output_279_0_g170381;
				half4 localSamplePlanar2D238_g170381 = SamplePlanar2D( Texture238_g170381 , Sampler238_g170381 , Coords238_g170381 , WorldPosition238_g170381 );
				TEXTURE2D(Texture246_g170381) = _MainNormalTex;
				SamplerState Sampler246_g170381 = SS29_g170384;
				half4 Coords246_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition246_g170381 = temp_output_279_0_g170381;
				float3 temp_output_280_0_g170381 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170381 = temp_output_280_0_g170381;
				half4 localSamplePlanar3D246_g170381 = SamplePlanar3D( Texture246_g170381 , Sampler246_g170381 , Coords246_g170381 , WorldPosition246_g170381 , WorldNormal246_g170381 );
				TEXTURE2D(Texture234_g170381) = _MainNormalTex;
				SamplerState Sampler234_g170381 = SS29_g170384;
				float4 Coords234_g170381 = temp_output_37_0_g170381;
				float3 WorldPosition234_g170381 = temp_output_279_0_g170381;
				float4 localSampleStochastic2D234_g170381 = SampleStochastic2D( Texture234_g170381 , Sampler234_g170381 , Coords234_g170381 , WorldPosition234_g170381 );
				TEXTURE2D(Texture263_g170381) = _MainNormalTex;
				SamplerState Sampler263_g170381 = SS29_g170384;
				half4 Coords263_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition263_g170381 = temp_output_279_0_g170381;
				half3 WorldNormal263_g170381 = temp_output_280_0_g170381;
				half4 localSampleStochastic3D263_g170381 = SampleStochastic3D( Texture263_g170381 , Sampler263_g170381 , Coords263_g170381 , WorldPosition263_g170381 , WorldNormal263_g170381 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170381;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170381;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170381;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3 ase_bitangentWS = packedInput.ase_texcoord8.xyz;
				float3x3 ase_worldToTangent = float3x3(TangentWS.xyz,ase_bitangentWS,NormalWS);
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170387 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, ase_bitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, ase_bitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, ase_bitangentWS.z, NormalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3(dot(tanToWorld0,tanNormal74_g170375), dot(tanToWorld1,tanNormal74_g170375), dot(tanToWorld2,tanNormal74_g170375)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170387 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170387 = Local_Masks109_g170372;
				float4 In_Emissive3_g170387 = half4(1,1,1,1);
				float3 temp_output_3_0_g170376 = Local_Albedo139_g170372;
				float dotResult20_g170376 = dot( temp_output_3_0_g170376 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170376;
				float In_Grayscale3_g170387 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170387 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170387 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170387 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170387 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170387 = temp_cast_4;
				float In_Transmission3_g170387 = 1.0;
				float In_Thickness3_g170387 = 0.0;
				float In_Diffusion3_g170387 = 0.0;
				{
				Data3_g170387.Dummy = In_Dummy3_g170387;
				Data3_g170387.Albedo = In_Albedo3_g170387;
				Data3_g170387.AlbedoRaw = In_AlbedoRaw3_g170387;
				Data3_g170387.NormalTS = In_NormalTS3_g170387;
				Data3_g170387.NormalWS = In_NormalWS3_g170387;
				Data3_g170387.Shader = In_Shader3_g170387;
				Data3_g170387.Emissive= In_Emissive3_g170387;
				Data3_g170387.MultiMask = In_MultiMask3_g170387;
				Data3_g170387.Grayscale = In_Grayscale3_g170387;
				Data3_g170387.Luminosity = In_Luminosity3_g170387;
				Data3_g170387.AlphaClip = In_AlphaClip3_g170387;
				Data3_g170387.AlphaFade = In_AlphaFade3_g170387;
				Data3_g170387.Translucency = In_Translucency3_g170387;
				Data3_g170387.Transmission = In_Transmission3_g170387;
				Data3_g170387.Thickness = In_Thickness3_g170387;
				Data3_g170387.Diffusion = In_Diffusion3_g170387;
				}
				TVEVisualData Data4_g170405 = Data3_g170387;
				float Out_Dummy4_g170405 = 0;
				float3 Out_Albedo4_g170405 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170405 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170405 = float2( 0,0 );
				float3 Out_NormalWS4_g170405 = float3( 0,0,0 );
				float4 Out_Shader4_g170405 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170405 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170405 = 0;
				float Out_Grayscale4_g170405 = 0;
				float Out_Luminosity4_g170405 = 0;
				float Out_AlphaClip4_g170405 = 0;
				float Out_AlphaFade4_g170405 = 0;
				float3 Out_Translucency4_g170405 = float3( 0,0,0 );
				float Out_Transmission4_g170405 = 0;
				float Out_Thickness4_g170405 = 0;
				float Out_Diffusion4_g170405 = 0;
				{
				Out_Dummy4_g170405 = Data4_g170405.Dummy;
				Out_Albedo4_g170405 = Data4_g170405.Albedo;
				Out_AlbedoRaw4_g170405 = Data4_g170405.AlbedoRaw;
				Out_NormalTS4_g170405 = Data4_g170405.NormalTS;
				Out_NormalWS4_g170405 = Data4_g170405.NormalWS;
				Out_Shader4_g170405 = Data4_g170405.Shader;
				Out_Emissive4_g170405= Data4_g170405.Emissive;
				Out_MultiMask4_g170405 = Data4_g170405.MultiMask;
				Out_Grayscale4_g170405 = Data4_g170405.Grayscale;
				Out_Luminosity4_g170405= Data4_g170405.Luminosity;
				Out_AlphaClip4_g170405 = Data4_g170405.AlphaClip;
				Out_AlphaFade4_g170405 = Data4_g170405.AlphaFade;
				Out_Translucency4_g170405 = Data4_g170405.Translucency;
				Out_Transmission4_g170405 = Data4_g170405.Transmission;
				Out_Thickness4_g170405 = Data4_g170405.Thickness;
				Out_Diffusion4_g170405 = Data4_g170405.Diffusion;
				}
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170405;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				float localFilterTexture19_g170411 = ( 0.0 );
				SamplerState SS19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170411 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170411 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170411 = SamplerDefault19_g170411;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170411 = SamplerDefault19_g170411;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170411 = SamplerPoint19_g170411;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170411 = SamplerLow19_g170411;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170411 = SamplerMedium19_g170411;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170411 = SamplerHigh19_g170411;
				#endif
				}
				SamplerState Sampler276_g170395 = SS19_g170411;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord4.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = SS19_g170411;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.ase_texcoord5.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = SS19_g170411;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170414 = Data16_g170201;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				}
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = SS19_g170411;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = SS19_g170411;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = SS19_g170411;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				float localFilterTexture30_g170413 = ( 0.0 );
				SamplerState SS30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170413 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170413 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170413 = SamplerDefault30_g170413;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170413 = SamplerDefault30_g170413;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170413 = SamplerPoint30_g170413;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170413 = SamplerLow30_g170413;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170413 = SamplerMedium30_g170413;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170413 = SamplerHigh30_g170413;
				#endif
				}
				SamplerState Sampler276_g170397 = SS30_g170413;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord4.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = SS30_g170413;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.ase_texcoord5.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = SS30_g170413;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = SS30_g170413;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = SS30_g170413;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = SS30_g170413;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170416 = _SecondMultiRemap.x;
				float temp_output_9_0_g170416 = ( clampResult17_g170401 - temp_output_7_0_g170416 );
				float temp_output_765_0_g170394 = saturate( ( ( temp_output_9_0_g170416 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord4.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord5.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170418 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170422 = _SecondMaskRemap.x;
				float temp_output_9_0_g170422 = ( clampResult17_g170418 - temp_output_7_0_g170422 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170422 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half Visual_Luminosity1041_g170394 = Out_Luminosity4_g170405;
				float clampResult17_g170427 = clamp( Visual_Luminosity1041_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170428 = _SecondLumaRemap.x;
				float temp_output_9_0_g170428 = ( clampResult17_g170427 - temp_output_7_0_g170428 );
				float lerpResult1036_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170428 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170394 = lerpResult1036_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170405;
				float clampResult17_g170423 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _SecondProjRemap.x;
				float temp_output_9_0_g170425 = ( clampResult17_g170423 - temp_output_7_0_g170425 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170425 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170414;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170419 = _second_vert_mode;
				float temp_output_30_0_g170419 = ( break965_g170394.x * break33_g170419.x );
				float temp_output_29_0_g170419 = ( break965_g170394.y * break33_g170419.y );
				float temp_output_31_0_g170419 = ( break965_g170394.z * break33_g170419.z );
				float temp_output_28_0_g170419 = ( temp_output_30_0_g170419 + temp_output_29_0_g170419 + temp_output_31_0_g170419 + ( break965_g170394.w * break33_g170419.w ) );
				float clampResult17_g170417 = clamp( temp_output_28_0_g170419 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170421 = _SecondMeshRemap.x;
				float temp_output_9_0_g170421 = ( clampResult17_g170417 - temp_output_7_0_g170421 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170421 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170420 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170420 = ( temp_output_6_0_g170420 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170420 = temp_output_6_0_g170420;
				#endif
				half Blend_VertMask918_g170394 = staticSwitch14_g170420;
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatParams204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintParams204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowParams204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoParams204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeParams204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormParams204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowParams204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatParams = In_CoatParams204_g170214;
				Data204_g170214.PaintParams = In_PaintParams204_g170214;
				Data204_g170214.GlowParams = In_GlowParams204_g170214;
				Data204_g170214.AtmoParams = In_AtmoParams204_g170214;
				Data204_g170214.FadeParams = In_FadeParams204_g170214;
				Data204_g170214.FormParams= In_FormParams204_g170214;
				Data204_g170214.FlowParams = In_FlowParams204_g170214;
				}
				TVEGlobalData Data15_g170404 = Data204_g170214;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170404 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatParams15_g170404 = Data15_g170404.CoatParams;
				Out_PaintParams15_g170404 = Data15_g170404.PaintParams;
				Out_GlowParams15_g170404 = Data15_g170404.GlowParams;
				Out_AtmoParams15_g170404= Data15_g170404.AtmoParams;
				Out_FadeParams15_g170404= Data15_g170404.FadeParams;
				Out_FormParams15_g170404 = Data15_g170404.FormParams;
				Out_FlowParams15_g170404 = Data15_g170404.FlowParams;
				}
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170404;
				float temp_output_6_0_g170429 = (Global_CoatParams975_g170394).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170429 = ( temp_output_6_0_g170429 + ( _SecondElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170429 = temp_output_6_0_g170429;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = staticSwitch14_g170429;
				#else
				float staticSwitch971_g170394 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170394 = lerp( 1.0 , staticSwitch971_g170394 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170394 = lerpResult1013_g170394;
				float clampResult17_g170424 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_LumaMask1033_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170426 = _SecondBlendRemap.x;
				float temp_output_9_0_g170426 = ( clampResult17_g170424 - temp_output_7_0_g170426 );
				half Blend_Mask412_g170394 = ( saturate( ( ( temp_output_9_0_g170426 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170415 = Final_Albedo601_g170394;
				float3 In_AlbedoRaw3_g170415 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170405;
				float2 lerpResult40_g170406 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				float localFilterTexture29_g170412 = ( 0.0 );
				SamplerState SS29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170412 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170412 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170412 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170412 = SamplerDefault29_g170412;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170412 = SamplerDefault29_g170412;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170412 = SamplerPoint29_g170412;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170412 = SamplerLow29_g170412;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170412 = SamplerMedium29_g170412;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170412 = SamplerHigh29_g170412;
				#endif
				}
				SamplerState Sampler276_g170396 = SS29_g170412;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord4.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = SS29_g170412;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.ase_texcoord5.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = SS29_g170412;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = SS29_g170412;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = SS29_g170412;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = SS29_g170412;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170406 = ( lerpResult40_g170406 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170406 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170415 = Final_NormalTS612_g170394;
				float3 appendResult68_g170407 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170407 = appendResult68_g170407;
				float3 worldNormal74_g170407 = normalize( float3(dot(tanToWorld0,tanNormal74_g170407), dot(tanToWorld1,tanNormal74_g170407), dot(tanToWorld2,tanNormal74_g170407)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170407;
				float3 In_NormalWS3_g170415 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170405;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170415 = Final_Masks613_g170394;
				float4 In_Emissive3_g170415 = Out_Emissive4_g170405;
				float3 temp_output_3_0_g170409 = Final_Albedo601_g170394;
				float dotResult20_g170409 = dot( temp_output_3_0_g170409 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170409;
				float In_Grayscale3_g170415 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170415 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170405;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170415 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170405;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170415 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170405;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170415 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170415 = Out_Translucency4_g170405;
				float In_Transmission3_g170415 = Out_Transmission4_g170405;
				float In_Thickness3_g170415 = Out_Thickness4_g170405;
				float In_Diffusion3_g170415 = Out_Diffusion4_g170405;
				{
				Data3_g170415.Dummy = In_Dummy3_g170415;
				Data3_g170415.Albedo = In_Albedo3_g170415;
				Data3_g170415.AlbedoRaw = In_AlbedoRaw3_g170415;
				Data3_g170415.NormalTS = In_NormalTS3_g170415;
				Data3_g170415.NormalWS = In_NormalWS3_g170415;
				Data3_g170415.Shader = In_Shader3_g170415;
				Data3_g170415.Emissive= In_Emissive3_g170415;
				Data3_g170415.MultiMask = In_MultiMask3_g170415;
				Data3_g170415.Grayscale = In_Grayscale3_g170415;
				Data3_g170415.Luminosity = In_Luminosity3_g170415;
				Data3_g170415.AlphaClip = In_AlphaClip3_g170415;
				Data3_g170415.AlphaFade = In_AlphaFade3_g170415;
				Data3_g170415.Translucency = In_Translucency3_g170415;
				Data3_g170415.Transmission = In_Transmission3_g170415;
				Data3_g170415.Thickness = In_Thickness3_g170415;
				Data3_g170415.Diffusion = In_Diffusion3_g170415;
				}
				TVEVisualData Data4_g170446 = Data3_g170415;
				float Out_Dummy4_g170446 = 0;
				float3 Out_Albedo4_g170446 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170446 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170446 = float2( 0,0 );
				float3 Out_NormalWS4_g170446 = float3( 0,0,0 );
				float4 Out_Shader4_g170446 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170446 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170446 = 0;
				float Out_Grayscale4_g170446 = 0;
				float Out_Luminosity4_g170446 = 0;
				float Out_AlphaClip4_g170446 = 0;
				float Out_AlphaFade4_g170446 = 0;
				float3 Out_Translucency4_g170446 = float3( 0,0,0 );
				float Out_Transmission4_g170446 = 0;
				float Out_Thickness4_g170446 = 0;
				float Out_Diffusion4_g170446 = 0;
				{
				Out_Dummy4_g170446 = Data4_g170446.Dummy;
				Out_Albedo4_g170446 = Data4_g170446.Albedo;
				Out_AlbedoRaw4_g170446 = Data4_g170446.AlbedoRaw;
				Out_NormalTS4_g170446 = Data4_g170446.NormalTS;
				Out_NormalWS4_g170446 = Data4_g170446.NormalWS;
				Out_Shader4_g170446 = Data4_g170446.Shader;
				Out_Emissive4_g170446= Data4_g170446.Emissive;
				Out_MultiMask4_g170446 = Data4_g170446.MultiMask;
				Out_Grayscale4_g170446 = Data4_g170446.Grayscale;
				Out_Luminosity4_g170446= Data4_g170446.Luminosity;
				Out_AlphaClip4_g170446 = Data4_g170446.AlphaClip;
				Out_AlphaFade4_g170446 = Data4_g170446.AlphaFade;
				Out_Translucency4_g170446 = Data4_g170446.Translucency;
				Out_Transmission4_g170446 = Data4_g170446.Transmission;
				Out_Thickness4_g170446 = Data4_g170446.Thickness;
				Out_Diffusion4_g170446 = Data4_g170446.Diffusion;
				}
				half3 Visual_Albedo527_g170438 = Out_Albedo4_g170446;
				TEXTURE2D(Texture276_g170439) = _ThirdAlbedoTex;
				float localFilterTexture19_g170455 = ( 0.0 );
				SamplerState SS19_g170455 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170455 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170455 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170455 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170455 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170455 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170455 = SamplerDefault19_g170455;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170455 = SamplerDefault19_g170455;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170455 = SamplerPoint19_g170455;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170455 = SamplerLow19_g170455;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170455 = SamplerMedium19_g170455;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170455 = SamplerHigh19_g170455;
				#endif
				}
				SamplerState Sampler276_g170439 = SS19_g170455;
				half4 Local_LayerCoords790_g170438 = _third_coord_value;
				float4 temp_output_37_0_g170439 = Local_LayerCoords790_g170438;
				half4 Coords276_g170439 = temp_output_37_0_g170439;
				half2 TexCoord276_g170439 = packedInput.ase_texcoord4.xy;
				half4 localSampleMain276_g170439 = SampleMain( Texture276_g170439 , Sampler276_g170439 , Coords276_g170439 , TexCoord276_g170439 );
				TEXTURE2D(Texture275_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170439 = SS19_g170455;
				half4 Coords275_g170439 = temp_output_37_0_g170439;
				half2 TexCoord275_g170439 = packedInput.ase_texcoord5.xy;
				half4 localSampleExtra275_g170439 = SampleExtra( Texture275_g170439 , Sampler275_g170439 , Coords275_g170439 , TexCoord275_g170439 );
				TEXTURE2D(Texture238_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170439 = SS19_g170455;
				half4 Coords238_g170439 = temp_output_37_0_g170439;
				TVEModelData Data15_g170458 = Data16_g170201;
				float Out_Dummy15_g170458 = 0;
				float3 Out_PositionWS15_g170458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170458 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170458 = float3( 0,0,0 );
				float4 Out_VertexData15_g170458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170458 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170458 = Data15_g170458.Dummy;
				Out_PositionWS15_g170458 = Data15_g170458.PositionWS;
				Out_PositionWO15_g170458 = Data15_g170458.PositionWO;
				Out_PivotWS15_g170458 = Data15_g170458.PivotWS;
				Out_PivotWO15_g170458 = Data15_g170458.PivotWO;
				Out_NormalWS15_g170458 = Data15_g170458.NormalWS;
				Out_ViewDirWS15_g170458 = Data15_g170458.ViewDirWS;
				Out_VertexData15_g170458 = Data15_g170458.VertexData;
				Out_BoundsData15_g170458 = Data15_g170458.BoundsData;
				}
				half3 Model_PositionWO636_g170438 = Out_PositionWO15_g170458;
				float3 temp_output_279_0_g170439 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170439 = temp_output_279_0_g170439;
				half4 localSamplePlanar2D238_g170439 = SamplePlanar2D( Texture238_g170439 , Sampler238_g170439 , Coords238_g170439 , WorldPosition238_g170439 );
				TEXTURE2D(Texture246_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170439 = SS19_g170455;
				half4 Coords246_g170439 = temp_output_37_0_g170439;
				half3 WorldPosition246_g170439 = temp_output_279_0_g170439;
				half3 Model_NormalWS869_g170438 = Out_NormalWS15_g170458;
				float3 temp_output_280_0_g170439 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170439 = temp_output_280_0_g170439;
				half4 localSamplePlanar3D246_g170439 = SamplePlanar3D( Texture246_g170439 , Sampler246_g170439 , Coords246_g170439 , WorldPosition246_g170439 , WorldNormal246_g170439 );
				TEXTURE2D(Texture234_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170439 = SS19_g170455;
				float4 Coords234_g170439 = temp_output_37_0_g170439;
				float3 WorldPosition234_g170439 = temp_output_279_0_g170439;
				float4 localSampleStochastic2D234_g170439 = SampleStochastic2D( Texture234_g170439 , Sampler234_g170439 , Coords234_g170439 , WorldPosition234_g170439 );
				TEXTURE2D(Texture263_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170439 = SS19_g170455;
				half4 Coords263_g170439 = temp_output_37_0_g170439;
				half3 WorldPosition263_g170439 = temp_output_279_0_g170439;
				half3 WorldNormal263_g170439 = temp_output_280_0_g170439;
				half4 localSampleStochastic3D263_g170439 = SampleStochastic3D( Texture263_g170439 , Sampler263_g170439 , Coords263_g170439 , WorldPosition263_g170439 , WorldNormal263_g170439 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170438 = localSampleMain276_g170439;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170438 = localSampleExtra275_g170439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170438 = localSamplePlanar2D238_g170439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170438 = localSamplePlanar3D246_g170439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170438 = localSampleStochastic2D234_g170439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170438 = localSampleStochastic3D263_g170439;
				#else
				float4 staticSwitch693_g170438 = localSampleMain276_g170439;
				#endif
				half4 Local_AlbedoTex777_g170438 = staticSwitch693_g170438;
				float3 lerpResult716_g170438 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170438).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170438 = lerpResult716_g170438;
				TEXTURE2D(Texture276_g170441) = _ThirdShaderTex;
				float localFilterTexture30_g170457 = ( 0.0 );
				SamplerState SS30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170457 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170457 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170457 = SamplerDefault30_g170457;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170457 = SamplerDefault30_g170457;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170457 = SamplerPoint30_g170457;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170457 = SamplerLow30_g170457;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170457 = SamplerMedium30_g170457;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170457 = SamplerHigh30_g170457;
				#endif
				}
				SamplerState Sampler276_g170441 = SS30_g170457;
				float4 temp_output_37_0_g170441 = Local_LayerCoords790_g170438;
				half4 Coords276_g170441 = temp_output_37_0_g170441;
				half2 TexCoord276_g170441 = packedInput.ase_texcoord4.xy;
				half4 localSampleMain276_g170441 = SampleMain( Texture276_g170441 , Sampler276_g170441 , Coords276_g170441 , TexCoord276_g170441 );
				TEXTURE2D(Texture275_g170441) = _ThirdShaderTex;
				SamplerState Sampler275_g170441 = SS30_g170457;
				half4 Coords275_g170441 = temp_output_37_0_g170441;
				half2 TexCoord275_g170441 = packedInput.ase_texcoord5.xy;
				half4 localSampleExtra275_g170441 = SampleExtra( Texture275_g170441 , Sampler275_g170441 , Coords275_g170441 , TexCoord275_g170441 );
				TEXTURE2D(Texture238_g170441) = _ThirdShaderTex;
				SamplerState Sampler238_g170441 = SS30_g170457;
				half4 Coords238_g170441 = temp_output_37_0_g170441;
				float3 temp_output_279_0_g170441 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170441 = temp_output_279_0_g170441;
				half4 localSamplePlanar2D238_g170441 = SamplePlanar2D( Texture238_g170441 , Sampler238_g170441 , Coords238_g170441 , WorldPosition238_g170441 );
				TEXTURE2D(Texture246_g170441) = _ThirdShaderTex;
				SamplerState Sampler246_g170441 = SS30_g170457;
				half4 Coords246_g170441 = temp_output_37_0_g170441;
				half3 WorldPosition246_g170441 = temp_output_279_0_g170441;
				float3 temp_output_280_0_g170441 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170441 = temp_output_280_0_g170441;
				half4 localSamplePlanar3D246_g170441 = SamplePlanar3D( Texture246_g170441 , Sampler246_g170441 , Coords246_g170441 , WorldPosition246_g170441 , WorldNormal246_g170441 );
				TEXTURE2D(Texture234_g170441) = _ThirdShaderTex;
				SamplerState Sampler234_g170441 = SS30_g170457;
				float4 Coords234_g170441 = temp_output_37_0_g170441;
				float3 WorldPosition234_g170441 = temp_output_279_0_g170441;
				float4 localSampleStochastic2D234_g170441 = SampleStochastic2D( Texture234_g170441 , Sampler234_g170441 , Coords234_g170441 , WorldPosition234_g170441 );
				TEXTURE2D(Texture263_g170441) = _ThirdShaderTex;
				SamplerState Sampler263_g170441 = SS30_g170457;
				half4 Coords263_g170441 = temp_output_37_0_g170441;
				half3 WorldPosition263_g170441 = temp_output_279_0_g170441;
				half3 WorldNormal263_g170441 = temp_output_280_0_g170441;
				half4 localSampleStochastic3D263_g170441 = SampleStochastic3D( Texture263_g170441 , Sampler263_g170441 , Coords263_g170441 , WorldPosition263_g170441 , WorldNormal263_g170441 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170438 = localSampleMain276_g170441;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170438 = localSampleExtra275_g170441;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170438 = localSamplePlanar2D238_g170441;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170438 = localSamplePlanar3D246_g170441;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170438 = localSampleStochastic2D234_g170441;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170438 = localSampleStochastic3D263_g170441;
				#else
				float4 staticSwitch722_g170438 = localSampleMain276_g170441;
				#endif
				half4 Local_ShaderTex775_g170438 = staticSwitch722_g170438;
				float lerpResult739_g170438 = lerp( 1.0 , (Local_ShaderTex775_g170438).y , _ThirdOcclusionValue);
				float4 appendResult749_g170438 = (float4(( (Local_ShaderTex775_g170438).x * _ThirdMetallicValue ) , lerpResult739_g170438 , (Local_ShaderTex775_g170438).z , ( (Local_ShaderTex775_g170438).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170438 = appendResult749_g170438;
				float clampResult17_g170444 = clamp( (Local_Masks750_g170438).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170459 = ( clampResult17_g170444 - temp_output_7_0_g170459 );
				float temp_output_765_0_g170438 = saturate( ( ( temp_output_9_0_g170459 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170438 = temp_output_765_0_g170438;
				float lerpResult705_g170438 = lerp( 1.0 , Local_MultiMask767_g170438 , _ThirdColorMode);
				float4 lerpResult706_g170438 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170438);
				half3 Local_ColorRGB774_g170438 = (lerpResult706_g170438).rgb;
				half3 Local_Albedo768_g170438 = ( Local_AlbedoRGB771_g170438 * Local_ColorRGB774_g170438 );
				float3 lerpResult985_g170438 = lerp( Local_Albedo768_g170438 , ( Visual_Albedo527_g170438 * Local_Albedo768_g170438 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170453) = _ThirdMaskTex;
				SamplerState Sampler276_g170453 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170438 = _third_mask_coord_value;
				float4 temp_output_37_0_g170453 = Local_MaskCoords813_g170438;
				half4 Coords276_g170453 = temp_output_37_0_g170453;
				half2 TexCoord276_g170453 = packedInput.ase_texcoord4.xy;
				half4 localSampleMain276_g170453 = SampleMain( Texture276_g170453 , Sampler276_g170453 , Coords276_g170453 , TexCoord276_g170453 );
				TEXTURE2D(Texture275_g170453) = _ThirdMaskTex;
				SamplerState Sampler275_g170453 = sampler_Linear_Repeat;
				half4 Coords275_g170453 = temp_output_37_0_g170453;
				half2 TexCoord275_g170453 = packedInput.ase_texcoord5.xy;
				half4 localSampleExtra275_g170453 = SampleExtra( Texture275_g170453 , Sampler275_g170453 , Coords275_g170453 , TexCoord275_g170453 );
				TEXTURE2D(Texture238_g170453) = _ThirdMaskTex;
				SamplerState Sampler238_g170453 = sampler_Linear_Repeat;
				half4 Coords238_g170453 = temp_output_37_0_g170453;
				float3 temp_output_279_0_g170453 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170453 = temp_output_279_0_g170453;
				half4 localSamplePlanar2D238_g170453 = SamplePlanar2D( Texture238_g170453 , Sampler238_g170453 , Coords238_g170453 , WorldPosition238_g170453 );
				TEXTURE2D(Texture246_g170453) = _ThirdMaskTex;
				SamplerState Sampler246_g170453 = sampler_Linear_Repeat;
				half4 Coords246_g170453 = temp_output_37_0_g170453;
				half3 WorldPosition246_g170453 = temp_output_279_0_g170453;
				float3 temp_output_280_0_g170453 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170453 = temp_output_280_0_g170453;
				half4 localSamplePlanar3D246_g170453 = SamplePlanar3D( Texture246_g170453 , Sampler246_g170453 , Coords246_g170453 , WorldPosition246_g170453 , WorldNormal246_g170453 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170438 = localSampleMain276_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170438 = localSampleExtra275_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170438 = localSamplePlanar2D238_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170438 = localSamplePlanar3D246_g170453;
				#else
				float4 staticSwitch817_g170438 = localSampleMain276_g170453;
				#endif
				half4 Local_MaskTex861_g170438 = staticSwitch817_g170438;
				float clampResult17_g170461 = clamp( (Local_MaskTex861_g170438).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170465 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170465 = ( clampResult17_g170461 - temp_output_7_0_g170465 );
				float lerpResult1028_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170465 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170438 = lerpResult1028_g170438;
				half Visual_Luminosity1049_g170438 = Out_Luminosity4_g170446;
				float clampResult17_g170470 = clamp( Visual_Luminosity1049_g170438 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170471 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170471 = ( clampResult17_g170470 - temp_output_7_0_g170471 );
				float lerpResult1040_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170471 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170438 = lerpResult1040_g170438;
				half4 Model_VertexMasks960_g170438 = Out_VertexData15_g170458;
				float4 break961_g170438 = Model_VertexMasks960_g170438;
				float4 break33_g170462 = _third_vert_mode;
				float temp_output_30_0_g170462 = ( break961_g170438.x * break33_g170462.x );
				float temp_output_29_0_g170462 = ( break961_g170438.y * break33_g170462.y );
				float temp_output_31_0_g170462 = ( break961_g170438.z * break33_g170462.z );
				float temp_output_28_0_g170462 = ( temp_output_30_0_g170462 + temp_output_29_0_g170462 + temp_output_31_0_g170462 + ( break961_g170438.w * break33_g170462.w ) );
				float clampResult17_g170460 = clamp( temp_output_28_0_g170462 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170464 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170464 = ( clampResult17_g170460 - temp_output_7_0_g170464 );
				float lerpResult1026_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170464 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170463 = lerpResult1026_g170438;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170463 = ( temp_output_6_0_g170463 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170463 = temp_output_6_0_g170463;
				#endif
				half Blend_VertMask913_g170438 = staticSwitch14_g170463;
				half3 Visual_NormalWS953_g170438 = Out_NormalWS4_g170446;
				float clampResult17_g170466 = clamp( saturate( (Visual_NormalWS953_g170438).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170468 = _ThirdProjRemap.x;
				float temp_output_9_0_g170468 = ( clampResult17_g170466 - temp_output_7_0_g170468 );
				float lerpResult1004_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170468 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170438 = lerpResult1004_g170438;
				TVEGlobalData Data15_g170448 = Data204_g170214;
				float Out_Dummy15_g170448 = 0;
				float4 Out_CoatParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170448 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170448 = Data15_g170448.Dummy;
				Out_CoatParams15_g170448 = Data15_g170448.CoatParams;
				Out_PaintParams15_g170448 = Data15_g170448.PaintParams;
				Out_GlowParams15_g170448 = Data15_g170448.GlowParams;
				Out_AtmoParams15_g170448= Data15_g170448.AtmoParams;
				Out_FadeParams15_g170448= Data15_g170448.FadeParams;
				Out_FormParams15_g170448 = Data15_g170448.FormParams;
				Out_FlowParams15_g170448 = Data15_g170448.FlowParams;
				}
				half4 Global_CoatParams972_g170438 = Out_CoatParams15_g170448;
				float temp_output_6_0_g170472 = (Global_CoatParams972_g170438).y;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170472 = ( temp_output_6_0_g170472 + ( _ThirdElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170472 = temp_output_6_0_g170472;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170438 = staticSwitch14_g170472;
				#else
				float staticSwitch1056_g170438 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170438 = lerp( 1.0 , staticSwitch1056_g170438 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170438 = lerpResult1060_g170438;
				float clampResult17_g170467 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170438 * Blend_LumaMask1046_g170438 * Blend_VertMask913_g170438 * Blend_ProjMask912_g170438 * Blend_GlobalMask968_g170438 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170469 = ( clampResult17_g170467 - temp_output_7_0_g170469 );
				half Detail_Mask412_g170438 = ( saturate( ( ( temp_output_9_0_g170469 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170438 = lerp( Visual_Albedo527_g170438 , lerpResult985_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170438 = lerpResult989_g170438;
				#else
				float3 staticSwitch415_g170438 = Visual_Albedo527_g170438;
				#endif
				half3 Final_Albedo601_g170438 = staticSwitch415_g170438;
				float3 In_Albedo3_g170447 = Final_Albedo601_g170438;
				float3 In_AlbedoRaw3_g170447 = Final_Albedo601_g170438;
				half2 Visual_NormalTS529_g170438 = Out_NormalTS4_g170446;
				float2 lerpResult40_g170449 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170438 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170440) = _ThirdNormalTex;
				float localFilterTexture29_g170456 = ( 0.0 );
				SamplerState SS29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170456 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170456 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170456 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170456 = SamplerDefault29_g170456;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170456 = SamplerDefault29_g170456;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170456 = SamplerPoint29_g170456;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170456 = SamplerLow29_g170456;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170456 = SamplerMedium29_g170456;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170456 = SamplerHigh29_g170456;
				#endif
				}
				SamplerState Sampler276_g170440 = SS29_g170456;
				float4 temp_output_37_0_g170440 = Local_LayerCoords790_g170438;
				half4 Coords276_g170440 = temp_output_37_0_g170440;
				half2 TexCoord276_g170440 = packedInput.ase_texcoord4.xy;
				half4 localSampleMain276_g170440 = SampleMain( Texture276_g170440 , Sampler276_g170440 , Coords276_g170440 , TexCoord276_g170440 );
				TEXTURE2D(Texture275_g170440) = _ThirdNormalTex;
				SamplerState Sampler275_g170440 = SS29_g170456;
				half4 Coords275_g170440 = temp_output_37_0_g170440;
				half2 TexCoord275_g170440 = packedInput.ase_texcoord5.xy;
				half4 localSampleExtra275_g170440 = SampleExtra( Texture275_g170440 , Sampler275_g170440 , Coords275_g170440 , TexCoord275_g170440 );
				TEXTURE2D(Texture238_g170440) = _ThirdNormalTex;
				SamplerState Sampler238_g170440 = SS29_g170456;
				half4 Coords238_g170440 = temp_output_37_0_g170440;
				float3 temp_output_279_0_g170440 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170440 = temp_output_279_0_g170440;
				half4 localSamplePlanar2D238_g170440 = SamplePlanar2D( Texture238_g170440 , Sampler238_g170440 , Coords238_g170440 , WorldPosition238_g170440 );
				TEXTURE2D(Texture246_g170440) = _ThirdNormalTex;
				SamplerState Sampler246_g170440 = SS29_g170456;
				half4 Coords246_g170440 = temp_output_37_0_g170440;
				half3 WorldPosition246_g170440 = temp_output_279_0_g170440;
				float3 temp_output_280_0_g170440 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170440 = temp_output_280_0_g170440;
				half4 localSamplePlanar3D246_g170440 = SamplePlanar3D( Texture246_g170440 , Sampler246_g170440 , Coords246_g170440 , WorldPosition246_g170440 , WorldNormal246_g170440 );
				TEXTURE2D(Texture234_g170440) = _ThirdNormalTex;
				SamplerState Sampler234_g170440 = SS29_g170456;
				float4 Coords234_g170440 = temp_output_37_0_g170440;
				float3 WorldPosition234_g170440 = temp_output_279_0_g170440;
				float4 localSampleStochastic2D234_g170440 = SampleStochastic2D( Texture234_g170440 , Sampler234_g170440 , Coords234_g170440 , WorldPosition234_g170440 );
				TEXTURE2D(Texture263_g170440) = _ThirdNormalTex;
				SamplerState Sampler263_g170440 = SS29_g170456;
				half4 Coords263_g170440 = temp_output_37_0_g170440;
				half3 WorldPosition263_g170440 = temp_output_279_0_g170440;
				half3 WorldNormal263_g170440 = temp_output_280_0_g170440;
				half4 localSampleStochastic3D263_g170440 = SampleStochastic3D( Texture263_g170440 , Sampler263_g170440 , Coords263_g170440 , WorldPosition263_g170440 , WorldNormal263_g170440 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170438 = localSampleMain276_g170440;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170438 = localSampleExtra275_g170440;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170438 = localSamplePlanar2D238_g170440;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170438 = localSamplePlanar3D246_g170440;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170438 = localSampleStochastic2D234_g170440;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170438 = localSampleStochastic3D263_g170440;
				#else
				float4 staticSwitch698_g170438 = localSampleMain276_g170440;
				#endif
				half4 Local_NormalTex776_g170438 = staticSwitch698_g170438;
				half4 Normal_Packed45_g170442 = Local_NormalTex776_g170438;
				float2 appendResult58_g170442 = (float2(( (Normal_Packed45_g170442).x * (Normal_Packed45_g170442).w ) , (Normal_Packed45_g170442).y));
				half2 Normal_Default50_g170442 = appendResult58_g170442;
				half2 Normal_ASTC41_g170442 = (Normal_Packed45_g170442).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170442 = Normal_ASTC41_g170442;
				#else
				float2 staticSwitch38_g170442 = Normal_Default50_g170442;
				#endif
				half2 Normal_NO_DTX544_g170442 = (Normal_Packed45_g170442).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170442 = Normal_NO_DTX544_g170442;
				#else
				float2 staticSwitch37_g170442 = staticSwitch38_g170442;
				#endif
				float2 temp_output_724_0_g170438 = ( (staticSwitch37_g170442*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170443 = temp_output_724_0_g170438;
				float2 break71_g170443 = Normal_Planar45_g170443;
				float3 appendResult72_g170443 = (float3(break71_g170443.x , 0.0 , break71_g170443.y));
				float2 temp_output_858_0_g170438 = (mul( ase_worldToTangent, appendResult72_g170443 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#else
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#endif
				half2 Local_NormalTS729_g170438 = staticSwitch727_g170438;
				float2 temp_output_36_0_g170449 = ( lerpResult40_g170449 + Local_NormalTS729_g170438 );
				float2 lerpResult405_g170438 = lerp( Visual_NormalTS529_g170438 , temp_output_36_0_g170449 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170438 = lerpResult405_g170438;
				#else
				float2 staticSwitch418_g170438 = Visual_NormalTS529_g170438;
				#endif
				half2 Final_NormalTS612_g170438 = staticSwitch418_g170438;
				float2 In_NormalTS3_g170447 = Final_NormalTS612_g170438;
				float3 appendResult68_g170450 = (float3(Final_NormalTS612_g170438 , 1.0));
				float3 tanNormal74_g170450 = appendResult68_g170450;
				float3 worldNormal74_g170450 = normalize( float3(dot(tanToWorld0,tanNormal74_g170450), dot(tanToWorld1,tanNormal74_g170450), dot(tanToWorld2,tanNormal74_g170450)) );
				half3 Final_NormalWS956_g170438 = worldNormal74_g170450;
				float3 In_NormalWS3_g170447 = Final_NormalWS956_g170438;
				half4 Visual_Shader531_g170438 = Out_Shader4_g170446;
				float4 lerpResult1000_g170438 = lerp( Local_Masks750_g170438 , ( Visual_Shader531_g170438 * Local_Masks750_g170438 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170438 = lerp( Visual_Shader531_g170438 , lerpResult1000_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170438 = lerpResult998_g170438;
				#else
				float4 staticSwitch451_g170438 = Visual_Shader531_g170438;
				#endif
				half4 Final_Masks613_g170438 = staticSwitch451_g170438;
				float4 In_Shader3_g170447 = Final_Masks613_g170438;
				float4 In_Emissive3_g170447 = Out_Emissive4_g170446;
				float3 temp_output_3_0_g170452 = Final_Albedo601_g170438;
				float dotResult20_g170452 = dot( temp_output_3_0_g170452 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170438 = dotResult20_g170452;
				float In_Grayscale3_g170447 = Final_Grayscale615_g170438;
				float clampResult651_g170438 = clamp( saturate( ( Final_Grayscale615_g170438 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170438 = clampResult651_g170438;
				float In_Luminosity3_g170447 = Final_Luminosity652_g170438;
				half Visual_MultiMask547_g170438 = Out_MultiMask4_g170446;
				float lerpResult477_g170438 = lerp( Visual_MultiMask547_g170438 , Local_MultiMask767_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch482_g170438 = lerpResult477_g170438;
				#else
				float staticSwitch482_g170438 = Visual_MultiMask547_g170438;
				#endif
				half Final_MultiMask572_g170438 = staticSwitch482_g170438;
				float In_MultiMask3_g170447 = Final_MultiMask572_g170438;
				half Visual_AlphaClip559_g170438 = Out_AlphaClip4_g170446;
				float temp_output_718_0_g170438 = (Local_AlbedoTex777_g170438).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170438 = ( temp_output_718_0_g170438 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170438 = temp_output_718_0_g170438;
				#endif
				half Local_AlphaClip772_g170438 = staticSwitch924_g170438;
				float lerpResult448_g170438 = lerp( Visual_AlphaClip559_g170438 , Local_AlphaClip772_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch564_g170438 = lerpResult448_g170438;
				#else
				float staticSwitch564_g170438 = Visual_AlphaClip559_g170438;
				#endif
				half Final_AlphaClip602_g170438 = staticSwitch564_g170438;
				float In_AlphaClip3_g170447 = Final_AlphaClip602_g170438;
				half Visual_AlphaFade588_g170438 = Out_AlphaFade4_g170446;
				half Local_AlphaFade773_g170438 = (lerpResult706_g170438).a;
				float lerpResult604_g170438 = lerp( Visual_AlphaFade588_g170438 , Local_AlphaFade773_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch608_g170438 = lerpResult604_g170438;
				#else
				float staticSwitch608_g170438 = Visual_AlphaFade588_g170438;
				#endif
				half Final_AlphaFade611_g170438 = staticSwitch608_g170438;
				float In_AlphaFade3_g170447 = Final_AlphaFade611_g170438;
				float3 In_Translucency3_g170447 = Out_Translucency4_g170446;
				float In_Transmission3_g170447 = Out_Transmission4_g170446;
				float In_Thickness3_g170447 = Out_Thickness4_g170446;
				float In_Diffusion3_g170447 = Out_Diffusion4_g170446;
				{
				Data3_g170447.Dummy = In_Dummy3_g170447;
				Data3_g170447.Albedo = In_Albedo3_g170447;
				Data3_g170447.AlbedoRaw = In_AlbedoRaw3_g170447;
				Data3_g170447.NormalTS = In_NormalTS3_g170447;
				Data3_g170447.NormalWS = In_NormalWS3_g170447;
				Data3_g170447.Shader = In_Shader3_g170447;
				Data3_g170447.Emissive= In_Emissive3_g170447;
				Data3_g170447.MultiMask = In_MultiMask3_g170447;
				Data3_g170447.Grayscale = In_Grayscale3_g170447;
				Data3_g170447.Luminosity = In_Luminosity3_g170447;
				Data3_g170447.AlphaClip = In_AlphaClip3_g170447;
				Data3_g170447.AlphaFade = In_AlphaFade3_g170447;
				Data3_g170447.Translucency = In_Translucency3_g170447;
				Data3_g170447.Transmission = In_Transmission3_g170447;
				Data3_g170447.Thickness = In_Thickness3_g170447;
				Data3_g170447.Diffusion = In_Diffusion3_g170447;
				}
				TVEVisualData Data4_g170545 = Data3_g170447;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				{
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				}
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170552 = Data16_g170201;
				float Out_Dummy15_g170552 = 0;
				float3 Out_PositionWS15_g170552 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170552 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170552 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170552 = float3( 0,0,0 );
				float4 Out_VertexData15_g170552 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170552 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170552 = Data15_g170552.Dummy;
				Out_PositionWS15_g170552 = Data15_g170552.PositionWS;
				Out_PositionWO15_g170552 = Data15_g170552.PositionWO;
				Out_PivotWS15_g170552 = Data15_g170552.PivotWS;
				Out_PivotWO15_g170552 = Data15_g170552.PivotWO;
				Out_NormalWS15_g170552 = Data15_g170552.NormalWS;
				Out_ViewDirWS15_g170552 = Data15_g170552.ViewDirWS;
				Out_VertexData15_g170552 = Data15_g170552.VertexData;
				Out_BoundsData15_g170552 = Data15_g170552.BoundsData;
				}
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170552;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170550 = _occlusion_vert_mode;
				float temp_output_30_0_g170550 = ( break208_g170544.x * break33_g170550.x );
				float temp_output_29_0_g170550 = ( break208_g170544.y * break33_g170550.y );
				float temp_output_31_0_g170550 = ( break208_g170544.z * break33_g170550.z );
				float temp_output_28_0_g170550 = ( temp_output_30_0_g170550 + temp_output_29_0_g170550 + temp_output_31_0_g170550 + ( break208_g170544.w * break33_g170550.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170550;
				float clampResult17_g170548 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170553 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170553 = ( clampResult17_g170548 - temp_output_7_0_g170553 );
				float temp_output_6_0_g170549 = saturate( ( ( temp_output_9_0_g170553 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170549 = ( temp_output_6_0_g170549 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170549 = temp_output_6_0_g170549;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170549;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				{
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				}
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				{
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				}
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170562 = Data16_g170201;
				float Out_Dummy15_g170562 = 0;
				float3 Out_PositionWS15_g170562 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170562 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170562 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170562 = float3( 0,0,0 );
				float4 Out_VertexData15_g170562 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170562 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170562 = Data15_g170562.Dummy;
				Out_PositionWS15_g170562 = Data15_g170562.PositionWS;
				Out_PositionWO15_g170562 = Data15_g170562.PositionWO;
				Out_PivotWS15_g170562 = Data15_g170562.PivotWS;
				Out_PivotWO15_g170562 = Data15_g170562.PivotWO;
				Out_NormalWS15_g170562 = Data15_g170562.NormalWS;
				Out_ViewDirWS15_g170562 = Data15_g170562.ViewDirWS;
				Out_VertexData15_g170562 = Data15_g170562.VertexData;
				Out_BoundsData15_g170562 = Data15_g170562.BoundsData;
				}
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170562;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170563 = _GradientMeshRemap.x;
				float temp_output_9_0_g170563 = ( clampResult17_g170560 - temp_output_7_0_g170563 );
				float temp_output_6_0_g170561 = saturate( ( ( temp_output_9_0_g170563 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170561 = ( temp_output_6_0_g170561 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170561 = temp_output_6_0_g170561;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170561;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				{
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				}
				TVEVisualData Data4_g170566 = Data3_g170557;
				float Out_Dummy4_g170566 = 0;
				float3 Out_Albedo4_g170566 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170566 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170566 = float2( 0,0 );
				float3 Out_NormalWS4_g170566 = float3( 0,0,0 );
				float4 Out_Shader4_g170566 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170566 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170566 = 0;
				float Out_Grayscale4_g170566 = 0;
				float Out_Luminosity4_g170566 = 0;
				float Out_AlphaClip4_g170566 = 0;
				float Out_AlphaFade4_g170566 = 0;
				float3 Out_Translucency4_g170566 = float3( 0,0,0 );
				float Out_Transmission4_g170566 = 0;
				float Out_Thickness4_g170566 = 0;
				float Out_Diffusion4_g170566 = 0;
				{
				Out_Dummy4_g170566 = Data4_g170566.Dummy;
				Out_Albedo4_g170566 = Data4_g170566.Albedo;
				Out_AlbedoRaw4_g170566 = Data4_g170566.AlbedoRaw;
				Out_NormalTS4_g170566 = Data4_g170566.NormalTS;
				Out_NormalWS4_g170566 = Data4_g170566.NormalWS;
				Out_Shader4_g170566 = Data4_g170566.Shader;
				Out_Emissive4_g170566= Data4_g170566.Emissive;
				Out_MultiMask4_g170566 = Data4_g170566.MultiMask;
				Out_Grayscale4_g170566 = Data4_g170566.Grayscale;
				Out_Luminosity4_g170566= Data4_g170566.Luminosity;
				Out_AlphaClip4_g170566 = Data4_g170566.AlphaClip;
				Out_AlphaFade4_g170566 = Data4_g170566.AlphaFade;
				Out_Translucency4_g170566 = Data4_g170566.Translucency;
				Out_Transmission4_g170566 = Data4_g170566.Transmission;
				Out_Thickness4_g170566 = Data4_g170566.Thickness;
				Out_Diffusion4_g170566 = Data4_g170566.Diffusion;
				}
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170566;
				TVEModelData Data15_g170571 = Data16_g170201;
				float Out_Dummy15_g170571 = 0;
				float3 Out_PositionWS15_g170571 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170571 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170571 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170571 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170571 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170571 = float3( 0,0,0 );
				float4 Out_VertexData15_g170571 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170571 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170571 = Data15_g170571.Dummy;
				Out_PositionWS15_g170571 = Data15_g170571.PositionWS;
				Out_PositionWO15_g170571 = Data15_g170571.PositionWO;
				Out_PivotWS15_g170571 = Data15_g170571.PivotWS;
				Out_PivotWO15_g170571 = Data15_g170571.PivotWO;
				Out_NormalWS15_g170571 = Data15_g170571.NormalWS;
				Out_ViewDirWS15_g170571 = Data15_g170571.ViewDirWS;
				Out_VertexData15_g170571 = Data15_g170571.VertexData;
				Out_BoundsData15_g170571 = Data15_g170571.BoundsData;
				}
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170571;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170571;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170568 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170570 = clamp( tex3DNode60_g170568.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170572 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170572 = ( clampResult17_g170570 - temp_output_7_0_g170572 );
				float temp_output_238_0_g170564 = saturate( ( ( temp_output_9_0_g170572 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170566;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170567 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170567 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170567 = Out_NormalTS4_g170566;
				float3 In_NormalWS3_g170567 = Out_NormalWS4_g170566;
				float4 In_Shader3_g170567 = Out_Shader4_g170566;
				float4 In_Emissive3_g170567 = Out_Emissive4_g170566;
				float3 temp_output_3_0_g170565 = Final_Albedo160_g170564;
				float dotResult20_g170565 = dot( temp_output_3_0_g170565 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170564 = dotResult20_g170565;
				float In_Grayscale3_g170567 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170567 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170567 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170567 = Out_AlphaClip4_g170566;
				float In_AlphaFade3_g170567 = Out_AlphaFade4_g170566;
				float3 In_Translucency3_g170567 = Out_Translucency4_g170566;
				float In_Transmission3_g170567 = Out_Transmission4_g170566;
				float In_Thickness3_g170567 = Out_Thickness4_g170566;
				float In_Diffusion3_g170567 = Out_Diffusion4_g170566;
				{
				Data3_g170567.Dummy = In_Dummy3_g170567;
				Data3_g170567.Albedo = In_Albedo3_g170567;
				Data3_g170567.AlbedoRaw = In_AlbedoRaw3_g170567;
				Data3_g170567.NormalTS = In_NormalTS3_g170567;
				Data3_g170567.NormalWS = In_NormalWS3_g170567;
				Data3_g170567.Shader = In_Shader3_g170567;
				Data3_g170567.Emissive= In_Emissive3_g170567;
				Data3_g170567.MultiMask = In_MultiMask3_g170567;
				Data3_g170567.Grayscale = In_Grayscale3_g170567;
				Data3_g170567.Luminosity = In_Luminosity3_g170567;
				Data3_g170567.AlphaClip = In_AlphaClip3_g170567;
				Data3_g170567.AlphaFade = In_AlphaFade3_g170567;
				Data3_g170567.Translucency = In_Translucency3_g170567;
				Data3_g170567.Transmission = In_Transmission3_g170567;
				Data3_g170567.Thickness = In_Thickness3_g170567;
				Data3_g170567.Diffusion = In_Diffusion3_g170567;
				}
				TVEVisualData Data4_g170579 = Data3_g170567;
				float Out_Dummy4_g170579 = 0;
				float3 Out_Albedo4_g170579 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170579 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170579 = float2( 0,0 );
				float3 Out_NormalWS4_g170579 = float3( 0,0,0 );
				float4 Out_Shader4_g170579 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170579 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170579 = 0;
				float Out_Grayscale4_g170579 = 0;
				float Out_Luminosity4_g170579 = 0;
				float Out_AlphaClip4_g170579 = 0;
				float Out_AlphaFade4_g170579 = 0;
				float3 Out_Translucency4_g170579 = float3( 0,0,0 );
				float Out_Transmission4_g170579 = 0;
				float Out_Thickness4_g170579 = 0;
				float Out_Diffusion4_g170579 = 0;
				{
				Out_Dummy4_g170579 = Data4_g170579.Dummy;
				Out_Albedo4_g170579 = Data4_g170579.Albedo;
				Out_AlbedoRaw4_g170579 = Data4_g170579.AlbedoRaw;
				Out_NormalTS4_g170579 = Data4_g170579.NormalTS;
				Out_NormalWS4_g170579 = Data4_g170579.NormalWS;
				Out_Shader4_g170579 = Data4_g170579.Shader;
				Out_Emissive4_g170579= Data4_g170579.Emissive;
				Out_MultiMask4_g170579 = Data4_g170579.MultiMask;
				Out_Grayscale4_g170579 = Data4_g170579.Grayscale;
				Out_Luminosity4_g170579= Data4_g170579.Luminosity;
				Out_AlphaClip4_g170579 = Data4_g170579.AlphaClip;
				Out_AlphaFade4_g170579 = Data4_g170579.AlphaFade;
				Out_Translucency4_g170579 = Data4_g170579.Translucency;
				Out_Transmission4_g170579 = Data4_g170579.Transmission;
				Out_Thickness4_g170579 = Data4_g170579.Thickness;
				Out_Diffusion4_g170579 = Data4_g170579.Diffusion;
				}
				half3 Visual_Albedo139_g170574 = Out_Albedo4_g170579;
				float temp_output_200_12_g170574 = Out_Grayscale4_g170579;
				half Visual_Grayscale150_g170574 = temp_output_200_12_g170574;
				float3 temp_cast_33 = (Visual_Grayscale150_g170574).xxx;
				TVEGlobalData Data15_g170575 = Data204_g170214;
				float Out_Dummy15_g170575 = 0;
				float4 Out_CoatParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170575 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170575 = Data15_g170575.Dummy;
				Out_CoatParams15_g170575 = Data15_g170575.CoatParams;
				Out_PaintParams15_g170575 = Data15_g170575.PaintParams;
				Out_GlowParams15_g170575 = Data15_g170575.GlowParams;
				Out_AtmoParams15_g170575= Data15_g170575.AtmoParams;
				Out_FadeParams15_g170575= Data15_g170575.FadeParams;
				Out_FormParams15_g170575 = Data15_g170575.FormParams;
				Out_FlowParams15_g170575 = Data15_g170575.FlowParams;
				}
				half4 Global_PaintParams209_g170574 = Out_PaintParams15_g170575;
				float4 temp_output_6_0_g170596 = Global_PaintParams209_g170574;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170596 = ( temp_output_6_0_g170596 + ( _TintingElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170596 = temp_output_6_0_g170596;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170574 = staticSwitch14_g170596;
				#else
				float4 staticSwitch283_g170574 = TVE_PaintParams;
				#endif
				float lerpResult412_g170574 = lerp( 1.0 , ( saturate( (staticSwitch283_g170574).w ) * TVE_IsEnabled ) , _TintingGlobalValue);
				half Tinting_GlobalValue285_g170574 = lerpResult412_g170574;
				float3 lerpResult368_g170574 = lerp( Visual_Albedo139_g170574 , temp_cast_33 , ( Tinting_GlobalValue285_g170574 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g170574 = (staticSwitch283_g170574).xyz;
				float temp_output_200_11_g170574 = Out_MultiMask4_g170579;
				half Visual_MultiMask181_g170574 = temp_output_200_11_g170574;
				float lerpResult147_g170574 = lerp( 1.0 , Visual_MultiMask181_g170574 , _TintingMultiValue);
				half Tinting_MutiMask121_g170574 = lerpResult147_g170574;
				half Tinting_TexMask385_g170574 = 1.0;
				float temp_output_200_15_g170574 = Out_Luminosity4_g170579;
				half Visual_Luminosity257_g170574 = temp_output_200_15_g170574;
				float clampResult17_g170586 = clamp( Visual_Luminosity257_g170574 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170591 = _TintingLumaRemap.x;
				float temp_output_9_0_g170591 = ( clampResult17_g170586 - temp_output_7_0_g170591 );
				float lerpResult228_g170574 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170591 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170574 = lerpResult228_g170574;
				TVEModelData Data15_g170580 = Data16_g170201;
				float Out_Dummy15_g170580 = 0;
				float3 Out_PositionWS15_g170580 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170580 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170580 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170580 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170580 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170580 = float3( 0,0,0 );
				float4 Out_VertexData15_g170580 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170580 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170580 = Data15_g170580.Dummy;
				Out_PositionWS15_g170580 = Data15_g170580.PositionWS;
				Out_PositionWO15_g170580 = Data15_g170580.PositionWO;
				Out_PivotWS15_g170580 = Data15_g170580.PivotWS;
				Out_PivotWO15_g170580 = Data15_g170580.PivotWO;
				Out_NormalWS15_g170580 = Data15_g170580.NormalWS;
				Out_ViewDirWS15_g170580 = Data15_g170580.ViewDirWS;
				Out_VertexData15_g170580 = Data15_g170580.VertexData;
				Out_BoundsData15_g170580 = Data15_g170580.BoundsData;
				}
				half4 Model_VertexMasks307_g170574 = Out_VertexData15_g170580;
				float4 break311_g170574 = Model_VertexMasks307_g170574;
				float4 break33_g170583 = _tinting_vert_mode;
				float temp_output_30_0_g170583 = ( break311_g170574.x * break33_g170583.x );
				float temp_output_29_0_g170583 = ( break311_g170574.y * break33_g170583.y );
				float temp_output_31_0_g170583 = ( break311_g170574.z * break33_g170583.z );
				float temp_output_28_0_g170583 = ( temp_output_30_0_g170583 + temp_output_29_0_g170583 + temp_output_31_0_g170583 + ( break311_g170574.w * break33_g170583.w ) );
				float clampResult17_g170585 = clamp( temp_output_28_0_g170583 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170592 = _TintingMeshRemap.x;
				float temp_output_9_0_g170592 = ( clampResult17_g170585 - temp_output_7_0_g170592 );
				float lerpResult370_g170574 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170592 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170587 = lerpResult370_g170574;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170587 = ( temp_output_6_0_g170587 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170587 = temp_output_6_0_g170587;
				#endif
				half Tinting_VertMask309_g170574 = staticSwitch14_g170587;
				half Tinting_NoiseMask213_g170574 = 1.0;
				half Custom_Mask345_g170574 = 1.0;
				float temp_output_7_0_g170595 = _TintingBlendRemap.x;
				float temp_output_9_0_g170595 = ( ( _TintingIntensityValue * Tinting_MutiMask121_g170574 * Tinting_TexMask385_g170574 * Tinting_LumaMask153_g170574 * Tinting_VertMask309_g170574 * Tinting_NoiseMask213_g170574 * Tinting_GlobalValue285_g170574 * Custom_Mask345_g170574 ) - temp_output_7_0_g170595 );
				half Tinting_Mask242_g170574 = ( saturate( ( ( temp_output_9_0_g170595 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170574 = lerp( Visual_Albedo139_g170574 , ( lerpResult368_g170574 * 4.594794 * Tinting_GlobalColor290_g170574 * (_TintingColor).rgb ) , Tinting_Mask242_g170574);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170574 = lerpResult90_g170574;
				#else
				float3 staticSwitch286_g170574 = Visual_Albedo139_g170574;
				#endif
				half3 Final_Albedo97_g170574 = staticSwitch286_g170574;
				float3 In_Albedo3_g170578 = Final_Albedo97_g170574;
				float3 In_AlbedoRaw3_g170578 = Out_AlbedoRaw4_g170579;
				float2 In_NormalTS3_g170578 = Out_NormalTS4_g170579;
				float3 In_NormalWS3_g170578 = Out_NormalWS4_g170579;
				float4 In_Shader3_g170578 = Out_Shader4_g170579;
				float4 In_Emissive3_g170578 = Out_Emissive4_g170579;
				float In_Grayscale3_g170578 = temp_output_200_12_g170574;
				float In_Luminosity3_g170578 = temp_output_200_15_g170574;
				float In_MultiMask3_g170578 = temp_output_200_11_g170574;
				float In_AlphaClip3_g170578 = Out_AlphaClip4_g170579;
				float In_AlphaFade3_g170578 = Out_AlphaFade4_g170579;
				float3 In_Translucency3_g170578 = Out_Translucency4_g170579;
				float In_Transmission3_g170578 = Out_Transmission4_g170579;
				float In_Thickness3_g170578 = Out_Thickness4_g170579;
				float In_Diffusion3_g170578 = Out_Diffusion4_g170579;
				{
				Data3_g170578.Dummy = In_Dummy3_g170578;
				Data3_g170578.Albedo = In_Albedo3_g170578;
				Data3_g170578.AlbedoRaw = In_AlbedoRaw3_g170578;
				Data3_g170578.NormalTS = In_NormalTS3_g170578;
				Data3_g170578.NormalWS = In_NormalWS3_g170578;
				Data3_g170578.Shader = In_Shader3_g170578;
				Data3_g170578.Emissive= In_Emissive3_g170578;
				Data3_g170578.MultiMask = In_MultiMask3_g170578;
				Data3_g170578.Grayscale = In_Grayscale3_g170578;
				Data3_g170578.Luminosity = In_Luminosity3_g170578;
				Data3_g170578.AlphaClip = In_AlphaClip3_g170578;
				Data3_g170578.AlphaFade = In_AlphaFade3_g170578;
				Data3_g170578.Translucency = In_Translucency3_g170578;
				Data3_g170578.Transmission = In_Transmission3_g170578;
				Data3_g170578.Thickness = In_Thickness3_g170578;
				Data3_g170578.Diffusion = In_Diffusion3_g170578;
				}
				TVEVisualData Data4_g170600 = Data3_g170578;
				float Out_Dummy4_g170600 = 0;
				float3 Out_Albedo4_g170600 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170600 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170600 = float2( 0,0 );
				float3 Out_NormalWS4_g170600 = float3( 0,0,0 );
				float4 Out_Shader4_g170600 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170600 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170600 = 0;
				float Out_Grayscale4_g170600 = 0;
				float Out_Luminosity4_g170600 = 0;
				float Out_AlphaClip4_g170600 = 0;
				float Out_AlphaFade4_g170600 = 0;
				float3 Out_Translucency4_g170600 = float3( 0,0,0 );
				float Out_Transmission4_g170600 = 0;
				float Out_Thickness4_g170600 = 0;
				float Out_Diffusion4_g170600 = 0;
				{
				Out_Dummy4_g170600 = Data4_g170600.Dummy;
				Out_Albedo4_g170600 = Data4_g170600.Albedo;
				Out_AlbedoRaw4_g170600 = Data4_g170600.AlbedoRaw;
				Out_NormalTS4_g170600 = Data4_g170600.NormalTS;
				Out_NormalWS4_g170600 = Data4_g170600.NormalWS;
				Out_Shader4_g170600 = Data4_g170600.Shader;
				Out_Emissive4_g170600= Data4_g170600.Emissive;
				Out_MultiMask4_g170600 = Data4_g170600.MultiMask;
				Out_Grayscale4_g170600 = Data4_g170600.Grayscale;
				Out_Luminosity4_g170600= Data4_g170600.Luminosity;
				Out_AlphaClip4_g170600 = Data4_g170600.AlphaClip;
				Out_AlphaFade4_g170600 = Data4_g170600.AlphaFade;
				Out_Translucency4_g170600 = Data4_g170600.Translucency;
				Out_Transmission4_g170600 = Data4_g170600.Transmission;
				Out_Thickness4_g170600 = Data4_g170600.Thickness;
				Out_Diffusion4_g170600 = Data4_g170600.Diffusion;
				}
				half3 Visual_Albedo292_g170598 = Out_Albedo4_g170600;
				float temp_output_280_12_g170598 = Out_Grayscale4_g170600;
				half Visual_Grayscale308_g170598 = temp_output_280_12_g170598;
				float3 temp_cast_34 = (Visual_Grayscale308_g170598).xxx;
				TVEGlobalData Data15_g170599 = Data204_g170214;
				float Out_Dummy15_g170599 = 0;
				float4 Out_CoatParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170599 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170599 = Data15_g170599.Dummy;
				Out_CoatParams15_g170599 = Data15_g170599.CoatParams;
				Out_PaintParams15_g170599 = Data15_g170599.PaintParams;
				Out_GlowParams15_g170599 = Data15_g170599.GlowParams;
				Out_AtmoParams15_g170599= Data15_g170599.AtmoParams;
				Out_FadeParams15_g170599= Data15_g170599.FadeParams;
				Out_FormParams15_g170599 = Data15_g170599.FormParams;
				Out_FlowParams15_g170599 = Data15_g170599.FlowParams;
				}
				half4 Global_AtmoParams314_g170598 = Out_AtmoParams15_g170599;
				float temp_output_6_0_g170619 = (Global_AtmoParams314_g170598).x;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170619 = ( temp_output_6_0_g170619 + ( _DrynessElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170619 = temp_output_6_0_g170619;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170598 = staticSwitch14_g170619;
				#else
				float staticSwitch351_g170598 = TVE_AtmoData.x;
				#endif
				float lerpResult505_g170598 = lerp( 1.0 , ( staticSwitch351_g170598 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalMask352_g170598 = lerpResult505_g170598;
				float3 lerpResult485_g170598 = lerp( Visual_Albedo292_g170598 , temp_cast_34 , ( Dryness_GlobalMask352_g170598 * _DrynessGrayValue ));
				half Dryness_TexMask478_g170598 = 1.0;
				float temp_output_280_11_g170598 = Out_MultiMask4_g170600;
				half Visual_MultiMask310_g170598 = temp_output_280_11_g170598;
				float lerpResult283_g170598 = lerp( 1.0 , Visual_MultiMask310_g170598 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170598 = lerpResult283_g170598;
				float temp_output_280_15_g170598 = Out_Luminosity4_g170600;
				half Visual_Luminosity309_g170598 = temp_output_280_15_g170598;
				float clampResult17_g170610 = clamp( Visual_Luminosity309_g170598 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170615 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170615 = ( clampResult17_g170610 - temp_output_7_0_g170615 );
				float lerpResult295_g170598 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170615 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170598 = lerpResult295_g170598;
				TVEModelData Data15_g170604 = Data16_g170201;
				float Out_Dummy15_g170604 = 0;
				float3 Out_PositionWS15_g170604 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170604 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170604 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170604 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170604 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170604 = float3( 0,0,0 );
				float4 Out_VertexData15_g170604 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170604 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170604 = Data15_g170604.Dummy;
				Out_PositionWS15_g170604 = Data15_g170604.PositionWS;
				Out_PositionWO15_g170604 = Data15_g170604.PositionWO;
				Out_PivotWS15_g170604 = Data15_g170604.PivotWS;
				Out_PivotWO15_g170604 = Data15_g170604.PivotWO;
				Out_NormalWS15_g170604 = Data15_g170604.NormalWS;
				Out_ViewDirWS15_g170604 = Data15_g170604.ViewDirWS;
				Out_VertexData15_g170604 = Data15_g170604.VertexData;
				Out_BoundsData15_g170604 = Data15_g170604.BoundsData;
				}
				half4 Model_VertexMasks386_g170598 = Out_VertexData15_g170604;
				float4 break375_g170598 = Model_VertexMasks386_g170598;
				float4 break33_g170607 = _dryness_vert_mode;
				float temp_output_30_0_g170607 = ( break375_g170598.x * break33_g170607.x );
				float temp_output_29_0_g170607 = ( break375_g170598.y * break33_g170607.y );
				float temp_output_31_0_g170607 = ( break375_g170598.z * break33_g170607.z );
				float temp_output_28_0_g170607 = ( temp_output_30_0_g170607 + temp_output_29_0_g170607 + temp_output_31_0_g170607 + ( break375_g170598.w * break33_g170607.w ) );
				float clampResult17_g170608 = clamp( temp_output_28_0_g170607 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170616 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170616 = ( clampResult17_g170608 - temp_output_7_0_g170616 );
				float lerpResult452_g170598 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170616 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170611 = lerpResult452_g170598;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170611 = ( temp_output_6_0_g170611 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170611 = temp_output_6_0_g170611;
				#endif
				half Dryness_VertMask378_g170598 = staticSwitch14_g170611;
				half Dryness_MaskNoise291_g170598 = 1.0;
				half Custom_Mask411_g170598 = 1.0;
				float temp_output_7_0_g170618 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170618 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170598 * Dryness_MultiMask302_g170598 * Dryness_LumaMask301_g170598 * Dryness_VertMask378_g170598 * Dryness_MaskNoise291_g170598 * Dryness_GlobalMask352_g170598 * Custom_Mask411_g170598 ) - temp_output_7_0_g170618 );
				half Dryness_Mask329_g170598 = saturate( ( ( temp_output_9_0_g170618 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170598 = lerp( Visual_Albedo292_g170598 , ( lerpResult485_g170598 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170598 = lerpResult336_g170598;
				#else
				float3 staticSwitch356_g170598 = Visual_Albedo292_g170598;
				#endif
				half3 Final_Albedo331_g170598 = staticSwitch356_g170598;
				float3 In_Albedo3_g170601 = Final_Albedo331_g170598;
				float3 In_AlbedoRaw3_g170601 = Out_AlbedoRaw4_g170600;
				float2 In_NormalTS3_g170601 = Out_NormalTS4_g170600;
				float3 In_NormalWS3_g170601 = Out_NormalWS4_g170600;
				half4 Visual_Shader415_g170598 = Out_Shader4_g170600;
				float4 break438_g170598 = Visual_Shader415_g170598;
				float4 appendResult439_g170598 = (float4(break438_g170598.x , break438_g170598.y , break438_g170598.z , ( break438_g170598.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170598 = lerp( Visual_Shader415_g170598 , appendResult439_g170598 , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170598 = lerpResult427_g170598;
				#else
				float4 staticSwitch426_g170598 = Visual_Shader415_g170598;
				#endif
				half4 Final_Shader433_g170598 = staticSwitch426_g170598;
				float4 In_Shader3_g170601 = Final_Shader433_g170598;
				float4 In_Emissive3_g170601 = Out_Emissive4_g170600;
				float In_Grayscale3_g170601 = temp_output_280_12_g170598;
				float In_Luminosity3_g170601 = temp_output_280_15_g170598;
				float In_MultiMask3_g170601 = temp_output_280_11_g170598;
				float In_AlphaClip3_g170601 = Out_AlphaClip4_g170600;
				float In_AlphaFade3_g170601 = Out_AlphaFade4_g170600;
				float3 In_Translucency3_g170601 = Out_Translucency4_g170600;
				half Visual_Transmission416_g170598 = Out_Transmission4_g170600;
				float lerpResult421_g170598 = lerp( Visual_Transmission416_g170598 , ( Visual_Transmission416_g170598 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170598 = lerpResult421_g170598;
				#else
				float staticSwitch418_g170598 = Visual_Transmission416_g170598;
				#endif
				half Final_Transmission425_g170598 = staticSwitch418_g170598;
				float In_Transmission3_g170601 = Final_Transmission425_g170598;
				float In_Thickness3_g170601 = Out_Thickness4_g170600;
				float In_Diffusion3_g170601 = Out_Diffusion4_g170600;
				{
				Data3_g170601.Dummy = In_Dummy3_g170601;
				Data3_g170601.Albedo = In_Albedo3_g170601;
				Data3_g170601.AlbedoRaw = In_AlbedoRaw3_g170601;
				Data3_g170601.NormalTS = In_NormalTS3_g170601;
				Data3_g170601.NormalWS = In_NormalWS3_g170601;
				Data3_g170601.Shader = In_Shader3_g170601;
				Data3_g170601.Emissive= In_Emissive3_g170601;
				Data3_g170601.MultiMask = In_MultiMask3_g170601;
				Data3_g170601.Grayscale = In_Grayscale3_g170601;
				Data3_g170601.Luminosity = In_Luminosity3_g170601;
				Data3_g170601.AlphaClip = In_AlphaClip3_g170601;
				Data3_g170601.AlphaFade = In_AlphaFade3_g170601;
				Data3_g170601.Translucency = In_Translucency3_g170601;
				Data3_g170601.Transmission = In_Transmission3_g170601;
				Data3_g170601.Thickness = In_Thickness3_g170601;
				Data3_g170601.Diffusion = In_Diffusion3_g170601;
				}
				TVEVisualData Data4_g170623 = Data3_g170601;
				float Out_Dummy4_g170623 = 0;
				float3 Out_Albedo4_g170623 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170623 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170623 = float2( 0,0 );
				float3 Out_NormalWS4_g170623 = float3( 0,0,0 );
				float4 Out_Shader4_g170623 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170623 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170623 = 0;
				float Out_Grayscale4_g170623 = 0;
				float Out_Luminosity4_g170623 = 0;
				float Out_AlphaClip4_g170623 = 0;
				float Out_AlphaFade4_g170623 = 0;
				float3 Out_Translucency4_g170623 = float3( 0,0,0 );
				float Out_Transmission4_g170623 = 0;
				float Out_Thickness4_g170623 = 0;
				float Out_Diffusion4_g170623 = 0;
				{
				Out_Dummy4_g170623 = Data4_g170623.Dummy;
				Out_Albedo4_g170623 = Data4_g170623.Albedo;
				Out_AlbedoRaw4_g170623 = Data4_g170623.AlbedoRaw;
				Out_NormalTS4_g170623 = Data4_g170623.NormalTS;
				Out_NormalWS4_g170623 = Data4_g170623.NormalWS;
				Out_Shader4_g170623 = Data4_g170623.Shader;
				Out_Emissive4_g170623= Data4_g170623.Emissive;
				Out_MultiMask4_g170623 = Data4_g170623.MultiMask;
				Out_Grayscale4_g170623 = Data4_g170623.Grayscale;
				Out_Luminosity4_g170623= Data4_g170623.Luminosity;
				Out_AlphaClip4_g170623 = Data4_g170623.AlphaClip;
				Out_AlphaFade4_g170623 = Data4_g170623.AlphaFade;
				Out_Translucency4_g170623 = Data4_g170623.Translucency;
				Out_Transmission4_g170623 = Data4_g170623.Transmission;
				Out_Thickness4_g170623 = Data4_g170623.Thickness;
				Out_Diffusion4_g170623 = Data4_g170623.Diffusion;
				}
				half3 Visual_Albedo127_g170622 = Out_Albedo4_g170623;
				float4 vertexToFrag24_g170573 = packedInput.ase_texcoord9;
				half4 Interp_Data4335 = vertexToFrag24_g170573;
				float clampResult208_g170622 = clamp( (Interp_Data4335).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170622 = ( Visual_Albedo127_g170622 + ( ( Visual_Albedo127_g170622 * Visual_Albedo127_g170622 * 200.0 * _motion_highlight_color ) * clampResult208_g170622 ) );
				#else
				float3 staticSwitch214_g170622 = Visual_Albedo127_g170622;
				#endif
				half3 Final_Albedo160_g170622 = staticSwitch214_g170622;
				float3 In_Albedo3_g170624 = Final_Albedo160_g170622;
				float3 In_AlbedoRaw3_g170624 = Out_AlbedoRaw4_g170623;
				float2 In_NormalTS3_g170624 = Out_NormalTS4_g170623;
				float3 In_NormalWS3_g170624 = Out_NormalWS4_g170623;
				float4 In_Shader3_g170624 = Out_Shader4_g170623;
				float4 In_Emissive3_g170624 = Out_Emissive4_g170623;
				float In_Grayscale3_g170624 = Out_Grayscale4_g170623;
				float In_Luminosity3_g170624 = Out_Luminosity4_g170623;
				float In_MultiMask3_g170624 = Out_MultiMask4_g170623;
				float In_AlphaClip3_g170624 = Out_AlphaClip4_g170623;
				float In_AlphaFade3_g170624 = Out_AlphaFade4_g170623;
				float3 In_Translucency3_g170624 = Out_Translucency4_g170623;
				float In_Transmission3_g170624 = Out_Transmission4_g170623;
				float In_Thickness3_g170624 = Out_Thickness4_g170623;
				float In_Diffusion3_g170624 = Out_Diffusion4_g170623;
				{
				Data3_g170624.Dummy = In_Dummy3_g170624;
				Data3_g170624.Albedo = In_Albedo3_g170624;
				Data3_g170624.AlbedoRaw = In_AlbedoRaw3_g170624;
				Data3_g170624.NormalTS = In_NormalTS3_g170624;
				Data3_g170624.NormalWS = In_NormalWS3_g170624;
				Data3_g170624.Shader = In_Shader3_g170624;
				Data3_g170624.Emissive= In_Emissive3_g170624;
				Data3_g170624.MultiMask = In_MultiMask3_g170624;
				Data3_g170624.Grayscale = In_Grayscale3_g170624;
				Data3_g170624.Luminosity = In_Luminosity3_g170624;
				Data3_g170624.AlphaClip = In_AlphaClip3_g170624;
				Data3_g170624.AlphaFade = In_AlphaFade3_g170624;
				Data3_g170624.Translucency = In_Translucency3_g170624;
				Data3_g170624.Transmission = In_Transmission3_g170624;
				Data3_g170624.Thickness = In_Thickness3_g170624;
				Data3_g170624.Diffusion = In_Diffusion3_g170624;
				}
				TVEVisualData Data4_g170626 = Data3_g170624;
				float Out_Dummy4_g170626 = 0;
				float3 Out_Albedo4_g170626 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170626 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170626 = float2( 0,0 );
				float3 Out_NormalWS4_g170626 = float3( 0,0,0 );
				float4 Out_Shader4_g170626 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170626 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170626 = 0;
				float Out_Grayscale4_g170626 = 0;
				float Out_Luminosity4_g170626 = 0;
				float Out_AlphaClip4_g170626 = 0;
				float Out_AlphaFade4_g170626 = 0;
				float3 Out_Translucency4_g170626 = float3( 0,0,0 );
				float Out_Transmission4_g170626 = 0;
				float Out_Thickness4_g170626 = 0;
				float Out_Diffusion4_g170626 = 0;
				{
				Out_Dummy4_g170626 = Data4_g170626.Dummy;
				Out_Albedo4_g170626 = Data4_g170626.Albedo;
				Out_AlbedoRaw4_g170626 = Data4_g170626.AlbedoRaw;
				Out_NormalTS4_g170626 = Data4_g170626.NormalTS;
				Out_NormalWS4_g170626 = Data4_g170626.NormalWS;
				Out_Shader4_g170626 = Data4_g170626.Shader;
				Out_Emissive4_g170626= Data4_g170626.Emissive;
				Out_MultiMask4_g170626 = Data4_g170626.MultiMask;
				Out_Grayscale4_g170626 = Data4_g170626.Grayscale;
				Out_Luminosity4_g170626= Data4_g170626.Luminosity;
				Out_AlphaClip4_g170626 = Data4_g170626.AlphaClip;
				Out_AlphaFade4_g170626 = Data4_g170626.AlphaFade;
				Out_Translucency4_g170626 = Data4_g170626.Translucency;
				Out_Transmission4_g170626 = Data4_g170626.Transmission;
				Out_Thickness4_g170626 = Data4_g170626.Thickness;
				Out_Diffusion4_g170626 = Data4_g170626.Diffusion;
				}
				half3 Visual_Albedo127_g170625 = Out_Albedo4_g170626;
				float3 temp_output_622_0_g170625 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170629) = _OverlayAlbedoTex;
				float localFilterTexture19_g170641 = ( 0.0 );
				SamplerState SS19_g170641 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170641 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170641 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170641 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170641 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170641 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170641 = SamplerDefault19_g170641;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170641 = SamplerDefault19_g170641;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170641 = SamplerPoint19_g170641;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170641 = SamplerLow19_g170641;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170641 = SamplerMedium19_g170641;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170641 = SamplerHigh19_g170641;
				#endif
				}
				SamplerState Sampler238_g170629 = SS19_g170641;
				float4 temp_output_6_0_g170630 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170630 = ( temp_output_6_0_g170630 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170630 = temp_output_6_0_g170630;
				#endif
				half4 Overlay_Coords639_g170625 = staticSwitch14_g170630;
				float4 temp_output_37_0_g170629 = Overlay_Coords639_g170625;
				half4 Coords238_g170629 = temp_output_37_0_g170629;
				TVEModelData Data15_g170643 = Data16_g170201;
				float Out_Dummy15_g170643 = 0;
				float3 Out_PositionWS15_g170643 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170643 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170643 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170643 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170643 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170643 = float3( 0,0,0 );
				float4 Out_VertexData15_g170643 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170643 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170643 = Data15_g170643.Dummy;
				Out_PositionWS15_g170643 = Data15_g170643.PositionWS;
				Out_PositionWO15_g170643 = Data15_g170643.PositionWO;
				Out_PivotWS15_g170643 = Data15_g170643.PivotWS;
				Out_PivotWO15_g170643 = Data15_g170643.PivotWO;
				Out_NormalWS15_g170643 = Data15_g170643.NormalWS;
				Out_ViewDirWS15_g170643 = Data15_g170643.ViewDirWS;
				Out_VertexData15_g170643 = Data15_g170643.VertexData;
				Out_BoundsData15_g170643 = Data15_g170643.BoundsData;
				}
				half3 Model_PositionWO602_g170625 = Out_PositionWO15_g170643;
				float3 temp_output_279_0_g170629 = Model_PositionWO602_g170625;
				half3 WorldPosition238_g170629 = temp_output_279_0_g170629;
				half4 localSamplePlanar2D238_g170629 = SamplePlanar2D( Texture238_g170629 , Sampler238_g170629 , Coords238_g170629 , WorldPosition238_g170629 );
				TEXTURE2D(Texture246_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170629 = SS19_g170641;
				half4 Coords246_g170629 = temp_output_37_0_g170629;
				half3 WorldPosition246_g170629 = temp_output_279_0_g170629;
				half3 Model_NormalWS712_g170625 = Out_NormalWS15_g170643;
				float3 temp_output_280_0_g170629 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170629 = temp_output_280_0_g170629;
				half4 localSamplePlanar3D246_g170629 = SamplePlanar3D( Texture246_g170629 , Sampler246_g170629 , Coords246_g170629 , WorldPosition246_g170629 , WorldNormal246_g170629 );
				TEXTURE2D(Texture234_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170629 = SS19_g170641;
				float4 Coords234_g170629 = temp_output_37_0_g170629;
				float3 WorldPosition234_g170629 = temp_output_279_0_g170629;
				float4 localSampleStochastic2D234_g170629 = SampleStochastic2D( Texture234_g170629 , Sampler234_g170629 , Coords234_g170629 , WorldPosition234_g170629 );
				TEXTURE2D(Texture263_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170629 = SS19_g170641;
				half4 Coords263_g170629 = temp_output_37_0_g170629;
				half3 WorldPosition263_g170629 = temp_output_279_0_g170629;
				half3 WorldNormal263_g170629 = temp_output_280_0_g170629;
				half4 localSampleStochastic3D263_g170629 = SampleStochastic3D( Texture263_g170629 , Sampler263_g170629 , Coords263_g170629 , WorldPosition263_g170629 , WorldNormal263_g170629 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170625 = localSamplePlanar2D238_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170625 = localSamplePlanar3D246_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170625 = localSampleStochastic2D234_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170625 = localSampleStochastic3D263_g170629;
				#else
				float4 staticSwitch676_g170625 = localSamplePlanar2D238_g170629;
				#endif
				half3 Overlay_Albedo526_g170625 = (staticSwitch676_g170625).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170625 = ( temp_output_622_0_g170625 * Overlay_Albedo526_g170625 );
				#else
				float3 staticSwitch578_g170625 = temp_output_622_0_g170625;
				#endif
				float3 temp_output_6_0_g170644 = staticSwitch578_g170625;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170644 = ( temp_output_6_0_g170644 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170644 = temp_output_6_0_g170644;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				TEXTURE2D(Texture246_g170633) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170633 = sampler_Linear_Repeat;
				float4 appendResult863_g170625 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170633 = appendResult863_g170625;
				half4 Coords246_g170633 = temp_output_37_0_g170633;
				float3 temp_output_279_0_g170633 = Model_PositionWO602_g170625;
				half3 WorldPosition246_g170633 = temp_output_279_0_g170633;
				float3 temp_output_280_0_g170633 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170633 = temp_output_280_0_g170633;
				half4 localSamplePlanar3D246_g170633 = SamplePlanar3D( Texture246_g170633 , Sampler246_g170633 , Coords246_g170633 , WorldPosition246_g170633 , WorldNormal246_g170633 );
				half Overlay_GlitterTex854_g170625 = (localSamplePlanar3D246_g170633).x;
				half3 Model_PositionWS879_g170625 = Out_PositionWS15_g170643;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170625 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170625 * 1.0 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170625 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170625 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170625 = staticSwitch868_g170625;
				half Overlay_TexMask908_g170625 = 1.0;
				float3 temp_output_739_21_g170625 = Out_NormalWS4_g170626;
				half3 Visual_NormalWS749_g170625 = temp_output_739_21_g170625;
				float clampResult17_g170650 = clamp( saturate( (Visual_NormalWS749_g170625).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170654 = _OverlayProjRemap.x;
				float temp_output_9_0_g170654 = ( clampResult17_g170650 - temp_output_7_0_g170654 );
				float lerpResult842_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170654 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170625 = lerpResult842_g170625;
				float temp_output_739_15_g170625 = Out_Luminosity4_g170626;
				half Visual_Luminosity654_g170625 = temp_output_739_15_g170625;
				float clampResult17_g170658 = clamp( Visual_Luminosity654_g170625 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170659 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170659 = ( clampResult17_g170658 - temp_output_7_0_g170659 );
				float lerpResult587_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170659 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170625 = lerpResult587_g170625;
				half4 Model_VertexMasks791_g170625 = Out_VertexData15_g170643;
				float4 break792_g170625 = Model_VertexMasks791_g170625;
				float4 break33_g170645 = _overlay_vert_mode;
				float temp_output_30_0_g170645 = ( break792_g170625.x * break33_g170645.x );
				float temp_output_29_0_g170645 = ( break792_g170625.y * break33_g170645.y );
				float temp_output_31_0_g170645 = ( break792_g170625.z * break33_g170645.z );
				float temp_output_28_0_g170645 = ( temp_output_30_0_g170645 + temp_output_29_0_g170645 + temp_output_31_0_g170645 + ( break792_g170625.w * break33_g170645.w ) );
				float clampResult17_g170646 = clamp( temp_output_28_0_g170645 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170655 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170655 = ( clampResult17_g170646 - temp_output_7_0_g170655 );
				float lerpResult881_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170655 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170651 = lerpResult881_g170625;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170651 = ( temp_output_6_0_g170651 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170651 = temp_output_6_0_g170651;
				#endif
				half Overlay_VertMask801_g170625 = staticSwitch14_g170651;
				half Overlay_MaskNoise427_g170625 = 1.0;
				TVEGlobalData Data15_g170627 = Data204_g170214;
				float Out_Dummy15_g170627 = 0;
				float4 Out_CoatParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170627 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170627 = Data15_g170627.Dummy;
				Out_CoatParams15_g170627 = Data15_g170627.CoatParams;
				Out_PaintParams15_g170627 = Data15_g170627.PaintParams;
				Out_GlowParams15_g170627 = Data15_g170627.GlowParams;
				Out_AtmoParams15_g170627= Data15_g170627.AtmoParams;
				Out_FadeParams15_g170627= Data15_g170627.FadeParams;
				Out_FormParams15_g170627 = Data15_g170627.FormParams;
				Out_FlowParams15_g170627 = Data15_g170627.FlowParams;
				}
				half4 Global_AtmoParams516_g170625 = Out_AtmoParams15_g170627;
				float temp_output_6_0_g170660 = (Global_AtmoParams516_g170625).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170660 = ( temp_output_6_0_g170660 + ( _OverlayElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170660 = temp_output_6_0_g170660;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170625 = staticSwitch14_g170660;
				#else
				float staticSwitch705_g170625 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170625 = lerp( 1.0 , ( staticSwitch705_g170625 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170625 = lerpResult937_g170625;
				half Custom_Mask646_g170625 = 1.0;
				float temp_output_7_0_g170657 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170657 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170625 * Overlay_MaskProj457_g170625 * Overlay_MaskLuma438_g170625 * Overlay_VertMask801_g170625 * Overlay_MaskNoise427_g170625 * Overlay_MaskGlobal429_g170625 * Custom_Mask646_g170625 ) - temp_output_7_0_g170657 );
				half Overlay_Mask494_g170625 = saturate( ( ( temp_output_9_0_g170657 / ( _OverlayBlendRemap.y - temp_output_7_0_g170657 ) ) + 0.0001 ) );
				float3 lerpResult467_g170625 = lerp( Visual_Albedo127_g170625 , ( staticSwitch14_g170644 + Overlay_GlitterColor865_g170625 ) , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170625 = lerpResult467_g170625;
				#else
				float3 staticSwitch577_g170625 = Visual_Albedo127_g170625;
				#endif
				half3 Final_Albedo493_g170625 = staticSwitch577_g170625;
				float3 In_Albedo3_g170628 = Final_Albedo493_g170625;
				float3 In_AlbedoRaw3_g170628 = Out_AlbedoRaw4_g170626;
				half2 Visual_NormalTS535_g170625 = Out_NormalTS4_g170626;
				TEXTURE2D(Texture238_g170631) = _OverlayNormalTex;
				float localFilterTexture29_g170642 = ( 0.0 );
				SamplerState SS29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170642 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170642 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170642 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170642 = SamplerDefault29_g170642;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170642 = SamplerDefault29_g170642;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170642 = SamplerPoint29_g170642;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170642 = SamplerLow29_g170642;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170642 = SamplerMedium29_g170642;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170642 = SamplerHigh29_g170642;
				#endif
				}
				SamplerState Sampler238_g170631 = SS29_g170642;
				float4 temp_output_37_0_g170631 = Overlay_Coords639_g170625;
				half4 Coords238_g170631 = temp_output_37_0_g170631;
				float3 temp_output_279_0_g170631 = Model_PositionWO602_g170625;
				half3 WorldPosition238_g170631 = temp_output_279_0_g170631;
				half4 localSamplePlanar2D238_g170631 = SamplePlanar2D( Texture238_g170631 , Sampler238_g170631 , Coords238_g170631 , WorldPosition238_g170631 );
				TEXTURE2D(Texture246_g170631) = _OverlayNormalTex;
				SamplerState Sampler246_g170631 = SS29_g170642;
				half4 Coords246_g170631 = temp_output_37_0_g170631;
				half3 WorldPosition246_g170631 = temp_output_279_0_g170631;
				float3 temp_output_280_0_g170631 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170631 = temp_output_280_0_g170631;
				half4 localSamplePlanar3D246_g170631 = SamplePlanar3D( Texture246_g170631 , Sampler246_g170631 , Coords246_g170631 , WorldPosition246_g170631 , WorldNormal246_g170631 );
				TEXTURE2D(Texture234_g170631) = _OverlayNormalTex;
				SamplerState Sampler234_g170631 = SS29_g170642;
				float4 Coords234_g170631 = temp_output_37_0_g170631;
				float3 WorldPosition234_g170631 = temp_output_279_0_g170631;
				float4 localSampleStochastic2D234_g170631 = SampleStochastic2D( Texture234_g170631 , Sampler234_g170631 , Coords234_g170631 , WorldPosition234_g170631 );
				TEXTURE2D(Texture263_g170631) = _OverlayNormalTex;
				SamplerState Sampler263_g170631 = SS29_g170642;
				half4 Coords263_g170631 = temp_output_37_0_g170631;
				half3 WorldPosition263_g170631 = temp_output_279_0_g170631;
				half3 WorldNormal263_g170631 = temp_output_280_0_g170631;
				half4 localSampleStochastic3D263_g170631 = SampleStochastic3D( Texture263_g170631 , Sampler263_g170631 , Coords263_g170631 , WorldPosition263_g170631 , WorldNormal263_g170631 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170625 = localSamplePlanar2D238_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170625 = localSamplePlanar3D246_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170625 = localSampleStochastic2D234_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170625 = localSampleStochastic3D263_g170631;
				#else
				float4 staticSwitch686_g170625 = localSamplePlanar2D238_g170631;
				#endif
				half4 Normal_Packed45_g170635 = staticSwitch686_g170625;
				float2 appendResult58_g170635 = (float2(( (Normal_Packed45_g170635).x * (Normal_Packed45_g170635).w ) , (Normal_Packed45_g170635).y));
				half2 Normal_Default50_g170635 = appendResult58_g170635;
				half2 Normal_ASTC41_g170635 = (Normal_Packed45_g170635).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170635 = Normal_ASTC41_g170635;
				#else
				float2 staticSwitch38_g170635 = Normal_Default50_g170635;
				#endif
				half2 Normal_NO_DTX544_g170635 = (Normal_Packed45_g170635).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170635 = Normal_NO_DTX544_g170635;
				#else
				float2 staticSwitch37_g170635 = staticSwitch38_g170635;
				#endif
				half2 Normal_Planar45_g170634 = (staticSwitch37_g170635*2.0 + -1.0);
				float2 break71_g170634 = Normal_Planar45_g170634;
				float3 appendResult72_g170634 = (float3(break71_g170634.x , 0.0 , break71_g170634.y));
				half2 Overlay_Normal528_g170625 = (mul( ase_worldToTangent, appendResult72_g170634 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170625 = Overlay_Normal528_g170625;
				#else
				float2 staticSwitch579_g170625 = Visual_NormalTS535_g170625;
				#endif
				float2 lerpResult551_g170625 = lerp( Visual_NormalTS535_g170625 , ( staticSwitch579_g170625 * _OverlayNormalValue ) , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170625 = lerpResult551_g170625;
				#else
				float2 staticSwitch583_g170625 = Visual_NormalTS535_g170625;
				#endif
				half2 Final_NormalTS499_g170625 = staticSwitch583_g170625;
				float2 In_NormalTS3_g170628 = Final_NormalTS499_g170625;
				float3 In_NormalWS3_g170628 = temp_output_739_21_g170625;
				half4 Visual_Masks536_g170625 = Out_Shader4_g170626;
				float4 appendResult585_g170625 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170625 = lerp( Visual_Masks536_g170625 , appendResult585_g170625 , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170625 = lerpResult584_g170625;
				#else
				float4 staticSwitch586_g170625 = Visual_Masks536_g170625;
				#endif
				half4 Final_Masks482_g170625 = staticSwitch586_g170625;
				float4 In_Shader3_g170628 = Final_Masks482_g170625;
				float4 In_Emissive3_g170628 = Out_Emissive4_g170626;
				float temp_output_739_12_g170625 = Out_Grayscale4_g170626;
				float In_Grayscale3_g170628 = temp_output_739_12_g170625;
				float In_Luminosity3_g170628 = temp_output_739_15_g170625;
				float In_MultiMask3_g170628 = Out_MultiMask4_g170626;
				float In_AlphaClip3_g170628 = Out_AlphaClip4_g170626;
				float In_AlphaFade3_g170628 = Out_AlphaFade4_g170626;
				float3 In_Translucency3_g170628 = Out_Translucency4_g170626;
				half Visual_Transmission699_g170625 = Out_Transmission4_g170626;
				float lerpResult746_g170625 = lerp( Visual_Transmission699_g170625 , ( Visual_Transmission699_g170625 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170625 * Overlay_MaskNoise427_g170625 * Overlay_MaskGlobal429_g170625 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170625 = lerpResult746_g170625;
				#else
				float staticSwitch703_g170625 = Visual_Transmission699_g170625;
				#endif
				half Final_Transmission702_g170625 = staticSwitch703_g170625;
				float In_Transmission3_g170628 = Final_Transmission702_g170625;
				float In_Thickness3_g170628 = Out_Thickness4_g170626;
				float In_Diffusion3_g170628 = Out_Diffusion4_g170626;
				{
				Data3_g170628.Dummy = In_Dummy3_g170628;
				Data3_g170628.Albedo = In_Albedo3_g170628;
				Data3_g170628.AlbedoRaw = In_AlbedoRaw3_g170628;
				Data3_g170628.NormalTS = In_NormalTS3_g170628;
				Data3_g170628.NormalWS = In_NormalWS3_g170628;
				Data3_g170628.Shader = In_Shader3_g170628;
				Data3_g170628.Emissive= In_Emissive3_g170628;
				Data3_g170628.MultiMask = In_MultiMask3_g170628;
				Data3_g170628.Grayscale = In_Grayscale3_g170628;
				Data3_g170628.Luminosity = In_Luminosity3_g170628;
				Data3_g170628.AlphaClip = In_AlphaClip3_g170628;
				Data3_g170628.AlphaFade = In_AlphaFade3_g170628;
				Data3_g170628.Translucency = In_Translucency3_g170628;
				Data3_g170628.Transmission = In_Transmission3_g170628;
				Data3_g170628.Thickness = In_Thickness3_g170628;
				Data3_g170628.Diffusion = In_Diffusion3_g170628;
				}
				TVEVisualData Data4_g170663 = Data3_g170628;
				float Out_Dummy4_g170663 = 0;
				float3 Out_Albedo4_g170663 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170663 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170663 = float2( 0,0 );
				float3 Out_NormalWS4_g170663 = float3( 0,0,0 );
				float4 Out_Shader4_g170663 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170663 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170663 = 0;
				float Out_Grayscale4_g170663 = 0;
				float Out_Luminosity4_g170663 = 0;
				float Out_AlphaClip4_g170663 = 0;
				float Out_AlphaFade4_g170663 = 0;
				float3 Out_Translucency4_g170663 = float3( 0,0,0 );
				float Out_Transmission4_g170663 = 0;
				float Out_Thickness4_g170663 = 0;
				float Out_Diffusion4_g170663 = 0;
				{
				Out_Dummy4_g170663 = Data4_g170663.Dummy;
				Out_Albedo4_g170663 = Data4_g170663.Albedo;
				Out_AlbedoRaw4_g170663 = Data4_g170663.AlbedoRaw;
				Out_NormalTS4_g170663 = Data4_g170663.NormalTS;
				Out_NormalWS4_g170663 = Data4_g170663.NormalWS;
				Out_Shader4_g170663 = Data4_g170663.Shader;
				Out_Emissive4_g170663= Data4_g170663.Emissive;
				Out_MultiMask4_g170663 = Data4_g170663.MultiMask;
				Out_Grayscale4_g170663 = Data4_g170663.Grayscale;
				Out_Luminosity4_g170663= Data4_g170663.Luminosity;
				Out_AlphaClip4_g170663 = Data4_g170663.AlphaClip;
				Out_AlphaFade4_g170663 = Data4_g170663.AlphaFade;
				Out_Translucency4_g170663 = Data4_g170663.Translucency;
				Out_Transmission4_g170663 = Data4_g170663.Transmission;
				Out_Thickness4_g170663 = Data4_g170663.Thickness;
				Out_Diffusion4_g170663 = Data4_g170663.Diffusion;
				}
				half3 Visual_Albedo127_g170662 = Out_Albedo4_g170663;
				TVEGlobalData Data15_g170668 = Data204_g170214;
				float Out_Dummy15_g170668 = 0;
				float4 Out_CoatParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170668 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170668 = Data15_g170668.Dummy;
				Out_CoatParams15_g170668 = Data15_g170668.CoatParams;
				Out_PaintParams15_g170668 = Data15_g170668.PaintParams;
				Out_GlowParams15_g170668 = Data15_g170668.GlowParams;
				Out_AtmoParams15_g170668= Data15_g170668.AtmoParams;
				Out_FadeParams15_g170668= Data15_g170668.FadeParams;
				Out_FormParams15_g170668 = Data15_g170668.FormParams;
				Out_FlowParams15_g170668 = Data15_g170668.FlowParams;
				}
				half4 Global_AtmoParams516_g170662 = Out_AtmoParams15_g170668;
				float4 temp_output_6_0_g170689 = Global_AtmoParams516_g170662;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170689 = ( temp_output_6_0_g170689 + ( _WetnessElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170689 = temp_output_6_0_g170689;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170662 = staticSwitch14_g170689;
				#else
				float4 staticSwitch663_g170662 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170662 = lerp( float2( 1,1 ) , (( staticSwitch663_g170662 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170662 = lerpResult1121_g170662;
				half Global_Wetness429_g170662 = break1123_g170662.x;
				half Wetness_Value1042_g170662 = ( _WetnessIntensityValue * Global_Wetness429_g170662 );
				TVEModelData Data15_g170674 = Data16_g170201;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				}
				half4 Model_VertexData1030_g170662 = Out_VertexData15_g170674;
				float4 break1019_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170677 = _wetness_vert_mode;
				float temp_output_30_0_g170677 = ( break1019_g170662.x * break33_g170677.x );
				float temp_output_29_0_g170677 = ( break1019_g170662.y * break33_g170677.y );
				float temp_output_31_0_g170677 = ( break1019_g170662.z * break33_g170677.z );
				float temp_output_28_0_g170677 = ( temp_output_30_0_g170677 + temp_output_29_0_g170677 + temp_output_31_0_g170677 + ( break1019_g170662.w * break33_g170677.w ) );
				float clampResult17_g170676 = clamp( temp_output_28_0_g170677 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170685 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170685 = ( clampResult17_g170676 - temp_output_7_0_g170685 );
				float lerpResult1026_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170685 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170678 = lerpResult1026_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170678 = ( temp_output_6_0_g170678 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170678 = temp_output_6_0_g170678;
				#endif
				float temp_output_1025_0_g170662 = staticSwitch14_g170678;
				half Wetness_VertMask1024_g170662 = temp_output_1025_0_g170662;
				float temp_output_1043_0_g170662 = ( Wetness_Value1042_g170662 * Wetness_VertMask1024_g170662 );
				half Wetness_Mask866_g170662 = temp_output_1043_0_g170662;
				float4 break1083_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170680 = _wetness_water_vert_mode;
				float temp_output_30_0_g170680 = ( break1083_g170662.x * break33_g170680.x );
				float temp_output_29_0_g170680 = ( break1083_g170662.y * break33_g170680.y );
				float temp_output_31_0_g170680 = ( break1083_g170662.z * break33_g170680.z );
				float temp_output_28_0_g170680 = ( temp_output_30_0_g170680 + temp_output_29_0_g170680 + temp_output_31_0_g170680 + ( break1083_g170662.w * break33_g170680.w ) );
				float clampResult17_g170679 = clamp( temp_output_28_0_g170680 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170686 = ( clampResult17_g170679 - temp_output_7_0_g170686 );
				float lerpResult1089_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170686 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170681 = lerpResult1089_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170681 = ( temp_output_6_0_g170681 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170681 = temp_output_6_0_g170681;
				#endif
				float temp_output_1091_0_g170662 = staticSwitch14_g170681;
				half Water_VertMask1094_g170662 = temp_output_1091_0_g170662;
				half4 Visual_Masks536_g170662 = Out_Shader4_g170663;
				float lerpResult1013_g170662 = lerp( 1.0 , (Visual_Masks536_g170662).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170662 = lerpResult1013_g170662;
				float clampResult17_g170675 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170662 * Water_VertMask1094_g170662 ) - Water_HeightMask782_g170662 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170688 = ( clampResult17_g170675 - temp_output_7_0_g170688 );
				half3 Model_NormalWS798_g170662 = Out_NormalWS15_g170674;
				float temp_output_786_0_g170662 = saturate( (Model_NormalWS798_g170662).y );
				half Wetness_ProjMask790_g170662 = temp_output_786_0_g170662;
				half Water_Mask760_g170662 = ( saturate( ( ( temp_output_9_0_g170688 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170662 );
				float3 lerpResult918_g170662 = lerp( Visual_Albedo127_g170662 , ( Visual_Albedo127_g170662 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170662);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170662 = lerpResult918_g170662;
				#else
				float3 staticSwitch946_g170662 = Visual_Albedo127_g170662;
				#endif
				float3 lerpResult768_g170662 = lerp( staticSwitch946_g170662 , ( staticSwitch946_g170662 * staticSwitch946_g170662 ) , _WetnessContrastValue);
				float3 lerpResult651_g170662 = lerp( Visual_Albedo127_g170662 , lerpResult768_g170662 , Wetness_Mask866_g170662);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170662 = lerpResult651_g170662;
				#else
				float3 staticSwitch577_g170662 = Visual_Albedo127_g170662;
				#endif
				half3 Final_Albedo493_g170662 = staticSwitch577_g170662;
				float3 In_Albedo3_g170664 = Final_Albedo493_g170662;
				float3 In_AlbedoRaw3_g170664 = Out_AlbedoRaw4_g170663;
				half2 Visual_Normal535_g170662 = Out_NormalTS4_g170663;
				float lerpResult877_g170662 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170662 * Water_Mask760_g170662 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170662 = ( Visual_Normal535_g170662 * lerpResult877_g170662 );
				#else
				float2 staticSwitch957_g170662 = Visual_Normal535_g170662;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				TEXTURE2D(Texture238_g170672) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170672 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170662 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170672 = appendResult924_g170662;
				half4 Coords238_g170672 = temp_output_37_0_g170672;
				half3 Model_PositionWO602_g170662 = Out_PositionWO15_g170674;
				float3 temp_output_279_0_g170672 = Model_PositionWO602_g170662;
				half3 WorldPosition238_g170672 = temp_output_279_0_g170672;
				half4 localSamplePlanar2D238_g170672 = SamplePlanar2D( Texture238_g170672 , Sampler238_g170672 , Coords238_g170672 , WorldPosition238_g170672 );
				float4 temp_output_1010_0_g170662 = localSamplePlanar2D238_g170672;
				half2 Rain_DropsNormal919_g170662 = (temp_output_1010_0_g170662).zw;
				float2 temp_output_903_0_g170662 = (Rain_DropsNormal919_g170662*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170662 = (temp_output_1010_0_g170662).xy;
				float2 lerpResult904_g170662 = lerp( temp_output_903_0_g170662 , (Rain_RingsNormal713_g170662*2.0 + -1.0) , ( Water_Mask760_g170662 * Water_Mask760_g170662 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170662 = lerpResult904_g170662;
				#else
				float2 staticSwitch960_g170662 = temp_output_903_0_g170662;
				#endif
				half2 Rain_Drops1002_g170662 = ( staticSwitch960_g170662 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170662 = Out_PositionWS15_g170674;
				half Global_Rain955_g170662 = break1123_g170662.y;
				half Rain_Value1067_g170662 = Global_Rain955_g170662;
				float4 break1097_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170683 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170683 = ( break1097_g170662.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1097_g170662.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1097_g170662.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1097_g170662.w * break33_g170683.w ) );
				float clampResult17_g170682 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170687 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170687 = ( clampResult17_g170682 - temp_output_7_0_g170687 );
				float lerpResult1100_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170687 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170684 = lerpResult1100_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				float temp_output_1101_0_g170662 = staticSwitch14_g170684;
				half Rain_VertMask1108_g170662 = temp_output_1101_0_g170662;
				half Rain_Mask999_g170662 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170662 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170662 * Rain_VertMask1108_g170662 );
				half2 Normal_Planar45_g170671 = ( Rain_Drops1002_g170662 * Rain_Mask999_g170662 * Wetness_ProjMask790_g170662 );
				float2 break71_g170671 = Normal_Planar45_g170671;
				float3 appendResult72_g170671 = (float3(break71_g170671.x , 0.0 , break71_g170671.y));
				half2 Wetness_Normal526_g170662 = (mul( ase_worldToTangent, appendResult72_g170671 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170662 = Wetness_Normal526_g170662;
				#else
				float2 staticSwitch583_g170662 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170662 = ( staticSwitch957_g170662 + staticSwitch583_g170662 );
				#else
				float2 staticSwitch774_g170662 = Visual_Normal535_g170662;
				#endif
				half2 Final_Normal499_g170662 = staticSwitch774_g170662;
				float2 In_NormalTS3_g170664 = Final_Normal499_g170662;
				float3 In_NormalWS3_g170664 = Out_NormalWS4_g170663;
				float4 break658_g170662 = Visual_Masks536_g170662;
				float temp_output_935_0_g170662 = ( Wetness_Mask866_g170662 * _WetnessSmoothnessValue );
				float lerpResult941_g170662 = lerp( temp_output_935_0_g170662 , 2.0 , Water_Mask760_g170662);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170662 = lerpResult941_g170662;
				#else
				float staticSwitch959_g170662 = temp_output_935_0_g170662;
				#endif
				float4 appendResult661_g170662 = (float4(break658_g170662.x , break658_g170662.y , break658_g170662.z , saturate( ( break658_g170662.w + staticSwitch959_g170662 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170662 = appendResult661_g170662;
				#else
				float4 staticSwitch586_g170662 = Visual_Masks536_g170662;
				#endif
				half4 Final_Masks482_g170662 = staticSwitch586_g170662;
				float4 In_Shader3_g170664 = Final_Masks482_g170662;
				float4 In_Emissive3_g170664 = Out_Emissive4_g170663;
				float In_Grayscale3_g170664 = Out_Grayscale4_g170663;
				float In_Luminosity3_g170664 = Out_Luminosity4_g170663;
				float In_MultiMask3_g170664 = Out_MultiMask4_g170663;
				float In_AlphaClip3_g170664 = Out_AlphaClip4_g170663;
				float In_AlphaFade3_g170664 = Out_AlphaFade4_g170663;
				float3 In_Translucency3_g170664 = Out_Translucency4_g170663;
				float In_Transmission3_g170664 = Out_Transmission4_g170663;
				float In_Thickness3_g170664 = Out_Thickness4_g170663;
				float In_Diffusion3_g170664 = Out_Diffusion4_g170663;
				{
				Data3_g170664.Dummy = In_Dummy3_g170664;
				Data3_g170664.Albedo = In_Albedo3_g170664;
				Data3_g170664.AlbedoRaw = In_AlbedoRaw3_g170664;
				Data3_g170664.NormalTS = In_NormalTS3_g170664;
				Data3_g170664.NormalWS = In_NormalWS3_g170664;
				Data3_g170664.Shader = In_Shader3_g170664;
				Data3_g170664.Emissive= In_Emissive3_g170664;
				Data3_g170664.MultiMask = In_MultiMask3_g170664;
				Data3_g170664.Grayscale = In_Grayscale3_g170664;
				Data3_g170664.Luminosity = In_Luminosity3_g170664;
				Data3_g170664.AlphaClip = In_AlphaClip3_g170664;
				Data3_g170664.AlphaFade = In_AlphaFade3_g170664;
				Data3_g170664.Translucency = In_Translucency3_g170664;
				Data3_g170664.Transmission = In_Transmission3_g170664;
				Data3_g170664.Thickness = In_Thickness3_g170664;
				Data3_g170664.Diffusion = In_Diffusion3_g170664;
				}
				TVEVisualData Data4_g170694 = Data3_g170664;
				float Out_Dummy4_g170694 = 0;
				float3 Out_Albedo4_g170694 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170694 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170694 = float2( 0,0 );
				float3 Out_NormalWS4_g170694 = float3( 0,0,0 );
				float4 Out_Shader4_g170694 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170694 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170694 = 0;
				float Out_Grayscale4_g170694 = 0;
				float Out_Luminosity4_g170694 = 0;
				float Out_AlphaClip4_g170694 = 0;
				float Out_AlphaFade4_g170694 = 0;
				float3 Out_Translucency4_g170694 = float3( 0,0,0 );
				float Out_Transmission4_g170694 = 0;
				float Out_Thickness4_g170694 = 0;
				float Out_Diffusion4_g170694 = 0;
				{
				Out_Dummy4_g170694 = Data4_g170694.Dummy;
				Out_Albedo4_g170694 = Data4_g170694.Albedo;
				Out_AlbedoRaw4_g170694 = Data4_g170694.AlbedoRaw;
				Out_NormalTS4_g170694 = Data4_g170694.NormalTS;
				Out_NormalWS4_g170694 = Data4_g170694.NormalWS;
				Out_Shader4_g170694 = Data4_g170694.Shader;
				Out_Emissive4_g170694= Data4_g170694.Emissive;
				Out_MultiMask4_g170694 = Data4_g170694.MultiMask;
				Out_Grayscale4_g170694 = Data4_g170694.Grayscale;
				Out_Luminosity4_g170694= Data4_g170694.Luminosity;
				Out_AlphaClip4_g170694 = Data4_g170694.AlphaClip;
				Out_AlphaFade4_g170694 = Data4_g170694.AlphaFade;
				Out_Translucency4_g170694 = Data4_g170694.Translucency;
				Out_Transmission4_g170694 = Data4_g170694.Transmission;
				Out_Thickness4_g170694 = Data4_g170694.Thickness;
				Out_Diffusion4_g170694 = Data4_g170694.Diffusion;
				}
				float3 In_Albedo3_g170692 = Out_Albedo4_g170694;
				float3 In_AlbedoRaw3_g170692 = Out_AlbedoRaw4_g170694;
				float2 In_NormalTS3_g170692 = Out_NormalTS4_g170694;
				float3 In_NormalWS3_g170692 = Out_NormalWS4_g170694;
				float4 In_Shader3_g170692 = Out_Shader4_g170694;
				float4 In_Emissive3_g170692 = Out_Emissive4_g170694;
				float In_Grayscale3_g170692 = Out_Grayscale4_g170694;
				float In_Luminosity3_g170692 = Out_Luminosity4_g170694;
				float temp_output_836_11_g170691 = Out_MultiMask4_g170694;
				float In_MultiMask3_g170692 = temp_output_836_11_g170691;
				half Visual_AlphaClip667_g170691 = Out_AlphaClip4_g170694;
				half Input_True57_g170701 = Visual_AlphaClip667_g170691;
				half True36_g170701 = Input_True57_g170701;
				TVEGlobalData Data15_g170693 = Data204_g170214;
				float Out_Dummy15_g170693 = 0;
				float4 Out_CoatParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170693 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170693 = Data15_g170693.Dummy;
				Out_CoatParams15_g170693 = Data15_g170693.CoatParams;
				Out_PaintParams15_g170693 = Data15_g170693.PaintParams;
				Out_GlowParams15_g170693 = Data15_g170693.GlowParams;
				Out_AtmoParams15_g170693= Data15_g170693.AtmoParams;
				Out_FadeParams15_g170693= Data15_g170693.FadeParams;
				Out_FormParams15_g170693 = Data15_g170693.FormParams;
				Out_FlowParams15_g170693 = Data15_g170693.FlowParams;
				}
				half4 Global_FadeParams516_g170691 = Out_FadeParams15_g170693;
				float temp_output_6_0_g170704 = saturate( (Global_FadeParams516_g170691).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170704 = ( temp_output_6_0_g170704 + ( _CutoutElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170704 = temp_output_6_0_g170704;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170691 = staticSwitch14_g170704;
				#else
				float staticSwitch663_g170691 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170691 = lerp( 1.0 , ( staticSwitch663_g170691 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170691 = lerpResult843_g170691;
				float lerpResult811_g170691 = lerp( 1.0 , Visual_AlphaClip667_g170691 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170691 = lerpResult811_g170691;
				TVEModelData Data15_g170695 = Data16_g170201;
				float Out_Dummy15_g170695 = 0;
				float3 Out_PositionWS15_g170695 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170695 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170695 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170695 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170695 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170695 = float3( 0,0,0 );
				float4 Out_VertexData15_g170695 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170695 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170695 = Data15_g170695.Dummy;
				Out_PositionWS15_g170695 = Data15_g170695.PositionWS;
				Out_PositionWO15_g170695 = Data15_g170695.PositionWO;
				Out_PivotWS15_g170695 = Data15_g170695.PivotWS;
				Out_PivotWO15_g170695 = Data15_g170695.PivotWO;
				Out_NormalWS15_g170695 = Data15_g170695.NormalWS;
				Out_ViewDirWS15_g170695 = Data15_g170695.ViewDirWS;
				Out_VertexData15_g170695 = Data15_g170695.VertexData;
				Out_BoundsData15_g170695 = Data15_g170695.BoundsData;
				}
				half3 Model_PositionWO602_g170691 = Out_PositionWO15_g170695;
				float4 tex3DNode60_g170698 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170691 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170691 = lerp( 1.0 , tex3DNode60_g170698.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170691 = lerpResult673_g170691;
				half4 Model_VertexMasks752_g170691 = Out_VertexData15_g170695;
				float4 break755_g170691 = Model_VertexMasks752_g170691;
				float4 break33_g170696 = _cutout_vert_mode;
				float temp_output_30_0_g170696 = ( break755_g170691.x * break33_g170696.x );
				float temp_output_29_0_g170696 = ( break755_g170691.y * break33_g170696.y );
				float temp_output_31_0_g170696 = ( break755_g170691.z * break33_g170696.z );
				float temp_output_28_0_g170696 = ( temp_output_30_0_g170696 + temp_output_29_0_g170696 + temp_output_31_0_g170696 + ( break755_g170691.w * break33_g170696.w ) );
				float clampResult17_g170697 = clamp( temp_output_28_0_g170696 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170703 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170703 = ( clampResult17_g170697 - temp_output_7_0_g170703 );
				float lerpResult820_g170691 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170703 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170700 = lerpResult820_g170691;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170700 = ( temp_output_6_0_g170700 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170700 = temp_output_6_0_g170700;
				#endif
				float temp_output_801_0_g170691 = staticSwitch14_g170700;
				half Local_VertMask766_g170691 = temp_output_801_0_g170691;
				half Visual_MultiMask671_g170691 = temp_output_836_11_g170691;
				float lerpResult683_g170691 = lerp( 1.0 , Visual_MultiMask671_g170691 , _CutoutMultiValue);
				half Local_MultiMask685_g170691 = lerpResult683_g170691;
				float lerpResult728_g170691 = lerp( Visual_AlphaClip667_g170691 , min( Visual_AlphaClip667_g170691 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170691 ) - ( Local_AlphaMask814_g170691 * Local_NoiseMask678_g170691 * Local_VertMask766_g170691 ) ) ) ) , Local_MultiMask685_g170691);
				half Local_AlphaClip784_g170691 = lerpResult728_g170691;
				half Input_False58_g170701 = Local_AlphaClip784_g170691;
				half False36_g170701 = Input_False58_g170701;
				half localShadowPassCheck36_g170701 = ShadowPassCheck36_g170701( True36_g170701 , False36_g170701 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170691 = Local_AlphaClip784_g170691;
				#else
				float staticSwitch791_g170691 = localShadowPassCheck36_g170701;
				#endif
				float temp_output_6_0_g170702 = staticSwitch791_g170691;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170702 = ( temp_output_6_0_g170702 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170702 = temp_output_6_0_g170702;
				#endif
				float temp_output_798_0_g170691 = staticSwitch14_g170702;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170691 = temp_output_798_0_g170691;
				#else
				float staticSwitch577_g170691 = Visual_AlphaClip667_g170691;
				#endif
				half Final_AlphaClip795_g170691 = staticSwitch577_g170691;
				float In_AlphaClip3_g170692 = Final_AlphaClip795_g170691;
				float In_AlphaFade3_g170692 = Out_AlphaFade4_g170694;
				float3 In_Translucency3_g170692 = Out_Translucency4_g170694;
				float In_Transmission3_g170692 = Out_Transmission4_g170694;
				float In_Thickness3_g170692 = Out_Thickness4_g170694;
				float In_Diffusion3_g170692 = Out_Diffusion4_g170694;
				{
				Data3_g170692.Dummy = In_Dummy3_g170692;
				Data3_g170692.Albedo = In_Albedo3_g170692;
				Data3_g170692.AlbedoRaw = In_AlbedoRaw3_g170692;
				Data3_g170692.NormalTS = In_NormalTS3_g170692;
				Data3_g170692.NormalWS = In_NormalWS3_g170692;
				Data3_g170692.Shader = In_Shader3_g170692;
				Data3_g170692.Emissive= In_Emissive3_g170692;
				Data3_g170692.MultiMask = In_MultiMask3_g170692;
				Data3_g170692.Grayscale = In_Grayscale3_g170692;
				Data3_g170692.Luminosity = In_Luminosity3_g170692;
				Data3_g170692.AlphaClip = In_AlphaClip3_g170692;
				Data3_g170692.AlphaFade = In_AlphaFade3_g170692;
				Data3_g170692.Translucency = In_Translucency3_g170692;
				Data3_g170692.Transmission = In_Transmission3_g170692;
				Data3_g170692.Thickness = In_Thickness3_g170692;
				Data3_g170692.Diffusion = In_Diffusion3_g170692;
				}
				TVEVisualData Data4_g170708 = Data3_g170692;
				float Out_Dummy4_g170708 = 0;
				float3 Out_Albedo4_g170708 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170708 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170708 = float2( 0,0 );
				float3 Out_NormalWS4_g170708 = float3( 0,0,0 );
				float4 Out_Shader4_g170708 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170708 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170708 = 0;
				float Out_Grayscale4_g170708 = 0;
				float Out_Luminosity4_g170708 = 0;
				float Out_AlphaClip4_g170708 = 0;
				float Out_AlphaFade4_g170708 = 0;
				float3 Out_Translucency4_g170708 = float3( 0,0,0 );
				float Out_Transmission4_g170708 = 0;
				float Out_Thickness4_g170708 = 0;
				float Out_Diffusion4_g170708 = 0;
				{
				Out_Dummy4_g170708 = Data4_g170708.Dummy;
				Out_Albedo4_g170708 = Data4_g170708.Albedo;
				Out_AlbedoRaw4_g170708 = Data4_g170708.AlbedoRaw;
				Out_NormalTS4_g170708 = Data4_g170708.NormalTS;
				Out_NormalWS4_g170708 = Data4_g170708.NormalWS;
				Out_Shader4_g170708 = Data4_g170708.Shader;
				Out_Emissive4_g170708= Data4_g170708.Emissive;
				Out_MultiMask4_g170708 = Data4_g170708.MultiMask;
				Out_Grayscale4_g170708 = Data4_g170708.Grayscale;
				Out_Luminosity4_g170708= Data4_g170708.Luminosity;
				Out_AlphaClip4_g170708 = Data4_g170708.AlphaClip;
				Out_AlphaFade4_g170708 = Data4_g170708.AlphaFade;
				Out_Translucency4_g170708 = Data4_g170708.Translucency;
				Out_Transmission4_g170708 = Data4_g170708.Transmission;
				Out_Thickness4_g170708 = Data4_g170708.Thickness;
				Out_Diffusion4_g170708 = Data4_g170708.Diffusion;
				}
				float3 In_Albedo3_g170709 = Out_Albedo4_g170708;
				float3 In_AlbedoRaw3_g170709 = Out_AlbedoRaw4_g170708;
				float2 In_NormalTS3_g170709 = Out_NormalTS4_g170708;
				float3 In_NormalWS3_g170709 = Out_NormalWS4_g170708;
				float4 In_Shader3_g170709 = Out_Shader4_g170708;
				float4 In_Emissive3_g170709 = Out_Emissive4_g170708;
				float In_Grayscale3_g170709 = Out_Grayscale4_g170708;
				float In_Luminosity3_g170709 = Out_Luminosity4_g170708;
				float temp_output_821_11_g170706 = Out_MultiMask4_g170708;
				float In_MultiMask3_g170709 = temp_output_821_11_g170706;
				half Visual_AlphaClip754_g170706 = Out_AlphaClip4_g170708;
				half Input_True57_g170711 = Visual_AlphaClip754_g170706;
				half True36_g170711 = Input_True57_g170711;
				half Dither_Constant768_g170706 = _DitherConstantValue;
				float3 ase_positionWS = GetAbsolutePositionWS( PositionRWS );
				half Dither_BiasProximity881_g170706 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170706 = TVE_DitherParams.w;
				float lerpResult884_g170706 = lerp( 1.0 , Dither_BiasProximity881_g170706 , Dither_BiasEnabled883_g170706);
				float temp_output_7_0_g170717 = _DitherProximityMaxValue;
				float temp_output_9_0_g170717 = ( ( distance( ase_positionWS , _WorldSpaceCameraPos ) * lerpResult884_g170706 ) - temp_output_7_0_g170717 );
				half Dither_Proximity767_g170706 = ( saturate( ( ( temp_output_9_0_g170717 / ( _DitherProximityMinValue - temp_output_7_0_g170717 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170710 = Data16_g170201;
				float Out_Dummy15_g170710 = 0;
				float3 Out_PositionWS15_g170710 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170710 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170710 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170710 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170710 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170710 = float3( 0,0,0 );
				float4 Out_VertexData15_g170710 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170710 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170710 = Data15_g170710.Dummy;
				Out_PositionWS15_g170710 = Data15_g170710.PositionWS;
				Out_PositionWO15_g170710 = Data15_g170710.PositionWO;
				Out_PivotWS15_g170710 = Data15_g170710.PivotWS;
				Out_PivotWO15_g170710 = Data15_g170710.PivotWO;
				Out_NormalWS15_g170710 = Data15_g170710.NormalWS;
				Out_ViewDirWS15_g170710 = Data15_g170710.ViewDirWS;
				Out_VertexData15_g170710 = Data15_g170710.VertexData;
				Out_BoundsData15_g170710 = Data15_g170710.BoundsData;
				}
				half3 Model_PositionWS776_g170706 = Out_PositionWS15_g170710;
				half Dither_BiasDistance882_g170706 = TVE_DitherParams.z;
				float lerpResult888_g170706 = lerp( 1.0 , Dither_BiasDistance882_g170706 , Dither_BiasEnabled883_g170706);
				float temp_output_7_0_g170718 = _DitherDistanceMinValue;
				float temp_output_9_0_g170718 = ( ( distance( Model_PositionWS776_g170706 , _WorldSpaceCameraPos ) * lerpResult888_g170706 ) - temp_output_7_0_g170718 );
				half Dither_Distance856_g170706 = ( saturate( ( ( temp_output_9_0_g170718 / ( _DitherDistanceMaxValue - temp_output_7_0_g170718 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170706 = Out_ViewDirWS15_g170710;
				float3 normalizeResult792_g170706 = normalize( cross( ddy( ase_positionWS ) , ddx( ase_positionWS ) ) );
				float dotResult778_g170706 = dot( Model_ViewDirWS845_g170706 , normalizeResult792_g170706 );
				half Dither_Glancing784_g170706 = ( saturate( ( ( 1.0 - abs( dotResult778_g170706 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170706 = max( max( max( Dither_Constant768_g170706 , Dither_Proximity767_g170706 ) , Dither_Distance856_g170706 ) , Dither_Glancing784_g170706 );
				half3 Model_PositionWO602_g170706 = Out_PositionWO15_g170710;
				float4 tex3DNode60_g170713 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170706 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170706 = tex3DNode60_g170713.r;
				half Local_MaskNoise678_g170706 = temp_output_809_0_g170706;
				half Visual_MultiMask671_g170706 = temp_output_821_11_g170706;
				float lerpResult683_g170706 = lerp( 1.0 , Visual_MultiMask671_g170706 , _DitherMultiValue);
				half Local_MaskMulti685_g170706 = lerpResult683_g170706;
				half Custom_Mask826_g170706 = 1.0;
				float lerpResult728_g170706 = lerp( Visual_AlphaClip754_g170706 , min( Visual_AlphaClip754_g170706 , ( -0.001 - ( Dither_Value429_g170706 - Local_MaskNoise678_g170706 ) ) ) , ( Local_MaskMulti685_g170706 * Custom_Mask826_g170706 ));
				half Local_AlphaClip834_g170706 = lerpResult728_g170706;
				half Input_False58_g170711 = Local_AlphaClip834_g170706;
				half False36_g170711 = Input_False58_g170711;
				half localShadowPassCheck36_g170711 = ShadowPassCheck36_g170711( True36_g170711 , False36_g170711 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170706 = Local_AlphaClip834_g170706;
				#else
				float staticSwitch831_g170706 = localShadowPassCheck36_g170711;
				#endif
				float temp_output_6_0_g170712 = staticSwitch831_g170706;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170712 = ( temp_output_6_0_g170712 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170712 = temp_output_6_0_g170712;
				#endif
				float temp_output_840_0_g170706 = staticSwitch14_g170712;
				#ifdef TVE_DITHER
				float staticSwitch577_g170706 = temp_output_840_0_g170706;
				#else
				float staticSwitch577_g170706 = Visual_AlphaClip754_g170706;
				#endif
				half Final_AlphaClip493_g170706 = staticSwitch577_g170706;
				float In_AlphaClip3_g170709 = Final_AlphaClip493_g170706;
				float In_AlphaFade3_g170709 = Out_AlphaFade4_g170708;
				float3 In_Translucency3_g170709 = Out_Translucency4_g170708;
				float In_Transmission3_g170709 = Out_Transmission4_g170708;
				float In_Thickness3_g170709 = Out_Thickness4_g170708;
				float In_Diffusion3_g170709 = Out_Diffusion4_g170708;
				{
				Data3_g170709.Dummy = In_Dummy3_g170709;
				Data3_g170709.Albedo = In_Albedo3_g170709;
				Data3_g170709.AlbedoRaw = In_AlbedoRaw3_g170709;
				Data3_g170709.NormalTS = In_NormalTS3_g170709;
				Data3_g170709.NormalWS = In_NormalWS3_g170709;
				Data3_g170709.Shader = In_Shader3_g170709;
				Data3_g170709.Emissive= In_Emissive3_g170709;
				Data3_g170709.MultiMask = In_MultiMask3_g170709;
				Data3_g170709.Grayscale = In_Grayscale3_g170709;
				Data3_g170709.Luminosity = In_Luminosity3_g170709;
				Data3_g170709.AlphaClip = In_AlphaClip3_g170709;
				Data3_g170709.AlphaFade = In_AlphaFade3_g170709;
				Data3_g170709.Translucency = In_Translucency3_g170709;
				Data3_g170709.Transmission = In_Transmission3_g170709;
				Data3_g170709.Thickness = In_Thickness3_g170709;
				Data3_g170709.Diffusion = In_Diffusion3_g170709;
				}
				TVEVisualData Data4_g170731 = Data3_g170709;
				float Out_Dummy4_g170731 = 0;
				float3 Out_Albedo4_g170731 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170731 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170731 = float2( 0,0 );
				float3 Out_NormalWS4_g170731 = float3( 0,0,0 );
				float4 Out_Shader4_g170731 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170731 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170731 = 0;
				float Out_Grayscale4_g170731 = 0;
				float Out_Luminosity4_g170731 = 0;
				float Out_AlphaClip4_g170731 = 0;
				float Out_AlphaFade4_g170731 = 0;
				float3 Out_Translucency4_g170731 = float3( 0,0,0 );
				float Out_Transmission4_g170731 = 0;
				float Out_Thickness4_g170731 = 0;
				float Out_Diffusion4_g170731 = 0;
				{
				Out_Dummy4_g170731 = Data4_g170731.Dummy;
				Out_Albedo4_g170731 = Data4_g170731.Albedo;
				Out_AlbedoRaw4_g170731 = Data4_g170731.AlbedoRaw;
				Out_NormalTS4_g170731 = Data4_g170731.NormalTS;
				Out_NormalWS4_g170731 = Data4_g170731.NormalWS;
				Out_Shader4_g170731 = Data4_g170731.Shader;
				Out_Emissive4_g170731= Data4_g170731.Emissive;
				Out_MultiMask4_g170731 = Data4_g170731.MultiMask;
				Out_Grayscale4_g170731 = Data4_g170731.Grayscale;
				Out_Luminosity4_g170731= Data4_g170731.Luminosity;
				Out_AlphaClip4_g170731 = Data4_g170731.AlphaClip;
				Out_AlphaFade4_g170731 = Data4_g170731.AlphaFade;
				Out_Translucency4_g170731 = Data4_g170731.Translucency;
				Out_Transmission4_g170731 = Data4_g170731.Transmission;
				Out_Thickness4_g170731 = Data4_g170731.Thickness;
				Out_Diffusion4_g170731 = Data4_g170731.Diffusion;
				}
				float3 temp_output_297_0_g170727 = Out_Albedo4_g170731;
				float3 In_Albedo3_g170732 = temp_output_297_0_g170727;
				float3 temp_output_297_23_g170727 = Out_AlbedoRaw4_g170731;
				float3 In_AlbedoRaw3_g170732 = temp_output_297_23_g170727;
				float2 In_NormalTS3_g170732 = Out_NormalTS4_g170731;
				float3 In_NormalWS3_g170732 = Out_NormalWS4_g170731;
				float4 In_Shader3_g170732 = Out_Shader4_g170731;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170727 = Out_Emissive4_g170731;
				TVEModelData Data15_g170733 = Data16_g170201;
				float Out_Dummy15_g170733 = 0;
				float3 Out_PositionWS15_g170733 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170733 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170733 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170733 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170733 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170733 = float3( 0,0,0 );
				float4 Out_VertexData15_g170733 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170733 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170733 = Data15_g170733.Dummy;
				Out_PositionWS15_g170733 = Data15_g170733.PositionWS;
				Out_PositionWO15_g170733 = Data15_g170733.PositionWO;
				Out_PivotWS15_g170733 = Data15_g170733.PivotWS;
				Out_PivotWO15_g170733 = Data15_g170733.PivotWO;
				Out_NormalWS15_g170733 = Data15_g170733.NormalWS;
				Out_ViewDirWS15_g170733 = Data15_g170733.ViewDirWS;
				Out_VertexData15_g170733 = Data15_g170733.VertexData;
				Out_BoundsData15_g170733 = Data15_g170733.BoundsData;
				}
				half4 Model_VertexMasks216_g170727 = Out_VertexData15_g170733;
				float4 break251_g170727 = Model_VertexMasks216_g170727;
				float4 break33_g170738 = _emissive_vert_mode;
				float temp_output_30_0_g170738 = ( break251_g170727.x * break33_g170738.x );
				float temp_output_29_0_g170738 = ( break251_g170727.y * break33_g170738.y );
				float temp_output_31_0_g170738 = ( break251_g170727.z * break33_g170738.z );
				float temp_output_28_0_g170738 = ( temp_output_30_0_g170738 + temp_output_29_0_g170738 + temp_output_31_0_g170738 + ( break251_g170727.w * break33_g170738.w ) );
				float clampResult17_g170737 = clamp( temp_output_28_0_g170738 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170741 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170741 = ( clampResult17_g170737 - temp_output_7_0_g170741 );
				float lerpResult303_g170727 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170741 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170740 = lerpResult303_g170727;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170740 = ( temp_output_6_0_g170740 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170740 = temp_output_6_0_g170740;
				#endif
				half Emissive_MeshMask221_g170727 = staticSwitch14_g170740;
				TEXTURE2D(Texture276_g170729) = _EmissiveMaskTex;
				SamplerState Sampler276_g170729 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170730 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170730 = ( temp_output_6_0_g170730 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170730 = temp_output_6_0_g170730;
				#endif
				half4 Emissive_Coords167_g170727 = staticSwitch14_g170730;
				float4 temp_output_37_0_g170729 = Emissive_Coords167_g170727;
				half4 Coords276_g170729 = temp_output_37_0_g170729;
				half2 TexCoord276_g170729 = packedInput.ase_texcoord4.xy;
				half4 localSampleMain276_g170729 = SampleMain( Texture276_g170729 , Sampler276_g170729 , Coords276_g170729 , TexCoord276_g170729 );
				TEXTURE2D(Texture275_g170729) = _EmissiveMaskTex;
				SamplerState Sampler275_g170729 = sampler_Linear_Repeat;
				half4 Coords275_g170729 = temp_output_37_0_g170729;
				half2 TexCoord275_g170729 = packedInput.ase_texcoord5.xy;
				half4 localSampleExtra275_g170729 = SampleExtra( Texture275_g170729 , Sampler275_g170729 , Coords275_g170729 , TexCoord275_g170729 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170727 = localSampleMain276_g170729;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170727 = localSampleExtra275_g170729;
				#else
				float4 staticSwitch176_g170727 = localSampleMain276_g170729;
				#endif
				half4 Emissive_MaskTex201_g170727 = staticSwitch176_g170727;
				float clampResult17_g170739 = clamp( (Emissive_MaskTex201_g170727).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170742 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170742 = ( clampResult17_g170739 - temp_output_7_0_g170742 );
				float lerpResult302_g170727 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170742 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170727 = lerpResult302_g170727;
				float temp_output_279_0_g170727 = ( Emissive_MeshMask221_g170727 * Emissive_Mask103_g170727 );
				float3 appendResult293_g170727 = (float3(temp_output_279_0_g170727 , temp_output_279_0_g170727 , temp_output_279_0_g170727));
				half3 Local_EmissiveColor278_g170727 = appendResult293_g170727;
				float3 temp_output_316_0_g170727 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170728 = Data204_g170214;
				float Out_Dummy15_g170728 = 0;
				float4 Out_CoatParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170728 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170728 = Data15_g170728.Dummy;
				Out_CoatParams15_g170728 = Data15_g170728.CoatParams;
				Out_PaintParams15_g170728 = Data15_g170728.PaintParams;
				Out_GlowParams15_g170728 = Data15_g170728.GlowParams;
				Out_AtmoParams15_g170728= Data15_g170728.AtmoParams;
				Out_FadeParams15_g170728= Data15_g170728.FadeParams;
				Out_FormParams15_g170728 = Data15_g170728.FormParams;
				Out_FlowParams15_g170728 = Data15_g170728.FlowParams;
				}
				half4 Global_GlowParams179_g170727 = Out_GlowParams15_g170728;
				float3 temp_output_6_0_g170735 = (Global_GlowParams179_g170727).xyz;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170735 = ( temp_output_6_0_g170735 + ( _EmissiveElementMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170735 = temp_output_6_0_g170735;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170727 = staticSwitch14_g170735;
				#else
				float3 staticSwitch228_g170727 = temp_output_316_0_g170727;
				#endif
				float3 lerpResult299_g170727 = lerp( float3( 1,1,1 ) , staticSwitch228_g170727 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170727 = lerpResult299_g170727;
				half3 Visual_AlbedoRaw306_g170727 = temp_output_297_23_g170727;
				float3 lerpResult307_g170727 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170727 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170727 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170727 * lerpResult307_g170727 );
				half3 Emissive_Blend260_g170727 = ( ( (Visual_Emissive255_g170727).xyz * Local_EmissiveColor278_g170727 ) * Local_EmissiveValue88_g170727 );
				float3 temp_output_3_0_g170734 = Emissive_Blend260_g170727;
				float temp_output_15_0_g170734 = _emissive_power_value;
				float3 hdEmission22_g170734 = ASEGetEmissionHDRColor(temp_output_3_0_g170734,temp_output_15_0_g170734,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170727 = temp_output_279_0_g170727;
				float4 appendResult295_g170727 = (float4(hdEmission22_g170734 , Local_EmissiveMask294_g170727));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170727 = appendResult295_g170727;
				#else
				float4 staticSwitch129_g170727 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170727 = staticSwitch129_g170727;
				float4 In_Emissive3_g170732 = Final_Emissive184_g170727;
				float In_Grayscale3_g170732 = Out_Grayscale4_g170731;
				float In_Luminosity3_g170732 = Out_Luminosity4_g170731;
				float temp_output_297_11_g170727 = Out_MultiMask4_g170731;
				float In_MultiMask3_g170732 = temp_output_297_11_g170727;
				float In_AlphaClip3_g170732 = Out_AlphaClip4_g170731;
				float In_AlphaFade3_g170732 = Out_AlphaFade4_g170731;
				float3 In_Translucency3_g170732 = Out_Translucency4_g170731;
				float In_Transmission3_g170732 = Out_Transmission4_g170731;
				float In_Thickness3_g170732 = Out_Thickness4_g170731;
				float In_Diffusion3_g170732 = Out_Diffusion4_g170731;
				{
				Data3_g170732.Dummy = In_Dummy3_g170732;
				Data3_g170732.Albedo = In_Albedo3_g170732;
				Data3_g170732.AlbedoRaw = In_AlbedoRaw3_g170732;
				Data3_g170732.NormalTS = In_NormalTS3_g170732;
				Data3_g170732.NormalWS = In_NormalWS3_g170732;
				Data3_g170732.Shader = In_Shader3_g170732;
				Data3_g170732.Emissive= In_Emissive3_g170732;
				Data3_g170732.MultiMask = In_MultiMask3_g170732;
				Data3_g170732.Grayscale = In_Grayscale3_g170732;
				Data3_g170732.Luminosity = In_Luminosity3_g170732;
				Data3_g170732.AlphaClip = In_AlphaClip3_g170732;
				Data3_g170732.AlphaFade = In_AlphaFade3_g170732;
				Data3_g170732.Translucency = In_Translucency3_g170732;
				Data3_g170732.Transmission = In_Transmission3_g170732;
				Data3_g170732.Thickness = In_Thickness3_g170732;
				Data3_g170732.Diffusion = In_Diffusion3_g170732;
				}
				TVEVisualData Data4_g170763 = Data3_g170732;
				float Out_Dummy4_g170763 = 0;
				float3 Out_Albedo4_g170763 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170763 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170763 = float2( 0,0 );
				float3 Out_NormalWS4_g170763 = float3( 0,0,0 );
				float4 Out_Shader4_g170763 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170763 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170763 = 0;
				float Out_Grayscale4_g170763 = 0;
				float Out_Luminosity4_g170763 = 0;
				float Out_AlphaClip4_g170763 = 0;
				float Out_AlphaFade4_g170763 = 0;
				float3 Out_Translucency4_g170763 = float3( 0,0,0 );
				float Out_Transmission4_g170763 = 0;
				float Out_Thickness4_g170763 = 0;
				float Out_Diffusion4_g170763 = 0;
				{
				Out_Dummy4_g170763 = Data4_g170763.Dummy;
				Out_Albedo4_g170763 = Data4_g170763.Albedo;
				Out_AlbedoRaw4_g170763 = Data4_g170763.AlbedoRaw;
				Out_NormalTS4_g170763 = Data4_g170763.NormalTS;
				Out_NormalWS4_g170763 = Data4_g170763.NormalWS;
				Out_Shader4_g170763 = Data4_g170763.Shader;
				Out_Emissive4_g170763= Data4_g170763.Emissive;
				Out_MultiMask4_g170763 = Data4_g170763.MultiMask;
				Out_Grayscale4_g170763 = Data4_g170763.Grayscale;
				Out_Luminosity4_g170763= Data4_g170763.Luminosity;
				Out_AlphaClip4_g170763 = Data4_g170763.AlphaClip;
				Out_AlphaFade4_g170763 = Data4_g170763.AlphaFade;
				Out_Translucency4_g170763 = Data4_g170763.Translucency;
				Out_Transmission4_g170763 = Data4_g170763.Transmission;
				Out_Thickness4_g170763 = Data4_g170763.Thickness;
				Out_Diffusion4_g170763 = Data4_g170763.Diffusion;
				}
				half3 Visual_Albedo199_g170762 = Out_Albedo4_g170763;
				half3 Final_Albedo312_g170762 = Visual_Albedo199_g170762;
				float3 In_Albedo3_g170764 = Final_Albedo312_g170762;
				float3 In_AlbedoRaw3_g170764 = Out_AlbedoRaw4_g170763;
				float2 In_NormalTS3_g170764 = Out_NormalTS4_g170763;
				float3 In_NormalWS3_g170764 = Out_NormalWS4_g170763;
				float4 In_Shader3_g170764 = Out_Shader4_g170763;
				float4 In_Emissive3_g170764 = Out_Emissive4_g170763;
				float In_Grayscale3_g170764 = Out_Grayscale4_g170763;
				float In_Luminosity3_g170764 = Out_Luminosity4_g170763;
				float temp_output_301_11_g170762 = Out_MultiMask4_g170763;
				float In_MultiMask3_g170764 = temp_output_301_11_g170762;
				float In_AlphaClip3_g170764 = Out_AlphaClip4_g170763;
				float In_AlphaFade3_g170764 = Out_AlphaFade4_g170763;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g170762 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170762 );
				half Visual_Transmission138_g170762 = Out_Transmission4_g170763;
				half Subsurface_Value268_g170762 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170765 = Data204_g170214;
				float Out_Dummy15_g170765 = 0;
				float4 Out_CoatParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170765 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170765 = Data15_g170765.Dummy;
				Out_CoatParams15_g170765 = Data15_g170765.CoatParams;
				Out_PaintParams15_g170765 = Data15_g170765.PaintParams;
				Out_GlowParams15_g170765 = Data15_g170765.GlowParams;
				Out_AtmoParams15_g170765= Data15_g170765.AtmoParams;
				Out_FadeParams15_g170765= Data15_g170765.FadeParams;
				Out_FormParams15_g170765 = Data15_g170765.FormParams;
				Out_FlowParams15_g170765 = Data15_g170765.FlowParams;
				}
				half4 Global_GlowParams373_g170762 = Out_GlowParams15_g170765;
				float temp_output_6_0_g170768 = saturate( (Global_GlowParams373_g170762).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170768 = ( temp_output_6_0_g170768 + ( _SubsurfaceElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170768 = temp_output_6_0_g170768;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170762 = staticSwitch14_g170768;
				#else
				float staticSwitch367_g170762 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g170762 = lerp( 1.0 , staticSwitch367_g170762 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170762 = lerpResult403_g170762;
				half Visual_MultiMask292_g170762 = temp_output_301_11_g170762;
				float lerpResult293_g170762 = lerp( 1.0 , Visual_MultiMask292_g170762 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170762 = lerpResult293_g170762;
				half Custom_Mask363_g170762 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170762 = ( Visual_Transmission138_g170762 * Subsurface_Value268_g170762 * Subsurface_GlobalMask369_g170762 * Subsurface_MultiMask296_g170762 * Custom_Mask363_g170762 );
				#else
				float staticSwitch345_g170762 = 0.0;
				#endif
				half Final_Transmission269_g170762 = staticSwitch345_g170762;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170762 = ( Subsurface_Color264_g170762 * Final_Transmission269_g170762 * 10.0 );
				#else
				float3 staticSwitch348_g170762 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g170762 = staticSwitch348_g170762;
				float3 In_Translucency3_g170764 = Final_Translucency254_g170762;
				float In_Transmission3_g170764 = Final_Transmission269_g170762;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170762 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170762 = 1.0;
				#endif
				half Final_Thickness275_g170762 = staticSwitch351_g170762;
				float In_Thickness3_g170764 = Final_Thickness275_g170762;
				float Final_Diffusion340_g170762 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170764 = Final_Diffusion340_g170762;
				{
				Data3_g170764.Dummy = In_Dummy3_g170764;
				Data3_g170764.Albedo = In_Albedo3_g170764;
				Data3_g170764.AlbedoRaw = In_AlbedoRaw3_g170764;
				Data3_g170764.NormalTS = In_NormalTS3_g170764;
				Data3_g170764.NormalWS = In_NormalWS3_g170764;
				Data3_g170764.Shader = In_Shader3_g170764;
				Data3_g170764.Emissive= In_Emissive3_g170764;
				Data3_g170764.MultiMask = In_MultiMask3_g170764;
				Data3_g170764.Grayscale = In_Grayscale3_g170764;
				Data3_g170764.Luminosity = In_Luminosity3_g170764;
				Data3_g170764.AlphaClip = In_AlphaClip3_g170764;
				Data3_g170764.AlphaFade = In_AlphaFade3_g170764;
				Data3_g170764.Translucency = In_Translucency3_g170764;
				Data3_g170764.Transmission = In_Transmission3_g170764;
				Data3_g170764.Thickness = In_Thickness3_g170764;
				Data3_g170764.Diffusion = In_Diffusion3_g170764;
				}
				TVEVisualData Data4_g170777 = Data3_g170764;
				float Out_Dummy4_g170777 = 0;
				float3 Out_Albedo4_g170777 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170777 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170777 = float2( 0,0 );
				float3 Out_NormalWS4_g170777 = float3( 0,0,0 );
				float4 Out_Shader4_g170777 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170777 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170777 = 0;
				float Out_Grayscale4_g170777 = 0;
				float Out_Luminosity4_g170777 = 0;
				float Out_AlphaClip4_g170777 = 0;
				float Out_AlphaFade4_g170777 = 0;
				float3 Out_Translucency4_g170777 = float3( 0,0,0 );
				float Out_Transmission4_g170777 = 0;
				float Out_Thickness4_g170777 = 0;
				float Out_Diffusion4_g170777 = 0;
				{
				Out_Dummy4_g170777 = Data4_g170777.Dummy;
				Out_Albedo4_g170777 = Data4_g170777.Albedo;
				Out_AlbedoRaw4_g170777 = Data4_g170777.AlbedoRaw;
				Out_NormalTS4_g170777 = Data4_g170777.NormalTS;
				Out_NormalWS4_g170777 = Data4_g170777.NormalWS;
				Out_Shader4_g170777 = Data4_g170777.Shader;
				Out_Emissive4_g170777= Data4_g170777.Emissive;
				Out_MultiMask4_g170777 = Data4_g170777.MultiMask;
				Out_Grayscale4_g170777 = Data4_g170777.Grayscale;
				Out_Luminosity4_g170777= Data4_g170777.Luminosity;
				Out_AlphaClip4_g170777 = Data4_g170777.AlphaClip;
				Out_AlphaFade4_g170777 = Data4_g170777.AlphaFade;
				Out_Translucency4_g170777 = Data4_g170777.Translucency;
				Out_Transmission4_g170777 = Data4_g170777.Transmission;
				Out_Thickness4_g170777 = Data4_g170777.Thickness;
				Out_Diffusion4_g170777 = Data4_g170777.Diffusion;
				}
				float3 appendResult23_g170771 = (float3(Out_NormalTS4_g170777 , 1.0));
				float3 temp_output_13_0_g170775 = appendResult23_g170771;
				float3 temp_output_33_0_g170775 = ( temp_output_13_0_g170775 * _render_normal );
				float3 switchResult12_g170775 = (((IsFrontFace>0)?(temp_output_13_0_g170775):(temp_output_33_0_g170775)));
				
				float4 break24_g170771 = Out_Shader4_g170777;
				
				float localCustomAlphaClip21_g170784 = ( 0.0 );
				float temp_output_3_0_g170784 = Out_AlphaClip4_g170777;
				float Alpha21_g170784 = temp_output_3_0_g170784;
				float temp_output_15_0_g170784 = 0.0;
				float Treshold21_g170784 = temp_output_15_0_g170784;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170784 - Treshold21_g170784);
				#endif
				#endif
				}
				
				surfaceDescription.Normal = switchResult12_g170775;
				surfaceDescription.Smoothness = break24_g170771.w;
				surfaceDescription.Alpha = saturate( ( Alpha21_g170784 * Out_AlphaFade4_g170777 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

                #if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
				outputDepth = posInput.deviceDepth;
				#endif

                #if SHADERPASS == SHADERPASS_SHADOWS
                float bias = max(abs(ddx(posInput.deviceDepth)), abs(ddy(posInput.deviceDepth))) * _SlopeScaleDepthBias;
                outputDepth += bias;
                #endif

				#ifdef SCENESELECTIONPASS
    				outColor = float4(_ObjectId, _PassValue, 1.0, 1.0);
				#elif defined(SCENEPICKINGPASS)
    				outColor = unity_SelectionID;
				#else
    				#ifdef WRITE_MSAA_DEPTH
    				depthColor = packedInput.positionCS.z;
    				depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
    				#endif

    				#if defined(WRITE_NORMAL_BUFFER)
    				EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
    				#endif

    				#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
    				DecalPrepassData decalPrepassData;
                    #ifdef _DISABLE_DECALS
				    ZERO_INITIALIZE(DecalPrepassData, decalPrepassData);
                    #else
    				decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
                    #endif
    				decalPrepassData.renderingLayerMask = GetMeshRenderingLayerMask();
    				EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
    				#endif

				#endif // SCENESELECTIONPASS

			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "MotionVectors"
			Tags { "LightMode"="MotionVectors" }

			Cull [_CullMode]

			ZWrite On

			Stencil
			{
				Ref [_StencilRefMV]
				WriteMask [_StencilWriteMaskMV]
				Comp Always
				Pass Replace
			}


			HLSLPROGRAM
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19702
			#define ASE_SRP_VERSION 170003
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile _ WRITE_NORMAL_BUFFER
            #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
            #pragma multi_compile_fragment _ WRITE_DECAL_BUFFER_AND_RENDERING_LAYER

			#ifdef WRITE_DECAL_BUFFER_AND_RENDERING_LAYER
			#define WRITE_DECAL_BUFFER
			#endif

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_MOTION_VECTORS

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
               #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			     #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _SecondProjRemap;
			half4 _DrynessLumaRemap;
			float4 _DrynessColor;
			half4 _wetness_water_vert_mode;
			half4 _WetnessWaterMeshRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			half4 _WetnessWaterBlendRemap;
			half4 _TintingBlendRemap;
			half4 _TintingMeshRemap;
			half4 _tinting_vert_mode;
			half4 _object_phase_mode;
			half4 _TintingLumaRemap;
			float4 _TintingColor;
			half4 _wetness_drops_vert_mode;
			half4 _WetnessDropsMeshRemap;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _GradientMeshRemap;
			half4 _WetnessMeshRemap;
			half4 _wetness_vert_mode;
			half4 _MotionBaseMaskRemap;
			half4 _motion_base_proc_mode;
			half4 _motion_tiny_vert_mode;
			half4 _OverlayProjRemap;
			half4 _motion_tiny_proc_mode;
			half4 _MotionSmallMaskRemap;
			half4 _OverlayLumaRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _overlay_coord_value;
			half4 _overlay_vert_mode;
			half4 _OverlayCoordValue;
			half4 _OverlayMeshRemap;
			half4 _OverlayColor;
			half4 _MotionHighlightColor;
			half4 _OverlayBlendRemap;
			half4 _second_vert_mode;
			half4 _DrynessBlendRemap;
			half4 _DrynessMeshRemap;
			half4 _WetnessWaterColor;
			half4 _dryness_vert_mode;
			half4 _motion_base_vert_mode;
			half4 _MotionTinyMaskRemap;
			half4 _GradientColorOne;
			half4 _gradient_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _emissive_coord_value;
			half4 _MainColor;
			half4 _ThirdColorTwo;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _third_coord_value;
			half4 _MainMultiRemap;
			half4 _EmissiveColor;
			half4 _second_coord_value;
			half4 _MainColorTwo;
			half4 _Color;
			half4 _SecondColor;
			half4 _SecondBlendRemap;
			half4 _SecondMultiRemap;
			half4 _SubsurfaceColor;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _SecondMeshRemap;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _SecondLumaRemap;
			half4 _SecondColorTwo;
			half4 _GradientColorTwo;
			half4 _ThirdColor;
			half4 _emissive_vert_mode;
			half4 _occlusion_vert_mode;
			half4 _cutout_vert_mode;
			half4 _CutoutMeshRemap;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _ThirdProjRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdMeshRemap;
			half4 _ThirdMaskCoordValue;
			half4 _third_vert_mode;
			half4 _ThirdLumaRemap;
			half4 _ThirdMaskRemap;
			half4 _SecondCoordValue;
			half4 _third_mask_coord_value;
			half4 _SecondMaskCoordValue;
			half4 _ThirdMultiRemap;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _EmissiveMeshRemap;
			half4 _OverlayGlitterColor;
			half3 _motion_highlight_color;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half _OverlayGlitterIntensityValue;
			half _ThirdBlendAlbedoValue;
			half _DitherGlancingValue;
			half _ThirdIntensityValue;
			half _DitherGlancingAngleValue;
			half _DitherDistanceValue;
			half _DitherDistanceMaxValue;
			half _ThirdMaskValue;
			half _DitherDistanceMinValue;
			half _ThirdLumaValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _DitherProximityMaxValue;
			half _ThirdMeshValue;
			half _DitherConstantValue;
			half _ThirdMeshMode;
			half _CutoutShadowMode;
			half _ThirdProjValue;
			half _ThirdElementMode;
			half _ThirdGlobalValue;
			half _CutoutMultiValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _ThirdNormalValue;
			half _ThirdBlendShaderValue;
			half _ThirdAlphaClipValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _ThirdColorMode;
			half _DitherNoiseTillingValue;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SubsurfaceElementMode;
			half _SubsurfaceIntensityValue;
			half _SecondMeshValue;
			half _SecondMeshMode;
			half _SecondElementMode;
			half _EmissiveExposureValue;
			half _SecondGlobalValue;
			float _emissive_power_value;
			half _SecondBlendIntensityValue;
			half _EmissiveColorMode;
			half _EmissiveGlobalValue;
			half _CutoutNoiseValue;
			half _SecondBlendNormalValue;
			half _SecondNormalValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _ThirdAlbedoValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _ThirdMetallicValue;
			half _DitherMultiValue;
			half _EmissiveElementMode;
			half _CutoutNoiseTillingValue;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _WetnessWaterMeshValue;
			half _WetnessMeshMode;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _WetnessMeshValue;
			half _WetnessGlobalValue;
			half _DrynessLumaValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _OverlaySubsurfaceValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _DrynessGrayValue;
			half _OverlaySmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _OverlayGlobalValue;
			half _MotionHighlightValue;
			half _OverlayElementMode;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _OverlayIntensityValue;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _OverlayGlitterDistValue;
			half _OverlayTextureMode;
			half _OverlayNormalValue;
			half _OverlayGlitterTillingValue;
			half _DrynessGlobalValue;
			half _WetnessWaterBaseValue;
			half _CutoutAlphaValue;
			half _CutoutGlobalValue;
			half _CutoutElementMode;
			half _CutoutIntensityValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _WetnessSmoothnessValue;
			half _WetnessDropsMeshMode;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _WetnessDropsMeshValue;
			half _VariationIntensityValue;
			half _WetnessWaterMeshMode;
			half _VariationMultiValue;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _WetnessDropsDistValue;
			half _TintingIntensityValue;
			half _TintingMultiValue;
			half _WetnessDropsNormalValue;
			half _TintingLumaValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsTillingValue;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _WetnessContrastValue;
			half _DrynessElementMode;
			half _TintingElementMode;
			half _DrynessSmoothnessValue;
			half _SecondAlbedoValue;
			half _SecondLumaValue;
			half _GlobalGlowLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalPivotInfo;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _GlobalGlowPivotValue;
			half _SizeFadeDistMinValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _SizeFadeDistMaxValue;
			half _ObjectCategory;
			half _GlobalAtmoLayerValue;
			half _GlobalFadeLayerValue;
			half _MotionSmallPushValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionSmallMaskMode;
			half _GlobalAtmoPivotValue;
			half _motion_small_mask_mode;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _SizeFadeGlobalValue;
			half _SizeFadeElementMode;
			half _GlobalFlowPivotValue;
			half _GlobalFlowLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _MotionSmallIntensityValue;
			half _MotionTinyIntensityValue;
			half _PerspectiveEnd;
			half _SizeFadeEnd;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _RenderSSR;
			half _IsVersion;
			half _RenderZWrite;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _Cutoff;
			half _PerspectiveCategory;
			half _RenderPriority;
			half _RenderMotion;
			half _SizeFadeCategory;
			half _MotionPushInfo;
			half _MotionElementMode;
			half _MotionWindEnd;
			half _MotionCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _IsSubsurfaceShader;
			half _RenderQueue;
			half _IsGeneralShader;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _HasDefaultTextures;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _RenderShadow;
			half _RenderClip;
			half _RenderFilter;
			half _SecondProjValue;
			half _MotionDistValue;
			half _MotionTinyMaskMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _DetailEnd;
			half _SecondCoordMode;
			half _DetailCategory;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _OcclusionBakeMode;
			half _TintingEnd;
			half _SecondMaskSampleMode;
			half _SecondBakeMode;
			half _SecondMaskValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SubsurfaceThicknessValue;
			half _MainAlphaClipValue;
			half _SecondMaskCoordMode;
			half _MainNormalValue;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainCategory;
			half _MainColorMode;
			half _motion_tiny_mask_mode;
			half _TintingCategory;
			half _DrynessSpace;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseMaskMode;
			half _SubsurfaceEnd;
			half _motion_base_mask_mode;
			half _motion_small_mode;
			half _MotionBasePushValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionTinyNoiseValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionBaseIntensityValue;
			half _DrynessBakeMode;
			half _SubsurfaceDirectValue;
			half _SubsurfaceAmbientValue;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _SubsurfaceNormalValue;
			half _CutoutBakeMode;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceShadowValue;
			half _CutoutEnd;
			half _SubsurfaceAngleValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_SizeFadeParams;
			half4 TVE_FormParams;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			float TVE_FlowLayers[10];
			TEXTURE2D_ARRAY(TVE_FlowBaseTex);
			TEXTURE2D_ARRAY(TVE_FlowNearTex);
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			half4 TVE_AtmoData;
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			half4 TVE_DitherParams;
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 FlowParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 vmeshPositionCS : SV_Position;
				float3 vmeshInterp00 : TEXCOORD0;
				float3 vpassInterpolators0 : TEXCOORD1; //interpolators0
				float3 vpassInterpolators1 : TEXCOORD2; //interpolators1
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_color : COLOR;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half ShadowPassCheck36_g170701( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170711( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SmoothSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
                    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;

                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#if defined(DEBUG_DISPLAY)
				    #if !defined(SHADER_STAGE_RAY_TRACING)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   #ifdef FRAG_INPUTS_USE_TEXCOORD0
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                       #else
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                       #endif
					   surfaceData.metallic = 0;
				    }
					#endif
				    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData); 
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SmoothSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			AttributesMesh ApplyMeshModification(AttributesMesh inputMesh, float3 timeParameters, inout PackedVaryingsMeshToPS output )
			{
				_TimeParameters.xyz = timeParameters;
				TVEModelData Data16_g170761 = (TVEModelData)0;
				float In_Dummy16_g170761 = 0.0;
				TVEModelData Data16_g170745 = (TVEModelData)0;
				half Dummy1575_g170743 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170745 = Dummy1575_g170743;
				TVEModelData Data16_g170721 = (TVEModelData)0;
				float In_Dummy16_g170721 = 0.0;
				TVEModelData Data16_g170491 = (TVEModelData)0;
				half Dummy181_g170474 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170491 = Dummy181_g170474;
				TVEModelData Data16_g170433 = (TVEModelData)0;
				half Dummy181_g170431 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170433 = Dummy181_g170431;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170200 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170200 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170200 = PositionOS131_g170196;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_positionWS;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170200 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170206 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170206 = ( localObjectPosition_UNITY_MATRIX_M14_g170206 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170206 = localObjectPosition_UNITY_MATRIX_M14_g170206;
				#endif
				float3 temp_output_340_7_g170196 = staticSwitch13_g170206;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170208 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170204 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170204;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170208 = PivotOS149_g170196;
				float3 PivotsOnlyWS105_g170208 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170208 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170208 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170208 = ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 );
				#endif
				float3 temp_output_341_7_g170196 = staticSwitch13_g170208;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170200 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170200 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170200 = float3( 0,0,0 );
				float3 In_PivotOS16_g170200 = PivotOS149_g170196;
				float3 In_PivotWS16_g170200 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170200 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170200 = NormalOS134_g170196;
				float3 ase_normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170200 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170200 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170200 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170200 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170200 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170200 = VertexMasks171_g170196;
				float mulTime113_g170203 = _TimeParameters.x * 0.52;
				float lerpResult128_g170203 = lerp( mulTime113_g170203 , ( ( mulTime113_g170203 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170196 = PivotWO133_g170196;
				half Pivot_Position322_g170196 = ( break319_g170196.x + break319_g170196.z );
				float mulTime113_g170202 = _TimeParameters.x * 0.27;
				float lerpResult128_g170202 = lerp( mulTime113_g170202 , ( ( mulTime113_g170202 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170205 = _object_phase_mode;
				float temp_output_30_0_g170205 = ( inputMesh.ase_color.r * break33_g170205.x );
				float temp_output_29_0_g170205 = ( inputMesh.ase_color.g * break33_g170205.y );
				float temp_output_31_0_g170205 = ( inputMesh.ase_color.b * break33_g170205.z );
				float temp_output_28_0_g170205 = ( temp_output_30_0_g170205 + temp_output_29_0_g170205 + temp_output_31_0_g170205 + ( inputMesh.ase_color.a * break33_g170205.w ) );
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170205 + Pivot_Position322_g170196 ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(sin( ( lerpResult128_g170203 + Pivot_Position322_g170196 ) ) , sin( ( lerpResult128_g170202 + Pivot_Position322_g170196 ) ) , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_PhaseData16_g170200 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170200 = BoundsData254_g170196;
				float4 In_RotationData16_g170200 = float4( 0,0,0,0 );
				{
				Data16_g170200.Dummy = In_Dummy16_g170200;
				Data16_g170200.PositionOS = In_PositionOS16_g170200;
				Data16_g170200.PositionWS = In_PositionWS16_g170200;
				Data16_g170200.PositionWO = In_PositionWO16_g170200;
				Data16_g170200.PositionRawOS = In_PositionRawOS16_g170200;
				Data16_g170200.PositionAddOS = In_PositionAddOS16_g170200;
				Data16_g170200.PivotOS = In_PivotOS16_g170200;
				Data16_g170200.PivotWS = In_PivotWS16_g170200;
				Data16_g170200.PivotWO = In_PivotWO16_g170200;
				Data16_g170200.NormalOS = In_NormalOS16_g170200;
				Data16_g170200.NormalWS = In_NormalWS16_g170200;
				Data16_g170200.NormalRawOS = In_NormalRawOS16_g170200;
				Data16_g170200.NormalRawWS = In_NormalRawWS16_g170200;
				Data16_g170200.TangentOS = In_TangentOS16_g170200;
				Data16_g170200.ViewDirWS = In_ViewDirWS16_g170200;
				Data16_g170200.VertexData = In_VertexData16_g170200;
				Data16_g170200.PhaseData = In_PhaseData16_g170200;
				Data16_g170200.BoundsData = In_BoundsData16_g170200;
				Data16_g170200.RotationData = In_RotationData16_g170200;
				}
				TVEModelData Data15_g170371 = Data16_g170200;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_PhaseData15_g170371 = Data15_g170371.PhaseData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_PhaseData16_g170370 = Out_PhaseData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.PhaseData = In_PhaseData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_PhaseData15_g170391 = Data15_g170391.PhaseData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_viewDirSafeWS , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_viewDirSafeWS , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_PhaseData16_g170393 = Out_PhaseData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				{
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.PhaseData = In_PhaseData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				}
				TVEModelData Data15_g170432 = Data16_g170393;
				float Out_Dummy15_g170432 = 0;
				float3 Out_PositionOS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170432 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170432 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170432 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170432 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170432 = float3( 0,0,0 );
				float4 Out_VertexData15_g170432 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170432 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170432 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170432 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_PositionOS15_g170432 = Data15_g170432.PositionOS;
				Out_PositionWS15_g170432 = Data15_g170432.PositionWS;
				Out_PositionWO15_g170432 = Data15_g170432.PositionWO;
				Out_PositionRawOS15_g170432 = Data15_g170432.PositionRawOS;
				Out_PositionAddOS15_g170432 = Data15_g170432.PositionAddOS;
				Out_PivotOS15_g170432 = Data15_g170432.PivotOS;
				Out_PivotWS15_g170432 = Data15_g170432.PivotWS;
				Out_PivotWO15_g170432 = Data15_g170432.PivotWO;
				Out_NormalOS15_g170432 = Data15_g170432.NormalOS;
				Out_NormalWS15_g170432 = Data15_g170432.NormalWS;
				Out_NormalRawOS15_g170432 = Data15_g170432.NormalRawOS;
				Out_NormalRawWS15_g170432 = Data15_g170432.NormalRawWS;
				Out_TangentOS15_g170432 = Data15_g170432.TangentOS;
				Out_ViewDirWS15_g170432 = Data15_g170432.ViewDirWS;
				Out_VertexData15_g170432 = Data15_g170432.VertexData;
				Out_PhaseData15_g170432 = Data15_g170432.PhaseData;
				Out_BoundsData15_g170432 = Data15_g170432.BoundsData;
				Out_RotationData15_g170432 = Data15_g170432.RotationData;
				}
				half3 Model_PositionOS147_g170431 = Out_PositionOS15_g170432;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170431 = Out_PivotWO15_g170432;
				half3 Model_PivotWO162_g170431 = temp_output_210_19_g170431;
				float lerpResult216_g170431 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170435 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170435 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170431 ) * lerpResult216_g170431 ) - temp_output_7_0_g170435 );
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatParams204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintParams204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowParams204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoParams204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeParams204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormParams204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowParams204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatParams = In_CoatParams204_g170214;
				Data204_g170214.PaintParams = In_PaintParams204_g170214;
				Data204_g170214.GlowParams = In_GlowParams204_g170214;
				Data204_g170214.AtmoParams = In_AtmoParams204_g170214;
				Data204_g170214.FadeParams = In_FadeParams204_g170214;
				Data204_g170214.FormParams= In_FormParams204_g170214;
				Data204_g170214.FlowParams = In_FlowParams204_g170214;
				}
				TVEGlobalData Data15_g170434 = Data204_g170214;
				float Out_Dummy15_g170434 = 0;
				float4 Out_CoatParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170434 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170434 = Data15_g170434.Dummy;
				Out_CoatParams15_g170434 = Data15_g170434.CoatParams;
				Out_PaintParams15_g170434 = Data15_g170434.PaintParams;
				Out_GlowParams15_g170434 = Data15_g170434.GlowParams;
				Out_AtmoParams15_g170434= Data15_g170434.AtmoParams;
				Out_FadeParams15_g170434= Data15_g170434.FadeParams;
				Out_FormParams15_g170434 = Data15_g170434.FormParams;
				Out_FlowParams15_g170434 = Data15_g170434.FlowParams;
				}
				half4 Input_FormParams188_g170431 = Out_FormParams15_g170434;
				float temp_output_6_0_g170436 = saturate( (Input_FormParams188_g170431).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170436 = ( temp_output_6_0_g170436 + ( _SizeFadeElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170436 = temp_output_6_0_g170436;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170431 = staticSwitch14_g170436;
				#else
				float staticSwitch194_g170431 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170431 = lerp( 1.0 , staticSwitch194_g170431 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170431 = lerpResult213_g170431;
				float temp_output_189_0_g170431 = ( saturate( ( ( temp_output_9_0_g170435 / ( _SizeFadeDistMinValue - temp_output_7_0_g170435 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170431 );
				float3 appendResult200_g170431 = (float3(temp_output_189_0_g170431 , temp_output_189_0_g170431 , temp_output_189_0_g170431));
				float3 appendResult201_g170431 = (float3(1.0 , temp_output_189_0_g170431 , 1.0));
				float3 lerpResult202_g170431 = lerp( appendResult200_g170431 , appendResult201_g170431 , _SizeFadeScaleMode);
				float3 lerpResult184_g170431 = lerp( temp_cast_5 , lerpResult202_g170431 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170431 = ( lerpResult184_g170431 * Model_PositionOS147_g170431 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170431 = temp_output_167_0_g170431;
				#else
				float3 staticSwitch199_g170431 = Model_PositionOS147_g170431;
				#endif
				half3 Final_Position178_g170431 = staticSwitch199_g170431;
				float3 In_PositionOS16_g170433 = Final_Position178_g170431;
				float3 In_PositionWS16_g170433 = Out_PositionWS15_g170432;
				float3 In_PositionWO16_g170433 = Out_PositionWO15_g170432;
				float3 In_PositionRawOS16_g170433 = Out_PositionRawOS15_g170432;
				float3 In_PositionAddOS16_g170433 = Out_PositionAddOS15_g170432;
				float3 temp_output_210_24_g170431 = Out_PivotOS15_g170432;
				float3 In_PivotOS16_g170433 = temp_output_210_24_g170431;
				float3 In_PivotWS16_g170433 = Out_PivotWS15_g170432;
				float3 In_PivotWO16_g170433 = temp_output_210_19_g170431;
				float3 In_NormalOS16_g170433 = Out_NormalOS15_g170432;
				float3 In_NormalWS16_g170433 = Out_NormalWS15_g170432;
				float3 In_NormalRawOS16_g170433 = Out_NormalRawOS15_g170432;
				float3 In_NormalRawWS16_g170433 = Out_NormalRawWS15_g170432;
				float4 In_TangentOS16_g170433 = Out_TangentOS15_g170432;
				float3 In_ViewDirWS16_g170433 = Out_ViewDirWS15_g170432;
				float4 In_VertexData16_g170433 = Out_VertexData15_g170432;
				float4 In_PhaseData16_g170433 = Out_PhaseData15_g170432;
				float4 In_BoundsData16_g170433 = Out_BoundsData15_g170432;
				float4 In_RotationData16_g170433 = Out_RotationData15_g170432;
				{
				Data16_g170433.Dummy = In_Dummy16_g170433;
				Data16_g170433.PositionOS = In_PositionOS16_g170433;
				Data16_g170433.PositionWS = In_PositionWS16_g170433;
				Data16_g170433.PositionWO = In_PositionWO16_g170433;
				Data16_g170433.PositionRawOS = In_PositionRawOS16_g170433;
				Data16_g170433.PositionAddOS = In_PositionAddOS16_g170433;
				Data16_g170433.PivotOS = In_PivotOS16_g170433;
				Data16_g170433.PivotWS = In_PivotWS16_g170433;
				Data16_g170433.PivotWO = In_PivotWO16_g170433;
				Data16_g170433.NormalOS = In_NormalOS16_g170433;
				Data16_g170433.NormalWS = In_NormalWS16_g170433;
				Data16_g170433.NormalRawOS = In_NormalRawOS16_g170433;
				Data16_g170433.NormalRawWS = In_NormalRawWS16_g170433;
				Data16_g170433.TangentOS = In_TangentOS16_g170433;
				Data16_g170433.ViewDirWS = In_ViewDirWS16_g170433;
				Data16_g170433.VertexData = In_VertexData16_g170433;
				Data16_g170433.PhaseData = In_PhaseData16_g170433;
				Data16_g170433.BoundsData = In_BoundsData16_g170433;
				Data16_g170433.RotationData = In_RotationData16_g170433;
				}
				TVEModelData Data15_g170490 = Data16_g170433;
				float Out_Dummy15_g170490 = 0;
				float3 Out_PositionOS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170490 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170490 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170490 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170490 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170490 = float3( 0,0,0 );
				float4 Out_VertexData15_g170490 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170490 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170490 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170490 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170490 = Data15_g170490.Dummy;
				Out_PositionOS15_g170490 = Data15_g170490.PositionOS;
				Out_PositionWS15_g170490 = Data15_g170490.PositionWS;
				Out_PositionWO15_g170490 = Data15_g170490.PositionWO;
				Out_PositionRawOS15_g170490 = Data15_g170490.PositionRawOS;
				Out_PositionAddOS15_g170490 = Data15_g170490.PositionAddOS;
				Out_PivotOS15_g170490 = Data15_g170490.PivotOS;
				Out_PivotWS15_g170490 = Data15_g170490.PivotWS;
				Out_PivotWO15_g170490 = Data15_g170490.PivotWO;
				Out_NormalOS15_g170490 = Data15_g170490.NormalOS;
				Out_NormalWS15_g170490 = Data15_g170490.NormalWS;
				Out_NormalRawOS15_g170490 = Data15_g170490.NormalRawOS;
				Out_NormalRawWS15_g170490 = Data15_g170490.NormalRawWS;
				Out_TangentOS15_g170490 = Data15_g170490.TangentOS;
				Out_ViewDirWS15_g170490 = Data15_g170490.ViewDirWS;
				Out_VertexData15_g170490 = Data15_g170490.VertexData;
				Out_PhaseData15_g170490 = Data15_g170490.PhaseData;
				Out_BoundsData15_g170490 = Data15_g170490.BoundsData;
				Out_RotationData15_g170490 = Data15_g170490.RotationData;
				}
				float3 temp_output_2503_0_g170474 = Out_PositionOS15_g170490;
				float3 In_PositionOS16_g170491 = temp_output_2503_0_g170474;
				float3 temp_output_2503_16_g170474 = Out_PositionWS15_g170490;
				float3 In_PositionWS16_g170491 = temp_output_2503_16_g170474;
				float3 temp_output_2503_17_g170474 = Out_PositionWO15_g170490;
				float3 In_PositionWO16_g170491 = temp_output_2503_17_g170474;
				float3 In_PositionRawOS16_g170491 = Out_PositionRawOS15_g170490;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170474 = Out_VertexData15_g170490;
				half4 Model_VertexMasks518_g170474 = temp_output_2503_29_g170474;
				float4 break1689_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170475 = _motion_small_vert_mode;
				float temp_output_30_0_g170475 = ( break1689_g170474.x * break33_g170475.x );
				float temp_output_29_0_g170475 = ( break1689_g170474.y * break33_g170475.y );
				float temp_output_31_0_g170475 = ( break1689_g170474.z * break33_g170475.z );
				float temp_output_28_0_g170475 = ( temp_output_30_0_g170475 + temp_output_29_0_g170475 + temp_output_31_0_g170475 + ( break1689_g170474.w * break33_g170475.w ) );
				float temp_output_1727_0_g170474 = temp_output_28_0_g170475;
				float4 temp_output_2503_30_g170474 = Out_BoundsData15_g170490;
				half4 Model_BoundsData1322_g170474 = temp_output_2503_30_g170474;
				float4 break33_g170477 = _motion_small_proc_mode;
				float temp_output_30_0_g170477 = ( (Model_BoundsData1322_g170474).z * break33_g170477.x );
				float temp_output_29_0_g170477 = ( (Model_BoundsData1322_g170474).w * break33_g170477.y );
				float temp_output_1734_0_g170474 = ( temp_output_30_0_g170477 + temp_output_29_0_g170477 );
				float lerpResult1906_g170474 = lerp( temp_output_1727_0_g170474 , temp_output_1734_0_g170474 , _motion_small_mask_mode);
				float enc1805_g170474 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170474 = DecodeFloatToVector2( enc1805_g170474 );
				float2 break1804_g170474 = localDecodeFloatToVector21805_g170474;
				half Small_Mask_Legacy1806_g170474 = break1804_g170474.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170474 = Small_Mask_Legacy1806_g170474;
				#else
				float staticSwitch1800_g170474 = lerpResult1906_g170474;
				#endif
				float clampResult17_g170479 = clamp( staticSwitch1800_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170488 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170488 = ( clampResult17_g170479 - temp_output_7_0_g170488 );
				float temp_output_6_0_g170486 = saturate( ( ( temp_output_9_0_g170488 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170486 = ( temp_output_6_0_g170486 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170486 = temp_output_6_0_g170486;
				#endif
				half Small_Mask640_g170474 = staticSwitch14_g170486;
				float4 lerpResult836_g170510 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_MotionParams.w);
				half2 Global_WindDirWS2542_g170474 = ((lerpResult836_g170510).xy*2.0 + -1.0);
				half2 Input_WindDirWS803_g170505 = Global_WindDirWS2542_g170474;
				half3 Model_PositionWO162_g170474 = temp_output_2503_17_g170474;
				half3 Input_ModelPositionWO761_g170492 = Model_PositionWO162_g170474;
				float3 temp_output_2503_19_g170474 = Out_PivotWO15_g170490;
				half3 Model_PivotWO402_g170474 = temp_output_2503_19_g170474;
				half3 Input_ModelPivotsWO419_g170492 = Model_PivotWO402_g170474;
				half Input_MotionPivots629_g170492 = _MotionSmallPivotValue;
				float3 lerpResult771_g170492 = lerp( Input_ModelPositionWO761_g170492 , Input_ModelPivotsWO419_g170492 , Input_MotionPivots629_g170492);
				float4 temp_output_2503_27_g170474 = Out_PhaseData15_g170490;
				half4 Model_PhaseData489_g170474 = temp_output_2503_27_g170474;
				half4 Input_ModelMotionData763_g170492 = Model_PhaseData489_g170474;
				half Input_MotionPhase764_g170492 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170474 = ( lerpResult771_g170492 + ( (Input_ModelMotionData763_g170492).z * Input_MotionPhase764_g170492 * 5.0 ) );
				half3 Input_PositionWO419_g170505 = Small_Position1421_g170474;
				half Input_MotionTilling321_g170505 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170505 = ( -(Input_PositionWO419_g170505).xz * Input_MotionTilling321_g170505 * 0.005 );
				float2 temp_output_3_0_g170507 = Noise_Coord515_g170505;
				float2 temp_output_21_0_g170507 = Input_WindDirWS803_g170505;
				float lerpResult128_g170506 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170505 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170505 = ( lerpResult128_g170506 * 0.02 * Input_MotionSpeed62_g170505 );
				float temp_output_15_0_g170507 = Noise_Speed516_g170505;
				float temp_output_23_0_g170507 = frac( temp_output_15_0_g170507 );
				float4 lerpResult39_g170507 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170507 + ( temp_output_21_0_g170507 * temp_output_23_0_g170507 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170507 + ( temp_output_21_0_g170507 * frac( ( temp_output_15_0_g170507 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170507 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170505 = lerpResult39_g170507;
				half2 Noise_DirWS858_g170505 = ((temp_output_635_0_g170505).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170505 = _MotionSmallNoiseValue;
				half Global_WInd769_g170510 = (lerpResult836_g170510).z;
				TVEGlobalData Data15_g170498 = Data204_g170214;
				float Out_Dummy15_g170498 = 0;
				float4 Out_CoatParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170498 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170498 = Data15_g170498.Dummy;
				Out_CoatParams15_g170498 = Data15_g170498.CoatParams;
				Out_PaintParams15_g170498 = Data15_g170498.PaintParams;
				Out_GlowParams15_g170498 = Data15_g170498.GlowParams;
				Out_AtmoParams15_g170498= Data15_g170498.AtmoParams;
				Out_FadeParams15_g170498= Data15_g170498.FadeParams;
				Out_FormParams15_g170498 = Data15_g170498.FormParams;
				Out_FlowParams15_g170498 = Data15_g170498.FlowParams;
				}
				half4 Global_FlowParams2668_g170474 = Out_FlowParams15_g170498;
				half4 Input_GlobalFlow826_g170510 = Global_FlowParams2668_g170474;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170510 = saturate( (Input_GlobalFlow826_g170510).w );
				#else
				float staticSwitch612_g170510 = Global_WInd769_g170510;
				#endif
				float lerpResult853_g170510 = lerp( staticSwitch612_g170510 , saturate( (staticSwitch612_g170510*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170510 = _MotionIntensityValue;
				half Global_WindValue1855_g170474 = ( lerpResult853_g170510 * Input_MotionValue629_g170510 );
				half Input_WindValue881_g170505 = Global_WindValue1855_g170474;
				float lerpResult701_g170505 = lerp( 1.0 , Input_MotionNoise552_g170505 , Input_WindValue881_g170505);
				float2 lerpResult646_g170505 = lerp( Input_WindDirWS803_g170505 , Noise_DirWS858_g170505 , lerpResult701_g170505);
				half2 Small_DirWS817_g170505 = lerpResult646_g170505;
				float2 break823_g170505 = Small_DirWS817_g170505;
				half4 Noise_Params685_g170505 = temp_output_635_0_g170505;
				half Wind_Sinus820_g170505 = ( ((Noise_Params685_g170505).b*2.0 + -1.0) * Input_MotionNoise552_g170505 * 0.6 );
				float3 appendResult824_g170505 = (float3(break823_g170505.x , Wind_Sinus820_g170505 , break823_g170505.y));
				half Input_MotionDelay753_g170505 = _MotionSmallDelayValue;
				float lerpResult756_g170505 = lerp( 1.0 , ( Input_WindValue881_g170505 * Input_WindValue881_g170505 ) , Input_MotionDelay753_g170505);
				half Wind_Delay815_g170505 = lerpResult756_g170505;
				float3 appendResult825_g170505 = (float3(Wind_Delay815_g170505 , 1.0 , Wind_Delay815_g170505));
				float3 temp_output_827_0_g170505 = ( ( appendResult824_g170505 * Input_WindValue881_g170505 ) * appendResult825_g170505 );
				float2 break857_g170505 = Noise_DirWS858_g170505;
				float3 appendResult833_g170505 = (float3(break857_g170505.x , Wind_Sinus820_g170505 , break857_g170505.y));
				half Global_PushWave2675_g170474 = (Input_GlobalFlow826_g170510).z;
				half Input_PushWave890_g170505 = Global_PushWave2675_g170474;
				float2 temp_output_791_0_g170510 = ((Input_GlobalFlow826_g170510).xy*2.0 + -1.0);
				float temp_output_849_0_g170510 = saturate( length( temp_output_791_0_g170510 ) );
				half Global_PushAlpha1504_g170474 = temp_output_849_0_g170510;
				half Input_PushAlpha806_g170505 = ( Global_PushAlpha1504_g170474 * _MotionSmallPushValue );
				float3 lerpResult840_g170505 = lerp( temp_output_827_0_g170505 , ( appendResult833_g170505 * Input_PushWave890_g170505 ) , Input_PushAlpha806_g170505);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170505 = lerpResult840_g170505;
				#else
				float3 staticSwitch829_g170505 = temp_output_827_0_g170505;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half3 Small_Squash1489_g170474 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170505 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Motion789_g170474 = ( _MotionSmallIntensityValue * Small_Mask640_g170474 * Small_Squash1489_g170474 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170474 = Small_Motion789_g170474;
				#else
				float3 staticSwitch495_g170474 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170474 = temp_output_2503_16_g170474;
				half Global_DistMask1820_g170474 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170474 ) / _MotionDistValue ) ) );
				float4 break1710_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170476 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170476 = ( break1710_g170474.x * break33_g170476.x );
				float temp_output_29_0_g170476 = ( break1710_g170474.y * break33_g170476.y );
				float temp_output_31_0_g170476 = ( break1710_g170474.z * break33_g170476.z );
				float temp_output_28_0_g170476 = ( temp_output_30_0_g170476 + temp_output_29_0_g170476 + temp_output_31_0_g170476 + ( break1710_g170474.w * break33_g170476.w ) );
				float temp_output_1729_0_g170474 = temp_output_28_0_g170476;
				float4 break33_g170478 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170478 = ( (Model_BoundsData1322_g170474).z * break33_g170478.x );
				float temp_output_29_0_g170478 = ( (Model_BoundsData1322_g170474).w * break33_g170478.y );
				float temp_output_1735_0_g170474 = ( temp_output_30_0_g170478 + temp_output_29_0_g170478 );
				float lerpResult1908_g170474 = lerp( temp_output_1729_0_g170474 , temp_output_1735_0_g170474 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170474 = break1804_g170474.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170474 = Tiny_Mask_Legacy1807_g170474;
				#else
				float staticSwitch1810_g170474 = lerpResult1908_g170474;
				#endif
				float clampResult17_g170480 = clamp( staticSwitch1810_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170489 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170489 = ( clampResult17_g170480 - temp_output_7_0_g170489 );
				float temp_output_6_0_g170481 = saturate( ( ( temp_output_9_0_g170489 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170481 = ( temp_output_6_0_g170481 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170481 = temp_output_6_0_g170481;
				#endif
				half Tiny_Mask218_g170474 = staticSwitch14_g170481;
				float3 temp_output_2503_20_g170474 = Out_NormalOS15_g170490;
				half3 Model_NormalOS554_g170474 = temp_output_2503_20_g170474;
				half3 Input_NormalOS533_g170494 = Model_NormalOS554_g170474;
				half3 Tiny_Position2469_g170474 = Model_PositionWO162_g170474;
				half3 Input_PositionWO500_g170494 = Tiny_Position2469_g170474;
				half Input_MotionTilling321_g170494 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170496 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170494 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170494 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170494).xz * Input_MotionTilling321_g170494 * 0.005 ) + ( lerpResult128_g170496 * Input_MotionSpeed62_g170494 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170494 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170494 = lerp( ( Input_NormalOS533_g170494 * Flutter_Noise535_g170494 ) , Flutter_Noise535_g170494 , Input_MotionNoise542_g170494);
				half3 Input_ModelPositionWO761_g170493 = Model_PositionWO162_g170474;
				half3 Input_ModelPivotsWO419_g170493 = Model_PivotWO402_g170474;
				half Input_MotionPivots629_g170493 = _MotionBasePivotValue;
				float3 lerpResult771_g170493 = lerp( Input_ModelPositionWO761_g170493 , Input_ModelPivotsWO419_g170493 , Input_MotionPivots629_g170493);
				half4 Input_ModelMotionData763_g170493 = Model_PhaseData489_g170474;
				half Input_MotionPhase764_g170493 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170474 = ( lerpResult771_g170493 + ( (Input_ModelMotionData763_g170493).z * Input_MotionPhase764_g170493 * 5.0 ) );
				half3 Input_PositionWO419_g170499 = Base_Position1394_g170474;
				half Input_MotionTilling321_g170499 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170499 = ( -(Input_PositionWO419_g170499).xz * Input_MotionTilling321_g170499 * 0.005 );
				float2 temp_output_3_0_g170501 = Noise_Coord515_g170499;
				half2 Input_WindDirWS803_g170499 = Global_WindDirWS2542_g170474;
				float2 temp_output_21_0_g170501 = Input_WindDirWS803_g170499;
				float lerpResult128_g170500 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170499 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170499 = ( lerpResult128_g170500 * 0.02 * Input_MotionSpeed62_g170499 );
				float temp_output_15_0_g170501 = Noise_Speed516_g170499;
				float temp_output_23_0_g170501 = frac( temp_output_15_0_g170501 );
				float4 lerpResult39_g170501 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170501 + ( temp_output_21_0_g170501 * temp_output_23_0_g170501 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170501 + ( temp_output_21_0_g170501 * frac( ( temp_output_15_0_g170501 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170501 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170499 = lerpResult39_g170501;
				half4 Noise_Params685_g170499 = temp_output_635_0_g170499;
				half Input_WindValue853_g170499 = Global_WindValue1855_g170474;
				float temp_output_855_0_g170499 = ( (Noise_Params685_g170499).a * Input_WindValue853_g170499 );
				half Input_PushWave858_g170499 = Global_PushWave2675_g170474;
				half Input_PushAlpha806_g170499 = ( Global_PushAlpha1504_g170474 * _MotionBasePushValue );
				float lerpResult831_g170499 = lerp( temp_output_855_0_g170499 , Input_PushWave858_g170499 , Input_PushAlpha806_g170499);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170499 = lerpResult831_g170499;
				#else
				float staticSwitch828_g170499 = temp_output_855_0_g170499;
				#endif
				half Base_Wave1159_g170474 = staticSwitch828_g170499;
				float temp_output_888_0_g170505 = ( (Noise_Params685_g170505).b * Input_WindValue881_g170505 );
				float lerpResult867_g170505 = lerp( temp_output_888_0_g170505 , ( (Noise_Params685_g170505).b * Input_PushWave890_g170505 ) , Input_PushAlpha806_g170505);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170505 = lerpResult867_g170505;
				#else
				float staticSwitch886_g170505 = temp_output_888_0_g170505;
				#endif
				half Small_Wave1427_g170474 = staticSwitch886_g170505;
				float lerpResult2422_g170474 = lerp( Base_Wave1159_g170474 , Small_Wave1427_g170474 , _motion_small_mode);
				half Global_Wave1475_g170474 = lerpResult2422_g170474;
				half Input_GlobalWave546_g170494 = Global_Wave1475_g170474;
				float temp_output_548_0_g170494 = ( Input_GlobalWave546_g170494 * Input_GlobalWave546_g170494 );
				half Flutter_Wave556_g170494 = temp_output_548_0_g170494;
				half3 Tiny_Noise859_g170474 = ( lerpResult537_g170494 * Flutter_Wave556_g170494 );
				half3 Tiny_Flutter1451_g170474 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170474 * Tiny_Mask218_g170474 * Tiny_Noise859_g170474 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170474 = Tiny_Flutter1451_g170474;
				#else
				float3 staticSwitch414_g170474 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170474 = ( staticSwitch495_g170474 + staticSwitch414_g170474 );
				float3 In_PositionAddOS16_g170491 = Final_PositionADD1569_g170474;
				float3 temp_output_2503_24_g170474 = Out_PivotOS15_g170490;
				float3 In_PivotOS16_g170491 = temp_output_2503_24_g170474;
				float3 In_PivotWS16_g170491 = Out_PivotWS15_g170490;
				float3 In_PivotWO16_g170491 = temp_output_2503_19_g170474;
				float3 In_NormalOS16_g170491 = temp_output_2503_20_g170474;
				float3 In_NormalWS16_g170491 = Out_NormalWS15_g170490;
				float3 In_NormalRawOS16_g170491 = Out_NormalRawOS15_g170490;
				float3 In_NormalRawWS16_g170491 = Out_NormalRawWS15_g170490;
				float4 In_TangentOS16_g170491 = Out_TangentOS15_g170490;
				float3 In_ViewDirWS16_g170491 = Out_ViewDirWS15_g170490;
				float4 In_VertexData16_g170491 = temp_output_2503_29_g170474;
				float4 In_PhaseData16_g170491 = temp_output_2503_27_g170474;
				float4 In_BoundsData16_g170491 = temp_output_2503_30_g170474;
				float4 break748_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170483 = _motion_base_vert_mode;
				float temp_output_30_0_g170483 = ( break748_g170474.x * break33_g170483.x );
				float temp_output_29_0_g170483 = ( break748_g170474.y * break33_g170483.y );
				float temp_output_31_0_g170483 = ( break748_g170474.z * break33_g170483.z );
				float temp_output_28_0_g170483 = ( temp_output_30_0_g170483 + temp_output_29_0_g170483 + temp_output_31_0_g170483 + ( break748_g170474.w * break33_g170483.w ) );
				float temp_output_1731_0_g170474 = temp_output_28_0_g170483;
				float4 break33_g170484 = _motion_base_proc_mode;
				float temp_output_30_0_g170484 = ( (Model_BoundsData1322_g170474).z * break33_g170484.x );
				float temp_output_29_0_g170484 = ( (Model_BoundsData1322_g170474).w * break33_g170484.y );
				float temp_output_1733_0_g170474 = ( temp_output_30_0_g170484 + temp_output_29_0_g170484 );
				float lerpResult1904_g170474 = lerp( temp_output_1731_0_g170474 , temp_output_1733_0_g170474 , _motion_base_mask_mode);
				float clampResult17_g170482 = clamp( lerpResult1904_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170487 = ( clampResult17_g170482 - temp_output_7_0_g170487 );
				float temp_output_6_0_g170485 = saturate( ( ( temp_output_9_0_g170487 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170485 = ( temp_output_6_0_g170485 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170485 = temp_output_6_0_g170485;
				#endif
				half Base_Mask217_g170474 = staticSwitch14_g170485;
				half2 Noise_DirWS825_g170499 = ((temp_output_635_0_g170499).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170499 = _MotionBaseNoiseValue;
				float lerpResult701_g170499 = lerp( 1.0 , Input_MotionNoise552_g170499 , Input_WindValue853_g170499);
				float2 lerpResult646_g170499 = lerp( Input_WindDirWS803_g170499 , Noise_DirWS825_g170499 , lerpResult701_g170499);
				half Input_MotionDelay753_g170499 = _MotionBaseDelayValue;
				float lerpResult756_g170499 = lerp( 1.0 , ( Input_WindValue853_g170499 * Input_WindValue853_g170499 ) , Input_MotionDelay753_g170499);
				half Wind_Delay815_g170499 = lerpResult756_g170499;
				float2 temp_output_809_0_g170499 = ( lerpResult646_g170499 * Input_WindValue853_g170499 * Wind_Delay815_g170499 );
				half2 Global_PushDirWS1972_g170474 = temp_output_791_0_g170510;
				half2 Input_PushDirWS807_g170499 = Global_PushDirWS1972_g170474;
				float2 lerpResult811_g170499 = lerp( temp_output_809_0_g170499 , Input_PushDirWS807_g170499 , Input_PushAlpha806_g170499);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170499 = lerpResult811_g170499;
				#else
				float2 staticSwitch808_g170499 = temp_output_809_0_g170499;
				#endif
				float2 break83_g170504 = staticSwitch808_g170499;
				float3 appendResult79_g170504 = (float3(break83_g170504.x , 0.0 , break83_g170504.y));
				half2 Base_Bending893_g170474 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170504 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170474 = ( _MotionBaseIntensityValue * Base_Mask217_g170474 * Base_Bending893_g170474 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170474 = Base_Motion1440_g170474;
				#else
				float2 staticSwitch2384_g170474 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170474 = (float4(staticSwitch2384_g170474 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170474 = appendResult2023_g170474;
				float4 In_RotationData16_g170491 = Final_RotationData1570_g170474;
				{
				Data16_g170491.Dummy = In_Dummy16_g170491;
				Data16_g170491.PositionOS = In_PositionOS16_g170491;
				Data16_g170491.PositionWS = In_PositionWS16_g170491;
				Data16_g170491.PositionWO = In_PositionWO16_g170491;
				Data16_g170491.PositionRawOS = In_PositionRawOS16_g170491;
				Data16_g170491.PositionAddOS = In_PositionAddOS16_g170491;
				Data16_g170491.PivotOS = In_PivotOS16_g170491;
				Data16_g170491.PivotWS = In_PivotWS16_g170491;
				Data16_g170491.PivotWO = In_PivotWO16_g170491;
				Data16_g170491.NormalOS = In_NormalOS16_g170491;
				Data16_g170491.NormalWS = In_NormalWS16_g170491;
				Data16_g170491.NormalRawOS = In_NormalRawOS16_g170491;
				Data16_g170491.NormalRawWS = In_NormalRawWS16_g170491;
				Data16_g170491.TangentOS = In_TangentOS16_g170491;
				Data16_g170491.ViewDirWS = In_ViewDirWS16_g170491;
				Data16_g170491.VertexData = In_VertexData16_g170491;
				Data16_g170491.PhaseData = In_PhaseData16_g170491;
				Data16_g170491.BoundsData = In_BoundsData16_g170491;
				Data16_g170491.RotationData = In_RotationData16_g170491;
				}
				TVEModelData Data15_g170720 = Data16_g170491;
				float Out_Dummy15_g170720 = 0;
				float3 Out_PositionOS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170720 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170720 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170720 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170720 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170720 = float3( 0,0,0 );
				float4 Out_VertexData15_g170720 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170720 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170720 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170720 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170720 = Data15_g170720.Dummy;
				Out_PositionOS15_g170720 = Data15_g170720.PositionOS;
				Out_PositionWS15_g170720 = Data15_g170720.PositionWS;
				Out_PositionWO15_g170720 = Data15_g170720.PositionWO;
				Out_PositionRawOS15_g170720 = Data15_g170720.PositionRawOS;
				Out_PositionAddOS15_g170720 = Data15_g170720.PositionAddOS;
				Out_PivotOS15_g170720 = Data15_g170720.PivotOS;
				Out_PivotWS15_g170720 = Data15_g170720.PivotWS;
				Out_PivotWO15_g170720 = Data15_g170720.PivotWO;
				Out_NormalOS15_g170720 = Data15_g170720.NormalOS;
				Out_NormalWS15_g170720 = Data15_g170720.NormalWS;
				Out_NormalRawOS15_g170720 = Data15_g170720.NormalRawOS;
				Out_NormalRawWS15_g170720 = Data15_g170720.NormalRawWS;
				Out_TangentOS15_g170720 = Data15_g170720.TangentOS;
				Out_ViewDirWS15_g170720 = Data15_g170720.ViewDirWS;
				Out_VertexData15_g170720 = Data15_g170720.VertexData;
				Out_PhaseData15_g170720 = Data15_g170720.PhaseData;
				Out_BoundsData15_g170720 = Data15_g170720.BoundsData;
				Out_RotationData15_g170720 = Data15_g170720.RotationData;
				}
				half3 Model_PositionOS147_g170719 = Out_PositionOS15_g170720;
				half3 Input_False58_g170722 = Model_PositionOS147_g170719;
				half3 VertexPos40_g170723 = Model_PositionOS147_g170719;
				half3 VertexPos40_g170724 = VertexPos40_g170723;
				float3 appendResult74_g170724 = (float3(VertexPos40_g170724.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170724 = appendResult74_g170724;
				float3 break84_g170724 = VertexPos40_g170724;
				float3 appendResult81_g170724 = (float3(0.0 , break84_g170724.y , break84_g170724.z));
				half3 VertexPosOtherAxis82_g170724 = appendResult81_g170724;
				float4 temp_output_1567_33_g170719 = Out_RotationData15_g170720;
				half4 Model_VertexBend1569_g170719 = temp_output_1567_33_g170719;
				half2 Angle44_g170723 = (Model_VertexBend1569_g170719).xy;
				half Angle44_g170724 = (Angle44_g170723).y;
				half3 VertexPos40_g170725 = ( VertexPosRotationAxis50_g170724 + ( VertexPosOtherAxis82_g170724 * cos( Angle44_g170724 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170724 ) * sin( Angle44_g170724 ) ) );
				float3 appendResult74_g170725 = (float3(0.0 , 0.0 , VertexPos40_g170725.z));
				half3 VertexPosRotationAxis50_g170725 = appendResult74_g170725;
				float3 break84_g170725 = VertexPos40_g170725;
				float3 appendResult81_g170725 = (float3(break84_g170725.x , break84_g170725.y , 0.0));
				half3 VertexPosOtherAxis82_g170725 = appendResult81_g170725;
				half Angle44_g170725 = -(Angle44_g170723).x;
				half3 Input_True57_g170722 = ( VertexPosRotationAxis50_g170725 + ( VertexPosOtherAxis82_g170725 * cos( Angle44_g170725 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170725 ) * sin( Angle44_g170725 ) ) );
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170722 = Input_True57_g170722;
				#else
				float3 staticSwitch65_g170722 = Input_False58_g170722;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170722 = Input_True57_g170722;
				#else
				float3 staticSwitch69_g170722 = staticSwitch65_g170722;
				#endif
				float3 temp_output_1578_0_g170719 = staticSwitch69_g170722;
				float3 temp_output_1567_31_g170719 = Out_PositionAddOS15_g170720;
				half3 Model_PositionADD1568_g170719 = temp_output_1567_31_g170719;
				half3 Final_PositionOS178_g170719 = ( temp_output_1578_0_g170719 + Model_PositionADD1568_g170719 );
				float3 In_PositionOS16_g170721 = Final_PositionOS178_g170719;
				float3 In_PositionWS16_g170721 = Out_PositionWS15_g170720;
				float3 In_PositionWO16_g170721 = Out_PositionWO15_g170720;
				float3 In_PositionRawOS16_g170721 = Out_PositionRawOS15_g170720;
				float3 In_PositionAddOS16_g170721 = temp_output_1567_31_g170719;
				float3 In_PivotOS16_g170721 = Out_PivotOS15_g170720;
				float3 In_PivotWS16_g170721 = Out_PivotWS15_g170720;
				float3 In_PivotWO16_g170721 = Out_PivotWO15_g170720;
				float3 In_NormalOS16_g170721 = Out_NormalOS15_g170720;
				float3 In_NormalWS16_g170721 = Out_NormalWS15_g170720;
				float3 In_NormalRawOS16_g170721 = Out_NormalRawOS15_g170720;
				float3 In_NormalRawWS16_g170721 = Out_NormalRawWS15_g170720;
				float4 In_TangentOS16_g170721 = Out_TangentOS15_g170720;
				float3 In_ViewDirWS16_g170721 = Out_ViewDirWS15_g170720;
				float4 In_VertexData16_g170721 = Out_VertexData15_g170720;
				float4 In_PhaseData16_g170721 = Out_PhaseData15_g170720;
				float4 In_BoundsData16_g170721 = Out_BoundsData15_g170720;
				float4 In_RotationData16_g170721 = temp_output_1567_33_g170719;
				{
				Data16_g170721.Dummy = In_Dummy16_g170721;
				Data16_g170721.PositionOS = In_PositionOS16_g170721;
				Data16_g170721.PositionWS = In_PositionWS16_g170721;
				Data16_g170721.PositionWO = In_PositionWO16_g170721;
				Data16_g170721.PositionRawOS = In_PositionRawOS16_g170721;
				Data16_g170721.PositionAddOS = In_PositionAddOS16_g170721;
				Data16_g170721.PivotOS = In_PivotOS16_g170721;
				Data16_g170721.PivotWS = In_PivotWS16_g170721;
				Data16_g170721.PivotWO = In_PivotWO16_g170721;
				Data16_g170721.NormalOS = In_NormalOS16_g170721;
				Data16_g170721.NormalWS = In_NormalWS16_g170721;
				Data16_g170721.NormalRawOS = In_NormalRawOS16_g170721;
				Data16_g170721.NormalRawWS = In_NormalRawWS16_g170721;
				Data16_g170721.TangentOS = In_TangentOS16_g170721;
				Data16_g170721.ViewDirWS = In_ViewDirWS16_g170721;
				Data16_g170721.VertexData = In_VertexData16_g170721;
				Data16_g170721.PhaseData = In_PhaseData16_g170721;
				Data16_g170721.BoundsData = In_BoundsData16_g170721;
				Data16_g170721.RotationData = In_RotationData16_g170721;
				}
				TVEModelData Data15_g170744 = Data16_g170721;
				float Out_Dummy15_g170744 = 0;
				float3 Out_PositionOS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170744 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170744 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170744 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170744 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170744 = float3( 0,0,0 );
				float4 Out_VertexData15_g170744 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170744 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170744 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170744 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170744 = Data15_g170744.Dummy;
				Out_PositionOS15_g170744 = Data15_g170744.PositionOS;
				Out_PositionWS15_g170744 = Data15_g170744.PositionWS;
				Out_PositionWO15_g170744 = Data15_g170744.PositionWO;
				Out_PositionRawOS15_g170744 = Data15_g170744.PositionRawOS;
				Out_PositionAddOS15_g170744 = Data15_g170744.PositionAddOS;
				Out_PivotOS15_g170744 = Data15_g170744.PivotOS;
				Out_PivotWS15_g170744 = Data15_g170744.PivotWS;
				Out_PivotWO15_g170744 = Data15_g170744.PivotWO;
				Out_NormalOS15_g170744 = Data15_g170744.NormalOS;
				Out_NormalWS15_g170744 = Data15_g170744.NormalWS;
				Out_NormalRawOS15_g170744 = Data15_g170744.NormalRawOS;
				Out_NormalRawWS15_g170744 = Data15_g170744.NormalRawWS;
				Out_TangentOS15_g170744 = Data15_g170744.TangentOS;
				Out_ViewDirWS15_g170744 = Data15_g170744.ViewDirWS;
				Out_VertexData15_g170744 = Data15_g170744.VertexData;
				Out_PhaseData15_g170744 = Data15_g170744.PhaseData;
				Out_BoundsData15_g170744 = Data15_g170744.BoundsData;
				Out_RotationData15_g170744 = Data15_g170744.RotationData;
				}
				float3 In_PositionOS16_g170745 = Out_PositionOS15_g170744;
				float3 In_PositionWS16_g170745 = Out_PositionWS15_g170744;
				float3 temp_output_1567_17_g170743 = Out_PositionWO15_g170744;
				float3 In_PositionWO16_g170745 = temp_output_1567_17_g170743;
				float3 temp_output_1567_26_g170743 = Out_PositionRawOS15_g170744;
				float3 In_PositionRawOS16_g170745 = temp_output_1567_26_g170743;
				float3 In_PositionAddOS16_g170745 = Out_PositionAddOS15_g170744;
				float3 In_PivotOS16_g170745 = Out_PivotOS15_g170744;
				float3 In_PivotWS16_g170745 = Out_PivotWS15_g170744;
				float3 In_PivotWO16_g170745 = Out_PivotWO15_g170744;
				half3 Model_NormalOS1568_g170743 = Out_NormalOS15_g170744;
				float3 lerpResult1589_g170743 = lerp( Model_NormalOS1568_g170743 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170743 = temp_output_1567_26_g170743;
				float3 normalizeResult1594_g170743 = ASESafeNormalize( ( Model_PositionRAW1592_g170743 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170743 = lerp( lerpResult1589_g170743 , normalizeResult1594_g170743 , _NormalSphereValue);
				half3 Input_False58_g170758 = lerpResult1585_g170743;
				half3 VertexPos40_g170747 = lerpResult1585_g170743;
				half3 VertexPos40_g170748 = VertexPos40_g170747;
				float3 appendResult74_g170748 = (float3(VertexPos40_g170748.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170748 = appendResult74_g170748;
				float3 break84_g170748 = VertexPos40_g170748;
				float3 appendResult81_g170748 = (float3(0.0 , break84_g170748.y , break84_g170748.z));
				half3 VertexPosOtherAxis82_g170748 = appendResult81_g170748;
				float4 temp_output_1567_33_g170743 = Out_RotationData15_g170744;
				half4 Model_RotationData1583_g170743 = temp_output_1567_33_g170743;
				half2 Angle44_g170747 = Model_RotationData1583_g170743.xy;
				half Angle44_g170748 = (Angle44_g170747).y;
				half3 VertexPos40_g170749 = ( VertexPosRotationAxis50_g170748 + ( VertexPosOtherAxis82_g170748 * cos( Angle44_g170748 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170748 ) * sin( Angle44_g170748 ) ) );
				float3 appendResult74_g170749 = (float3(0.0 , 0.0 , VertexPos40_g170749.z));
				half3 VertexPosRotationAxis50_g170749 = appendResult74_g170749;
				float3 break84_g170749 = VertexPos40_g170749;
				float3 appendResult81_g170749 = (float3(break84_g170749.x , break84_g170749.y , 0.0));
				half3 VertexPosOtherAxis82_g170749 = appendResult81_g170749;
				half Angle44_g170749 = -(Angle44_g170747).x;
				float3 lerpResult1591_g170743 = lerp( lerpResult1585_g170743 , ( VertexPosRotationAxis50_g170749 + ( VertexPosOtherAxis82_g170749 * cos( Angle44_g170749 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170749 ) * sin( Angle44_g170749 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170758 = lerpResult1591_g170743;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170758 = Input_True57_g170758;
				#else
				float3 staticSwitch65_g170758 = Input_False58_g170758;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170758 = Input_True57_g170758;
				#else
				float3 staticSwitch69_g170758 = staticSwitch65_g170758;
				#endif
				float3 temp_output_1715_0_g170743 = staticSwitch69_g170758;
				float4 temp_output_1567_29_g170743 = Out_VertexData15_g170744;
				half4 Model_VertexData1608_g170743 = temp_output_1567_29_g170743;
				float4 break1683_g170743 = Model_VertexData1608_g170743;
				float4 break33_g170750 = _normal_vert_mode;
				float temp_output_30_0_g170750 = ( break1683_g170743.x * break33_g170750.x );
				float temp_output_29_0_g170750 = ( break1683_g170743.y * break33_g170750.y );
				float temp_output_31_0_g170750 = ( break1683_g170743.z * break33_g170750.z );
				float temp_output_28_0_g170750 = ( temp_output_30_0_g170750 + temp_output_29_0_g170750 + temp_output_31_0_g170750 + ( break1683_g170743.w * break33_g170750.w ) );
				float clampResult17_g170751 = clamp( temp_output_28_0_g170750 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170755 = _NormalMeshRemap.x;
				float temp_output_9_0_g170755 = ( clampResult17_g170751 - temp_output_7_0_g170755 );
				float lerpResult1695_g170743 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170755 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170752 = lerpResult1695_g170743;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170752 = ( temp_output_6_0_g170752 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170752 = temp_output_6_0_g170752;
				#endif
				float temp_output_1690_0_g170743 = staticSwitch14_g170752;
				half Normal_MeskMask1691_g170743 = temp_output_1690_0_g170743;
				half Normal_Proj_Mask1647_g170743 = 1.0;
				float temp_output_1699_0_g170743 = ( Normal_MeskMask1691_g170743 * Normal_Proj_Mask1647_g170743 );
				float3 lerpResult1670_g170743 = lerp( Model_NormalOS1568_g170743 , temp_output_1715_0_g170743 , temp_output_1699_0_g170743);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170743 = lerpResult1670_g170743;
				#else
				float3 staticSwitch1716_g170743 = Model_NormalOS1568_g170743;
				#endif
				half3 Final_NormalOS178_g170743 = staticSwitch1716_g170743;
				float3 In_NormalOS16_g170745 = Final_NormalOS178_g170743;
				float3 temp_output_1567_21_g170743 = Out_NormalWS15_g170744;
				float3 In_NormalWS16_g170745 = temp_output_1567_21_g170743;
				float3 In_NormalRawOS16_g170745 = Out_NormalRawOS15_g170744;
				float3 In_NormalRawWS16_g170745 = Out_NormalRawWS15_g170744;
				float4 In_TangentOS16_g170745 = Out_TangentOS15_g170744;
				float3 In_ViewDirWS16_g170745 = Out_ViewDirWS15_g170744;
				float4 In_VertexData16_g170745 = temp_output_1567_29_g170743;
				float4 In_PhaseData16_g170745 = Out_PhaseData15_g170744;
				float4 In_BoundsData16_g170745 = Out_BoundsData15_g170744;
				float4 In_RotationData16_g170745 = temp_output_1567_33_g170743;
				{
				Data16_g170745.Dummy = In_Dummy16_g170745;
				Data16_g170745.PositionOS = In_PositionOS16_g170745;
				Data16_g170745.PositionWS = In_PositionWS16_g170745;
				Data16_g170745.PositionWO = In_PositionWO16_g170745;
				Data16_g170745.PositionRawOS = In_PositionRawOS16_g170745;
				Data16_g170745.PositionAddOS = In_PositionAddOS16_g170745;
				Data16_g170745.PivotOS = In_PivotOS16_g170745;
				Data16_g170745.PivotWS = In_PivotWS16_g170745;
				Data16_g170745.PivotWO = In_PivotWO16_g170745;
				Data16_g170745.NormalOS = In_NormalOS16_g170745;
				Data16_g170745.NormalWS = In_NormalWS16_g170745;
				Data16_g170745.NormalRawOS = In_NormalRawOS16_g170745;
				Data16_g170745.NormalRawWS = In_NormalRawWS16_g170745;
				Data16_g170745.TangentOS = In_TangentOS16_g170745;
				Data16_g170745.ViewDirWS = In_ViewDirWS16_g170745;
				Data16_g170745.VertexData = In_VertexData16_g170745;
				Data16_g170745.PhaseData = In_PhaseData16_g170745;
				Data16_g170745.BoundsData = In_BoundsData16_g170745;
				Data16_g170745.RotationData = In_RotationData16_g170745;
				}
				TVEModelData Data15_g170760 = Data16_g170745;
				float Out_Dummy15_g170760 = 0;
				float3 Out_PositionOS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170760 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170760 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170760 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170760 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170760 = float3( 0,0,0 );
				float4 Out_VertexData15_g170760 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170760 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170760 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170760 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170760 = Data15_g170760.Dummy;
				Out_PositionOS15_g170760 = Data15_g170760.PositionOS;
				Out_PositionWS15_g170760 = Data15_g170760.PositionWS;
				Out_PositionWO15_g170760 = Data15_g170760.PositionWO;
				Out_PositionRawOS15_g170760 = Data15_g170760.PositionRawOS;
				Out_PositionAddOS15_g170760 = Data15_g170760.PositionAddOS;
				Out_PivotOS15_g170760 = Data15_g170760.PivotOS;
				Out_PivotWS15_g170760 = Data15_g170760.PivotWS;
				Out_PivotWO15_g170760 = Data15_g170760.PivotWO;
				Out_NormalOS15_g170760 = Data15_g170760.NormalOS;
				Out_NormalWS15_g170760 = Data15_g170760.NormalWS;
				Out_NormalRawOS15_g170760 = Data15_g170760.NormalRawOS;
				Out_NormalRawWS15_g170760 = Data15_g170760.NormalRawWS;
				Out_TangentOS15_g170760 = Data15_g170760.TangentOS;
				Out_ViewDirWS15_g170760 = Data15_g170760.ViewDirWS;
				Out_VertexData15_g170760 = Data15_g170760.VertexData;
				Out_PhaseData15_g170760 = Data15_g170760.PhaseData;
				Out_BoundsData15_g170760 = Data15_g170760.BoundsData;
				Out_RotationData15_g170760 = Data15_g170760.RotationData;
				}
				float3 temp_output_217_24_g170759 = Out_PivotOS15_g170760;
				float3 In_PositionOS16_g170761 = ( Out_PositionOS15_g170760 + temp_output_217_24_g170759 );
				float3 In_PositionWS16_g170761 = Out_PositionWS15_g170760;
				float3 In_PositionWO16_g170761 = Out_PositionWO15_g170760;
				float3 In_PositionRawOS16_g170761 = Out_PositionRawOS15_g170760;
				float3 In_PositionAddOS16_g170761 = Out_PositionAddOS15_g170760;
				float3 In_PivotOS16_g170761 = temp_output_217_24_g170759;
				float3 In_PivotWS16_g170761 = Out_PivotWS15_g170760;
				float3 In_PivotWO16_g170761 = Out_PivotWO15_g170760;
				float3 In_NormalOS16_g170761 = Out_NormalOS15_g170760;
				float3 In_NormalWS16_g170761 = Out_NormalWS15_g170760;
				float3 In_NormalRawOS16_g170761 = Out_NormalRawOS15_g170760;
				float3 In_NormalRawWS16_g170761 = Out_NormalRawWS15_g170760;
				float4 In_TangentOS16_g170761 = Out_TangentOS15_g170760;
				float3 In_ViewDirWS16_g170761 = Out_ViewDirWS15_g170760;
				float4 In_VertexData16_g170761 = Out_VertexData15_g170760;
				float4 In_PhaseData16_g170761 = Out_PhaseData15_g170760;
				float4 In_BoundsData16_g170761 = Out_BoundsData15_g170760;
				float4 In_RotationData16_g170761 = Out_RotationData15_g170760;
				{
				Data16_g170761.Dummy = In_Dummy16_g170761;
				Data16_g170761.PositionOS = In_PositionOS16_g170761;
				Data16_g170761.PositionWS = In_PositionWS16_g170761;
				Data16_g170761.PositionWO = In_PositionWO16_g170761;
				Data16_g170761.PositionRawOS = In_PositionRawOS16_g170761;
				Data16_g170761.PositionAddOS = In_PositionAddOS16_g170761;
				Data16_g170761.PivotOS = In_PivotOS16_g170761;
				Data16_g170761.PivotWS = In_PivotWS16_g170761;
				Data16_g170761.PivotWO = In_PivotWO16_g170761;
				Data16_g170761.NormalOS = In_NormalOS16_g170761;
				Data16_g170761.NormalWS = In_NormalWS16_g170761;
				Data16_g170761.NormalRawOS = In_NormalRawOS16_g170761;
				Data16_g170761.NormalRawWS = In_NormalRawWS16_g170761;
				Data16_g170761.TangentOS = In_TangentOS16_g170761;
				Data16_g170761.ViewDirWS = In_ViewDirWS16_g170761;
				Data16_g170761.VertexData = In_VertexData16_g170761;
				Data16_g170761.PhaseData = In_PhaseData16_g170761;
				Data16_g170761.BoundsData = In_BoundsData16_g170761;
				Data16_g170761.RotationData = In_RotationData16_g170761;
				}
				TVEModelData Data15_g170774 = Data16_g170761;
				float Out_Dummy15_g170774 = 0;
				float3 Out_PositionOS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170774 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170774 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170774 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170774 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170774 = float3( 0,0,0 );
				float4 Out_VertexData15_g170774 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170774 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170774 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170774 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170774 = Data15_g170774.Dummy;
				Out_PositionOS15_g170774 = Data15_g170774.PositionOS;
				Out_PositionWS15_g170774 = Data15_g170774.PositionWS;
				Out_PositionWO15_g170774 = Data15_g170774.PositionWO;
				Out_PositionRawOS15_g170774 = Data15_g170774.PositionRawOS;
				Out_PositionAddOS15_g170774 = Data15_g170774.PositionAddOS;
				Out_PivotOS15_g170774 = Data15_g170774.PivotOS;
				Out_PivotWS15_g170774 = Data15_g170774.PivotWS;
				Out_PivotWO15_g170774 = Data15_g170774.PivotWO;
				Out_NormalOS15_g170774 = Data15_g170774.NormalOS;
				Out_NormalWS15_g170774 = Data15_g170774.NormalWS;
				Out_NormalRawOS15_g170774 = Data15_g170774.NormalRawOS;
				Out_NormalRawWS15_g170774 = Data15_g170774.NormalRawWS;
				Out_TangentOS15_g170774 = Data15_g170774.TangentOS;
				Out_ViewDirWS15_g170774 = Data15_g170774.ViewDirWS;
				Out_VertexData15_g170774 = Data15_g170774.VertexData;
				Out_PhaseData15_g170774 = Data15_g170774.PhaseData;
				Out_BoundsData15_g170774 = Data15_g170774.BoundsData;
				Out_RotationData15_g170774 = Data15_g170774.RotationData;
				}
				float3 temp_output_31_0_g170771 = Out_PositionOS15_g170774;
				float3 temp_output_6_0_g170785 = ( temp_output_31_0_g170771 + _DisableSRPBatcher );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170785 = ( temp_output_6_0_g170785 + ( 0.0 * 0.0 ) );
				#else
				float3 staticSwitch14_g170785 = temp_output_6_0_g170785;
				#endif
				
				output.ase_texcoord5.xyz = vertexToFrag73_g170196;
				output.ase_texcoord6.xyz = vertexToFrag76_g170196;
				output.ase_texcoord7.xyz = ase_normalWS;
				float3 ase_tangentWS = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				output.ase_texcoord8.xyz = ase_tangentWS;
				float ase_tangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_bitangentWS = cross( ase_normalWS, ase_tangentWS ) * ase_tangentSign;
				output.ase_texcoord9.xyz = ase_bitangentWS;
				float temp_output_6_0_g170497 = ( _MotionHighlightValue * Global_DistMask1820_g170474 * ( Tiny_Mask218_g170474 * Tiny_Mask218_g170474 ) * ( Global_Wave1475_g170474 * Global_Wave1475_g170474 * Global_Wave1475_g170474 * Global_Wave1475_g170474 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Wave_Mask4324 = staticSwitch14_g170497;
				float4 appendResult23_g170573 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask4324));
				float4 vertexToFrag24_g170573 = appendResult23_g170573;
				output.ase_texcoord10 = vertexToFrag24_g170573;
				output.ase_texcoord11.xyz = ase_positionWS;
				
				output.ase_texcoord3 = inputMesh.ase_texcoord;
				output.ase_texcoord4.xy = inputMesh.ase_texcoord2.xy;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord4.zw = 0;
				output.ase_texcoord5.w = 0;
				output.ase_texcoord6.w = 0;
				output.ase_texcoord7.w = 0;
				output.ase_texcoord8.w = 0;
				output.ase_texcoord9.w = 0;
				output.ase_texcoord11.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = staticSwitch14_g170785;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif
				inputMesh.normalOS = Out_NormalOS15_g170774;
				inputMesh.tangentOS = Out_TangentOS15_g170774;
				return inputMesh;
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh)
			{
				PackedVaryingsMeshToPS output = (PackedVaryingsMeshToPS)0;
				AttributesMesh defaultMesh = inputMesh;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				inputMesh = ApplyMeshModification( inputMesh, _TimeParameters.xyz, output);

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);

				float3 VMESHpositionRWS = positionRWS;
				float4 VMESHpositionCS = TransformWorldToHClip(positionRWS);

				float4 VPASSpreviousPositionCS;
				float4 VPASSpositionCS = mul(UNITY_MATRIX_UNJITTERED_VP, float4(VMESHpositionRWS, 1.0));

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if (forceNoMotion)
				{
					VPASSpreviousPositionCS = float4(0.0, 0.0, 0.0, 1.0);
				}
				else
				{
					bool hasDeformation = unity_MotionVectorsParams.x > 0.0;
					float3 effectivePositionOS = (hasDeformation ? inputMesh.previousPositionOS : defaultMesh.positionOS);
					#if defined(_ADD_PRECOMPUTED_VELOCITY)
					effectivePositionOS -= inputMesh.precomputedVelocity;
					#endif

					#if defined(HAVE_MESH_MODIFICATION)
						AttributesMesh previousMesh = defaultMesh;
						previousMesh.positionOS = effectivePositionOS ;
						PackedVaryingsMeshToPS test = (PackedVaryingsMeshToPS)0;
						float3 curTime = _TimeParameters.xyz;
						previousMesh = ApplyMeshModification(previousMesh, _LastTimeParameters.xyz, test);
						_TimeParameters.xyz = curTime;
						float3 previousPositionRWS = TransformPreviousObjectToWorld(previousMesh.positionOS);
					#else
						float3 previousPositionRWS = TransformPreviousObjectToWorld(effectivePositionOS);
					#endif

					#ifdef ATTRIBUTES_NEED_NORMAL
						float3 normalWS = TransformPreviousObjectToWorldNormal(defaultMesh.normalOS);
					#else
						float3 normalWS = float3(0.0, 0.0, 0.0);
					#endif

					#if defined(HAVE_VERTEX_MODIFICATION)
						ApplyVertexModification(inputMesh, normalWS, previousPositionRWS, _LastTimeParameters.xyz);
					#endif

					#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
						if (_TransparentCameraOnlyMotionVectors > 0)
						{
							previousPositionRWS = VMESHpositionRWS.xyz;
						}
					#endif

					VPASSpreviousPositionCS = mul(UNITY_MATRIX_PREV_VP, float4(previousPositionRWS, 1.0));
				}

				output.vmeshPositionCS = VMESHpositionCS;
				output.vmeshInterp00.xyz = VMESHpositionRWS;

				output.vpassInterpolators0 = float3(VPASSpositionCS.xyw);
				output.vpassInterpolators1 = float3(VPASSpreviousPositionCS.xyw);
				return output;
			}

			#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalPrepassBuffer.hlsl"
			#endif

			#if ( 0 ) // TEMPORARY: defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.previousPositionOS = v.previousPositionOS;
				#if defined (_ADD_PRECOMPUTED_VELOCITY)
				o.precomputedVelocity = v.precomputedVelocity;
				#endif
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.previousPositionOS = patch[0].previousPositionOS * bary.x + patch[1].previousPositionOS * bary.y + patch[2].previousPositionOS * bary.z;
				#if defined (_ADD_PRECOMPUTED_VELOCITY)
					o.precomputedVelocity = patch[0].precomputedVelocity * bary.x + patch[1].precomputedVelocity * bary.y + patch[2].precomputedVelocity * bary.z;
				#endif
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_DECAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_NORMAL SV_Target3
			#elif defined(WRITE_DECAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_NORMAL SV_Target2
			#else
			#define SV_TARGET_NORMAL SV_Target1
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
				#ifdef WRITE_MSAA_DEPTH
					, out float4 depthColor : SV_Target0
					, out float4 outMotionVector : SV_Target1
						#ifdef WRITE_DECAL_BUFFER
						, out float4 outDecalBuffer : SV_Target2
						#endif
					#else
					, out float4 outMotionVector : SV_Target0
						#ifdef WRITE_DECAL_BUFFER
						, out float4 outDecalBuffer : SV_Target1
						#endif
					#endif

					#ifdef WRITE_NORMAL_BUFFER
					, out float4 outNormalBuffer : SV_TARGET_NORMAL
					#endif

					#ifdef _DEPTHOFFSET_ON
					, out float outputDepth : DEPTH_OFFSET_SEMANTIC
					#endif
				, bool ase_vface : SV_IsFrontFace
				)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );
				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.vmeshPositionCS;
				input.positionRWS = packedInput.vmeshInterp00.xyz;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				SurfaceData surfaceData;
				BuiltinData builtinData;

				SmoothSurfaceDescription surfaceDescription = (SmoothSurfaceDescription)0;
				float localBreakData4_g170777 = ( 0.0 );
				float localCompData3_g170764 = ( 0.0 );
				TVEVisualData Data3_g170764 = (TVEVisualData)0;
				half Dummy145_g170762 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170764 = Dummy145_g170762;
				float localBreakData4_g170763 = ( 0.0 );
				float localCompData3_g170732 = ( 0.0 );
				TVEVisualData Data3_g170732 = (TVEVisualData)0;
				half Dummy145_g170727 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170732 = Dummy145_g170727;
				float localBreakData4_g170731 = ( 0.0 );
				float localCompData3_g170709 = ( 0.0 );
				TVEVisualData Data3_g170709 = (TVEVisualData)0;
				half Dummy594_g170706 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170709 = Dummy594_g170706;
				float localBreakData4_g170708 = ( 0.0 );
				float localCompData3_g170692 = ( 0.0 );
				TVEVisualData Data3_g170692 = (TVEVisualData)0;
				half Dummy594_g170691 = ( _CutoutCategory + _CutoutEnd + _CutoutBakeMode );
				float In_Dummy3_g170692 = Dummy594_g170691;
				float localBreakData4_g170694 = ( 0.0 );
				float localCompData3_g170664 = ( 0.0 );
				TVEVisualData Data3_g170664 = (TVEVisualData)0;
				half Dummy594_g170662 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170664 = Dummy594_g170662;
				float localBreakData4_g170663 = ( 0.0 );
				float localCompData3_g170628 = ( 0.0 );
				TVEVisualData Data3_g170628 = (TVEVisualData)0;
				half Dummy594_g170625 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170628 = Dummy594_g170625;
				float localBreakData4_g170626 = ( 0.0 );
				float localCompData3_g170624 = ( 0.0 );
				TVEVisualData Data3_g170624 = (TVEVisualData)0;
				float In_Dummy3_g170624 = 0.0;
				float localBreakData4_g170623 = ( 0.0 );
				float localCompData3_g170601 = ( 0.0 );
				TVEVisualData Data3_g170601 = (TVEVisualData)0;
				half Dummy205_g170598 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170601 = Dummy205_g170598;
				float localBreakData4_g170600 = ( 0.0 );
				float localCompData3_g170578 = ( 0.0 );
				TVEVisualData Data3_g170578 = (TVEVisualData)0;
				half Dummy205_g170574 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170578 = Dummy205_g170574;
				float localBreakData4_g170579 = ( 0.0 );
				float localCompData3_g170567 = ( 0.0 );
				TVEVisualData Data3_g170567 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170567 = Dummy220_g170564;
				float localBreakData4_g170566 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170447 = ( 0.0 );
				TVEVisualData Data3_g170447 = (TVEVisualData)0;
				half4 Dummy944_g170438 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170447 = Dummy944_g170438.x;
				float localBreakData4_g170446 = ( 0.0 );
				float localCompData3_g170415 = ( 0.0 );
				TVEVisualData Data3_g170415 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170415 = Dummy946_g170394.x;
				float localBreakData4_g170405 = ( 0.0 );
				float localCompData3_g170387 = ( 0.0 );
				TVEVisualData Data3_g170387 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170387 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170380) = _MainAlbedoTex;
				float localFilterTexture19_g170383 = ( 0.0 );
				SamplerState SS19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170383 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170383 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170383 = SamplerDefault19_g170383;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170383 = SamplerDefault19_g170383;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170383 = SamplerPoint19_g170383;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170383 = SamplerLow19_g170383;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170383 = SamplerMedium19_g170383;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170383 = SamplerHigh19_g170383;
				#endif
				}
				SamplerState Sampler276_g170380 = SS19_g170383;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170380 = Local_Coords180_g170372;
				half4 Coords276_g170380 = temp_output_37_0_g170380;
				half2 TexCoord276_g170380 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170380 = SampleMain( Texture276_g170380 , Sampler276_g170380 , Coords276_g170380 , TexCoord276_g170380 );
				TEXTURE2D(Texture275_g170380) = _MainAlbedoTex;
				SamplerState Sampler275_g170380 = SS19_g170383;
				half4 Coords275_g170380 = temp_output_37_0_g170380;
				half2 TexCoord275_g170380 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170380 = SampleExtra( Texture275_g170380 , Sampler275_g170380 , Coords275_g170380 , TexCoord275_g170380 );
				TEXTURE2D(Texture238_g170380) = _MainAlbedoTex;
				SamplerState Sampler238_g170380 = SS19_g170383;
				half4 Coords238_g170380 = temp_output_37_0_g170380;
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord5.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord6.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 ase_normalWS = packedInput.ase_texcoord7.xyz;
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170386 = Data16_g170201;
				float Out_Dummy15_g170386 = 0;
				float3 Out_PositionWS15_g170386 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170386 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170386 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170386 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170386 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170386 = float3( 0,0,0 );
				float4 Out_VertexData15_g170386 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170386 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170386 = Data15_g170386.Dummy;
				Out_PositionWS15_g170386 = Data15_g170386.PositionWS;
				Out_PositionWO15_g170386 = Data15_g170386.PositionWO;
				Out_PivotWS15_g170386 = Data15_g170386.PivotWS;
				Out_PivotWO15_g170386 = Data15_g170386.PivotWO;
				Out_NormalWS15_g170386 = Data15_g170386.NormalWS;
				Out_ViewDirWS15_g170386 = Data15_g170386.ViewDirWS;
				Out_VertexData15_g170386 = Data15_g170386.VertexData;
				Out_BoundsData15_g170386 = Data15_g170386.BoundsData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170386;
				float3 temp_output_279_0_g170380 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170380 = temp_output_279_0_g170380;
				half4 localSamplePlanar2D238_g170380 = SamplePlanar2D( Texture238_g170380 , Sampler238_g170380 , Coords238_g170380 , WorldPosition238_g170380 );
				TEXTURE2D(Texture246_g170380) = _MainAlbedoTex;
				SamplerState Sampler246_g170380 = SS19_g170383;
				half4 Coords246_g170380 = temp_output_37_0_g170380;
				half3 WorldPosition246_g170380 = temp_output_279_0_g170380;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170386;
				float3 temp_output_280_0_g170380 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170380 = temp_output_280_0_g170380;
				half4 localSamplePlanar3D246_g170380 = SamplePlanar3D( Texture246_g170380 , Sampler246_g170380 , Coords246_g170380 , WorldPosition246_g170380 , WorldNormal246_g170380 );
				TEXTURE2D(Texture234_g170380) = _MainAlbedoTex;
				SamplerState Sampler234_g170380 = SS19_g170383;
				float4 Coords234_g170380 = temp_output_37_0_g170380;
				float3 WorldPosition234_g170380 = temp_output_279_0_g170380;
				float4 localSampleStochastic2D234_g170380 = SampleStochastic2D( Texture234_g170380 , Sampler234_g170380 , Coords234_g170380 , WorldPosition234_g170380 );
				TEXTURE2D(Texture263_g170380) = _MainAlbedoTex;
				SamplerState Sampler263_g170380 = SS19_g170383;
				half4 Coords263_g170380 = temp_output_37_0_g170380;
				half3 WorldPosition263_g170380 = temp_output_279_0_g170380;
				half3 WorldNormal263_g170380 = temp_output_280_0_g170380;
				half4 localSampleStochastic3D263_g170380 = SampleStochastic3D( Texture263_g170380 , Sampler263_g170380 , Coords263_g170380 , WorldPosition263_g170380 , WorldNormal263_g170380 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170380;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170380;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170380;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170380;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170380;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170380;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170380;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170382) = _MainShaderTex;
				float localFilterTexture30_g170385 = ( 0.0 );
				SamplerState SS30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170385 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170385 = SamplerDefault30_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170385 = SamplerDefault30_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170385 = SamplerPoint30_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170385 = SamplerLow30_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170385 = SamplerMedium30_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170385 = SamplerHigh30_g170385;
				#endif
				}
				SamplerState Sampler276_g170382 = SS30_g170385;
				float4 temp_output_37_0_g170382 = Local_Coords180_g170372;
				half4 Coords276_g170382 = temp_output_37_0_g170382;
				half2 TexCoord276_g170382 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170382 = SampleMain( Texture276_g170382 , Sampler276_g170382 , Coords276_g170382 , TexCoord276_g170382 );
				TEXTURE2D(Texture275_g170382) = _MainShaderTex;
				SamplerState Sampler275_g170382 = SS30_g170385;
				half4 Coords275_g170382 = temp_output_37_0_g170382;
				half2 TexCoord275_g170382 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170382 = SampleExtra( Texture275_g170382 , Sampler275_g170382 , Coords275_g170382 , TexCoord275_g170382 );
				TEXTURE2D(Texture238_g170382) = _MainShaderTex;
				SamplerState Sampler238_g170382 = SS30_g170385;
				half4 Coords238_g170382 = temp_output_37_0_g170382;
				float3 temp_output_279_0_g170382 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170382 = temp_output_279_0_g170382;
				half4 localSamplePlanar2D238_g170382 = SamplePlanar2D( Texture238_g170382 , Sampler238_g170382 , Coords238_g170382 , WorldPosition238_g170382 );
				TEXTURE2D(Texture246_g170382) = _MainShaderTex;
				SamplerState Sampler246_g170382 = SS30_g170385;
				half4 Coords246_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition246_g170382 = temp_output_279_0_g170382;
				float3 temp_output_280_0_g170382 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170382 = temp_output_280_0_g170382;
				half4 localSamplePlanar3D246_g170382 = SamplePlanar3D( Texture246_g170382 , Sampler246_g170382 , Coords246_g170382 , WorldPosition246_g170382 , WorldNormal246_g170382 );
				TEXTURE2D(Texture234_g170382) = _MainShaderTex;
				SamplerState Sampler234_g170382 = SS30_g170385;
				float4 Coords234_g170382 = temp_output_37_0_g170382;
				float3 WorldPosition234_g170382 = temp_output_279_0_g170382;
				float4 localSampleStochastic2D234_g170382 = SampleStochastic2D( Texture234_g170382 , Sampler234_g170382 , Coords234_g170382 , WorldPosition234_g170382 );
				TEXTURE2D(Texture263_g170382) = _MainShaderTex;
				SamplerState Sampler263_g170382 = SS30_g170385;
				half4 Coords263_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition263_g170382 = temp_output_279_0_g170382;
				half3 WorldNormal263_g170382 = temp_output_280_0_g170382;
				half4 localSampleStochastic3D263_g170382 = SampleStochastic3D( Texture263_g170382 , Sampler263_g170382 , Coords263_g170382 , WorldPosition263_g170382 , WorldNormal263_g170382 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170382;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170382;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170382;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170377 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170388 = _MainMultiRemap.x;
				float temp_output_9_0_g170388 = ( clampResult17_g170377 - temp_output_7_0_g170388 );
				half Local_MultiMask78_g170372 = saturate( ( ( temp_output_9_0_g170388 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170387 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170387 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170381) = _MainNormalTex;
				float localFilterTexture29_g170384 = ( 0.0 );
				SamplerState SS29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170384 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170384 = SamplerDefault29_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170384 = SamplerDefault29_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170384 = SamplerPoint29_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170384 = SamplerLow29_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170384 = SamplerMedium29_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170384 = SamplerHigh29_g170384;
				#endif
				}
				SamplerState Sampler276_g170381 = SS29_g170384;
				float4 temp_output_37_0_g170381 = Local_Coords180_g170372;
				half4 Coords276_g170381 = temp_output_37_0_g170381;
				half2 TexCoord276_g170381 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170381 = SampleMain( Texture276_g170381 , Sampler276_g170381 , Coords276_g170381 , TexCoord276_g170381 );
				TEXTURE2D(Texture275_g170381) = _MainNormalTex;
				SamplerState Sampler275_g170381 = SS29_g170384;
				half4 Coords275_g170381 = temp_output_37_0_g170381;
				half2 TexCoord275_g170381 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170381 = SampleExtra( Texture275_g170381 , Sampler275_g170381 , Coords275_g170381 , TexCoord275_g170381 );
				TEXTURE2D(Texture238_g170381) = _MainNormalTex;
				SamplerState Sampler238_g170381 = SS29_g170384;
				half4 Coords238_g170381 = temp_output_37_0_g170381;
				float3 temp_output_279_0_g170381 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170381 = temp_output_279_0_g170381;
				half4 localSamplePlanar2D238_g170381 = SamplePlanar2D( Texture238_g170381 , Sampler238_g170381 , Coords238_g170381 , WorldPosition238_g170381 );
				TEXTURE2D(Texture246_g170381) = _MainNormalTex;
				SamplerState Sampler246_g170381 = SS29_g170384;
				half4 Coords246_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition246_g170381 = temp_output_279_0_g170381;
				float3 temp_output_280_0_g170381 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170381 = temp_output_280_0_g170381;
				half4 localSamplePlanar3D246_g170381 = SamplePlanar3D( Texture246_g170381 , Sampler246_g170381 , Coords246_g170381 , WorldPosition246_g170381 , WorldNormal246_g170381 );
				TEXTURE2D(Texture234_g170381) = _MainNormalTex;
				SamplerState Sampler234_g170381 = SS29_g170384;
				float4 Coords234_g170381 = temp_output_37_0_g170381;
				float3 WorldPosition234_g170381 = temp_output_279_0_g170381;
				float4 localSampleStochastic2D234_g170381 = SampleStochastic2D( Texture234_g170381 , Sampler234_g170381 , Coords234_g170381 , WorldPosition234_g170381 );
				TEXTURE2D(Texture263_g170381) = _MainNormalTex;
				SamplerState Sampler263_g170381 = SS29_g170384;
				half4 Coords263_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition263_g170381 = temp_output_279_0_g170381;
				half3 WorldNormal263_g170381 = temp_output_280_0_g170381;
				half4 localSampleStochastic3D263_g170381 = SampleStochastic3D( Texture263_g170381 , Sampler263_g170381 , Coords263_g170381 , WorldPosition263_g170381 , WorldNormal263_g170381 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170381;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170381;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170381;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3 ase_tangentWS = packedInput.ase_texcoord8.xyz;
				float3 ase_bitangentWS = packedInput.ase_texcoord9.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_tangentWS,ase_bitangentWS,ase_normalWS);
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170387 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( ase_tangentWS.x, ase_bitangentWS.x, ase_normalWS.x );
				float3 tanToWorld1 = float3( ase_tangentWS.y, ase_bitangentWS.y, ase_normalWS.y );
				float3 tanToWorld2 = float3( ase_tangentWS.z, ase_bitangentWS.z, ase_normalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3(dot(tanToWorld0,tanNormal74_g170375), dot(tanToWorld1,tanNormal74_g170375), dot(tanToWorld2,tanNormal74_g170375)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170387 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170387 = Local_Masks109_g170372;
				float4 In_Emissive3_g170387 = half4(1,1,1,1);
				float3 temp_output_3_0_g170376 = Local_Albedo139_g170372;
				float dotResult20_g170376 = dot( temp_output_3_0_g170376 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170376;
				float In_Grayscale3_g170387 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170387 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170387 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170387 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170387 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170387 = temp_cast_4;
				float In_Transmission3_g170387 = 1.0;
				float In_Thickness3_g170387 = 0.0;
				float In_Diffusion3_g170387 = 0.0;
				{
				Data3_g170387.Dummy = In_Dummy3_g170387;
				Data3_g170387.Albedo = In_Albedo3_g170387;
				Data3_g170387.AlbedoRaw = In_AlbedoRaw3_g170387;
				Data3_g170387.NormalTS = In_NormalTS3_g170387;
				Data3_g170387.NormalWS = In_NormalWS3_g170387;
				Data3_g170387.Shader = In_Shader3_g170387;
				Data3_g170387.Emissive= In_Emissive3_g170387;
				Data3_g170387.MultiMask = In_MultiMask3_g170387;
				Data3_g170387.Grayscale = In_Grayscale3_g170387;
				Data3_g170387.Luminosity = In_Luminosity3_g170387;
				Data3_g170387.AlphaClip = In_AlphaClip3_g170387;
				Data3_g170387.AlphaFade = In_AlphaFade3_g170387;
				Data3_g170387.Translucency = In_Translucency3_g170387;
				Data3_g170387.Transmission = In_Transmission3_g170387;
				Data3_g170387.Thickness = In_Thickness3_g170387;
				Data3_g170387.Diffusion = In_Diffusion3_g170387;
				}
				TVEVisualData Data4_g170405 = Data3_g170387;
				float Out_Dummy4_g170405 = 0;
				float3 Out_Albedo4_g170405 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170405 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170405 = float2( 0,0 );
				float3 Out_NormalWS4_g170405 = float3( 0,0,0 );
				float4 Out_Shader4_g170405 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170405 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170405 = 0;
				float Out_Grayscale4_g170405 = 0;
				float Out_Luminosity4_g170405 = 0;
				float Out_AlphaClip4_g170405 = 0;
				float Out_AlphaFade4_g170405 = 0;
				float3 Out_Translucency4_g170405 = float3( 0,0,0 );
				float Out_Transmission4_g170405 = 0;
				float Out_Thickness4_g170405 = 0;
				float Out_Diffusion4_g170405 = 0;
				{
				Out_Dummy4_g170405 = Data4_g170405.Dummy;
				Out_Albedo4_g170405 = Data4_g170405.Albedo;
				Out_AlbedoRaw4_g170405 = Data4_g170405.AlbedoRaw;
				Out_NormalTS4_g170405 = Data4_g170405.NormalTS;
				Out_NormalWS4_g170405 = Data4_g170405.NormalWS;
				Out_Shader4_g170405 = Data4_g170405.Shader;
				Out_Emissive4_g170405= Data4_g170405.Emissive;
				Out_MultiMask4_g170405 = Data4_g170405.MultiMask;
				Out_Grayscale4_g170405 = Data4_g170405.Grayscale;
				Out_Luminosity4_g170405= Data4_g170405.Luminosity;
				Out_AlphaClip4_g170405 = Data4_g170405.AlphaClip;
				Out_AlphaFade4_g170405 = Data4_g170405.AlphaFade;
				Out_Translucency4_g170405 = Data4_g170405.Translucency;
				Out_Transmission4_g170405 = Data4_g170405.Transmission;
				Out_Thickness4_g170405 = Data4_g170405.Thickness;
				Out_Diffusion4_g170405 = Data4_g170405.Diffusion;
				}
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170405;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				float localFilterTexture19_g170411 = ( 0.0 );
				SamplerState SS19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170411 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170411 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170411 = SamplerDefault19_g170411;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170411 = SamplerDefault19_g170411;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170411 = SamplerPoint19_g170411;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170411 = SamplerLow19_g170411;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170411 = SamplerMedium19_g170411;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170411 = SamplerHigh19_g170411;
				#endif
				}
				SamplerState Sampler276_g170395 = SS19_g170411;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = SS19_g170411;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = SS19_g170411;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170414 = Data16_g170201;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				}
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = SS19_g170411;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = SS19_g170411;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = SS19_g170411;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				float localFilterTexture30_g170413 = ( 0.0 );
				SamplerState SS30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170413 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170413 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170413 = SamplerDefault30_g170413;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170413 = SamplerDefault30_g170413;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170413 = SamplerPoint30_g170413;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170413 = SamplerLow30_g170413;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170413 = SamplerMedium30_g170413;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170413 = SamplerHigh30_g170413;
				#endif
				}
				SamplerState Sampler276_g170397 = SS30_g170413;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = SS30_g170413;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = SS30_g170413;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = SS30_g170413;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = SS30_g170413;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = SS30_g170413;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170416 = _SecondMultiRemap.x;
				float temp_output_9_0_g170416 = ( clampResult17_g170401 - temp_output_7_0_g170416 );
				float temp_output_765_0_g170394 = saturate( ( ( temp_output_9_0_g170416 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170418 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170422 = _SecondMaskRemap.x;
				float temp_output_9_0_g170422 = ( clampResult17_g170418 - temp_output_7_0_g170422 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170422 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half Visual_Luminosity1041_g170394 = Out_Luminosity4_g170405;
				float clampResult17_g170427 = clamp( Visual_Luminosity1041_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170428 = _SecondLumaRemap.x;
				float temp_output_9_0_g170428 = ( clampResult17_g170427 - temp_output_7_0_g170428 );
				float lerpResult1036_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170428 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170394 = lerpResult1036_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170405;
				float clampResult17_g170423 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _SecondProjRemap.x;
				float temp_output_9_0_g170425 = ( clampResult17_g170423 - temp_output_7_0_g170425 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170425 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170414;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170419 = _second_vert_mode;
				float temp_output_30_0_g170419 = ( break965_g170394.x * break33_g170419.x );
				float temp_output_29_0_g170419 = ( break965_g170394.y * break33_g170419.y );
				float temp_output_31_0_g170419 = ( break965_g170394.z * break33_g170419.z );
				float temp_output_28_0_g170419 = ( temp_output_30_0_g170419 + temp_output_29_0_g170419 + temp_output_31_0_g170419 + ( break965_g170394.w * break33_g170419.w ) );
				float clampResult17_g170417 = clamp( temp_output_28_0_g170419 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170421 = _SecondMeshRemap.x;
				float temp_output_9_0_g170421 = ( clampResult17_g170417 - temp_output_7_0_g170421 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170421 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170420 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170420 = ( temp_output_6_0_g170420 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170420 = temp_output_6_0_g170420;
				#endif
				half Blend_VertMask918_g170394 = staticSwitch14_g170420;
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatParams204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintParams204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowParams204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoParams204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeParams204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormParams204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowParams204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatParams = In_CoatParams204_g170214;
				Data204_g170214.PaintParams = In_PaintParams204_g170214;
				Data204_g170214.GlowParams = In_GlowParams204_g170214;
				Data204_g170214.AtmoParams = In_AtmoParams204_g170214;
				Data204_g170214.FadeParams = In_FadeParams204_g170214;
				Data204_g170214.FormParams= In_FormParams204_g170214;
				Data204_g170214.FlowParams = In_FlowParams204_g170214;
				}
				TVEGlobalData Data15_g170404 = Data204_g170214;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170404 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatParams15_g170404 = Data15_g170404.CoatParams;
				Out_PaintParams15_g170404 = Data15_g170404.PaintParams;
				Out_GlowParams15_g170404 = Data15_g170404.GlowParams;
				Out_AtmoParams15_g170404= Data15_g170404.AtmoParams;
				Out_FadeParams15_g170404= Data15_g170404.FadeParams;
				Out_FormParams15_g170404 = Data15_g170404.FormParams;
				Out_FlowParams15_g170404 = Data15_g170404.FlowParams;
				}
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170404;
				float temp_output_6_0_g170429 = (Global_CoatParams975_g170394).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170429 = ( temp_output_6_0_g170429 + ( _SecondElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170429 = temp_output_6_0_g170429;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = staticSwitch14_g170429;
				#else
				float staticSwitch971_g170394 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170394 = lerp( 1.0 , staticSwitch971_g170394 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170394 = lerpResult1013_g170394;
				float clampResult17_g170424 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_LumaMask1033_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170426 = _SecondBlendRemap.x;
				float temp_output_9_0_g170426 = ( clampResult17_g170424 - temp_output_7_0_g170426 );
				half Blend_Mask412_g170394 = ( saturate( ( ( temp_output_9_0_g170426 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170415 = Final_Albedo601_g170394;
				float3 In_AlbedoRaw3_g170415 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170405;
				float2 lerpResult40_g170406 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				float localFilterTexture29_g170412 = ( 0.0 );
				SamplerState SS29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170412 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170412 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170412 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170412 = SamplerDefault29_g170412;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170412 = SamplerDefault29_g170412;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170412 = SamplerPoint29_g170412;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170412 = SamplerLow29_g170412;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170412 = SamplerMedium29_g170412;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170412 = SamplerHigh29_g170412;
				#endif
				}
				SamplerState Sampler276_g170396 = SS29_g170412;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = SS29_g170412;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = SS29_g170412;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = SS29_g170412;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = SS29_g170412;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = SS29_g170412;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170406 = ( lerpResult40_g170406 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170406 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170415 = Final_NormalTS612_g170394;
				float3 appendResult68_g170407 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170407 = appendResult68_g170407;
				float3 worldNormal74_g170407 = normalize( float3(dot(tanToWorld0,tanNormal74_g170407), dot(tanToWorld1,tanNormal74_g170407), dot(tanToWorld2,tanNormal74_g170407)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170407;
				float3 In_NormalWS3_g170415 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170405;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170415 = Final_Masks613_g170394;
				float4 In_Emissive3_g170415 = Out_Emissive4_g170405;
				float3 temp_output_3_0_g170409 = Final_Albedo601_g170394;
				float dotResult20_g170409 = dot( temp_output_3_0_g170409 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170409;
				float In_Grayscale3_g170415 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170415 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170405;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170415 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170405;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170415 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170405;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170415 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170415 = Out_Translucency4_g170405;
				float In_Transmission3_g170415 = Out_Transmission4_g170405;
				float In_Thickness3_g170415 = Out_Thickness4_g170405;
				float In_Diffusion3_g170415 = Out_Diffusion4_g170405;
				{
				Data3_g170415.Dummy = In_Dummy3_g170415;
				Data3_g170415.Albedo = In_Albedo3_g170415;
				Data3_g170415.AlbedoRaw = In_AlbedoRaw3_g170415;
				Data3_g170415.NormalTS = In_NormalTS3_g170415;
				Data3_g170415.NormalWS = In_NormalWS3_g170415;
				Data3_g170415.Shader = In_Shader3_g170415;
				Data3_g170415.Emissive= In_Emissive3_g170415;
				Data3_g170415.MultiMask = In_MultiMask3_g170415;
				Data3_g170415.Grayscale = In_Grayscale3_g170415;
				Data3_g170415.Luminosity = In_Luminosity3_g170415;
				Data3_g170415.AlphaClip = In_AlphaClip3_g170415;
				Data3_g170415.AlphaFade = In_AlphaFade3_g170415;
				Data3_g170415.Translucency = In_Translucency3_g170415;
				Data3_g170415.Transmission = In_Transmission3_g170415;
				Data3_g170415.Thickness = In_Thickness3_g170415;
				Data3_g170415.Diffusion = In_Diffusion3_g170415;
				}
				TVEVisualData Data4_g170446 = Data3_g170415;
				float Out_Dummy4_g170446 = 0;
				float3 Out_Albedo4_g170446 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170446 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170446 = float2( 0,0 );
				float3 Out_NormalWS4_g170446 = float3( 0,0,0 );
				float4 Out_Shader4_g170446 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170446 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170446 = 0;
				float Out_Grayscale4_g170446 = 0;
				float Out_Luminosity4_g170446 = 0;
				float Out_AlphaClip4_g170446 = 0;
				float Out_AlphaFade4_g170446 = 0;
				float3 Out_Translucency4_g170446 = float3( 0,0,0 );
				float Out_Transmission4_g170446 = 0;
				float Out_Thickness4_g170446 = 0;
				float Out_Diffusion4_g170446 = 0;
				{
				Out_Dummy4_g170446 = Data4_g170446.Dummy;
				Out_Albedo4_g170446 = Data4_g170446.Albedo;
				Out_AlbedoRaw4_g170446 = Data4_g170446.AlbedoRaw;
				Out_NormalTS4_g170446 = Data4_g170446.NormalTS;
				Out_NormalWS4_g170446 = Data4_g170446.NormalWS;
				Out_Shader4_g170446 = Data4_g170446.Shader;
				Out_Emissive4_g170446= Data4_g170446.Emissive;
				Out_MultiMask4_g170446 = Data4_g170446.MultiMask;
				Out_Grayscale4_g170446 = Data4_g170446.Grayscale;
				Out_Luminosity4_g170446= Data4_g170446.Luminosity;
				Out_AlphaClip4_g170446 = Data4_g170446.AlphaClip;
				Out_AlphaFade4_g170446 = Data4_g170446.AlphaFade;
				Out_Translucency4_g170446 = Data4_g170446.Translucency;
				Out_Transmission4_g170446 = Data4_g170446.Transmission;
				Out_Thickness4_g170446 = Data4_g170446.Thickness;
				Out_Diffusion4_g170446 = Data4_g170446.Diffusion;
				}
				half3 Visual_Albedo527_g170438 = Out_Albedo4_g170446;
				TEXTURE2D(Texture276_g170439) = _ThirdAlbedoTex;
				float localFilterTexture19_g170455 = ( 0.0 );
				SamplerState SS19_g170455 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170455 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170455 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170455 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170455 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170455 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170455 = SamplerDefault19_g170455;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170455 = SamplerDefault19_g170455;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170455 = SamplerPoint19_g170455;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170455 = SamplerLow19_g170455;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170455 = SamplerMedium19_g170455;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170455 = SamplerHigh19_g170455;
				#endif
				}
				SamplerState Sampler276_g170439 = SS19_g170455;
				half4 Local_LayerCoords790_g170438 = _third_coord_value;
				float4 temp_output_37_0_g170439 = Local_LayerCoords790_g170438;
				half4 Coords276_g170439 = temp_output_37_0_g170439;
				half2 TexCoord276_g170439 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170439 = SampleMain( Texture276_g170439 , Sampler276_g170439 , Coords276_g170439 , TexCoord276_g170439 );
				TEXTURE2D(Texture275_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170439 = SS19_g170455;
				half4 Coords275_g170439 = temp_output_37_0_g170439;
				half2 TexCoord275_g170439 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170439 = SampleExtra( Texture275_g170439 , Sampler275_g170439 , Coords275_g170439 , TexCoord275_g170439 );
				TEXTURE2D(Texture238_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170439 = SS19_g170455;
				half4 Coords238_g170439 = temp_output_37_0_g170439;
				TVEModelData Data15_g170458 = Data16_g170201;
				float Out_Dummy15_g170458 = 0;
				float3 Out_PositionWS15_g170458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170458 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170458 = float3( 0,0,0 );
				float4 Out_VertexData15_g170458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170458 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170458 = Data15_g170458.Dummy;
				Out_PositionWS15_g170458 = Data15_g170458.PositionWS;
				Out_PositionWO15_g170458 = Data15_g170458.PositionWO;
				Out_PivotWS15_g170458 = Data15_g170458.PivotWS;
				Out_PivotWO15_g170458 = Data15_g170458.PivotWO;
				Out_NormalWS15_g170458 = Data15_g170458.NormalWS;
				Out_ViewDirWS15_g170458 = Data15_g170458.ViewDirWS;
				Out_VertexData15_g170458 = Data15_g170458.VertexData;
				Out_BoundsData15_g170458 = Data15_g170458.BoundsData;
				}
				half3 Model_PositionWO636_g170438 = Out_PositionWO15_g170458;
				float3 temp_output_279_0_g170439 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170439 = temp_output_279_0_g170439;
				half4 localSamplePlanar2D238_g170439 = SamplePlanar2D( Texture238_g170439 , Sampler238_g170439 , Coords238_g170439 , WorldPosition238_g170439 );
				TEXTURE2D(Texture246_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170439 = SS19_g170455;
				half4 Coords246_g170439 = temp_output_37_0_g170439;
				half3 WorldPosition246_g170439 = temp_output_279_0_g170439;
				half3 Model_NormalWS869_g170438 = Out_NormalWS15_g170458;
				float3 temp_output_280_0_g170439 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170439 = temp_output_280_0_g170439;
				half4 localSamplePlanar3D246_g170439 = SamplePlanar3D( Texture246_g170439 , Sampler246_g170439 , Coords246_g170439 , WorldPosition246_g170439 , WorldNormal246_g170439 );
				TEXTURE2D(Texture234_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170439 = SS19_g170455;
				float4 Coords234_g170439 = temp_output_37_0_g170439;
				float3 WorldPosition234_g170439 = temp_output_279_0_g170439;
				float4 localSampleStochastic2D234_g170439 = SampleStochastic2D( Texture234_g170439 , Sampler234_g170439 , Coords234_g170439 , WorldPosition234_g170439 );
				TEXTURE2D(Texture263_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170439 = SS19_g170455;
				half4 Coords263_g170439 = temp_output_37_0_g170439;
				half3 WorldPosition263_g170439 = temp_output_279_0_g170439;
				half3 WorldNormal263_g170439 = temp_output_280_0_g170439;
				half4 localSampleStochastic3D263_g170439 = SampleStochastic3D( Texture263_g170439 , Sampler263_g170439 , Coords263_g170439 , WorldPosition263_g170439 , WorldNormal263_g170439 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170438 = localSampleMain276_g170439;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170438 = localSampleExtra275_g170439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170438 = localSamplePlanar2D238_g170439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170438 = localSamplePlanar3D246_g170439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170438 = localSampleStochastic2D234_g170439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170438 = localSampleStochastic3D263_g170439;
				#else
				float4 staticSwitch693_g170438 = localSampleMain276_g170439;
				#endif
				half4 Local_AlbedoTex777_g170438 = staticSwitch693_g170438;
				float3 lerpResult716_g170438 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170438).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170438 = lerpResult716_g170438;
				TEXTURE2D(Texture276_g170441) = _ThirdShaderTex;
				float localFilterTexture30_g170457 = ( 0.0 );
				SamplerState SS30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170457 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170457 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170457 = SamplerDefault30_g170457;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170457 = SamplerDefault30_g170457;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170457 = SamplerPoint30_g170457;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170457 = SamplerLow30_g170457;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170457 = SamplerMedium30_g170457;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170457 = SamplerHigh30_g170457;
				#endif
				}
				SamplerState Sampler276_g170441 = SS30_g170457;
				float4 temp_output_37_0_g170441 = Local_LayerCoords790_g170438;
				half4 Coords276_g170441 = temp_output_37_0_g170441;
				half2 TexCoord276_g170441 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170441 = SampleMain( Texture276_g170441 , Sampler276_g170441 , Coords276_g170441 , TexCoord276_g170441 );
				TEXTURE2D(Texture275_g170441) = _ThirdShaderTex;
				SamplerState Sampler275_g170441 = SS30_g170457;
				half4 Coords275_g170441 = temp_output_37_0_g170441;
				half2 TexCoord275_g170441 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170441 = SampleExtra( Texture275_g170441 , Sampler275_g170441 , Coords275_g170441 , TexCoord275_g170441 );
				TEXTURE2D(Texture238_g170441) = _ThirdShaderTex;
				SamplerState Sampler238_g170441 = SS30_g170457;
				half4 Coords238_g170441 = temp_output_37_0_g170441;
				float3 temp_output_279_0_g170441 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170441 = temp_output_279_0_g170441;
				half4 localSamplePlanar2D238_g170441 = SamplePlanar2D( Texture238_g170441 , Sampler238_g170441 , Coords238_g170441 , WorldPosition238_g170441 );
				TEXTURE2D(Texture246_g170441) = _ThirdShaderTex;
				SamplerState Sampler246_g170441 = SS30_g170457;
				half4 Coords246_g170441 = temp_output_37_0_g170441;
				half3 WorldPosition246_g170441 = temp_output_279_0_g170441;
				float3 temp_output_280_0_g170441 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170441 = temp_output_280_0_g170441;
				half4 localSamplePlanar3D246_g170441 = SamplePlanar3D( Texture246_g170441 , Sampler246_g170441 , Coords246_g170441 , WorldPosition246_g170441 , WorldNormal246_g170441 );
				TEXTURE2D(Texture234_g170441) = _ThirdShaderTex;
				SamplerState Sampler234_g170441 = SS30_g170457;
				float4 Coords234_g170441 = temp_output_37_0_g170441;
				float3 WorldPosition234_g170441 = temp_output_279_0_g170441;
				float4 localSampleStochastic2D234_g170441 = SampleStochastic2D( Texture234_g170441 , Sampler234_g170441 , Coords234_g170441 , WorldPosition234_g170441 );
				TEXTURE2D(Texture263_g170441) = _ThirdShaderTex;
				SamplerState Sampler263_g170441 = SS30_g170457;
				half4 Coords263_g170441 = temp_output_37_0_g170441;
				half3 WorldPosition263_g170441 = temp_output_279_0_g170441;
				half3 WorldNormal263_g170441 = temp_output_280_0_g170441;
				half4 localSampleStochastic3D263_g170441 = SampleStochastic3D( Texture263_g170441 , Sampler263_g170441 , Coords263_g170441 , WorldPosition263_g170441 , WorldNormal263_g170441 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170438 = localSampleMain276_g170441;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170438 = localSampleExtra275_g170441;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170438 = localSamplePlanar2D238_g170441;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170438 = localSamplePlanar3D246_g170441;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170438 = localSampleStochastic2D234_g170441;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170438 = localSampleStochastic3D263_g170441;
				#else
				float4 staticSwitch722_g170438 = localSampleMain276_g170441;
				#endif
				half4 Local_ShaderTex775_g170438 = staticSwitch722_g170438;
				float lerpResult739_g170438 = lerp( 1.0 , (Local_ShaderTex775_g170438).y , _ThirdOcclusionValue);
				float4 appendResult749_g170438 = (float4(( (Local_ShaderTex775_g170438).x * _ThirdMetallicValue ) , lerpResult739_g170438 , (Local_ShaderTex775_g170438).z , ( (Local_ShaderTex775_g170438).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170438 = appendResult749_g170438;
				float clampResult17_g170444 = clamp( (Local_Masks750_g170438).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170459 = ( clampResult17_g170444 - temp_output_7_0_g170459 );
				float temp_output_765_0_g170438 = saturate( ( ( temp_output_9_0_g170459 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170438 = temp_output_765_0_g170438;
				float lerpResult705_g170438 = lerp( 1.0 , Local_MultiMask767_g170438 , _ThirdColorMode);
				float4 lerpResult706_g170438 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170438);
				half3 Local_ColorRGB774_g170438 = (lerpResult706_g170438).rgb;
				half3 Local_Albedo768_g170438 = ( Local_AlbedoRGB771_g170438 * Local_ColorRGB774_g170438 );
				float3 lerpResult985_g170438 = lerp( Local_Albedo768_g170438 , ( Visual_Albedo527_g170438 * Local_Albedo768_g170438 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170453) = _ThirdMaskTex;
				SamplerState Sampler276_g170453 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170438 = _third_mask_coord_value;
				float4 temp_output_37_0_g170453 = Local_MaskCoords813_g170438;
				half4 Coords276_g170453 = temp_output_37_0_g170453;
				half2 TexCoord276_g170453 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170453 = SampleMain( Texture276_g170453 , Sampler276_g170453 , Coords276_g170453 , TexCoord276_g170453 );
				TEXTURE2D(Texture275_g170453) = _ThirdMaskTex;
				SamplerState Sampler275_g170453 = sampler_Linear_Repeat;
				half4 Coords275_g170453 = temp_output_37_0_g170453;
				half2 TexCoord275_g170453 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170453 = SampleExtra( Texture275_g170453 , Sampler275_g170453 , Coords275_g170453 , TexCoord275_g170453 );
				TEXTURE2D(Texture238_g170453) = _ThirdMaskTex;
				SamplerState Sampler238_g170453 = sampler_Linear_Repeat;
				half4 Coords238_g170453 = temp_output_37_0_g170453;
				float3 temp_output_279_0_g170453 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170453 = temp_output_279_0_g170453;
				half4 localSamplePlanar2D238_g170453 = SamplePlanar2D( Texture238_g170453 , Sampler238_g170453 , Coords238_g170453 , WorldPosition238_g170453 );
				TEXTURE2D(Texture246_g170453) = _ThirdMaskTex;
				SamplerState Sampler246_g170453 = sampler_Linear_Repeat;
				half4 Coords246_g170453 = temp_output_37_0_g170453;
				half3 WorldPosition246_g170453 = temp_output_279_0_g170453;
				float3 temp_output_280_0_g170453 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170453 = temp_output_280_0_g170453;
				half4 localSamplePlanar3D246_g170453 = SamplePlanar3D( Texture246_g170453 , Sampler246_g170453 , Coords246_g170453 , WorldPosition246_g170453 , WorldNormal246_g170453 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170438 = localSampleMain276_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170438 = localSampleExtra275_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170438 = localSamplePlanar2D238_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170438 = localSamplePlanar3D246_g170453;
				#else
				float4 staticSwitch817_g170438 = localSampleMain276_g170453;
				#endif
				half4 Local_MaskTex861_g170438 = staticSwitch817_g170438;
				float clampResult17_g170461 = clamp( (Local_MaskTex861_g170438).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170465 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170465 = ( clampResult17_g170461 - temp_output_7_0_g170465 );
				float lerpResult1028_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170465 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170438 = lerpResult1028_g170438;
				half Visual_Luminosity1049_g170438 = Out_Luminosity4_g170446;
				float clampResult17_g170470 = clamp( Visual_Luminosity1049_g170438 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170471 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170471 = ( clampResult17_g170470 - temp_output_7_0_g170471 );
				float lerpResult1040_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170471 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170438 = lerpResult1040_g170438;
				half4 Model_VertexMasks960_g170438 = Out_VertexData15_g170458;
				float4 break961_g170438 = Model_VertexMasks960_g170438;
				float4 break33_g170462 = _third_vert_mode;
				float temp_output_30_0_g170462 = ( break961_g170438.x * break33_g170462.x );
				float temp_output_29_0_g170462 = ( break961_g170438.y * break33_g170462.y );
				float temp_output_31_0_g170462 = ( break961_g170438.z * break33_g170462.z );
				float temp_output_28_0_g170462 = ( temp_output_30_0_g170462 + temp_output_29_0_g170462 + temp_output_31_0_g170462 + ( break961_g170438.w * break33_g170462.w ) );
				float clampResult17_g170460 = clamp( temp_output_28_0_g170462 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170464 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170464 = ( clampResult17_g170460 - temp_output_7_0_g170464 );
				float lerpResult1026_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170464 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170463 = lerpResult1026_g170438;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170463 = ( temp_output_6_0_g170463 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170463 = temp_output_6_0_g170463;
				#endif
				half Blend_VertMask913_g170438 = staticSwitch14_g170463;
				half3 Visual_NormalWS953_g170438 = Out_NormalWS4_g170446;
				float clampResult17_g170466 = clamp( saturate( (Visual_NormalWS953_g170438).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170468 = _ThirdProjRemap.x;
				float temp_output_9_0_g170468 = ( clampResult17_g170466 - temp_output_7_0_g170468 );
				float lerpResult1004_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170468 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170438 = lerpResult1004_g170438;
				TVEGlobalData Data15_g170448 = Data204_g170214;
				float Out_Dummy15_g170448 = 0;
				float4 Out_CoatParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170448 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170448 = Data15_g170448.Dummy;
				Out_CoatParams15_g170448 = Data15_g170448.CoatParams;
				Out_PaintParams15_g170448 = Data15_g170448.PaintParams;
				Out_GlowParams15_g170448 = Data15_g170448.GlowParams;
				Out_AtmoParams15_g170448= Data15_g170448.AtmoParams;
				Out_FadeParams15_g170448= Data15_g170448.FadeParams;
				Out_FormParams15_g170448 = Data15_g170448.FormParams;
				Out_FlowParams15_g170448 = Data15_g170448.FlowParams;
				}
				half4 Global_CoatParams972_g170438 = Out_CoatParams15_g170448;
				float temp_output_6_0_g170472 = (Global_CoatParams972_g170438).y;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170472 = ( temp_output_6_0_g170472 + ( _ThirdElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170472 = temp_output_6_0_g170472;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170438 = staticSwitch14_g170472;
				#else
				float staticSwitch1056_g170438 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170438 = lerp( 1.0 , staticSwitch1056_g170438 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170438 = lerpResult1060_g170438;
				float clampResult17_g170467 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170438 * Blend_LumaMask1046_g170438 * Blend_VertMask913_g170438 * Blend_ProjMask912_g170438 * Blend_GlobalMask968_g170438 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170469 = ( clampResult17_g170467 - temp_output_7_0_g170469 );
				half Detail_Mask412_g170438 = ( saturate( ( ( temp_output_9_0_g170469 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170438 = lerp( Visual_Albedo527_g170438 , lerpResult985_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170438 = lerpResult989_g170438;
				#else
				float3 staticSwitch415_g170438 = Visual_Albedo527_g170438;
				#endif
				half3 Final_Albedo601_g170438 = staticSwitch415_g170438;
				float3 In_Albedo3_g170447 = Final_Albedo601_g170438;
				float3 In_AlbedoRaw3_g170447 = Final_Albedo601_g170438;
				half2 Visual_NormalTS529_g170438 = Out_NormalTS4_g170446;
				float2 lerpResult40_g170449 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170438 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170440) = _ThirdNormalTex;
				float localFilterTexture29_g170456 = ( 0.0 );
				SamplerState SS29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170456 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170456 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170456 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170456 = SamplerDefault29_g170456;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170456 = SamplerDefault29_g170456;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170456 = SamplerPoint29_g170456;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170456 = SamplerLow29_g170456;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170456 = SamplerMedium29_g170456;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170456 = SamplerHigh29_g170456;
				#endif
				}
				SamplerState Sampler276_g170440 = SS29_g170456;
				float4 temp_output_37_0_g170440 = Local_LayerCoords790_g170438;
				half4 Coords276_g170440 = temp_output_37_0_g170440;
				half2 TexCoord276_g170440 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170440 = SampleMain( Texture276_g170440 , Sampler276_g170440 , Coords276_g170440 , TexCoord276_g170440 );
				TEXTURE2D(Texture275_g170440) = _ThirdNormalTex;
				SamplerState Sampler275_g170440 = SS29_g170456;
				half4 Coords275_g170440 = temp_output_37_0_g170440;
				half2 TexCoord275_g170440 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170440 = SampleExtra( Texture275_g170440 , Sampler275_g170440 , Coords275_g170440 , TexCoord275_g170440 );
				TEXTURE2D(Texture238_g170440) = _ThirdNormalTex;
				SamplerState Sampler238_g170440 = SS29_g170456;
				half4 Coords238_g170440 = temp_output_37_0_g170440;
				float3 temp_output_279_0_g170440 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170440 = temp_output_279_0_g170440;
				half4 localSamplePlanar2D238_g170440 = SamplePlanar2D( Texture238_g170440 , Sampler238_g170440 , Coords238_g170440 , WorldPosition238_g170440 );
				TEXTURE2D(Texture246_g170440) = _ThirdNormalTex;
				SamplerState Sampler246_g170440 = SS29_g170456;
				half4 Coords246_g170440 = temp_output_37_0_g170440;
				half3 WorldPosition246_g170440 = temp_output_279_0_g170440;
				float3 temp_output_280_0_g170440 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170440 = temp_output_280_0_g170440;
				half4 localSamplePlanar3D246_g170440 = SamplePlanar3D( Texture246_g170440 , Sampler246_g170440 , Coords246_g170440 , WorldPosition246_g170440 , WorldNormal246_g170440 );
				TEXTURE2D(Texture234_g170440) = _ThirdNormalTex;
				SamplerState Sampler234_g170440 = SS29_g170456;
				float4 Coords234_g170440 = temp_output_37_0_g170440;
				float3 WorldPosition234_g170440 = temp_output_279_0_g170440;
				float4 localSampleStochastic2D234_g170440 = SampleStochastic2D( Texture234_g170440 , Sampler234_g170440 , Coords234_g170440 , WorldPosition234_g170440 );
				TEXTURE2D(Texture263_g170440) = _ThirdNormalTex;
				SamplerState Sampler263_g170440 = SS29_g170456;
				half4 Coords263_g170440 = temp_output_37_0_g170440;
				half3 WorldPosition263_g170440 = temp_output_279_0_g170440;
				half3 WorldNormal263_g170440 = temp_output_280_0_g170440;
				half4 localSampleStochastic3D263_g170440 = SampleStochastic3D( Texture263_g170440 , Sampler263_g170440 , Coords263_g170440 , WorldPosition263_g170440 , WorldNormal263_g170440 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170438 = localSampleMain276_g170440;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170438 = localSampleExtra275_g170440;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170438 = localSamplePlanar2D238_g170440;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170438 = localSamplePlanar3D246_g170440;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170438 = localSampleStochastic2D234_g170440;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170438 = localSampleStochastic3D263_g170440;
				#else
				float4 staticSwitch698_g170438 = localSampleMain276_g170440;
				#endif
				half4 Local_NormalTex776_g170438 = staticSwitch698_g170438;
				half4 Normal_Packed45_g170442 = Local_NormalTex776_g170438;
				float2 appendResult58_g170442 = (float2(( (Normal_Packed45_g170442).x * (Normal_Packed45_g170442).w ) , (Normal_Packed45_g170442).y));
				half2 Normal_Default50_g170442 = appendResult58_g170442;
				half2 Normal_ASTC41_g170442 = (Normal_Packed45_g170442).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170442 = Normal_ASTC41_g170442;
				#else
				float2 staticSwitch38_g170442 = Normal_Default50_g170442;
				#endif
				half2 Normal_NO_DTX544_g170442 = (Normal_Packed45_g170442).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170442 = Normal_NO_DTX544_g170442;
				#else
				float2 staticSwitch37_g170442 = staticSwitch38_g170442;
				#endif
				float2 temp_output_724_0_g170438 = ( (staticSwitch37_g170442*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170443 = temp_output_724_0_g170438;
				float2 break71_g170443 = Normal_Planar45_g170443;
				float3 appendResult72_g170443 = (float3(break71_g170443.x , 0.0 , break71_g170443.y));
				float2 temp_output_858_0_g170438 = (mul( ase_worldToTangent, appendResult72_g170443 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#else
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#endif
				half2 Local_NormalTS729_g170438 = staticSwitch727_g170438;
				float2 temp_output_36_0_g170449 = ( lerpResult40_g170449 + Local_NormalTS729_g170438 );
				float2 lerpResult405_g170438 = lerp( Visual_NormalTS529_g170438 , temp_output_36_0_g170449 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170438 = lerpResult405_g170438;
				#else
				float2 staticSwitch418_g170438 = Visual_NormalTS529_g170438;
				#endif
				half2 Final_NormalTS612_g170438 = staticSwitch418_g170438;
				float2 In_NormalTS3_g170447 = Final_NormalTS612_g170438;
				float3 appendResult68_g170450 = (float3(Final_NormalTS612_g170438 , 1.0));
				float3 tanNormal74_g170450 = appendResult68_g170450;
				float3 worldNormal74_g170450 = normalize( float3(dot(tanToWorld0,tanNormal74_g170450), dot(tanToWorld1,tanNormal74_g170450), dot(tanToWorld2,tanNormal74_g170450)) );
				half3 Final_NormalWS956_g170438 = worldNormal74_g170450;
				float3 In_NormalWS3_g170447 = Final_NormalWS956_g170438;
				half4 Visual_Shader531_g170438 = Out_Shader4_g170446;
				float4 lerpResult1000_g170438 = lerp( Local_Masks750_g170438 , ( Visual_Shader531_g170438 * Local_Masks750_g170438 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170438 = lerp( Visual_Shader531_g170438 , lerpResult1000_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170438 = lerpResult998_g170438;
				#else
				float4 staticSwitch451_g170438 = Visual_Shader531_g170438;
				#endif
				half4 Final_Masks613_g170438 = staticSwitch451_g170438;
				float4 In_Shader3_g170447 = Final_Masks613_g170438;
				float4 In_Emissive3_g170447 = Out_Emissive4_g170446;
				float3 temp_output_3_0_g170452 = Final_Albedo601_g170438;
				float dotResult20_g170452 = dot( temp_output_3_0_g170452 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170438 = dotResult20_g170452;
				float In_Grayscale3_g170447 = Final_Grayscale615_g170438;
				float clampResult651_g170438 = clamp( saturate( ( Final_Grayscale615_g170438 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170438 = clampResult651_g170438;
				float In_Luminosity3_g170447 = Final_Luminosity652_g170438;
				half Visual_MultiMask547_g170438 = Out_MultiMask4_g170446;
				float lerpResult477_g170438 = lerp( Visual_MultiMask547_g170438 , Local_MultiMask767_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch482_g170438 = lerpResult477_g170438;
				#else
				float staticSwitch482_g170438 = Visual_MultiMask547_g170438;
				#endif
				half Final_MultiMask572_g170438 = staticSwitch482_g170438;
				float In_MultiMask3_g170447 = Final_MultiMask572_g170438;
				half Visual_AlphaClip559_g170438 = Out_AlphaClip4_g170446;
				float temp_output_718_0_g170438 = (Local_AlbedoTex777_g170438).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170438 = ( temp_output_718_0_g170438 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170438 = temp_output_718_0_g170438;
				#endif
				half Local_AlphaClip772_g170438 = staticSwitch924_g170438;
				float lerpResult448_g170438 = lerp( Visual_AlphaClip559_g170438 , Local_AlphaClip772_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch564_g170438 = lerpResult448_g170438;
				#else
				float staticSwitch564_g170438 = Visual_AlphaClip559_g170438;
				#endif
				half Final_AlphaClip602_g170438 = staticSwitch564_g170438;
				float In_AlphaClip3_g170447 = Final_AlphaClip602_g170438;
				half Visual_AlphaFade588_g170438 = Out_AlphaFade4_g170446;
				half Local_AlphaFade773_g170438 = (lerpResult706_g170438).a;
				float lerpResult604_g170438 = lerp( Visual_AlphaFade588_g170438 , Local_AlphaFade773_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch608_g170438 = lerpResult604_g170438;
				#else
				float staticSwitch608_g170438 = Visual_AlphaFade588_g170438;
				#endif
				half Final_AlphaFade611_g170438 = staticSwitch608_g170438;
				float In_AlphaFade3_g170447 = Final_AlphaFade611_g170438;
				float3 In_Translucency3_g170447 = Out_Translucency4_g170446;
				float In_Transmission3_g170447 = Out_Transmission4_g170446;
				float In_Thickness3_g170447 = Out_Thickness4_g170446;
				float In_Diffusion3_g170447 = Out_Diffusion4_g170446;
				{
				Data3_g170447.Dummy = In_Dummy3_g170447;
				Data3_g170447.Albedo = In_Albedo3_g170447;
				Data3_g170447.AlbedoRaw = In_AlbedoRaw3_g170447;
				Data3_g170447.NormalTS = In_NormalTS3_g170447;
				Data3_g170447.NormalWS = In_NormalWS3_g170447;
				Data3_g170447.Shader = In_Shader3_g170447;
				Data3_g170447.Emissive= In_Emissive3_g170447;
				Data3_g170447.MultiMask = In_MultiMask3_g170447;
				Data3_g170447.Grayscale = In_Grayscale3_g170447;
				Data3_g170447.Luminosity = In_Luminosity3_g170447;
				Data3_g170447.AlphaClip = In_AlphaClip3_g170447;
				Data3_g170447.AlphaFade = In_AlphaFade3_g170447;
				Data3_g170447.Translucency = In_Translucency3_g170447;
				Data3_g170447.Transmission = In_Transmission3_g170447;
				Data3_g170447.Thickness = In_Thickness3_g170447;
				Data3_g170447.Diffusion = In_Diffusion3_g170447;
				}
				TVEVisualData Data4_g170545 = Data3_g170447;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				{
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				}
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170552 = Data16_g170201;
				float Out_Dummy15_g170552 = 0;
				float3 Out_PositionWS15_g170552 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170552 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170552 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170552 = float3( 0,0,0 );
				float4 Out_VertexData15_g170552 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170552 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170552 = Data15_g170552.Dummy;
				Out_PositionWS15_g170552 = Data15_g170552.PositionWS;
				Out_PositionWO15_g170552 = Data15_g170552.PositionWO;
				Out_PivotWS15_g170552 = Data15_g170552.PivotWS;
				Out_PivotWO15_g170552 = Data15_g170552.PivotWO;
				Out_NormalWS15_g170552 = Data15_g170552.NormalWS;
				Out_ViewDirWS15_g170552 = Data15_g170552.ViewDirWS;
				Out_VertexData15_g170552 = Data15_g170552.VertexData;
				Out_BoundsData15_g170552 = Data15_g170552.BoundsData;
				}
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170552;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170550 = _occlusion_vert_mode;
				float temp_output_30_0_g170550 = ( break208_g170544.x * break33_g170550.x );
				float temp_output_29_0_g170550 = ( break208_g170544.y * break33_g170550.y );
				float temp_output_31_0_g170550 = ( break208_g170544.z * break33_g170550.z );
				float temp_output_28_0_g170550 = ( temp_output_30_0_g170550 + temp_output_29_0_g170550 + temp_output_31_0_g170550 + ( break208_g170544.w * break33_g170550.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170550;
				float clampResult17_g170548 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170553 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170553 = ( clampResult17_g170548 - temp_output_7_0_g170553 );
				float temp_output_6_0_g170549 = saturate( ( ( temp_output_9_0_g170553 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170549 = ( temp_output_6_0_g170549 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170549 = temp_output_6_0_g170549;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170549;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				{
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				}
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				{
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				}
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170562 = Data16_g170201;
				float Out_Dummy15_g170562 = 0;
				float3 Out_PositionWS15_g170562 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170562 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170562 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170562 = float3( 0,0,0 );
				float4 Out_VertexData15_g170562 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170562 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170562 = Data15_g170562.Dummy;
				Out_PositionWS15_g170562 = Data15_g170562.PositionWS;
				Out_PositionWO15_g170562 = Data15_g170562.PositionWO;
				Out_PivotWS15_g170562 = Data15_g170562.PivotWS;
				Out_PivotWO15_g170562 = Data15_g170562.PivotWO;
				Out_NormalWS15_g170562 = Data15_g170562.NormalWS;
				Out_ViewDirWS15_g170562 = Data15_g170562.ViewDirWS;
				Out_VertexData15_g170562 = Data15_g170562.VertexData;
				Out_BoundsData15_g170562 = Data15_g170562.BoundsData;
				}
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170562;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170563 = _GradientMeshRemap.x;
				float temp_output_9_0_g170563 = ( clampResult17_g170560 - temp_output_7_0_g170563 );
				float temp_output_6_0_g170561 = saturate( ( ( temp_output_9_0_g170563 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170561 = ( temp_output_6_0_g170561 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170561 = temp_output_6_0_g170561;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170561;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				{
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				}
				TVEVisualData Data4_g170566 = Data3_g170557;
				float Out_Dummy4_g170566 = 0;
				float3 Out_Albedo4_g170566 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170566 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170566 = float2( 0,0 );
				float3 Out_NormalWS4_g170566 = float3( 0,0,0 );
				float4 Out_Shader4_g170566 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170566 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170566 = 0;
				float Out_Grayscale4_g170566 = 0;
				float Out_Luminosity4_g170566 = 0;
				float Out_AlphaClip4_g170566 = 0;
				float Out_AlphaFade4_g170566 = 0;
				float3 Out_Translucency4_g170566 = float3( 0,0,0 );
				float Out_Transmission4_g170566 = 0;
				float Out_Thickness4_g170566 = 0;
				float Out_Diffusion4_g170566 = 0;
				{
				Out_Dummy4_g170566 = Data4_g170566.Dummy;
				Out_Albedo4_g170566 = Data4_g170566.Albedo;
				Out_AlbedoRaw4_g170566 = Data4_g170566.AlbedoRaw;
				Out_NormalTS4_g170566 = Data4_g170566.NormalTS;
				Out_NormalWS4_g170566 = Data4_g170566.NormalWS;
				Out_Shader4_g170566 = Data4_g170566.Shader;
				Out_Emissive4_g170566= Data4_g170566.Emissive;
				Out_MultiMask4_g170566 = Data4_g170566.MultiMask;
				Out_Grayscale4_g170566 = Data4_g170566.Grayscale;
				Out_Luminosity4_g170566= Data4_g170566.Luminosity;
				Out_AlphaClip4_g170566 = Data4_g170566.AlphaClip;
				Out_AlphaFade4_g170566 = Data4_g170566.AlphaFade;
				Out_Translucency4_g170566 = Data4_g170566.Translucency;
				Out_Transmission4_g170566 = Data4_g170566.Transmission;
				Out_Thickness4_g170566 = Data4_g170566.Thickness;
				Out_Diffusion4_g170566 = Data4_g170566.Diffusion;
				}
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170566;
				TVEModelData Data15_g170571 = Data16_g170201;
				float Out_Dummy15_g170571 = 0;
				float3 Out_PositionWS15_g170571 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170571 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170571 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170571 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170571 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170571 = float3( 0,0,0 );
				float4 Out_VertexData15_g170571 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170571 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170571 = Data15_g170571.Dummy;
				Out_PositionWS15_g170571 = Data15_g170571.PositionWS;
				Out_PositionWO15_g170571 = Data15_g170571.PositionWO;
				Out_PivotWS15_g170571 = Data15_g170571.PivotWS;
				Out_PivotWO15_g170571 = Data15_g170571.PivotWO;
				Out_NormalWS15_g170571 = Data15_g170571.NormalWS;
				Out_ViewDirWS15_g170571 = Data15_g170571.ViewDirWS;
				Out_VertexData15_g170571 = Data15_g170571.VertexData;
				Out_BoundsData15_g170571 = Data15_g170571.BoundsData;
				}
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170571;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170571;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170568 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170570 = clamp( tex3DNode60_g170568.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170572 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170572 = ( clampResult17_g170570 - temp_output_7_0_g170572 );
				float temp_output_238_0_g170564 = saturate( ( ( temp_output_9_0_g170572 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170566;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170567 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170567 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170567 = Out_NormalTS4_g170566;
				float3 In_NormalWS3_g170567 = Out_NormalWS4_g170566;
				float4 In_Shader3_g170567 = Out_Shader4_g170566;
				float4 In_Emissive3_g170567 = Out_Emissive4_g170566;
				float3 temp_output_3_0_g170565 = Final_Albedo160_g170564;
				float dotResult20_g170565 = dot( temp_output_3_0_g170565 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170564 = dotResult20_g170565;
				float In_Grayscale3_g170567 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170567 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170567 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170567 = Out_AlphaClip4_g170566;
				float In_AlphaFade3_g170567 = Out_AlphaFade4_g170566;
				float3 In_Translucency3_g170567 = Out_Translucency4_g170566;
				float In_Transmission3_g170567 = Out_Transmission4_g170566;
				float In_Thickness3_g170567 = Out_Thickness4_g170566;
				float In_Diffusion3_g170567 = Out_Diffusion4_g170566;
				{
				Data3_g170567.Dummy = In_Dummy3_g170567;
				Data3_g170567.Albedo = In_Albedo3_g170567;
				Data3_g170567.AlbedoRaw = In_AlbedoRaw3_g170567;
				Data3_g170567.NormalTS = In_NormalTS3_g170567;
				Data3_g170567.NormalWS = In_NormalWS3_g170567;
				Data3_g170567.Shader = In_Shader3_g170567;
				Data3_g170567.Emissive= In_Emissive3_g170567;
				Data3_g170567.MultiMask = In_MultiMask3_g170567;
				Data3_g170567.Grayscale = In_Grayscale3_g170567;
				Data3_g170567.Luminosity = In_Luminosity3_g170567;
				Data3_g170567.AlphaClip = In_AlphaClip3_g170567;
				Data3_g170567.AlphaFade = In_AlphaFade3_g170567;
				Data3_g170567.Translucency = In_Translucency3_g170567;
				Data3_g170567.Transmission = In_Transmission3_g170567;
				Data3_g170567.Thickness = In_Thickness3_g170567;
				Data3_g170567.Diffusion = In_Diffusion3_g170567;
				}
				TVEVisualData Data4_g170579 = Data3_g170567;
				float Out_Dummy4_g170579 = 0;
				float3 Out_Albedo4_g170579 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170579 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170579 = float2( 0,0 );
				float3 Out_NormalWS4_g170579 = float3( 0,0,0 );
				float4 Out_Shader4_g170579 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170579 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170579 = 0;
				float Out_Grayscale4_g170579 = 0;
				float Out_Luminosity4_g170579 = 0;
				float Out_AlphaClip4_g170579 = 0;
				float Out_AlphaFade4_g170579 = 0;
				float3 Out_Translucency4_g170579 = float3( 0,0,0 );
				float Out_Transmission4_g170579 = 0;
				float Out_Thickness4_g170579 = 0;
				float Out_Diffusion4_g170579 = 0;
				{
				Out_Dummy4_g170579 = Data4_g170579.Dummy;
				Out_Albedo4_g170579 = Data4_g170579.Albedo;
				Out_AlbedoRaw4_g170579 = Data4_g170579.AlbedoRaw;
				Out_NormalTS4_g170579 = Data4_g170579.NormalTS;
				Out_NormalWS4_g170579 = Data4_g170579.NormalWS;
				Out_Shader4_g170579 = Data4_g170579.Shader;
				Out_Emissive4_g170579= Data4_g170579.Emissive;
				Out_MultiMask4_g170579 = Data4_g170579.MultiMask;
				Out_Grayscale4_g170579 = Data4_g170579.Grayscale;
				Out_Luminosity4_g170579= Data4_g170579.Luminosity;
				Out_AlphaClip4_g170579 = Data4_g170579.AlphaClip;
				Out_AlphaFade4_g170579 = Data4_g170579.AlphaFade;
				Out_Translucency4_g170579 = Data4_g170579.Translucency;
				Out_Transmission4_g170579 = Data4_g170579.Transmission;
				Out_Thickness4_g170579 = Data4_g170579.Thickness;
				Out_Diffusion4_g170579 = Data4_g170579.Diffusion;
				}
				half3 Visual_Albedo139_g170574 = Out_Albedo4_g170579;
				float temp_output_200_12_g170574 = Out_Grayscale4_g170579;
				half Visual_Grayscale150_g170574 = temp_output_200_12_g170574;
				float3 temp_cast_33 = (Visual_Grayscale150_g170574).xxx;
				TVEGlobalData Data15_g170575 = Data204_g170214;
				float Out_Dummy15_g170575 = 0;
				float4 Out_CoatParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170575 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170575 = Data15_g170575.Dummy;
				Out_CoatParams15_g170575 = Data15_g170575.CoatParams;
				Out_PaintParams15_g170575 = Data15_g170575.PaintParams;
				Out_GlowParams15_g170575 = Data15_g170575.GlowParams;
				Out_AtmoParams15_g170575= Data15_g170575.AtmoParams;
				Out_FadeParams15_g170575= Data15_g170575.FadeParams;
				Out_FormParams15_g170575 = Data15_g170575.FormParams;
				Out_FlowParams15_g170575 = Data15_g170575.FlowParams;
				}
				half4 Global_PaintParams209_g170574 = Out_PaintParams15_g170575;
				float4 temp_output_6_0_g170596 = Global_PaintParams209_g170574;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170596 = ( temp_output_6_0_g170596 + ( _TintingElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170596 = temp_output_6_0_g170596;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170574 = staticSwitch14_g170596;
				#else
				float4 staticSwitch283_g170574 = TVE_PaintParams;
				#endif
				float lerpResult412_g170574 = lerp( 1.0 , ( saturate( (staticSwitch283_g170574).w ) * TVE_IsEnabled ) , _TintingGlobalValue);
				half Tinting_GlobalValue285_g170574 = lerpResult412_g170574;
				float3 lerpResult368_g170574 = lerp( Visual_Albedo139_g170574 , temp_cast_33 , ( Tinting_GlobalValue285_g170574 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g170574 = (staticSwitch283_g170574).xyz;
				float temp_output_200_11_g170574 = Out_MultiMask4_g170579;
				half Visual_MultiMask181_g170574 = temp_output_200_11_g170574;
				float lerpResult147_g170574 = lerp( 1.0 , Visual_MultiMask181_g170574 , _TintingMultiValue);
				half Tinting_MutiMask121_g170574 = lerpResult147_g170574;
				half Tinting_TexMask385_g170574 = 1.0;
				float temp_output_200_15_g170574 = Out_Luminosity4_g170579;
				half Visual_Luminosity257_g170574 = temp_output_200_15_g170574;
				float clampResult17_g170586 = clamp( Visual_Luminosity257_g170574 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170591 = _TintingLumaRemap.x;
				float temp_output_9_0_g170591 = ( clampResult17_g170586 - temp_output_7_0_g170591 );
				float lerpResult228_g170574 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170591 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170574 = lerpResult228_g170574;
				TVEModelData Data15_g170580 = Data16_g170201;
				float Out_Dummy15_g170580 = 0;
				float3 Out_PositionWS15_g170580 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170580 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170580 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170580 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170580 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170580 = float3( 0,0,0 );
				float4 Out_VertexData15_g170580 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170580 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170580 = Data15_g170580.Dummy;
				Out_PositionWS15_g170580 = Data15_g170580.PositionWS;
				Out_PositionWO15_g170580 = Data15_g170580.PositionWO;
				Out_PivotWS15_g170580 = Data15_g170580.PivotWS;
				Out_PivotWO15_g170580 = Data15_g170580.PivotWO;
				Out_NormalWS15_g170580 = Data15_g170580.NormalWS;
				Out_ViewDirWS15_g170580 = Data15_g170580.ViewDirWS;
				Out_VertexData15_g170580 = Data15_g170580.VertexData;
				Out_BoundsData15_g170580 = Data15_g170580.BoundsData;
				}
				half4 Model_VertexMasks307_g170574 = Out_VertexData15_g170580;
				float4 break311_g170574 = Model_VertexMasks307_g170574;
				float4 break33_g170583 = _tinting_vert_mode;
				float temp_output_30_0_g170583 = ( break311_g170574.x * break33_g170583.x );
				float temp_output_29_0_g170583 = ( break311_g170574.y * break33_g170583.y );
				float temp_output_31_0_g170583 = ( break311_g170574.z * break33_g170583.z );
				float temp_output_28_0_g170583 = ( temp_output_30_0_g170583 + temp_output_29_0_g170583 + temp_output_31_0_g170583 + ( break311_g170574.w * break33_g170583.w ) );
				float clampResult17_g170585 = clamp( temp_output_28_0_g170583 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170592 = _TintingMeshRemap.x;
				float temp_output_9_0_g170592 = ( clampResult17_g170585 - temp_output_7_0_g170592 );
				float lerpResult370_g170574 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170592 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170587 = lerpResult370_g170574;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170587 = ( temp_output_6_0_g170587 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170587 = temp_output_6_0_g170587;
				#endif
				half Tinting_VertMask309_g170574 = staticSwitch14_g170587;
				half Tinting_NoiseMask213_g170574 = 1.0;
				half Custom_Mask345_g170574 = 1.0;
				float temp_output_7_0_g170595 = _TintingBlendRemap.x;
				float temp_output_9_0_g170595 = ( ( _TintingIntensityValue * Tinting_MutiMask121_g170574 * Tinting_TexMask385_g170574 * Tinting_LumaMask153_g170574 * Tinting_VertMask309_g170574 * Tinting_NoiseMask213_g170574 * Tinting_GlobalValue285_g170574 * Custom_Mask345_g170574 ) - temp_output_7_0_g170595 );
				half Tinting_Mask242_g170574 = ( saturate( ( ( temp_output_9_0_g170595 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170574 = lerp( Visual_Albedo139_g170574 , ( lerpResult368_g170574 * 4.594794 * Tinting_GlobalColor290_g170574 * (_TintingColor).rgb ) , Tinting_Mask242_g170574);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170574 = lerpResult90_g170574;
				#else
				float3 staticSwitch286_g170574 = Visual_Albedo139_g170574;
				#endif
				half3 Final_Albedo97_g170574 = staticSwitch286_g170574;
				float3 In_Albedo3_g170578 = Final_Albedo97_g170574;
				float3 In_AlbedoRaw3_g170578 = Out_AlbedoRaw4_g170579;
				float2 In_NormalTS3_g170578 = Out_NormalTS4_g170579;
				float3 In_NormalWS3_g170578 = Out_NormalWS4_g170579;
				float4 In_Shader3_g170578 = Out_Shader4_g170579;
				float4 In_Emissive3_g170578 = Out_Emissive4_g170579;
				float In_Grayscale3_g170578 = temp_output_200_12_g170574;
				float In_Luminosity3_g170578 = temp_output_200_15_g170574;
				float In_MultiMask3_g170578 = temp_output_200_11_g170574;
				float In_AlphaClip3_g170578 = Out_AlphaClip4_g170579;
				float In_AlphaFade3_g170578 = Out_AlphaFade4_g170579;
				float3 In_Translucency3_g170578 = Out_Translucency4_g170579;
				float In_Transmission3_g170578 = Out_Transmission4_g170579;
				float In_Thickness3_g170578 = Out_Thickness4_g170579;
				float In_Diffusion3_g170578 = Out_Diffusion4_g170579;
				{
				Data3_g170578.Dummy = In_Dummy3_g170578;
				Data3_g170578.Albedo = In_Albedo3_g170578;
				Data3_g170578.AlbedoRaw = In_AlbedoRaw3_g170578;
				Data3_g170578.NormalTS = In_NormalTS3_g170578;
				Data3_g170578.NormalWS = In_NormalWS3_g170578;
				Data3_g170578.Shader = In_Shader3_g170578;
				Data3_g170578.Emissive= In_Emissive3_g170578;
				Data3_g170578.MultiMask = In_MultiMask3_g170578;
				Data3_g170578.Grayscale = In_Grayscale3_g170578;
				Data3_g170578.Luminosity = In_Luminosity3_g170578;
				Data3_g170578.AlphaClip = In_AlphaClip3_g170578;
				Data3_g170578.AlphaFade = In_AlphaFade3_g170578;
				Data3_g170578.Translucency = In_Translucency3_g170578;
				Data3_g170578.Transmission = In_Transmission3_g170578;
				Data3_g170578.Thickness = In_Thickness3_g170578;
				Data3_g170578.Diffusion = In_Diffusion3_g170578;
				}
				TVEVisualData Data4_g170600 = Data3_g170578;
				float Out_Dummy4_g170600 = 0;
				float3 Out_Albedo4_g170600 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170600 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170600 = float2( 0,0 );
				float3 Out_NormalWS4_g170600 = float3( 0,0,0 );
				float4 Out_Shader4_g170600 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170600 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170600 = 0;
				float Out_Grayscale4_g170600 = 0;
				float Out_Luminosity4_g170600 = 0;
				float Out_AlphaClip4_g170600 = 0;
				float Out_AlphaFade4_g170600 = 0;
				float3 Out_Translucency4_g170600 = float3( 0,0,0 );
				float Out_Transmission4_g170600 = 0;
				float Out_Thickness4_g170600 = 0;
				float Out_Diffusion4_g170600 = 0;
				{
				Out_Dummy4_g170600 = Data4_g170600.Dummy;
				Out_Albedo4_g170600 = Data4_g170600.Albedo;
				Out_AlbedoRaw4_g170600 = Data4_g170600.AlbedoRaw;
				Out_NormalTS4_g170600 = Data4_g170600.NormalTS;
				Out_NormalWS4_g170600 = Data4_g170600.NormalWS;
				Out_Shader4_g170600 = Data4_g170600.Shader;
				Out_Emissive4_g170600= Data4_g170600.Emissive;
				Out_MultiMask4_g170600 = Data4_g170600.MultiMask;
				Out_Grayscale4_g170600 = Data4_g170600.Grayscale;
				Out_Luminosity4_g170600= Data4_g170600.Luminosity;
				Out_AlphaClip4_g170600 = Data4_g170600.AlphaClip;
				Out_AlphaFade4_g170600 = Data4_g170600.AlphaFade;
				Out_Translucency4_g170600 = Data4_g170600.Translucency;
				Out_Transmission4_g170600 = Data4_g170600.Transmission;
				Out_Thickness4_g170600 = Data4_g170600.Thickness;
				Out_Diffusion4_g170600 = Data4_g170600.Diffusion;
				}
				half3 Visual_Albedo292_g170598 = Out_Albedo4_g170600;
				float temp_output_280_12_g170598 = Out_Grayscale4_g170600;
				half Visual_Grayscale308_g170598 = temp_output_280_12_g170598;
				float3 temp_cast_34 = (Visual_Grayscale308_g170598).xxx;
				TVEGlobalData Data15_g170599 = Data204_g170214;
				float Out_Dummy15_g170599 = 0;
				float4 Out_CoatParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170599 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170599 = Data15_g170599.Dummy;
				Out_CoatParams15_g170599 = Data15_g170599.CoatParams;
				Out_PaintParams15_g170599 = Data15_g170599.PaintParams;
				Out_GlowParams15_g170599 = Data15_g170599.GlowParams;
				Out_AtmoParams15_g170599= Data15_g170599.AtmoParams;
				Out_FadeParams15_g170599= Data15_g170599.FadeParams;
				Out_FormParams15_g170599 = Data15_g170599.FormParams;
				Out_FlowParams15_g170599 = Data15_g170599.FlowParams;
				}
				half4 Global_AtmoParams314_g170598 = Out_AtmoParams15_g170599;
				float temp_output_6_0_g170619 = (Global_AtmoParams314_g170598).x;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170619 = ( temp_output_6_0_g170619 + ( _DrynessElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170619 = temp_output_6_0_g170619;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170598 = staticSwitch14_g170619;
				#else
				float staticSwitch351_g170598 = TVE_AtmoData.x;
				#endif
				float lerpResult505_g170598 = lerp( 1.0 , ( staticSwitch351_g170598 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalMask352_g170598 = lerpResult505_g170598;
				float3 lerpResult485_g170598 = lerp( Visual_Albedo292_g170598 , temp_cast_34 , ( Dryness_GlobalMask352_g170598 * _DrynessGrayValue ));
				half Dryness_TexMask478_g170598 = 1.0;
				float temp_output_280_11_g170598 = Out_MultiMask4_g170600;
				half Visual_MultiMask310_g170598 = temp_output_280_11_g170598;
				float lerpResult283_g170598 = lerp( 1.0 , Visual_MultiMask310_g170598 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170598 = lerpResult283_g170598;
				float temp_output_280_15_g170598 = Out_Luminosity4_g170600;
				half Visual_Luminosity309_g170598 = temp_output_280_15_g170598;
				float clampResult17_g170610 = clamp( Visual_Luminosity309_g170598 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170615 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170615 = ( clampResult17_g170610 - temp_output_7_0_g170615 );
				float lerpResult295_g170598 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170615 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170598 = lerpResult295_g170598;
				TVEModelData Data15_g170604 = Data16_g170201;
				float Out_Dummy15_g170604 = 0;
				float3 Out_PositionWS15_g170604 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170604 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170604 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170604 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170604 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170604 = float3( 0,0,0 );
				float4 Out_VertexData15_g170604 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170604 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170604 = Data15_g170604.Dummy;
				Out_PositionWS15_g170604 = Data15_g170604.PositionWS;
				Out_PositionWO15_g170604 = Data15_g170604.PositionWO;
				Out_PivotWS15_g170604 = Data15_g170604.PivotWS;
				Out_PivotWO15_g170604 = Data15_g170604.PivotWO;
				Out_NormalWS15_g170604 = Data15_g170604.NormalWS;
				Out_ViewDirWS15_g170604 = Data15_g170604.ViewDirWS;
				Out_VertexData15_g170604 = Data15_g170604.VertexData;
				Out_BoundsData15_g170604 = Data15_g170604.BoundsData;
				}
				half4 Model_VertexMasks386_g170598 = Out_VertexData15_g170604;
				float4 break375_g170598 = Model_VertexMasks386_g170598;
				float4 break33_g170607 = _dryness_vert_mode;
				float temp_output_30_0_g170607 = ( break375_g170598.x * break33_g170607.x );
				float temp_output_29_0_g170607 = ( break375_g170598.y * break33_g170607.y );
				float temp_output_31_0_g170607 = ( break375_g170598.z * break33_g170607.z );
				float temp_output_28_0_g170607 = ( temp_output_30_0_g170607 + temp_output_29_0_g170607 + temp_output_31_0_g170607 + ( break375_g170598.w * break33_g170607.w ) );
				float clampResult17_g170608 = clamp( temp_output_28_0_g170607 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170616 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170616 = ( clampResult17_g170608 - temp_output_7_0_g170616 );
				float lerpResult452_g170598 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170616 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170611 = lerpResult452_g170598;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170611 = ( temp_output_6_0_g170611 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170611 = temp_output_6_0_g170611;
				#endif
				half Dryness_VertMask378_g170598 = staticSwitch14_g170611;
				half Dryness_MaskNoise291_g170598 = 1.0;
				half Custom_Mask411_g170598 = 1.0;
				float temp_output_7_0_g170618 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170618 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170598 * Dryness_MultiMask302_g170598 * Dryness_LumaMask301_g170598 * Dryness_VertMask378_g170598 * Dryness_MaskNoise291_g170598 * Dryness_GlobalMask352_g170598 * Custom_Mask411_g170598 ) - temp_output_7_0_g170618 );
				half Dryness_Mask329_g170598 = saturate( ( ( temp_output_9_0_g170618 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170598 = lerp( Visual_Albedo292_g170598 , ( lerpResult485_g170598 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170598 = lerpResult336_g170598;
				#else
				float3 staticSwitch356_g170598 = Visual_Albedo292_g170598;
				#endif
				half3 Final_Albedo331_g170598 = staticSwitch356_g170598;
				float3 In_Albedo3_g170601 = Final_Albedo331_g170598;
				float3 In_AlbedoRaw3_g170601 = Out_AlbedoRaw4_g170600;
				float2 In_NormalTS3_g170601 = Out_NormalTS4_g170600;
				float3 In_NormalWS3_g170601 = Out_NormalWS4_g170600;
				half4 Visual_Shader415_g170598 = Out_Shader4_g170600;
				float4 break438_g170598 = Visual_Shader415_g170598;
				float4 appendResult439_g170598 = (float4(break438_g170598.x , break438_g170598.y , break438_g170598.z , ( break438_g170598.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170598 = lerp( Visual_Shader415_g170598 , appendResult439_g170598 , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170598 = lerpResult427_g170598;
				#else
				float4 staticSwitch426_g170598 = Visual_Shader415_g170598;
				#endif
				half4 Final_Shader433_g170598 = staticSwitch426_g170598;
				float4 In_Shader3_g170601 = Final_Shader433_g170598;
				float4 In_Emissive3_g170601 = Out_Emissive4_g170600;
				float In_Grayscale3_g170601 = temp_output_280_12_g170598;
				float In_Luminosity3_g170601 = temp_output_280_15_g170598;
				float In_MultiMask3_g170601 = temp_output_280_11_g170598;
				float In_AlphaClip3_g170601 = Out_AlphaClip4_g170600;
				float In_AlphaFade3_g170601 = Out_AlphaFade4_g170600;
				float3 In_Translucency3_g170601 = Out_Translucency4_g170600;
				half Visual_Transmission416_g170598 = Out_Transmission4_g170600;
				float lerpResult421_g170598 = lerp( Visual_Transmission416_g170598 , ( Visual_Transmission416_g170598 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170598 = lerpResult421_g170598;
				#else
				float staticSwitch418_g170598 = Visual_Transmission416_g170598;
				#endif
				half Final_Transmission425_g170598 = staticSwitch418_g170598;
				float In_Transmission3_g170601 = Final_Transmission425_g170598;
				float In_Thickness3_g170601 = Out_Thickness4_g170600;
				float In_Diffusion3_g170601 = Out_Diffusion4_g170600;
				{
				Data3_g170601.Dummy = In_Dummy3_g170601;
				Data3_g170601.Albedo = In_Albedo3_g170601;
				Data3_g170601.AlbedoRaw = In_AlbedoRaw3_g170601;
				Data3_g170601.NormalTS = In_NormalTS3_g170601;
				Data3_g170601.NormalWS = In_NormalWS3_g170601;
				Data3_g170601.Shader = In_Shader3_g170601;
				Data3_g170601.Emissive= In_Emissive3_g170601;
				Data3_g170601.MultiMask = In_MultiMask3_g170601;
				Data3_g170601.Grayscale = In_Grayscale3_g170601;
				Data3_g170601.Luminosity = In_Luminosity3_g170601;
				Data3_g170601.AlphaClip = In_AlphaClip3_g170601;
				Data3_g170601.AlphaFade = In_AlphaFade3_g170601;
				Data3_g170601.Translucency = In_Translucency3_g170601;
				Data3_g170601.Transmission = In_Transmission3_g170601;
				Data3_g170601.Thickness = In_Thickness3_g170601;
				Data3_g170601.Diffusion = In_Diffusion3_g170601;
				}
				TVEVisualData Data4_g170623 = Data3_g170601;
				float Out_Dummy4_g170623 = 0;
				float3 Out_Albedo4_g170623 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170623 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170623 = float2( 0,0 );
				float3 Out_NormalWS4_g170623 = float3( 0,0,0 );
				float4 Out_Shader4_g170623 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170623 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170623 = 0;
				float Out_Grayscale4_g170623 = 0;
				float Out_Luminosity4_g170623 = 0;
				float Out_AlphaClip4_g170623 = 0;
				float Out_AlphaFade4_g170623 = 0;
				float3 Out_Translucency4_g170623 = float3( 0,0,0 );
				float Out_Transmission4_g170623 = 0;
				float Out_Thickness4_g170623 = 0;
				float Out_Diffusion4_g170623 = 0;
				{
				Out_Dummy4_g170623 = Data4_g170623.Dummy;
				Out_Albedo4_g170623 = Data4_g170623.Albedo;
				Out_AlbedoRaw4_g170623 = Data4_g170623.AlbedoRaw;
				Out_NormalTS4_g170623 = Data4_g170623.NormalTS;
				Out_NormalWS4_g170623 = Data4_g170623.NormalWS;
				Out_Shader4_g170623 = Data4_g170623.Shader;
				Out_Emissive4_g170623= Data4_g170623.Emissive;
				Out_MultiMask4_g170623 = Data4_g170623.MultiMask;
				Out_Grayscale4_g170623 = Data4_g170623.Grayscale;
				Out_Luminosity4_g170623= Data4_g170623.Luminosity;
				Out_AlphaClip4_g170623 = Data4_g170623.AlphaClip;
				Out_AlphaFade4_g170623 = Data4_g170623.AlphaFade;
				Out_Translucency4_g170623 = Data4_g170623.Translucency;
				Out_Transmission4_g170623 = Data4_g170623.Transmission;
				Out_Thickness4_g170623 = Data4_g170623.Thickness;
				Out_Diffusion4_g170623 = Data4_g170623.Diffusion;
				}
				half3 Visual_Albedo127_g170622 = Out_Albedo4_g170623;
				float4 vertexToFrag24_g170573 = packedInput.ase_texcoord10;
				half4 Interp_Data4335 = vertexToFrag24_g170573;
				float clampResult208_g170622 = clamp( (Interp_Data4335).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170622 = ( Visual_Albedo127_g170622 + ( ( Visual_Albedo127_g170622 * Visual_Albedo127_g170622 * 200.0 * _motion_highlight_color ) * clampResult208_g170622 ) );
				#else
				float3 staticSwitch214_g170622 = Visual_Albedo127_g170622;
				#endif
				half3 Final_Albedo160_g170622 = staticSwitch214_g170622;
				float3 In_Albedo3_g170624 = Final_Albedo160_g170622;
				float3 In_AlbedoRaw3_g170624 = Out_AlbedoRaw4_g170623;
				float2 In_NormalTS3_g170624 = Out_NormalTS4_g170623;
				float3 In_NormalWS3_g170624 = Out_NormalWS4_g170623;
				float4 In_Shader3_g170624 = Out_Shader4_g170623;
				float4 In_Emissive3_g170624 = Out_Emissive4_g170623;
				float In_Grayscale3_g170624 = Out_Grayscale4_g170623;
				float In_Luminosity3_g170624 = Out_Luminosity4_g170623;
				float In_MultiMask3_g170624 = Out_MultiMask4_g170623;
				float In_AlphaClip3_g170624 = Out_AlphaClip4_g170623;
				float In_AlphaFade3_g170624 = Out_AlphaFade4_g170623;
				float3 In_Translucency3_g170624 = Out_Translucency4_g170623;
				float In_Transmission3_g170624 = Out_Transmission4_g170623;
				float In_Thickness3_g170624 = Out_Thickness4_g170623;
				float In_Diffusion3_g170624 = Out_Diffusion4_g170623;
				{
				Data3_g170624.Dummy = In_Dummy3_g170624;
				Data3_g170624.Albedo = In_Albedo3_g170624;
				Data3_g170624.AlbedoRaw = In_AlbedoRaw3_g170624;
				Data3_g170624.NormalTS = In_NormalTS3_g170624;
				Data3_g170624.NormalWS = In_NormalWS3_g170624;
				Data3_g170624.Shader = In_Shader3_g170624;
				Data3_g170624.Emissive= In_Emissive3_g170624;
				Data3_g170624.MultiMask = In_MultiMask3_g170624;
				Data3_g170624.Grayscale = In_Grayscale3_g170624;
				Data3_g170624.Luminosity = In_Luminosity3_g170624;
				Data3_g170624.AlphaClip = In_AlphaClip3_g170624;
				Data3_g170624.AlphaFade = In_AlphaFade3_g170624;
				Data3_g170624.Translucency = In_Translucency3_g170624;
				Data3_g170624.Transmission = In_Transmission3_g170624;
				Data3_g170624.Thickness = In_Thickness3_g170624;
				Data3_g170624.Diffusion = In_Diffusion3_g170624;
				}
				TVEVisualData Data4_g170626 = Data3_g170624;
				float Out_Dummy4_g170626 = 0;
				float3 Out_Albedo4_g170626 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170626 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170626 = float2( 0,0 );
				float3 Out_NormalWS4_g170626 = float3( 0,0,0 );
				float4 Out_Shader4_g170626 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170626 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170626 = 0;
				float Out_Grayscale4_g170626 = 0;
				float Out_Luminosity4_g170626 = 0;
				float Out_AlphaClip4_g170626 = 0;
				float Out_AlphaFade4_g170626 = 0;
				float3 Out_Translucency4_g170626 = float3( 0,0,0 );
				float Out_Transmission4_g170626 = 0;
				float Out_Thickness4_g170626 = 0;
				float Out_Diffusion4_g170626 = 0;
				{
				Out_Dummy4_g170626 = Data4_g170626.Dummy;
				Out_Albedo4_g170626 = Data4_g170626.Albedo;
				Out_AlbedoRaw4_g170626 = Data4_g170626.AlbedoRaw;
				Out_NormalTS4_g170626 = Data4_g170626.NormalTS;
				Out_NormalWS4_g170626 = Data4_g170626.NormalWS;
				Out_Shader4_g170626 = Data4_g170626.Shader;
				Out_Emissive4_g170626= Data4_g170626.Emissive;
				Out_MultiMask4_g170626 = Data4_g170626.MultiMask;
				Out_Grayscale4_g170626 = Data4_g170626.Grayscale;
				Out_Luminosity4_g170626= Data4_g170626.Luminosity;
				Out_AlphaClip4_g170626 = Data4_g170626.AlphaClip;
				Out_AlphaFade4_g170626 = Data4_g170626.AlphaFade;
				Out_Translucency4_g170626 = Data4_g170626.Translucency;
				Out_Transmission4_g170626 = Data4_g170626.Transmission;
				Out_Thickness4_g170626 = Data4_g170626.Thickness;
				Out_Diffusion4_g170626 = Data4_g170626.Diffusion;
				}
				half3 Visual_Albedo127_g170625 = Out_Albedo4_g170626;
				float3 temp_output_622_0_g170625 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170629) = _OverlayAlbedoTex;
				float localFilterTexture19_g170641 = ( 0.0 );
				SamplerState SS19_g170641 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170641 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170641 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170641 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170641 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170641 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170641 = SamplerDefault19_g170641;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170641 = SamplerDefault19_g170641;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170641 = SamplerPoint19_g170641;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170641 = SamplerLow19_g170641;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170641 = SamplerMedium19_g170641;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170641 = SamplerHigh19_g170641;
				#endif
				}
				SamplerState Sampler238_g170629 = SS19_g170641;
				float4 temp_output_6_0_g170630 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170630 = ( temp_output_6_0_g170630 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170630 = temp_output_6_0_g170630;
				#endif
				half4 Overlay_Coords639_g170625 = staticSwitch14_g170630;
				float4 temp_output_37_0_g170629 = Overlay_Coords639_g170625;
				half4 Coords238_g170629 = temp_output_37_0_g170629;
				TVEModelData Data15_g170643 = Data16_g170201;
				float Out_Dummy15_g170643 = 0;
				float3 Out_PositionWS15_g170643 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170643 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170643 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170643 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170643 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170643 = float3( 0,0,0 );
				float4 Out_VertexData15_g170643 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170643 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170643 = Data15_g170643.Dummy;
				Out_PositionWS15_g170643 = Data15_g170643.PositionWS;
				Out_PositionWO15_g170643 = Data15_g170643.PositionWO;
				Out_PivotWS15_g170643 = Data15_g170643.PivotWS;
				Out_PivotWO15_g170643 = Data15_g170643.PivotWO;
				Out_NormalWS15_g170643 = Data15_g170643.NormalWS;
				Out_ViewDirWS15_g170643 = Data15_g170643.ViewDirWS;
				Out_VertexData15_g170643 = Data15_g170643.VertexData;
				Out_BoundsData15_g170643 = Data15_g170643.BoundsData;
				}
				half3 Model_PositionWO602_g170625 = Out_PositionWO15_g170643;
				float3 temp_output_279_0_g170629 = Model_PositionWO602_g170625;
				half3 WorldPosition238_g170629 = temp_output_279_0_g170629;
				half4 localSamplePlanar2D238_g170629 = SamplePlanar2D( Texture238_g170629 , Sampler238_g170629 , Coords238_g170629 , WorldPosition238_g170629 );
				TEXTURE2D(Texture246_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170629 = SS19_g170641;
				half4 Coords246_g170629 = temp_output_37_0_g170629;
				half3 WorldPosition246_g170629 = temp_output_279_0_g170629;
				half3 Model_NormalWS712_g170625 = Out_NormalWS15_g170643;
				float3 temp_output_280_0_g170629 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170629 = temp_output_280_0_g170629;
				half4 localSamplePlanar3D246_g170629 = SamplePlanar3D( Texture246_g170629 , Sampler246_g170629 , Coords246_g170629 , WorldPosition246_g170629 , WorldNormal246_g170629 );
				TEXTURE2D(Texture234_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170629 = SS19_g170641;
				float4 Coords234_g170629 = temp_output_37_0_g170629;
				float3 WorldPosition234_g170629 = temp_output_279_0_g170629;
				float4 localSampleStochastic2D234_g170629 = SampleStochastic2D( Texture234_g170629 , Sampler234_g170629 , Coords234_g170629 , WorldPosition234_g170629 );
				TEXTURE2D(Texture263_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170629 = SS19_g170641;
				half4 Coords263_g170629 = temp_output_37_0_g170629;
				half3 WorldPosition263_g170629 = temp_output_279_0_g170629;
				half3 WorldNormal263_g170629 = temp_output_280_0_g170629;
				half4 localSampleStochastic3D263_g170629 = SampleStochastic3D( Texture263_g170629 , Sampler263_g170629 , Coords263_g170629 , WorldPosition263_g170629 , WorldNormal263_g170629 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170625 = localSamplePlanar2D238_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170625 = localSamplePlanar3D246_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170625 = localSampleStochastic2D234_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170625 = localSampleStochastic3D263_g170629;
				#else
				float4 staticSwitch676_g170625 = localSamplePlanar2D238_g170629;
				#endif
				half3 Overlay_Albedo526_g170625 = (staticSwitch676_g170625).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170625 = ( temp_output_622_0_g170625 * Overlay_Albedo526_g170625 );
				#else
				float3 staticSwitch578_g170625 = temp_output_622_0_g170625;
				#endif
				float3 temp_output_6_0_g170644 = staticSwitch578_g170625;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170644 = ( temp_output_6_0_g170644 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170644 = temp_output_6_0_g170644;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				TEXTURE2D(Texture246_g170633) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170633 = sampler_Linear_Repeat;
				float4 appendResult863_g170625 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170633 = appendResult863_g170625;
				half4 Coords246_g170633 = temp_output_37_0_g170633;
				float3 temp_output_279_0_g170633 = Model_PositionWO602_g170625;
				half3 WorldPosition246_g170633 = temp_output_279_0_g170633;
				float3 temp_output_280_0_g170633 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170633 = temp_output_280_0_g170633;
				half4 localSamplePlanar3D246_g170633 = SamplePlanar3D( Texture246_g170633 , Sampler246_g170633 , Coords246_g170633 , WorldPosition246_g170633 , WorldNormal246_g170633 );
				half Overlay_GlitterTex854_g170625 = (localSamplePlanar3D246_g170633).x;
				half3 Model_PositionWS879_g170625 = Out_PositionWS15_g170643;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170625 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170625 * 1.0 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170625 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170625 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170625 = staticSwitch868_g170625;
				half Overlay_TexMask908_g170625 = 1.0;
				float3 temp_output_739_21_g170625 = Out_NormalWS4_g170626;
				half3 Visual_NormalWS749_g170625 = temp_output_739_21_g170625;
				float clampResult17_g170650 = clamp( saturate( (Visual_NormalWS749_g170625).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170654 = _OverlayProjRemap.x;
				float temp_output_9_0_g170654 = ( clampResult17_g170650 - temp_output_7_0_g170654 );
				float lerpResult842_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170654 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170625 = lerpResult842_g170625;
				float temp_output_739_15_g170625 = Out_Luminosity4_g170626;
				half Visual_Luminosity654_g170625 = temp_output_739_15_g170625;
				float clampResult17_g170658 = clamp( Visual_Luminosity654_g170625 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170659 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170659 = ( clampResult17_g170658 - temp_output_7_0_g170659 );
				float lerpResult587_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170659 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170625 = lerpResult587_g170625;
				half4 Model_VertexMasks791_g170625 = Out_VertexData15_g170643;
				float4 break792_g170625 = Model_VertexMasks791_g170625;
				float4 break33_g170645 = _overlay_vert_mode;
				float temp_output_30_0_g170645 = ( break792_g170625.x * break33_g170645.x );
				float temp_output_29_0_g170645 = ( break792_g170625.y * break33_g170645.y );
				float temp_output_31_0_g170645 = ( break792_g170625.z * break33_g170645.z );
				float temp_output_28_0_g170645 = ( temp_output_30_0_g170645 + temp_output_29_0_g170645 + temp_output_31_0_g170645 + ( break792_g170625.w * break33_g170645.w ) );
				float clampResult17_g170646 = clamp( temp_output_28_0_g170645 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170655 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170655 = ( clampResult17_g170646 - temp_output_7_0_g170655 );
				float lerpResult881_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170655 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170651 = lerpResult881_g170625;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170651 = ( temp_output_6_0_g170651 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170651 = temp_output_6_0_g170651;
				#endif
				half Overlay_VertMask801_g170625 = staticSwitch14_g170651;
				half Overlay_MaskNoise427_g170625 = 1.0;
				TVEGlobalData Data15_g170627 = Data204_g170214;
				float Out_Dummy15_g170627 = 0;
				float4 Out_CoatParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170627 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170627 = Data15_g170627.Dummy;
				Out_CoatParams15_g170627 = Data15_g170627.CoatParams;
				Out_PaintParams15_g170627 = Data15_g170627.PaintParams;
				Out_GlowParams15_g170627 = Data15_g170627.GlowParams;
				Out_AtmoParams15_g170627= Data15_g170627.AtmoParams;
				Out_FadeParams15_g170627= Data15_g170627.FadeParams;
				Out_FormParams15_g170627 = Data15_g170627.FormParams;
				Out_FlowParams15_g170627 = Data15_g170627.FlowParams;
				}
				half4 Global_AtmoParams516_g170625 = Out_AtmoParams15_g170627;
				float temp_output_6_0_g170660 = (Global_AtmoParams516_g170625).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170660 = ( temp_output_6_0_g170660 + ( _OverlayElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170660 = temp_output_6_0_g170660;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170625 = staticSwitch14_g170660;
				#else
				float staticSwitch705_g170625 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170625 = lerp( 1.0 , ( staticSwitch705_g170625 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170625 = lerpResult937_g170625;
				half Custom_Mask646_g170625 = 1.0;
				float temp_output_7_0_g170657 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170657 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170625 * Overlay_MaskProj457_g170625 * Overlay_MaskLuma438_g170625 * Overlay_VertMask801_g170625 * Overlay_MaskNoise427_g170625 * Overlay_MaskGlobal429_g170625 * Custom_Mask646_g170625 ) - temp_output_7_0_g170657 );
				half Overlay_Mask494_g170625 = saturate( ( ( temp_output_9_0_g170657 / ( _OverlayBlendRemap.y - temp_output_7_0_g170657 ) ) + 0.0001 ) );
				float3 lerpResult467_g170625 = lerp( Visual_Albedo127_g170625 , ( staticSwitch14_g170644 + Overlay_GlitterColor865_g170625 ) , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170625 = lerpResult467_g170625;
				#else
				float3 staticSwitch577_g170625 = Visual_Albedo127_g170625;
				#endif
				half3 Final_Albedo493_g170625 = staticSwitch577_g170625;
				float3 In_Albedo3_g170628 = Final_Albedo493_g170625;
				float3 In_AlbedoRaw3_g170628 = Out_AlbedoRaw4_g170626;
				half2 Visual_NormalTS535_g170625 = Out_NormalTS4_g170626;
				TEXTURE2D(Texture238_g170631) = _OverlayNormalTex;
				float localFilterTexture29_g170642 = ( 0.0 );
				SamplerState SS29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170642 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170642 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170642 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170642 = SamplerDefault29_g170642;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170642 = SamplerDefault29_g170642;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170642 = SamplerPoint29_g170642;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170642 = SamplerLow29_g170642;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170642 = SamplerMedium29_g170642;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170642 = SamplerHigh29_g170642;
				#endif
				}
				SamplerState Sampler238_g170631 = SS29_g170642;
				float4 temp_output_37_0_g170631 = Overlay_Coords639_g170625;
				half4 Coords238_g170631 = temp_output_37_0_g170631;
				float3 temp_output_279_0_g170631 = Model_PositionWO602_g170625;
				half3 WorldPosition238_g170631 = temp_output_279_0_g170631;
				half4 localSamplePlanar2D238_g170631 = SamplePlanar2D( Texture238_g170631 , Sampler238_g170631 , Coords238_g170631 , WorldPosition238_g170631 );
				TEXTURE2D(Texture246_g170631) = _OverlayNormalTex;
				SamplerState Sampler246_g170631 = SS29_g170642;
				half4 Coords246_g170631 = temp_output_37_0_g170631;
				half3 WorldPosition246_g170631 = temp_output_279_0_g170631;
				float3 temp_output_280_0_g170631 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170631 = temp_output_280_0_g170631;
				half4 localSamplePlanar3D246_g170631 = SamplePlanar3D( Texture246_g170631 , Sampler246_g170631 , Coords246_g170631 , WorldPosition246_g170631 , WorldNormal246_g170631 );
				TEXTURE2D(Texture234_g170631) = _OverlayNormalTex;
				SamplerState Sampler234_g170631 = SS29_g170642;
				float4 Coords234_g170631 = temp_output_37_0_g170631;
				float3 WorldPosition234_g170631 = temp_output_279_0_g170631;
				float4 localSampleStochastic2D234_g170631 = SampleStochastic2D( Texture234_g170631 , Sampler234_g170631 , Coords234_g170631 , WorldPosition234_g170631 );
				TEXTURE2D(Texture263_g170631) = _OverlayNormalTex;
				SamplerState Sampler263_g170631 = SS29_g170642;
				half4 Coords263_g170631 = temp_output_37_0_g170631;
				half3 WorldPosition263_g170631 = temp_output_279_0_g170631;
				half3 WorldNormal263_g170631 = temp_output_280_0_g170631;
				half4 localSampleStochastic3D263_g170631 = SampleStochastic3D( Texture263_g170631 , Sampler263_g170631 , Coords263_g170631 , WorldPosition263_g170631 , WorldNormal263_g170631 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170625 = localSamplePlanar2D238_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170625 = localSamplePlanar3D246_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170625 = localSampleStochastic2D234_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170625 = localSampleStochastic3D263_g170631;
				#else
				float4 staticSwitch686_g170625 = localSamplePlanar2D238_g170631;
				#endif
				half4 Normal_Packed45_g170635 = staticSwitch686_g170625;
				float2 appendResult58_g170635 = (float2(( (Normal_Packed45_g170635).x * (Normal_Packed45_g170635).w ) , (Normal_Packed45_g170635).y));
				half2 Normal_Default50_g170635 = appendResult58_g170635;
				half2 Normal_ASTC41_g170635 = (Normal_Packed45_g170635).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170635 = Normal_ASTC41_g170635;
				#else
				float2 staticSwitch38_g170635 = Normal_Default50_g170635;
				#endif
				half2 Normal_NO_DTX544_g170635 = (Normal_Packed45_g170635).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170635 = Normal_NO_DTX544_g170635;
				#else
				float2 staticSwitch37_g170635 = staticSwitch38_g170635;
				#endif
				half2 Normal_Planar45_g170634 = (staticSwitch37_g170635*2.0 + -1.0);
				float2 break71_g170634 = Normal_Planar45_g170634;
				float3 appendResult72_g170634 = (float3(break71_g170634.x , 0.0 , break71_g170634.y));
				half2 Overlay_Normal528_g170625 = (mul( ase_worldToTangent, appendResult72_g170634 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170625 = Overlay_Normal528_g170625;
				#else
				float2 staticSwitch579_g170625 = Visual_NormalTS535_g170625;
				#endif
				float2 lerpResult551_g170625 = lerp( Visual_NormalTS535_g170625 , ( staticSwitch579_g170625 * _OverlayNormalValue ) , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170625 = lerpResult551_g170625;
				#else
				float2 staticSwitch583_g170625 = Visual_NormalTS535_g170625;
				#endif
				half2 Final_NormalTS499_g170625 = staticSwitch583_g170625;
				float2 In_NormalTS3_g170628 = Final_NormalTS499_g170625;
				float3 In_NormalWS3_g170628 = temp_output_739_21_g170625;
				half4 Visual_Masks536_g170625 = Out_Shader4_g170626;
				float4 appendResult585_g170625 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170625 = lerp( Visual_Masks536_g170625 , appendResult585_g170625 , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170625 = lerpResult584_g170625;
				#else
				float4 staticSwitch586_g170625 = Visual_Masks536_g170625;
				#endif
				half4 Final_Masks482_g170625 = staticSwitch586_g170625;
				float4 In_Shader3_g170628 = Final_Masks482_g170625;
				float4 In_Emissive3_g170628 = Out_Emissive4_g170626;
				float temp_output_739_12_g170625 = Out_Grayscale4_g170626;
				float In_Grayscale3_g170628 = temp_output_739_12_g170625;
				float In_Luminosity3_g170628 = temp_output_739_15_g170625;
				float In_MultiMask3_g170628 = Out_MultiMask4_g170626;
				float In_AlphaClip3_g170628 = Out_AlphaClip4_g170626;
				float In_AlphaFade3_g170628 = Out_AlphaFade4_g170626;
				float3 In_Translucency3_g170628 = Out_Translucency4_g170626;
				half Visual_Transmission699_g170625 = Out_Transmission4_g170626;
				float lerpResult746_g170625 = lerp( Visual_Transmission699_g170625 , ( Visual_Transmission699_g170625 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170625 * Overlay_MaskNoise427_g170625 * Overlay_MaskGlobal429_g170625 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170625 = lerpResult746_g170625;
				#else
				float staticSwitch703_g170625 = Visual_Transmission699_g170625;
				#endif
				half Final_Transmission702_g170625 = staticSwitch703_g170625;
				float In_Transmission3_g170628 = Final_Transmission702_g170625;
				float In_Thickness3_g170628 = Out_Thickness4_g170626;
				float In_Diffusion3_g170628 = Out_Diffusion4_g170626;
				{
				Data3_g170628.Dummy = In_Dummy3_g170628;
				Data3_g170628.Albedo = In_Albedo3_g170628;
				Data3_g170628.AlbedoRaw = In_AlbedoRaw3_g170628;
				Data3_g170628.NormalTS = In_NormalTS3_g170628;
				Data3_g170628.NormalWS = In_NormalWS3_g170628;
				Data3_g170628.Shader = In_Shader3_g170628;
				Data3_g170628.Emissive= In_Emissive3_g170628;
				Data3_g170628.MultiMask = In_MultiMask3_g170628;
				Data3_g170628.Grayscale = In_Grayscale3_g170628;
				Data3_g170628.Luminosity = In_Luminosity3_g170628;
				Data3_g170628.AlphaClip = In_AlphaClip3_g170628;
				Data3_g170628.AlphaFade = In_AlphaFade3_g170628;
				Data3_g170628.Translucency = In_Translucency3_g170628;
				Data3_g170628.Transmission = In_Transmission3_g170628;
				Data3_g170628.Thickness = In_Thickness3_g170628;
				Data3_g170628.Diffusion = In_Diffusion3_g170628;
				}
				TVEVisualData Data4_g170663 = Data3_g170628;
				float Out_Dummy4_g170663 = 0;
				float3 Out_Albedo4_g170663 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170663 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170663 = float2( 0,0 );
				float3 Out_NormalWS4_g170663 = float3( 0,0,0 );
				float4 Out_Shader4_g170663 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170663 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170663 = 0;
				float Out_Grayscale4_g170663 = 0;
				float Out_Luminosity4_g170663 = 0;
				float Out_AlphaClip4_g170663 = 0;
				float Out_AlphaFade4_g170663 = 0;
				float3 Out_Translucency4_g170663 = float3( 0,0,0 );
				float Out_Transmission4_g170663 = 0;
				float Out_Thickness4_g170663 = 0;
				float Out_Diffusion4_g170663 = 0;
				{
				Out_Dummy4_g170663 = Data4_g170663.Dummy;
				Out_Albedo4_g170663 = Data4_g170663.Albedo;
				Out_AlbedoRaw4_g170663 = Data4_g170663.AlbedoRaw;
				Out_NormalTS4_g170663 = Data4_g170663.NormalTS;
				Out_NormalWS4_g170663 = Data4_g170663.NormalWS;
				Out_Shader4_g170663 = Data4_g170663.Shader;
				Out_Emissive4_g170663= Data4_g170663.Emissive;
				Out_MultiMask4_g170663 = Data4_g170663.MultiMask;
				Out_Grayscale4_g170663 = Data4_g170663.Grayscale;
				Out_Luminosity4_g170663= Data4_g170663.Luminosity;
				Out_AlphaClip4_g170663 = Data4_g170663.AlphaClip;
				Out_AlphaFade4_g170663 = Data4_g170663.AlphaFade;
				Out_Translucency4_g170663 = Data4_g170663.Translucency;
				Out_Transmission4_g170663 = Data4_g170663.Transmission;
				Out_Thickness4_g170663 = Data4_g170663.Thickness;
				Out_Diffusion4_g170663 = Data4_g170663.Diffusion;
				}
				half3 Visual_Albedo127_g170662 = Out_Albedo4_g170663;
				TVEGlobalData Data15_g170668 = Data204_g170214;
				float Out_Dummy15_g170668 = 0;
				float4 Out_CoatParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170668 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170668 = Data15_g170668.Dummy;
				Out_CoatParams15_g170668 = Data15_g170668.CoatParams;
				Out_PaintParams15_g170668 = Data15_g170668.PaintParams;
				Out_GlowParams15_g170668 = Data15_g170668.GlowParams;
				Out_AtmoParams15_g170668= Data15_g170668.AtmoParams;
				Out_FadeParams15_g170668= Data15_g170668.FadeParams;
				Out_FormParams15_g170668 = Data15_g170668.FormParams;
				Out_FlowParams15_g170668 = Data15_g170668.FlowParams;
				}
				half4 Global_AtmoParams516_g170662 = Out_AtmoParams15_g170668;
				float4 temp_output_6_0_g170689 = Global_AtmoParams516_g170662;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170689 = ( temp_output_6_0_g170689 + ( _WetnessElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170689 = temp_output_6_0_g170689;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170662 = staticSwitch14_g170689;
				#else
				float4 staticSwitch663_g170662 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170662 = lerp( float2( 1,1 ) , (( staticSwitch663_g170662 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170662 = lerpResult1121_g170662;
				half Global_Wetness429_g170662 = break1123_g170662.x;
				half Wetness_Value1042_g170662 = ( _WetnessIntensityValue * Global_Wetness429_g170662 );
				TVEModelData Data15_g170674 = Data16_g170201;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				}
				half4 Model_VertexData1030_g170662 = Out_VertexData15_g170674;
				float4 break1019_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170677 = _wetness_vert_mode;
				float temp_output_30_0_g170677 = ( break1019_g170662.x * break33_g170677.x );
				float temp_output_29_0_g170677 = ( break1019_g170662.y * break33_g170677.y );
				float temp_output_31_0_g170677 = ( break1019_g170662.z * break33_g170677.z );
				float temp_output_28_0_g170677 = ( temp_output_30_0_g170677 + temp_output_29_0_g170677 + temp_output_31_0_g170677 + ( break1019_g170662.w * break33_g170677.w ) );
				float clampResult17_g170676 = clamp( temp_output_28_0_g170677 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170685 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170685 = ( clampResult17_g170676 - temp_output_7_0_g170685 );
				float lerpResult1026_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170685 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170678 = lerpResult1026_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170678 = ( temp_output_6_0_g170678 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170678 = temp_output_6_0_g170678;
				#endif
				float temp_output_1025_0_g170662 = staticSwitch14_g170678;
				half Wetness_VertMask1024_g170662 = temp_output_1025_0_g170662;
				float temp_output_1043_0_g170662 = ( Wetness_Value1042_g170662 * Wetness_VertMask1024_g170662 );
				half Wetness_Mask866_g170662 = temp_output_1043_0_g170662;
				float4 break1083_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170680 = _wetness_water_vert_mode;
				float temp_output_30_0_g170680 = ( break1083_g170662.x * break33_g170680.x );
				float temp_output_29_0_g170680 = ( break1083_g170662.y * break33_g170680.y );
				float temp_output_31_0_g170680 = ( break1083_g170662.z * break33_g170680.z );
				float temp_output_28_0_g170680 = ( temp_output_30_0_g170680 + temp_output_29_0_g170680 + temp_output_31_0_g170680 + ( break1083_g170662.w * break33_g170680.w ) );
				float clampResult17_g170679 = clamp( temp_output_28_0_g170680 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170686 = ( clampResult17_g170679 - temp_output_7_0_g170686 );
				float lerpResult1089_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170686 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170681 = lerpResult1089_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170681 = ( temp_output_6_0_g170681 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170681 = temp_output_6_0_g170681;
				#endif
				float temp_output_1091_0_g170662 = staticSwitch14_g170681;
				half Water_VertMask1094_g170662 = temp_output_1091_0_g170662;
				half4 Visual_Masks536_g170662 = Out_Shader4_g170663;
				float lerpResult1013_g170662 = lerp( 1.0 , (Visual_Masks536_g170662).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170662 = lerpResult1013_g170662;
				float clampResult17_g170675 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170662 * Water_VertMask1094_g170662 ) - Water_HeightMask782_g170662 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170688 = ( clampResult17_g170675 - temp_output_7_0_g170688 );
				half3 Model_NormalWS798_g170662 = Out_NormalWS15_g170674;
				float temp_output_786_0_g170662 = saturate( (Model_NormalWS798_g170662).y );
				half Wetness_ProjMask790_g170662 = temp_output_786_0_g170662;
				half Water_Mask760_g170662 = ( saturate( ( ( temp_output_9_0_g170688 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170662 );
				float3 lerpResult918_g170662 = lerp( Visual_Albedo127_g170662 , ( Visual_Albedo127_g170662 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170662);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170662 = lerpResult918_g170662;
				#else
				float3 staticSwitch946_g170662 = Visual_Albedo127_g170662;
				#endif
				float3 lerpResult768_g170662 = lerp( staticSwitch946_g170662 , ( staticSwitch946_g170662 * staticSwitch946_g170662 ) , _WetnessContrastValue);
				float3 lerpResult651_g170662 = lerp( Visual_Albedo127_g170662 , lerpResult768_g170662 , Wetness_Mask866_g170662);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170662 = lerpResult651_g170662;
				#else
				float3 staticSwitch577_g170662 = Visual_Albedo127_g170662;
				#endif
				half3 Final_Albedo493_g170662 = staticSwitch577_g170662;
				float3 In_Albedo3_g170664 = Final_Albedo493_g170662;
				float3 In_AlbedoRaw3_g170664 = Out_AlbedoRaw4_g170663;
				half2 Visual_Normal535_g170662 = Out_NormalTS4_g170663;
				float lerpResult877_g170662 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170662 * Water_Mask760_g170662 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170662 = ( Visual_Normal535_g170662 * lerpResult877_g170662 );
				#else
				float2 staticSwitch957_g170662 = Visual_Normal535_g170662;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				TEXTURE2D(Texture238_g170672) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170672 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170662 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170672 = appendResult924_g170662;
				half4 Coords238_g170672 = temp_output_37_0_g170672;
				half3 Model_PositionWO602_g170662 = Out_PositionWO15_g170674;
				float3 temp_output_279_0_g170672 = Model_PositionWO602_g170662;
				half3 WorldPosition238_g170672 = temp_output_279_0_g170672;
				half4 localSamplePlanar2D238_g170672 = SamplePlanar2D( Texture238_g170672 , Sampler238_g170672 , Coords238_g170672 , WorldPosition238_g170672 );
				float4 temp_output_1010_0_g170662 = localSamplePlanar2D238_g170672;
				half2 Rain_DropsNormal919_g170662 = (temp_output_1010_0_g170662).zw;
				float2 temp_output_903_0_g170662 = (Rain_DropsNormal919_g170662*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170662 = (temp_output_1010_0_g170662).xy;
				float2 lerpResult904_g170662 = lerp( temp_output_903_0_g170662 , (Rain_RingsNormal713_g170662*2.0 + -1.0) , ( Water_Mask760_g170662 * Water_Mask760_g170662 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170662 = lerpResult904_g170662;
				#else
				float2 staticSwitch960_g170662 = temp_output_903_0_g170662;
				#endif
				half2 Rain_Drops1002_g170662 = ( staticSwitch960_g170662 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170662 = Out_PositionWS15_g170674;
				half Global_Rain955_g170662 = break1123_g170662.y;
				half Rain_Value1067_g170662 = Global_Rain955_g170662;
				float4 break1097_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170683 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170683 = ( break1097_g170662.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1097_g170662.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1097_g170662.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1097_g170662.w * break33_g170683.w ) );
				float clampResult17_g170682 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170687 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170687 = ( clampResult17_g170682 - temp_output_7_0_g170687 );
				float lerpResult1100_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170687 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170684 = lerpResult1100_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				float temp_output_1101_0_g170662 = staticSwitch14_g170684;
				half Rain_VertMask1108_g170662 = temp_output_1101_0_g170662;
				half Rain_Mask999_g170662 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170662 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170662 * Rain_VertMask1108_g170662 );
				half2 Normal_Planar45_g170671 = ( Rain_Drops1002_g170662 * Rain_Mask999_g170662 * Wetness_ProjMask790_g170662 );
				float2 break71_g170671 = Normal_Planar45_g170671;
				float3 appendResult72_g170671 = (float3(break71_g170671.x , 0.0 , break71_g170671.y));
				half2 Wetness_Normal526_g170662 = (mul( ase_worldToTangent, appendResult72_g170671 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170662 = Wetness_Normal526_g170662;
				#else
				float2 staticSwitch583_g170662 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170662 = ( staticSwitch957_g170662 + staticSwitch583_g170662 );
				#else
				float2 staticSwitch774_g170662 = Visual_Normal535_g170662;
				#endif
				half2 Final_Normal499_g170662 = staticSwitch774_g170662;
				float2 In_NormalTS3_g170664 = Final_Normal499_g170662;
				float3 In_NormalWS3_g170664 = Out_NormalWS4_g170663;
				float4 break658_g170662 = Visual_Masks536_g170662;
				float temp_output_935_0_g170662 = ( Wetness_Mask866_g170662 * _WetnessSmoothnessValue );
				float lerpResult941_g170662 = lerp( temp_output_935_0_g170662 , 2.0 , Water_Mask760_g170662);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170662 = lerpResult941_g170662;
				#else
				float staticSwitch959_g170662 = temp_output_935_0_g170662;
				#endif
				float4 appendResult661_g170662 = (float4(break658_g170662.x , break658_g170662.y , break658_g170662.z , saturate( ( break658_g170662.w + staticSwitch959_g170662 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170662 = appendResult661_g170662;
				#else
				float4 staticSwitch586_g170662 = Visual_Masks536_g170662;
				#endif
				half4 Final_Masks482_g170662 = staticSwitch586_g170662;
				float4 In_Shader3_g170664 = Final_Masks482_g170662;
				float4 In_Emissive3_g170664 = Out_Emissive4_g170663;
				float In_Grayscale3_g170664 = Out_Grayscale4_g170663;
				float In_Luminosity3_g170664 = Out_Luminosity4_g170663;
				float In_MultiMask3_g170664 = Out_MultiMask4_g170663;
				float In_AlphaClip3_g170664 = Out_AlphaClip4_g170663;
				float In_AlphaFade3_g170664 = Out_AlphaFade4_g170663;
				float3 In_Translucency3_g170664 = Out_Translucency4_g170663;
				float In_Transmission3_g170664 = Out_Transmission4_g170663;
				float In_Thickness3_g170664 = Out_Thickness4_g170663;
				float In_Diffusion3_g170664 = Out_Diffusion4_g170663;
				{
				Data3_g170664.Dummy = In_Dummy3_g170664;
				Data3_g170664.Albedo = In_Albedo3_g170664;
				Data3_g170664.AlbedoRaw = In_AlbedoRaw3_g170664;
				Data3_g170664.NormalTS = In_NormalTS3_g170664;
				Data3_g170664.NormalWS = In_NormalWS3_g170664;
				Data3_g170664.Shader = In_Shader3_g170664;
				Data3_g170664.Emissive= In_Emissive3_g170664;
				Data3_g170664.MultiMask = In_MultiMask3_g170664;
				Data3_g170664.Grayscale = In_Grayscale3_g170664;
				Data3_g170664.Luminosity = In_Luminosity3_g170664;
				Data3_g170664.AlphaClip = In_AlphaClip3_g170664;
				Data3_g170664.AlphaFade = In_AlphaFade3_g170664;
				Data3_g170664.Translucency = In_Translucency3_g170664;
				Data3_g170664.Transmission = In_Transmission3_g170664;
				Data3_g170664.Thickness = In_Thickness3_g170664;
				Data3_g170664.Diffusion = In_Diffusion3_g170664;
				}
				TVEVisualData Data4_g170694 = Data3_g170664;
				float Out_Dummy4_g170694 = 0;
				float3 Out_Albedo4_g170694 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170694 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170694 = float2( 0,0 );
				float3 Out_NormalWS4_g170694 = float3( 0,0,0 );
				float4 Out_Shader4_g170694 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170694 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170694 = 0;
				float Out_Grayscale4_g170694 = 0;
				float Out_Luminosity4_g170694 = 0;
				float Out_AlphaClip4_g170694 = 0;
				float Out_AlphaFade4_g170694 = 0;
				float3 Out_Translucency4_g170694 = float3( 0,0,0 );
				float Out_Transmission4_g170694 = 0;
				float Out_Thickness4_g170694 = 0;
				float Out_Diffusion4_g170694 = 0;
				{
				Out_Dummy4_g170694 = Data4_g170694.Dummy;
				Out_Albedo4_g170694 = Data4_g170694.Albedo;
				Out_AlbedoRaw4_g170694 = Data4_g170694.AlbedoRaw;
				Out_NormalTS4_g170694 = Data4_g170694.NormalTS;
				Out_NormalWS4_g170694 = Data4_g170694.NormalWS;
				Out_Shader4_g170694 = Data4_g170694.Shader;
				Out_Emissive4_g170694= Data4_g170694.Emissive;
				Out_MultiMask4_g170694 = Data4_g170694.MultiMask;
				Out_Grayscale4_g170694 = Data4_g170694.Grayscale;
				Out_Luminosity4_g170694= Data4_g170694.Luminosity;
				Out_AlphaClip4_g170694 = Data4_g170694.AlphaClip;
				Out_AlphaFade4_g170694 = Data4_g170694.AlphaFade;
				Out_Translucency4_g170694 = Data4_g170694.Translucency;
				Out_Transmission4_g170694 = Data4_g170694.Transmission;
				Out_Thickness4_g170694 = Data4_g170694.Thickness;
				Out_Diffusion4_g170694 = Data4_g170694.Diffusion;
				}
				float3 In_Albedo3_g170692 = Out_Albedo4_g170694;
				float3 In_AlbedoRaw3_g170692 = Out_AlbedoRaw4_g170694;
				float2 In_NormalTS3_g170692 = Out_NormalTS4_g170694;
				float3 In_NormalWS3_g170692 = Out_NormalWS4_g170694;
				float4 In_Shader3_g170692 = Out_Shader4_g170694;
				float4 In_Emissive3_g170692 = Out_Emissive4_g170694;
				float In_Grayscale3_g170692 = Out_Grayscale4_g170694;
				float In_Luminosity3_g170692 = Out_Luminosity4_g170694;
				float temp_output_836_11_g170691 = Out_MultiMask4_g170694;
				float In_MultiMask3_g170692 = temp_output_836_11_g170691;
				half Visual_AlphaClip667_g170691 = Out_AlphaClip4_g170694;
				half Input_True57_g170701 = Visual_AlphaClip667_g170691;
				half True36_g170701 = Input_True57_g170701;
				TVEGlobalData Data15_g170693 = Data204_g170214;
				float Out_Dummy15_g170693 = 0;
				float4 Out_CoatParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170693 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170693 = Data15_g170693.Dummy;
				Out_CoatParams15_g170693 = Data15_g170693.CoatParams;
				Out_PaintParams15_g170693 = Data15_g170693.PaintParams;
				Out_GlowParams15_g170693 = Data15_g170693.GlowParams;
				Out_AtmoParams15_g170693= Data15_g170693.AtmoParams;
				Out_FadeParams15_g170693= Data15_g170693.FadeParams;
				Out_FormParams15_g170693 = Data15_g170693.FormParams;
				Out_FlowParams15_g170693 = Data15_g170693.FlowParams;
				}
				half4 Global_FadeParams516_g170691 = Out_FadeParams15_g170693;
				float temp_output_6_0_g170704 = saturate( (Global_FadeParams516_g170691).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170704 = ( temp_output_6_0_g170704 + ( _CutoutElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170704 = temp_output_6_0_g170704;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170691 = staticSwitch14_g170704;
				#else
				float staticSwitch663_g170691 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170691 = lerp( 1.0 , ( staticSwitch663_g170691 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170691 = lerpResult843_g170691;
				float lerpResult811_g170691 = lerp( 1.0 , Visual_AlphaClip667_g170691 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170691 = lerpResult811_g170691;
				TVEModelData Data15_g170695 = Data16_g170201;
				float Out_Dummy15_g170695 = 0;
				float3 Out_PositionWS15_g170695 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170695 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170695 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170695 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170695 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170695 = float3( 0,0,0 );
				float4 Out_VertexData15_g170695 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170695 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170695 = Data15_g170695.Dummy;
				Out_PositionWS15_g170695 = Data15_g170695.PositionWS;
				Out_PositionWO15_g170695 = Data15_g170695.PositionWO;
				Out_PivotWS15_g170695 = Data15_g170695.PivotWS;
				Out_PivotWO15_g170695 = Data15_g170695.PivotWO;
				Out_NormalWS15_g170695 = Data15_g170695.NormalWS;
				Out_ViewDirWS15_g170695 = Data15_g170695.ViewDirWS;
				Out_VertexData15_g170695 = Data15_g170695.VertexData;
				Out_BoundsData15_g170695 = Data15_g170695.BoundsData;
				}
				half3 Model_PositionWO602_g170691 = Out_PositionWO15_g170695;
				float4 tex3DNode60_g170698 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170691 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170691 = lerp( 1.0 , tex3DNode60_g170698.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170691 = lerpResult673_g170691;
				half4 Model_VertexMasks752_g170691 = Out_VertexData15_g170695;
				float4 break755_g170691 = Model_VertexMasks752_g170691;
				float4 break33_g170696 = _cutout_vert_mode;
				float temp_output_30_0_g170696 = ( break755_g170691.x * break33_g170696.x );
				float temp_output_29_0_g170696 = ( break755_g170691.y * break33_g170696.y );
				float temp_output_31_0_g170696 = ( break755_g170691.z * break33_g170696.z );
				float temp_output_28_0_g170696 = ( temp_output_30_0_g170696 + temp_output_29_0_g170696 + temp_output_31_0_g170696 + ( break755_g170691.w * break33_g170696.w ) );
				float clampResult17_g170697 = clamp( temp_output_28_0_g170696 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170703 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170703 = ( clampResult17_g170697 - temp_output_7_0_g170703 );
				float lerpResult820_g170691 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170703 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170700 = lerpResult820_g170691;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170700 = ( temp_output_6_0_g170700 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170700 = temp_output_6_0_g170700;
				#endif
				float temp_output_801_0_g170691 = staticSwitch14_g170700;
				half Local_VertMask766_g170691 = temp_output_801_0_g170691;
				half Visual_MultiMask671_g170691 = temp_output_836_11_g170691;
				float lerpResult683_g170691 = lerp( 1.0 , Visual_MultiMask671_g170691 , _CutoutMultiValue);
				half Local_MultiMask685_g170691 = lerpResult683_g170691;
				float lerpResult728_g170691 = lerp( Visual_AlphaClip667_g170691 , min( Visual_AlphaClip667_g170691 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170691 ) - ( Local_AlphaMask814_g170691 * Local_NoiseMask678_g170691 * Local_VertMask766_g170691 ) ) ) ) , Local_MultiMask685_g170691);
				half Local_AlphaClip784_g170691 = lerpResult728_g170691;
				half Input_False58_g170701 = Local_AlphaClip784_g170691;
				half False36_g170701 = Input_False58_g170701;
				half localShadowPassCheck36_g170701 = ShadowPassCheck36_g170701( True36_g170701 , False36_g170701 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170691 = Local_AlphaClip784_g170691;
				#else
				float staticSwitch791_g170691 = localShadowPassCheck36_g170701;
				#endif
				float temp_output_6_0_g170702 = staticSwitch791_g170691;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170702 = ( temp_output_6_0_g170702 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170702 = temp_output_6_0_g170702;
				#endif
				float temp_output_798_0_g170691 = staticSwitch14_g170702;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170691 = temp_output_798_0_g170691;
				#else
				float staticSwitch577_g170691 = Visual_AlphaClip667_g170691;
				#endif
				half Final_AlphaClip795_g170691 = staticSwitch577_g170691;
				float In_AlphaClip3_g170692 = Final_AlphaClip795_g170691;
				float In_AlphaFade3_g170692 = Out_AlphaFade4_g170694;
				float3 In_Translucency3_g170692 = Out_Translucency4_g170694;
				float In_Transmission3_g170692 = Out_Transmission4_g170694;
				float In_Thickness3_g170692 = Out_Thickness4_g170694;
				float In_Diffusion3_g170692 = Out_Diffusion4_g170694;
				{
				Data3_g170692.Dummy = In_Dummy3_g170692;
				Data3_g170692.Albedo = In_Albedo3_g170692;
				Data3_g170692.AlbedoRaw = In_AlbedoRaw3_g170692;
				Data3_g170692.NormalTS = In_NormalTS3_g170692;
				Data3_g170692.NormalWS = In_NormalWS3_g170692;
				Data3_g170692.Shader = In_Shader3_g170692;
				Data3_g170692.Emissive= In_Emissive3_g170692;
				Data3_g170692.MultiMask = In_MultiMask3_g170692;
				Data3_g170692.Grayscale = In_Grayscale3_g170692;
				Data3_g170692.Luminosity = In_Luminosity3_g170692;
				Data3_g170692.AlphaClip = In_AlphaClip3_g170692;
				Data3_g170692.AlphaFade = In_AlphaFade3_g170692;
				Data3_g170692.Translucency = In_Translucency3_g170692;
				Data3_g170692.Transmission = In_Transmission3_g170692;
				Data3_g170692.Thickness = In_Thickness3_g170692;
				Data3_g170692.Diffusion = In_Diffusion3_g170692;
				}
				TVEVisualData Data4_g170708 = Data3_g170692;
				float Out_Dummy4_g170708 = 0;
				float3 Out_Albedo4_g170708 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170708 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170708 = float2( 0,0 );
				float3 Out_NormalWS4_g170708 = float3( 0,0,0 );
				float4 Out_Shader4_g170708 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170708 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170708 = 0;
				float Out_Grayscale4_g170708 = 0;
				float Out_Luminosity4_g170708 = 0;
				float Out_AlphaClip4_g170708 = 0;
				float Out_AlphaFade4_g170708 = 0;
				float3 Out_Translucency4_g170708 = float3( 0,0,0 );
				float Out_Transmission4_g170708 = 0;
				float Out_Thickness4_g170708 = 0;
				float Out_Diffusion4_g170708 = 0;
				{
				Out_Dummy4_g170708 = Data4_g170708.Dummy;
				Out_Albedo4_g170708 = Data4_g170708.Albedo;
				Out_AlbedoRaw4_g170708 = Data4_g170708.AlbedoRaw;
				Out_NormalTS4_g170708 = Data4_g170708.NormalTS;
				Out_NormalWS4_g170708 = Data4_g170708.NormalWS;
				Out_Shader4_g170708 = Data4_g170708.Shader;
				Out_Emissive4_g170708= Data4_g170708.Emissive;
				Out_MultiMask4_g170708 = Data4_g170708.MultiMask;
				Out_Grayscale4_g170708 = Data4_g170708.Grayscale;
				Out_Luminosity4_g170708= Data4_g170708.Luminosity;
				Out_AlphaClip4_g170708 = Data4_g170708.AlphaClip;
				Out_AlphaFade4_g170708 = Data4_g170708.AlphaFade;
				Out_Translucency4_g170708 = Data4_g170708.Translucency;
				Out_Transmission4_g170708 = Data4_g170708.Transmission;
				Out_Thickness4_g170708 = Data4_g170708.Thickness;
				Out_Diffusion4_g170708 = Data4_g170708.Diffusion;
				}
				float3 In_Albedo3_g170709 = Out_Albedo4_g170708;
				float3 In_AlbedoRaw3_g170709 = Out_AlbedoRaw4_g170708;
				float2 In_NormalTS3_g170709 = Out_NormalTS4_g170708;
				float3 In_NormalWS3_g170709 = Out_NormalWS4_g170708;
				float4 In_Shader3_g170709 = Out_Shader4_g170708;
				float4 In_Emissive3_g170709 = Out_Emissive4_g170708;
				float In_Grayscale3_g170709 = Out_Grayscale4_g170708;
				float In_Luminosity3_g170709 = Out_Luminosity4_g170708;
				float temp_output_821_11_g170706 = Out_MultiMask4_g170708;
				float In_MultiMask3_g170709 = temp_output_821_11_g170706;
				half Visual_AlphaClip754_g170706 = Out_AlphaClip4_g170708;
				half Input_True57_g170711 = Visual_AlphaClip754_g170706;
				half True36_g170711 = Input_True57_g170711;
				half Dither_Constant768_g170706 = _DitherConstantValue;
				float3 ase_positionWS = packedInput.ase_texcoord11.xyz;
				half Dither_BiasProximity881_g170706 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170706 = TVE_DitherParams.w;
				float lerpResult884_g170706 = lerp( 1.0 , Dither_BiasProximity881_g170706 , Dither_BiasEnabled883_g170706);
				float temp_output_7_0_g170717 = _DitherProximityMaxValue;
				float temp_output_9_0_g170717 = ( ( distance( ase_positionWS , _WorldSpaceCameraPos ) * lerpResult884_g170706 ) - temp_output_7_0_g170717 );
				half Dither_Proximity767_g170706 = ( saturate( ( ( temp_output_9_0_g170717 / ( _DitherProximityMinValue - temp_output_7_0_g170717 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170710 = Data16_g170201;
				float Out_Dummy15_g170710 = 0;
				float3 Out_PositionWS15_g170710 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170710 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170710 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170710 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170710 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170710 = float3( 0,0,0 );
				float4 Out_VertexData15_g170710 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170710 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170710 = Data15_g170710.Dummy;
				Out_PositionWS15_g170710 = Data15_g170710.PositionWS;
				Out_PositionWO15_g170710 = Data15_g170710.PositionWO;
				Out_PivotWS15_g170710 = Data15_g170710.PivotWS;
				Out_PivotWO15_g170710 = Data15_g170710.PivotWO;
				Out_NormalWS15_g170710 = Data15_g170710.NormalWS;
				Out_ViewDirWS15_g170710 = Data15_g170710.ViewDirWS;
				Out_VertexData15_g170710 = Data15_g170710.VertexData;
				Out_BoundsData15_g170710 = Data15_g170710.BoundsData;
				}
				half3 Model_PositionWS776_g170706 = Out_PositionWS15_g170710;
				half Dither_BiasDistance882_g170706 = TVE_DitherParams.z;
				float lerpResult888_g170706 = lerp( 1.0 , Dither_BiasDistance882_g170706 , Dither_BiasEnabled883_g170706);
				float temp_output_7_0_g170718 = _DitherDistanceMinValue;
				float temp_output_9_0_g170718 = ( ( distance( Model_PositionWS776_g170706 , _WorldSpaceCameraPos ) * lerpResult888_g170706 ) - temp_output_7_0_g170718 );
				half Dither_Distance856_g170706 = ( saturate( ( ( temp_output_9_0_g170718 / ( _DitherDistanceMaxValue - temp_output_7_0_g170718 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170706 = Out_ViewDirWS15_g170710;
				float3 normalizeResult792_g170706 = normalize( cross( ddy( ase_positionWS ) , ddx( ase_positionWS ) ) );
				float dotResult778_g170706 = dot( Model_ViewDirWS845_g170706 , normalizeResult792_g170706 );
				half Dither_Glancing784_g170706 = ( saturate( ( ( 1.0 - abs( dotResult778_g170706 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170706 = max( max( max( Dither_Constant768_g170706 , Dither_Proximity767_g170706 ) , Dither_Distance856_g170706 ) , Dither_Glancing784_g170706 );
				half3 Model_PositionWO602_g170706 = Out_PositionWO15_g170710;
				float4 tex3DNode60_g170713 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170706 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170706 = tex3DNode60_g170713.r;
				half Local_MaskNoise678_g170706 = temp_output_809_0_g170706;
				half Visual_MultiMask671_g170706 = temp_output_821_11_g170706;
				float lerpResult683_g170706 = lerp( 1.0 , Visual_MultiMask671_g170706 , _DitherMultiValue);
				half Local_MaskMulti685_g170706 = lerpResult683_g170706;
				half Custom_Mask826_g170706 = 1.0;
				float lerpResult728_g170706 = lerp( Visual_AlphaClip754_g170706 , min( Visual_AlphaClip754_g170706 , ( -0.001 - ( Dither_Value429_g170706 - Local_MaskNoise678_g170706 ) ) ) , ( Local_MaskMulti685_g170706 * Custom_Mask826_g170706 ));
				half Local_AlphaClip834_g170706 = lerpResult728_g170706;
				half Input_False58_g170711 = Local_AlphaClip834_g170706;
				half False36_g170711 = Input_False58_g170711;
				half localShadowPassCheck36_g170711 = ShadowPassCheck36_g170711( True36_g170711 , False36_g170711 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170706 = Local_AlphaClip834_g170706;
				#else
				float staticSwitch831_g170706 = localShadowPassCheck36_g170711;
				#endif
				float temp_output_6_0_g170712 = staticSwitch831_g170706;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170712 = ( temp_output_6_0_g170712 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170712 = temp_output_6_0_g170712;
				#endif
				float temp_output_840_0_g170706 = staticSwitch14_g170712;
				#ifdef TVE_DITHER
				float staticSwitch577_g170706 = temp_output_840_0_g170706;
				#else
				float staticSwitch577_g170706 = Visual_AlphaClip754_g170706;
				#endif
				half Final_AlphaClip493_g170706 = staticSwitch577_g170706;
				float In_AlphaClip3_g170709 = Final_AlphaClip493_g170706;
				float In_AlphaFade3_g170709 = Out_AlphaFade4_g170708;
				float3 In_Translucency3_g170709 = Out_Translucency4_g170708;
				float In_Transmission3_g170709 = Out_Transmission4_g170708;
				float In_Thickness3_g170709 = Out_Thickness4_g170708;
				float In_Diffusion3_g170709 = Out_Diffusion4_g170708;
				{
				Data3_g170709.Dummy = In_Dummy3_g170709;
				Data3_g170709.Albedo = In_Albedo3_g170709;
				Data3_g170709.AlbedoRaw = In_AlbedoRaw3_g170709;
				Data3_g170709.NormalTS = In_NormalTS3_g170709;
				Data3_g170709.NormalWS = In_NormalWS3_g170709;
				Data3_g170709.Shader = In_Shader3_g170709;
				Data3_g170709.Emissive= In_Emissive3_g170709;
				Data3_g170709.MultiMask = In_MultiMask3_g170709;
				Data3_g170709.Grayscale = In_Grayscale3_g170709;
				Data3_g170709.Luminosity = In_Luminosity3_g170709;
				Data3_g170709.AlphaClip = In_AlphaClip3_g170709;
				Data3_g170709.AlphaFade = In_AlphaFade3_g170709;
				Data3_g170709.Translucency = In_Translucency3_g170709;
				Data3_g170709.Transmission = In_Transmission3_g170709;
				Data3_g170709.Thickness = In_Thickness3_g170709;
				Data3_g170709.Diffusion = In_Diffusion3_g170709;
				}
				TVEVisualData Data4_g170731 = Data3_g170709;
				float Out_Dummy4_g170731 = 0;
				float3 Out_Albedo4_g170731 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170731 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170731 = float2( 0,0 );
				float3 Out_NormalWS4_g170731 = float3( 0,0,0 );
				float4 Out_Shader4_g170731 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170731 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170731 = 0;
				float Out_Grayscale4_g170731 = 0;
				float Out_Luminosity4_g170731 = 0;
				float Out_AlphaClip4_g170731 = 0;
				float Out_AlphaFade4_g170731 = 0;
				float3 Out_Translucency4_g170731 = float3( 0,0,0 );
				float Out_Transmission4_g170731 = 0;
				float Out_Thickness4_g170731 = 0;
				float Out_Diffusion4_g170731 = 0;
				{
				Out_Dummy4_g170731 = Data4_g170731.Dummy;
				Out_Albedo4_g170731 = Data4_g170731.Albedo;
				Out_AlbedoRaw4_g170731 = Data4_g170731.AlbedoRaw;
				Out_NormalTS4_g170731 = Data4_g170731.NormalTS;
				Out_NormalWS4_g170731 = Data4_g170731.NormalWS;
				Out_Shader4_g170731 = Data4_g170731.Shader;
				Out_Emissive4_g170731= Data4_g170731.Emissive;
				Out_MultiMask4_g170731 = Data4_g170731.MultiMask;
				Out_Grayscale4_g170731 = Data4_g170731.Grayscale;
				Out_Luminosity4_g170731= Data4_g170731.Luminosity;
				Out_AlphaClip4_g170731 = Data4_g170731.AlphaClip;
				Out_AlphaFade4_g170731 = Data4_g170731.AlphaFade;
				Out_Translucency4_g170731 = Data4_g170731.Translucency;
				Out_Transmission4_g170731 = Data4_g170731.Transmission;
				Out_Thickness4_g170731 = Data4_g170731.Thickness;
				Out_Diffusion4_g170731 = Data4_g170731.Diffusion;
				}
				float3 temp_output_297_0_g170727 = Out_Albedo4_g170731;
				float3 In_Albedo3_g170732 = temp_output_297_0_g170727;
				float3 temp_output_297_23_g170727 = Out_AlbedoRaw4_g170731;
				float3 In_AlbedoRaw3_g170732 = temp_output_297_23_g170727;
				float2 In_NormalTS3_g170732 = Out_NormalTS4_g170731;
				float3 In_NormalWS3_g170732 = Out_NormalWS4_g170731;
				float4 In_Shader3_g170732 = Out_Shader4_g170731;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170727 = Out_Emissive4_g170731;
				TVEModelData Data15_g170733 = Data16_g170201;
				float Out_Dummy15_g170733 = 0;
				float3 Out_PositionWS15_g170733 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170733 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170733 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170733 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170733 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170733 = float3( 0,0,0 );
				float4 Out_VertexData15_g170733 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170733 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170733 = Data15_g170733.Dummy;
				Out_PositionWS15_g170733 = Data15_g170733.PositionWS;
				Out_PositionWO15_g170733 = Data15_g170733.PositionWO;
				Out_PivotWS15_g170733 = Data15_g170733.PivotWS;
				Out_PivotWO15_g170733 = Data15_g170733.PivotWO;
				Out_NormalWS15_g170733 = Data15_g170733.NormalWS;
				Out_ViewDirWS15_g170733 = Data15_g170733.ViewDirWS;
				Out_VertexData15_g170733 = Data15_g170733.VertexData;
				Out_BoundsData15_g170733 = Data15_g170733.BoundsData;
				}
				half4 Model_VertexMasks216_g170727 = Out_VertexData15_g170733;
				float4 break251_g170727 = Model_VertexMasks216_g170727;
				float4 break33_g170738 = _emissive_vert_mode;
				float temp_output_30_0_g170738 = ( break251_g170727.x * break33_g170738.x );
				float temp_output_29_0_g170738 = ( break251_g170727.y * break33_g170738.y );
				float temp_output_31_0_g170738 = ( break251_g170727.z * break33_g170738.z );
				float temp_output_28_0_g170738 = ( temp_output_30_0_g170738 + temp_output_29_0_g170738 + temp_output_31_0_g170738 + ( break251_g170727.w * break33_g170738.w ) );
				float clampResult17_g170737 = clamp( temp_output_28_0_g170738 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170741 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170741 = ( clampResult17_g170737 - temp_output_7_0_g170741 );
				float lerpResult303_g170727 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170741 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170740 = lerpResult303_g170727;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170740 = ( temp_output_6_0_g170740 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170740 = temp_output_6_0_g170740;
				#endif
				half Emissive_MeshMask221_g170727 = staticSwitch14_g170740;
				TEXTURE2D(Texture276_g170729) = _EmissiveMaskTex;
				SamplerState Sampler276_g170729 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170730 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170730 = ( temp_output_6_0_g170730 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170730 = temp_output_6_0_g170730;
				#endif
				half4 Emissive_Coords167_g170727 = staticSwitch14_g170730;
				float4 temp_output_37_0_g170729 = Emissive_Coords167_g170727;
				half4 Coords276_g170729 = temp_output_37_0_g170729;
				half2 TexCoord276_g170729 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170729 = SampleMain( Texture276_g170729 , Sampler276_g170729 , Coords276_g170729 , TexCoord276_g170729 );
				TEXTURE2D(Texture275_g170729) = _EmissiveMaskTex;
				SamplerState Sampler275_g170729 = sampler_Linear_Repeat;
				half4 Coords275_g170729 = temp_output_37_0_g170729;
				half2 TexCoord275_g170729 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170729 = SampleExtra( Texture275_g170729 , Sampler275_g170729 , Coords275_g170729 , TexCoord275_g170729 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170727 = localSampleMain276_g170729;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170727 = localSampleExtra275_g170729;
				#else
				float4 staticSwitch176_g170727 = localSampleMain276_g170729;
				#endif
				half4 Emissive_MaskTex201_g170727 = staticSwitch176_g170727;
				float clampResult17_g170739 = clamp( (Emissive_MaskTex201_g170727).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170742 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170742 = ( clampResult17_g170739 - temp_output_7_0_g170742 );
				float lerpResult302_g170727 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170742 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170727 = lerpResult302_g170727;
				float temp_output_279_0_g170727 = ( Emissive_MeshMask221_g170727 * Emissive_Mask103_g170727 );
				float3 appendResult293_g170727 = (float3(temp_output_279_0_g170727 , temp_output_279_0_g170727 , temp_output_279_0_g170727));
				half3 Local_EmissiveColor278_g170727 = appendResult293_g170727;
				float3 temp_output_316_0_g170727 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170728 = Data204_g170214;
				float Out_Dummy15_g170728 = 0;
				float4 Out_CoatParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170728 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170728 = Data15_g170728.Dummy;
				Out_CoatParams15_g170728 = Data15_g170728.CoatParams;
				Out_PaintParams15_g170728 = Data15_g170728.PaintParams;
				Out_GlowParams15_g170728 = Data15_g170728.GlowParams;
				Out_AtmoParams15_g170728= Data15_g170728.AtmoParams;
				Out_FadeParams15_g170728= Data15_g170728.FadeParams;
				Out_FormParams15_g170728 = Data15_g170728.FormParams;
				Out_FlowParams15_g170728 = Data15_g170728.FlowParams;
				}
				half4 Global_GlowParams179_g170727 = Out_GlowParams15_g170728;
				float3 temp_output_6_0_g170735 = (Global_GlowParams179_g170727).xyz;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170735 = ( temp_output_6_0_g170735 + ( _EmissiveElementMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170735 = temp_output_6_0_g170735;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170727 = staticSwitch14_g170735;
				#else
				float3 staticSwitch228_g170727 = temp_output_316_0_g170727;
				#endif
				float3 lerpResult299_g170727 = lerp( float3( 1,1,1 ) , staticSwitch228_g170727 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170727 = lerpResult299_g170727;
				half3 Visual_AlbedoRaw306_g170727 = temp_output_297_23_g170727;
				float3 lerpResult307_g170727 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170727 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170727 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170727 * lerpResult307_g170727 );
				half3 Emissive_Blend260_g170727 = ( ( (Visual_Emissive255_g170727).xyz * Local_EmissiveColor278_g170727 ) * Local_EmissiveValue88_g170727 );
				float3 temp_output_3_0_g170734 = Emissive_Blend260_g170727;
				float temp_output_15_0_g170734 = _emissive_power_value;
				float3 hdEmission22_g170734 = ASEGetEmissionHDRColor(temp_output_3_0_g170734,temp_output_15_0_g170734,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170727 = temp_output_279_0_g170727;
				float4 appendResult295_g170727 = (float4(hdEmission22_g170734 , Local_EmissiveMask294_g170727));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170727 = appendResult295_g170727;
				#else
				float4 staticSwitch129_g170727 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170727 = staticSwitch129_g170727;
				float4 In_Emissive3_g170732 = Final_Emissive184_g170727;
				float In_Grayscale3_g170732 = Out_Grayscale4_g170731;
				float In_Luminosity3_g170732 = Out_Luminosity4_g170731;
				float temp_output_297_11_g170727 = Out_MultiMask4_g170731;
				float In_MultiMask3_g170732 = temp_output_297_11_g170727;
				float In_AlphaClip3_g170732 = Out_AlphaClip4_g170731;
				float In_AlphaFade3_g170732 = Out_AlphaFade4_g170731;
				float3 In_Translucency3_g170732 = Out_Translucency4_g170731;
				float In_Transmission3_g170732 = Out_Transmission4_g170731;
				float In_Thickness3_g170732 = Out_Thickness4_g170731;
				float In_Diffusion3_g170732 = Out_Diffusion4_g170731;
				{
				Data3_g170732.Dummy = In_Dummy3_g170732;
				Data3_g170732.Albedo = In_Albedo3_g170732;
				Data3_g170732.AlbedoRaw = In_AlbedoRaw3_g170732;
				Data3_g170732.NormalTS = In_NormalTS3_g170732;
				Data3_g170732.NormalWS = In_NormalWS3_g170732;
				Data3_g170732.Shader = In_Shader3_g170732;
				Data3_g170732.Emissive= In_Emissive3_g170732;
				Data3_g170732.MultiMask = In_MultiMask3_g170732;
				Data3_g170732.Grayscale = In_Grayscale3_g170732;
				Data3_g170732.Luminosity = In_Luminosity3_g170732;
				Data3_g170732.AlphaClip = In_AlphaClip3_g170732;
				Data3_g170732.AlphaFade = In_AlphaFade3_g170732;
				Data3_g170732.Translucency = In_Translucency3_g170732;
				Data3_g170732.Transmission = In_Transmission3_g170732;
				Data3_g170732.Thickness = In_Thickness3_g170732;
				Data3_g170732.Diffusion = In_Diffusion3_g170732;
				}
				TVEVisualData Data4_g170763 = Data3_g170732;
				float Out_Dummy4_g170763 = 0;
				float3 Out_Albedo4_g170763 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170763 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170763 = float2( 0,0 );
				float3 Out_NormalWS4_g170763 = float3( 0,0,0 );
				float4 Out_Shader4_g170763 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170763 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170763 = 0;
				float Out_Grayscale4_g170763 = 0;
				float Out_Luminosity4_g170763 = 0;
				float Out_AlphaClip4_g170763 = 0;
				float Out_AlphaFade4_g170763 = 0;
				float3 Out_Translucency4_g170763 = float3( 0,0,0 );
				float Out_Transmission4_g170763 = 0;
				float Out_Thickness4_g170763 = 0;
				float Out_Diffusion4_g170763 = 0;
				{
				Out_Dummy4_g170763 = Data4_g170763.Dummy;
				Out_Albedo4_g170763 = Data4_g170763.Albedo;
				Out_AlbedoRaw4_g170763 = Data4_g170763.AlbedoRaw;
				Out_NormalTS4_g170763 = Data4_g170763.NormalTS;
				Out_NormalWS4_g170763 = Data4_g170763.NormalWS;
				Out_Shader4_g170763 = Data4_g170763.Shader;
				Out_Emissive4_g170763= Data4_g170763.Emissive;
				Out_MultiMask4_g170763 = Data4_g170763.MultiMask;
				Out_Grayscale4_g170763 = Data4_g170763.Grayscale;
				Out_Luminosity4_g170763= Data4_g170763.Luminosity;
				Out_AlphaClip4_g170763 = Data4_g170763.AlphaClip;
				Out_AlphaFade4_g170763 = Data4_g170763.AlphaFade;
				Out_Translucency4_g170763 = Data4_g170763.Translucency;
				Out_Transmission4_g170763 = Data4_g170763.Transmission;
				Out_Thickness4_g170763 = Data4_g170763.Thickness;
				Out_Diffusion4_g170763 = Data4_g170763.Diffusion;
				}
				half3 Visual_Albedo199_g170762 = Out_Albedo4_g170763;
				half3 Final_Albedo312_g170762 = Visual_Albedo199_g170762;
				float3 In_Albedo3_g170764 = Final_Albedo312_g170762;
				float3 In_AlbedoRaw3_g170764 = Out_AlbedoRaw4_g170763;
				float2 In_NormalTS3_g170764 = Out_NormalTS4_g170763;
				float3 In_NormalWS3_g170764 = Out_NormalWS4_g170763;
				float4 In_Shader3_g170764 = Out_Shader4_g170763;
				float4 In_Emissive3_g170764 = Out_Emissive4_g170763;
				float In_Grayscale3_g170764 = Out_Grayscale4_g170763;
				float In_Luminosity3_g170764 = Out_Luminosity4_g170763;
				float temp_output_301_11_g170762 = Out_MultiMask4_g170763;
				float In_MultiMask3_g170764 = temp_output_301_11_g170762;
				float In_AlphaClip3_g170764 = Out_AlphaClip4_g170763;
				float In_AlphaFade3_g170764 = Out_AlphaFade4_g170763;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g170762 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170762 );
				half Visual_Transmission138_g170762 = Out_Transmission4_g170763;
				half Subsurface_Value268_g170762 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170765 = Data204_g170214;
				float Out_Dummy15_g170765 = 0;
				float4 Out_CoatParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170765 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170765 = Data15_g170765.Dummy;
				Out_CoatParams15_g170765 = Data15_g170765.CoatParams;
				Out_PaintParams15_g170765 = Data15_g170765.PaintParams;
				Out_GlowParams15_g170765 = Data15_g170765.GlowParams;
				Out_AtmoParams15_g170765= Data15_g170765.AtmoParams;
				Out_FadeParams15_g170765= Data15_g170765.FadeParams;
				Out_FormParams15_g170765 = Data15_g170765.FormParams;
				Out_FlowParams15_g170765 = Data15_g170765.FlowParams;
				}
				half4 Global_GlowParams373_g170762 = Out_GlowParams15_g170765;
				float temp_output_6_0_g170768 = saturate( (Global_GlowParams373_g170762).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170768 = ( temp_output_6_0_g170768 + ( _SubsurfaceElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170768 = temp_output_6_0_g170768;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170762 = staticSwitch14_g170768;
				#else
				float staticSwitch367_g170762 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g170762 = lerp( 1.0 , staticSwitch367_g170762 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170762 = lerpResult403_g170762;
				half Visual_MultiMask292_g170762 = temp_output_301_11_g170762;
				float lerpResult293_g170762 = lerp( 1.0 , Visual_MultiMask292_g170762 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170762 = lerpResult293_g170762;
				half Custom_Mask363_g170762 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170762 = ( Visual_Transmission138_g170762 * Subsurface_Value268_g170762 * Subsurface_GlobalMask369_g170762 * Subsurface_MultiMask296_g170762 * Custom_Mask363_g170762 );
				#else
				float staticSwitch345_g170762 = 0.0;
				#endif
				half Final_Transmission269_g170762 = staticSwitch345_g170762;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170762 = ( Subsurface_Color264_g170762 * Final_Transmission269_g170762 * 10.0 );
				#else
				float3 staticSwitch348_g170762 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g170762 = staticSwitch348_g170762;
				float3 In_Translucency3_g170764 = Final_Translucency254_g170762;
				float In_Transmission3_g170764 = Final_Transmission269_g170762;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170762 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170762 = 1.0;
				#endif
				half Final_Thickness275_g170762 = staticSwitch351_g170762;
				float In_Thickness3_g170764 = Final_Thickness275_g170762;
				float Final_Diffusion340_g170762 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170764 = Final_Diffusion340_g170762;
				{
				Data3_g170764.Dummy = In_Dummy3_g170764;
				Data3_g170764.Albedo = In_Albedo3_g170764;
				Data3_g170764.AlbedoRaw = In_AlbedoRaw3_g170764;
				Data3_g170764.NormalTS = In_NormalTS3_g170764;
				Data3_g170764.NormalWS = In_NormalWS3_g170764;
				Data3_g170764.Shader = In_Shader3_g170764;
				Data3_g170764.Emissive= In_Emissive3_g170764;
				Data3_g170764.MultiMask = In_MultiMask3_g170764;
				Data3_g170764.Grayscale = In_Grayscale3_g170764;
				Data3_g170764.Luminosity = In_Luminosity3_g170764;
				Data3_g170764.AlphaClip = In_AlphaClip3_g170764;
				Data3_g170764.AlphaFade = In_AlphaFade3_g170764;
				Data3_g170764.Translucency = In_Translucency3_g170764;
				Data3_g170764.Transmission = In_Transmission3_g170764;
				Data3_g170764.Thickness = In_Thickness3_g170764;
				Data3_g170764.Diffusion = In_Diffusion3_g170764;
				}
				TVEVisualData Data4_g170777 = Data3_g170764;
				float Out_Dummy4_g170777 = 0;
				float3 Out_Albedo4_g170777 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170777 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170777 = float2( 0,0 );
				float3 Out_NormalWS4_g170777 = float3( 0,0,0 );
				float4 Out_Shader4_g170777 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170777 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170777 = 0;
				float Out_Grayscale4_g170777 = 0;
				float Out_Luminosity4_g170777 = 0;
				float Out_AlphaClip4_g170777 = 0;
				float Out_AlphaFade4_g170777 = 0;
				float3 Out_Translucency4_g170777 = float3( 0,0,0 );
				float Out_Transmission4_g170777 = 0;
				float Out_Thickness4_g170777 = 0;
				float Out_Diffusion4_g170777 = 0;
				{
				Out_Dummy4_g170777 = Data4_g170777.Dummy;
				Out_Albedo4_g170777 = Data4_g170777.Albedo;
				Out_AlbedoRaw4_g170777 = Data4_g170777.AlbedoRaw;
				Out_NormalTS4_g170777 = Data4_g170777.NormalTS;
				Out_NormalWS4_g170777 = Data4_g170777.NormalWS;
				Out_Shader4_g170777 = Data4_g170777.Shader;
				Out_Emissive4_g170777= Data4_g170777.Emissive;
				Out_MultiMask4_g170777 = Data4_g170777.MultiMask;
				Out_Grayscale4_g170777 = Data4_g170777.Grayscale;
				Out_Luminosity4_g170777= Data4_g170777.Luminosity;
				Out_AlphaClip4_g170777 = Data4_g170777.AlphaClip;
				Out_AlphaFade4_g170777 = Data4_g170777.AlphaFade;
				Out_Translucency4_g170777 = Data4_g170777.Translucency;
				Out_Transmission4_g170777 = Data4_g170777.Transmission;
				Out_Thickness4_g170777 = Data4_g170777.Thickness;
				Out_Diffusion4_g170777 = Data4_g170777.Diffusion;
				}
				float3 appendResult23_g170771 = (float3(Out_NormalTS4_g170777 , 1.0));
				float3 temp_output_13_0_g170775 = appendResult23_g170771;
				float3 temp_output_33_0_g170775 = ( temp_output_13_0_g170775 * _render_normal );
				float3 switchResult12_g170775 = (((ase_vface>0)?(temp_output_13_0_g170775):(temp_output_33_0_g170775)));
				
				float4 break24_g170771 = Out_Shader4_g170777;
				
				float localCustomAlphaClip21_g170784 = ( 0.0 );
				float temp_output_3_0_g170784 = Out_AlphaClip4_g170777;
				float Alpha21_g170784 = temp_output_3_0_g170784;
				float temp_output_15_0_g170784 = 0.0;
				float Treshold21_g170784 = temp_output_15_0_g170784;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170784 - Treshold21_g170784);
				#endif
				#endif
				}
				
				surfaceDescription.Normal = switchResult12_g170775;
				surfaceDescription.Smoothness = break24_g170771.w;
				surfaceDescription.Alpha = saturate( ( Alpha21_g170784 * Out_AlphaFade4_g170777 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				float4 VPASSpositionCS = float4(packedInput.vpassInterpolators0.xy, 0.0, packedInput.vpassInterpolators0.z);
				float4 VPASSpreviousPositionCS = float4(packedInput.vpassInterpolators1.xy, 0.0, packedInput.vpassInterpolators1.z);

				#ifdef _DEPTHOFFSET_ON
				VPASSpositionCS.w += builtinData.depthOffset;
				VPASSpreviousPositionCS.w += builtinData.depthOffset;
				#endif

				float2 motionVector = CalculateMotionVector( VPASSpositionCS, VPASSpreviousPositionCS );
				EncodeMotionVector( motionVector * 0.5, outMotionVector );

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if( forceNoMotion )
					outMotionVector = float4( 2.0, 0.0, 0.0, 0.0 );

				#ifdef WRITE_MSAA_DEPTH
					depthColor = packedInput.vmeshPositionCS.z;
					depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
				#endif

				#if defined(WRITE_NORMAL_BUFFER)
					EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
				#endif

				#if defined(WRITE_DECAL_BUFFER)
					DecalPrepassData decalPrepassData;
					#ifdef _DISABLE_DECALS
					ZERO_INITIALIZE(DecalPrepassData, decalPrepassData);
					#else
					decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
					#endif
					decalPrepassData.renderingLayerMask = GetMeshRenderingLayerMask();
					EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
				#endif

				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				#endif
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "Forward"
			Tags { "LightMode"="Forward" }

			Blend [_SrcBlend] [_DstBlend], [_AlphaSrcBlend] [_AlphaDstBlend]
			Blend 1 SrcAlpha OneMinusSrcAlpha
			Blend 2 One [_DstBlend2]
			Blend 3 One [_DstBlend2]
			Blend 4 One OneMinusSrcAlpha

			Cull [_CullModeForward]
			ZTest [_ZTestDepthEqualForOpaque]
			ZWrite [_ZWrite]

			Stencil
			{
				Ref [_StencilRef]
				WriteMask [_StencilWriteMask]
				Comp Always
				Pass Replace
			}


            ColorMask [_ColorMaskTransparentVelOne] 1
            ColorMask [_ColorMaskTransparentVelTwo] 2

			HLSLPROGRAM
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19702
			#define ASE_SRP_VERSION 170003
			#if !defined(ASE_NEED_CULLFACE)
			#define ASE_NEED_CULLFACE 1
			#endif //ASE_NEED_CULLFACE
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
            #pragma multi_compile_fragment PUNCTUAL_SHADOW_LOW PUNCTUAL_SHADOW_MEDIUM PUNCTUAL_SHADOW_HIGH
            #pragma multi_compile_fragment DIRECTIONAL_SHADOW_LOW DIRECTIONAL_SHADOW_MEDIUM DIRECTIONAL_SHADOW_HIGH
            #pragma multi_compile_fragment AREA_SHADOW_MEDIUM AREA_SHADOW_HIGH
            #pragma multi_compile_fragment _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
            #pragma multi_compile_fragment SCREEN_SPACE_SHADOWS_OFF SCREEN_SPACE_SHADOWS_ON
            #pragma multi_compile_fragment USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST

            #pragma multi_compile _ DEBUG_DISPLAY
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ DYNAMICLIGHTMAP_ON
            #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
            #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
            #pragma multi_compile _ USE_LEGACY_LIGHTMAPS

			#ifndef SHADER_STAGE_FRAGMENT
			#define SHADOW_LOW
			#define USE_FPTL_LIGHTLIST
			#endif

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_FORWARD
		    #define HAS_LIGHTLOOP 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _SecondProjRemap;
			half4 _DrynessLumaRemap;
			float4 _DrynessColor;
			half4 _wetness_water_vert_mode;
			half4 _WetnessWaterMeshRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			half4 _WetnessWaterBlendRemap;
			half4 _TintingBlendRemap;
			half4 _TintingMeshRemap;
			half4 _tinting_vert_mode;
			half4 _object_phase_mode;
			half4 _TintingLumaRemap;
			float4 _TintingColor;
			half4 _wetness_drops_vert_mode;
			half4 _WetnessDropsMeshRemap;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _GradientMeshRemap;
			half4 _WetnessMeshRemap;
			half4 _wetness_vert_mode;
			half4 _MotionBaseMaskRemap;
			half4 _motion_base_proc_mode;
			half4 _motion_tiny_vert_mode;
			half4 _OverlayProjRemap;
			half4 _motion_tiny_proc_mode;
			half4 _MotionSmallMaskRemap;
			half4 _OverlayLumaRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _overlay_coord_value;
			half4 _overlay_vert_mode;
			half4 _OverlayCoordValue;
			half4 _OverlayMeshRemap;
			half4 _OverlayColor;
			half4 _MotionHighlightColor;
			half4 _OverlayBlendRemap;
			half4 _second_vert_mode;
			half4 _DrynessBlendRemap;
			half4 _DrynessMeshRemap;
			half4 _WetnessWaterColor;
			half4 _dryness_vert_mode;
			half4 _motion_base_vert_mode;
			half4 _MotionTinyMaskRemap;
			half4 _GradientColorOne;
			half4 _gradient_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _emissive_coord_value;
			half4 _MainColor;
			half4 _ThirdColorTwo;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _third_coord_value;
			half4 _MainMultiRemap;
			half4 _EmissiveColor;
			half4 _second_coord_value;
			half4 _MainColorTwo;
			half4 _Color;
			half4 _SecondColor;
			half4 _SecondBlendRemap;
			half4 _SecondMultiRemap;
			half4 _SubsurfaceColor;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _SecondMeshRemap;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _SecondLumaRemap;
			half4 _SecondColorTwo;
			half4 _GradientColorTwo;
			half4 _ThirdColor;
			half4 _emissive_vert_mode;
			half4 _occlusion_vert_mode;
			half4 _cutout_vert_mode;
			half4 _CutoutMeshRemap;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _ThirdProjRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdMeshRemap;
			half4 _ThirdMaskCoordValue;
			half4 _third_vert_mode;
			half4 _ThirdLumaRemap;
			half4 _ThirdMaskRemap;
			half4 _SecondCoordValue;
			half4 _third_mask_coord_value;
			half4 _SecondMaskCoordValue;
			half4 _ThirdMultiRemap;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _EmissiveMeshRemap;
			half4 _OverlayGlitterColor;
			half3 _motion_highlight_color;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half _OverlayGlitterIntensityValue;
			half _ThirdBlendAlbedoValue;
			half _DitherGlancingValue;
			half _ThirdIntensityValue;
			half _DitherGlancingAngleValue;
			half _DitherDistanceValue;
			half _DitherDistanceMaxValue;
			half _ThirdMaskValue;
			half _DitherDistanceMinValue;
			half _ThirdLumaValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _DitherProximityMaxValue;
			half _ThirdMeshValue;
			half _DitherConstantValue;
			half _ThirdMeshMode;
			half _CutoutShadowMode;
			half _ThirdProjValue;
			half _ThirdElementMode;
			half _ThirdGlobalValue;
			half _CutoutMultiValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _ThirdNormalValue;
			half _ThirdBlendShaderValue;
			half _ThirdAlphaClipValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _ThirdColorMode;
			half _DitherNoiseTillingValue;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SubsurfaceElementMode;
			half _SubsurfaceIntensityValue;
			half _SecondMeshValue;
			half _SecondMeshMode;
			half _SecondElementMode;
			half _EmissiveExposureValue;
			half _SecondGlobalValue;
			float _emissive_power_value;
			half _SecondBlendIntensityValue;
			half _EmissiveColorMode;
			half _EmissiveGlobalValue;
			half _CutoutNoiseValue;
			half _SecondBlendNormalValue;
			half _SecondNormalValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _ThirdAlbedoValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _ThirdMetallicValue;
			half _DitherMultiValue;
			half _EmissiveElementMode;
			half _CutoutNoiseTillingValue;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _WetnessWaterMeshValue;
			half _WetnessMeshMode;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _WetnessMeshValue;
			half _WetnessGlobalValue;
			half _DrynessLumaValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _OverlaySubsurfaceValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _DrynessGrayValue;
			half _OverlaySmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _OverlayGlobalValue;
			half _MotionHighlightValue;
			half _OverlayElementMode;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _OverlayIntensityValue;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _OverlayGlitterDistValue;
			half _OverlayTextureMode;
			half _OverlayNormalValue;
			half _OverlayGlitterTillingValue;
			half _DrynessGlobalValue;
			half _WetnessWaterBaseValue;
			half _CutoutAlphaValue;
			half _CutoutGlobalValue;
			half _CutoutElementMode;
			half _CutoutIntensityValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _WetnessSmoothnessValue;
			half _WetnessDropsMeshMode;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _WetnessDropsMeshValue;
			half _VariationIntensityValue;
			half _WetnessWaterMeshMode;
			half _VariationMultiValue;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _WetnessDropsDistValue;
			half _TintingIntensityValue;
			half _TintingMultiValue;
			half _WetnessDropsNormalValue;
			half _TintingLumaValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsTillingValue;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _WetnessContrastValue;
			half _DrynessElementMode;
			half _TintingElementMode;
			half _DrynessSmoothnessValue;
			half _SecondAlbedoValue;
			half _SecondLumaValue;
			half _GlobalGlowLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalPivotInfo;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _GlobalGlowPivotValue;
			half _SizeFadeDistMinValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _SizeFadeDistMaxValue;
			half _ObjectCategory;
			half _GlobalAtmoLayerValue;
			half _GlobalFadeLayerValue;
			half _MotionSmallPushValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionSmallMaskMode;
			half _GlobalAtmoPivotValue;
			half _motion_small_mask_mode;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _SizeFadeGlobalValue;
			half _SizeFadeElementMode;
			half _GlobalFlowPivotValue;
			half _GlobalFlowLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _MotionSmallIntensityValue;
			half _MotionTinyIntensityValue;
			half _PerspectiveEnd;
			half _SizeFadeEnd;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _RenderSSR;
			half _IsVersion;
			half _RenderZWrite;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _Cutoff;
			half _PerspectiveCategory;
			half _RenderPriority;
			half _RenderMotion;
			half _SizeFadeCategory;
			half _MotionPushInfo;
			half _MotionElementMode;
			half _MotionWindEnd;
			half _MotionCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _IsSubsurfaceShader;
			half _RenderQueue;
			half _IsGeneralShader;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _HasDefaultTextures;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _RenderShadow;
			half _RenderClip;
			half _RenderFilter;
			half _SecondProjValue;
			half _MotionDistValue;
			half _MotionTinyMaskMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _DetailEnd;
			half _SecondCoordMode;
			half _DetailCategory;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _OcclusionBakeMode;
			half _TintingEnd;
			half _SecondMaskSampleMode;
			half _SecondBakeMode;
			half _SecondMaskValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SubsurfaceThicknessValue;
			half _MainAlphaClipValue;
			half _SecondMaskCoordMode;
			half _MainNormalValue;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainCategory;
			half _MainColorMode;
			half _motion_tiny_mask_mode;
			half _TintingCategory;
			half _DrynessSpace;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseMaskMode;
			half _SubsurfaceEnd;
			half _motion_base_mask_mode;
			half _motion_small_mode;
			half _MotionBasePushValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionTinyNoiseValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionBaseIntensityValue;
			half _DrynessBakeMode;
			half _SubsurfaceDirectValue;
			half _SubsurfaceAmbientValue;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _SubsurfaceNormalValue;
			half _CutoutBakeMode;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceShadowValue;
			half _CutoutEnd;
			half _SubsurfaceAngleValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_SizeFadeParams;
			half4 TVE_FormParams;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			float TVE_FlowLayers[10];
			TEXTURE2D_ARRAY(TVE_FlowBaseTex);
			TEXTURE2D_ARRAY(TVE_FlowNearTex);
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			half4 TVE_AtmoData;
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			half4 TVE_DitherParams;
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_RELATIVE_WORLD_POS
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 FlowParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float4 clipPosV : TEXCOORD0;
				float3 positionRWS : TEXCOORD1;
				float3 normalWS : TEXCOORD2;
				float4 tangentWS : TEXCOORD3;
				float4 uv1 : TEXCOORD4;
				float4 uv2 : TEXCOORD5;
				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					float3 vpassPositionCS : TEXCOORD6;
					float3 vpassPreviousPositionCS : TEXCOORD7;
				#endif
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_color : COLOR;
				float4 ase_texcoord11 : TEXCOORD11;
				float4 ase_texcoord12 : TEXCOORD12;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half ShadowPassCheck36_g170701( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170711( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);
				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				surfaceData.baseColor =                 surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness = 				surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
                    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;

                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
				    #if !defined(SHADER_STAGE_RAY_TRACING)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   #ifdef FRAG_INPUTS_USE_TEXCOORD0
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                       #else
                           surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                       #endif
					   surfaceData.metallic = 0;
				    }
					#endif
				    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData); 
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif  
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			AttributesMesh ApplyMeshModification(AttributesMesh inputMesh, float3 timeParameters, inout PackedVaryingsMeshToPS output )
			{
				_TimeParameters.xyz = timeParameters;
				TVEModelData Data16_g170761 = (TVEModelData)0;
				float In_Dummy16_g170761 = 0.0;
				TVEModelData Data16_g170745 = (TVEModelData)0;
				half Dummy1575_g170743 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170745 = Dummy1575_g170743;
				TVEModelData Data16_g170721 = (TVEModelData)0;
				float In_Dummy16_g170721 = 0.0;
				TVEModelData Data16_g170491 = (TVEModelData)0;
				half Dummy181_g170474 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170491 = Dummy181_g170474;
				TVEModelData Data16_g170433 = (TVEModelData)0;
				half Dummy181_g170431 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170433 = Dummy181_g170431;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170200 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170200 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170200 = PositionOS131_g170196;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_positionWS;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170200 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170206 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170206 = ( localObjectPosition_UNITY_MATRIX_M14_g170206 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170206 = localObjectPosition_UNITY_MATRIX_M14_g170206;
				#endif
				float3 temp_output_340_7_g170196 = staticSwitch13_g170206;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170208 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170204 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170204;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170208 = PivotOS149_g170196;
				float3 PivotsOnlyWS105_g170208 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170208 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170208 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170208 = ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 );
				#endif
				float3 temp_output_341_7_g170196 = staticSwitch13_g170208;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170200 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170200 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170200 = float3( 0,0,0 );
				float3 In_PivotOS16_g170200 = PivotOS149_g170196;
				float3 In_PivotWS16_g170200 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170200 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170200 = NormalOS134_g170196;
				float3 ase_normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170200 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170200 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170200 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170200 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170200 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170200 = VertexMasks171_g170196;
				float mulTime113_g170203 = _TimeParameters.x * 0.52;
				float lerpResult128_g170203 = lerp( mulTime113_g170203 , ( ( mulTime113_g170203 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170196 = PivotWO133_g170196;
				half Pivot_Position322_g170196 = ( break319_g170196.x + break319_g170196.z );
				float mulTime113_g170202 = _TimeParameters.x * 0.27;
				float lerpResult128_g170202 = lerp( mulTime113_g170202 , ( ( mulTime113_g170202 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170205 = _object_phase_mode;
				float temp_output_30_0_g170205 = ( inputMesh.ase_color.r * break33_g170205.x );
				float temp_output_29_0_g170205 = ( inputMesh.ase_color.g * break33_g170205.y );
				float temp_output_31_0_g170205 = ( inputMesh.ase_color.b * break33_g170205.z );
				float temp_output_28_0_g170205 = ( temp_output_30_0_g170205 + temp_output_29_0_g170205 + temp_output_31_0_g170205 + ( inputMesh.ase_color.a * break33_g170205.w ) );
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170205 + Pivot_Position322_g170196 ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(sin( ( lerpResult128_g170203 + Pivot_Position322_g170196 ) ) , sin( ( lerpResult128_g170202 + Pivot_Position322_g170196 ) ) , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_PhaseData16_g170200 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170200 = BoundsData254_g170196;
				float4 In_RotationData16_g170200 = float4( 0,0,0,0 );
				{
				Data16_g170200.Dummy = In_Dummy16_g170200;
				Data16_g170200.PositionOS = In_PositionOS16_g170200;
				Data16_g170200.PositionWS = In_PositionWS16_g170200;
				Data16_g170200.PositionWO = In_PositionWO16_g170200;
				Data16_g170200.PositionRawOS = In_PositionRawOS16_g170200;
				Data16_g170200.PositionAddOS = In_PositionAddOS16_g170200;
				Data16_g170200.PivotOS = In_PivotOS16_g170200;
				Data16_g170200.PivotWS = In_PivotWS16_g170200;
				Data16_g170200.PivotWO = In_PivotWO16_g170200;
				Data16_g170200.NormalOS = In_NormalOS16_g170200;
				Data16_g170200.NormalWS = In_NormalWS16_g170200;
				Data16_g170200.NormalRawOS = In_NormalRawOS16_g170200;
				Data16_g170200.NormalRawWS = In_NormalRawWS16_g170200;
				Data16_g170200.TangentOS = In_TangentOS16_g170200;
				Data16_g170200.ViewDirWS = In_ViewDirWS16_g170200;
				Data16_g170200.VertexData = In_VertexData16_g170200;
				Data16_g170200.PhaseData = In_PhaseData16_g170200;
				Data16_g170200.BoundsData = In_BoundsData16_g170200;
				Data16_g170200.RotationData = In_RotationData16_g170200;
				}
				TVEModelData Data15_g170371 = Data16_g170200;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_PhaseData15_g170371 = Data15_g170371.PhaseData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_PhaseData16_g170370 = Out_PhaseData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.PhaseData = In_PhaseData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_PhaseData15_g170391 = Data15_g170391.PhaseData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_viewDirSafeWS , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_viewDirSafeWS , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_PhaseData16_g170393 = Out_PhaseData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				{
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.PhaseData = In_PhaseData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				}
				TVEModelData Data15_g170432 = Data16_g170393;
				float Out_Dummy15_g170432 = 0;
				float3 Out_PositionOS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170432 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170432 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170432 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170432 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170432 = float3( 0,0,0 );
				float4 Out_VertexData15_g170432 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170432 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170432 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170432 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_PositionOS15_g170432 = Data15_g170432.PositionOS;
				Out_PositionWS15_g170432 = Data15_g170432.PositionWS;
				Out_PositionWO15_g170432 = Data15_g170432.PositionWO;
				Out_PositionRawOS15_g170432 = Data15_g170432.PositionRawOS;
				Out_PositionAddOS15_g170432 = Data15_g170432.PositionAddOS;
				Out_PivotOS15_g170432 = Data15_g170432.PivotOS;
				Out_PivotWS15_g170432 = Data15_g170432.PivotWS;
				Out_PivotWO15_g170432 = Data15_g170432.PivotWO;
				Out_NormalOS15_g170432 = Data15_g170432.NormalOS;
				Out_NormalWS15_g170432 = Data15_g170432.NormalWS;
				Out_NormalRawOS15_g170432 = Data15_g170432.NormalRawOS;
				Out_NormalRawWS15_g170432 = Data15_g170432.NormalRawWS;
				Out_TangentOS15_g170432 = Data15_g170432.TangentOS;
				Out_ViewDirWS15_g170432 = Data15_g170432.ViewDirWS;
				Out_VertexData15_g170432 = Data15_g170432.VertexData;
				Out_PhaseData15_g170432 = Data15_g170432.PhaseData;
				Out_BoundsData15_g170432 = Data15_g170432.BoundsData;
				Out_RotationData15_g170432 = Data15_g170432.RotationData;
				}
				half3 Model_PositionOS147_g170431 = Out_PositionOS15_g170432;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170431 = Out_PivotWO15_g170432;
				half3 Model_PivotWO162_g170431 = temp_output_210_19_g170431;
				float lerpResult216_g170431 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170435 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170435 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170431 ) * lerpResult216_g170431 ) - temp_output_7_0_g170435 );
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatParams204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintParams204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowParams204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoParams204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeParams204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormParams204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowParams204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatParams = In_CoatParams204_g170214;
				Data204_g170214.PaintParams = In_PaintParams204_g170214;
				Data204_g170214.GlowParams = In_GlowParams204_g170214;
				Data204_g170214.AtmoParams = In_AtmoParams204_g170214;
				Data204_g170214.FadeParams = In_FadeParams204_g170214;
				Data204_g170214.FormParams= In_FormParams204_g170214;
				Data204_g170214.FlowParams = In_FlowParams204_g170214;
				}
				TVEGlobalData Data15_g170434 = Data204_g170214;
				float Out_Dummy15_g170434 = 0;
				float4 Out_CoatParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170434 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170434 = Data15_g170434.Dummy;
				Out_CoatParams15_g170434 = Data15_g170434.CoatParams;
				Out_PaintParams15_g170434 = Data15_g170434.PaintParams;
				Out_GlowParams15_g170434 = Data15_g170434.GlowParams;
				Out_AtmoParams15_g170434= Data15_g170434.AtmoParams;
				Out_FadeParams15_g170434= Data15_g170434.FadeParams;
				Out_FormParams15_g170434 = Data15_g170434.FormParams;
				Out_FlowParams15_g170434 = Data15_g170434.FlowParams;
				}
				half4 Input_FormParams188_g170431 = Out_FormParams15_g170434;
				float temp_output_6_0_g170436 = saturate( (Input_FormParams188_g170431).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170436 = ( temp_output_6_0_g170436 + ( _SizeFadeElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170436 = temp_output_6_0_g170436;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170431 = staticSwitch14_g170436;
				#else
				float staticSwitch194_g170431 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170431 = lerp( 1.0 , staticSwitch194_g170431 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170431 = lerpResult213_g170431;
				float temp_output_189_0_g170431 = ( saturate( ( ( temp_output_9_0_g170435 / ( _SizeFadeDistMinValue - temp_output_7_0_g170435 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170431 );
				float3 appendResult200_g170431 = (float3(temp_output_189_0_g170431 , temp_output_189_0_g170431 , temp_output_189_0_g170431));
				float3 appendResult201_g170431 = (float3(1.0 , temp_output_189_0_g170431 , 1.0));
				float3 lerpResult202_g170431 = lerp( appendResult200_g170431 , appendResult201_g170431 , _SizeFadeScaleMode);
				float3 lerpResult184_g170431 = lerp( temp_cast_5 , lerpResult202_g170431 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170431 = ( lerpResult184_g170431 * Model_PositionOS147_g170431 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170431 = temp_output_167_0_g170431;
				#else
				float3 staticSwitch199_g170431 = Model_PositionOS147_g170431;
				#endif
				half3 Final_Position178_g170431 = staticSwitch199_g170431;
				float3 In_PositionOS16_g170433 = Final_Position178_g170431;
				float3 In_PositionWS16_g170433 = Out_PositionWS15_g170432;
				float3 In_PositionWO16_g170433 = Out_PositionWO15_g170432;
				float3 In_PositionRawOS16_g170433 = Out_PositionRawOS15_g170432;
				float3 In_PositionAddOS16_g170433 = Out_PositionAddOS15_g170432;
				float3 temp_output_210_24_g170431 = Out_PivotOS15_g170432;
				float3 In_PivotOS16_g170433 = temp_output_210_24_g170431;
				float3 In_PivotWS16_g170433 = Out_PivotWS15_g170432;
				float3 In_PivotWO16_g170433 = temp_output_210_19_g170431;
				float3 In_NormalOS16_g170433 = Out_NormalOS15_g170432;
				float3 In_NormalWS16_g170433 = Out_NormalWS15_g170432;
				float3 In_NormalRawOS16_g170433 = Out_NormalRawOS15_g170432;
				float3 In_NormalRawWS16_g170433 = Out_NormalRawWS15_g170432;
				float4 In_TangentOS16_g170433 = Out_TangentOS15_g170432;
				float3 In_ViewDirWS16_g170433 = Out_ViewDirWS15_g170432;
				float4 In_VertexData16_g170433 = Out_VertexData15_g170432;
				float4 In_PhaseData16_g170433 = Out_PhaseData15_g170432;
				float4 In_BoundsData16_g170433 = Out_BoundsData15_g170432;
				float4 In_RotationData16_g170433 = Out_RotationData15_g170432;
				{
				Data16_g170433.Dummy = In_Dummy16_g170433;
				Data16_g170433.PositionOS = In_PositionOS16_g170433;
				Data16_g170433.PositionWS = In_PositionWS16_g170433;
				Data16_g170433.PositionWO = In_PositionWO16_g170433;
				Data16_g170433.PositionRawOS = In_PositionRawOS16_g170433;
				Data16_g170433.PositionAddOS = In_PositionAddOS16_g170433;
				Data16_g170433.PivotOS = In_PivotOS16_g170433;
				Data16_g170433.PivotWS = In_PivotWS16_g170433;
				Data16_g170433.PivotWO = In_PivotWO16_g170433;
				Data16_g170433.NormalOS = In_NormalOS16_g170433;
				Data16_g170433.NormalWS = In_NormalWS16_g170433;
				Data16_g170433.NormalRawOS = In_NormalRawOS16_g170433;
				Data16_g170433.NormalRawWS = In_NormalRawWS16_g170433;
				Data16_g170433.TangentOS = In_TangentOS16_g170433;
				Data16_g170433.ViewDirWS = In_ViewDirWS16_g170433;
				Data16_g170433.VertexData = In_VertexData16_g170433;
				Data16_g170433.PhaseData = In_PhaseData16_g170433;
				Data16_g170433.BoundsData = In_BoundsData16_g170433;
				Data16_g170433.RotationData = In_RotationData16_g170433;
				}
				TVEModelData Data15_g170490 = Data16_g170433;
				float Out_Dummy15_g170490 = 0;
				float3 Out_PositionOS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170490 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170490 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170490 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170490 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170490 = float3( 0,0,0 );
				float4 Out_VertexData15_g170490 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170490 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170490 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170490 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170490 = Data15_g170490.Dummy;
				Out_PositionOS15_g170490 = Data15_g170490.PositionOS;
				Out_PositionWS15_g170490 = Data15_g170490.PositionWS;
				Out_PositionWO15_g170490 = Data15_g170490.PositionWO;
				Out_PositionRawOS15_g170490 = Data15_g170490.PositionRawOS;
				Out_PositionAddOS15_g170490 = Data15_g170490.PositionAddOS;
				Out_PivotOS15_g170490 = Data15_g170490.PivotOS;
				Out_PivotWS15_g170490 = Data15_g170490.PivotWS;
				Out_PivotWO15_g170490 = Data15_g170490.PivotWO;
				Out_NormalOS15_g170490 = Data15_g170490.NormalOS;
				Out_NormalWS15_g170490 = Data15_g170490.NormalWS;
				Out_NormalRawOS15_g170490 = Data15_g170490.NormalRawOS;
				Out_NormalRawWS15_g170490 = Data15_g170490.NormalRawWS;
				Out_TangentOS15_g170490 = Data15_g170490.TangentOS;
				Out_ViewDirWS15_g170490 = Data15_g170490.ViewDirWS;
				Out_VertexData15_g170490 = Data15_g170490.VertexData;
				Out_PhaseData15_g170490 = Data15_g170490.PhaseData;
				Out_BoundsData15_g170490 = Data15_g170490.BoundsData;
				Out_RotationData15_g170490 = Data15_g170490.RotationData;
				}
				float3 temp_output_2503_0_g170474 = Out_PositionOS15_g170490;
				float3 In_PositionOS16_g170491 = temp_output_2503_0_g170474;
				float3 temp_output_2503_16_g170474 = Out_PositionWS15_g170490;
				float3 In_PositionWS16_g170491 = temp_output_2503_16_g170474;
				float3 temp_output_2503_17_g170474 = Out_PositionWO15_g170490;
				float3 In_PositionWO16_g170491 = temp_output_2503_17_g170474;
				float3 In_PositionRawOS16_g170491 = Out_PositionRawOS15_g170490;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170474 = Out_VertexData15_g170490;
				half4 Model_VertexMasks518_g170474 = temp_output_2503_29_g170474;
				float4 break1689_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170475 = _motion_small_vert_mode;
				float temp_output_30_0_g170475 = ( break1689_g170474.x * break33_g170475.x );
				float temp_output_29_0_g170475 = ( break1689_g170474.y * break33_g170475.y );
				float temp_output_31_0_g170475 = ( break1689_g170474.z * break33_g170475.z );
				float temp_output_28_0_g170475 = ( temp_output_30_0_g170475 + temp_output_29_0_g170475 + temp_output_31_0_g170475 + ( break1689_g170474.w * break33_g170475.w ) );
				float temp_output_1727_0_g170474 = temp_output_28_0_g170475;
				float4 temp_output_2503_30_g170474 = Out_BoundsData15_g170490;
				half4 Model_BoundsData1322_g170474 = temp_output_2503_30_g170474;
				float4 break33_g170477 = _motion_small_proc_mode;
				float temp_output_30_0_g170477 = ( (Model_BoundsData1322_g170474).z * break33_g170477.x );
				float temp_output_29_0_g170477 = ( (Model_BoundsData1322_g170474).w * break33_g170477.y );
				float temp_output_1734_0_g170474 = ( temp_output_30_0_g170477 + temp_output_29_0_g170477 );
				float lerpResult1906_g170474 = lerp( temp_output_1727_0_g170474 , temp_output_1734_0_g170474 , _motion_small_mask_mode);
				float enc1805_g170474 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170474 = DecodeFloatToVector2( enc1805_g170474 );
				float2 break1804_g170474 = localDecodeFloatToVector21805_g170474;
				half Small_Mask_Legacy1806_g170474 = break1804_g170474.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170474 = Small_Mask_Legacy1806_g170474;
				#else
				float staticSwitch1800_g170474 = lerpResult1906_g170474;
				#endif
				float clampResult17_g170479 = clamp( staticSwitch1800_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170488 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170488 = ( clampResult17_g170479 - temp_output_7_0_g170488 );
				float temp_output_6_0_g170486 = saturate( ( ( temp_output_9_0_g170488 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170486 = ( temp_output_6_0_g170486 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170486 = temp_output_6_0_g170486;
				#endif
				half Small_Mask640_g170474 = staticSwitch14_g170486;
				float4 lerpResult836_g170510 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_MotionParams.w);
				half2 Global_WindDirWS2542_g170474 = ((lerpResult836_g170510).xy*2.0 + -1.0);
				half2 Input_WindDirWS803_g170505 = Global_WindDirWS2542_g170474;
				half3 Model_PositionWO162_g170474 = temp_output_2503_17_g170474;
				half3 Input_ModelPositionWO761_g170492 = Model_PositionWO162_g170474;
				float3 temp_output_2503_19_g170474 = Out_PivotWO15_g170490;
				half3 Model_PivotWO402_g170474 = temp_output_2503_19_g170474;
				half3 Input_ModelPivotsWO419_g170492 = Model_PivotWO402_g170474;
				half Input_MotionPivots629_g170492 = _MotionSmallPivotValue;
				float3 lerpResult771_g170492 = lerp( Input_ModelPositionWO761_g170492 , Input_ModelPivotsWO419_g170492 , Input_MotionPivots629_g170492);
				float4 temp_output_2503_27_g170474 = Out_PhaseData15_g170490;
				half4 Model_PhaseData489_g170474 = temp_output_2503_27_g170474;
				half4 Input_ModelMotionData763_g170492 = Model_PhaseData489_g170474;
				half Input_MotionPhase764_g170492 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170474 = ( lerpResult771_g170492 + ( (Input_ModelMotionData763_g170492).z * Input_MotionPhase764_g170492 * 5.0 ) );
				half3 Input_PositionWO419_g170505 = Small_Position1421_g170474;
				half Input_MotionTilling321_g170505 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170505 = ( -(Input_PositionWO419_g170505).xz * Input_MotionTilling321_g170505 * 0.005 );
				float2 temp_output_3_0_g170507 = Noise_Coord515_g170505;
				float2 temp_output_21_0_g170507 = Input_WindDirWS803_g170505;
				float lerpResult128_g170506 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170505 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170505 = ( lerpResult128_g170506 * 0.02 * Input_MotionSpeed62_g170505 );
				float temp_output_15_0_g170507 = Noise_Speed516_g170505;
				float temp_output_23_0_g170507 = frac( temp_output_15_0_g170507 );
				float4 lerpResult39_g170507 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170507 + ( temp_output_21_0_g170507 * temp_output_23_0_g170507 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170507 + ( temp_output_21_0_g170507 * frac( ( temp_output_15_0_g170507 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170507 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170505 = lerpResult39_g170507;
				half2 Noise_DirWS858_g170505 = ((temp_output_635_0_g170505).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170505 = _MotionSmallNoiseValue;
				half Global_WInd769_g170510 = (lerpResult836_g170510).z;
				TVEGlobalData Data15_g170498 = Data204_g170214;
				float Out_Dummy15_g170498 = 0;
				float4 Out_CoatParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170498 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170498 = Data15_g170498.Dummy;
				Out_CoatParams15_g170498 = Data15_g170498.CoatParams;
				Out_PaintParams15_g170498 = Data15_g170498.PaintParams;
				Out_GlowParams15_g170498 = Data15_g170498.GlowParams;
				Out_AtmoParams15_g170498= Data15_g170498.AtmoParams;
				Out_FadeParams15_g170498= Data15_g170498.FadeParams;
				Out_FormParams15_g170498 = Data15_g170498.FormParams;
				Out_FlowParams15_g170498 = Data15_g170498.FlowParams;
				}
				half4 Global_FlowParams2668_g170474 = Out_FlowParams15_g170498;
				half4 Input_GlobalFlow826_g170510 = Global_FlowParams2668_g170474;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170510 = saturate( (Input_GlobalFlow826_g170510).w );
				#else
				float staticSwitch612_g170510 = Global_WInd769_g170510;
				#endif
				float lerpResult853_g170510 = lerp( staticSwitch612_g170510 , saturate( (staticSwitch612_g170510*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170510 = _MotionIntensityValue;
				half Global_WindValue1855_g170474 = ( lerpResult853_g170510 * Input_MotionValue629_g170510 );
				half Input_WindValue881_g170505 = Global_WindValue1855_g170474;
				float lerpResult701_g170505 = lerp( 1.0 , Input_MotionNoise552_g170505 , Input_WindValue881_g170505);
				float2 lerpResult646_g170505 = lerp( Input_WindDirWS803_g170505 , Noise_DirWS858_g170505 , lerpResult701_g170505);
				half2 Small_DirWS817_g170505 = lerpResult646_g170505;
				float2 break823_g170505 = Small_DirWS817_g170505;
				half4 Noise_Params685_g170505 = temp_output_635_0_g170505;
				half Wind_Sinus820_g170505 = ( ((Noise_Params685_g170505).b*2.0 + -1.0) * Input_MotionNoise552_g170505 * 0.6 );
				float3 appendResult824_g170505 = (float3(break823_g170505.x , Wind_Sinus820_g170505 , break823_g170505.y));
				half Input_MotionDelay753_g170505 = _MotionSmallDelayValue;
				float lerpResult756_g170505 = lerp( 1.0 , ( Input_WindValue881_g170505 * Input_WindValue881_g170505 ) , Input_MotionDelay753_g170505);
				half Wind_Delay815_g170505 = lerpResult756_g170505;
				float3 appendResult825_g170505 = (float3(Wind_Delay815_g170505 , 1.0 , Wind_Delay815_g170505));
				float3 temp_output_827_0_g170505 = ( ( appendResult824_g170505 * Input_WindValue881_g170505 ) * appendResult825_g170505 );
				float2 break857_g170505 = Noise_DirWS858_g170505;
				float3 appendResult833_g170505 = (float3(break857_g170505.x , Wind_Sinus820_g170505 , break857_g170505.y));
				half Global_PushWave2675_g170474 = (Input_GlobalFlow826_g170510).z;
				half Input_PushWave890_g170505 = Global_PushWave2675_g170474;
				float2 temp_output_791_0_g170510 = ((Input_GlobalFlow826_g170510).xy*2.0 + -1.0);
				float temp_output_849_0_g170510 = saturate( length( temp_output_791_0_g170510 ) );
				half Global_PushAlpha1504_g170474 = temp_output_849_0_g170510;
				half Input_PushAlpha806_g170505 = ( Global_PushAlpha1504_g170474 * _MotionSmallPushValue );
				float3 lerpResult840_g170505 = lerp( temp_output_827_0_g170505 , ( appendResult833_g170505 * Input_PushWave890_g170505 ) , Input_PushAlpha806_g170505);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170505 = lerpResult840_g170505;
				#else
				float3 staticSwitch829_g170505 = temp_output_827_0_g170505;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half3 Small_Squash1489_g170474 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170505 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Motion789_g170474 = ( _MotionSmallIntensityValue * Small_Mask640_g170474 * Small_Squash1489_g170474 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170474 = Small_Motion789_g170474;
				#else
				float3 staticSwitch495_g170474 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170474 = temp_output_2503_16_g170474;
				half Global_DistMask1820_g170474 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170474 ) / _MotionDistValue ) ) );
				float4 break1710_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170476 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170476 = ( break1710_g170474.x * break33_g170476.x );
				float temp_output_29_0_g170476 = ( break1710_g170474.y * break33_g170476.y );
				float temp_output_31_0_g170476 = ( break1710_g170474.z * break33_g170476.z );
				float temp_output_28_0_g170476 = ( temp_output_30_0_g170476 + temp_output_29_0_g170476 + temp_output_31_0_g170476 + ( break1710_g170474.w * break33_g170476.w ) );
				float temp_output_1729_0_g170474 = temp_output_28_0_g170476;
				float4 break33_g170478 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170478 = ( (Model_BoundsData1322_g170474).z * break33_g170478.x );
				float temp_output_29_0_g170478 = ( (Model_BoundsData1322_g170474).w * break33_g170478.y );
				float temp_output_1735_0_g170474 = ( temp_output_30_0_g170478 + temp_output_29_0_g170478 );
				float lerpResult1908_g170474 = lerp( temp_output_1729_0_g170474 , temp_output_1735_0_g170474 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170474 = break1804_g170474.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170474 = Tiny_Mask_Legacy1807_g170474;
				#else
				float staticSwitch1810_g170474 = lerpResult1908_g170474;
				#endif
				float clampResult17_g170480 = clamp( staticSwitch1810_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170489 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170489 = ( clampResult17_g170480 - temp_output_7_0_g170489 );
				float temp_output_6_0_g170481 = saturate( ( ( temp_output_9_0_g170489 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170481 = ( temp_output_6_0_g170481 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170481 = temp_output_6_0_g170481;
				#endif
				half Tiny_Mask218_g170474 = staticSwitch14_g170481;
				float3 temp_output_2503_20_g170474 = Out_NormalOS15_g170490;
				half3 Model_NormalOS554_g170474 = temp_output_2503_20_g170474;
				half3 Input_NormalOS533_g170494 = Model_NormalOS554_g170474;
				half3 Tiny_Position2469_g170474 = Model_PositionWO162_g170474;
				half3 Input_PositionWO500_g170494 = Tiny_Position2469_g170474;
				half Input_MotionTilling321_g170494 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170496 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170494 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170494 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170494).xz * Input_MotionTilling321_g170494 * 0.005 ) + ( lerpResult128_g170496 * Input_MotionSpeed62_g170494 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170494 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170494 = lerp( ( Input_NormalOS533_g170494 * Flutter_Noise535_g170494 ) , Flutter_Noise535_g170494 , Input_MotionNoise542_g170494);
				half3 Input_ModelPositionWO761_g170493 = Model_PositionWO162_g170474;
				half3 Input_ModelPivotsWO419_g170493 = Model_PivotWO402_g170474;
				half Input_MotionPivots629_g170493 = _MotionBasePivotValue;
				float3 lerpResult771_g170493 = lerp( Input_ModelPositionWO761_g170493 , Input_ModelPivotsWO419_g170493 , Input_MotionPivots629_g170493);
				half4 Input_ModelMotionData763_g170493 = Model_PhaseData489_g170474;
				half Input_MotionPhase764_g170493 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170474 = ( lerpResult771_g170493 + ( (Input_ModelMotionData763_g170493).z * Input_MotionPhase764_g170493 * 5.0 ) );
				half3 Input_PositionWO419_g170499 = Base_Position1394_g170474;
				half Input_MotionTilling321_g170499 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170499 = ( -(Input_PositionWO419_g170499).xz * Input_MotionTilling321_g170499 * 0.005 );
				float2 temp_output_3_0_g170501 = Noise_Coord515_g170499;
				half2 Input_WindDirWS803_g170499 = Global_WindDirWS2542_g170474;
				float2 temp_output_21_0_g170501 = Input_WindDirWS803_g170499;
				float lerpResult128_g170500 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170499 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170499 = ( lerpResult128_g170500 * 0.02 * Input_MotionSpeed62_g170499 );
				float temp_output_15_0_g170501 = Noise_Speed516_g170499;
				float temp_output_23_0_g170501 = frac( temp_output_15_0_g170501 );
				float4 lerpResult39_g170501 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170501 + ( temp_output_21_0_g170501 * temp_output_23_0_g170501 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170501 + ( temp_output_21_0_g170501 * frac( ( temp_output_15_0_g170501 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170501 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170499 = lerpResult39_g170501;
				half4 Noise_Params685_g170499 = temp_output_635_0_g170499;
				half Input_WindValue853_g170499 = Global_WindValue1855_g170474;
				float temp_output_855_0_g170499 = ( (Noise_Params685_g170499).a * Input_WindValue853_g170499 );
				half Input_PushWave858_g170499 = Global_PushWave2675_g170474;
				half Input_PushAlpha806_g170499 = ( Global_PushAlpha1504_g170474 * _MotionBasePushValue );
				float lerpResult831_g170499 = lerp( temp_output_855_0_g170499 , Input_PushWave858_g170499 , Input_PushAlpha806_g170499);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170499 = lerpResult831_g170499;
				#else
				float staticSwitch828_g170499 = temp_output_855_0_g170499;
				#endif
				half Base_Wave1159_g170474 = staticSwitch828_g170499;
				float temp_output_888_0_g170505 = ( (Noise_Params685_g170505).b * Input_WindValue881_g170505 );
				float lerpResult867_g170505 = lerp( temp_output_888_0_g170505 , ( (Noise_Params685_g170505).b * Input_PushWave890_g170505 ) , Input_PushAlpha806_g170505);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170505 = lerpResult867_g170505;
				#else
				float staticSwitch886_g170505 = temp_output_888_0_g170505;
				#endif
				half Small_Wave1427_g170474 = staticSwitch886_g170505;
				float lerpResult2422_g170474 = lerp( Base_Wave1159_g170474 , Small_Wave1427_g170474 , _motion_small_mode);
				half Global_Wave1475_g170474 = lerpResult2422_g170474;
				half Input_GlobalWave546_g170494 = Global_Wave1475_g170474;
				float temp_output_548_0_g170494 = ( Input_GlobalWave546_g170494 * Input_GlobalWave546_g170494 );
				half Flutter_Wave556_g170494 = temp_output_548_0_g170494;
				half3 Tiny_Noise859_g170474 = ( lerpResult537_g170494 * Flutter_Wave556_g170494 );
				half3 Tiny_Flutter1451_g170474 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170474 * Tiny_Mask218_g170474 * Tiny_Noise859_g170474 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170474 = Tiny_Flutter1451_g170474;
				#else
				float3 staticSwitch414_g170474 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170474 = ( staticSwitch495_g170474 + staticSwitch414_g170474 );
				float3 In_PositionAddOS16_g170491 = Final_PositionADD1569_g170474;
				float3 temp_output_2503_24_g170474 = Out_PivotOS15_g170490;
				float3 In_PivotOS16_g170491 = temp_output_2503_24_g170474;
				float3 In_PivotWS16_g170491 = Out_PivotWS15_g170490;
				float3 In_PivotWO16_g170491 = temp_output_2503_19_g170474;
				float3 In_NormalOS16_g170491 = temp_output_2503_20_g170474;
				float3 In_NormalWS16_g170491 = Out_NormalWS15_g170490;
				float3 In_NormalRawOS16_g170491 = Out_NormalRawOS15_g170490;
				float3 In_NormalRawWS16_g170491 = Out_NormalRawWS15_g170490;
				float4 In_TangentOS16_g170491 = Out_TangentOS15_g170490;
				float3 In_ViewDirWS16_g170491 = Out_ViewDirWS15_g170490;
				float4 In_VertexData16_g170491 = temp_output_2503_29_g170474;
				float4 In_PhaseData16_g170491 = temp_output_2503_27_g170474;
				float4 In_BoundsData16_g170491 = temp_output_2503_30_g170474;
				float4 break748_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170483 = _motion_base_vert_mode;
				float temp_output_30_0_g170483 = ( break748_g170474.x * break33_g170483.x );
				float temp_output_29_0_g170483 = ( break748_g170474.y * break33_g170483.y );
				float temp_output_31_0_g170483 = ( break748_g170474.z * break33_g170483.z );
				float temp_output_28_0_g170483 = ( temp_output_30_0_g170483 + temp_output_29_0_g170483 + temp_output_31_0_g170483 + ( break748_g170474.w * break33_g170483.w ) );
				float temp_output_1731_0_g170474 = temp_output_28_0_g170483;
				float4 break33_g170484 = _motion_base_proc_mode;
				float temp_output_30_0_g170484 = ( (Model_BoundsData1322_g170474).z * break33_g170484.x );
				float temp_output_29_0_g170484 = ( (Model_BoundsData1322_g170474).w * break33_g170484.y );
				float temp_output_1733_0_g170474 = ( temp_output_30_0_g170484 + temp_output_29_0_g170484 );
				float lerpResult1904_g170474 = lerp( temp_output_1731_0_g170474 , temp_output_1733_0_g170474 , _motion_base_mask_mode);
				float clampResult17_g170482 = clamp( lerpResult1904_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170487 = ( clampResult17_g170482 - temp_output_7_0_g170487 );
				float temp_output_6_0_g170485 = saturate( ( ( temp_output_9_0_g170487 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170485 = ( temp_output_6_0_g170485 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170485 = temp_output_6_0_g170485;
				#endif
				half Base_Mask217_g170474 = staticSwitch14_g170485;
				half2 Noise_DirWS825_g170499 = ((temp_output_635_0_g170499).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170499 = _MotionBaseNoiseValue;
				float lerpResult701_g170499 = lerp( 1.0 , Input_MotionNoise552_g170499 , Input_WindValue853_g170499);
				float2 lerpResult646_g170499 = lerp( Input_WindDirWS803_g170499 , Noise_DirWS825_g170499 , lerpResult701_g170499);
				half Input_MotionDelay753_g170499 = _MotionBaseDelayValue;
				float lerpResult756_g170499 = lerp( 1.0 , ( Input_WindValue853_g170499 * Input_WindValue853_g170499 ) , Input_MotionDelay753_g170499);
				half Wind_Delay815_g170499 = lerpResult756_g170499;
				float2 temp_output_809_0_g170499 = ( lerpResult646_g170499 * Input_WindValue853_g170499 * Wind_Delay815_g170499 );
				half2 Global_PushDirWS1972_g170474 = temp_output_791_0_g170510;
				half2 Input_PushDirWS807_g170499 = Global_PushDirWS1972_g170474;
				float2 lerpResult811_g170499 = lerp( temp_output_809_0_g170499 , Input_PushDirWS807_g170499 , Input_PushAlpha806_g170499);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170499 = lerpResult811_g170499;
				#else
				float2 staticSwitch808_g170499 = temp_output_809_0_g170499;
				#endif
				float2 break83_g170504 = staticSwitch808_g170499;
				float3 appendResult79_g170504 = (float3(break83_g170504.x , 0.0 , break83_g170504.y));
				half2 Base_Bending893_g170474 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170504 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170474 = ( _MotionBaseIntensityValue * Base_Mask217_g170474 * Base_Bending893_g170474 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170474 = Base_Motion1440_g170474;
				#else
				float2 staticSwitch2384_g170474 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170474 = (float4(staticSwitch2384_g170474 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170474 = appendResult2023_g170474;
				float4 In_RotationData16_g170491 = Final_RotationData1570_g170474;
				{
				Data16_g170491.Dummy = In_Dummy16_g170491;
				Data16_g170491.PositionOS = In_PositionOS16_g170491;
				Data16_g170491.PositionWS = In_PositionWS16_g170491;
				Data16_g170491.PositionWO = In_PositionWO16_g170491;
				Data16_g170491.PositionRawOS = In_PositionRawOS16_g170491;
				Data16_g170491.PositionAddOS = In_PositionAddOS16_g170491;
				Data16_g170491.PivotOS = In_PivotOS16_g170491;
				Data16_g170491.PivotWS = In_PivotWS16_g170491;
				Data16_g170491.PivotWO = In_PivotWO16_g170491;
				Data16_g170491.NormalOS = In_NormalOS16_g170491;
				Data16_g170491.NormalWS = In_NormalWS16_g170491;
				Data16_g170491.NormalRawOS = In_NormalRawOS16_g170491;
				Data16_g170491.NormalRawWS = In_NormalRawWS16_g170491;
				Data16_g170491.TangentOS = In_TangentOS16_g170491;
				Data16_g170491.ViewDirWS = In_ViewDirWS16_g170491;
				Data16_g170491.VertexData = In_VertexData16_g170491;
				Data16_g170491.PhaseData = In_PhaseData16_g170491;
				Data16_g170491.BoundsData = In_BoundsData16_g170491;
				Data16_g170491.RotationData = In_RotationData16_g170491;
				}
				TVEModelData Data15_g170720 = Data16_g170491;
				float Out_Dummy15_g170720 = 0;
				float3 Out_PositionOS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170720 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170720 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170720 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170720 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170720 = float3( 0,0,0 );
				float4 Out_VertexData15_g170720 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170720 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170720 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170720 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170720 = Data15_g170720.Dummy;
				Out_PositionOS15_g170720 = Data15_g170720.PositionOS;
				Out_PositionWS15_g170720 = Data15_g170720.PositionWS;
				Out_PositionWO15_g170720 = Data15_g170720.PositionWO;
				Out_PositionRawOS15_g170720 = Data15_g170720.PositionRawOS;
				Out_PositionAddOS15_g170720 = Data15_g170720.PositionAddOS;
				Out_PivotOS15_g170720 = Data15_g170720.PivotOS;
				Out_PivotWS15_g170720 = Data15_g170720.PivotWS;
				Out_PivotWO15_g170720 = Data15_g170720.PivotWO;
				Out_NormalOS15_g170720 = Data15_g170720.NormalOS;
				Out_NormalWS15_g170720 = Data15_g170720.NormalWS;
				Out_NormalRawOS15_g170720 = Data15_g170720.NormalRawOS;
				Out_NormalRawWS15_g170720 = Data15_g170720.NormalRawWS;
				Out_TangentOS15_g170720 = Data15_g170720.TangentOS;
				Out_ViewDirWS15_g170720 = Data15_g170720.ViewDirWS;
				Out_VertexData15_g170720 = Data15_g170720.VertexData;
				Out_PhaseData15_g170720 = Data15_g170720.PhaseData;
				Out_BoundsData15_g170720 = Data15_g170720.BoundsData;
				Out_RotationData15_g170720 = Data15_g170720.RotationData;
				}
				half3 Model_PositionOS147_g170719 = Out_PositionOS15_g170720;
				half3 Input_False58_g170722 = Model_PositionOS147_g170719;
				half3 VertexPos40_g170723 = Model_PositionOS147_g170719;
				half3 VertexPos40_g170724 = VertexPos40_g170723;
				float3 appendResult74_g170724 = (float3(VertexPos40_g170724.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170724 = appendResult74_g170724;
				float3 break84_g170724 = VertexPos40_g170724;
				float3 appendResult81_g170724 = (float3(0.0 , break84_g170724.y , break84_g170724.z));
				half3 VertexPosOtherAxis82_g170724 = appendResult81_g170724;
				float4 temp_output_1567_33_g170719 = Out_RotationData15_g170720;
				half4 Model_VertexBend1569_g170719 = temp_output_1567_33_g170719;
				half2 Angle44_g170723 = (Model_VertexBend1569_g170719).xy;
				half Angle44_g170724 = (Angle44_g170723).y;
				half3 VertexPos40_g170725 = ( VertexPosRotationAxis50_g170724 + ( VertexPosOtherAxis82_g170724 * cos( Angle44_g170724 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170724 ) * sin( Angle44_g170724 ) ) );
				float3 appendResult74_g170725 = (float3(0.0 , 0.0 , VertexPos40_g170725.z));
				half3 VertexPosRotationAxis50_g170725 = appendResult74_g170725;
				float3 break84_g170725 = VertexPos40_g170725;
				float3 appendResult81_g170725 = (float3(break84_g170725.x , break84_g170725.y , 0.0));
				half3 VertexPosOtherAxis82_g170725 = appendResult81_g170725;
				half Angle44_g170725 = -(Angle44_g170723).x;
				half3 Input_True57_g170722 = ( VertexPosRotationAxis50_g170725 + ( VertexPosOtherAxis82_g170725 * cos( Angle44_g170725 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170725 ) * sin( Angle44_g170725 ) ) );
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170722 = Input_True57_g170722;
				#else
				float3 staticSwitch65_g170722 = Input_False58_g170722;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170722 = Input_True57_g170722;
				#else
				float3 staticSwitch69_g170722 = staticSwitch65_g170722;
				#endif
				float3 temp_output_1578_0_g170719 = staticSwitch69_g170722;
				float3 temp_output_1567_31_g170719 = Out_PositionAddOS15_g170720;
				half3 Model_PositionADD1568_g170719 = temp_output_1567_31_g170719;
				half3 Final_PositionOS178_g170719 = ( temp_output_1578_0_g170719 + Model_PositionADD1568_g170719 );
				float3 In_PositionOS16_g170721 = Final_PositionOS178_g170719;
				float3 In_PositionWS16_g170721 = Out_PositionWS15_g170720;
				float3 In_PositionWO16_g170721 = Out_PositionWO15_g170720;
				float3 In_PositionRawOS16_g170721 = Out_PositionRawOS15_g170720;
				float3 In_PositionAddOS16_g170721 = temp_output_1567_31_g170719;
				float3 In_PivotOS16_g170721 = Out_PivotOS15_g170720;
				float3 In_PivotWS16_g170721 = Out_PivotWS15_g170720;
				float3 In_PivotWO16_g170721 = Out_PivotWO15_g170720;
				float3 In_NormalOS16_g170721 = Out_NormalOS15_g170720;
				float3 In_NormalWS16_g170721 = Out_NormalWS15_g170720;
				float3 In_NormalRawOS16_g170721 = Out_NormalRawOS15_g170720;
				float3 In_NormalRawWS16_g170721 = Out_NormalRawWS15_g170720;
				float4 In_TangentOS16_g170721 = Out_TangentOS15_g170720;
				float3 In_ViewDirWS16_g170721 = Out_ViewDirWS15_g170720;
				float4 In_VertexData16_g170721 = Out_VertexData15_g170720;
				float4 In_PhaseData16_g170721 = Out_PhaseData15_g170720;
				float4 In_BoundsData16_g170721 = Out_BoundsData15_g170720;
				float4 In_RotationData16_g170721 = temp_output_1567_33_g170719;
				{
				Data16_g170721.Dummy = In_Dummy16_g170721;
				Data16_g170721.PositionOS = In_PositionOS16_g170721;
				Data16_g170721.PositionWS = In_PositionWS16_g170721;
				Data16_g170721.PositionWO = In_PositionWO16_g170721;
				Data16_g170721.PositionRawOS = In_PositionRawOS16_g170721;
				Data16_g170721.PositionAddOS = In_PositionAddOS16_g170721;
				Data16_g170721.PivotOS = In_PivotOS16_g170721;
				Data16_g170721.PivotWS = In_PivotWS16_g170721;
				Data16_g170721.PivotWO = In_PivotWO16_g170721;
				Data16_g170721.NormalOS = In_NormalOS16_g170721;
				Data16_g170721.NormalWS = In_NormalWS16_g170721;
				Data16_g170721.NormalRawOS = In_NormalRawOS16_g170721;
				Data16_g170721.NormalRawWS = In_NormalRawWS16_g170721;
				Data16_g170721.TangentOS = In_TangentOS16_g170721;
				Data16_g170721.ViewDirWS = In_ViewDirWS16_g170721;
				Data16_g170721.VertexData = In_VertexData16_g170721;
				Data16_g170721.PhaseData = In_PhaseData16_g170721;
				Data16_g170721.BoundsData = In_BoundsData16_g170721;
				Data16_g170721.RotationData = In_RotationData16_g170721;
				}
				TVEModelData Data15_g170744 = Data16_g170721;
				float Out_Dummy15_g170744 = 0;
				float3 Out_PositionOS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170744 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170744 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170744 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170744 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170744 = float3( 0,0,0 );
				float4 Out_VertexData15_g170744 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170744 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170744 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170744 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170744 = Data15_g170744.Dummy;
				Out_PositionOS15_g170744 = Data15_g170744.PositionOS;
				Out_PositionWS15_g170744 = Data15_g170744.PositionWS;
				Out_PositionWO15_g170744 = Data15_g170744.PositionWO;
				Out_PositionRawOS15_g170744 = Data15_g170744.PositionRawOS;
				Out_PositionAddOS15_g170744 = Data15_g170744.PositionAddOS;
				Out_PivotOS15_g170744 = Data15_g170744.PivotOS;
				Out_PivotWS15_g170744 = Data15_g170744.PivotWS;
				Out_PivotWO15_g170744 = Data15_g170744.PivotWO;
				Out_NormalOS15_g170744 = Data15_g170744.NormalOS;
				Out_NormalWS15_g170744 = Data15_g170744.NormalWS;
				Out_NormalRawOS15_g170744 = Data15_g170744.NormalRawOS;
				Out_NormalRawWS15_g170744 = Data15_g170744.NormalRawWS;
				Out_TangentOS15_g170744 = Data15_g170744.TangentOS;
				Out_ViewDirWS15_g170744 = Data15_g170744.ViewDirWS;
				Out_VertexData15_g170744 = Data15_g170744.VertexData;
				Out_PhaseData15_g170744 = Data15_g170744.PhaseData;
				Out_BoundsData15_g170744 = Data15_g170744.BoundsData;
				Out_RotationData15_g170744 = Data15_g170744.RotationData;
				}
				float3 In_PositionOS16_g170745 = Out_PositionOS15_g170744;
				float3 In_PositionWS16_g170745 = Out_PositionWS15_g170744;
				float3 temp_output_1567_17_g170743 = Out_PositionWO15_g170744;
				float3 In_PositionWO16_g170745 = temp_output_1567_17_g170743;
				float3 temp_output_1567_26_g170743 = Out_PositionRawOS15_g170744;
				float3 In_PositionRawOS16_g170745 = temp_output_1567_26_g170743;
				float3 In_PositionAddOS16_g170745 = Out_PositionAddOS15_g170744;
				float3 In_PivotOS16_g170745 = Out_PivotOS15_g170744;
				float3 In_PivotWS16_g170745 = Out_PivotWS15_g170744;
				float3 In_PivotWO16_g170745 = Out_PivotWO15_g170744;
				half3 Model_NormalOS1568_g170743 = Out_NormalOS15_g170744;
				float3 lerpResult1589_g170743 = lerp( Model_NormalOS1568_g170743 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170743 = temp_output_1567_26_g170743;
				float3 normalizeResult1594_g170743 = ASESafeNormalize( ( Model_PositionRAW1592_g170743 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170743 = lerp( lerpResult1589_g170743 , normalizeResult1594_g170743 , _NormalSphereValue);
				half3 Input_False58_g170758 = lerpResult1585_g170743;
				half3 VertexPos40_g170747 = lerpResult1585_g170743;
				half3 VertexPos40_g170748 = VertexPos40_g170747;
				float3 appendResult74_g170748 = (float3(VertexPos40_g170748.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170748 = appendResult74_g170748;
				float3 break84_g170748 = VertexPos40_g170748;
				float3 appendResult81_g170748 = (float3(0.0 , break84_g170748.y , break84_g170748.z));
				half3 VertexPosOtherAxis82_g170748 = appendResult81_g170748;
				float4 temp_output_1567_33_g170743 = Out_RotationData15_g170744;
				half4 Model_RotationData1583_g170743 = temp_output_1567_33_g170743;
				half2 Angle44_g170747 = Model_RotationData1583_g170743.xy;
				half Angle44_g170748 = (Angle44_g170747).y;
				half3 VertexPos40_g170749 = ( VertexPosRotationAxis50_g170748 + ( VertexPosOtherAxis82_g170748 * cos( Angle44_g170748 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170748 ) * sin( Angle44_g170748 ) ) );
				float3 appendResult74_g170749 = (float3(0.0 , 0.0 , VertexPos40_g170749.z));
				half3 VertexPosRotationAxis50_g170749 = appendResult74_g170749;
				float3 break84_g170749 = VertexPos40_g170749;
				float3 appendResult81_g170749 = (float3(break84_g170749.x , break84_g170749.y , 0.0));
				half3 VertexPosOtherAxis82_g170749 = appendResult81_g170749;
				half Angle44_g170749 = -(Angle44_g170747).x;
				float3 lerpResult1591_g170743 = lerp( lerpResult1585_g170743 , ( VertexPosRotationAxis50_g170749 + ( VertexPosOtherAxis82_g170749 * cos( Angle44_g170749 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170749 ) * sin( Angle44_g170749 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170758 = lerpResult1591_g170743;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170758 = Input_True57_g170758;
				#else
				float3 staticSwitch65_g170758 = Input_False58_g170758;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170758 = Input_True57_g170758;
				#else
				float3 staticSwitch69_g170758 = staticSwitch65_g170758;
				#endif
				float3 temp_output_1715_0_g170743 = staticSwitch69_g170758;
				float4 temp_output_1567_29_g170743 = Out_VertexData15_g170744;
				half4 Model_VertexData1608_g170743 = temp_output_1567_29_g170743;
				float4 break1683_g170743 = Model_VertexData1608_g170743;
				float4 break33_g170750 = _normal_vert_mode;
				float temp_output_30_0_g170750 = ( break1683_g170743.x * break33_g170750.x );
				float temp_output_29_0_g170750 = ( break1683_g170743.y * break33_g170750.y );
				float temp_output_31_0_g170750 = ( break1683_g170743.z * break33_g170750.z );
				float temp_output_28_0_g170750 = ( temp_output_30_0_g170750 + temp_output_29_0_g170750 + temp_output_31_0_g170750 + ( break1683_g170743.w * break33_g170750.w ) );
				float clampResult17_g170751 = clamp( temp_output_28_0_g170750 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170755 = _NormalMeshRemap.x;
				float temp_output_9_0_g170755 = ( clampResult17_g170751 - temp_output_7_0_g170755 );
				float lerpResult1695_g170743 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170755 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170752 = lerpResult1695_g170743;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170752 = ( temp_output_6_0_g170752 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170752 = temp_output_6_0_g170752;
				#endif
				float temp_output_1690_0_g170743 = staticSwitch14_g170752;
				half Normal_MeskMask1691_g170743 = temp_output_1690_0_g170743;
				half Normal_Proj_Mask1647_g170743 = 1.0;
				float temp_output_1699_0_g170743 = ( Normal_MeskMask1691_g170743 * Normal_Proj_Mask1647_g170743 );
				float3 lerpResult1670_g170743 = lerp( Model_NormalOS1568_g170743 , temp_output_1715_0_g170743 , temp_output_1699_0_g170743);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170743 = lerpResult1670_g170743;
				#else
				float3 staticSwitch1716_g170743 = Model_NormalOS1568_g170743;
				#endif
				half3 Final_NormalOS178_g170743 = staticSwitch1716_g170743;
				float3 In_NormalOS16_g170745 = Final_NormalOS178_g170743;
				float3 temp_output_1567_21_g170743 = Out_NormalWS15_g170744;
				float3 In_NormalWS16_g170745 = temp_output_1567_21_g170743;
				float3 In_NormalRawOS16_g170745 = Out_NormalRawOS15_g170744;
				float3 In_NormalRawWS16_g170745 = Out_NormalRawWS15_g170744;
				float4 In_TangentOS16_g170745 = Out_TangentOS15_g170744;
				float3 In_ViewDirWS16_g170745 = Out_ViewDirWS15_g170744;
				float4 In_VertexData16_g170745 = temp_output_1567_29_g170743;
				float4 In_PhaseData16_g170745 = Out_PhaseData15_g170744;
				float4 In_BoundsData16_g170745 = Out_BoundsData15_g170744;
				float4 In_RotationData16_g170745 = temp_output_1567_33_g170743;
				{
				Data16_g170745.Dummy = In_Dummy16_g170745;
				Data16_g170745.PositionOS = In_PositionOS16_g170745;
				Data16_g170745.PositionWS = In_PositionWS16_g170745;
				Data16_g170745.PositionWO = In_PositionWO16_g170745;
				Data16_g170745.PositionRawOS = In_PositionRawOS16_g170745;
				Data16_g170745.PositionAddOS = In_PositionAddOS16_g170745;
				Data16_g170745.PivotOS = In_PivotOS16_g170745;
				Data16_g170745.PivotWS = In_PivotWS16_g170745;
				Data16_g170745.PivotWO = In_PivotWO16_g170745;
				Data16_g170745.NormalOS = In_NormalOS16_g170745;
				Data16_g170745.NormalWS = In_NormalWS16_g170745;
				Data16_g170745.NormalRawOS = In_NormalRawOS16_g170745;
				Data16_g170745.NormalRawWS = In_NormalRawWS16_g170745;
				Data16_g170745.TangentOS = In_TangentOS16_g170745;
				Data16_g170745.ViewDirWS = In_ViewDirWS16_g170745;
				Data16_g170745.VertexData = In_VertexData16_g170745;
				Data16_g170745.PhaseData = In_PhaseData16_g170745;
				Data16_g170745.BoundsData = In_BoundsData16_g170745;
				Data16_g170745.RotationData = In_RotationData16_g170745;
				}
				TVEModelData Data15_g170760 = Data16_g170745;
				float Out_Dummy15_g170760 = 0;
				float3 Out_PositionOS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170760 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170760 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170760 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170760 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170760 = float3( 0,0,0 );
				float4 Out_VertexData15_g170760 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170760 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170760 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170760 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170760 = Data15_g170760.Dummy;
				Out_PositionOS15_g170760 = Data15_g170760.PositionOS;
				Out_PositionWS15_g170760 = Data15_g170760.PositionWS;
				Out_PositionWO15_g170760 = Data15_g170760.PositionWO;
				Out_PositionRawOS15_g170760 = Data15_g170760.PositionRawOS;
				Out_PositionAddOS15_g170760 = Data15_g170760.PositionAddOS;
				Out_PivotOS15_g170760 = Data15_g170760.PivotOS;
				Out_PivotWS15_g170760 = Data15_g170760.PivotWS;
				Out_PivotWO15_g170760 = Data15_g170760.PivotWO;
				Out_NormalOS15_g170760 = Data15_g170760.NormalOS;
				Out_NormalWS15_g170760 = Data15_g170760.NormalWS;
				Out_NormalRawOS15_g170760 = Data15_g170760.NormalRawOS;
				Out_NormalRawWS15_g170760 = Data15_g170760.NormalRawWS;
				Out_TangentOS15_g170760 = Data15_g170760.TangentOS;
				Out_ViewDirWS15_g170760 = Data15_g170760.ViewDirWS;
				Out_VertexData15_g170760 = Data15_g170760.VertexData;
				Out_PhaseData15_g170760 = Data15_g170760.PhaseData;
				Out_BoundsData15_g170760 = Data15_g170760.BoundsData;
				Out_RotationData15_g170760 = Data15_g170760.RotationData;
				}
				float3 temp_output_217_24_g170759 = Out_PivotOS15_g170760;
				float3 In_PositionOS16_g170761 = ( Out_PositionOS15_g170760 + temp_output_217_24_g170759 );
				float3 In_PositionWS16_g170761 = Out_PositionWS15_g170760;
				float3 In_PositionWO16_g170761 = Out_PositionWO15_g170760;
				float3 In_PositionRawOS16_g170761 = Out_PositionRawOS15_g170760;
				float3 In_PositionAddOS16_g170761 = Out_PositionAddOS15_g170760;
				float3 In_PivotOS16_g170761 = temp_output_217_24_g170759;
				float3 In_PivotWS16_g170761 = Out_PivotWS15_g170760;
				float3 In_PivotWO16_g170761 = Out_PivotWO15_g170760;
				float3 In_NormalOS16_g170761 = Out_NormalOS15_g170760;
				float3 In_NormalWS16_g170761 = Out_NormalWS15_g170760;
				float3 In_NormalRawOS16_g170761 = Out_NormalRawOS15_g170760;
				float3 In_NormalRawWS16_g170761 = Out_NormalRawWS15_g170760;
				float4 In_TangentOS16_g170761 = Out_TangentOS15_g170760;
				float3 In_ViewDirWS16_g170761 = Out_ViewDirWS15_g170760;
				float4 In_VertexData16_g170761 = Out_VertexData15_g170760;
				float4 In_PhaseData16_g170761 = Out_PhaseData15_g170760;
				float4 In_BoundsData16_g170761 = Out_BoundsData15_g170760;
				float4 In_RotationData16_g170761 = Out_RotationData15_g170760;
				{
				Data16_g170761.Dummy = In_Dummy16_g170761;
				Data16_g170761.PositionOS = In_PositionOS16_g170761;
				Data16_g170761.PositionWS = In_PositionWS16_g170761;
				Data16_g170761.PositionWO = In_PositionWO16_g170761;
				Data16_g170761.PositionRawOS = In_PositionRawOS16_g170761;
				Data16_g170761.PositionAddOS = In_PositionAddOS16_g170761;
				Data16_g170761.PivotOS = In_PivotOS16_g170761;
				Data16_g170761.PivotWS = In_PivotWS16_g170761;
				Data16_g170761.PivotWO = In_PivotWO16_g170761;
				Data16_g170761.NormalOS = In_NormalOS16_g170761;
				Data16_g170761.NormalWS = In_NormalWS16_g170761;
				Data16_g170761.NormalRawOS = In_NormalRawOS16_g170761;
				Data16_g170761.NormalRawWS = In_NormalRawWS16_g170761;
				Data16_g170761.TangentOS = In_TangentOS16_g170761;
				Data16_g170761.ViewDirWS = In_ViewDirWS16_g170761;
				Data16_g170761.VertexData = In_VertexData16_g170761;
				Data16_g170761.PhaseData = In_PhaseData16_g170761;
				Data16_g170761.BoundsData = In_BoundsData16_g170761;
				Data16_g170761.RotationData = In_RotationData16_g170761;
				}
				TVEModelData Data15_g170774 = Data16_g170761;
				float Out_Dummy15_g170774 = 0;
				float3 Out_PositionOS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170774 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170774 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170774 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170774 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170774 = float3( 0,0,0 );
				float4 Out_VertexData15_g170774 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170774 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170774 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170774 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170774 = Data15_g170774.Dummy;
				Out_PositionOS15_g170774 = Data15_g170774.PositionOS;
				Out_PositionWS15_g170774 = Data15_g170774.PositionWS;
				Out_PositionWO15_g170774 = Data15_g170774.PositionWO;
				Out_PositionRawOS15_g170774 = Data15_g170774.PositionRawOS;
				Out_PositionAddOS15_g170774 = Data15_g170774.PositionAddOS;
				Out_PivotOS15_g170774 = Data15_g170774.PivotOS;
				Out_PivotWS15_g170774 = Data15_g170774.PivotWS;
				Out_PivotWO15_g170774 = Data15_g170774.PivotWO;
				Out_NormalOS15_g170774 = Data15_g170774.NormalOS;
				Out_NormalWS15_g170774 = Data15_g170774.NormalWS;
				Out_NormalRawOS15_g170774 = Data15_g170774.NormalRawOS;
				Out_NormalRawWS15_g170774 = Data15_g170774.NormalRawWS;
				Out_TangentOS15_g170774 = Data15_g170774.TangentOS;
				Out_ViewDirWS15_g170774 = Data15_g170774.ViewDirWS;
				Out_VertexData15_g170774 = Data15_g170774.VertexData;
				Out_PhaseData15_g170774 = Data15_g170774.PhaseData;
				Out_BoundsData15_g170774 = Data15_g170774.BoundsData;
				Out_RotationData15_g170774 = Data15_g170774.RotationData;
				}
				float3 temp_output_31_0_g170771 = Out_PositionOS15_g170774;
				float3 temp_output_6_0_g170785 = ( temp_output_31_0_g170771 + _DisableSRPBatcher );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170785 = ( temp_output_6_0_g170785 + ( 0.0 * 0.0 ) );
				#else
				float3 staticSwitch14_g170785 = temp_output_6_0_g170785;
				#endif
				
				output.ase_texcoord9.xyz = vertexToFrag73_g170196;
				output.ase_texcoord10.xyz = vertexToFrag76_g170196;
				float3 ase_tangentWS = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				float ase_tangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_bitangentWS = cross( ase_normalWS, ase_tangentWS ) * ase_tangentSign;
				output.ase_texcoord11.xyz = ase_bitangentWS;
				float temp_output_6_0_g170497 = ( _MotionHighlightValue * Global_DistMask1820_g170474 * ( Tiny_Mask218_g170474 * Tiny_Mask218_g170474 ) * ( Global_Wave1475_g170474 * Global_Wave1475_g170474 * Global_Wave1475_g170474 * Global_Wave1475_g170474 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Wave_Mask4324 = staticSwitch14_g170497;
				float4 appendResult23_g170573 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask4324));
				float4 vertexToFrag24_g170573 = appendResult23_g170573;
				output.ase_texcoord12 = vertexToFrag24_g170573;
				
				output.ase_texcoord8 = inputMesh.ase_texcoord;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord9.w = 0;
				output.ase_texcoord10.w = 0;
				output.ase_texcoord11.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = staticSwitch14_g170785;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif
				inputMesh.normalOS = Out_NormalOS15_g170774;
				inputMesh.tangentOS = Out_TangentOS15_g170774;
				return inputMesh;
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh)
			{
				PackedVaryingsMeshToPS output = (PackedVaryingsMeshToPS)0;
				AttributesMesh defaultMesh = inputMesh;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				inputMesh = ApplyMeshModification( inputMesh, _TimeParameters.xyz, output);

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
				float4 VPASSpreviousPositionCS;
				float4 VPASSpositionCS = mul(UNITY_MATRIX_UNJITTERED_VP, float4(positionRWS, 1.0));

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if (forceNoMotion)
				{
					VPASSpreviousPositionCS = float4(0.0, 0.0, 0.0, 1.0);
				}
				else
				{
					bool hasDeformation = unity_MotionVectorsParams.x > 0.0;
					float3 effectivePositionOS = (hasDeformation ? inputMesh.previousPositionOS : defaultMesh.positionOS);
					#if defined(_ADD_PRECOMPUTED_VELOCITY)
					effectivePositionOS -= inputMesh.precomputedVelocity;
					#endif

					#if defined(HAVE_MESH_MODIFICATION)
						AttributesMesh previousMesh = defaultMesh;
						previousMesh.positionOS = effectivePositionOS ;
						PackedVaryingsMeshToPS test = (PackedVaryingsMeshToPS)0;
						float3 curTime = _TimeParameters.xyz;
						previousMesh = ApplyMeshModification(previousMesh, _LastTimeParameters.xyz, test);
						_TimeParameters.xyz = curTime;
						float3 previousPositionRWS = TransformPreviousObjectToWorld(previousMesh.positionOS);
					#else
						float3 previousPositionRWS = TransformPreviousObjectToWorld(effectivePositionOS);
					#endif

					#ifdef ATTRIBUTES_NEED_NORMAL
						float3 normalWS = TransformPreviousObjectToWorldNormal(defaultMesh.normalOS);
					#else
						float3 normalWS = float3(0.0, 0.0, 0.0);
					#endif

					#if defined(HAVE_VERTEX_MODIFICATION)
						ApplyVertexModification(inputMesh, normalWS, previousPositionRWS, _LastTimeParameters.xyz);
					#endif

					VPASSpreviousPositionCS = mul(UNITY_MATRIX_PREV_VP, float4(previousPositionRWS, 1.0));
				}
				#endif

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.clipPosV = output.positionCS;
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				output.uv1 = inputMesh.uv1;
				output.uv2 = inputMesh.uv2;

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					output.vpassPositionCS = float3(VPASSpositionCS.xyw);
					output.vpassPreviousPositionCS = float3(VPASSpreviousPositionCS.xyw);
				#endif
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplayMaterial.hlsl"

            #if defined(_TRANSPARENT_REFRACTIVE_SORT) || defined(_ENABLE_FOG_ON_TRANSPARENT)
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Water/Shaders/UnderWaterUtilities.hlsl"
            #endif

            #ifdef UNITY_VIRTUAL_TEXTURING
                #ifdef OUTPUT_SPLIT_LIGHTING
                   #define DIFFUSE_LIGHTING_TARGET SV_Target2
                   #define SSS_BUFFER_TARGET SV_Target3
                #elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
                   #define MOTION_VECTOR_TARGET SV_Target2
                    #ifdef _TRANSPARENT_REFRACTIVE_SORT
                        #define BEFORE_REFRACTION_TARGET SV_Target3
                        #define BEFORE_REFRACTION_ALPHA_TARGET SV_Target4
                #endif
            	#endif
            #if defined(SHADER_API_PSSL)
            	#pragma PSSL_target_output_format(target 1 FMT_32_ABGR)
            #endif
            #else
                #ifdef OUTPUT_SPLIT_LIGHTING
                #define DIFFUSE_LIGHTING_TARGET SV_Target1
                #define SSS_BUFFER_TARGET SV_Target2
                #elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
                #define MOTION_VECTOR_TARGET SV_Target1
                #ifdef _TRANSPARENT_REFRACTIVE_SORT
                     #define BEFORE_REFRACTION_TARGET SV_Target2
                     #define BEFORE_REFRACTION_ALPHA_TARGET SV_Target3
                #endif
            #endif
            #endif

			void Frag(PackedVaryingsMeshToPS packedInput
				, out float4 outColor:SV_Target0
            #ifdef UNITY_VIRTUAL_TEXTURING
				, out float4 outVTFeedback : SV_Target1
            #endif
            #ifdef OUTPUT_SPLIT_LIGHTING
				, out float4 outDiffuseLighting : DIFFUSE_LIGHTING_TARGET
				, OUTPUT_SSSBUFFER(outSSSBuffer) : SSS_BUFFER_TARGET
            #elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
				, out float4 outMotionVec : MOTION_VECTOR_TARGET
                #ifdef _TRANSPARENT_REFRACTIVE_SORT
                , out float4 outBeforeRefractionColor : BEFORE_REFRACTION_TARGET
                , out float4 outBeforeRefractionAlpha : BEFORE_REFRACTION_ALPHA_TARGET
                #endif
            #endif
            #ifdef _DEPTHOFFSET_ON
				, out float outputDepth : DEPTH_OFFSET_SEMANTIC
            #endif
		    
						)
			{
				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					outMotionVec = float4(2.0, 0.0, 0.0, 1.0);
				#endif

				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );
		
				float3 PositionRWS = packedInput.positionRWS;
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float4 ClipPos = packedInput.clipPosV;
				float4 ScreenPos = ComputeScreenPos( packedInput.clipPosV, _ProjectionParams.x );

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = PositionRWS;
				input.tangentToWorld = BuildTangentToWorld(TangentWS, NormalWS);
				input.texCoord1 = packedInput.uv1.xyzw;
				input.texCoord2 = packedInput.uv2.xyzw;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#endif
				#endif
				half IsFrontFace = input.isFrontFace;

				AdjustFragInputsToOffScreenRendering(input, _OffScreenRendering > 0, _OffScreenDownsampleFactor);
				uint2 tileIndex = uint2(input.positionSS.xy) / GetTileSize ();

				PositionInputs posInput = GetPositionInput( input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS.xyz, tileIndex );

				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;
				float localBreakData4_g170777 = ( 0.0 );
				float localCompData3_g170764 = ( 0.0 );
				TVEVisualData Data3_g170764 = (TVEVisualData)0;
				half Dummy145_g170762 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170764 = Dummy145_g170762;
				float localBreakData4_g170763 = ( 0.0 );
				float localCompData3_g170732 = ( 0.0 );
				TVEVisualData Data3_g170732 = (TVEVisualData)0;
				half Dummy145_g170727 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170732 = Dummy145_g170727;
				float localBreakData4_g170731 = ( 0.0 );
				float localCompData3_g170709 = ( 0.0 );
				TVEVisualData Data3_g170709 = (TVEVisualData)0;
				half Dummy594_g170706 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170709 = Dummy594_g170706;
				float localBreakData4_g170708 = ( 0.0 );
				float localCompData3_g170692 = ( 0.0 );
				TVEVisualData Data3_g170692 = (TVEVisualData)0;
				half Dummy594_g170691 = ( _CutoutCategory + _CutoutEnd + _CutoutBakeMode );
				float In_Dummy3_g170692 = Dummy594_g170691;
				float localBreakData4_g170694 = ( 0.0 );
				float localCompData3_g170664 = ( 0.0 );
				TVEVisualData Data3_g170664 = (TVEVisualData)0;
				half Dummy594_g170662 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170664 = Dummy594_g170662;
				float localBreakData4_g170663 = ( 0.0 );
				float localCompData3_g170628 = ( 0.0 );
				TVEVisualData Data3_g170628 = (TVEVisualData)0;
				half Dummy594_g170625 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170628 = Dummy594_g170625;
				float localBreakData4_g170626 = ( 0.0 );
				float localCompData3_g170624 = ( 0.0 );
				TVEVisualData Data3_g170624 = (TVEVisualData)0;
				float In_Dummy3_g170624 = 0.0;
				float localBreakData4_g170623 = ( 0.0 );
				float localCompData3_g170601 = ( 0.0 );
				TVEVisualData Data3_g170601 = (TVEVisualData)0;
				half Dummy205_g170598 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170601 = Dummy205_g170598;
				float localBreakData4_g170600 = ( 0.0 );
				float localCompData3_g170578 = ( 0.0 );
				TVEVisualData Data3_g170578 = (TVEVisualData)0;
				half Dummy205_g170574 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170578 = Dummy205_g170574;
				float localBreakData4_g170579 = ( 0.0 );
				float localCompData3_g170567 = ( 0.0 );
				TVEVisualData Data3_g170567 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170567 = Dummy220_g170564;
				float localBreakData4_g170566 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170447 = ( 0.0 );
				TVEVisualData Data3_g170447 = (TVEVisualData)0;
				half4 Dummy944_g170438 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170447 = Dummy944_g170438.x;
				float localBreakData4_g170446 = ( 0.0 );
				float localCompData3_g170415 = ( 0.0 );
				TVEVisualData Data3_g170415 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170415 = Dummy946_g170394.x;
				float localBreakData4_g170405 = ( 0.0 );
				float localCompData3_g170387 = ( 0.0 );
				TVEVisualData Data3_g170387 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170387 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170380) = _MainAlbedoTex;
				float localFilterTexture19_g170383 = ( 0.0 );
				SamplerState SS19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170383 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170383 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170383 = SamplerDefault19_g170383;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170383 = SamplerDefault19_g170383;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170383 = SamplerPoint19_g170383;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170383 = SamplerLow19_g170383;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170383 = SamplerMedium19_g170383;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170383 = SamplerHigh19_g170383;
				#endif
				}
				SamplerState Sampler276_g170380 = SS19_g170383;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170380 = Local_Coords180_g170372;
				half4 Coords276_g170380 = temp_output_37_0_g170380;
				half2 TexCoord276_g170380 = packedInput.ase_texcoord8.xy;
				half4 localSampleMain276_g170380 = SampleMain( Texture276_g170380 , Sampler276_g170380 , Coords276_g170380 , TexCoord276_g170380 );
				TEXTURE2D(Texture275_g170380) = _MainAlbedoTex;
				SamplerState Sampler275_g170380 = SS19_g170383;
				half4 Coords275_g170380 = temp_output_37_0_g170380;
				half2 TexCoord275_g170380 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170380 = SampleExtra( Texture275_g170380 , Sampler275_g170380 , Coords275_g170380 , TexCoord275_g170380 );
				TEXTURE2D(Texture238_g170380) = _MainAlbedoTex;
				SamplerState Sampler238_g170380 = SS19_g170383;
				half4 Coords238_g170380 = temp_output_37_0_g170380;
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord9.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord10.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170386 = Data16_g170201;
				float Out_Dummy15_g170386 = 0;
				float3 Out_PositionWS15_g170386 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170386 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170386 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170386 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170386 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170386 = float3( 0,0,0 );
				float4 Out_VertexData15_g170386 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170386 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170386 = Data15_g170386.Dummy;
				Out_PositionWS15_g170386 = Data15_g170386.PositionWS;
				Out_PositionWO15_g170386 = Data15_g170386.PositionWO;
				Out_PivotWS15_g170386 = Data15_g170386.PivotWS;
				Out_PivotWO15_g170386 = Data15_g170386.PivotWO;
				Out_NormalWS15_g170386 = Data15_g170386.NormalWS;
				Out_ViewDirWS15_g170386 = Data15_g170386.ViewDirWS;
				Out_VertexData15_g170386 = Data15_g170386.VertexData;
				Out_BoundsData15_g170386 = Data15_g170386.BoundsData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170386;
				float3 temp_output_279_0_g170380 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170380 = temp_output_279_0_g170380;
				half4 localSamplePlanar2D238_g170380 = SamplePlanar2D( Texture238_g170380 , Sampler238_g170380 , Coords238_g170380 , WorldPosition238_g170380 );
				TEXTURE2D(Texture246_g170380) = _MainAlbedoTex;
				SamplerState Sampler246_g170380 = SS19_g170383;
				half4 Coords246_g170380 = temp_output_37_0_g170380;
				half3 WorldPosition246_g170380 = temp_output_279_0_g170380;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170386;
				float3 temp_output_280_0_g170380 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170380 = temp_output_280_0_g170380;
				half4 localSamplePlanar3D246_g170380 = SamplePlanar3D( Texture246_g170380 , Sampler246_g170380 , Coords246_g170380 , WorldPosition246_g170380 , WorldNormal246_g170380 );
				TEXTURE2D(Texture234_g170380) = _MainAlbedoTex;
				SamplerState Sampler234_g170380 = SS19_g170383;
				float4 Coords234_g170380 = temp_output_37_0_g170380;
				float3 WorldPosition234_g170380 = temp_output_279_0_g170380;
				float4 localSampleStochastic2D234_g170380 = SampleStochastic2D( Texture234_g170380 , Sampler234_g170380 , Coords234_g170380 , WorldPosition234_g170380 );
				TEXTURE2D(Texture263_g170380) = _MainAlbedoTex;
				SamplerState Sampler263_g170380 = SS19_g170383;
				half4 Coords263_g170380 = temp_output_37_0_g170380;
				half3 WorldPosition263_g170380 = temp_output_279_0_g170380;
				half3 WorldNormal263_g170380 = temp_output_280_0_g170380;
				half4 localSampleStochastic3D263_g170380 = SampleStochastic3D( Texture263_g170380 , Sampler263_g170380 , Coords263_g170380 , WorldPosition263_g170380 , WorldNormal263_g170380 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170380;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170380;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170380;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170380;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170380;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170380;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170380;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170382) = _MainShaderTex;
				float localFilterTexture30_g170385 = ( 0.0 );
				SamplerState SS30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170385 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170385 = SamplerDefault30_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170385 = SamplerDefault30_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170385 = SamplerPoint30_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170385 = SamplerLow30_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170385 = SamplerMedium30_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170385 = SamplerHigh30_g170385;
				#endif
				}
				SamplerState Sampler276_g170382 = SS30_g170385;
				float4 temp_output_37_0_g170382 = Local_Coords180_g170372;
				half4 Coords276_g170382 = temp_output_37_0_g170382;
				half2 TexCoord276_g170382 = packedInput.ase_texcoord8.xy;
				half4 localSampleMain276_g170382 = SampleMain( Texture276_g170382 , Sampler276_g170382 , Coords276_g170382 , TexCoord276_g170382 );
				TEXTURE2D(Texture275_g170382) = _MainShaderTex;
				SamplerState Sampler275_g170382 = SS30_g170385;
				half4 Coords275_g170382 = temp_output_37_0_g170382;
				half2 TexCoord275_g170382 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170382 = SampleExtra( Texture275_g170382 , Sampler275_g170382 , Coords275_g170382 , TexCoord275_g170382 );
				TEXTURE2D(Texture238_g170382) = _MainShaderTex;
				SamplerState Sampler238_g170382 = SS30_g170385;
				half4 Coords238_g170382 = temp_output_37_0_g170382;
				float3 temp_output_279_0_g170382 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170382 = temp_output_279_0_g170382;
				half4 localSamplePlanar2D238_g170382 = SamplePlanar2D( Texture238_g170382 , Sampler238_g170382 , Coords238_g170382 , WorldPosition238_g170382 );
				TEXTURE2D(Texture246_g170382) = _MainShaderTex;
				SamplerState Sampler246_g170382 = SS30_g170385;
				half4 Coords246_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition246_g170382 = temp_output_279_0_g170382;
				float3 temp_output_280_0_g170382 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170382 = temp_output_280_0_g170382;
				half4 localSamplePlanar3D246_g170382 = SamplePlanar3D( Texture246_g170382 , Sampler246_g170382 , Coords246_g170382 , WorldPosition246_g170382 , WorldNormal246_g170382 );
				TEXTURE2D(Texture234_g170382) = _MainShaderTex;
				SamplerState Sampler234_g170382 = SS30_g170385;
				float4 Coords234_g170382 = temp_output_37_0_g170382;
				float3 WorldPosition234_g170382 = temp_output_279_0_g170382;
				float4 localSampleStochastic2D234_g170382 = SampleStochastic2D( Texture234_g170382 , Sampler234_g170382 , Coords234_g170382 , WorldPosition234_g170382 );
				TEXTURE2D(Texture263_g170382) = _MainShaderTex;
				SamplerState Sampler263_g170382 = SS30_g170385;
				half4 Coords263_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition263_g170382 = temp_output_279_0_g170382;
				half3 WorldNormal263_g170382 = temp_output_280_0_g170382;
				half4 localSampleStochastic3D263_g170382 = SampleStochastic3D( Texture263_g170382 , Sampler263_g170382 , Coords263_g170382 , WorldPosition263_g170382 , WorldNormal263_g170382 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170382;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170382;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170382;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170377 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170388 = _MainMultiRemap.x;
				float temp_output_9_0_g170388 = ( clampResult17_g170377 - temp_output_7_0_g170388 );
				half Local_MultiMask78_g170372 = saturate( ( ( temp_output_9_0_g170388 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170387 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170387 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170381) = _MainNormalTex;
				float localFilterTexture29_g170384 = ( 0.0 );
				SamplerState SS29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170384 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170384 = SamplerDefault29_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170384 = SamplerDefault29_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170384 = SamplerPoint29_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170384 = SamplerLow29_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170384 = SamplerMedium29_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170384 = SamplerHigh29_g170384;
				#endif
				}
				SamplerState Sampler276_g170381 = SS29_g170384;
				float4 temp_output_37_0_g170381 = Local_Coords180_g170372;
				half4 Coords276_g170381 = temp_output_37_0_g170381;
				half2 TexCoord276_g170381 = packedInput.ase_texcoord8.xy;
				half4 localSampleMain276_g170381 = SampleMain( Texture276_g170381 , Sampler276_g170381 , Coords276_g170381 , TexCoord276_g170381 );
				TEXTURE2D(Texture275_g170381) = _MainNormalTex;
				SamplerState Sampler275_g170381 = SS29_g170384;
				half4 Coords275_g170381 = temp_output_37_0_g170381;
				half2 TexCoord275_g170381 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170381 = SampleExtra( Texture275_g170381 , Sampler275_g170381 , Coords275_g170381 , TexCoord275_g170381 );
				TEXTURE2D(Texture238_g170381) = _MainNormalTex;
				SamplerState Sampler238_g170381 = SS29_g170384;
				half4 Coords238_g170381 = temp_output_37_0_g170381;
				float3 temp_output_279_0_g170381 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170381 = temp_output_279_0_g170381;
				half4 localSamplePlanar2D238_g170381 = SamplePlanar2D( Texture238_g170381 , Sampler238_g170381 , Coords238_g170381 , WorldPosition238_g170381 );
				TEXTURE2D(Texture246_g170381) = _MainNormalTex;
				SamplerState Sampler246_g170381 = SS29_g170384;
				half4 Coords246_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition246_g170381 = temp_output_279_0_g170381;
				float3 temp_output_280_0_g170381 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170381 = temp_output_280_0_g170381;
				half4 localSamplePlanar3D246_g170381 = SamplePlanar3D( Texture246_g170381 , Sampler246_g170381 , Coords246_g170381 , WorldPosition246_g170381 , WorldNormal246_g170381 );
				TEXTURE2D(Texture234_g170381) = _MainNormalTex;
				SamplerState Sampler234_g170381 = SS29_g170384;
				float4 Coords234_g170381 = temp_output_37_0_g170381;
				float3 WorldPosition234_g170381 = temp_output_279_0_g170381;
				float4 localSampleStochastic2D234_g170381 = SampleStochastic2D( Texture234_g170381 , Sampler234_g170381 , Coords234_g170381 , WorldPosition234_g170381 );
				TEXTURE2D(Texture263_g170381) = _MainNormalTex;
				SamplerState Sampler263_g170381 = SS29_g170384;
				half4 Coords263_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition263_g170381 = temp_output_279_0_g170381;
				half3 WorldNormal263_g170381 = temp_output_280_0_g170381;
				half4 localSampleStochastic3D263_g170381 = SampleStochastic3D( Texture263_g170381 , Sampler263_g170381 , Coords263_g170381 , WorldPosition263_g170381 , WorldNormal263_g170381 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170381;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170381;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170381;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3 ase_bitangentWS = packedInput.ase_texcoord11.xyz;
				float3x3 ase_worldToTangent = float3x3(TangentWS.xyz,ase_bitangentWS,NormalWS);
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170387 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, ase_bitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, ase_bitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, ase_bitangentWS.z, NormalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3(dot(tanToWorld0,tanNormal74_g170375), dot(tanToWorld1,tanNormal74_g170375), dot(tanToWorld2,tanNormal74_g170375)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170387 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170387 = Local_Masks109_g170372;
				float4 In_Emissive3_g170387 = half4(1,1,1,1);
				float3 temp_output_3_0_g170376 = Local_Albedo139_g170372;
				float dotResult20_g170376 = dot( temp_output_3_0_g170376 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170376;
				float In_Grayscale3_g170387 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170387 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170387 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170387 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170387 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170387 = temp_cast_4;
				float In_Transmission3_g170387 = 1.0;
				float In_Thickness3_g170387 = 0.0;
				float In_Diffusion3_g170387 = 0.0;
				{
				Data3_g170387.Dummy = In_Dummy3_g170387;
				Data3_g170387.Albedo = In_Albedo3_g170387;
				Data3_g170387.AlbedoRaw = In_AlbedoRaw3_g170387;
				Data3_g170387.NormalTS = In_NormalTS3_g170387;
				Data3_g170387.NormalWS = In_NormalWS3_g170387;
				Data3_g170387.Shader = In_Shader3_g170387;
				Data3_g170387.Emissive= In_Emissive3_g170387;
				Data3_g170387.MultiMask = In_MultiMask3_g170387;
				Data3_g170387.Grayscale = In_Grayscale3_g170387;
				Data3_g170387.Luminosity = In_Luminosity3_g170387;
				Data3_g170387.AlphaClip = In_AlphaClip3_g170387;
				Data3_g170387.AlphaFade = In_AlphaFade3_g170387;
				Data3_g170387.Translucency = In_Translucency3_g170387;
				Data3_g170387.Transmission = In_Transmission3_g170387;
				Data3_g170387.Thickness = In_Thickness3_g170387;
				Data3_g170387.Diffusion = In_Diffusion3_g170387;
				}
				TVEVisualData Data4_g170405 = Data3_g170387;
				float Out_Dummy4_g170405 = 0;
				float3 Out_Albedo4_g170405 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170405 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170405 = float2( 0,0 );
				float3 Out_NormalWS4_g170405 = float3( 0,0,0 );
				float4 Out_Shader4_g170405 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170405 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170405 = 0;
				float Out_Grayscale4_g170405 = 0;
				float Out_Luminosity4_g170405 = 0;
				float Out_AlphaClip4_g170405 = 0;
				float Out_AlphaFade4_g170405 = 0;
				float3 Out_Translucency4_g170405 = float3( 0,0,0 );
				float Out_Transmission4_g170405 = 0;
				float Out_Thickness4_g170405 = 0;
				float Out_Diffusion4_g170405 = 0;
				{
				Out_Dummy4_g170405 = Data4_g170405.Dummy;
				Out_Albedo4_g170405 = Data4_g170405.Albedo;
				Out_AlbedoRaw4_g170405 = Data4_g170405.AlbedoRaw;
				Out_NormalTS4_g170405 = Data4_g170405.NormalTS;
				Out_NormalWS4_g170405 = Data4_g170405.NormalWS;
				Out_Shader4_g170405 = Data4_g170405.Shader;
				Out_Emissive4_g170405= Data4_g170405.Emissive;
				Out_MultiMask4_g170405 = Data4_g170405.MultiMask;
				Out_Grayscale4_g170405 = Data4_g170405.Grayscale;
				Out_Luminosity4_g170405= Data4_g170405.Luminosity;
				Out_AlphaClip4_g170405 = Data4_g170405.AlphaClip;
				Out_AlphaFade4_g170405 = Data4_g170405.AlphaFade;
				Out_Translucency4_g170405 = Data4_g170405.Translucency;
				Out_Transmission4_g170405 = Data4_g170405.Transmission;
				Out_Thickness4_g170405 = Data4_g170405.Thickness;
				Out_Diffusion4_g170405 = Data4_g170405.Diffusion;
				}
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170405;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				float localFilterTexture19_g170411 = ( 0.0 );
				SamplerState SS19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170411 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170411 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170411 = SamplerDefault19_g170411;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170411 = SamplerDefault19_g170411;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170411 = SamplerPoint19_g170411;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170411 = SamplerLow19_g170411;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170411 = SamplerMedium19_g170411;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170411 = SamplerHigh19_g170411;
				#endif
				}
				SamplerState Sampler276_g170395 = SS19_g170411;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord8.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = SS19_g170411;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = SS19_g170411;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170414 = Data16_g170201;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				}
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = SS19_g170411;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = SS19_g170411;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = SS19_g170411;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				float localFilterTexture30_g170413 = ( 0.0 );
				SamplerState SS30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170413 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170413 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170413 = SamplerDefault30_g170413;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170413 = SamplerDefault30_g170413;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170413 = SamplerPoint30_g170413;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170413 = SamplerLow30_g170413;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170413 = SamplerMedium30_g170413;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170413 = SamplerHigh30_g170413;
				#endif
				}
				SamplerState Sampler276_g170397 = SS30_g170413;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord8.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = SS30_g170413;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = SS30_g170413;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = SS30_g170413;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = SS30_g170413;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = SS30_g170413;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170416 = _SecondMultiRemap.x;
				float temp_output_9_0_g170416 = ( clampResult17_g170401 - temp_output_7_0_g170416 );
				float temp_output_765_0_g170394 = saturate( ( ( temp_output_9_0_g170416 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord8.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170418 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170422 = _SecondMaskRemap.x;
				float temp_output_9_0_g170422 = ( clampResult17_g170418 - temp_output_7_0_g170422 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170422 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half Visual_Luminosity1041_g170394 = Out_Luminosity4_g170405;
				float clampResult17_g170427 = clamp( Visual_Luminosity1041_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170428 = _SecondLumaRemap.x;
				float temp_output_9_0_g170428 = ( clampResult17_g170427 - temp_output_7_0_g170428 );
				float lerpResult1036_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170428 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170394 = lerpResult1036_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170405;
				float clampResult17_g170423 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _SecondProjRemap.x;
				float temp_output_9_0_g170425 = ( clampResult17_g170423 - temp_output_7_0_g170425 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170425 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170414;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170419 = _second_vert_mode;
				float temp_output_30_0_g170419 = ( break965_g170394.x * break33_g170419.x );
				float temp_output_29_0_g170419 = ( break965_g170394.y * break33_g170419.y );
				float temp_output_31_0_g170419 = ( break965_g170394.z * break33_g170419.z );
				float temp_output_28_0_g170419 = ( temp_output_30_0_g170419 + temp_output_29_0_g170419 + temp_output_31_0_g170419 + ( break965_g170394.w * break33_g170419.w ) );
				float clampResult17_g170417 = clamp( temp_output_28_0_g170419 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170421 = _SecondMeshRemap.x;
				float temp_output_9_0_g170421 = ( clampResult17_g170417 - temp_output_7_0_g170421 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170421 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170420 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170420 = ( temp_output_6_0_g170420 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170420 = temp_output_6_0_g170420;
				#endif
				half Blend_VertMask918_g170394 = staticSwitch14_g170420;
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatParams204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintParams204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowParams204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoParams204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeParams204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormParams204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowParams204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatParams = In_CoatParams204_g170214;
				Data204_g170214.PaintParams = In_PaintParams204_g170214;
				Data204_g170214.GlowParams = In_GlowParams204_g170214;
				Data204_g170214.AtmoParams = In_AtmoParams204_g170214;
				Data204_g170214.FadeParams = In_FadeParams204_g170214;
				Data204_g170214.FormParams= In_FormParams204_g170214;
				Data204_g170214.FlowParams = In_FlowParams204_g170214;
				}
				TVEGlobalData Data15_g170404 = Data204_g170214;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170404 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatParams15_g170404 = Data15_g170404.CoatParams;
				Out_PaintParams15_g170404 = Data15_g170404.PaintParams;
				Out_GlowParams15_g170404 = Data15_g170404.GlowParams;
				Out_AtmoParams15_g170404= Data15_g170404.AtmoParams;
				Out_FadeParams15_g170404= Data15_g170404.FadeParams;
				Out_FormParams15_g170404 = Data15_g170404.FormParams;
				Out_FlowParams15_g170404 = Data15_g170404.FlowParams;
				}
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170404;
				float temp_output_6_0_g170429 = (Global_CoatParams975_g170394).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170429 = ( temp_output_6_0_g170429 + ( _SecondElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170429 = temp_output_6_0_g170429;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = staticSwitch14_g170429;
				#else
				float staticSwitch971_g170394 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170394 = lerp( 1.0 , staticSwitch971_g170394 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170394 = lerpResult1013_g170394;
				float clampResult17_g170424 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_LumaMask1033_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170426 = _SecondBlendRemap.x;
				float temp_output_9_0_g170426 = ( clampResult17_g170424 - temp_output_7_0_g170426 );
				half Blend_Mask412_g170394 = ( saturate( ( ( temp_output_9_0_g170426 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170415 = Final_Albedo601_g170394;
				float3 In_AlbedoRaw3_g170415 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170405;
				float2 lerpResult40_g170406 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				float localFilterTexture29_g170412 = ( 0.0 );
				SamplerState SS29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170412 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170412 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170412 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170412 = SamplerDefault29_g170412;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170412 = SamplerDefault29_g170412;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170412 = SamplerPoint29_g170412;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170412 = SamplerLow29_g170412;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170412 = SamplerMedium29_g170412;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170412 = SamplerHigh29_g170412;
				#endif
				}
				SamplerState Sampler276_g170396 = SS29_g170412;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord8.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = SS29_g170412;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = SS29_g170412;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = SS29_g170412;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = SS29_g170412;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = SS29_g170412;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170406 = ( lerpResult40_g170406 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170406 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170415 = Final_NormalTS612_g170394;
				float3 appendResult68_g170407 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170407 = appendResult68_g170407;
				float3 worldNormal74_g170407 = normalize( float3(dot(tanToWorld0,tanNormal74_g170407), dot(tanToWorld1,tanNormal74_g170407), dot(tanToWorld2,tanNormal74_g170407)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170407;
				float3 In_NormalWS3_g170415 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170405;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170415 = Final_Masks613_g170394;
				float4 In_Emissive3_g170415 = Out_Emissive4_g170405;
				float3 temp_output_3_0_g170409 = Final_Albedo601_g170394;
				float dotResult20_g170409 = dot( temp_output_3_0_g170409 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170409;
				float In_Grayscale3_g170415 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170415 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170405;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170415 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170405;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170415 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170405;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170415 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170415 = Out_Translucency4_g170405;
				float In_Transmission3_g170415 = Out_Transmission4_g170405;
				float In_Thickness3_g170415 = Out_Thickness4_g170405;
				float In_Diffusion3_g170415 = Out_Diffusion4_g170405;
				{
				Data3_g170415.Dummy = In_Dummy3_g170415;
				Data3_g170415.Albedo = In_Albedo3_g170415;
				Data3_g170415.AlbedoRaw = In_AlbedoRaw3_g170415;
				Data3_g170415.NormalTS = In_NormalTS3_g170415;
				Data3_g170415.NormalWS = In_NormalWS3_g170415;
				Data3_g170415.Shader = In_Shader3_g170415;
				Data3_g170415.Emissive= In_Emissive3_g170415;
				Data3_g170415.MultiMask = In_MultiMask3_g170415;
				Data3_g170415.Grayscale = In_Grayscale3_g170415;
				Data3_g170415.Luminosity = In_Luminosity3_g170415;
				Data3_g170415.AlphaClip = In_AlphaClip3_g170415;
				Data3_g170415.AlphaFade = In_AlphaFade3_g170415;
				Data3_g170415.Translucency = In_Translucency3_g170415;
				Data3_g170415.Transmission = In_Transmission3_g170415;
				Data3_g170415.Thickness = In_Thickness3_g170415;
				Data3_g170415.Diffusion = In_Diffusion3_g170415;
				}
				TVEVisualData Data4_g170446 = Data3_g170415;
				float Out_Dummy4_g170446 = 0;
				float3 Out_Albedo4_g170446 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170446 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170446 = float2( 0,0 );
				float3 Out_NormalWS4_g170446 = float3( 0,0,0 );
				float4 Out_Shader4_g170446 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170446 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170446 = 0;
				float Out_Grayscale4_g170446 = 0;
				float Out_Luminosity4_g170446 = 0;
				float Out_AlphaClip4_g170446 = 0;
				float Out_AlphaFade4_g170446 = 0;
				float3 Out_Translucency4_g170446 = float3( 0,0,0 );
				float Out_Transmission4_g170446 = 0;
				float Out_Thickness4_g170446 = 0;
				float Out_Diffusion4_g170446 = 0;
				{
				Out_Dummy4_g170446 = Data4_g170446.Dummy;
				Out_Albedo4_g170446 = Data4_g170446.Albedo;
				Out_AlbedoRaw4_g170446 = Data4_g170446.AlbedoRaw;
				Out_NormalTS4_g170446 = Data4_g170446.NormalTS;
				Out_NormalWS4_g170446 = Data4_g170446.NormalWS;
				Out_Shader4_g170446 = Data4_g170446.Shader;
				Out_Emissive4_g170446= Data4_g170446.Emissive;
				Out_MultiMask4_g170446 = Data4_g170446.MultiMask;
				Out_Grayscale4_g170446 = Data4_g170446.Grayscale;
				Out_Luminosity4_g170446= Data4_g170446.Luminosity;
				Out_AlphaClip4_g170446 = Data4_g170446.AlphaClip;
				Out_AlphaFade4_g170446 = Data4_g170446.AlphaFade;
				Out_Translucency4_g170446 = Data4_g170446.Translucency;
				Out_Transmission4_g170446 = Data4_g170446.Transmission;
				Out_Thickness4_g170446 = Data4_g170446.Thickness;
				Out_Diffusion4_g170446 = Data4_g170446.Diffusion;
				}
				half3 Visual_Albedo527_g170438 = Out_Albedo4_g170446;
				TEXTURE2D(Texture276_g170439) = _ThirdAlbedoTex;
				float localFilterTexture19_g170455 = ( 0.0 );
				SamplerState SS19_g170455 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170455 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170455 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170455 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170455 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170455 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170455 = SamplerDefault19_g170455;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170455 = SamplerDefault19_g170455;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170455 = SamplerPoint19_g170455;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170455 = SamplerLow19_g170455;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170455 = SamplerMedium19_g170455;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170455 = SamplerHigh19_g170455;
				#endif
				}
				SamplerState Sampler276_g170439 = SS19_g170455;
				half4 Local_LayerCoords790_g170438 = _third_coord_value;
				float4 temp_output_37_0_g170439 = Local_LayerCoords790_g170438;
				half4 Coords276_g170439 = temp_output_37_0_g170439;
				half2 TexCoord276_g170439 = packedInput.ase_texcoord8.xy;
				half4 localSampleMain276_g170439 = SampleMain( Texture276_g170439 , Sampler276_g170439 , Coords276_g170439 , TexCoord276_g170439 );
				TEXTURE2D(Texture275_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170439 = SS19_g170455;
				half4 Coords275_g170439 = temp_output_37_0_g170439;
				half2 TexCoord275_g170439 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170439 = SampleExtra( Texture275_g170439 , Sampler275_g170439 , Coords275_g170439 , TexCoord275_g170439 );
				TEXTURE2D(Texture238_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170439 = SS19_g170455;
				half4 Coords238_g170439 = temp_output_37_0_g170439;
				TVEModelData Data15_g170458 = Data16_g170201;
				float Out_Dummy15_g170458 = 0;
				float3 Out_PositionWS15_g170458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170458 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170458 = float3( 0,0,0 );
				float4 Out_VertexData15_g170458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170458 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170458 = Data15_g170458.Dummy;
				Out_PositionWS15_g170458 = Data15_g170458.PositionWS;
				Out_PositionWO15_g170458 = Data15_g170458.PositionWO;
				Out_PivotWS15_g170458 = Data15_g170458.PivotWS;
				Out_PivotWO15_g170458 = Data15_g170458.PivotWO;
				Out_NormalWS15_g170458 = Data15_g170458.NormalWS;
				Out_ViewDirWS15_g170458 = Data15_g170458.ViewDirWS;
				Out_VertexData15_g170458 = Data15_g170458.VertexData;
				Out_BoundsData15_g170458 = Data15_g170458.BoundsData;
				}
				half3 Model_PositionWO636_g170438 = Out_PositionWO15_g170458;
				float3 temp_output_279_0_g170439 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170439 = temp_output_279_0_g170439;
				half4 localSamplePlanar2D238_g170439 = SamplePlanar2D( Texture238_g170439 , Sampler238_g170439 , Coords238_g170439 , WorldPosition238_g170439 );
				TEXTURE2D(Texture246_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170439 = SS19_g170455;
				half4 Coords246_g170439 = temp_output_37_0_g170439;
				half3 WorldPosition246_g170439 = temp_output_279_0_g170439;
				half3 Model_NormalWS869_g170438 = Out_NormalWS15_g170458;
				float3 temp_output_280_0_g170439 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170439 = temp_output_280_0_g170439;
				half4 localSamplePlanar3D246_g170439 = SamplePlanar3D( Texture246_g170439 , Sampler246_g170439 , Coords246_g170439 , WorldPosition246_g170439 , WorldNormal246_g170439 );
				TEXTURE2D(Texture234_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170439 = SS19_g170455;
				float4 Coords234_g170439 = temp_output_37_0_g170439;
				float3 WorldPosition234_g170439 = temp_output_279_0_g170439;
				float4 localSampleStochastic2D234_g170439 = SampleStochastic2D( Texture234_g170439 , Sampler234_g170439 , Coords234_g170439 , WorldPosition234_g170439 );
				TEXTURE2D(Texture263_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170439 = SS19_g170455;
				half4 Coords263_g170439 = temp_output_37_0_g170439;
				half3 WorldPosition263_g170439 = temp_output_279_0_g170439;
				half3 WorldNormal263_g170439 = temp_output_280_0_g170439;
				half4 localSampleStochastic3D263_g170439 = SampleStochastic3D( Texture263_g170439 , Sampler263_g170439 , Coords263_g170439 , WorldPosition263_g170439 , WorldNormal263_g170439 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170438 = localSampleMain276_g170439;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170438 = localSampleExtra275_g170439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170438 = localSamplePlanar2D238_g170439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170438 = localSamplePlanar3D246_g170439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170438 = localSampleStochastic2D234_g170439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170438 = localSampleStochastic3D263_g170439;
				#else
				float4 staticSwitch693_g170438 = localSampleMain276_g170439;
				#endif
				half4 Local_AlbedoTex777_g170438 = staticSwitch693_g170438;
				float3 lerpResult716_g170438 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170438).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170438 = lerpResult716_g170438;
				TEXTURE2D(Texture276_g170441) = _ThirdShaderTex;
				float localFilterTexture30_g170457 = ( 0.0 );
				SamplerState SS30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170457 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170457 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170457 = SamplerDefault30_g170457;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170457 = SamplerDefault30_g170457;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170457 = SamplerPoint30_g170457;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170457 = SamplerLow30_g170457;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170457 = SamplerMedium30_g170457;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170457 = SamplerHigh30_g170457;
				#endif
				}
				SamplerState Sampler276_g170441 = SS30_g170457;
				float4 temp_output_37_0_g170441 = Local_LayerCoords790_g170438;
				half4 Coords276_g170441 = temp_output_37_0_g170441;
				half2 TexCoord276_g170441 = packedInput.ase_texcoord8.xy;
				half4 localSampleMain276_g170441 = SampleMain( Texture276_g170441 , Sampler276_g170441 , Coords276_g170441 , TexCoord276_g170441 );
				TEXTURE2D(Texture275_g170441) = _ThirdShaderTex;
				SamplerState Sampler275_g170441 = SS30_g170457;
				half4 Coords275_g170441 = temp_output_37_0_g170441;
				half2 TexCoord275_g170441 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170441 = SampleExtra( Texture275_g170441 , Sampler275_g170441 , Coords275_g170441 , TexCoord275_g170441 );
				TEXTURE2D(Texture238_g170441) = _ThirdShaderTex;
				SamplerState Sampler238_g170441 = SS30_g170457;
				half4 Coords238_g170441 = temp_output_37_0_g170441;
				float3 temp_output_279_0_g170441 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170441 = temp_output_279_0_g170441;
				half4 localSamplePlanar2D238_g170441 = SamplePlanar2D( Texture238_g170441 , Sampler238_g170441 , Coords238_g170441 , WorldPosition238_g170441 );
				TEXTURE2D(Texture246_g170441) = _ThirdShaderTex;
				SamplerState Sampler246_g170441 = SS30_g170457;
				half4 Coords246_g170441 = temp_output_37_0_g170441;
				half3 WorldPosition246_g170441 = temp_output_279_0_g170441;
				float3 temp_output_280_0_g170441 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170441 = temp_output_280_0_g170441;
				half4 localSamplePlanar3D246_g170441 = SamplePlanar3D( Texture246_g170441 , Sampler246_g170441 , Coords246_g170441 , WorldPosition246_g170441 , WorldNormal246_g170441 );
				TEXTURE2D(Texture234_g170441) = _ThirdShaderTex;
				SamplerState Sampler234_g170441 = SS30_g170457;
				float4 Coords234_g170441 = temp_output_37_0_g170441;
				float3 WorldPosition234_g170441 = temp_output_279_0_g170441;
				float4 localSampleStochastic2D234_g170441 = SampleStochastic2D( Texture234_g170441 , Sampler234_g170441 , Coords234_g170441 , WorldPosition234_g170441 );
				TEXTURE2D(Texture263_g170441) = _ThirdShaderTex;
				SamplerState Sampler263_g170441 = SS30_g170457;
				half4 Coords263_g170441 = temp_output_37_0_g170441;
				half3 WorldPosition263_g170441 = temp_output_279_0_g170441;
				half3 WorldNormal263_g170441 = temp_output_280_0_g170441;
				half4 localSampleStochastic3D263_g170441 = SampleStochastic3D( Texture263_g170441 , Sampler263_g170441 , Coords263_g170441 , WorldPosition263_g170441 , WorldNormal263_g170441 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170438 = localSampleMain276_g170441;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170438 = localSampleExtra275_g170441;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170438 = localSamplePlanar2D238_g170441;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170438 = localSamplePlanar3D246_g170441;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170438 = localSampleStochastic2D234_g170441;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170438 = localSampleStochastic3D263_g170441;
				#else
				float4 staticSwitch722_g170438 = localSampleMain276_g170441;
				#endif
				half4 Local_ShaderTex775_g170438 = staticSwitch722_g170438;
				float lerpResult739_g170438 = lerp( 1.0 , (Local_ShaderTex775_g170438).y , _ThirdOcclusionValue);
				float4 appendResult749_g170438 = (float4(( (Local_ShaderTex775_g170438).x * _ThirdMetallicValue ) , lerpResult739_g170438 , (Local_ShaderTex775_g170438).z , ( (Local_ShaderTex775_g170438).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170438 = appendResult749_g170438;
				float clampResult17_g170444 = clamp( (Local_Masks750_g170438).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170459 = ( clampResult17_g170444 - temp_output_7_0_g170459 );
				float temp_output_765_0_g170438 = saturate( ( ( temp_output_9_0_g170459 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170438 = temp_output_765_0_g170438;
				float lerpResult705_g170438 = lerp( 1.0 , Local_MultiMask767_g170438 , _ThirdColorMode);
				float4 lerpResult706_g170438 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170438);
				half3 Local_ColorRGB774_g170438 = (lerpResult706_g170438).rgb;
				half3 Local_Albedo768_g170438 = ( Local_AlbedoRGB771_g170438 * Local_ColorRGB774_g170438 );
				float3 lerpResult985_g170438 = lerp( Local_Albedo768_g170438 , ( Visual_Albedo527_g170438 * Local_Albedo768_g170438 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170453) = _ThirdMaskTex;
				SamplerState Sampler276_g170453 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170438 = _third_mask_coord_value;
				float4 temp_output_37_0_g170453 = Local_MaskCoords813_g170438;
				half4 Coords276_g170453 = temp_output_37_0_g170453;
				half2 TexCoord276_g170453 = packedInput.ase_texcoord8.xy;
				half4 localSampleMain276_g170453 = SampleMain( Texture276_g170453 , Sampler276_g170453 , Coords276_g170453 , TexCoord276_g170453 );
				TEXTURE2D(Texture275_g170453) = _ThirdMaskTex;
				SamplerState Sampler275_g170453 = sampler_Linear_Repeat;
				half4 Coords275_g170453 = temp_output_37_0_g170453;
				half2 TexCoord275_g170453 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170453 = SampleExtra( Texture275_g170453 , Sampler275_g170453 , Coords275_g170453 , TexCoord275_g170453 );
				TEXTURE2D(Texture238_g170453) = _ThirdMaskTex;
				SamplerState Sampler238_g170453 = sampler_Linear_Repeat;
				half4 Coords238_g170453 = temp_output_37_0_g170453;
				float3 temp_output_279_0_g170453 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170453 = temp_output_279_0_g170453;
				half4 localSamplePlanar2D238_g170453 = SamplePlanar2D( Texture238_g170453 , Sampler238_g170453 , Coords238_g170453 , WorldPosition238_g170453 );
				TEXTURE2D(Texture246_g170453) = _ThirdMaskTex;
				SamplerState Sampler246_g170453 = sampler_Linear_Repeat;
				half4 Coords246_g170453 = temp_output_37_0_g170453;
				half3 WorldPosition246_g170453 = temp_output_279_0_g170453;
				float3 temp_output_280_0_g170453 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170453 = temp_output_280_0_g170453;
				half4 localSamplePlanar3D246_g170453 = SamplePlanar3D( Texture246_g170453 , Sampler246_g170453 , Coords246_g170453 , WorldPosition246_g170453 , WorldNormal246_g170453 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170438 = localSampleMain276_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170438 = localSampleExtra275_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170438 = localSamplePlanar2D238_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170438 = localSamplePlanar3D246_g170453;
				#else
				float4 staticSwitch817_g170438 = localSampleMain276_g170453;
				#endif
				half4 Local_MaskTex861_g170438 = staticSwitch817_g170438;
				float clampResult17_g170461 = clamp( (Local_MaskTex861_g170438).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170465 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170465 = ( clampResult17_g170461 - temp_output_7_0_g170465 );
				float lerpResult1028_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170465 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170438 = lerpResult1028_g170438;
				half Visual_Luminosity1049_g170438 = Out_Luminosity4_g170446;
				float clampResult17_g170470 = clamp( Visual_Luminosity1049_g170438 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170471 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170471 = ( clampResult17_g170470 - temp_output_7_0_g170471 );
				float lerpResult1040_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170471 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170438 = lerpResult1040_g170438;
				half4 Model_VertexMasks960_g170438 = Out_VertexData15_g170458;
				float4 break961_g170438 = Model_VertexMasks960_g170438;
				float4 break33_g170462 = _third_vert_mode;
				float temp_output_30_0_g170462 = ( break961_g170438.x * break33_g170462.x );
				float temp_output_29_0_g170462 = ( break961_g170438.y * break33_g170462.y );
				float temp_output_31_0_g170462 = ( break961_g170438.z * break33_g170462.z );
				float temp_output_28_0_g170462 = ( temp_output_30_0_g170462 + temp_output_29_0_g170462 + temp_output_31_0_g170462 + ( break961_g170438.w * break33_g170462.w ) );
				float clampResult17_g170460 = clamp( temp_output_28_0_g170462 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170464 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170464 = ( clampResult17_g170460 - temp_output_7_0_g170464 );
				float lerpResult1026_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170464 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170463 = lerpResult1026_g170438;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170463 = ( temp_output_6_0_g170463 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170463 = temp_output_6_0_g170463;
				#endif
				half Blend_VertMask913_g170438 = staticSwitch14_g170463;
				half3 Visual_NormalWS953_g170438 = Out_NormalWS4_g170446;
				float clampResult17_g170466 = clamp( saturate( (Visual_NormalWS953_g170438).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170468 = _ThirdProjRemap.x;
				float temp_output_9_0_g170468 = ( clampResult17_g170466 - temp_output_7_0_g170468 );
				float lerpResult1004_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170468 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170438 = lerpResult1004_g170438;
				TVEGlobalData Data15_g170448 = Data204_g170214;
				float Out_Dummy15_g170448 = 0;
				float4 Out_CoatParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170448 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170448 = Data15_g170448.Dummy;
				Out_CoatParams15_g170448 = Data15_g170448.CoatParams;
				Out_PaintParams15_g170448 = Data15_g170448.PaintParams;
				Out_GlowParams15_g170448 = Data15_g170448.GlowParams;
				Out_AtmoParams15_g170448= Data15_g170448.AtmoParams;
				Out_FadeParams15_g170448= Data15_g170448.FadeParams;
				Out_FormParams15_g170448 = Data15_g170448.FormParams;
				Out_FlowParams15_g170448 = Data15_g170448.FlowParams;
				}
				half4 Global_CoatParams972_g170438 = Out_CoatParams15_g170448;
				float temp_output_6_0_g170472 = (Global_CoatParams972_g170438).y;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170472 = ( temp_output_6_0_g170472 + ( _ThirdElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170472 = temp_output_6_0_g170472;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170438 = staticSwitch14_g170472;
				#else
				float staticSwitch1056_g170438 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170438 = lerp( 1.0 , staticSwitch1056_g170438 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170438 = lerpResult1060_g170438;
				float clampResult17_g170467 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170438 * Blend_LumaMask1046_g170438 * Blend_VertMask913_g170438 * Blend_ProjMask912_g170438 * Blend_GlobalMask968_g170438 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170469 = ( clampResult17_g170467 - temp_output_7_0_g170469 );
				half Detail_Mask412_g170438 = ( saturate( ( ( temp_output_9_0_g170469 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170438 = lerp( Visual_Albedo527_g170438 , lerpResult985_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170438 = lerpResult989_g170438;
				#else
				float3 staticSwitch415_g170438 = Visual_Albedo527_g170438;
				#endif
				half3 Final_Albedo601_g170438 = staticSwitch415_g170438;
				float3 In_Albedo3_g170447 = Final_Albedo601_g170438;
				float3 In_AlbedoRaw3_g170447 = Final_Albedo601_g170438;
				half2 Visual_NormalTS529_g170438 = Out_NormalTS4_g170446;
				float2 lerpResult40_g170449 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170438 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170440) = _ThirdNormalTex;
				float localFilterTexture29_g170456 = ( 0.0 );
				SamplerState SS29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170456 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170456 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170456 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170456 = SamplerDefault29_g170456;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170456 = SamplerDefault29_g170456;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170456 = SamplerPoint29_g170456;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170456 = SamplerLow29_g170456;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170456 = SamplerMedium29_g170456;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170456 = SamplerHigh29_g170456;
				#endif
				}
				SamplerState Sampler276_g170440 = SS29_g170456;
				float4 temp_output_37_0_g170440 = Local_LayerCoords790_g170438;
				half4 Coords276_g170440 = temp_output_37_0_g170440;
				half2 TexCoord276_g170440 = packedInput.ase_texcoord8.xy;
				half4 localSampleMain276_g170440 = SampleMain( Texture276_g170440 , Sampler276_g170440 , Coords276_g170440 , TexCoord276_g170440 );
				TEXTURE2D(Texture275_g170440) = _ThirdNormalTex;
				SamplerState Sampler275_g170440 = SS29_g170456;
				half4 Coords275_g170440 = temp_output_37_0_g170440;
				half2 TexCoord275_g170440 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170440 = SampleExtra( Texture275_g170440 , Sampler275_g170440 , Coords275_g170440 , TexCoord275_g170440 );
				TEXTURE2D(Texture238_g170440) = _ThirdNormalTex;
				SamplerState Sampler238_g170440 = SS29_g170456;
				half4 Coords238_g170440 = temp_output_37_0_g170440;
				float3 temp_output_279_0_g170440 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170440 = temp_output_279_0_g170440;
				half4 localSamplePlanar2D238_g170440 = SamplePlanar2D( Texture238_g170440 , Sampler238_g170440 , Coords238_g170440 , WorldPosition238_g170440 );
				TEXTURE2D(Texture246_g170440) = _ThirdNormalTex;
				SamplerState Sampler246_g170440 = SS29_g170456;
				half4 Coords246_g170440 = temp_output_37_0_g170440;
				half3 WorldPosition246_g170440 = temp_output_279_0_g170440;
				float3 temp_output_280_0_g170440 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170440 = temp_output_280_0_g170440;
				half4 localSamplePlanar3D246_g170440 = SamplePlanar3D( Texture246_g170440 , Sampler246_g170440 , Coords246_g170440 , WorldPosition246_g170440 , WorldNormal246_g170440 );
				TEXTURE2D(Texture234_g170440) = _ThirdNormalTex;
				SamplerState Sampler234_g170440 = SS29_g170456;
				float4 Coords234_g170440 = temp_output_37_0_g170440;
				float3 WorldPosition234_g170440 = temp_output_279_0_g170440;
				float4 localSampleStochastic2D234_g170440 = SampleStochastic2D( Texture234_g170440 , Sampler234_g170440 , Coords234_g170440 , WorldPosition234_g170440 );
				TEXTURE2D(Texture263_g170440) = _ThirdNormalTex;
				SamplerState Sampler263_g170440 = SS29_g170456;
				half4 Coords263_g170440 = temp_output_37_0_g170440;
				half3 WorldPosition263_g170440 = temp_output_279_0_g170440;
				half3 WorldNormal263_g170440 = temp_output_280_0_g170440;
				half4 localSampleStochastic3D263_g170440 = SampleStochastic3D( Texture263_g170440 , Sampler263_g170440 , Coords263_g170440 , WorldPosition263_g170440 , WorldNormal263_g170440 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170438 = localSampleMain276_g170440;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170438 = localSampleExtra275_g170440;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170438 = localSamplePlanar2D238_g170440;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170438 = localSamplePlanar3D246_g170440;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170438 = localSampleStochastic2D234_g170440;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170438 = localSampleStochastic3D263_g170440;
				#else
				float4 staticSwitch698_g170438 = localSampleMain276_g170440;
				#endif
				half4 Local_NormalTex776_g170438 = staticSwitch698_g170438;
				half4 Normal_Packed45_g170442 = Local_NormalTex776_g170438;
				float2 appendResult58_g170442 = (float2(( (Normal_Packed45_g170442).x * (Normal_Packed45_g170442).w ) , (Normal_Packed45_g170442).y));
				half2 Normal_Default50_g170442 = appendResult58_g170442;
				half2 Normal_ASTC41_g170442 = (Normal_Packed45_g170442).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170442 = Normal_ASTC41_g170442;
				#else
				float2 staticSwitch38_g170442 = Normal_Default50_g170442;
				#endif
				half2 Normal_NO_DTX544_g170442 = (Normal_Packed45_g170442).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170442 = Normal_NO_DTX544_g170442;
				#else
				float2 staticSwitch37_g170442 = staticSwitch38_g170442;
				#endif
				float2 temp_output_724_0_g170438 = ( (staticSwitch37_g170442*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170443 = temp_output_724_0_g170438;
				float2 break71_g170443 = Normal_Planar45_g170443;
				float3 appendResult72_g170443 = (float3(break71_g170443.x , 0.0 , break71_g170443.y));
				float2 temp_output_858_0_g170438 = (mul( ase_worldToTangent, appendResult72_g170443 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#else
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#endif
				half2 Local_NormalTS729_g170438 = staticSwitch727_g170438;
				float2 temp_output_36_0_g170449 = ( lerpResult40_g170449 + Local_NormalTS729_g170438 );
				float2 lerpResult405_g170438 = lerp( Visual_NormalTS529_g170438 , temp_output_36_0_g170449 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170438 = lerpResult405_g170438;
				#else
				float2 staticSwitch418_g170438 = Visual_NormalTS529_g170438;
				#endif
				half2 Final_NormalTS612_g170438 = staticSwitch418_g170438;
				float2 In_NormalTS3_g170447 = Final_NormalTS612_g170438;
				float3 appendResult68_g170450 = (float3(Final_NormalTS612_g170438 , 1.0));
				float3 tanNormal74_g170450 = appendResult68_g170450;
				float3 worldNormal74_g170450 = normalize( float3(dot(tanToWorld0,tanNormal74_g170450), dot(tanToWorld1,tanNormal74_g170450), dot(tanToWorld2,tanNormal74_g170450)) );
				half3 Final_NormalWS956_g170438 = worldNormal74_g170450;
				float3 In_NormalWS3_g170447 = Final_NormalWS956_g170438;
				half4 Visual_Shader531_g170438 = Out_Shader4_g170446;
				float4 lerpResult1000_g170438 = lerp( Local_Masks750_g170438 , ( Visual_Shader531_g170438 * Local_Masks750_g170438 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170438 = lerp( Visual_Shader531_g170438 , lerpResult1000_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170438 = lerpResult998_g170438;
				#else
				float4 staticSwitch451_g170438 = Visual_Shader531_g170438;
				#endif
				half4 Final_Masks613_g170438 = staticSwitch451_g170438;
				float4 In_Shader3_g170447 = Final_Masks613_g170438;
				float4 In_Emissive3_g170447 = Out_Emissive4_g170446;
				float3 temp_output_3_0_g170452 = Final_Albedo601_g170438;
				float dotResult20_g170452 = dot( temp_output_3_0_g170452 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170438 = dotResult20_g170452;
				float In_Grayscale3_g170447 = Final_Grayscale615_g170438;
				float clampResult651_g170438 = clamp( saturate( ( Final_Grayscale615_g170438 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170438 = clampResult651_g170438;
				float In_Luminosity3_g170447 = Final_Luminosity652_g170438;
				half Visual_MultiMask547_g170438 = Out_MultiMask4_g170446;
				float lerpResult477_g170438 = lerp( Visual_MultiMask547_g170438 , Local_MultiMask767_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch482_g170438 = lerpResult477_g170438;
				#else
				float staticSwitch482_g170438 = Visual_MultiMask547_g170438;
				#endif
				half Final_MultiMask572_g170438 = staticSwitch482_g170438;
				float In_MultiMask3_g170447 = Final_MultiMask572_g170438;
				half Visual_AlphaClip559_g170438 = Out_AlphaClip4_g170446;
				float temp_output_718_0_g170438 = (Local_AlbedoTex777_g170438).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170438 = ( temp_output_718_0_g170438 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170438 = temp_output_718_0_g170438;
				#endif
				half Local_AlphaClip772_g170438 = staticSwitch924_g170438;
				float lerpResult448_g170438 = lerp( Visual_AlphaClip559_g170438 , Local_AlphaClip772_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch564_g170438 = lerpResult448_g170438;
				#else
				float staticSwitch564_g170438 = Visual_AlphaClip559_g170438;
				#endif
				half Final_AlphaClip602_g170438 = staticSwitch564_g170438;
				float In_AlphaClip3_g170447 = Final_AlphaClip602_g170438;
				half Visual_AlphaFade588_g170438 = Out_AlphaFade4_g170446;
				half Local_AlphaFade773_g170438 = (lerpResult706_g170438).a;
				float lerpResult604_g170438 = lerp( Visual_AlphaFade588_g170438 , Local_AlphaFade773_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch608_g170438 = lerpResult604_g170438;
				#else
				float staticSwitch608_g170438 = Visual_AlphaFade588_g170438;
				#endif
				half Final_AlphaFade611_g170438 = staticSwitch608_g170438;
				float In_AlphaFade3_g170447 = Final_AlphaFade611_g170438;
				float3 In_Translucency3_g170447 = Out_Translucency4_g170446;
				float In_Transmission3_g170447 = Out_Transmission4_g170446;
				float In_Thickness3_g170447 = Out_Thickness4_g170446;
				float In_Diffusion3_g170447 = Out_Diffusion4_g170446;
				{
				Data3_g170447.Dummy = In_Dummy3_g170447;
				Data3_g170447.Albedo = In_Albedo3_g170447;
				Data3_g170447.AlbedoRaw = In_AlbedoRaw3_g170447;
				Data3_g170447.NormalTS = In_NormalTS3_g170447;
				Data3_g170447.NormalWS = In_NormalWS3_g170447;
				Data3_g170447.Shader = In_Shader3_g170447;
				Data3_g170447.Emissive= In_Emissive3_g170447;
				Data3_g170447.MultiMask = In_MultiMask3_g170447;
				Data3_g170447.Grayscale = In_Grayscale3_g170447;
				Data3_g170447.Luminosity = In_Luminosity3_g170447;
				Data3_g170447.AlphaClip = In_AlphaClip3_g170447;
				Data3_g170447.AlphaFade = In_AlphaFade3_g170447;
				Data3_g170447.Translucency = In_Translucency3_g170447;
				Data3_g170447.Transmission = In_Transmission3_g170447;
				Data3_g170447.Thickness = In_Thickness3_g170447;
				Data3_g170447.Diffusion = In_Diffusion3_g170447;
				}
				TVEVisualData Data4_g170545 = Data3_g170447;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				{
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				}
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170552 = Data16_g170201;
				float Out_Dummy15_g170552 = 0;
				float3 Out_PositionWS15_g170552 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170552 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170552 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170552 = float3( 0,0,0 );
				float4 Out_VertexData15_g170552 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170552 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170552 = Data15_g170552.Dummy;
				Out_PositionWS15_g170552 = Data15_g170552.PositionWS;
				Out_PositionWO15_g170552 = Data15_g170552.PositionWO;
				Out_PivotWS15_g170552 = Data15_g170552.PivotWS;
				Out_PivotWO15_g170552 = Data15_g170552.PivotWO;
				Out_NormalWS15_g170552 = Data15_g170552.NormalWS;
				Out_ViewDirWS15_g170552 = Data15_g170552.ViewDirWS;
				Out_VertexData15_g170552 = Data15_g170552.VertexData;
				Out_BoundsData15_g170552 = Data15_g170552.BoundsData;
				}
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170552;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170550 = _occlusion_vert_mode;
				float temp_output_30_0_g170550 = ( break208_g170544.x * break33_g170550.x );
				float temp_output_29_0_g170550 = ( break208_g170544.y * break33_g170550.y );
				float temp_output_31_0_g170550 = ( break208_g170544.z * break33_g170550.z );
				float temp_output_28_0_g170550 = ( temp_output_30_0_g170550 + temp_output_29_0_g170550 + temp_output_31_0_g170550 + ( break208_g170544.w * break33_g170550.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170550;
				float clampResult17_g170548 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170553 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170553 = ( clampResult17_g170548 - temp_output_7_0_g170553 );
				float temp_output_6_0_g170549 = saturate( ( ( temp_output_9_0_g170553 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170549 = ( temp_output_6_0_g170549 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170549 = temp_output_6_0_g170549;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170549;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				{
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				}
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				{
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				}
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170562 = Data16_g170201;
				float Out_Dummy15_g170562 = 0;
				float3 Out_PositionWS15_g170562 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170562 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170562 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170562 = float3( 0,0,0 );
				float4 Out_VertexData15_g170562 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170562 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170562 = Data15_g170562.Dummy;
				Out_PositionWS15_g170562 = Data15_g170562.PositionWS;
				Out_PositionWO15_g170562 = Data15_g170562.PositionWO;
				Out_PivotWS15_g170562 = Data15_g170562.PivotWS;
				Out_PivotWO15_g170562 = Data15_g170562.PivotWO;
				Out_NormalWS15_g170562 = Data15_g170562.NormalWS;
				Out_ViewDirWS15_g170562 = Data15_g170562.ViewDirWS;
				Out_VertexData15_g170562 = Data15_g170562.VertexData;
				Out_BoundsData15_g170562 = Data15_g170562.BoundsData;
				}
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170562;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170563 = _GradientMeshRemap.x;
				float temp_output_9_0_g170563 = ( clampResult17_g170560 - temp_output_7_0_g170563 );
				float temp_output_6_0_g170561 = saturate( ( ( temp_output_9_0_g170563 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170561 = ( temp_output_6_0_g170561 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170561 = temp_output_6_0_g170561;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170561;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				{
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				}
				TVEVisualData Data4_g170566 = Data3_g170557;
				float Out_Dummy4_g170566 = 0;
				float3 Out_Albedo4_g170566 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170566 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170566 = float2( 0,0 );
				float3 Out_NormalWS4_g170566 = float3( 0,0,0 );
				float4 Out_Shader4_g170566 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170566 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170566 = 0;
				float Out_Grayscale4_g170566 = 0;
				float Out_Luminosity4_g170566 = 0;
				float Out_AlphaClip4_g170566 = 0;
				float Out_AlphaFade4_g170566 = 0;
				float3 Out_Translucency4_g170566 = float3( 0,0,0 );
				float Out_Transmission4_g170566 = 0;
				float Out_Thickness4_g170566 = 0;
				float Out_Diffusion4_g170566 = 0;
				{
				Out_Dummy4_g170566 = Data4_g170566.Dummy;
				Out_Albedo4_g170566 = Data4_g170566.Albedo;
				Out_AlbedoRaw4_g170566 = Data4_g170566.AlbedoRaw;
				Out_NormalTS4_g170566 = Data4_g170566.NormalTS;
				Out_NormalWS4_g170566 = Data4_g170566.NormalWS;
				Out_Shader4_g170566 = Data4_g170566.Shader;
				Out_Emissive4_g170566= Data4_g170566.Emissive;
				Out_MultiMask4_g170566 = Data4_g170566.MultiMask;
				Out_Grayscale4_g170566 = Data4_g170566.Grayscale;
				Out_Luminosity4_g170566= Data4_g170566.Luminosity;
				Out_AlphaClip4_g170566 = Data4_g170566.AlphaClip;
				Out_AlphaFade4_g170566 = Data4_g170566.AlphaFade;
				Out_Translucency4_g170566 = Data4_g170566.Translucency;
				Out_Transmission4_g170566 = Data4_g170566.Transmission;
				Out_Thickness4_g170566 = Data4_g170566.Thickness;
				Out_Diffusion4_g170566 = Data4_g170566.Diffusion;
				}
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170566;
				TVEModelData Data15_g170571 = Data16_g170201;
				float Out_Dummy15_g170571 = 0;
				float3 Out_PositionWS15_g170571 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170571 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170571 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170571 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170571 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170571 = float3( 0,0,0 );
				float4 Out_VertexData15_g170571 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170571 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170571 = Data15_g170571.Dummy;
				Out_PositionWS15_g170571 = Data15_g170571.PositionWS;
				Out_PositionWO15_g170571 = Data15_g170571.PositionWO;
				Out_PivotWS15_g170571 = Data15_g170571.PivotWS;
				Out_PivotWO15_g170571 = Data15_g170571.PivotWO;
				Out_NormalWS15_g170571 = Data15_g170571.NormalWS;
				Out_ViewDirWS15_g170571 = Data15_g170571.ViewDirWS;
				Out_VertexData15_g170571 = Data15_g170571.VertexData;
				Out_BoundsData15_g170571 = Data15_g170571.BoundsData;
				}
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170571;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170571;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170568 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170570 = clamp( tex3DNode60_g170568.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170572 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170572 = ( clampResult17_g170570 - temp_output_7_0_g170572 );
				float temp_output_238_0_g170564 = saturate( ( ( temp_output_9_0_g170572 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170566;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170567 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170567 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170567 = Out_NormalTS4_g170566;
				float3 In_NormalWS3_g170567 = Out_NormalWS4_g170566;
				float4 In_Shader3_g170567 = Out_Shader4_g170566;
				float4 In_Emissive3_g170567 = Out_Emissive4_g170566;
				float3 temp_output_3_0_g170565 = Final_Albedo160_g170564;
				float dotResult20_g170565 = dot( temp_output_3_0_g170565 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170564 = dotResult20_g170565;
				float In_Grayscale3_g170567 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170567 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170567 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170567 = Out_AlphaClip4_g170566;
				float In_AlphaFade3_g170567 = Out_AlphaFade4_g170566;
				float3 In_Translucency3_g170567 = Out_Translucency4_g170566;
				float In_Transmission3_g170567 = Out_Transmission4_g170566;
				float In_Thickness3_g170567 = Out_Thickness4_g170566;
				float In_Diffusion3_g170567 = Out_Diffusion4_g170566;
				{
				Data3_g170567.Dummy = In_Dummy3_g170567;
				Data3_g170567.Albedo = In_Albedo3_g170567;
				Data3_g170567.AlbedoRaw = In_AlbedoRaw3_g170567;
				Data3_g170567.NormalTS = In_NormalTS3_g170567;
				Data3_g170567.NormalWS = In_NormalWS3_g170567;
				Data3_g170567.Shader = In_Shader3_g170567;
				Data3_g170567.Emissive= In_Emissive3_g170567;
				Data3_g170567.MultiMask = In_MultiMask3_g170567;
				Data3_g170567.Grayscale = In_Grayscale3_g170567;
				Data3_g170567.Luminosity = In_Luminosity3_g170567;
				Data3_g170567.AlphaClip = In_AlphaClip3_g170567;
				Data3_g170567.AlphaFade = In_AlphaFade3_g170567;
				Data3_g170567.Translucency = In_Translucency3_g170567;
				Data3_g170567.Transmission = In_Transmission3_g170567;
				Data3_g170567.Thickness = In_Thickness3_g170567;
				Data3_g170567.Diffusion = In_Diffusion3_g170567;
				}
				TVEVisualData Data4_g170579 = Data3_g170567;
				float Out_Dummy4_g170579 = 0;
				float3 Out_Albedo4_g170579 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170579 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170579 = float2( 0,0 );
				float3 Out_NormalWS4_g170579 = float3( 0,0,0 );
				float4 Out_Shader4_g170579 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170579 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170579 = 0;
				float Out_Grayscale4_g170579 = 0;
				float Out_Luminosity4_g170579 = 0;
				float Out_AlphaClip4_g170579 = 0;
				float Out_AlphaFade4_g170579 = 0;
				float3 Out_Translucency4_g170579 = float3( 0,0,0 );
				float Out_Transmission4_g170579 = 0;
				float Out_Thickness4_g170579 = 0;
				float Out_Diffusion4_g170579 = 0;
				{
				Out_Dummy4_g170579 = Data4_g170579.Dummy;
				Out_Albedo4_g170579 = Data4_g170579.Albedo;
				Out_AlbedoRaw4_g170579 = Data4_g170579.AlbedoRaw;
				Out_NormalTS4_g170579 = Data4_g170579.NormalTS;
				Out_NormalWS4_g170579 = Data4_g170579.NormalWS;
				Out_Shader4_g170579 = Data4_g170579.Shader;
				Out_Emissive4_g170579= Data4_g170579.Emissive;
				Out_MultiMask4_g170579 = Data4_g170579.MultiMask;
				Out_Grayscale4_g170579 = Data4_g170579.Grayscale;
				Out_Luminosity4_g170579= Data4_g170579.Luminosity;
				Out_AlphaClip4_g170579 = Data4_g170579.AlphaClip;
				Out_AlphaFade4_g170579 = Data4_g170579.AlphaFade;
				Out_Translucency4_g170579 = Data4_g170579.Translucency;
				Out_Transmission4_g170579 = Data4_g170579.Transmission;
				Out_Thickness4_g170579 = Data4_g170579.Thickness;
				Out_Diffusion4_g170579 = Data4_g170579.Diffusion;
				}
				half3 Visual_Albedo139_g170574 = Out_Albedo4_g170579;
				float temp_output_200_12_g170574 = Out_Grayscale4_g170579;
				half Visual_Grayscale150_g170574 = temp_output_200_12_g170574;
				float3 temp_cast_33 = (Visual_Grayscale150_g170574).xxx;
				TVEGlobalData Data15_g170575 = Data204_g170214;
				float Out_Dummy15_g170575 = 0;
				float4 Out_CoatParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170575 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170575 = Data15_g170575.Dummy;
				Out_CoatParams15_g170575 = Data15_g170575.CoatParams;
				Out_PaintParams15_g170575 = Data15_g170575.PaintParams;
				Out_GlowParams15_g170575 = Data15_g170575.GlowParams;
				Out_AtmoParams15_g170575= Data15_g170575.AtmoParams;
				Out_FadeParams15_g170575= Data15_g170575.FadeParams;
				Out_FormParams15_g170575 = Data15_g170575.FormParams;
				Out_FlowParams15_g170575 = Data15_g170575.FlowParams;
				}
				half4 Global_PaintParams209_g170574 = Out_PaintParams15_g170575;
				float4 temp_output_6_0_g170596 = Global_PaintParams209_g170574;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170596 = ( temp_output_6_0_g170596 + ( _TintingElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170596 = temp_output_6_0_g170596;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170574 = staticSwitch14_g170596;
				#else
				float4 staticSwitch283_g170574 = TVE_PaintParams;
				#endif
				float lerpResult412_g170574 = lerp( 1.0 , ( saturate( (staticSwitch283_g170574).w ) * TVE_IsEnabled ) , _TintingGlobalValue);
				half Tinting_GlobalValue285_g170574 = lerpResult412_g170574;
				float3 lerpResult368_g170574 = lerp( Visual_Albedo139_g170574 , temp_cast_33 , ( Tinting_GlobalValue285_g170574 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g170574 = (staticSwitch283_g170574).xyz;
				float temp_output_200_11_g170574 = Out_MultiMask4_g170579;
				half Visual_MultiMask181_g170574 = temp_output_200_11_g170574;
				float lerpResult147_g170574 = lerp( 1.0 , Visual_MultiMask181_g170574 , _TintingMultiValue);
				half Tinting_MutiMask121_g170574 = lerpResult147_g170574;
				half Tinting_TexMask385_g170574 = 1.0;
				float temp_output_200_15_g170574 = Out_Luminosity4_g170579;
				half Visual_Luminosity257_g170574 = temp_output_200_15_g170574;
				float clampResult17_g170586 = clamp( Visual_Luminosity257_g170574 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170591 = _TintingLumaRemap.x;
				float temp_output_9_0_g170591 = ( clampResult17_g170586 - temp_output_7_0_g170591 );
				float lerpResult228_g170574 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170591 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170574 = lerpResult228_g170574;
				TVEModelData Data15_g170580 = Data16_g170201;
				float Out_Dummy15_g170580 = 0;
				float3 Out_PositionWS15_g170580 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170580 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170580 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170580 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170580 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170580 = float3( 0,0,0 );
				float4 Out_VertexData15_g170580 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170580 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170580 = Data15_g170580.Dummy;
				Out_PositionWS15_g170580 = Data15_g170580.PositionWS;
				Out_PositionWO15_g170580 = Data15_g170580.PositionWO;
				Out_PivotWS15_g170580 = Data15_g170580.PivotWS;
				Out_PivotWO15_g170580 = Data15_g170580.PivotWO;
				Out_NormalWS15_g170580 = Data15_g170580.NormalWS;
				Out_ViewDirWS15_g170580 = Data15_g170580.ViewDirWS;
				Out_VertexData15_g170580 = Data15_g170580.VertexData;
				Out_BoundsData15_g170580 = Data15_g170580.BoundsData;
				}
				half4 Model_VertexMasks307_g170574 = Out_VertexData15_g170580;
				float4 break311_g170574 = Model_VertexMasks307_g170574;
				float4 break33_g170583 = _tinting_vert_mode;
				float temp_output_30_0_g170583 = ( break311_g170574.x * break33_g170583.x );
				float temp_output_29_0_g170583 = ( break311_g170574.y * break33_g170583.y );
				float temp_output_31_0_g170583 = ( break311_g170574.z * break33_g170583.z );
				float temp_output_28_0_g170583 = ( temp_output_30_0_g170583 + temp_output_29_0_g170583 + temp_output_31_0_g170583 + ( break311_g170574.w * break33_g170583.w ) );
				float clampResult17_g170585 = clamp( temp_output_28_0_g170583 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170592 = _TintingMeshRemap.x;
				float temp_output_9_0_g170592 = ( clampResult17_g170585 - temp_output_7_0_g170592 );
				float lerpResult370_g170574 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170592 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170587 = lerpResult370_g170574;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170587 = ( temp_output_6_0_g170587 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170587 = temp_output_6_0_g170587;
				#endif
				half Tinting_VertMask309_g170574 = staticSwitch14_g170587;
				half Tinting_NoiseMask213_g170574 = 1.0;
				half Custom_Mask345_g170574 = 1.0;
				float temp_output_7_0_g170595 = _TintingBlendRemap.x;
				float temp_output_9_0_g170595 = ( ( _TintingIntensityValue * Tinting_MutiMask121_g170574 * Tinting_TexMask385_g170574 * Tinting_LumaMask153_g170574 * Tinting_VertMask309_g170574 * Tinting_NoiseMask213_g170574 * Tinting_GlobalValue285_g170574 * Custom_Mask345_g170574 ) - temp_output_7_0_g170595 );
				half Tinting_Mask242_g170574 = ( saturate( ( ( temp_output_9_0_g170595 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170574 = lerp( Visual_Albedo139_g170574 , ( lerpResult368_g170574 * 4.594794 * Tinting_GlobalColor290_g170574 * (_TintingColor).rgb ) , Tinting_Mask242_g170574);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170574 = lerpResult90_g170574;
				#else
				float3 staticSwitch286_g170574 = Visual_Albedo139_g170574;
				#endif
				half3 Final_Albedo97_g170574 = staticSwitch286_g170574;
				float3 In_Albedo3_g170578 = Final_Albedo97_g170574;
				float3 In_AlbedoRaw3_g170578 = Out_AlbedoRaw4_g170579;
				float2 In_NormalTS3_g170578 = Out_NormalTS4_g170579;
				float3 In_NormalWS3_g170578 = Out_NormalWS4_g170579;
				float4 In_Shader3_g170578 = Out_Shader4_g170579;
				float4 In_Emissive3_g170578 = Out_Emissive4_g170579;
				float In_Grayscale3_g170578 = temp_output_200_12_g170574;
				float In_Luminosity3_g170578 = temp_output_200_15_g170574;
				float In_MultiMask3_g170578 = temp_output_200_11_g170574;
				float In_AlphaClip3_g170578 = Out_AlphaClip4_g170579;
				float In_AlphaFade3_g170578 = Out_AlphaFade4_g170579;
				float3 In_Translucency3_g170578 = Out_Translucency4_g170579;
				float In_Transmission3_g170578 = Out_Transmission4_g170579;
				float In_Thickness3_g170578 = Out_Thickness4_g170579;
				float In_Diffusion3_g170578 = Out_Diffusion4_g170579;
				{
				Data3_g170578.Dummy = In_Dummy3_g170578;
				Data3_g170578.Albedo = In_Albedo3_g170578;
				Data3_g170578.AlbedoRaw = In_AlbedoRaw3_g170578;
				Data3_g170578.NormalTS = In_NormalTS3_g170578;
				Data3_g170578.NormalWS = In_NormalWS3_g170578;
				Data3_g170578.Shader = In_Shader3_g170578;
				Data3_g170578.Emissive= In_Emissive3_g170578;
				Data3_g170578.MultiMask = In_MultiMask3_g170578;
				Data3_g170578.Grayscale = In_Grayscale3_g170578;
				Data3_g170578.Luminosity = In_Luminosity3_g170578;
				Data3_g170578.AlphaClip = In_AlphaClip3_g170578;
				Data3_g170578.AlphaFade = In_AlphaFade3_g170578;
				Data3_g170578.Translucency = In_Translucency3_g170578;
				Data3_g170578.Transmission = In_Transmission3_g170578;
				Data3_g170578.Thickness = In_Thickness3_g170578;
				Data3_g170578.Diffusion = In_Diffusion3_g170578;
				}
				TVEVisualData Data4_g170600 = Data3_g170578;
				float Out_Dummy4_g170600 = 0;
				float3 Out_Albedo4_g170600 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170600 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170600 = float2( 0,0 );
				float3 Out_NormalWS4_g170600 = float3( 0,0,0 );
				float4 Out_Shader4_g170600 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170600 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170600 = 0;
				float Out_Grayscale4_g170600 = 0;
				float Out_Luminosity4_g170600 = 0;
				float Out_AlphaClip4_g170600 = 0;
				float Out_AlphaFade4_g170600 = 0;
				float3 Out_Translucency4_g170600 = float3( 0,0,0 );
				float Out_Transmission4_g170600 = 0;
				float Out_Thickness4_g170600 = 0;
				float Out_Diffusion4_g170600 = 0;
				{
				Out_Dummy4_g170600 = Data4_g170600.Dummy;
				Out_Albedo4_g170600 = Data4_g170600.Albedo;
				Out_AlbedoRaw4_g170600 = Data4_g170600.AlbedoRaw;
				Out_NormalTS4_g170600 = Data4_g170600.NormalTS;
				Out_NormalWS4_g170600 = Data4_g170600.NormalWS;
				Out_Shader4_g170600 = Data4_g170600.Shader;
				Out_Emissive4_g170600= Data4_g170600.Emissive;
				Out_MultiMask4_g170600 = Data4_g170600.MultiMask;
				Out_Grayscale4_g170600 = Data4_g170600.Grayscale;
				Out_Luminosity4_g170600= Data4_g170600.Luminosity;
				Out_AlphaClip4_g170600 = Data4_g170600.AlphaClip;
				Out_AlphaFade4_g170600 = Data4_g170600.AlphaFade;
				Out_Translucency4_g170600 = Data4_g170600.Translucency;
				Out_Transmission4_g170600 = Data4_g170600.Transmission;
				Out_Thickness4_g170600 = Data4_g170600.Thickness;
				Out_Diffusion4_g170600 = Data4_g170600.Diffusion;
				}
				half3 Visual_Albedo292_g170598 = Out_Albedo4_g170600;
				float temp_output_280_12_g170598 = Out_Grayscale4_g170600;
				half Visual_Grayscale308_g170598 = temp_output_280_12_g170598;
				float3 temp_cast_34 = (Visual_Grayscale308_g170598).xxx;
				TVEGlobalData Data15_g170599 = Data204_g170214;
				float Out_Dummy15_g170599 = 0;
				float4 Out_CoatParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170599 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170599 = Data15_g170599.Dummy;
				Out_CoatParams15_g170599 = Data15_g170599.CoatParams;
				Out_PaintParams15_g170599 = Data15_g170599.PaintParams;
				Out_GlowParams15_g170599 = Data15_g170599.GlowParams;
				Out_AtmoParams15_g170599= Data15_g170599.AtmoParams;
				Out_FadeParams15_g170599= Data15_g170599.FadeParams;
				Out_FormParams15_g170599 = Data15_g170599.FormParams;
				Out_FlowParams15_g170599 = Data15_g170599.FlowParams;
				}
				half4 Global_AtmoParams314_g170598 = Out_AtmoParams15_g170599;
				float temp_output_6_0_g170619 = (Global_AtmoParams314_g170598).x;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170619 = ( temp_output_6_0_g170619 + ( _DrynessElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170619 = temp_output_6_0_g170619;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170598 = staticSwitch14_g170619;
				#else
				float staticSwitch351_g170598 = TVE_AtmoData.x;
				#endif
				float lerpResult505_g170598 = lerp( 1.0 , ( staticSwitch351_g170598 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalMask352_g170598 = lerpResult505_g170598;
				float3 lerpResult485_g170598 = lerp( Visual_Albedo292_g170598 , temp_cast_34 , ( Dryness_GlobalMask352_g170598 * _DrynessGrayValue ));
				half Dryness_TexMask478_g170598 = 1.0;
				float temp_output_280_11_g170598 = Out_MultiMask4_g170600;
				half Visual_MultiMask310_g170598 = temp_output_280_11_g170598;
				float lerpResult283_g170598 = lerp( 1.0 , Visual_MultiMask310_g170598 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170598 = lerpResult283_g170598;
				float temp_output_280_15_g170598 = Out_Luminosity4_g170600;
				half Visual_Luminosity309_g170598 = temp_output_280_15_g170598;
				float clampResult17_g170610 = clamp( Visual_Luminosity309_g170598 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170615 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170615 = ( clampResult17_g170610 - temp_output_7_0_g170615 );
				float lerpResult295_g170598 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170615 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170598 = lerpResult295_g170598;
				TVEModelData Data15_g170604 = Data16_g170201;
				float Out_Dummy15_g170604 = 0;
				float3 Out_PositionWS15_g170604 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170604 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170604 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170604 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170604 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170604 = float3( 0,0,0 );
				float4 Out_VertexData15_g170604 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170604 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170604 = Data15_g170604.Dummy;
				Out_PositionWS15_g170604 = Data15_g170604.PositionWS;
				Out_PositionWO15_g170604 = Data15_g170604.PositionWO;
				Out_PivotWS15_g170604 = Data15_g170604.PivotWS;
				Out_PivotWO15_g170604 = Data15_g170604.PivotWO;
				Out_NormalWS15_g170604 = Data15_g170604.NormalWS;
				Out_ViewDirWS15_g170604 = Data15_g170604.ViewDirWS;
				Out_VertexData15_g170604 = Data15_g170604.VertexData;
				Out_BoundsData15_g170604 = Data15_g170604.BoundsData;
				}
				half4 Model_VertexMasks386_g170598 = Out_VertexData15_g170604;
				float4 break375_g170598 = Model_VertexMasks386_g170598;
				float4 break33_g170607 = _dryness_vert_mode;
				float temp_output_30_0_g170607 = ( break375_g170598.x * break33_g170607.x );
				float temp_output_29_0_g170607 = ( break375_g170598.y * break33_g170607.y );
				float temp_output_31_0_g170607 = ( break375_g170598.z * break33_g170607.z );
				float temp_output_28_0_g170607 = ( temp_output_30_0_g170607 + temp_output_29_0_g170607 + temp_output_31_0_g170607 + ( break375_g170598.w * break33_g170607.w ) );
				float clampResult17_g170608 = clamp( temp_output_28_0_g170607 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170616 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170616 = ( clampResult17_g170608 - temp_output_7_0_g170616 );
				float lerpResult452_g170598 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170616 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170611 = lerpResult452_g170598;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170611 = ( temp_output_6_0_g170611 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170611 = temp_output_6_0_g170611;
				#endif
				half Dryness_VertMask378_g170598 = staticSwitch14_g170611;
				half Dryness_MaskNoise291_g170598 = 1.0;
				half Custom_Mask411_g170598 = 1.0;
				float temp_output_7_0_g170618 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170618 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170598 * Dryness_MultiMask302_g170598 * Dryness_LumaMask301_g170598 * Dryness_VertMask378_g170598 * Dryness_MaskNoise291_g170598 * Dryness_GlobalMask352_g170598 * Custom_Mask411_g170598 ) - temp_output_7_0_g170618 );
				half Dryness_Mask329_g170598 = saturate( ( ( temp_output_9_0_g170618 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170598 = lerp( Visual_Albedo292_g170598 , ( lerpResult485_g170598 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170598 = lerpResult336_g170598;
				#else
				float3 staticSwitch356_g170598 = Visual_Albedo292_g170598;
				#endif
				half3 Final_Albedo331_g170598 = staticSwitch356_g170598;
				float3 In_Albedo3_g170601 = Final_Albedo331_g170598;
				float3 In_AlbedoRaw3_g170601 = Out_AlbedoRaw4_g170600;
				float2 In_NormalTS3_g170601 = Out_NormalTS4_g170600;
				float3 In_NormalWS3_g170601 = Out_NormalWS4_g170600;
				half4 Visual_Shader415_g170598 = Out_Shader4_g170600;
				float4 break438_g170598 = Visual_Shader415_g170598;
				float4 appendResult439_g170598 = (float4(break438_g170598.x , break438_g170598.y , break438_g170598.z , ( break438_g170598.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170598 = lerp( Visual_Shader415_g170598 , appendResult439_g170598 , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170598 = lerpResult427_g170598;
				#else
				float4 staticSwitch426_g170598 = Visual_Shader415_g170598;
				#endif
				half4 Final_Shader433_g170598 = staticSwitch426_g170598;
				float4 In_Shader3_g170601 = Final_Shader433_g170598;
				float4 In_Emissive3_g170601 = Out_Emissive4_g170600;
				float In_Grayscale3_g170601 = temp_output_280_12_g170598;
				float In_Luminosity3_g170601 = temp_output_280_15_g170598;
				float In_MultiMask3_g170601 = temp_output_280_11_g170598;
				float In_AlphaClip3_g170601 = Out_AlphaClip4_g170600;
				float In_AlphaFade3_g170601 = Out_AlphaFade4_g170600;
				float3 In_Translucency3_g170601 = Out_Translucency4_g170600;
				half Visual_Transmission416_g170598 = Out_Transmission4_g170600;
				float lerpResult421_g170598 = lerp( Visual_Transmission416_g170598 , ( Visual_Transmission416_g170598 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170598 = lerpResult421_g170598;
				#else
				float staticSwitch418_g170598 = Visual_Transmission416_g170598;
				#endif
				half Final_Transmission425_g170598 = staticSwitch418_g170598;
				float In_Transmission3_g170601 = Final_Transmission425_g170598;
				float In_Thickness3_g170601 = Out_Thickness4_g170600;
				float In_Diffusion3_g170601 = Out_Diffusion4_g170600;
				{
				Data3_g170601.Dummy = In_Dummy3_g170601;
				Data3_g170601.Albedo = In_Albedo3_g170601;
				Data3_g170601.AlbedoRaw = In_AlbedoRaw3_g170601;
				Data3_g170601.NormalTS = In_NormalTS3_g170601;
				Data3_g170601.NormalWS = In_NormalWS3_g170601;
				Data3_g170601.Shader = In_Shader3_g170601;
				Data3_g170601.Emissive= In_Emissive3_g170601;
				Data3_g170601.MultiMask = In_MultiMask3_g170601;
				Data3_g170601.Grayscale = In_Grayscale3_g170601;
				Data3_g170601.Luminosity = In_Luminosity3_g170601;
				Data3_g170601.AlphaClip = In_AlphaClip3_g170601;
				Data3_g170601.AlphaFade = In_AlphaFade3_g170601;
				Data3_g170601.Translucency = In_Translucency3_g170601;
				Data3_g170601.Transmission = In_Transmission3_g170601;
				Data3_g170601.Thickness = In_Thickness3_g170601;
				Data3_g170601.Diffusion = In_Diffusion3_g170601;
				}
				TVEVisualData Data4_g170623 = Data3_g170601;
				float Out_Dummy4_g170623 = 0;
				float3 Out_Albedo4_g170623 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170623 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170623 = float2( 0,0 );
				float3 Out_NormalWS4_g170623 = float3( 0,0,0 );
				float4 Out_Shader4_g170623 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170623 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170623 = 0;
				float Out_Grayscale4_g170623 = 0;
				float Out_Luminosity4_g170623 = 0;
				float Out_AlphaClip4_g170623 = 0;
				float Out_AlphaFade4_g170623 = 0;
				float3 Out_Translucency4_g170623 = float3( 0,0,0 );
				float Out_Transmission4_g170623 = 0;
				float Out_Thickness4_g170623 = 0;
				float Out_Diffusion4_g170623 = 0;
				{
				Out_Dummy4_g170623 = Data4_g170623.Dummy;
				Out_Albedo4_g170623 = Data4_g170623.Albedo;
				Out_AlbedoRaw4_g170623 = Data4_g170623.AlbedoRaw;
				Out_NormalTS4_g170623 = Data4_g170623.NormalTS;
				Out_NormalWS4_g170623 = Data4_g170623.NormalWS;
				Out_Shader4_g170623 = Data4_g170623.Shader;
				Out_Emissive4_g170623= Data4_g170623.Emissive;
				Out_MultiMask4_g170623 = Data4_g170623.MultiMask;
				Out_Grayscale4_g170623 = Data4_g170623.Grayscale;
				Out_Luminosity4_g170623= Data4_g170623.Luminosity;
				Out_AlphaClip4_g170623 = Data4_g170623.AlphaClip;
				Out_AlphaFade4_g170623 = Data4_g170623.AlphaFade;
				Out_Translucency4_g170623 = Data4_g170623.Translucency;
				Out_Transmission4_g170623 = Data4_g170623.Transmission;
				Out_Thickness4_g170623 = Data4_g170623.Thickness;
				Out_Diffusion4_g170623 = Data4_g170623.Diffusion;
				}
				half3 Visual_Albedo127_g170622 = Out_Albedo4_g170623;
				float4 vertexToFrag24_g170573 = packedInput.ase_texcoord12;
				half4 Interp_Data4335 = vertexToFrag24_g170573;
				float clampResult208_g170622 = clamp( (Interp_Data4335).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170622 = ( Visual_Albedo127_g170622 + ( ( Visual_Albedo127_g170622 * Visual_Albedo127_g170622 * 200.0 * _motion_highlight_color ) * clampResult208_g170622 ) );
				#else
				float3 staticSwitch214_g170622 = Visual_Albedo127_g170622;
				#endif
				half3 Final_Albedo160_g170622 = staticSwitch214_g170622;
				float3 In_Albedo3_g170624 = Final_Albedo160_g170622;
				float3 In_AlbedoRaw3_g170624 = Out_AlbedoRaw4_g170623;
				float2 In_NormalTS3_g170624 = Out_NormalTS4_g170623;
				float3 In_NormalWS3_g170624 = Out_NormalWS4_g170623;
				float4 In_Shader3_g170624 = Out_Shader4_g170623;
				float4 In_Emissive3_g170624 = Out_Emissive4_g170623;
				float In_Grayscale3_g170624 = Out_Grayscale4_g170623;
				float In_Luminosity3_g170624 = Out_Luminosity4_g170623;
				float In_MultiMask3_g170624 = Out_MultiMask4_g170623;
				float In_AlphaClip3_g170624 = Out_AlphaClip4_g170623;
				float In_AlphaFade3_g170624 = Out_AlphaFade4_g170623;
				float3 In_Translucency3_g170624 = Out_Translucency4_g170623;
				float In_Transmission3_g170624 = Out_Transmission4_g170623;
				float In_Thickness3_g170624 = Out_Thickness4_g170623;
				float In_Diffusion3_g170624 = Out_Diffusion4_g170623;
				{
				Data3_g170624.Dummy = In_Dummy3_g170624;
				Data3_g170624.Albedo = In_Albedo3_g170624;
				Data3_g170624.AlbedoRaw = In_AlbedoRaw3_g170624;
				Data3_g170624.NormalTS = In_NormalTS3_g170624;
				Data3_g170624.NormalWS = In_NormalWS3_g170624;
				Data3_g170624.Shader = In_Shader3_g170624;
				Data3_g170624.Emissive= In_Emissive3_g170624;
				Data3_g170624.MultiMask = In_MultiMask3_g170624;
				Data3_g170624.Grayscale = In_Grayscale3_g170624;
				Data3_g170624.Luminosity = In_Luminosity3_g170624;
				Data3_g170624.AlphaClip = In_AlphaClip3_g170624;
				Data3_g170624.AlphaFade = In_AlphaFade3_g170624;
				Data3_g170624.Translucency = In_Translucency3_g170624;
				Data3_g170624.Transmission = In_Transmission3_g170624;
				Data3_g170624.Thickness = In_Thickness3_g170624;
				Data3_g170624.Diffusion = In_Diffusion3_g170624;
				}
				TVEVisualData Data4_g170626 = Data3_g170624;
				float Out_Dummy4_g170626 = 0;
				float3 Out_Albedo4_g170626 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170626 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170626 = float2( 0,0 );
				float3 Out_NormalWS4_g170626 = float3( 0,0,0 );
				float4 Out_Shader4_g170626 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170626 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170626 = 0;
				float Out_Grayscale4_g170626 = 0;
				float Out_Luminosity4_g170626 = 0;
				float Out_AlphaClip4_g170626 = 0;
				float Out_AlphaFade4_g170626 = 0;
				float3 Out_Translucency4_g170626 = float3( 0,0,0 );
				float Out_Transmission4_g170626 = 0;
				float Out_Thickness4_g170626 = 0;
				float Out_Diffusion4_g170626 = 0;
				{
				Out_Dummy4_g170626 = Data4_g170626.Dummy;
				Out_Albedo4_g170626 = Data4_g170626.Albedo;
				Out_AlbedoRaw4_g170626 = Data4_g170626.AlbedoRaw;
				Out_NormalTS4_g170626 = Data4_g170626.NormalTS;
				Out_NormalWS4_g170626 = Data4_g170626.NormalWS;
				Out_Shader4_g170626 = Data4_g170626.Shader;
				Out_Emissive4_g170626= Data4_g170626.Emissive;
				Out_MultiMask4_g170626 = Data4_g170626.MultiMask;
				Out_Grayscale4_g170626 = Data4_g170626.Grayscale;
				Out_Luminosity4_g170626= Data4_g170626.Luminosity;
				Out_AlphaClip4_g170626 = Data4_g170626.AlphaClip;
				Out_AlphaFade4_g170626 = Data4_g170626.AlphaFade;
				Out_Translucency4_g170626 = Data4_g170626.Translucency;
				Out_Transmission4_g170626 = Data4_g170626.Transmission;
				Out_Thickness4_g170626 = Data4_g170626.Thickness;
				Out_Diffusion4_g170626 = Data4_g170626.Diffusion;
				}
				half3 Visual_Albedo127_g170625 = Out_Albedo4_g170626;
				float3 temp_output_622_0_g170625 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170629) = _OverlayAlbedoTex;
				float localFilterTexture19_g170641 = ( 0.0 );
				SamplerState SS19_g170641 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170641 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170641 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170641 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170641 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170641 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170641 = SamplerDefault19_g170641;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170641 = SamplerDefault19_g170641;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170641 = SamplerPoint19_g170641;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170641 = SamplerLow19_g170641;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170641 = SamplerMedium19_g170641;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170641 = SamplerHigh19_g170641;
				#endif
				}
				SamplerState Sampler238_g170629 = SS19_g170641;
				float4 temp_output_6_0_g170630 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170630 = ( temp_output_6_0_g170630 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170630 = temp_output_6_0_g170630;
				#endif
				half4 Overlay_Coords639_g170625 = staticSwitch14_g170630;
				float4 temp_output_37_0_g170629 = Overlay_Coords639_g170625;
				half4 Coords238_g170629 = temp_output_37_0_g170629;
				TVEModelData Data15_g170643 = Data16_g170201;
				float Out_Dummy15_g170643 = 0;
				float3 Out_PositionWS15_g170643 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170643 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170643 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170643 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170643 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170643 = float3( 0,0,0 );
				float4 Out_VertexData15_g170643 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170643 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170643 = Data15_g170643.Dummy;
				Out_PositionWS15_g170643 = Data15_g170643.PositionWS;
				Out_PositionWO15_g170643 = Data15_g170643.PositionWO;
				Out_PivotWS15_g170643 = Data15_g170643.PivotWS;
				Out_PivotWO15_g170643 = Data15_g170643.PivotWO;
				Out_NormalWS15_g170643 = Data15_g170643.NormalWS;
				Out_ViewDirWS15_g170643 = Data15_g170643.ViewDirWS;
				Out_VertexData15_g170643 = Data15_g170643.VertexData;
				Out_BoundsData15_g170643 = Data15_g170643.BoundsData;
				}
				half3 Model_PositionWO602_g170625 = Out_PositionWO15_g170643;
				float3 temp_output_279_0_g170629 = Model_PositionWO602_g170625;
				half3 WorldPosition238_g170629 = temp_output_279_0_g170629;
				half4 localSamplePlanar2D238_g170629 = SamplePlanar2D( Texture238_g170629 , Sampler238_g170629 , Coords238_g170629 , WorldPosition238_g170629 );
				TEXTURE2D(Texture246_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170629 = SS19_g170641;
				half4 Coords246_g170629 = temp_output_37_0_g170629;
				half3 WorldPosition246_g170629 = temp_output_279_0_g170629;
				half3 Model_NormalWS712_g170625 = Out_NormalWS15_g170643;
				float3 temp_output_280_0_g170629 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170629 = temp_output_280_0_g170629;
				half4 localSamplePlanar3D246_g170629 = SamplePlanar3D( Texture246_g170629 , Sampler246_g170629 , Coords246_g170629 , WorldPosition246_g170629 , WorldNormal246_g170629 );
				TEXTURE2D(Texture234_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170629 = SS19_g170641;
				float4 Coords234_g170629 = temp_output_37_0_g170629;
				float3 WorldPosition234_g170629 = temp_output_279_0_g170629;
				float4 localSampleStochastic2D234_g170629 = SampleStochastic2D( Texture234_g170629 , Sampler234_g170629 , Coords234_g170629 , WorldPosition234_g170629 );
				TEXTURE2D(Texture263_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170629 = SS19_g170641;
				half4 Coords263_g170629 = temp_output_37_0_g170629;
				half3 WorldPosition263_g170629 = temp_output_279_0_g170629;
				half3 WorldNormal263_g170629 = temp_output_280_0_g170629;
				half4 localSampleStochastic3D263_g170629 = SampleStochastic3D( Texture263_g170629 , Sampler263_g170629 , Coords263_g170629 , WorldPosition263_g170629 , WorldNormal263_g170629 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170625 = localSamplePlanar2D238_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170625 = localSamplePlanar3D246_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170625 = localSampleStochastic2D234_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170625 = localSampleStochastic3D263_g170629;
				#else
				float4 staticSwitch676_g170625 = localSamplePlanar2D238_g170629;
				#endif
				half3 Overlay_Albedo526_g170625 = (staticSwitch676_g170625).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170625 = ( temp_output_622_0_g170625 * Overlay_Albedo526_g170625 );
				#else
				float3 staticSwitch578_g170625 = temp_output_622_0_g170625;
				#endif
				float3 temp_output_6_0_g170644 = staticSwitch578_g170625;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170644 = ( temp_output_6_0_g170644 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170644 = temp_output_6_0_g170644;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				TEXTURE2D(Texture246_g170633) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170633 = sampler_Linear_Repeat;
				float4 appendResult863_g170625 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170633 = appendResult863_g170625;
				half4 Coords246_g170633 = temp_output_37_0_g170633;
				float3 temp_output_279_0_g170633 = Model_PositionWO602_g170625;
				half3 WorldPosition246_g170633 = temp_output_279_0_g170633;
				float3 temp_output_280_0_g170633 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170633 = temp_output_280_0_g170633;
				half4 localSamplePlanar3D246_g170633 = SamplePlanar3D( Texture246_g170633 , Sampler246_g170633 , Coords246_g170633 , WorldPosition246_g170633 , WorldNormal246_g170633 );
				half Overlay_GlitterTex854_g170625 = (localSamplePlanar3D246_g170633).x;
				half3 Model_PositionWS879_g170625 = Out_PositionWS15_g170643;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170625 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170625 * 1.0 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170625 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170625 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170625 = staticSwitch868_g170625;
				half Overlay_TexMask908_g170625 = 1.0;
				float3 temp_output_739_21_g170625 = Out_NormalWS4_g170626;
				half3 Visual_NormalWS749_g170625 = temp_output_739_21_g170625;
				float clampResult17_g170650 = clamp( saturate( (Visual_NormalWS749_g170625).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170654 = _OverlayProjRemap.x;
				float temp_output_9_0_g170654 = ( clampResult17_g170650 - temp_output_7_0_g170654 );
				float lerpResult842_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170654 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170625 = lerpResult842_g170625;
				float temp_output_739_15_g170625 = Out_Luminosity4_g170626;
				half Visual_Luminosity654_g170625 = temp_output_739_15_g170625;
				float clampResult17_g170658 = clamp( Visual_Luminosity654_g170625 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170659 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170659 = ( clampResult17_g170658 - temp_output_7_0_g170659 );
				float lerpResult587_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170659 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170625 = lerpResult587_g170625;
				half4 Model_VertexMasks791_g170625 = Out_VertexData15_g170643;
				float4 break792_g170625 = Model_VertexMasks791_g170625;
				float4 break33_g170645 = _overlay_vert_mode;
				float temp_output_30_0_g170645 = ( break792_g170625.x * break33_g170645.x );
				float temp_output_29_0_g170645 = ( break792_g170625.y * break33_g170645.y );
				float temp_output_31_0_g170645 = ( break792_g170625.z * break33_g170645.z );
				float temp_output_28_0_g170645 = ( temp_output_30_0_g170645 + temp_output_29_0_g170645 + temp_output_31_0_g170645 + ( break792_g170625.w * break33_g170645.w ) );
				float clampResult17_g170646 = clamp( temp_output_28_0_g170645 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170655 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170655 = ( clampResult17_g170646 - temp_output_7_0_g170655 );
				float lerpResult881_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170655 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170651 = lerpResult881_g170625;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170651 = ( temp_output_6_0_g170651 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170651 = temp_output_6_0_g170651;
				#endif
				half Overlay_VertMask801_g170625 = staticSwitch14_g170651;
				half Overlay_MaskNoise427_g170625 = 1.0;
				TVEGlobalData Data15_g170627 = Data204_g170214;
				float Out_Dummy15_g170627 = 0;
				float4 Out_CoatParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170627 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170627 = Data15_g170627.Dummy;
				Out_CoatParams15_g170627 = Data15_g170627.CoatParams;
				Out_PaintParams15_g170627 = Data15_g170627.PaintParams;
				Out_GlowParams15_g170627 = Data15_g170627.GlowParams;
				Out_AtmoParams15_g170627= Data15_g170627.AtmoParams;
				Out_FadeParams15_g170627= Data15_g170627.FadeParams;
				Out_FormParams15_g170627 = Data15_g170627.FormParams;
				Out_FlowParams15_g170627 = Data15_g170627.FlowParams;
				}
				half4 Global_AtmoParams516_g170625 = Out_AtmoParams15_g170627;
				float temp_output_6_0_g170660 = (Global_AtmoParams516_g170625).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170660 = ( temp_output_6_0_g170660 + ( _OverlayElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170660 = temp_output_6_0_g170660;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170625 = staticSwitch14_g170660;
				#else
				float staticSwitch705_g170625 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170625 = lerp( 1.0 , ( staticSwitch705_g170625 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170625 = lerpResult937_g170625;
				half Custom_Mask646_g170625 = 1.0;
				float temp_output_7_0_g170657 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170657 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170625 * Overlay_MaskProj457_g170625 * Overlay_MaskLuma438_g170625 * Overlay_VertMask801_g170625 * Overlay_MaskNoise427_g170625 * Overlay_MaskGlobal429_g170625 * Custom_Mask646_g170625 ) - temp_output_7_0_g170657 );
				half Overlay_Mask494_g170625 = saturate( ( ( temp_output_9_0_g170657 / ( _OverlayBlendRemap.y - temp_output_7_0_g170657 ) ) + 0.0001 ) );
				float3 lerpResult467_g170625 = lerp( Visual_Albedo127_g170625 , ( staticSwitch14_g170644 + Overlay_GlitterColor865_g170625 ) , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170625 = lerpResult467_g170625;
				#else
				float3 staticSwitch577_g170625 = Visual_Albedo127_g170625;
				#endif
				half3 Final_Albedo493_g170625 = staticSwitch577_g170625;
				float3 In_Albedo3_g170628 = Final_Albedo493_g170625;
				float3 In_AlbedoRaw3_g170628 = Out_AlbedoRaw4_g170626;
				half2 Visual_NormalTS535_g170625 = Out_NormalTS4_g170626;
				TEXTURE2D(Texture238_g170631) = _OverlayNormalTex;
				float localFilterTexture29_g170642 = ( 0.0 );
				SamplerState SS29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170642 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170642 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170642 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170642 = SamplerDefault29_g170642;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170642 = SamplerDefault29_g170642;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170642 = SamplerPoint29_g170642;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170642 = SamplerLow29_g170642;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170642 = SamplerMedium29_g170642;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170642 = SamplerHigh29_g170642;
				#endif
				}
				SamplerState Sampler238_g170631 = SS29_g170642;
				float4 temp_output_37_0_g170631 = Overlay_Coords639_g170625;
				half4 Coords238_g170631 = temp_output_37_0_g170631;
				float3 temp_output_279_0_g170631 = Model_PositionWO602_g170625;
				half3 WorldPosition238_g170631 = temp_output_279_0_g170631;
				half4 localSamplePlanar2D238_g170631 = SamplePlanar2D( Texture238_g170631 , Sampler238_g170631 , Coords238_g170631 , WorldPosition238_g170631 );
				TEXTURE2D(Texture246_g170631) = _OverlayNormalTex;
				SamplerState Sampler246_g170631 = SS29_g170642;
				half4 Coords246_g170631 = temp_output_37_0_g170631;
				half3 WorldPosition246_g170631 = temp_output_279_0_g170631;
				float3 temp_output_280_0_g170631 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170631 = temp_output_280_0_g170631;
				half4 localSamplePlanar3D246_g170631 = SamplePlanar3D( Texture246_g170631 , Sampler246_g170631 , Coords246_g170631 , WorldPosition246_g170631 , WorldNormal246_g170631 );
				TEXTURE2D(Texture234_g170631) = _OverlayNormalTex;
				SamplerState Sampler234_g170631 = SS29_g170642;
				float4 Coords234_g170631 = temp_output_37_0_g170631;
				float3 WorldPosition234_g170631 = temp_output_279_0_g170631;
				float4 localSampleStochastic2D234_g170631 = SampleStochastic2D( Texture234_g170631 , Sampler234_g170631 , Coords234_g170631 , WorldPosition234_g170631 );
				TEXTURE2D(Texture263_g170631) = _OverlayNormalTex;
				SamplerState Sampler263_g170631 = SS29_g170642;
				half4 Coords263_g170631 = temp_output_37_0_g170631;
				half3 WorldPosition263_g170631 = temp_output_279_0_g170631;
				half3 WorldNormal263_g170631 = temp_output_280_0_g170631;
				half4 localSampleStochastic3D263_g170631 = SampleStochastic3D( Texture263_g170631 , Sampler263_g170631 , Coords263_g170631 , WorldPosition263_g170631 , WorldNormal263_g170631 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170625 = localSamplePlanar2D238_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170625 = localSamplePlanar3D246_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170625 = localSampleStochastic2D234_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170625 = localSampleStochastic3D263_g170631;
				#else
				float4 staticSwitch686_g170625 = localSamplePlanar2D238_g170631;
				#endif
				half4 Normal_Packed45_g170635 = staticSwitch686_g170625;
				float2 appendResult58_g170635 = (float2(( (Normal_Packed45_g170635).x * (Normal_Packed45_g170635).w ) , (Normal_Packed45_g170635).y));
				half2 Normal_Default50_g170635 = appendResult58_g170635;
				half2 Normal_ASTC41_g170635 = (Normal_Packed45_g170635).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170635 = Normal_ASTC41_g170635;
				#else
				float2 staticSwitch38_g170635 = Normal_Default50_g170635;
				#endif
				half2 Normal_NO_DTX544_g170635 = (Normal_Packed45_g170635).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170635 = Normal_NO_DTX544_g170635;
				#else
				float2 staticSwitch37_g170635 = staticSwitch38_g170635;
				#endif
				half2 Normal_Planar45_g170634 = (staticSwitch37_g170635*2.0 + -1.0);
				float2 break71_g170634 = Normal_Planar45_g170634;
				float3 appendResult72_g170634 = (float3(break71_g170634.x , 0.0 , break71_g170634.y));
				half2 Overlay_Normal528_g170625 = (mul( ase_worldToTangent, appendResult72_g170634 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170625 = Overlay_Normal528_g170625;
				#else
				float2 staticSwitch579_g170625 = Visual_NormalTS535_g170625;
				#endif
				float2 lerpResult551_g170625 = lerp( Visual_NormalTS535_g170625 , ( staticSwitch579_g170625 * _OverlayNormalValue ) , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170625 = lerpResult551_g170625;
				#else
				float2 staticSwitch583_g170625 = Visual_NormalTS535_g170625;
				#endif
				half2 Final_NormalTS499_g170625 = staticSwitch583_g170625;
				float2 In_NormalTS3_g170628 = Final_NormalTS499_g170625;
				float3 In_NormalWS3_g170628 = temp_output_739_21_g170625;
				half4 Visual_Masks536_g170625 = Out_Shader4_g170626;
				float4 appendResult585_g170625 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170625 = lerp( Visual_Masks536_g170625 , appendResult585_g170625 , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170625 = lerpResult584_g170625;
				#else
				float4 staticSwitch586_g170625 = Visual_Masks536_g170625;
				#endif
				half4 Final_Masks482_g170625 = staticSwitch586_g170625;
				float4 In_Shader3_g170628 = Final_Masks482_g170625;
				float4 In_Emissive3_g170628 = Out_Emissive4_g170626;
				float temp_output_739_12_g170625 = Out_Grayscale4_g170626;
				float In_Grayscale3_g170628 = temp_output_739_12_g170625;
				float In_Luminosity3_g170628 = temp_output_739_15_g170625;
				float In_MultiMask3_g170628 = Out_MultiMask4_g170626;
				float In_AlphaClip3_g170628 = Out_AlphaClip4_g170626;
				float In_AlphaFade3_g170628 = Out_AlphaFade4_g170626;
				float3 In_Translucency3_g170628 = Out_Translucency4_g170626;
				half Visual_Transmission699_g170625 = Out_Transmission4_g170626;
				float lerpResult746_g170625 = lerp( Visual_Transmission699_g170625 , ( Visual_Transmission699_g170625 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170625 * Overlay_MaskNoise427_g170625 * Overlay_MaskGlobal429_g170625 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170625 = lerpResult746_g170625;
				#else
				float staticSwitch703_g170625 = Visual_Transmission699_g170625;
				#endif
				half Final_Transmission702_g170625 = staticSwitch703_g170625;
				float In_Transmission3_g170628 = Final_Transmission702_g170625;
				float In_Thickness3_g170628 = Out_Thickness4_g170626;
				float In_Diffusion3_g170628 = Out_Diffusion4_g170626;
				{
				Data3_g170628.Dummy = In_Dummy3_g170628;
				Data3_g170628.Albedo = In_Albedo3_g170628;
				Data3_g170628.AlbedoRaw = In_AlbedoRaw3_g170628;
				Data3_g170628.NormalTS = In_NormalTS3_g170628;
				Data3_g170628.NormalWS = In_NormalWS3_g170628;
				Data3_g170628.Shader = In_Shader3_g170628;
				Data3_g170628.Emissive= In_Emissive3_g170628;
				Data3_g170628.MultiMask = In_MultiMask3_g170628;
				Data3_g170628.Grayscale = In_Grayscale3_g170628;
				Data3_g170628.Luminosity = In_Luminosity3_g170628;
				Data3_g170628.AlphaClip = In_AlphaClip3_g170628;
				Data3_g170628.AlphaFade = In_AlphaFade3_g170628;
				Data3_g170628.Translucency = In_Translucency3_g170628;
				Data3_g170628.Transmission = In_Transmission3_g170628;
				Data3_g170628.Thickness = In_Thickness3_g170628;
				Data3_g170628.Diffusion = In_Diffusion3_g170628;
				}
				TVEVisualData Data4_g170663 = Data3_g170628;
				float Out_Dummy4_g170663 = 0;
				float3 Out_Albedo4_g170663 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170663 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170663 = float2( 0,0 );
				float3 Out_NormalWS4_g170663 = float3( 0,0,0 );
				float4 Out_Shader4_g170663 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170663 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170663 = 0;
				float Out_Grayscale4_g170663 = 0;
				float Out_Luminosity4_g170663 = 0;
				float Out_AlphaClip4_g170663 = 0;
				float Out_AlphaFade4_g170663 = 0;
				float3 Out_Translucency4_g170663 = float3( 0,0,0 );
				float Out_Transmission4_g170663 = 0;
				float Out_Thickness4_g170663 = 0;
				float Out_Diffusion4_g170663 = 0;
				{
				Out_Dummy4_g170663 = Data4_g170663.Dummy;
				Out_Albedo4_g170663 = Data4_g170663.Albedo;
				Out_AlbedoRaw4_g170663 = Data4_g170663.AlbedoRaw;
				Out_NormalTS4_g170663 = Data4_g170663.NormalTS;
				Out_NormalWS4_g170663 = Data4_g170663.NormalWS;
				Out_Shader4_g170663 = Data4_g170663.Shader;
				Out_Emissive4_g170663= Data4_g170663.Emissive;
				Out_MultiMask4_g170663 = Data4_g170663.MultiMask;
				Out_Grayscale4_g170663 = Data4_g170663.Grayscale;
				Out_Luminosity4_g170663= Data4_g170663.Luminosity;
				Out_AlphaClip4_g170663 = Data4_g170663.AlphaClip;
				Out_AlphaFade4_g170663 = Data4_g170663.AlphaFade;
				Out_Translucency4_g170663 = Data4_g170663.Translucency;
				Out_Transmission4_g170663 = Data4_g170663.Transmission;
				Out_Thickness4_g170663 = Data4_g170663.Thickness;
				Out_Diffusion4_g170663 = Data4_g170663.Diffusion;
				}
				half3 Visual_Albedo127_g170662 = Out_Albedo4_g170663;
				TVEGlobalData Data15_g170668 = Data204_g170214;
				float Out_Dummy15_g170668 = 0;
				float4 Out_CoatParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170668 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170668 = Data15_g170668.Dummy;
				Out_CoatParams15_g170668 = Data15_g170668.CoatParams;
				Out_PaintParams15_g170668 = Data15_g170668.PaintParams;
				Out_GlowParams15_g170668 = Data15_g170668.GlowParams;
				Out_AtmoParams15_g170668= Data15_g170668.AtmoParams;
				Out_FadeParams15_g170668= Data15_g170668.FadeParams;
				Out_FormParams15_g170668 = Data15_g170668.FormParams;
				Out_FlowParams15_g170668 = Data15_g170668.FlowParams;
				}
				half4 Global_AtmoParams516_g170662 = Out_AtmoParams15_g170668;
				float4 temp_output_6_0_g170689 = Global_AtmoParams516_g170662;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170689 = ( temp_output_6_0_g170689 + ( _WetnessElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170689 = temp_output_6_0_g170689;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170662 = staticSwitch14_g170689;
				#else
				float4 staticSwitch663_g170662 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170662 = lerp( float2( 1,1 ) , (( staticSwitch663_g170662 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170662 = lerpResult1121_g170662;
				half Global_Wetness429_g170662 = break1123_g170662.x;
				half Wetness_Value1042_g170662 = ( _WetnessIntensityValue * Global_Wetness429_g170662 );
				TVEModelData Data15_g170674 = Data16_g170201;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				}
				half4 Model_VertexData1030_g170662 = Out_VertexData15_g170674;
				float4 break1019_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170677 = _wetness_vert_mode;
				float temp_output_30_0_g170677 = ( break1019_g170662.x * break33_g170677.x );
				float temp_output_29_0_g170677 = ( break1019_g170662.y * break33_g170677.y );
				float temp_output_31_0_g170677 = ( break1019_g170662.z * break33_g170677.z );
				float temp_output_28_0_g170677 = ( temp_output_30_0_g170677 + temp_output_29_0_g170677 + temp_output_31_0_g170677 + ( break1019_g170662.w * break33_g170677.w ) );
				float clampResult17_g170676 = clamp( temp_output_28_0_g170677 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170685 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170685 = ( clampResult17_g170676 - temp_output_7_0_g170685 );
				float lerpResult1026_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170685 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170678 = lerpResult1026_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170678 = ( temp_output_6_0_g170678 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170678 = temp_output_6_0_g170678;
				#endif
				float temp_output_1025_0_g170662 = staticSwitch14_g170678;
				half Wetness_VertMask1024_g170662 = temp_output_1025_0_g170662;
				float temp_output_1043_0_g170662 = ( Wetness_Value1042_g170662 * Wetness_VertMask1024_g170662 );
				half Wetness_Mask866_g170662 = temp_output_1043_0_g170662;
				float4 break1083_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170680 = _wetness_water_vert_mode;
				float temp_output_30_0_g170680 = ( break1083_g170662.x * break33_g170680.x );
				float temp_output_29_0_g170680 = ( break1083_g170662.y * break33_g170680.y );
				float temp_output_31_0_g170680 = ( break1083_g170662.z * break33_g170680.z );
				float temp_output_28_0_g170680 = ( temp_output_30_0_g170680 + temp_output_29_0_g170680 + temp_output_31_0_g170680 + ( break1083_g170662.w * break33_g170680.w ) );
				float clampResult17_g170679 = clamp( temp_output_28_0_g170680 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170686 = ( clampResult17_g170679 - temp_output_7_0_g170686 );
				float lerpResult1089_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170686 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170681 = lerpResult1089_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170681 = ( temp_output_6_0_g170681 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170681 = temp_output_6_0_g170681;
				#endif
				float temp_output_1091_0_g170662 = staticSwitch14_g170681;
				half Water_VertMask1094_g170662 = temp_output_1091_0_g170662;
				half4 Visual_Masks536_g170662 = Out_Shader4_g170663;
				float lerpResult1013_g170662 = lerp( 1.0 , (Visual_Masks536_g170662).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170662 = lerpResult1013_g170662;
				float clampResult17_g170675 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170662 * Water_VertMask1094_g170662 ) - Water_HeightMask782_g170662 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170688 = ( clampResult17_g170675 - temp_output_7_0_g170688 );
				half3 Model_NormalWS798_g170662 = Out_NormalWS15_g170674;
				float temp_output_786_0_g170662 = saturate( (Model_NormalWS798_g170662).y );
				half Wetness_ProjMask790_g170662 = temp_output_786_0_g170662;
				half Water_Mask760_g170662 = ( saturate( ( ( temp_output_9_0_g170688 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170662 );
				float3 lerpResult918_g170662 = lerp( Visual_Albedo127_g170662 , ( Visual_Albedo127_g170662 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170662);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170662 = lerpResult918_g170662;
				#else
				float3 staticSwitch946_g170662 = Visual_Albedo127_g170662;
				#endif
				float3 lerpResult768_g170662 = lerp( staticSwitch946_g170662 , ( staticSwitch946_g170662 * staticSwitch946_g170662 ) , _WetnessContrastValue);
				float3 lerpResult651_g170662 = lerp( Visual_Albedo127_g170662 , lerpResult768_g170662 , Wetness_Mask866_g170662);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170662 = lerpResult651_g170662;
				#else
				float3 staticSwitch577_g170662 = Visual_Albedo127_g170662;
				#endif
				half3 Final_Albedo493_g170662 = staticSwitch577_g170662;
				float3 In_Albedo3_g170664 = Final_Albedo493_g170662;
				float3 In_AlbedoRaw3_g170664 = Out_AlbedoRaw4_g170663;
				half2 Visual_Normal535_g170662 = Out_NormalTS4_g170663;
				float lerpResult877_g170662 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170662 * Water_Mask760_g170662 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170662 = ( Visual_Normal535_g170662 * lerpResult877_g170662 );
				#else
				float2 staticSwitch957_g170662 = Visual_Normal535_g170662;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				TEXTURE2D(Texture238_g170672) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170672 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170662 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170672 = appendResult924_g170662;
				half4 Coords238_g170672 = temp_output_37_0_g170672;
				half3 Model_PositionWO602_g170662 = Out_PositionWO15_g170674;
				float3 temp_output_279_0_g170672 = Model_PositionWO602_g170662;
				half3 WorldPosition238_g170672 = temp_output_279_0_g170672;
				half4 localSamplePlanar2D238_g170672 = SamplePlanar2D( Texture238_g170672 , Sampler238_g170672 , Coords238_g170672 , WorldPosition238_g170672 );
				float4 temp_output_1010_0_g170662 = localSamplePlanar2D238_g170672;
				half2 Rain_DropsNormal919_g170662 = (temp_output_1010_0_g170662).zw;
				float2 temp_output_903_0_g170662 = (Rain_DropsNormal919_g170662*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170662 = (temp_output_1010_0_g170662).xy;
				float2 lerpResult904_g170662 = lerp( temp_output_903_0_g170662 , (Rain_RingsNormal713_g170662*2.0 + -1.0) , ( Water_Mask760_g170662 * Water_Mask760_g170662 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170662 = lerpResult904_g170662;
				#else
				float2 staticSwitch960_g170662 = temp_output_903_0_g170662;
				#endif
				half2 Rain_Drops1002_g170662 = ( staticSwitch960_g170662 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170662 = Out_PositionWS15_g170674;
				half Global_Rain955_g170662 = break1123_g170662.y;
				half Rain_Value1067_g170662 = Global_Rain955_g170662;
				float4 break1097_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170683 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170683 = ( break1097_g170662.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1097_g170662.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1097_g170662.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1097_g170662.w * break33_g170683.w ) );
				float clampResult17_g170682 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170687 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170687 = ( clampResult17_g170682 - temp_output_7_0_g170687 );
				float lerpResult1100_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170687 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170684 = lerpResult1100_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				float temp_output_1101_0_g170662 = staticSwitch14_g170684;
				half Rain_VertMask1108_g170662 = temp_output_1101_0_g170662;
				half Rain_Mask999_g170662 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170662 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170662 * Rain_VertMask1108_g170662 );
				half2 Normal_Planar45_g170671 = ( Rain_Drops1002_g170662 * Rain_Mask999_g170662 * Wetness_ProjMask790_g170662 );
				float2 break71_g170671 = Normal_Planar45_g170671;
				float3 appendResult72_g170671 = (float3(break71_g170671.x , 0.0 , break71_g170671.y));
				half2 Wetness_Normal526_g170662 = (mul( ase_worldToTangent, appendResult72_g170671 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170662 = Wetness_Normal526_g170662;
				#else
				float2 staticSwitch583_g170662 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170662 = ( staticSwitch957_g170662 + staticSwitch583_g170662 );
				#else
				float2 staticSwitch774_g170662 = Visual_Normal535_g170662;
				#endif
				half2 Final_Normal499_g170662 = staticSwitch774_g170662;
				float2 In_NormalTS3_g170664 = Final_Normal499_g170662;
				float3 In_NormalWS3_g170664 = Out_NormalWS4_g170663;
				float4 break658_g170662 = Visual_Masks536_g170662;
				float temp_output_935_0_g170662 = ( Wetness_Mask866_g170662 * _WetnessSmoothnessValue );
				float lerpResult941_g170662 = lerp( temp_output_935_0_g170662 , 2.0 , Water_Mask760_g170662);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170662 = lerpResult941_g170662;
				#else
				float staticSwitch959_g170662 = temp_output_935_0_g170662;
				#endif
				float4 appendResult661_g170662 = (float4(break658_g170662.x , break658_g170662.y , break658_g170662.z , saturate( ( break658_g170662.w + staticSwitch959_g170662 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170662 = appendResult661_g170662;
				#else
				float4 staticSwitch586_g170662 = Visual_Masks536_g170662;
				#endif
				half4 Final_Masks482_g170662 = staticSwitch586_g170662;
				float4 In_Shader3_g170664 = Final_Masks482_g170662;
				float4 In_Emissive3_g170664 = Out_Emissive4_g170663;
				float In_Grayscale3_g170664 = Out_Grayscale4_g170663;
				float In_Luminosity3_g170664 = Out_Luminosity4_g170663;
				float In_MultiMask3_g170664 = Out_MultiMask4_g170663;
				float In_AlphaClip3_g170664 = Out_AlphaClip4_g170663;
				float In_AlphaFade3_g170664 = Out_AlphaFade4_g170663;
				float3 In_Translucency3_g170664 = Out_Translucency4_g170663;
				float In_Transmission3_g170664 = Out_Transmission4_g170663;
				float In_Thickness3_g170664 = Out_Thickness4_g170663;
				float In_Diffusion3_g170664 = Out_Diffusion4_g170663;
				{
				Data3_g170664.Dummy = In_Dummy3_g170664;
				Data3_g170664.Albedo = In_Albedo3_g170664;
				Data3_g170664.AlbedoRaw = In_AlbedoRaw3_g170664;
				Data3_g170664.NormalTS = In_NormalTS3_g170664;
				Data3_g170664.NormalWS = In_NormalWS3_g170664;
				Data3_g170664.Shader = In_Shader3_g170664;
				Data3_g170664.Emissive= In_Emissive3_g170664;
				Data3_g170664.MultiMask = In_MultiMask3_g170664;
				Data3_g170664.Grayscale = In_Grayscale3_g170664;
				Data3_g170664.Luminosity = In_Luminosity3_g170664;
				Data3_g170664.AlphaClip = In_AlphaClip3_g170664;
				Data3_g170664.AlphaFade = In_AlphaFade3_g170664;
				Data3_g170664.Translucency = In_Translucency3_g170664;
				Data3_g170664.Transmission = In_Transmission3_g170664;
				Data3_g170664.Thickness = In_Thickness3_g170664;
				Data3_g170664.Diffusion = In_Diffusion3_g170664;
				}
				TVEVisualData Data4_g170694 = Data3_g170664;
				float Out_Dummy4_g170694 = 0;
				float3 Out_Albedo4_g170694 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170694 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170694 = float2( 0,0 );
				float3 Out_NormalWS4_g170694 = float3( 0,0,0 );
				float4 Out_Shader4_g170694 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170694 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170694 = 0;
				float Out_Grayscale4_g170694 = 0;
				float Out_Luminosity4_g170694 = 0;
				float Out_AlphaClip4_g170694 = 0;
				float Out_AlphaFade4_g170694 = 0;
				float3 Out_Translucency4_g170694 = float3( 0,0,0 );
				float Out_Transmission4_g170694 = 0;
				float Out_Thickness4_g170694 = 0;
				float Out_Diffusion4_g170694 = 0;
				{
				Out_Dummy4_g170694 = Data4_g170694.Dummy;
				Out_Albedo4_g170694 = Data4_g170694.Albedo;
				Out_AlbedoRaw4_g170694 = Data4_g170694.AlbedoRaw;
				Out_NormalTS4_g170694 = Data4_g170694.NormalTS;
				Out_NormalWS4_g170694 = Data4_g170694.NormalWS;
				Out_Shader4_g170694 = Data4_g170694.Shader;
				Out_Emissive4_g170694= Data4_g170694.Emissive;
				Out_MultiMask4_g170694 = Data4_g170694.MultiMask;
				Out_Grayscale4_g170694 = Data4_g170694.Grayscale;
				Out_Luminosity4_g170694= Data4_g170694.Luminosity;
				Out_AlphaClip4_g170694 = Data4_g170694.AlphaClip;
				Out_AlphaFade4_g170694 = Data4_g170694.AlphaFade;
				Out_Translucency4_g170694 = Data4_g170694.Translucency;
				Out_Transmission4_g170694 = Data4_g170694.Transmission;
				Out_Thickness4_g170694 = Data4_g170694.Thickness;
				Out_Diffusion4_g170694 = Data4_g170694.Diffusion;
				}
				float3 In_Albedo3_g170692 = Out_Albedo4_g170694;
				float3 In_AlbedoRaw3_g170692 = Out_AlbedoRaw4_g170694;
				float2 In_NormalTS3_g170692 = Out_NormalTS4_g170694;
				float3 In_NormalWS3_g170692 = Out_NormalWS4_g170694;
				float4 In_Shader3_g170692 = Out_Shader4_g170694;
				float4 In_Emissive3_g170692 = Out_Emissive4_g170694;
				float In_Grayscale3_g170692 = Out_Grayscale4_g170694;
				float In_Luminosity3_g170692 = Out_Luminosity4_g170694;
				float temp_output_836_11_g170691 = Out_MultiMask4_g170694;
				float In_MultiMask3_g170692 = temp_output_836_11_g170691;
				half Visual_AlphaClip667_g170691 = Out_AlphaClip4_g170694;
				half Input_True57_g170701 = Visual_AlphaClip667_g170691;
				half True36_g170701 = Input_True57_g170701;
				TVEGlobalData Data15_g170693 = Data204_g170214;
				float Out_Dummy15_g170693 = 0;
				float4 Out_CoatParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170693 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170693 = Data15_g170693.Dummy;
				Out_CoatParams15_g170693 = Data15_g170693.CoatParams;
				Out_PaintParams15_g170693 = Data15_g170693.PaintParams;
				Out_GlowParams15_g170693 = Data15_g170693.GlowParams;
				Out_AtmoParams15_g170693= Data15_g170693.AtmoParams;
				Out_FadeParams15_g170693= Data15_g170693.FadeParams;
				Out_FormParams15_g170693 = Data15_g170693.FormParams;
				Out_FlowParams15_g170693 = Data15_g170693.FlowParams;
				}
				half4 Global_FadeParams516_g170691 = Out_FadeParams15_g170693;
				float temp_output_6_0_g170704 = saturate( (Global_FadeParams516_g170691).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170704 = ( temp_output_6_0_g170704 + ( _CutoutElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170704 = temp_output_6_0_g170704;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170691 = staticSwitch14_g170704;
				#else
				float staticSwitch663_g170691 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170691 = lerp( 1.0 , ( staticSwitch663_g170691 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170691 = lerpResult843_g170691;
				float lerpResult811_g170691 = lerp( 1.0 , Visual_AlphaClip667_g170691 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170691 = lerpResult811_g170691;
				TVEModelData Data15_g170695 = Data16_g170201;
				float Out_Dummy15_g170695 = 0;
				float3 Out_PositionWS15_g170695 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170695 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170695 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170695 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170695 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170695 = float3( 0,0,0 );
				float4 Out_VertexData15_g170695 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170695 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170695 = Data15_g170695.Dummy;
				Out_PositionWS15_g170695 = Data15_g170695.PositionWS;
				Out_PositionWO15_g170695 = Data15_g170695.PositionWO;
				Out_PivotWS15_g170695 = Data15_g170695.PivotWS;
				Out_PivotWO15_g170695 = Data15_g170695.PivotWO;
				Out_NormalWS15_g170695 = Data15_g170695.NormalWS;
				Out_ViewDirWS15_g170695 = Data15_g170695.ViewDirWS;
				Out_VertexData15_g170695 = Data15_g170695.VertexData;
				Out_BoundsData15_g170695 = Data15_g170695.BoundsData;
				}
				half3 Model_PositionWO602_g170691 = Out_PositionWO15_g170695;
				float4 tex3DNode60_g170698 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170691 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170691 = lerp( 1.0 , tex3DNode60_g170698.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170691 = lerpResult673_g170691;
				half4 Model_VertexMasks752_g170691 = Out_VertexData15_g170695;
				float4 break755_g170691 = Model_VertexMasks752_g170691;
				float4 break33_g170696 = _cutout_vert_mode;
				float temp_output_30_0_g170696 = ( break755_g170691.x * break33_g170696.x );
				float temp_output_29_0_g170696 = ( break755_g170691.y * break33_g170696.y );
				float temp_output_31_0_g170696 = ( break755_g170691.z * break33_g170696.z );
				float temp_output_28_0_g170696 = ( temp_output_30_0_g170696 + temp_output_29_0_g170696 + temp_output_31_0_g170696 + ( break755_g170691.w * break33_g170696.w ) );
				float clampResult17_g170697 = clamp( temp_output_28_0_g170696 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170703 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170703 = ( clampResult17_g170697 - temp_output_7_0_g170703 );
				float lerpResult820_g170691 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170703 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170700 = lerpResult820_g170691;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170700 = ( temp_output_6_0_g170700 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170700 = temp_output_6_0_g170700;
				#endif
				float temp_output_801_0_g170691 = staticSwitch14_g170700;
				half Local_VertMask766_g170691 = temp_output_801_0_g170691;
				half Visual_MultiMask671_g170691 = temp_output_836_11_g170691;
				float lerpResult683_g170691 = lerp( 1.0 , Visual_MultiMask671_g170691 , _CutoutMultiValue);
				half Local_MultiMask685_g170691 = lerpResult683_g170691;
				float lerpResult728_g170691 = lerp( Visual_AlphaClip667_g170691 , min( Visual_AlphaClip667_g170691 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170691 ) - ( Local_AlphaMask814_g170691 * Local_NoiseMask678_g170691 * Local_VertMask766_g170691 ) ) ) ) , Local_MultiMask685_g170691);
				half Local_AlphaClip784_g170691 = lerpResult728_g170691;
				half Input_False58_g170701 = Local_AlphaClip784_g170691;
				half False36_g170701 = Input_False58_g170701;
				half localShadowPassCheck36_g170701 = ShadowPassCheck36_g170701( True36_g170701 , False36_g170701 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170691 = Local_AlphaClip784_g170691;
				#else
				float staticSwitch791_g170691 = localShadowPassCheck36_g170701;
				#endif
				float temp_output_6_0_g170702 = staticSwitch791_g170691;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170702 = ( temp_output_6_0_g170702 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170702 = temp_output_6_0_g170702;
				#endif
				float temp_output_798_0_g170691 = staticSwitch14_g170702;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170691 = temp_output_798_0_g170691;
				#else
				float staticSwitch577_g170691 = Visual_AlphaClip667_g170691;
				#endif
				half Final_AlphaClip795_g170691 = staticSwitch577_g170691;
				float In_AlphaClip3_g170692 = Final_AlphaClip795_g170691;
				float In_AlphaFade3_g170692 = Out_AlphaFade4_g170694;
				float3 In_Translucency3_g170692 = Out_Translucency4_g170694;
				float In_Transmission3_g170692 = Out_Transmission4_g170694;
				float In_Thickness3_g170692 = Out_Thickness4_g170694;
				float In_Diffusion3_g170692 = Out_Diffusion4_g170694;
				{
				Data3_g170692.Dummy = In_Dummy3_g170692;
				Data3_g170692.Albedo = In_Albedo3_g170692;
				Data3_g170692.AlbedoRaw = In_AlbedoRaw3_g170692;
				Data3_g170692.NormalTS = In_NormalTS3_g170692;
				Data3_g170692.NormalWS = In_NormalWS3_g170692;
				Data3_g170692.Shader = In_Shader3_g170692;
				Data3_g170692.Emissive= In_Emissive3_g170692;
				Data3_g170692.MultiMask = In_MultiMask3_g170692;
				Data3_g170692.Grayscale = In_Grayscale3_g170692;
				Data3_g170692.Luminosity = In_Luminosity3_g170692;
				Data3_g170692.AlphaClip = In_AlphaClip3_g170692;
				Data3_g170692.AlphaFade = In_AlphaFade3_g170692;
				Data3_g170692.Translucency = In_Translucency3_g170692;
				Data3_g170692.Transmission = In_Transmission3_g170692;
				Data3_g170692.Thickness = In_Thickness3_g170692;
				Data3_g170692.Diffusion = In_Diffusion3_g170692;
				}
				TVEVisualData Data4_g170708 = Data3_g170692;
				float Out_Dummy4_g170708 = 0;
				float3 Out_Albedo4_g170708 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170708 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170708 = float2( 0,0 );
				float3 Out_NormalWS4_g170708 = float3( 0,0,0 );
				float4 Out_Shader4_g170708 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170708 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170708 = 0;
				float Out_Grayscale4_g170708 = 0;
				float Out_Luminosity4_g170708 = 0;
				float Out_AlphaClip4_g170708 = 0;
				float Out_AlphaFade4_g170708 = 0;
				float3 Out_Translucency4_g170708 = float3( 0,0,0 );
				float Out_Transmission4_g170708 = 0;
				float Out_Thickness4_g170708 = 0;
				float Out_Diffusion4_g170708 = 0;
				{
				Out_Dummy4_g170708 = Data4_g170708.Dummy;
				Out_Albedo4_g170708 = Data4_g170708.Albedo;
				Out_AlbedoRaw4_g170708 = Data4_g170708.AlbedoRaw;
				Out_NormalTS4_g170708 = Data4_g170708.NormalTS;
				Out_NormalWS4_g170708 = Data4_g170708.NormalWS;
				Out_Shader4_g170708 = Data4_g170708.Shader;
				Out_Emissive4_g170708= Data4_g170708.Emissive;
				Out_MultiMask4_g170708 = Data4_g170708.MultiMask;
				Out_Grayscale4_g170708 = Data4_g170708.Grayscale;
				Out_Luminosity4_g170708= Data4_g170708.Luminosity;
				Out_AlphaClip4_g170708 = Data4_g170708.AlphaClip;
				Out_AlphaFade4_g170708 = Data4_g170708.AlphaFade;
				Out_Translucency4_g170708 = Data4_g170708.Translucency;
				Out_Transmission4_g170708 = Data4_g170708.Transmission;
				Out_Thickness4_g170708 = Data4_g170708.Thickness;
				Out_Diffusion4_g170708 = Data4_g170708.Diffusion;
				}
				float3 In_Albedo3_g170709 = Out_Albedo4_g170708;
				float3 In_AlbedoRaw3_g170709 = Out_AlbedoRaw4_g170708;
				float2 In_NormalTS3_g170709 = Out_NormalTS4_g170708;
				float3 In_NormalWS3_g170709 = Out_NormalWS4_g170708;
				float4 In_Shader3_g170709 = Out_Shader4_g170708;
				float4 In_Emissive3_g170709 = Out_Emissive4_g170708;
				float In_Grayscale3_g170709 = Out_Grayscale4_g170708;
				float In_Luminosity3_g170709 = Out_Luminosity4_g170708;
				float temp_output_821_11_g170706 = Out_MultiMask4_g170708;
				float In_MultiMask3_g170709 = temp_output_821_11_g170706;
				half Visual_AlphaClip754_g170706 = Out_AlphaClip4_g170708;
				half Input_True57_g170711 = Visual_AlphaClip754_g170706;
				half True36_g170711 = Input_True57_g170711;
				half Dither_Constant768_g170706 = _DitherConstantValue;
				float3 ase_positionWS = GetAbsolutePositionWS( PositionRWS );
				half Dither_BiasProximity881_g170706 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170706 = TVE_DitherParams.w;
				float lerpResult884_g170706 = lerp( 1.0 , Dither_BiasProximity881_g170706 , Dither_BiasEnabled883_g170706);
				float temp_output_7_0_g170717 = _DitherProximityMaxValue;
				float temp_output_9_0_g170717 = ( ( distance( ase_positionWS , _WorldSpaceCameraPos ) * lerpResult884_g170706 ) - temp_output_7_0_g170717 );
				half Dither_Proximity767_g170706 = ( saturate( ( ( temp_output_9_0_g170717 / ( _DitherProximityMinValue - temp_output_7_0_g170717 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170710 = Data16_g170201;
				float Out_Dummy15_g170710 = 0;
				float3 Out_PositionWS15_g170710 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170710 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170710 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170710 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170710 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170710 = float3( 0,0,0 );
				float4 Out_VertexData15_g170710 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170710 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170710 = Data15_g170710.Dummy;
				Out_PositionWS15_g170710 = Data15_g170710.PositionWS;
				Out_PositionWO15_g170710 = Data15_g170710.PositionWO;
				Out_PivotWS15_g170710 = Data15_g170710.PivotWS;
				Out_PivotWO15_g170710 = Data15_g170710.PivotWO;
				Out_NormalWS15_g170710 = Data15_g170710.NormalWS;
				Out_ViewDirWS15_g170710 = Data15_g170710.ViewDirWS;
				Out_VertexData15_g170710 = Data15_g170710.VertexData;
				Out_BoundsData15_g170710 = Data15_g170710.BoundsData;
				}
				half3 Model_PositionWS776_g170706 = Out_PositionWS15_g170710;
				half Dither_BiasDistance882_g170706 = TVE_DitherParams.z;
				float lerpResult888_g170706 = lerp( 1.0 , Dither_BiasDistance882_g170706 , Dither_BiasEnabled883_g170706);
				float temp_output_7_0_g170718 = _DitherDistanceMinValue;
				float temp_output_9_0_g170718 = ( ( distance( Model_PositionWS776_g170706 , _WorldSpaceCameraPos ) * lerpResult888_g170706 ) - temp_output_7_0_g170718 );
				half Dither_Distance856_g170706 = ( saturate( ( ( temp_output_9_0_g170718 / ( _DitherDistanceMaxValue - temp_output_7_0_g170718 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170706 = Out_ViewDirWS15_g170710;
				float3 normalizeResult792_g170706 = normalize( cross( ddy( ase_positionWS ) , ddx( ase_positionWS ) ) );
				float dotResult778_g170706 = dot( Model_ViewDirWS845_g170706 , normalizeResult792_g170706 );
				half Dither_Glancing784_g170706 = ( saturate( ( ( 1.0 - abs( dotResult778_g170706 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170706 = max( max( max( Dither_Constant768_g170706 , Dither_Proximity767_g170706 ) , Dither_Distance856_g170706 ) , Dither_Glancing784_g170706 );
				half3 Model_PositionWO602_g170706 = Out_PositionWO15_g170710;
				float4 tex3DNode60_g170713 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170706 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170706 = tex3DNode60_g170713.r;
				half Local_MaskNoise678_g170706 = temp_output_809_0_g170706;
				half Visual_MultiMask671_g170706 = temp_output_821_11_g170706;
				float lerpResult683_g170706 = lerp( 1.0 , Visual_MultiMask671_g170706 , _DitherMultiValue);
				half Local_MaskMulti685_g170706 = lerpResult683_g170706;
				half Custom_Mask826_g170706 = 1.0;
				float lerpResult728_g170706 = lerp( Visual_AlphaClip754_g170706 , min( Visual_AlphaClip754_g170706 , ( -0.001 - ( Dither_Value429_g170706 - Local_MaskNoise678_g170706 ) ) ) , ( Local_MaskMulti685_g170706 * Custom_Mask826_g170706 ));
				half Local_AlphaClip834_g170706 = lerpResult728_g170706;
				half Input_False58_g170711 = Local_AlphaClip834_g170706;
				half False36_g170711 = Input_False58_g170711;
				half localShadowPassCheck36_g170711 = ShadowPassCheck36_g170711( True36_g170711 , False36_g170711 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170706 = Local_AlphaClip834_g170706;
				#else
				float staticSwitch831_g170706 = localShadowPassCheck36_g170711;
				#endif
				float temp_output_6_0_g170712 = staticSwitch831_g170706;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170712 = ( temp_output_6_0_g170712 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170712 = temp_output_6_0_g170712;
				#endif
				float temp_output_840_0_g170706 = staticSwitch14_g170712;
				#ifdef TVE_DITHER
				float staticSwitch577_g170706 = temp_output_840_0_g170706;
				#else
				float staticSwitch577_g170706 = Visual_AlphaClip754_g170706;
				#endif
				half Final_AlphaClip493_g170706 = staticSwitch577_g170706;
				float In_AlphaClip3_g170709 = Final_AlphaClip493_g170706;
				float In_AlphaFade3_g170709 = Out_AlphaFade4_g170708;
				float3 In_Translucency3_g170709 = Out_Translucency4_g170708;
				float In_Transmission3_g170709 = Out_Transmission4_g170708;
				float In_Thickness3_g170709 = Out_Thickness4_g170708;
				float In_Diffusion3_g170709 = Out_Diffusion4_g170708;
				{
				Data3_g170709.Dummy = In_Dummy3_g170709;
				Data3_g170709.Albedo = In_Albedo3_g170709;
				Data3_g170709.AlbedoRaw = In_AlbedoRaw3_g170709;
				Data3_g170709.NormalTS = In_NormalTS3_g170709;
				Data3_g170709.NormalWS = In_NormalWS3_g170709;
				Data3_g170709.Shader = In_Shader3_g170709;
				Data3_g170709.Emissive= In_Emissive3_g170709;
				Data3_g170709.MultiMask = In_MultiMask3_g170709;
				Data3_g170709.Grayscale = In_Grayscale3_g170709;
				Data3_g170709.Luminosity = In_Luminosity3_g170709;
				Data3_g170709.AlphaClip = In_AlphaClip3_g170709;
				Data3_g170709.AlphaFade = In_AlphaFade3_g170709;
				Data3_g170709.Translucency = In_Translucency3_g170709;
				Data3_g170709.Transmission = In_Transmission3_g170709;
				Data3_g170709.Thickness = In_Thickness3_g170709;
				Data3_g170709.Diffusion = In_Diffusion3_g170709;
				}
				TVEVisualData Data4_g170731 = Data3_g170709;
				float Out_Dummy4_g170731 = 0;
				float3 Out_Albedo4_g170731 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170731 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170731 = float2( 0,0 );
				float3 Out_NormalWS4_g170731 = float3( 0,0,0 );
				float4 Out_Shader4_g170731 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170731 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170731 = 0;
				float Out_Grayscale4_g170731 = 0;
				float Out_Luminosity4_g170731 = 0;
				float Out_AlphaClip4_g170731 = 0;
				float Out_AlphaFade4_g170731 = 0;
				float3 Out_Translucency4_g170731 = float3( 0,0,0 );
				float Out_Transmission4_g170731 = 0;
				float Out_Thickness4_g170731 = 0;
				float Out_Diffusion4_g170731 = 0;
				{
				Out_Dummy4_g170731 = Data4_g170731.Dummy;
				Out_Albedo4_g170731 = Data4_g170731.Albedo;
				Out_AlbedoRaw4_g170731 = Data4_g170731.AlbedoRaw;
				Out_NormalTS4_g170731 = Data4_g170731.NormalTS;
				Out_NormalWS4_g170731 = Data4_g170731.NormalWS;
				Out_Shader4_g170731 = Data4_g170731.Shader;
				Out_Emissive4_g170731= Data4_g170731.Emissive;
				Out_MultiMask4_g170731 = Data4_g170731.MultiMask;
				Out_Grayscale4_g170731 = Data4_g170731.Grayscale;
				Out_Luminosity4_g170731= Data4_g170731.Luminosity;
				Out_AlphaClip4_g170731 = Data4_g170731.AlphaClip;
				Out_AlphaFade4_g170731 = Data4_g170731.AlphaFade;
				Out_Translucency4_g170731 = Data4_g170731.Translucency;
				Out_Transmission4_g170731 = Data4_g170731.Transmission;
				Out_Thickness4_g170731 = Data4_g170731.Thickness;
				Out_Diffusion4_g170731 = Data4_g170731.Diffusion;
				}
				float3 temp_output_297_0_g170727 = Out_Albedo4_g170731;
				float3 In_Albedo3_g170732 = temp_output_297_0_g170727;
				float3 temp_output_297_23_g170727 = Out_AlbedoRaw4_g170731;
				float3 In_AlbedoRaw3_g170732 = temp_output_297_23_g170727;
				float2 In_NormalTS3_g170732 = Out_NormalTS4_g170731;
				float3 In_NormalWS3_g170732 = Out_NormalWS4_g170731;
				float4 In_Shader3_g170732 = Out_Shader4_g170731;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170727 = Out_Emissive4_g170731;
				TVEModelData Data15_g170733 = Data16_g170201;
				float Out_Dummy15_g170733 = 0;
				float3 Out_PositionWS15_g170733 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170733 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170733 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170733 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170733 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170733 = float3( 0,0,0 );
				float4 Out_VertexData15_g170733 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170733 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170733 = Data15_g170733.Dummy;
				Out_PositionWS15_g170733 = Data15_g170733.PositionWS;
				Out_PositionWO15_g170733 = Data15_g170733.PositionWO;
				Out_PivotWS15_g170733 = Data15_g170733.PivotWS;
				Out_PivotWO15_g170733 = Data15_g170733.PivotWO;
				Out_NormalWS15_g170733 = Data15_g170733.NormalWS;
				Out_ViewDirWS15_g170733 = Data15_g170733.ViewDirWS;
				Out_VertexData15_g170733 = Data15_g170733.VertexData;
				Out_BoundsData15_g170733 = Data15_g170733.BoundsData;
				}
				half4 Model_VertexMasks216_g170727 = Out_VertexData15_g170733;
				float4 break251_g170727 = Model_VertexMasks216_g170727;
				float4 break33_g170738 = _emissive_vert_mode;
				float temp_output_30_0_g170738 = ( break251_g170727.x * break33_g170738.x );
				float temp_output_29_0_g170738 = ( break251_g170727.y * break33_g170738.y );
				float temp_output_31_0_g170738 = ( break251_g170727.z * break33_g170738.z );
				float temp_output_28_0_g170738 = ( temp_output_30_0_g170738 + temp_output_29_0_g170738 + temp_output_31_0_g170738 + ( break251_g170727.w * break33_g170738.w ) );
				float clampResult17_g170737 = clamp( temp_output_28_0_g170738 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170741 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170741 = ( clampResult17_g170737 - temp_output_7_0_g170741 );
				float lerpResult303_g170727 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170741 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170740 = lerpResult303_g170727;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170740 = ( temp_output_6_0_g170740 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170740 = temp_output_6_0_g170740;
				#endif
				half Emissive_MeshMask221_g170727 = staticSwitch14_g170740;
				TEXTURE2D(Texture276_g170729) = _EmissiveMaskTex;
				SamplerState Sampler276_g170729 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170730 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170730 = ( temp_output_6_0_g170730 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170730 = temp_output_6_0_g170730;
				#endif
				half4 Emissive_Coords167_g170727 = staticSwitch14_g170730;
				float4 temp_output_37_0_g170729 = Emissive_Coords167_g170727;
				half4 Coords276_g170729 = temp_output_37_0_g170729;
				half2 TexCoord276_g170729 = packedInput.ase_texcoord8.xy;
				half4 localSampleMain276_g170729 = SampleMain( Texture276_g170729 , Sampler276_g170729 , Coords276_g170729 , TexCoord276_g170729 );
				TEXTURE2D(Texture275_g170729) = _EmissiveMaskTex;
				SamplerState Sampler275_g170729 = sampler_Linear_Repeat;
				half4 Coords275_g170729 = temp_output_37_0_g170729;
				half2 TexCoord275_g170729 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170729 = SampleExtra( Texture275_g170729 , Sampler275_g170729 , Coords275_g170729 , TexCoord275_g170729 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170727 = localSampleMain276_g170729;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170727 = localSampleExtra275_g170729;
				#else
				float4 staticSwitch176_g170727 = localSampleMain276_g170729;
				#endif
				half4 Emissive_MaskTex201_g170727 = staticSwitch176_g170727;
				float clampResult17_g170739 = clamp( (Emissive_MaskTex201_g170727).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170742 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170742 = ( clampResult17_g170739 - temp_output_7_0_g170742 );
				float lerpResult302_g170727 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170742 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170727 = lerpResult302_g170727;
				float temp_output_279_0_g170727 = ( Emissive_MeshMask221_g170727 * Emissive_Mask103_g170727 );
				float3 appendResult293_g170727 = (float3(temp_output_279_0_g170727 , temp_output_279_0_g170727 , temp_output_279_0_g170727));
				half3 Local_EmissiveColor278_g170727 = appendResult293_g170727;
				float3 temp_output_316_0_g170727 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170728 = Data204_g170214;
				float Out_Dummy15_g170728 = 0;
				float4 Out_CoatParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170728 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170728 = Data15_g170728.Dummy;
				Out_CoatParams15_g170728 = Data15_g170728.CoatParams;
				Out_PaintParams15_g170728 = Data15_g170728.PaintParams;
				Out_GlowParams15_g170728 = Data15_g170728.GlowParams;
				Out_AtmoParams15_g170728= Data15_g170728.AtmoParams;
				Out_FadeParams15_g170728= Data15_g170728.FadeParams;
				Out_FormParams15_g170728 = Data15_g170728.FormParams;
				Out_FlowParams15_g170728 = Data15_g170728.FlowParams;
				}
				half4 Global_GlowParams179_g170727 = Out_GlowParams15_g170728;
				float3 temp_output_6_0_g170735 = (Global_GlowParams179_g170727).xyz;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170735 = ( temp_output_6_0_g170735 + ( _EmissiveElementMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170735 = temp_output_6_0_g170735;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170727 = staticSwitch14_g170735;
				#else
				float3 staticSwitch228_g170727 = temp_output_316_0_g170727;
				#endif
				float3 lerpResult299_g170727 = lerp( float3( 1,1,1 ) , staticSwitch228_g170727 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170727 = lerpResult299_g170727;
				half3 Visual_AlbedoRaw306_g170727 = temp_output_297_23_g170727;
				float3 lerpResult307_g170727 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170727 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170727 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170727 * lerpResult307_g170727 );
				half3 Emissive_Blend260_g170727 = ( ( (Visual_Emissive255_g170727).xyz * Local_EmissiveColor278_g170727 ) * Local_EmissiveValue88_g170727 );
				float3 temp_output_3_0_g170734 = Emissive_Blend260_g170727;
				float temp_output_15_0_g170734 = _emissive_power_value;
				float3 hdEmission22_g170734 = ASEGetEmissionHDRColor(temp_output_3_0_g170734,temp_output_15_0_g170734,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170727 = temp_output_279_0_g170727;
				float4 appendResult295_g170727 = (float4(hdEmission22_g170734 , Local_EmissiveMask294_g170727));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170727 = appendResult295_g170727;
				#else
				float4 staticSwitch129_g170727 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170727 = staticSwitch129_g170727;
				float4 In_Emissive3_g170732 = Final_Emissive184_g170727;
				float In_Grayscale3_g170732 = Out_Grayscale4_g170731;
				float In_Luminosity3_g170732 = Out_Luminosity4_g170731;
				float temp_output_297_11_g170727 = Out_MultiMask4_g170731;
				float In_MultiMask3_g170732 = temp_output_297_11_g170727;
				float In_AlphaClip3_g170732 = Out_AlphaClip4_g170731;
				float In_AlphaFade3_g170732 = Out_AlphaFade4_g170731;
				float3 In_Translucency3_g170732 = Out_Translucency4_g170731;
				float In_Transmission3_g170732 = Out_Transmission4_g170731;
				float In_Thickness3_g170732 = Out_Thickness4_g170731;
				float In_Diffusion3_g170732 = Out_Diffusion4_g170731;
				{
				Data3_g170732.Dummy = In_Dummy3_g170732;
				Data3_g170732.Albedo = In_Albedo3_g170732;
				Data3_g170732.AlbedoRaw = In_AlbedoRaw3_g170732;
				Data3_g170732.NormalTS = In_NormalTS3_g170732;
				Data3_g170732.NormalWS = In_NormalWS3_g170732;
				Data3_g170732.Shader = In_Shader3_g170732;
				Data3_g170732.Emissive= In_Emissive3_g170732;
				Data3_g170732.MultiMask = In_MultiMask3_g170732;
				Data3_g170732.Grayscale = In_Grayscale3_g170732;
				Data3_g170732.Luminosity = In_Luminosity3_g170732;
				Data3_g170732.AlphaClip = In_AlphaClip3_g170732;
				Data3_g170732.AlphaFade = In_AlphaFade3_g170732;
				Data3_g170732.Translucency = In_Translucency3_g170732;
				Data3_g170732.Transmission = In_Transmission3_g170732;
				Data3_g170732.Thickness = In_Thickness3_g170732;
				Data3_g170732.Diffusion = In_Diffusion3_g170732;
				}
				TVEVisualData Data4_g170763 = Data3_g170732;
				float Out_Dummy4_g170763 = 0;
				float3 Out_Albedo4_g170763 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170763 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170763 = float2( 0,0 );
				float3 Out_NormalWS4_g170763 = float3( 0,0,0 );
				float4 Out_Shader4_g170763 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170763 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170763 = 0;
				float Out_Grayscale4_g170763 = 0;
				float Out_Luminosity4_g170763 = 0;
				float Out_AlphaClip4_g170763 = 0;
				float Out_AlphaFade4_g170763 = 0;
				float3 Out_Translucency4_g170763 = float3( 0,0,0 );
				float Out_Transmission4_g170763 = 0;
				float Out_Thickness4_g170763 = 0;
				float Out_Diffusion4_g170763 = 0;
				{
				Out_Dummy4_g170763 = Data4_g170763.Dummy;
				Out_Albedo4_g170763 = Data4_g170763.Albedo;
				Out_AlbedoRaw4_g170763 = Data4_g170763.AlbedoRaw;
				Out_NormalTS4_g170763 = Data4_g170763.NormalTS;
				Out_NormalWS4_g170763 = Data4_g170763.NormalWS;
				Out_Shader4_g170763 = Data4_g170763.Shader;
				Out_Emissive4_g170763= Data4_g170763.Emissive;
				Out_MultiMask4_g170763 = Data4_g170763.MultiMask;
				Out_Grayscale4_g170763 = Data4_g170763.Grayscale;
				Out_Luminosity4_g170763= Data4_g170763.Luminosity;
				Out_AlphaClip4_g170763 = Data4_g170763.AlphaClip;
				Out_AlphaFade4_g170763 = Data4_g170763.AlphaFade;
				Out_Translucency4_g170763 = Data4_g170763.Translucency;
				Out_Transmission4_g170763 = Data4_g170763.Transmission;
				Out_Thickness4_g170763 = Data4_g170763.Thickness;
				Out_Diffusion4_g170763 = Data4_g170763.Diffusion;
				}
				half3 Visual_Albedo199_g170762 = Out_Albedo4_g170763;
				half3 Final_Albedo312_g170762 = Visual_Albedo199_g170762;
				float3 In_Albedo3_g170764 = Final_Albedo312_g170762;
				float3 In_AlbedoRaw3_g170764 = Out_AlbedoRaw4_g170763;
				float2 In_NormalTS3_g170764 = Out_NormalTS4_g170763;
				float3 In_NormalWS3_g170764 = Out_NormalWS4_g170763;
				float4 In_Shader3_g170764 = Out_Shader4_g170763;
				float4 In_Emissive3_g170764 = Out_Emissive4_g170763;
				float In_Grayscale3_g170764 = Out_Grayscale4_g170763;
				float In_Luminosity3_g170764 = Out_Luminosity4_g170763;
				float temp_output_301_11_g170762 = Out_MultiMask4_g170763;
				float In_MultiMask3_g170764 = temp_output_301_11_g170762;
				float In_AlphaClip3_g170764 = Out_AlphaClip4_g170763;
				float In_AlphaFade3_g170764 = Out_AlphaFade4_g170763;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g170762 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170762 );
				half Visual_Transmission138_g170762 = Out_Transmission4_g170763;
				half Subsurface_Value268_g170762 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170765 = Data204_g170214;
				float Out_Dummy15_g170765 = 0;
				float4 Out_CoatParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170765 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170765 = Data15_g170765.Dummy;
				Out_CoatParams15_g170765 = Data15_g170765.CoatParams;
				Out_PaintParams15_g170765 = Data15_g170765.PaintParams;
				Out_GlowParams15_g170765 = Data15_g170765.GlowParams;
				Out_AtmoParams15_g170765= Data15_g170765.AtmoParams;
				Out_FadeParams15_g170765= Data15_g170765.FadeParams;
				Out_FormParams15_g170765 = Data15_g170765.FormParams;
				Out_FlowParams15_g170765 = Data15_g170765.FlowParams;
				}
				half4 Global_GlowParams373_g170762 = Out_GlowParams15_g170765;
				float temp_output_6_0_g170768 = saturate( (Global_GlowParams373_g170762).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170768 = ( temp_output_6_0_g170768 + ( _SubsurfaceElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170768 = temp_output_6_0_g170768;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170762 = staticSwitch14_g170768;
				#else
				float staticSwitch367_g170762 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g170762 = lerp( 1.0 , staticSwitch367_g170762 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170762 = lerpResult403_g170762;
				half Visual_MultiMask292_g170762 = temp_output_301_11_g170762;
				float lerpResult293_g170762 = lerp( 1.0 , Visual_MultiMask292_g170762 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170762 = lerpResult293_g170762;
				half Custom_Mask363_g170762 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170762 = ( Visual_Transmission138_g170762 * Subsurface_Value268_g170762 * Subsurface_GlobalMask369_g170762 * Subsurface_MultiMask296_g170762 * Custom_Mask363_g170762 );
				#else
				float staticSwitch345_g170762 = 0.0;
				#endif
				half Final_Transmission269_g170762 = staticSwitch345_g170762;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170762 = ( Subsurface_Color264_g170762 * Final_Transmission269_g170762 * 10.0 );
				#else
				float3 staticSwitch348_g170762 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g170762 = staticSwitch348_g170762;
				float3 In_Translucency3_g170764 = Final_Translucency254_g170762;
				float In_Transmission3_g170764 = Final_Transmission269_g170762;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170762 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170762 = 1.0;
				#endif
				half Final_Thickness275_g170762 = staticSwitch351_g170762;
				float In_Thickness3_g170764 = Final_Thickness275_g170762;
				float Final_Diffusion340_g170762 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170764 = Final_Diffusion340_g170762;
				{
				Data3_g170764.Dummy = In_Dummy3_g170764;
				Data3_g170764.Albedo = In_Albedo3_g170764;
				Data3_g170764.AlbedoRaw = In_AlbedoRaw3_g170764;
				Data3_g170764.NormalTS = In_NormalTS3_g170764;
				Data3_g170764.NormalWS = In_NormalWS3_g170764;
				Data3_g170764.Shader = In_Shader3_g170764;
				Data3_g170764.Emissive= In_Emissive3_g170764;
				Data3_g170764.MultiMask = In_MultiMask3_g170764;
				Data3_g170764.Grayscale = In_Grayscale3_g170764;
				Data3_g170764.Luminosity = In_Luminosity3_g170764;
				Data3_g170764.AlphaClip = In_AlphaClip3_g170764;
				Data3_g170764.AlphaFade = In_AlphaFade3_g170764;
				Data3_g170764.Translucency = In_Translucency3_g170764;
				Data3_g170764.Transmission = In_Transmission3_g170764;
				Data3_g170764.Thickness = In_Thickness3_g170764;
				Data3_g170764.Diffusion = In_Diffusion3_g170764;
				}
				TVEVisualData Data4_g170777 = Data3_g170764;
				float Out_Dummy4_g170777 = 0;
				float3 Out_Albedo4_g170777 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170777 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170777 = float2( 0,0 );
				float3 Out_NormalWS4_g170777 = float3( 0,0,0 );
				float4 Out_Shader4_g170777 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170777 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170777 = 0;
				float Out_Grayscale4_g170777 = 0;
				float Out_Luminosity4_g170777 = 0;
				float Out_AlphaClip4_g170777 = 0;
				float Out_AlphaFade4_g170777 = 0;
				float3 Out_Translucency4_g170777 = float3( 0,0,0 );
				float Out_Transmission4_g170777 = 0;
				float Out_Thickness4_g170777 = 0;
				float Out_Diffusion4_g170777 = 0;
				{
				Out_Dummy4_g170777 = Data4_g170777.Dummy;
				Out_Albedo4_g170777 = Data4_g170777.Albedo;
				Out_AlbedoRaw4_g170777 = Data4_g170777.AlbedoRaw;
				Out_NormalTS4_g170777 = Data4_g170777.NormalTS;
				Out_NormalWS4_g170777 = Data4_g170777.NormalWS;
				Out_Shader4_g170777 = Data4_g170777.Shader;
				Out_Emissive4_g170777= Data4_g170777.Emissive;
				Out_MultiMask4_g170777 = Data4_g170777.MultiMask;
				Out_Grayscale4_g170777 = Data4_g170777.Grayscale;
				Out_Luminosity4_g170777= Data4_g170777.Luminosity;
				Out_AlphaClip4_g170777 = Data4_g170777.AlphaClip;
				Out_AlphaFade4_g170777 = Data4_g170777.AlphaFade;
				Out_Translucency4_g170777 = Data4_g170777.Translucency;
				Out_Transmission4_g170777 = Data4_g170777.Transmission;
				Out_Thickness4_g170777 = Data4_g170777.Thickness;
				Out_Diffusion4_g170777 = Data4_g170777.Diffusion;
				}
				half3 Input_Albedo24_g170776 = Out_Albedo4_g170777;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170776 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g170776 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g170776 = staticSwitch22_g170776;
				float4 break24_g170771 = Out_Shader4_g170777;
				half Metallic95_g170771 = break24_g170771.x;
				half Input_Metallic25_g170776 = Metallic95_g170771;
				half OneMinusReflectivity31_g170776 = ( (ColorSpaceDielectricSpec23_g170776).w - ( (ColorSpaceDielectricSpec23_g170776).w * Input_Metallic25_g170776 ) );
				
				float3 appendResult23_g170771 = (float3(Out_NormalTS4_g170777 , 1.0));
				float3 temp_output_13_0_g170775 = appendResult23_g170771;
				float3 temp_output_33_0_g170775 = ( temp_output_13_0_g170775 * _render_normal );
				float3 switchResult12_g170775 = (((IsFrontFace>0)?(temp_output_13_0_g170775):(temp_output_33_0_g170775)));
				
				float localCustomAlphaClip21_g170784 = ( 0.0 );
				float temp_output_3_0_g170784 = Out_AlphaClip4_g170777;
				float Alpha21_g170784 = temp_output_3_0_g170784;
				float temp_output_15_0_g170784 = 0.0;
				float Treshold21_g170784 = temp_output_15_0_g170784;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170784 - Treshold21_g170784);
				#endif
				#endif
				}
				
				surfaceDescription.BaseColor = ( Input_Albedo24_g170776 * OneMinusReflectivity31_g170776 );
				surfaceDescription.Normal = switchResult12_g170775;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = 0;
				#endif

				surfaceDescription.Emission = (Out_Emissive4_g170777).xyz;
				surfaceDescription.Smoothness = break24_g170771.w;
				surfaceDescription.Occlusion = break24_g170771.y;
				surfaceDescription.Alpha = saturate( ( Alpha21_g170784 * Out_AlphaFade4_g170777 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = Out_Thickness4_g170777;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = Out_Transmission4_g170777;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = Out_Diffusion4_g170777;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				#ifdef ASE_BAKEDGI
				surfaceDescription.BakedGI = 0;
				#endif

				#ifdef ASE_BAKEDBACKGI
				surfaceDescription.BakedBackGI = 0;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				#ifdef UNITY_VIRTUAL_TEXTURING
				surfaceDescription.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription,input, V, posInput, surfaceData, builtinData);

				BSDFData bsdfData = ConvertSurfaceDataToBSDFData(input.positionSS.xy, surfaceData);

				PreLightData preLightData = GetPreLightData(V, posInput, bsdfData);

				outColor = float4(0.0, 0.0, 0.0, 0.0);

				#ifdef DEBUG_DISPLAY
				#ifdef OUTPUT_SPLIT_LIGHTING
					outDiffuseLighting = float4(0, 0, 0, 1);
					ENCODE_INTO_SSSBUFFER(surfaceData, posInput.positionSS, outSSSBuffer);
				#endif

			    bool viewMaterial = GetMaterialDebugColor(outColor, input, builtinData, posInput, surfaceData, bsdfData);

				if (!viewMaterial)
				{
					if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_VALIDATE_DIFFUSE_COLOR || _DebugFullScreenMode == FULLSCREENDEBUGMODE_VALIDATE_SPECULAR_COLOR)
					{
						float3 result = float3(0.0, 0.0, 0.0);
						GetPBRValidatorDebug(surfaceData, result);
						outColor = float4(result, 1.0f);
					}
					else if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_TRANSPARENCY_OVERDRAW)
					{
						float4 result = _DebugTransparencyOverdrawWeight * float4(TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_A);
						outColor = result;
					}
					else
                #endif
					{
                #ifdef _SURFACE_TYPE_TRANSPARENT
						uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_TRANSPARENT;
                #else
						uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_OPAQUE;
                #endif
						LightLoopOutput lightLoopOutput;
						LightLoop(V, posInput, preLightData, bsdfData, builtinData, featureFlags, lightLoopOutput);

						// Alias
						float3 diffuseLighting = lightLoopOutput.diffuseLighting;
						float3 specularLighting = lightLoopOutput.specularLighting;

						diffuseLighting *= GetCurrentExposureMultiplier();
						specularLighting *= GetCurrentExposureMultiplier();

                #ifdef OUTPUT_SPLIT_LIGHTING
						if (_EnableSubsurfaceScattering != 0 && ShouldOutputSplitLighting(bsdfData))
						{
							outColor = float4(specularLighting, 1.0);
							outDiffuseLighting = float4(TagLightingForSSS(diffuseLighting), 1.0);
						}
						else
						{
							outColor = float4(diffuseLighting + specularLighting, 1.0);
							outDiffuseLighting = float4(0, 0, 0, 1);
						}
						ENCODE_INTO_SSSBUFFER(surfaceData, posInput.positionSS, outSSSBuffer);
                #else
						outColor = ApplyBlendMode(diffuseLighting, specularLighting, builtinData.opacity);

						#ifdef _ENABLE_FOG_ON_TRANSPARENT
						outColor = EvaluateAtmosphericScattering(posInput, V, outColor);
                        #endif

                        #ifdef _TRANSPARENT_REFRACTIVE_SORT
                        ComputeRefractionSplitColor(posInput, outColor, outBeforeRefractionColor, outBeforeRefractionAlpha);
                        #endif
                #endif

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
						float4 VPASSpositionCS = float4(packedInput.vpassPositionCS.xy, 0.0, packedInput.vpassPositionCS.z);
						float4 VPASSpreviousPositionCS = float4(packedInput.vpassPreviousPositionCS.xy, 0.0, packedInput.vpassPreviousPositionCS.z);
						bool forceNoMotion = any(unity_MotionVectorsParams.yw == 0.0);
                #if defined(HAVE_VFX_MODIFICATION) && !VFX_FEATURE_MOTION_VECTORS
                        forceNoMotion = true;
                #endif
				        if (!forceNoMotion)
						{
							float2 motionVec = CalculateMotionVector(VPASSpositionCS, VPASSpreviousPositionCS);
							EncodeMotionVector(motionVec * 0.5, outMotionVec);
							outMotionVec.zw = 1.0;
						}
				#endif
				}

				#ifdef DEBUG_DISPLAY
				}
				#endif

				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				#endif

                #ifdef UNITY_VIRTUAL_TEXTURING
				    float vtAlphaValue = builtinData.opacity;
                    #if defined(HAS_REFRACTION) && HAS_REFRACTION
					vtAlphaValue = 1.0f - bsdfData.transmittanceMask;
                #endif
				outVTFeedback = PackVTFeedbackWithAlpha(builtinData.vtPackedFeedback, input.positionSS.xy, vtAlphaValue);
				outVTFeedback.rgb *= outVTFeedback.a; // premuliplied alpha
                #endif

			}
			ENDHLSL
		}

		
		Pass
        {
			
            Name "ScenePickingPass"
            Tags { "LightMode"="Picking" }

            Cull [_CullMode]

            HLSLPROGRAM
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19702
			#define ASE_SRP_VERSION 170003
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma editor_sync_compilation
            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_DEPTH_ONLY
			#define SCENEPICKINGPASS 1

			#define ATTRIBUTES_NEED_NORMAL
			#define ATTRIBUTES_NEED_TANGENT
			#define VARYINGS_NEED_TANGENT_TO_WORLD

            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
	
            CBUFFER_START( UnityPerMaterial )
			half4 _SecondProjRemap;
			half4 _DrynessLumaRemap;
			float4 _DrynessColor;
			half4 _wetness_water_vert_mode;
			half4 _WetnessWaterMeshRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			half4 _WetnessWaterBlendRemap;
			half4 _TintingBlendRemap;
			half4 _TintingMeshRemap;
			half4 _tinting_vert_mode;
			half4 _object_phase_mode;
			half4 _TintingLumaRemap;
			float4 _TintingColor;
			half4 _wetness_drops_vert_mode;
			half4 _WetnessDropsMeshRemap;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _GradientMeshRemap;
			half4 _WetnessMeshRemap;
			half4 _wetness_vert_mode;
			half4 _MotionBaseMaskRemap;
			half4 _motion_base_proc_mode;
			half4 _motion_tiny_vert_mode;
			half4 _OverlayProjRemap;
			half4 _motion_tiny_proc_mode;
			half4 _MotionSmallMaskRemap;
			half4 _OverlayLumaRemap;
			half4 _motion_small_proc_mode;
			half4 _motion_small_vert_mode;
			half4 _overlay_coord_value;
			half4 _overlay_vert_mode;
			half4 _OverlayCoordValue;
			half4 _OverlayMeshRemap;
			half4 _OverlayColor;
			half4 _MotionHighlightColor;
			half4 _OverlayBlendRemap;
			half4 _second_vert_mode;
			half4 _DrynessBlendRemap;
			half4 _DrynessMeshRemap;
			half4 _WetnessWaterColor;
			half4 _dryness_vert_mode;
			half4 _motion_base_vert_mode;
			half4 _MotionTinyMaskRemap;
			half4 _GradientColorOne;
			half4 _gradient_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _emissive_coord_value;
			half4 _MainColor;
			half4 _ThirdColorTwo;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _third_coord_value;
			half4 _MainMultiRemap;
			half4 _EmissiveColor;
			half4 _second_coord_value;
			half4 _MainColorTwo;
			half4 _Color;
			half4 _SecondColor;
			half4 _SecondBlendRemap;
			half4 _SecondMultiRemap;
			half4 _SubsurfaceColor;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _SecondMeshRemap;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _SecondLumaRemap;
			half4 _SecondColorTwo;
			half4 _GradientColorTwo;
			half4 _ThirdColor;
			half4 _emissive_vert_mode;
			half4 _occlusion_vert_mode;
			half4 _cutout_vert_mode;
			half4 _CutoutMeshRemap;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _ThirdProjRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdMeshRemap;
			half4 _ThirdMaskCoordValue;
			half4 _third_vert_mode;
			half4 _ThirdLumaRemap;
			half4 _ThirdMaskRemap;
			half4 _SecondCoordValue;
			half4 _third_mask_coord_value;
			half4 _SecondMaskCoordValue;
			half4 _ThirdMultiRemap;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _EmissiveMeshRemap;
			half4 _OverlayGlitterColor;
			half3 _motion_highlight_color;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half _OverlayGlitterIntensityValue;
			half _ThirdBlendAlbedoValue;
			half _DitherGlancingValue;
			half _ThirdIntensityValue;
			half _DitherGlancingAngleValue;
			half _DitherDistanceValue;
			half _DitherDistanceMaxValue;
			half _ThirdMaskValue;
			half _DitherDistanceMinValue;
			half _ThirdLumaValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _DitherProximityMaxValue;
			half _ThirdMeshValue;
			half _DitherConstantValue;
			half _ThirdMeshMode;
			half _CutoutShadowMode;
			half _ThirdProjValue;
			half _ThirdElementMode;
			half _ThirdGlobalValue;
			half _CutoutMultiValue;
			half _ThirdBlendIntensityValue;
			half _ThirdBlendNormalValue;
			half _ThirdNormalValue;
			half _ThirdBlendShaderValue;
			half _ThirdAlphaClipValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _ThirdColorMode;
			half _DitherNoiseTillingValue;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SubsurfaceElementMode;
			half _SubsurfaceIntensityValue;
			half _SecondMeshValue;
			half _SecondMeshMode;
			half _SecondElementMode;
			half _EmissiveExposureValue;
			half _SecondGlobalValue;
			float _emissive_power_value;
			half _SecondBlendIntensityValue;
			half _EmissiveColorMode;
			half _EmissiveGlobalValue;
			half _CutoutNoiseValue;
			half _SecondBlendNormalValue;
			half _SecondNormalValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _ThirdAlbedoValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _DitherShadowMode;
			half _ThirdMetallicValue;
			half _DitherMultiValue;
			half _EmissiveElementMode;
			half _CutoutNoiseTillingValue;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _WetnessWaterMeshValue;
			half _WetnessMeshMode;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _WetnessMeshValue;
			half _WetnessGlobalValue;
			half _DrynessLumaValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _OverlaySubsurfaceValue;
			half _DrynessMeshValue;
			half _DrynessMeshMode;
			half _DrynessGrayValue;
			half _OverlaySmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _OverlayGlobalValue;
			half _MotionHighlightValue;
			half _OverlayElementMode;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _OverlayIntensityValue;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _OverlayGlitterDistValue;
			half _OverlayTextureMode;
			half _OverlayNormalValue;
			half _OverlayGlitterTillingValue;
			half _DrynessGlobalValue;
			half _WetnessWaterBaseValue;
			half _CutoutAlphaValue;
			half _CutoutGlobalValue;
			half _CutoutElementMode;
			half _CutoutIntensityValue;
			half _GradientMeshMode;
			half _GradientIntensityValue;
			half _GradientMultiValue;
			half _WetnessSmoothnessValue;
			half _WetnessDropsMeshMode;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _WetnessDropsMeshValue;
			half _VariationIntensityValue;
			half _WetnessWaterMeshMode;
			half _VariationMultiValue;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _WetnessDropsDistValue;
			half _TintingIntensityValue;
			half _TintingMultiValue;
			half _WetnessDropsNormalValue;
			half _TintingLumaValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsTillingValue;
			half _TintingMeshValue;
			half _TintingMeshMode;
			half _WetnessContrastValue;
			half _DrynessElementMode;
			half _TintingElementMode;
			half _DrynessSmoothnessValue;
			half _SecondAlbedoValue;
			half _SecondLumaValue;
			half _GlobalGlowLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalPivotInfo;
			half _GlobalEnd;
			half _GlobalCategory;
			half _SizeFadeScaleValue;
			half _GlobalGlowPivotValue;
			half _SizeFadeDistMinValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _ObjectModelMode;
			half _ObjectEnd;
			half _SizeFadeDistMaxValue;
			half _ObjectCategory;
			half _GlobalAtmoLayerValue;
			half _GlobalFadeLayerValue;
			half _MotionSmallPushValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _MotionSmallMaskMode;
			half _GlobalAtmoPivotValue;
			half _motion_small_mask_mode;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _SizeFadeGlobalValue;
			half _SizeFadeElementMode;
			half _GlobalFlowPivotValue;
			half _GlobalFlowLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _GlobalFadePivotValue;
			half _MotionSmallIntensityValue;
			half _MotionTinyIntensityValue;
			half _PerspectiveEnd;
			half _SizeFadeEnd;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _NoiseEnd;
			half _NoiseCategory;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _RenderSSR;
			half _IsVersion;
			half _RenderZWrite;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_cull;
			half _render_src;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _Cutoff;
			half _PerspectiveCategory;
			half _RenderPriority;
			half _RenderMotion;
			half _SizeFadeCategory;
			half _MotionPushInfo;
			half _MotionElementMode;
			half _MotionWindEnd;
			half _MotionCategory;
			half _NormalSpace;
			half _NormalEnd;
			half _NormalCategory;
			half _IsSubsurfaceShader;
			half _RenderQueue;
			half _IsGeneralShader;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _HasDefaultTextures;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _RenderShadow;
			half _RenderClip;
			half _RenderFilter;
			half _SecondProjValue;
			half _MotionDistValue;
			half _MotionTinyMaskMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _DetailEnd;
			half _SecondCoordMode;
			half _DetailCategory;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _TintingSpace;
			half _OcclusionBakeMode;
			half _TintingEnd;
			half _SecondMaskSampleMode;
			half _SecondBakeMode;
			half _SecondMaskValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SubsurfaceThicknessValue;
			half _MainAlphaClipValue;
			half _SecondMaskCoordMode;
			half _MainNormalValue;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainCategory;
			half _MainColorMode;
			half _motion_tiny_mask_mode;
			half _TintingCategory;
			half _DrynessSpace;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseMaskMode;
			half _SubsurfaceEnd;
			half _motion_base_mask_mode;
			half _motion_small_mode;
			half _MotionBasePushValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionTinyNoiseValue;
			half _MotionTinySpeedValue;
			half _MotionTinyTillingValue;
			half _MotionBaseIntensityValue;
			half _DrynessBakeMode;
			half _SubsurfaceDirectValue;
			half _SubsurfaceAmbientValue;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _SubsurfaceNormalValue;
			half _CutoutBakeMode;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SubsurfaceShadowValue;
			half _CutoutEnd;
			half _SubsurfaceAngleValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_SizeFadeParams;
			half4 TVE_FormParams;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			float TVE_FlowLayers[10];
			TEXTURE2D_ARRAY(TVE_FlowBaseTex);
			TEXTURE2D_ARRAY(TVE_FlowNearTex);
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			half4 TVE_AtmoData;
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			half4 TVE_DitherParams;
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_RELATIVE_WORLD_POS
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 FlowParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 uv1 : TEXCOORD3;
				float4 uv2 : TEXCOORD4;
				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					float3 vpassPositionCS : TEXCOORD5;
					float3 vpassPreviousPositionCS : TEXCOORD6;
				#endif
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_color : COLOR;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half ShadowPassCheck36_g170701( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170711( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(PickingSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif  
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    surfaceDescription.Alpha = 1.0f;
                }
                #endif

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                //BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);

            }

			AttributesMesh ApplyMeshModification(AttributesMesh inputMesh, float3 timeParameters, inout PackedVaryingsMeshToPS output )
			{
				_TimeParameters.xyz = timeParameters;
				TVEModelData Data16_g170761 = (TVEModelData)0;
				float In_Dummy16_g170761 = 0.0;
				TVEModelData Data16_g170745 = (TVEModelData)0;
				half Dummy1575_g170743 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170745 = Dummy1575_g170743;
				TVEModelData Data16_g170721 = (TVEModelData)0;
				float In_Dummy16_g170721 = 0.0;
				TVEModelData Data16_g170491 = (TVEModelData)0;
				half Dummy181_g170474 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170491 = Dummy181_g170474;
				TVEModelData Data16_g170433 = (TVEModelData)0;
				half Dummy181_g170431 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170433 = Dummy181_g170431;
				TVEModelData Data16_g170393 = (TVEModelData)0;
				half Dummy181_g170390 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170393 = Dummy181_g170390;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170200 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170200 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170200 = PositionOS131_g170196;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g170196 = ase_positionWS;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170200 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170206 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170206 = ( localObjectPosition_UNITY_MATRIX_M14_g170206 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170206 = localObjectPosition_UNITY_MATRIX_M14_g170206;
				#endif
				float3 temp_output_340_7_g170196 = staticSwitch13_g170206;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170208 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170204 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170204;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170208 = PivotOS149_g170196;
				float3 PivotsOnlyWS105_g170208 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170208 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170208 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170208 = ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 );
				#endif
				float3 temp_output_341_7_g170196 = staticSwitch13_g170208;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170200 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170200 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170200 = float3( 0,0,0 );
				float3 In_PivotOS16_g170200 = PivotOS149_g170196;
				float3 In_PivotWS16_g170200 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170200 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170200 = NormalOS134_g170196;
				float3 ase_normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170200 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170200 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170200 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170200 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170200 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170200 = VertexMasks171_g170196;
				float mulTime113_g170203 = _TimeParameters.x * 0.52;
				float lerpResult128_g170203 = lerp( mulTime113_g170203 , ( ( mulTime113_g170203 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170196 = PivotWO133_g170196;
				half Pivot_Position322_g170196 = ( break319_g170196.x + break319_g170196.z );
				float mulTime113_g170202 = _TimeParameters.x * 0.27;
				float lerpResult128_g170202 = lerp( mulTime113_g170202 , ( ( mulTime113_g170202 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170205 = _object_phase_mode;
				float temp_output_30_0_g170205 = ( inputMesh.ase_color.r * break33_g170205.x );
				float temp_output_29_0_g170205 = ( inputMesh.ase_color.g * break33_g170205.y );
				float temp_output_31_0_g170205 = ( inputMesh.ase_color.b * break33_g170205.z );
				float temp_output_28_0_g170205 = ( temp_output_30_0_g170205 + temp_output_29_0_g170205 + temp_output_31_0_g170205 + ( inputMesh.ase_color.a * break33_g170205.w ) );
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170205 + Pivot_Position322_g170196 ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(sin( ( lerpResult128_g170203 + Pivot_Position322_g170196 ) ) , sin( ( lerpResult128_g170202 + Pivot_Position322_g170196 ) ) , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_PhaseData16_g170200 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170196 = saturate( ( (PositionOS131_g170196).y / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170200 = BoundsData254_g170196;
				float4 In_RotationData16_g170200 = float4( 0,0,0,0 );
				{
				Data16_g170200.Dummy = In_Dummy16_g170200;
				Data16_g170200.PositionOS = In_PositionOS16_g170200;
				Data16_g170200.PositionWS = In_PositionWS16_g170200;
				Data16_g170200.PositionWO = In_PositionWO16_g170200;
				Data16_g170200.PositionRawOS = In_PositionRawOS16_g170200;
				Data16_g170200.PositionAddOS = In_PositionAddOS16_g170200;
				Data16_g170200.PivotOS = In_PivotOS16_g170200;
				Data16_g170200.PivotWS = In_PivotWS16_g170200;
				Data16_g170200.PivotWO = In_PivotWO16_g170200;
				Data16_g170200.NormalOS = In_NormalOS16_g170200;
				Data16_g170200.NormalWS = In_NormalWS16_g170200;
				Data16_g170200.NormalRawOS = In_NormalRawOS16_g170200;
				Data16_g170200.NormalRawWS = In_NormalRawWS16_g170200;
				Data16_g170200.TangentOS = In_TangentOS16_g170200;
				Data16_g170200.ViewDirWS = In_ViewDirWS16_g170200;
				Data16_g170200.VertexData = In_VertexData16_g170200;
				Data16_g170200.PhaseData = In_PhaseData16_g170200;
				Data16_g170200.BoundsData = In_BoundsData16_g170200;
				Data16_g170200.RotationData = In_RotationData16_g170200;
				}
				TVEModelData Data15_g170371 = Data16_g170200;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_PhaseData15_g170371 = Data15_g170371.PhaseData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_PhaseData16_g170370 = Out_PhaseData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.PhaseData = In_PhaseData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170391 = Data16_g170370;
				float Out_Dummy15_g170391 = 0;
				float3 Out_PositionOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170391 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170391 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170391 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170391 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170391 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170391 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170391 = float3( 0,0,0 );
				float4 Out_VertexData15_g170391 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170391 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170391 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170391 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170391 = Data15_g170391.Dummy;
				Out_PositionOS15_g170391 = Data15_g170391.PositionOS;
				Out_PositionWS15_g170391 = Data15_g170391.PositionWS;
				Out_PositionWO15_g170391 = Data15_g170391.PositionWO;
				Out_PositionRawOS15_g170391 = Data15_g170391.PositionRawOS;
				Out_PositionAddOS15_g170391 = Data15_g170391.PositionAddOS;
				Out_PivotOS15_g170391 = Data15_g170391.PivotOS;
				Out_PivotWS15_g170391 = Data15_g170391.PivotWS;
				Out_PivotWO15_g170391 = Data15_g170391.PivotWO;
				Out_NormalOS15_g170391 = Data15_g170391.NormalOS;
				Out_NormalWS15_g170391 = Data15_g170391.NormalWS;
				Out_NormalRawOS15_g170391 = Data15_g170391.NormalRawOS;
				Out_NormalRawWS15_g170391 = Data15_g170391.NormalRawWS;
				Out_TangentOS15_g170391 = Data15_g170391.TangentOS;
				Out_ViewDirWS15_g170391 = Data15_g170391.ViewDirWS;
				Out_VertexData15_g170391 = Data15_g170391.VertexData;
				Out_PhaseData15_g170391 = Data15_g170391.PhaseData;
				Out_BoundsData15_g170391 = Data15_g170391.BoundsData;
				Out_RotationData15_g170391 = Data15_g170391.RotationData;
				}
				half3 Model_PositionOS147_g170390 = Out_PositionOS15_g170391;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170392 = unity_CameraToWorld;
				float3 appendResult118_g170392 = (float3(break117_g170392[ 0 ][ 2 ] , break117_g170392[ 1 ][ 2 ] , break117_g170392[ 2 ][ 2 ]));
				float3 lerpResult209_g170390 = lerp( ase_viewDirSafeWS , -appendResult118_g170392 , unity_OrthoParams.w);
				float3 break201_g170390 = cross( lerpResult209_g170390 , half3(0,1,0) );
				float3 appendResult196_g170390 = (float3(-break201_g170390.z , 0.0 , break201_g170390.x));
				float dotResult189_g170390 = dot( ase_viewDirSafeWS , float3(0,1,0) );
				float saferPower192_g170390 = abs( dotResult189_g170390 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170390 = ( Model_PositionOS147_g170390 + ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170390 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170390 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170390).y ) ) );
				#else
				float3 staticSwitch211_g170390 = Model_PositionOS147_g170390;
				#endif
				half3 Final_Position178_g170390 = staticSwitch211_g170390;
				float3 In_PositionOS16_g170393 = Final_Position178_g170390;
				float3 In_PositionWS16_g170393 = Out_PositionWS15_g170391;
				float3 In_PositionWO16_g170393 = Out_PositionWO15_g170391;
				float3 In_PositionRawOS16_g170393 = Out_PositionRawOS15_g170391;
				float3 In_PositionAddOS16_g170393 = Out_PositionAddOS15_g170391;
				float3 In_PivotOS16_g170393 = Out_PivotOS15_g170391;
				float3 In_PivotWS16_g170393 = Out_PivotWS15_g170391;
				float3 In_PivotWO16_g170393 = Out_PivotWO15_g170391;
				float3 In_NormalOS16_g170393 = Out_NormalOS15_g170391;
				float3 In_NormalWS16_g170393 = Out_NormalWS15_g170391;
				float3 In_NormalRawOS16_g170393 = Out_NormalRawOS15_g170391;
				float3 In_NormalRawWS16_g170393 = Out_NormalRawWS15_g170391;
				float4 In_TangentOS16_g170393 = Out_TangentOS15_g170391;
				float3 In_ViewDirWS16_g170393 = Out_ViewDirWS15_g170391;
				float4 In_VertexData16_g170393 = Out_VertexData15_g170391;
				float4 In_PhaseData16_g170393 = Out_PhaseData15_g170391;
				float4 In_BoundsData16_g170393 = Out_BoundsData15_g170391;
				float4 In_RotationData16_g170393 = Out_RotationData15_g170391;
				{
				Data16_g170393.Dummy = In_Dummy16_g170393;
				Data16_g170393.PositionOS = In_PositionOS16_g170393;
				Data16_g170393.PositionWS = In_PositionWS16_g170393;
				Data16_g170393.PositionWO = In_PositionWO16_g170393;
				Data16_g170393.PositionRawOS = In_PositionRawOS16_g170393;
				Data16_g170393.PositionAddOS = In_PositionAddOS16_g170393;
				Data16_g170393.PivotOS = In_PivotOS16_g170393;
				Data16_g170393.PivotWS = In_PivotWS16_g170393;
				Data16_g170393.PivotWO = In_PivotWO16_g170393;
				Data16_g170393.NormalOS = In_NormalOS16_g170393;
				Data16_g170393.NormalWS = In_NormalWS16_g170393;
				Data16_g170393.NormalRawOS = In_NormalRawOS16_g170393;
				Data16_g170393.NormalRawWS = In_NormalRawWS16_g170393;
				Data16_g170393.TangentOS = In_TangentOS16_g170393;
				Data16_g170393.ViewDirWS = In_ViewDirWS16_g170393;
				Data16_g170393.VertexData = In_VertexData16_g170393;
				Data16_g170393.PhaseData = In_PhaseData16_g170393;
				Data16_g170393.BoundsData = In_BoundsData16_g170393;
				Data16_g170393.RotationData = In_RotationData16_g170393;
				}
				TVEModelData Data15_g170432 = Data16_g170393;
				float Out_Dummy15_g170432 = 0;
				float3 Out_PositionOS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170432 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170432 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170432 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170432 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170432 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170432 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170432 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170432 = float3( 0,0,0 );
				float4 Out_VertexData15_g170432 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170432 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170432 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170432 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170432 = Data15_g170432.Dummy;
				Out_PositionOS15_g170432 = Data15_g170432.PositionOS;
				Out_PositionWS15_g170432 = Data15_g170432.PositionWS;
				Out_PositionWO15_g170432 = Data15_g170432.PositionWO;
				Out_PositionRawOS15_g170432 = Data15_g170432.PositionRawOS;
				Out_PositionAddOS15_g170432 = Data15_g170432.PositionAddOS;
				Out_PivotOS15_g170432 = Data15_g170432.PivotOS;
				Out_PivotWS15_g170432 = Data15_g170432.PivotWS;
				Out_PivotWO15_g170432 = Data15_g170432.PivotWO;
				Out_NormalOS15_g170432 = Data15_g170432.NormalOS;
				Out_NormalWS15_g170432 = Data15_g170432.NormalWS;
				Out_NormalRawOS15_g170432 = Data15_g170432.NormalRawOS;
				Out_NormalRawWS15_g170432 = Data15_g170432.NormalRawWS;
				Out_TangentOS15_g170432 = Data15_g170432.TangentOS;
				Out_ViewDirWS15_g170432 = Data15_g170432.ViewDirWS;
				Out_VertexData15_g170432 = Data15_g170432.VertexData;
				Out_PhaseData15_g170432 = Data15_g170432.PhaseData;
				Out_BoundsData15_g170432 = Data15_g170432.BoundsData;
				Out_RotationData15_g170432 = Data15_g170432.RotationData;
				}
				half3 Model_PositionOS147_g170431 = Out_PositionOS15_g170432;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170431 = Out_PivotWO15_g170432;
				half3 Model_PivotWO162_g170431 = temp_output_210_19_g170431;
				float lerpResult216_g170431 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170435 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170435 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170431 ) * lerpResult216_g170431 ) - temp_output_7_0_g170435 );
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatParams204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintParams204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowParams204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoParams204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeParams204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormParams204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowParams204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatParams = In_CoatParams204_g170214;
				Data204_g170214.PaintParams = In_PaintParams204_g170214;
				Data204_g170214.GlowParams = In_GlowParams204_g170214;
				Data204_g170214.AtmoParams = In_AtmoParams204_g170214;
				Data204_g170214.FadeParams = In_FadeParams204_g170214;
				Data204_g170214.FormParams= In_FormParams204_g170214;
				Data204_g170214.FlowParams = In_FlowParams204_g170214;
				}
				TVEGlobalData Data15_g170434 = Data204_g170214;
				float Out_Dummy15_g170434 = 0;
				float4 Out_CoatParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170434 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170434 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170434 = Data15_g170434.Dummy;
				Out_CoatParams15_g170434 = Data15_g170434.CoatParams;
				Out_PaintParams15_g170434 = Data15_g170434.PaintParams;
				Out_GlowParams15_g170434 = Data15_g170434.GlowParams;
				Out_AtmoParams15_g170434= Data15_g170434.AtmoParams;
				Out_FadeParams15_g170434= Data15_g170434.FadeParams;
				Out_FormParams15_g170434 = Data15_g170434.FormParams;
				Out_FlowParams15_g170434 = Data15_g170434.FlowParams;
				}
				half4 Input_FormParams188_g170431 = Out_FormParams15_g170434;
				float temp_output_6_0_g170436 = saturate( (Input_FormParams188_g170431).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170436 = ( temp_output_6_0_g170436 + ( _SizeFadeElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170436 = temp_output_6_0_g170436;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170431 = staticSwitch14_g170436;
				#else
				float staticSwitch194_g170431 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170431 = lerp( 1.0 , staticSwitch194_g170431 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170431 = lerpResult213_g170431;
				float temp_output_189_0_g170431 = ( saturate( ( ( temp_output_9_0_g170435 / ( _SizeFadeDistMinValue - temp_output_7_0_g170435 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170431 );
				float3 appendResult200_g170431 = (float3(temp_output_189_0_g170431 , temp_output_189_0_g170431 , temp_output_189_0_g170431));
				float3 appendResult201_g170431 = (float3(1.0 , temp_output_189_0_g170431 , 1.0));
				float3 lerpResult202_g170431 = lerp( appendResult200_g170431 , appendResult201_g170431 , _SizeFadeScaleMode);
				float3 lerpResult184_g170431 = lerp( temp_cast_5 , lerpResult202_g170431 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170431 = ( lerpResult184_g170431 * Model_PositionOS147_g170431 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170431 = temp_output_167_0_g170431;
				#else
				float3 staticSwitch199_g170431 = Model_PositionOS147_g170431;
				#endif
				half3 Final_Position178_g170431 = staticSwitch199_g170431;
				float3 In_PositionOS16_g170433 = Final_Position178_g170431;
				float3 In_PositionWS16_g170433 = Out_PositionWS15_g170432;
				float3 In_PositionWO16_g170433 = Out_PositionWO15_g170432;
				float3 In_PositionRawOS16_g170433 = Out_PositionRawOS15_g170432;
				float3 In_PositionAddOS16_g170433 = Out_PositionAddOS15_g170432;
				float3 temp_output_210_24_g170431 = Out_PivotOS15_g170432;
				float3 In_PivotOS16_g170433 = temp_output_210_24_g170431;
				float3 In_PivotWS16_g170433 = Out_PivotWS15_g170432;
				float3 In_PivotWO16_g170433 = temp_output_210_19_g170431;
				float3 In_NormalOS16_g170433 = Out_NormalOS15_g170432;
				float3 In_NormalWS16_g170433 = Out_NormalWS15_g170432;
				float3 In_NormalRawOS16_g170433 = Out_NormalRawOS15_g170432;
				float3 In_NormalRawWS16_g170433 = Out_NormalRawWS15_g170432;
				float4 In_TangentOS16_g170433 = Out_TangentOS15_g170432;
				float3 In_ViewDirWS16_g170433 = Out_ViewDirWS15_g170432;
				float4 In_VertexData16_g170433 = Out_VertexData15_g170432;
				float4 In_PhaseData16_g170433 = Out_PhaseData15_g170432;
				float4 In_BoundsData16_g170433 = Out_BoundsData15_g170432;
				float4 In_RotationData16_g170433 = Out_RotationData15_g170432;
				{
				Data16_g170433.Dummy = In_Dummy16_g170433;
				Data16_g170433.PositionOS = In_PositionOS16_g170433;
				Data16_g170433.PositionWS = In_PositionWS16_g170433;
				Data16_g170433.PositionWO = In_PositionWO16_g170433;
				Data16_g170433.PositionRawOS = In_PositionRawOS16_g170433;
				Data16_g170433.PositionAddOS = In_PositionAddOS16_g170433;
				Data16_g170433.PivotOS = In_PivotOS16_g170433;
				Data16_g170433.PivotWS = In_PivotWS16_g170433;
				Data16_g170433.PivotWO = In_PivotWO16_g170433;
				Data16_g170433.NormalOS = In_NormalOS16_g170433;
				Data16_g170433.NormalWS = In_NormalWS16_g170433;
				Data16_g170433.NormalRawOS = In_NormalRawOS16_g170433;
				Data16_g170433.NormalRawWS = In_NormalRawWS16_g170433;
				Data16_g170433.TangentOS = In_TangentOS16_g170433;
				Data16_g170433.ViewDirWS = In_ViewDirWS16_g170433;
				Data16_g170433.VertexData = In_VertexData16_g170433;
				Data16_g170433.PhaseData = In_PhaseData16_g170433;
				Data16_g170433.BoundsData = In_BoundsData16_g170433;
				Data16_g170433.RotationData = In_RotationData16_g170433;
				}
				TVEModelData Data15_g170490 = Data16_g170433;
				float Out_Dummy15_g170490 = 0;
				float3 Out_PositionOS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170490 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170490 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170490 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170490 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170490 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170490 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170490 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170490 = float3( 0,0,0 );
				float4 Out_VertexData15_g170490 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170490 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170490 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170490 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170490 = Data15_g170490.Dummy;
				Out_PositionOS15_g170490 = Data15_g170490.PositionOS;
				Out_PositionWS15_g170490 = Data15_g170490.PositionWS;
				Out_PositionWO15_g170490 = Data15_g170490.PositionWO;
				Out_PositionRawOS15_g170490 = Data15_g170490.PositionRawOS;
				Out_PositionAddOS15_g170490 = Data15_g170490.PositionAddOS;
				Out_PivotOS15_g170490 = Data15_g170490.PivotOS;
				Out_PivotWS15_g170490 = Data15_g170490.PivotWS;
				Out_PivotWO15_g170490 = Data15_g170490.PivotWO;
				Out_NormalOS15_g170490 = Data15_g170490.NormalOS;
				Out_NormalWS15_g170490 = Data15_g170490.NormalWS;
				Out_NormalRawOS15_g170490 = Data15_g170490.NormalRawOS;
				Out_NormalRawWS15_g170490 = Data15_g170490.NormalRawWS;
				Out_TangentOS15_g170490 = Data15_g170490.TangentOS;
				Out_ViewDirWS15_g170490 = Data15_g170490.ViewDirWS;
				Out_VertexData15_g170490 = Data15_g170490.VertexData;
				Out_PhaseData15_g170490 = Data15_g170490.PhaseData;
				Out_BoundsData15_g170490 = Data15_g170490.BoundsData;
				Out_RotationData15_g170490 = Data15_g170490.RotationData;
				}
				float3 temp_output_2503_0_g170474 = Out_PositionOS15_g170490;
				float3 In_PositionOS16_g170491 = temp_output_2503_0_g170474;
				float3 temp_output_2503_16_g170474 = Out_PositionWS15_g170490;
				float3 In_PositionWS16_g170491 = temp_output_2503_16_g170474;
				float3 temp_output_2503_17_g170474 = Out_PositionWO15_g170490;
				float3 In_PositionWO16_g170491 = temp_output_2503_17_g170474;
				float3 In_PositionRawOS16_g170491 = Out_PositionRawOS15_g170490;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170474 = Out_VertexData15_g170490;
				half4 Model_VertexMasks518_g170474 = temp_output_2503_29_g170474;
				float4 break1689_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170475 = _motion_small_vert_mode;
				float temp_output_30_0_g170475 = ( break1689_g170474.x * break33_g170475.x );
				float temp_output_29_0_g170475 = ( break1689_g170474.y * break33_g170475.y );
				float temp_output_31_0_g170475 = ( break1689_g170474.z * break33_g170475.z );
				float temp_output_28_0_g170475 = ( temp_output_30_0_g170475 + temp_output_29_0_g170475 + temp_output_31_0_g170475 + ( break1689_g170474.w * break33_g170475.w ) );
				float temp_output_1727_0_g170474 = temp_output_28_0_g170475;
				float4 temp_output_2503_30_g170474 = Out_BoundsData15_g170490;
				half4 Model_BoundsData1322_g170474 = temp_output_2503_30_g170474;
				float4 break33_g170477 = _motion_small_proc_mode;
				float temp_output_30_0_g170477 = ( (Model_BoundsData1322_g170474).z * break33_g170477.x );
				float temp_output_29_0_g170477 = ( (Model_BoundsData1322_g170474).w * break33_g170477.y );
				float temp_output_1734_0_g170474 = ( temp_output_30_0_g170477 + temp_output_29_0_g170477 );
				float lerpResult1906_g170474 = lerp( temp_output_1727_0_g170474 , temp_output_1734_0_g170474 , _motion_small_mask_mode);
				float enc1805_g170474 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170474 = DecodeFloatToVector2( enc1805_g170474 );
				float2 break1804_g170474 = localDecodeFloatToVector21805_g170474;
				half Small_Mask_Legacy1806_g170474 = break1804_g170474.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170474 = Small_Mask_Legacy1806_g170474;
				#else
				float staticSwitch1800_g170474 = lerpResult1906_g170474;
				#endif
				float clampResult17_g170479 = clamp( staticSwitch1800_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170488 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170488 = ( clampResult17_g170479 - temp_output_7_0_g170488 );
				float temp_output_6_0_g170486 = saturate( ( ( temp_output_9_0_g170488 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170486 = ( temp_output_6_0_g170486 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170486 = temp_output_6_0_g170486;
				#endif
				half Small_Mask640_g170474 = staticSwitch14_g170486;
				float4 lerpResult836_g170510 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_MotionParams.w);
				half2 Global_WindDirWS2542_g170474 = ((lerpResult836_g170510).xy*2.0 + -1.0);
				half2 Input_WindDirWS803_g170505 = Global_WindDirWS2542_g170474;
				half3 Model_PositionWO162_g170474 = temp_output_2503_17_g170474;
				half3 Input_ModelPositionWO761_g170492 = Model_PositionWO162_g170474;
				float3 temp_output_2503_19_g170474 = Out_PivotWO15_g170490;
				half3 Model_PivotWO402_g170474 = temp_output_2503_19_g170474;
				half3 Input_ModelPivotsWO419_g170492 = Model_PivotWO402_g170474;
				half Input_MotionPivots629_g170492 = _MotionSmallPivotValue;
				float3 lerpResult771_g170492 = lerp( Input_ModelPositionWO761_g170492 , Input_ModelPivotsWO419_g170492 , Input_MotionPivots629_g170492);
				float4 temp_output_2503_27_g170474 = Out_PhaseData15_g170490;
				half4 Model_PhaseData489_g170474 = temp_output_2503_27_g170474;
				half4 Input_ModelMotionData763_g170492 = Model_PhaseData489_g170474;
				half Input_MotionPhase764_g170492 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170474 = ( lerpResult771_g170492 + ( (Input_ModelMotionData763_g170492).z * Input_MotionPhase764_g170492 * 5.0 ) );
				half3 Input_PositionWO419_g170505 = Small_Position1421_g170474;
				half Input_MotionTilling321_g170505 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170505 = ( -(Input_PositionWO419_g170505).xz * Input_MotionTilling321_g170505 * 0.005 );
				float2 temp_output_3_0_g170507 = Noise_Coord515_g170505;
				float2 temp_output_21_0_g170507 = Input_WindDirWS803_g170505;
				float lerpResult128_g170506 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170505 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170505 = ( lerpResult128_g170506 * 0.02 * Input_MotionSpeed62_g170505 );
				float temp_output_15_0_g170507 = Noise_Speed516_g170505;
				float temp_output_23_0_g170507 = frac( temp_output_15_0_g170507 );
				float4 lerpResult39_g170507 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170507 + ( temp_output_21_0_g170507 * temp_output_23_0_g170507 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170507 + ( temp_output_21_0_g170507 * frac( ( temp_output_15_0_g170507 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170507 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170505 = lerpResult39_g170507;
				half2 Noise_DirWS858_g170505 = ((temp_output_635_0_g170505).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170505 = _MotionSmallNoiseValue;
				half Global_WInd769_g170510 = (lerpResult836_g170510).z;
				TVEGlobalData Data15_g170498 = Data204_g170214;
				float Out_Dummy15_g170498 = 0;
				float4 Out_CoatParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170498 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170498 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170498 = Data15_g170498.Dummy;
				Out_CoatParams15_g170498 = Data15_g170498.CoatParams;
				Out_PaintParams15_g170498 = Data15_g170498.PaintParams;
				Out_GlowParams15_g170498 = Data15_g170498.GlowParams;
				Out_AtmoParams15_g170498= Data15_g170498.AtmoParams;
				Out_FadeParams15_g170498= Data15_g170498.FadeParams;
				Out_FormParams15_g170498 = Data15_g170498.FormParams;
				Out_FlowParams15_g170498 = Data15_g170498.FlowParams;
				}
				half4 Global_FlowParams2668_g170474 = Out_FlowParams15_g170498;
				half4 Input_GlobalFlow826_g170510 = Global_FlowParams2668_g170474;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170510 = saturate( (Input_GlobalFlow826_g170510).w );
				#else
				float staticSwitch612_g170510 = Global_WInd769_g170510;
				#endif
				float lerpResult853_g170510 = lerp( staticSwitch612_g170510 , saturate( (staticSwitch612_g170510*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170510 = _MotionIntensityValue;
				half Global_WindValue1855_g170474 = ( lerpResult853_g170510 * Input_MotionValue629_g170510 );
				half Input_WindValue881_g170505 = Global_WindValue1855_g170474;
				float lerpResult701_g170505 = lerp( 1.0 , Input_MotionNoise552_g170505 , Input_WindValue881_g170505);
				float2 lerpResult646_g170505 = lerp( Input_WindDirWS803_g170505 , Noise_DirWS858_g170505 , lerpResult701_g170505);
				half2 Small_DirWS817_g170505 = lerpResult646_g170505;
				float2 break823_g170505 = Small_DirWS817_g170505;
				half4 Noise_Params685_g170505 = temp_output_635_0_g170505;
				half Wind_Sinus820_g170505 = ( ((Noise_Params685_g170505).b*2.0 + -1.0) * Input_MotionNoise552_g170505 * 0.6 );
				float3 appendResult824_g170505 = (float3(break823_g170505.x , Wind_Sinus820_g170505 , break823_g170505.y));
				half Input_MotionDelay753_g170505 = _MotionSmallDelayValue;
				float lerpResult756_g170505 = lerp( 1.0 , ( Input_WindValue881_g170505 * Input_WindValue881_g170505 ) , Input_MotionDelay753_g170505);
				half Wind_Delay815_g170505 = lerpResult756_g170505;
				float3 appendResult825_g170505 = (float3(Wind_Delay815_g170505 , 1.0 , Wind_Delay815_g170505));
				float3 temp_output_827_0_g170505 = ( ( appendResult824_g170505 * Input_WindValue881_g170505 ) * appendResult825_g170505 );
				float2 break857_g170505 = Noise_DirWS858_g170505;
				float3 appendResult833_g170505 = (float3(break857_g170505.x , Wind_Sinus820_g170505 , break857_g170505.y));
				half Global_PushWave2675_g170474 = (Input_GlobalFlow826_g170510).z;
				half Input_PushWave890_g170505 = Global_PushWave2675_g170474;
				float2 temp_output_791_0_g170510 = ((Input_GlobalFlow826_g170510).xy*2.0 + -1.0);
				float temp_output_849_0_g170510 = saturate( length( temp_output_791_0_g170510 ) );
				half Global_PushAlpha1504_g170474 = temp_output_849_0_g170510;
				half Input_PushAlpha806_g170505 = ( Global_PushAlpha1504_g170474 * _MotionSmallPushValue );
				float3 lerpResult840_g170505 = lerp( temp_output_827_0_g170505 , ( appendResult833_g170505 * Input_PushWave890_g170505 ) , Input_PushAlpha806_g170505);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170505 = lerpResult840_g170505;
				#else
				float3 staticSwitch829_g170505 = temp_output_827_0_g170505;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half3 Small_Squash1489_g170474 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170505 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Motion789_g170474 = ( _MotionSmallIntensityValue * Small_Mask640_g170474 * Small_Squash1489_g170474 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170474 = Small_Motion789_g170474;
				#else
				float3 staticSwitch495_g170474 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170474 = temp_output_2503_16_g170474;
				half Global_DistMask1820_g170474 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170474 ) / _MotionDistValue ) ) );
				float4 break1710_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170476 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170476 = ( break1710_g170474.x * break33_g170476.x );
				float temp_output_29_0_g170476 = ( break1710_g170474.y * break33_g170476.y );
				float temp_output_31_0_g170476 = ( break1710_g170474.z * break33_g170476.z );
				float temp_output_28_0_g170476 = ( temp_output_30_0_g170476 + temp_output_29_0_g170476 + temp_output_31_0_g170476 + ( break1710_g170474.w * break33_g170476.w ) );
				float temp_output_1729_0_g170474 = temp_output_28_0_g170476;
				float4 break33_g170478 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170478 = ( (Model_BoundsData1322_g170474).z * break33_g170478.x );
				float temp_output_29_0_g170478 = ( (Model_BoundsData1322_g170474).w * break33_g170478.y );
				float temp_output_1735_0_g170474 = ( temp_output_30_0_g170478 + temp_output_29_0_g170478 );
				float lerpResult1908_g170474 = lerp( temp_output_1729_0_g170474 , temp_output_1735_0_g170474 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170474 = break1804_g170474.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170474 = Tiny_Mask_Legacy1807_g170474;
				#else
				float staticSwitch1810_g170474 = lerpResult1908_g170474;
				#endif
				float clampResult17_g170480 = clamp( staticSwitch1810_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170489 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170489 = ( clampResult17_g170480 - temp_output_7_0_g170489 );
				float temp_output_6_0_g170481 = saturate( ( ( temp_output_9_0_g170489 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170481 = ( temp_output_6_0_g170481 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170481 = temp_output_6_0_g170481;
				#endif
				half Tiny_Mask218_g170474 = staticSwitch14_g170481;
				float3 temp_output_2503_20_g170474 = Out_NormalOS15_g170490;
				half3 Model_NormalOS554_g170474 = temp_output_2503_20_g170474;
				half3 Input_NormalOS533_g170494 = Model_NormalOS554_g170474;
				half3 Tiny_Position2469_g170474 = Model_PositionWO162_g170474;
				half3 Input_PositionWO500_g170494 = Tiny_Position2469_g170474;
				half Input_MotionTilling321_g170494 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170496 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170494 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170494 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170494).xz * Input_MotionTilling321_g170494 * 0.005 ) + ( lerpResult128_g170496 * Input_MotionSpeed62_g170494 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170494 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170494 = lerp( ( Input_NormalOS533_g170494 * Flutter_Noise535_g170494 ) , Flutter_Noise535_g170494 , Input_MotionNoise542_g170494);
				half3 Input_ModelPositionWO761_g170493 = Model_PositionWO162_g170474;
				half3 Input_ModelPivotsWO419_g170493 = Model_PivotWO402_g170474;
				half Input_MotionPivots629_g170493 = _MotionBasePivotValue;
				float3 lerpResult771_g170493 = lerp( Input_ModelPositionWO761_g170493 , Input_ModelPivotsWO419_g170493 , Input_MotionPivots629_g170493);
				half4 Input_ModelMotionData763_g170493 = Model_PhaseData489_g170474;
				half Input_MotionPhase764_g170493 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170474 = ( lerpResult771_g170493 + ( (Input_ModelMotionData763_g170493).z * Input_MotionPhase764_g170493 * 5.0 ) );
				half3 Input_PositionWO419_g170499 = Base_Position1394_g170474;
				half Input_MotionTilling321_g170499 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170499 = ( -(Input_PositionWO419_g170499).xz * Input_MotionTilling321_g170499 * 0.005 );
				float2 temp_output_3_0_g170501 = Noise_Coord515_g170499;
				half2 Input_WindDirWS803_g170499 = Global_WindDirWS2542_g170474;
				float2 temp_output_21_0_g170501 = Input_WindDirWS803_g170499;
				float lerpResult128_g170500 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170499 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170499 = ( lerpResult128_g170500 * 0.02 * Input_MotionSpeed62_g170499 );
				float temp_output_15_0_g170501 = Noise_Speed516_g170499;
				float temp_output_23_0_g170501 = frac( temp_output_15_0_g170501 );
				float4 lerpResult39_g170501 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170501 + ( temp_output_21_0_g170501 * temp_output_23_0_g170501 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170501 + ( temp_output_21_0_g170501 * frac( ( temp_output_15_0_g170501 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170501 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170499 = lerpResult39_g170501;
				half4 Noise_Params685_g170499 = temp_output_635_0_g170499;
				half Input_WindValue853_g170499 = Global_WindValue1855_g170474;
				float temp_output_855_0_g170499 = ( (Noise_Params685_g170499).a * Input_WindValue853_g170499 );
				half Input_PushWave858_g170499 = Global_PushWave2675_g170474;
				half Input_PushAlpha806_g170499 = ( Global_PushAlpha1504_g170474 * _MotionBasePushValue );
				float lerpResult831_g170499 = lerp( temp_output_855_0_g170499 , Input_PushWave858_g170499 , Input_PushAlpha806_g170499);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170499 = lerpResult831_g170499;
				#else
				float staticSwitch828_g170499 = temp_output_855_0_g170499;
				#endif
				half Base_Wave1159_g170474 = staticSwitch828_g170499;
				float temp_output_888_0_g170505 = ( (Noise_Params685_g170505).b * Input_WindValue881_g170505 );
				float lerpResult867_g170505 = lerp( temp_output_888_0_g170505 , ( (Noise_Params685_g170505).b * Input_PushWave890_g170505 ) , Input_PushAlpha806_g170505);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170505 = lerpResult867_g170505;
				#else
				float staticSwitch886_g170505 = temp_output_888_0_g170505;
				#endif
				half Small_Wave1427_g170474 = staticSwitch886_g170505;
				float lerpResult2422_g170474 = lerp( Base_Wave1159_g170474 , Small_Wave1427_g170474 , _motion_small_mode);
				half Global_Wave1475_g170474 = lerpResult2422_g170474;
				half Input_GlobalWave546_g170494 = Global_Wave1475_g170474;
				float temp_output_548_0_g170494 = ( Input_GlobalWave546_g170494 * Input_GlobalWave546_g170494 );
				half Flutter_Wave556_g170494 = temp_output_548_0_g170494;
				half3 Tiny_Noise859_g170474 = ( lerpResult537_g170494 * Flutter_Wave556_g170494 );
				half3 Tiny_Flutter1451_g170474 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170474 * Tiny_Mask218_g170474 * Tiny_Noise859_g170474 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170474 = Tiny_Flutter1451_g170474;
				#else
				float3 staticSwitch414_g170474 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170474 = ( staticSwitch495_g170474 + staticSwitch414_g170474 );
				float3 In_PositionAddOS16_g170491 = Final_PositionADD1569_g170474;
				float3 temp_output_2503_24_g170474 = Out_PivotOS15_g170490;
				float3 In_PivotOS16_g170491 = temp_output_2503_24_g170474;
				float3 In_PivotWS16_g170491 = Out_PivotWS15_g170490;
				float3 In_PivotWO16_g170491 = temp_output_2503_19_g170474;
				float3 In_NormalOS16_g170491 = temp_output_2503_20_g170474;
				float3 In_NormalWS16_g170491 = Out_NormalWS15_g170490;
				float3 In_NormalRawOS16_g170491 = Out_NormalRawOS15_g170490;
				float3 In_NormalRawWS16_g170491 = Out_NormalRawWS15_g170490;
				float4 In_TangentOS16_g170491 = Out_TangentOS15_g170490;
				float3 In_ViewDirWS16_g170491 = Out_ViewDirWS15_g170490;
				float4 In_VertexData16_g170491 = temp_output_2503_29_g170474;
				float4 In_PhaseData16_g170491 = temp_output_2503_27_g170474;
				float4 In_BoundsData16_g170491 = temp_output_2503_30_g170474;
				float4 break748_g170474 = Model_VertexMasks518_g170474;
				float4 break33_g170483 = _motion_base_vert_mode;
				float temp_output_30_0_g170483 = ( break748_g170474.x * break33_g170483.x );
				float temp_output_29_0_g170483 = ( break748_g170474.y * break33_g170483.y );
				float temp_output_31_0_g170483 = ( break748_g170474.z * break33_g170483.z );
				float temp_output_28_0_g170483 = ( temp_output_30_0_g170483 + temp_output_29_0_g170483 + temp_output_31_0_g170483 + ( break748_g170474.w * break33_g170483.w ) );
				float temp_output_1731_0_g170474 = temp_output_28_0_g170483;
				float4 break33_g170484 = _motion_base_proc_mode;
				float temp_output_30_0_g170484 = ( (Model_BoundsData1322_g170474).z * break33_g170484.x );
				float temp_output_29_0_g170484 = ( (Model_BoundsData1322_g170474).w * break33_g170484.y );
				float temp_output_1733_0_g170474 = ( temp_output_30_0_g170484 + temp_output_29_0_g170484 );
				float lerpResult1904_g170474 = lerp( temp_output_1731_0_g170474 , temp_output_1733_0_g170474 , _motion_base_mask_mode);
				float clampResult17_g170482 = clamp( lerpResult1904_g170474 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170487 = ( clampResult17_g170482 - temp_output_7_0_g170487 );
				float temp_output_6_0_g170485 = saturate( ( ( temp_output_9_0_g170487 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170485 = ( temp_output_6_0_g170485 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170485 = temp_output_6_0_g170485;
				#endif
				half Base_Mask217_g170474 = staticSwitch14_g170485;
				half2 Noise_DirWS825_g170499 = ((temp_output_635_0_g170499).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170499 = _MotionBaseNoiseValue;
				float lerpResult701_g170499 = lerp( 1.0 , Input_MotionNoise552_g170499 , Input_WindValue853_g170499);
				float2 lerpResult646_g170499 = lerp( Input_WindDirWS803_g170499 , Noise_DirWS825_g170499 , lerpResult701_g170499);
				half Input_MotionDelay753_g170499 = _MotionBaseDelayValue;
				float lerpResult756_g170499 = lerp( 1.0 , ( Input_WindValue853_g170499 * Input_WindValue853_g170499 ) , Input_MotionDelay753_g170499);
				half Wind_Delay815_g170499 = lerpResult756_g170499;
				float2 temp_output_809_0_g170499 = ( lerpResult646_g170499 * Input_WindValue853_g170499 * Wind_Delay815_g170499 );
				half2 Global_PushDirWS1972_g170474 = temp_output_791_0_g170510;
				half2 Input_PushDirWS807_g170499 = Global_PushDirWS1972_g170474;
				float2 lerpResult811_g170499 = lerp( temp_output_809_0_g170499 , Input_PushDirWS807_g170499 , Input_PushAlpha806_g170499);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170499 = lerpResult811_g170499;
				#else
				float2 staticSwitch808_g170499 = temp_output_809_0_g170499;
				#endif
				float2 break83_g170504 = staticSwitch808_g170499;
				float3 appendResult79_g170504 = (float3(break83_g170504.x , 0.0 , break83_g170504.y));
				half2 Base_Bending893_g170474 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170504 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170474 = ( _MotionBaseIntensityValue * Base_Mask217_g170474 * Base_Bending893_g170474 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170474 = Base_Motion1440_g170474;
				#else
				float2 staticSwitch2384_g170474 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170474 = (float4(staticSwitch2384_g170474 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170474 = appendResult2023_g170474;
				float4 In_RotationData16_g170491 = Final_RotationData1570_g170474;
				{
				Data16_g170491.Dummy = In_Dummy16_g170491;
				Data16_g170491.PositionOS = In_PositionOS16_g170491;
				Data16_g170491.PositionWS = In_PositionWS16_g170491;
				Data16_g170491.PositionWO = In_PositionWO16_g170491;
				Data16_g170491.PositionRawOS = In_PositionRawOS16_g170491;
				Data16_g170491.PositionAddOS = In_PositionAddOS16_g170491;
				Data16_g170491.PivotOS = In_PivotOS16_g170491;
				Data16_g170491.PivotWS = In_PivotWS16_g170491;
				Data16_g170491.PivotWO = In_PivotWO16_g170491;
				Data16_g170491.NormalOS = In_NormalOS16_g170491;
				Data16_g170491.NormalWS = In_NormalWS16_g170491;
				Data16_g170491.NormalRawOS = In_NormalRawOS16_g170491;
				Data16_g170491.NormalRawWS = In_NormalRawWS16_g170491;
				Data16_g170491.TangentOS = In_TangentOS16_g170491;
				Data16_g170491.ViewDirWS = In_ViewDirWS16_g170491;
				Data16_g170491.VertexData = In_VertexData16_g170491;
				Data16_g170491.PhaseData = In_PhaseData16_g170491;
				Data16_g170491.BoundsData = In_BoundsData16_g170491;
				Data16_g170491.RotationData = In_RotationData16_g170491;
				}
				TVEModelData Data15_g170720 = Data16_g170491;
				float Out_Dummy15_g170720 = 0;
				float3 Out_PositionOS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170720 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170720 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170720 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170720 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170720 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170720 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170720 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170720 = float3( 0,0,0 );
				float4 Out_VertexData15_g170720 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170720 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170720 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170720 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170720 = Data15_g170720.Dummy;
				Out_PositionOS15_g170720 = Data15_g170720.PositionOS;
				Out_PositionWS15_g170720 = Data15_g170720.PositionWS;
				Out_PositionWO15_g170720 = Data15_g170720.PositionWO;
				Out_PositionRawOS15_g170720 = Data15_g170720.PositionRawOS;
				Out_PositionAddOS15_g170720 = Data15_g170720.PositionAddOS;
				Out_PivotOS15_g170720 = Data15_g170720.PivotOS;
				Out_PivotWS15_g170720 = Data15_g170720.PivotWS;
				Out_PivotWO15_g170720 = Data15_g170720.PivotWO;
				Out_NormalOS15_g170720 = Data15_g170720.NormalOS;
				Out_NormalWS15_g170720 = Data15_g170720.NormalWS;
				Out_NormalRawOS15_g170720 = Data15_g170720.NormalRawOS;
				Out_NormalRawWS15_g170720 = Data15_g170720.NormalRawWS;
				Out_TangentOS15_g170720 = Data15_g170720.TangentOS;
				Out_ViewDirWS15_g170720 = Data15_g170720.ViewDirWS;
				Out_VertexData15_g170720 = Data15_g170720.VertexData;
				Out_PhaseData15_g170720 = Data15_g170720.PhaseData;
				Out_BoundsData15_g170720 = Data15_g170720.BoundsData;
				Out_RotationData15_g170720 = Data15_g170720.RotationData;
				}
				half3 Model_PositionOS147_g170719 = Out_PositionOS15_g170720;
				half3 Input_False58_g170722 = Model_PositionOS147_g170719;
				half3 VertexPos40_g170723 = Model_PositionOS147_g170719;
				half3 VertexPos40_g170724 = VertexPos40_g170723;
				float3 appendResult74_g170724 = (float3(VertexPos40_g170724.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170724 = appendResult74_g170724;
				float3 break84_g170724 = VertexPos40_g170724;
				float3 appendResult81_g170724 = (float3(0.0 , break84_g170724.y , break84_g170724.z));
				half3 VertexPosOtherAxis82_g170724 = appendResult81_g170724;
				float4 temp_output_1567_33_g170719 = Out_RotationData15_g170720;
				half4 Model_VertexBend1569_g170719 = temp_output_1567_33_g170719;
				half2 Angle44_g170723 = (Model_VertexBend1569_g170719).xy;
				half Angle44_g170724 = (Angle44_g170723).y;
				half3 VertexPos40_g170725 = ( VertexPosRotationAxis50_g170724 + ( VertexPosOtherAxis82_g170724 * cos( Angle44_g170724 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170724 ) * sin( Angle44_g170724 ) ) );
				float3 appendResult74_g170725 = (float3(0.0 , 0.0 , VertexPos40_g170725.z));
				half3 VertexPosRotationAxis50_g170725 = appendResult74_g170725;
				float3 break84_g170725 = VertexPos40_g170725;
				float3 appendResult81_g170725 = (float3(break84_g170725.x , break84_g170725.y , 0.0));
				half3 VertexPosOtherAxis82_g170725 = appendResult81_g170725;
				half Angle44_g170725 = -(Angle44_g170723).x;
				half3 Input_True57_g170722 = ( VertexPosRotationAxis50_g170725 + ( VertexPosOtherAxis82_g170725 * cos( Angle44_g170725 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170725 ) * sin( Angle44_g170725 ) ) );
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170722 = Input_True57_g170722;
				#else
				float3 staticSwitch65_g170722 = Input_False58_g170722;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170722 = Input_True57_g170722;
				#else
				float3 staticSwitch69_g170722 = staticSwitch65_g170722;
				#endif
				float3 temp_output_1578_0_g170719 = staticSwitch69_g170722;
				float3 temp_output_1567_31_g170719 = Out_PositionAddOS15_g170720;
				half3 Model_PositionADD1568_g170719 = temp_output_1567_31_g170719;
				half3 Final_PositionOS178_g170719 = ( temp_output_1578_0_g170719 + Model_PositionADD1568_g170719 );
				float3 In_PositionOS16_g170721 = Final_PositionOS178_g170719;
				float3 In_PositionWS16_g170721 = Out_PositionWS15_g170720;
				float3 In_PositionWO16_g170721 = Out_PositionWO15_g170720;
				float3 In_PositionRawOS16_g170721 = Out_PositionRawOS15_g170720;
				float3 In_PositionAddOS16_g170721 = temp_output_1567_31_g170719;
				float3 In_PivotOS16_g170721 = Out_PivotOS15_g170720;
				float3 In_PivotWS16_g170721 = Out_PivotWS15_g170720;
				float3 In_PivotWO16_g170721 = Out_PivotWO15_g170720;
				float3 In_NormalOS16_g170721 = Out_NormalOS15_g170720;
				float3 In_NormalWS16_g170721 = Out_NormalWS15_g170720;
				float3 In_NormalRawOS16_g170721 = Out_NormalRawOS15_g170720;
				float3 In_NormalRawWS16_g170721 = Out_NormalRawWS15_g170720;
				float4 In_TangentOS16_g170721 = Out_TangentOS15_g170720;
				float3 In_ViewDirWS16_g170721 = Out_ViewDirWS15_g170720;
				float4 In_VertexData16_g170721 = Out_VertexData15_g170720;
				float4 In_PhaseData16_g170721 = Out_PhaseData15_g170720;
				float4 In_BoundsData16_g170721 = Out_BoundsData15_g170720;
				float4 In_RotationData16_g170721 = temp_output_1567_33_g170719;
				{
				Data16_g170721.Dummy = In_Dummy16_g170721;
				Data16_g170721.PositionOS = In_PositionOS16_g170721;
				Data16_g170721.PositionWS = In_PositionWS16_g170721;
				Data16_g170721.PositionWO = In_PositionWO16_g170721;
				Data16_g170721.PositionRawOS = In_PositionRawOS16_g170721;
				Data16_g170721.PositionAddOS = In_PositionAddOS16_g170721;
				Data16_g170721.PivotOS = In_PivotOS16_g170721;
				Data16_g170721.PivotWS = In_PivotWS16_g170721;
				Data16_g170721.PivotWO = In_PivotWO16_g170721;
				Data16_g170721.NormalOS = In_NormalOS16_g170721;
				Data16_g170721.NormalWS = In_NormalWS16_g170721;
				Data16_g170721.NormalRawOS = In_NormalRawOS16_g170721;
				Data16_g170721.NormalRawWS = In_NormalRawWS16_g170721;
				Data16_g170721.TangentOS = In_TangentOS16_g170721;
				Data16_g170721.ViewDirWS = In_ViewDirWS16_g170721;
				Data16_g170721.VertexData = In_VertexData16_g170721;
				Data16_g170721.PhaseData = In_PhaseData16_g170721;
				Data16_g170721.BoundsData = In_BoundsData16_g170721;
				Data16_g170721.RotationData = In_RotationData16_g170721;
				}
				TVEModelData Data15_g170744 = Data16_g170721;
				float Out_Dummy15_g170744 = 0;
				float3 Out_PositionOS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170744 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170744 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170744 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170744 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170744 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170744 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170744 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170744 = float3( 0,0,0 );
				float4 Out_VertexData15_g170744 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170744 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170744 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170744 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170744 = Data15_g170744.Dummy;
				Out_PositionOS15_g170744 = Data15_g170744.PositionOS;
				Out_PositionWS15_g170744 = Data15_g170744.PositionWS;
				Out_PositionWO15_g170744 = Data15_g170744.PositionWO;
				Out_PositionRawOS15_g170744 = Data15_g170744.PositionRawOS;
				Out_PositionAddOS15_g170744 = Data15_g170744.PositionAddOS;
				Out_PivotOS15_g170744 = Data15_g170744.PivotOS;
				Out_PivotWS15_g170744 = Data15_g170744.PivotWS;
				Out_PivotWO15_g170744 = Data15_g170744.PivotWO;
				Out_NormalOS15_g170744 = Data15_g170744.NormalOS;
				Out_NormalWS15_g170744 = Data15_g170744.NormalWS;
				Out_NormalRawOS15_g170744 = Data15_g170744.NormalRawOS;
				Out_NormalRawWS15_g170744 = Data15_g170744.NormalRawWS;
				Out_TangentOS15_g170744 = Data15_g170744.TangentOS;
				Out_ViewDirWS15_g170744 = Data15_g170744.ViewDirWS;
				Out_VertexData15_g170744 = Data15_g170744.VertexData;
				Out_PhaseData15_g170744 = Data15_g170744.PhaseData;
				Out_BoundsData15_g170744 = Data15_g170744.BoundsData;
				Out_RotationData15_g170744 = Data15_g170744.RotationData;
				}
				float3 In_PositionOS16_g170745 = Out_PositionOS15_g170744;
				float3 In_PositionWS16_g170745 = Out_PositionWS15_g170744;
				float3 temp_output_1567_17_g170743 = Out_PositionWO15_g170744;
				float3 In_PositionWO16_g170745 = temp_output_1567_17_g170743;
				float3 temp_output_1567_26_g170743 = Out_PositionRawOS15_g170744;
				float3 In_PositionRawOS16_g170745 = temp_output_1567_26_g170743;
				float3 In_PositionAddOS16_g170745 = Out_PositionAddOS15_g170744;
				float3 In_PivotOS16_g170745 = Out_PivotOS15_g170744;
				float3 In_PivotWS16_g170745 = Out_PivotWS15_g170744;
				float3 In_PivotWO16_g170745 = Out_PivotWO15_g170744;
				half3 Model_NormalOS1568_g170743 = Out_NormalOS15_g170744;
				float3 lerpResult1589_g170743 = lerp( Model_NormalOS1568_g170743 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170743 = temp_output_1567_26_g170743;
				float3 normalizeResult1594_g170743 = ASESafeNormalize( ( Model_PositionRAW1592_g170743 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170743 = lerp( lerpResult1589_g170743 , normalizeResult1594_g170743 , _NormalSphereValue);
				half3 Input_False58_g170758 = lerpResult1585_g170743;
				half3 VertexPos40_g170747 = lerpResult1585_g170743;
				half3 VertexPos40_g170748 = VertexPos40_g170747;
				float3 appendResult74_g170748 = (float3(VertexPos40_g170748.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170748 = appendResult74_g170748;
				float3 break84_g170748 = VertexPos40_g170748;
				float3 appendResult81_g170748 = (float3(0.0 , break84_g170748.y , break84_g170748.z));
				half3 VertexPosOtherAxis82_g170748 = appendResult81_g170748;
				float4 temp_output_1567_33_g170743 = Out_RotationData15_g170744;
				half4 Model_RotationData1583_g170743 = temp_output_1567_33_g170743;
				half2 Angle44_g170747 = Model_RotationData1583_g170743.xy;
				half Angle44_g170748 = (Angle44_g170747).y;
				half3 VertexPos40_g170749 = ( VertexPosRotationAxis50_g170748 + ( VertexPosOtherAxis82_g170748 * cos( Angle44_g170748 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170748 ) * sin( Angle44_g170748 ) ) );
				float3 appendResult74_g170749 = (float3(0.0 , 0.0 , VertexPos40_g170749.z));
				half3 VertexPosRotationAxis50_g170749 = appendResult74_g170749;
				float3 break84_g170749 = VertexPos40_g170749;
				float3 appendResult81_g170749 = (float3(break84_g170749.x , break84_g170749.y , 0.0));
				half3 VertexPosOtherAxis82_g170749 = appendResult81_g170749;
				half Angle44_g170749 = -(Angle44_g170747).x;
				float3 lerpResult1591_g170743 = lerp( lerpResult1585_g170743 , ( VertexPosRotationAxis50_g170749 + ( VertexPosOtherAxis82_g170749 * cos( Angle44_g170749 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170749 ) * sin( Angle44_g170749 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g170758 = lerpResult1591_g170743;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170758 = Input_True57_g170758;
				#else
				float3 staticSwitch65_g170758 = Input_False58_g170758;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170758 = Input_True57_g170758;
				#else
				float3 staticSwitch69_g170758 = staticSwitch65_g170758;
				#endif
				float3 temp_output_1715_0_g170743 = staticSwitch69_g170758;
				float4 temp_output_1567_29_g170743 = Out_VertexData15_g170744;
				half4 Model_VertexData1608_g170743 = temp_output_1567_29_g170743;
				float4 break1683_g170743 = Model_VertexData1608_g170743;
				float4 break33_g170750 = _normal_vert_mode;
				float temp_output_30_0_g170750 = ( break1683_g170743.x * break33_g170750.x );
				float temp_output_29_0_g170750 = ( break1683_g170743.y * break33_g170750.y );
				float temp_output_31_0_g170750 = ( break1683_g170743.z * break33_g170750.z );
				float temp_output_28_0_g170750 = ( temp_output_30_0_g170750 + temp_output_29_0_g170750 + temp_output_31_0_g170750 + ( break1683_g170743.w * break33_g170750.w ) );
				float clampResult17_g170751 = clamp( temp_output_28_0_g170750 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170755 = _NormalMeshRemap.x;
				float temp_output_9_0_g170755 = ( clampResult17_g170751 - temp_output_7_0_g170755 );
				float lerpResult1695_g170743 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170755 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170752 = lerpResult1695_g170743;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170752 = ( temp_output_6_0_g170752 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170752 = temp_output_6_0_g170752;
				#endif
				float temp_output_1690_0_g170743 = staticSwitch14_g170752;
				half Normal_MeskMask1691_g170743 = temp_output_1690_0_g170743;
				half Normal_Proj_Mask1647_g170743 = 1.0;
				float temp_output_1699_0_g170743 = ( Normal_MeskMask1691_g170743 * Normal_Proj_Mask1647_g170743 );
				float3 lerpResult1670_g170743 = lerp( Model_NormalOS1568_g170743 , temp_output_1715_0_g170743 , temp_output_1699_0_g170743);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170743 = lerpResult1670_g170743;
				#else
				float3 staticSwitch1716_g170743 = Model_NormalOS1568_g170743;
				#endif
				half3 Final_NormalOS178_g170743 = staticSwitch1716_g170743;
				float3 In_NormalOS16_g170745 = Final_NormalOS178_g170743;
				float3 temp_output_1567_21_g170743 = Out_NormalWS15_g170744;
				float3 In_NormalWS16_g170745 = temp_output_1567_21_g170743;
				float3 In_NormalRawOS16_g170745 = Out_NormalRawOS15_g170744;
				float3 In_NormalRawWS16_g170745 = Out_NormalRawWS15_g170744;
				float4 In_TangentOS16_g170745 = Out_TangentOS15_g170744;
				float3 In_ViewDirWS16_g170745 = Out_ViewDirWS15_g170744;
				float4 In_VertexData16_g170745 = temp_output_1567_29_g170743;
				float4 In_PhaseData16_g170745 = Out_PhaseData15_g170744;
				float4 In_BoundsData16_g170745 = Out_BoundsData15_g170744;
				float4 In_RotationData16_g170745 = temp_output_1567_33_g170743;
				{
				Data16_g170745.Dummy = In_Dummy16_g170745;
				Data16_g170745.PositionOS = In_PositionOS16_g170745;
				Data16_g170745.PositionWS = In_PositionWS16_g170745;
				Data16_g170745.PositionWO = In_PositionWO16_g170745;
				Data16_g170745.PositionRawOS = In_PositionRawOS16_g170745;
				Data16_g170745.PositionAddOS = In_PositionAddOS16_g170745;
				Data16_g170745.PivotOS = In_PivotOS16_g170745;
				Data16_g170745.PivotWS = In_PivotWS16_g170745;
				Data16_g170745.PivotWO = In_PivotWO16_g170745;
				Data16_g170745.NormalOS = In_NormalOS16_g170745;
				Data16_g170745.NormalWS = In_NormalWS16_g170745;
				Data16_g170745.NormalRawOS = In_NormalRawOS16_g170745;
				Data16_g170745.NormalRawWS = In_NormalRawWS16_g170745;
				Data16_g170745.TangentOS = In_TangentOS16_g170745;
				Data16_g170745.ViewDirWS = In_ViewDirWS16_g170745;
				Data16_g170745.VertexData = In_VertexData16_g170745;
				Data16_g170745.PhaseData = In_PhaseData16_g170745;
				Data16_g170745.BoundsData = In_BoundsData16_g170745;
				Data16_g170745.RotationData = In_RotationData16_g170745;
				}
				TVEModelData Data15_g170760 = Data16_g170745;
				float Out_Dummy15_g170760 = 0;
				float3 Out_PositionOS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170760 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170760 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170760 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170760 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170760 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170760 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170760 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170760 = float3( 0,0,0 );
				float4 Out_VertexData15_g170760 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170760 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170760 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170760 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170760 = Data15_g170760.Dummy;
				Out_PositionOS15_g170760 = Data15_g170760.PositionOS;
				Out_PositionWS15_g170760 = Data15_g170760.PositionWS;
				Out_PositionWO15_g170760 = Data15_g170760.PositionWO;
				Out_PositionRawOS15_g170760 = Data15_g170760.PositionRawOS;
				Out_PositionAddOS15_g170760 = Data15_g170760.PositionAddOS;
				Out_PivotOS15_g170760 = Data15_g170760.PivotOS;
				Out_PivotWS15_g170760 = Data15_g170760.PivotWS;
				Out_PivotWO15_g170760 = Data15_g170760.PivotWO;
				Out_NormalOS15_g170760 = Data15_g170760.NormalOS;
				Out_NormalWS15_g170760 = Data15_g170760.NormalWS;
				Out_NormalRawOS15_g170760 = Data15_g170760.NormalRawOS;
				Out_NormalRawWS15_g170760 = Data15_g170760.NormalRawWS;
				Out_TangentOS15_g170760 = Data15_g170760.TangentOS;
				Out_ViewDirWS15_g170760 = Data15_g170760.ViewDirWS;
				Out_VertexData15_g170760 = Data15_g170760.VertexData;
				Out_PhaseData15_g170760 = Data15_g170760.PhaseData;
				Out_BoundsData15_g170760 = Data15_g170760.BoundsData;
				Out_RotationData15_g170760 = Data15_g170760.RotationData;
				}
				float3 temp_output_217_24_g170759 = Out_PivotOS15_g170760;
				float3 In_PositionOS16_g170761 = ( Out_PositionOS15_g170760 + temp_output_217_24_g170759 );
				float3 In_PositionWS16_g170761 = Out_PositionWS15_g170760;
				float3 In_PositionWO16_g170761 = Out_PositionWO15_g170760;
				float3 In_PositionRawOS16_g170761 = Out_PositionRawOS15_g170760;
				float3 In_PositionAddOS16_g170761 = Out_PositionAddOS15_g170760;
				float3 In_PivotOS16_g170761 = temp_output_217_24_g170759;
				float3 In_PivotWS16_g170761 = Out_PivotWS15_g170760;
				float3 In_PivotWO16_g170761 = Out_PivotWO15_g170760;
				float3 In_NormalOS16_g170761 = Out_NormalOS15_g170760;
				float3 In_NormalWS16_g170761 = Out_NormalWS15_g170760;
				float3 In_NormalRawOS16_g170761 = Out_NormalRawOS15_g170760;
				float3 In_NormalRawWS16_g170761 = Out_NormalRawWS15_g170760;
				float4 In_TangentOS16_g170761 = Out_TangentOS15_g170760;
				float3 In_ViewDirWS16_g170761 = Out_ViewDirWS15_g170760;
				float4 In_VertexData16_g170761 = Out_VertexData15_g170760;
				float4 In_PhaseData16_g170761 = Out_PhaseData15_g170760;
				float4 In_BoundsData16_g170761 = Out_BoundsData15_g170760;
				float4 In_RotationData16_g170761 = Out_RotationData15_g170760;
				{
				Data16_g170761.Dummy = In_Dummy16_g170761;
				Data16_g170761.PositionOS = In_PositionOS16_g170761;
				Data16_g170761.PositionWS = In_PositionWS16_g170761;
				Data16_g170761.PositionWO = In_PositionWO16_g170761;
				Data16_g170761.PositionRawOS = In_PositionRawOS16_g170761;
				Data16_g170761.PositionAddOS = In_PositionAddOS16_g170761;
				Data16_g170761.PivotOS = In_PivotOS16_g170761;
				Data16_g170761.PivotWS = In_PivotWS16_g170761;
				Data16_g170761.PivotWO = In_PivotWO16_g170761;
				Data16_g170761.NormalOS = In_NormalOS16_g170761;
				Data16_g170761.NormalWS = In_NormalWS16_g170761;
				Data16_g170761.NormalRawOS = In_NormalRawOS16_g170761;
				Data16_g170761.NormalRawWS = In_NormalRawWS16_g170761;
				Data16_g170761.TangentOS = In_TangentOS16_g170761;
				Data16_g170761.ViewDirWS = In_ViewDirWS16_g170761;
				Data16_g170761.VertexData = In_VertexData16_g170761;
				Data16_g170761.PhaseData = In_PhaseData16_g170761;
				Data16_g170761.BoundsData = In_BoundsData16_g170761;
				Data16_g170761.RotationData = In_RotationData16_g170761;
				}
				TVEModelData Data15_g170774 = Data16_g170761;
				float Out_Dummy15_g170774 = 0;
				float3 Out_PositionOS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170774 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170774 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170774 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170774 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170774 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170774 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170774 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170774 = float3( 0,0,0 );
				float4 Out_VertexData15_g170774 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170774 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170774 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170774 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170774 = Data15_g170774.Dummy;
				Out_PositionOS15_g170774 = Data15_g170774.PositionOS;
				Out_PositionWS15_g170774 = Data15_g170774.PositionWS;
				Out_PositionWO15_g170774 = Data15_g170774.PositionWO;
				Out_PositionRawOS15_g170774 = Data15_g170774.PositionRawOS;
				Out_PositionAddOS15_g170774 = Data15_g170774.PositionAddOS;
				Out_PivotOS15_g170774 = Data15_g170774.PivotOS;
				Out_PivotWS15_g170774 = Data15_g170774.PivotWS;
				Out_PivotWO15_g170774 = Data15_g170774.PivotWO;
				Out_NormalOS15_g170774 = Data15_g170774.NormalOS;
				Out_NormalWS15_g170774 = Data15_g170774.NormalWS;
				Out_NormalRawOS15_g170774 = Data15_g170774.NormalRawOS;
				Out_NormalRawWS15_g170774 = Data15_g170774.NormalRawWS;
				Out_TangentOS15_g170774 = Data15_g170774.TangentOS;
				Out_ViewDirWS15_g170774 = Data15_g170774.ViewDirWS;
				Out_VertexData15_g170774 = Data15_g170774.VertexData;
				Out_PhaseData15_g170774 = Data15_g170774.PhaseData;
				Out_BoundsData15_g170774 = Data15_g170774.BoundsData;
				Out_RotationData15_g170774 = Data15_g170774.RotationData;
				}
				float3 temp_output_31_0_g170771 = Out_PositionOS15_g170774;
				float3 temp_output_6_0_g170785 = ( temp_output_31_0_g170771 + _DisableSRPBatcher );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170785 = ( temp_output_6_0_g170785 + ( 0.0 * 0.0 ) );
				#else
				float3 staticSwitch14_g170785 = temp_output_6_0_g170785;
				#endif
				
				output.ase_texcoord8.xyz = vertexToFrag73_g170196;
				output.ase_texcoord9.xyz = vertexToFrag76_g170196;
				float3 ase_tangentWS = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				float ase_tangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_bitangentWS = cross( ase_normalWS, ase_tangentWS ) * ase_tangentSign;
				output.ase_texcoord10.xyz = ase_bitangentWS;
				float temp_output_6_0_g170497 = ( _MotionHighlightValue * Global_DistMask1820_g170474 * ( Tiny_Mask218_g170474 * Tiny_Mask218_g170474 ) * ( Global_Wave1475_g170474 * Global_Wave1475_g170474 * Global_Wave1475_g170474 * Global_Wave1475_g170474 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Wave_Mask4324 = staticSwitch14_g170497;
				float4 appendResult23_g170573 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask4324));
				float4 vertexToFrag24_g170573 = appendResult23_g170573;
				output.ase_texcoord11 = vertexToFrag24_g170573;
				
				output.ase_texcoord7 = inputMesh.ase_texcoord;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord8.w = 0;
				output.ase_texcoord9.w = 0;
				output.ase_texcoord10.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue =  staticSwitch14_g170785;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif
				inputMesh.normalOS = Out_NormalOS15_g170774;
				inputMesh.tangentOS = Out_TangentOS15_g170774;
				return inputMesh;
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh)
			{
				PackedVaryingsMeshToPS output = (PackedVaryingsMeshToPS)0;
				AttributesMesh defaultMesh = inputMesh;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				inputMesh = ApplyMeshModification( inputMesh, _TimeParameters.xyz, output);

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
				float4 VPASSpreviousPositionCS;
				float4 VPASSpositionCS = mul(UNITY_MATRIX_UNJITTERED_VP, float4(positionRWS, 1.0));

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if (forceNoMotion)
				{
					VPASSpreviousPositionCS = float4(0.0, 0.0, 0.0, 1.0);
				}
				else
				{
					bool hasDeformation = unity_MotionVectorsParams.x > 0.0;
					float3 effectivePositionOS = (hasDeformation ? inputMesh.previousPositionOS : defaultMesh.positionOS);
					#if defined(_ADD_PRECOMPUTED_VELOCITY)
					effectivePositionOS -= inputMesh.precomputedVelocity;
					#endif

					#if defined(HAVE_MESH_MODIFICATION)
						AttributesMesh previousMesh = defaultMesh;
						previousMesh.positionOS = effectivePositionOS ;
						PackedVaryingsMeshToPS test = (PackedVaryingsMeshToPS)0;
						float3 curTime = _TimeParameters.xyz;
						previousMesh = ApplyMeshModification(previousMesh, _LastTimeParameters.xyz, test);
						_TimeParameters.xyz = curTime;
						float3 previousPositionRWS = TransformPreviousObjectToWorld(previousMesh.positionOS);
					#else
						float3 previousPositionRWS = TransformPreviousObjectToWorld(effectivePositionOS);
					#endif

					#ifdef ATTRIBUTES_NEED_NORMAL
						float3 normalWS = TransformPreviousObjectToWorldNormal(defaultMesh.normalOS);
					#else
						float3 normalWS = float3(0.0, 0.0, 0.0);
					#endif

					#if defined(HAVE_VERTEX_MODIFICATION)
						ApplyVertexModification(inputMesh, normalWS, previousPositionRWS, _LastTimeParameters.xyz);
					#endif

					VPASSpreviousPositionCS = mul(UNITY_MATRIX_PREV_VP, float4(previousPositionRWS, 1.0));
				}
				#endif

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				output.uv1 = inputMesh.uv1;
				output.uv2 = inputMesh.uv2;

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					output.vpassPositionCS = float3(VPASSpositionCS.xyw);
					output.vpassPreviousPositionCS = float3(VPASSpreviousPositionCS.xyw);
				#endif
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif

						#if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
					)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				UNITY_SETUP_INSTANCE_ID(packedInput);

				float3 positionRWS = packedInput.positionRWS;
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;
				input.positionRWS = positionRWS;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				PickingSurfaceDescription surfaceDescription = (PickingSurfaceDescription)0;
				float localCustomAlphaClip21_g170784 = ( 0.0 );
				float localBreakData4_g170777 = ( 0.0 );
				float localCompData3_g170764 = ( 0.0 );
				TVEVisualData Data3_g170764 = (TVEVisualData)0;
				half Dummy145_g170762 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170764 = Dummy145_g170762;
				float localBreakData4_g170763 = ( 0.0 );
				float localCompData3_g170732 = ( 0.0 );
				TVEVisualData Data3_g170732 = (TVEVisualData)0;
				half Dummy145_g170727 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170732 = Dummy145_g170727;
				float localBreakData4_g170731 = ( 0.0 );
				float localCompData3_g170709 = ( 0.0 );
				TVEVisualData Data3_g170709 = (TVEVisualData)0;
				half Dummy594_g170706 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170709 = Dummy594_g170706;
				float localBreakData4_g170708 = ( 0.0 );
				float localCompData3_g170692 = ( 0.0 );
				TVEVisualData Data3_g170692 = (TVEVisualData)0;
				half Dummy594_g170691 = ( _CutoutCategory + _CutoutEnd + _CutoutBakeMode );
				float In_Dummy3_g170692 = Dummy594_g170691;
				float localBreakData4_g170694 = ( 0.0 );
				float localCompData3_g170664 = ( 0.0 );
				TVEVisualData Data3_g170664 = (TVEVisualData)0;
				half Dummy594_g170662 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170664 = Dummy594_g170662;
				float localBreakData4_g170663 = ( 0.0 );
				float localCompData3_g170628 = ( 0.0 );
				TVEVisualData Data3_g170628 = (TVEVisualData)0;
				half Dummy594_g170625 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170628 = Dummy594_g170625;
				float localBreakData4_g170626 = ( 0.0 );
				float localCompData3_g170624 = ( 0.0 );
				TVEVisualData Data3_g170624 = (TVEVisualData)0;
				float In_Dummy3_g170624 = 0.0;
				float localBreakData4_g170623 = ( 0.0 );
				float localCompData3_g170601 = ( 0.0 );
				TVEVisualData Data3_g170601 = (TVEVisualData)0;
				half Dummy205_g170598 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170601 = Dummy205_g170598;
				float localBreakData4_g170600 = ( 0.0 );
				float localCompData3_g170578 = ( 0.0 );
				TVEVisualData Data3_g170578 = (TVEVisualData)0;
				half Dummy205_g170574 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170578 = Dummy205_g170574;
				float localBreakData4_g170579 = ( 0.0 );
				float localCompData3_g170567 = ( 0.0 );
				TVEVisualData Data3_g170567 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170567 = Dummy220_g170564;
				float localBreakData4_g170566 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170447 = ( 0.0 );
				TVEVisualData Data3_g170447 = (TVEVisualData)0;
				half4 Dummy944_g170438 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170447 = Dummy944_g170438.x;
				float localBreakData4_g170446 = ( 0.0 );
				float localCompData3_g170415 = ( 0.0 );
				TVEVisualData Data3_g170415 = (TVEVisualData)0;
				half4 Dummy946_g170394 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170415 = Dummy946_g170394.x;
				float localBreakData4_g170405 = ( 0.0 );
				float localCompData3_g170387 = ( 0.0 );
				TVEVisualData Data3_g170387 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170387 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170380) = _MainAlbedoTex;
				float localFilterTexture19_g170383 = ( 0.0 );
				SamplerState SS19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170383 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170383 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170383 = SamplerDefault19_g170383;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170383 = SamplerDefault19_g170383;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170383 = SamplerPoint19_g170383;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170383 = SamplerLow19_g170383;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170383 = SamplerMedium19_g170383;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170383 = SamplerHigh19_g170383;
				#endif
				}
				SamplerState Sampler276_g170380 = SS19_g170383;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170380 = Local_Coords180_g170372;
				half4 Coords276_g170380 = temp_output_37_0_g170380;
				half2 TexCoord276_g170380 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170380 = SampleMain( Texture276_g170380 , Sampler276_g170380 , Coords276_g170380 , TexCoord276_g170380 );
				TEXTURE2D(Texture275_g170380) = _MainAlbedoTex;
				SamplerState Sampler275_g170380 = SS19_g170383;
				half4 Coords275_g170380 = temp_output_37_0_g170380;
				half2 TexCoord275_g170380 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170380 = SampleExtra( Texture275_g170380 , Sampler275_g170380 , Coords275_g170380 , TexCoord275_g170380 );
				TEXTURE2D(Texture238_g170380) = _MainAlbedoTex;
				SamplerState Sampler238_g170380 = SS19_g170383;
				half4 Coords238_g170380 = temp_output_37_0_g170380;
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord8.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord9.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 normalizedWorldNormal = normalize( packedInput.normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170386 = Data16_g170201;
				float Out_Dummy15_g170386 = 0;
				float3 Out_PositionWS15_g170386 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170386 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170386 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170386 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170386 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170386 = float3( 0,0,0 );
				float4 Out_VertexData15_g170386 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170386 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170386 = Data15_g170386.Dummy;
				Out_PositionWS15_g170386 = Data15_g170386.PositionWS;
				Out_PositionWO15_g170386 = Data15_g170386.PositionWO;
				Out_PivotWS15_g170386 = Data15_g170386.PivotWS;
				Out_PivotWO15_g170386 = Data15_g170386.PivotWO;
				Out_NormalWS15_g170386 = Data15_g170386.NormalWS;
				Out_ViewDirWS15_g170386 = Data15_g170386.ViewDirWS;
				Out_VertexData15_g170386 = Data15_g170386.VertexData;
				Out_BoundsData15_g170386 = Data15_g170386.BoundsData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170386;
				float3 temp_output_279_0_g170380 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170380 = temp_output_279_0_g170380;
				half4 localSamplePlanar2D238_g170380 = SamplePlanar2D( Texture238_g170380 , Sampler238_g170380 , Coords238_g170380 , WorldPosition238_g170380 );
				TEXTURE2D(Texture246_g170380) = _MainAlbedoTex;
				SamplerState Sampler246_g170380 = SS19_g170383;
				half4 Coords246_g170380 = temp_output_37_0_g170380;
				half3 WorldPosition246_g170380 = temp_output_279_0_g170380;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170386;
				float3 temp_output_280_0_g170380 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170380 = temp_output_280_0_g170380;
				half4 localSamplePlanar3D246_g170380 = SamplePlanar3D( Texture246_g170380 , Sampler246_g170380 , Coords246_g170380 , WorldPosition246_g170380 , WorldNormal246_g170380 );
				TEXTURE2D(Texture234_g170380) = _MainAlbedoTex;
				SamplerState Sampler234_g170380 = SS19_g170383;
				float4 Coords234_g170380 = temp_output_37_0_g170380;
				float3 WorldPosition234_g170380 = temp_output_279_0_g170380;
				float4 localSampleStochastic2D234_g170380 = SampleStochastic2D( Texture234_g170380 , Sampler234_g170380 , Coords234_g170380 , WorldPosition234_g170380 );
				TEXTURE2D(Texture263_g170380) = _MainAlbedoTex;
				SamplerState Sampler263_g170380 = SS19_g170383;
				half4 Coords263_g170380 = temp_output_37_0_g170380;
				half3 WorldPosition263_g170380 = temp_output_279_0_g170380;
				half3 WorldNormal263_g170380 = temp_output_280_0_g170380;
				half4 localSampleStochastic3D263_g170380 = SampleStochastic3D( Texture263_g170380 , Sampler263_g170380 , Coords263_g170380 , WorldPosition263_g170380 , WorldNormal263_g170380 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170380;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170380;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170380;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170380;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170380;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170380;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170380;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170382) = _MainShaderTex;
				float localFilterTexture30_g170385 = ( 0.0 );
				SamplerState SS30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170385 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170385 = SamplerDefault30_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170385 = SamplerDefault30_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170385 = SamplerPoint30_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170385 = SamplerLow30_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170385 = SamplerMedium30_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170385 = SamplerHigh30_g170385;
				#endif
				}
				SamplerState Sampler276_g170382 = SS30_g170385;
				float4 temp_output_37_0_g170382 = Local_Coords180_g170372;
				half4 Coords276_g170382 = temp_output_37_0_g170382;
				half2 TexCoord276_g170382 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170382 = SampleMain( Texture276_g170382 , Sampler276_g170382 , Coords276_g170382 , TexCoord276_g170382 );
				TEXTURE2D(Texture275_g170382) = _MainShaderTex;
				SamplerState Sampler275_g170382 = SS30_g170385;
				half4 Coords275_g170382 = temp_output_37_0_g170382;
				half2 TexCoord275_g170382 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170382 = SampleExtra( Texture275_g170382 , Sampler275_g170382 , Coords275_g170382 , TexCoord275_g170382 );
				TEXTURE2D(Texture238_g170382) = _MainShaderTex;
				SamplerState Sampler238_g170382 = SS30_g170385;
				half4 Coords238_g170382 = temp_output_37_0_g170382;
				float3 temp_output_279_0_g170382 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170382 = temp_output_279_0_g170382;
				half4 localSamplePlanar2D238_g170382 = SamplePlanar2D( Texture238_g170382 , Sampler238_g170382 , Coords238_g170382 , WorldPosition238_g170382 );
				TEXTURE2D(Texture246_g170382) = _MainShaderTex;
				SamplerState Sampler246_g170382 = SS30_g170385;
				half4 Coords246_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition246_g170382 = temp_output_279_0_g170382;
				float3 temp_output_280_0_g170382 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170382 = temp_output_280_0_g170382;
				half4 localSamplePlanar3D246_g170382 = SamplePlanar3D( Texture246_g170382 , Sampler246_g170382 , Coords246_g170382 , WorldPosition246_g170382 , WorldNormal246_g170382 );
				TEXTURE2D(Texture234_g170382) = _MainShaderTex;
				SamplerState Sampler234_g170382 = SS30_g170385;
				float4 Coords234_g170382 = temp_output_37_0_g170382;
				float3 WorldPosition234_g170382 = temp_output_279_0_g170382;
				float4 localSampleStochastic2D234_g170382 = SampleStochastic2D( Texture234_g170382 , Sampler234_g170382 , Coords234_g170382 , WorldPosition234_g170382 );
				TEXTURE2D(Texture263_g170382) = _MainShaderTex;
				SamplerState Sampler263_g170382 = SS30_g170385;
				half4 Coords263_g170382 = temp_output_37_0_g170382;
				half3 WorldPosition263_g170382 = temp_output_279_0_g170382;
				half3 WorldNormal263_g170382 = temp_output_280_0_g170382;
				half4 localSampleStochastic3D263_g170382 = SampleStochastic3D( Texture263_g170382 , Sampler263_g170382 , Coords263_g170382 , WorldPosition263_g170382 , WorldNormal263_g170382 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170382;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170382;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170382;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170382;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170382;
				#endif
				half4 Local_MasksTex199_g170372 = staticSwitch198_g170372;
				float lerpResult23_g170372 = lerp( 1.0 , (Local_MasksTex199_g170372).y , _MainOcclusionValue);
				float4 appendResult73_g170372 = (float4(( (Local_MasksTex199_g170372).x * _MainMetallicValue ) , lerpResult23_g170372 , (Local_MasksTex199_g170372).z , ( (Local_MasksTex199_g170372).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170377 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170388 = _MainMultiRemap.x;
				float temp_output_9_0_g170388 = ( clampResult17_g170377 - temp_output_7_0_g170388 );
				half Local_MultiMask78_g170372 = saturate( ( ( temp_output_9_0_g170388 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170387 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170387 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170381) = _MainNormalTex;
				float localFilterTexture29_g170384 = ( 0.0 );
				SamplerState SS29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170384 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170384 = SamplerDefault29_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170384 = SamplerDefault29_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170384 = SamplerPoint29_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170384 = SamplerLow29_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170384 = SamplerMedium29_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170384 = SamplerHigh29_g170384;
				#endif
				}
				SamplerState Sampler276_g170381 = SS29_g170384;
				float4 temp_output_37_0_g170381 = Local_Coords180_g170372;
				half4 Coords276_g170381 = temp_output_37_0_g170381;
				half2 TexCoord276_g170381 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170381 = SampleMain( Texture276_g170381 , Sampler276_g170381 , Coords276_g170381 , TexCoord276_g170381 );
				TEXTURE2D(Texture275_g170381) = _MainNormalTex;
				SamplerState Sampler275_g170381 = SS29_g170384;
				half4 Coords275_g170381 = temp_output_37_0_g170381;
				half2 TexCoord275_g170381 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170381 = SampleExtra( Texture275_g170381 , Sampler275_g170381 , Coords275_g170381 , TexCoord275_g170381 );
				TEXTURE2D(Texture238_g170381) = _MainNormalTex;
				SamplerState Sampler238_g170381 = SS29_g170384;
				half4 Coords238_g170381 = temp_output_37_0_g170381;
				float3 temp_output_279_0_g170381 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170381 = temp_output_279_0_g170381;
				half4 localSamplePlanar2D238_g170381 = SamplePlanar2D( Texture238_g170381 , Sampler238_g170381 , Coords238_g170381 , WorldPosition238_g170381 );
				TEXTURE2D(Texture246_g170381) = _MainNormalTex;
				SamplerState Sampler246_g170381 = SS29_g170384;
				half4 Coords246_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition246_g170381 = temp_output_279_0_g170381;
				float3 temp_output_280_0_g170381 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170381 = temp_output_280_0_g170381;
				half4 localSamplePlanar3D246_g170381 = SamplePlanar3D( Texture246_g170381 , Sampler246_g170381 , Coords246_g170381 , WorldPosition246_g170381 , WorldNormal246_g170381 );
				TEXTURE2D(Texture234_g170381) = _MainNormalTex;
				SamplerState Sampler234_g170381 = SS29_g170384;
				float4 Coords234_g170381 = temp_output_37_0_g170381;
				float3 WorldPosition234_g170381 = temp_output_279_0_g170381;
				float4 localSampleStochastic2D234_g170381 = SampleStochastic2D( Texture234_g170381 , Sampler234_g170381 , Coords234_g170381 , WorldPosition234_g170381 );
				TEXTURE2D(Texture263_g170381) = _MainNormalTex;
				SamplerState Sampler263_g170381 = SS29_g170384;
				half4 Coords263_g170381 = temp_output_37_0_g170381;
				half3 WorldPosition263_g170381 = temp_output_279_0_g170381;
				half3 WorldNormal263_g170381 = temp_output_280_0_g170381;
				half4 localSampleStochastic3D263_g170381 = SampleStochastic3D( Texture263_g170381 , Sampler263_g170381 , Coords263_g170381 , WorldPosition263_g170381 , WorldNormal263_g170381 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170381;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170381;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170381;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170381;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170381;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3 ase_bitangentWS = packedInput.ase_texcoord10.xyz;
				float3x3 ase_worldToTangent = float3x3(packedInput.tangentWS.xyz,ase_bitangentWS,packedInput.normalWS);
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170387 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( packedInput.tangentWS.xyz.x, ase_bitangentWS.x, packedInput.normalWS.x );
				float3 tanToWorld1 = float3( packedInput.tangentWS.xyz.y, ase_bitangentWS.y, packedInput.normalWS.y );
				float3 tanToWorld2 = float3( packedInput.tangentWS.xyz.z, ase_bitangentWS.z, packedInput.normalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3(dot(tanToWorld0,tanNormal74_g170375), dot(tanToWorld1,tanNormal74_g170375), dot(tanToWorld2,tanNormal74_g170375)) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170387 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170387 = Local_Masks109_g170372;
				float4 In_Emissive3_g170387 = half4(1,1,1,1);
				float3 temp_output_3_0_g170376 = Local_Albedo139_g170372;
				float dotResult20_g170376 = dot( temp_output_3_0_g170376 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170372 = dotResult20_g170376;
				float In_Grayscale3_g170387 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170387 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170387 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170387 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170387 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170387 = temp_cast_4;
				float In_Transmission3_g170387 = 1.0;
				float In_Thickness3_g170387 = 0.0;
				float In_Diffusion3_g170387 = 0.0;
				{
				Data3_g170387.Dummy = In_Dummy3_g170387;
				Data3_g170387.Albedo = In_Albedo3_g170387;
				Data3_g170387.AlbedoRaw = In_AlbedoRaw3_g170387;
				Data3_g170387.NormalTS = In_NormalTS3_g170387;
				Data3_g170387.NormalWS = In_NormalWS3_g170387;
				Data3_g170387.Shader = In_Shader3_g170387;
				Data3_g170387.Emissive= In_Emissive3_g170387;
				Data3_g170387.MultiMask = In_MultiMask3_g170387;
				Data3_g170387.Grayscale = In_Grayscale3_g170387;
				Data3_g170387.Luminosity = In_Luminosity3_g170387;
				Data3_g170387.AlphaClip = In_AlphaClip3_g170387;
				Data3_g170387.AlphaFade = In_AlphaFade3_g170387;
				Data3_g170387.Translucency = In_Translucency3_g170387;
				Data3_g170387.Transmission = In_Transmission3_g170387;
				Data3_g170387.Thickness = In_Thickness3_g170387;
				Data3_g170387.Diffusion = In_Diffusion3_g170387;
				}
				TVEVisualData Data4_g170405 = Data3_g170387;
				float Out_Dummy4_g170405 = 0;
				float3 Out_Albedo4_g170405 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170405 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170405 = float2( 0,0 );
				float3 Out_NormalWS4_g170405 = float3( 0,0,0 );
				float4 Out_Shader4_g170405 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170405 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170405 = 0;
				float Out_Grayscale4_g170405 = 0;
				float Out_Luminosity4_g170405 = 0;
				float Out_AlphaClip4_g170405 = 0;
				float Out_AlphaFade4_g170405 = 0;
				float3 Out_Translucency4_g170405 = float3( 0,0,0 );
				float Out_Transmission4_g170405 = 0;
				float Out_Thickness4_g170405 = 0;
				float Out_Diffusion4_g170405 = 0;
				{
				Out_Dummy4_g170405 = Data4_g170405.Dummy;
				Out_Albedo4_g170405 = Data4_g170405.Albedo;
				Out_AlbedoRaw4_g170405 = Data4_g170405.AlbedoRaw;
				Out_NormalTS4_g170405 = Data4_g170405.NormalTS;
				Out_NormalWS4_g170405 = Data4_g170405.NormalWS;
				Out_Shader4_g170405 = Data4_g170405.Shader;
				Out_Emissive4_g170405= Data4_g170405.Emissive;
				Out_MultiMask4_g170405 = Data4_g170405.MultiMask;
				Out_Grayscale4_g170405 = Data4_g170405.Grayscale;
				Out_Luminosity4_g170405= Data4_g170405.Luminosity;
				Out_AlphaClip4_g170405 = Data4_g170405.AlphaClip;
				Out_AlphaFade4_g170405 = Data4_g170405.AlphaFade;
				Out_Translucency4_g170405 = Data4_g170405.Translucency;
				Out_Transmission4_g170405 = Data4_g170405.Transmission;
				Out_Thickness4_g170405 = Data4_g170405.Thickness;
				Out_Diffusion4_g170405 = Data4_g170405.Diffusion;
				}
				half3 Visual_Albedo527_g170394 = Out_Albedo4_g170405;
				TEXTURE2D(Texture276_g170395) = _SecondAlbedoTex;
				float localFilterTexture19_g170411 = ( 0.0 );
				SamplerState SS19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170411 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170411 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170411 = SamplerDefault19_g170411;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170411 = SamplerDefault19_g170411;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170411 = SamplerPoint19_g170411;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170411 = SamplerLow19_g170411;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170411 = SamplerMedium19_g170411;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170411 = SamplerHigh19_g170411;
				#endif
				}
				SamplerState Sampler276_g170395 = SS19_g170411;
				half4 Local_LayerCoords790_g170394 = _second_coord_value;
				float4 temp_output_37_0_g170395 = Local_LayerCoords790_g170394;
				half4 Coords276_g170395 = temp_output_37_0_g170395;
				half2 TexCoord276_g170395 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170395 = SampleMain( Texture276_g170395 , Sampler276_g170395 , Coords276_g170395 , TexCoord276_g170395 );
				TEXTURE2D(Texture275_g170395) = _SecondAlbedoTex;
				SamplerState Sampler275_g170395 = SS19_g170411;
				half4 Coords275_g170395 = temp_output_37_0_g170395;
				half2 TexCoord275_g170395 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170395 = SampleExtra( Texture275_g170395 , Sampler275_g170395 , Coords275_g170395 , TexCoord275_g170395 );
				TEXTURE2D(Texture238_g170395) = _SecondAlbedoTex;
				SamplerState Sampler238_g170395 = SS19_g170411;
				half4 Coords238_g170395 = temp_output_37_0_g170395;
				TVEModelData Data15_g170414 = Data16_g170201;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				}
				half3 Model_PositionWO636_g170394 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170395 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170395 = temp_output_279_0_g170395;
				half4 localSamplePlanar2D238_g170395 = SamplePlanar2D( Texture238_g170395 , Sampler238_g170395 , Coords238_g170395 , WorldPosition238_g170395 );
				TEXTURE2D(Texture246_g170395) = _SecondAlbedoTex;
				SamplerState Sampler246_g170395 = SS19_g170411;
				half4 Coords246_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition246_g170395 = temp_output_279_0_g170395;
				half3 Model_NormalWS869_g170394 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170395 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170395 = temp_output_280_0_g170395;
				half4 localSamplePlanar3D246_g170395 = SamplePlanar3D( Texture246_g170395 , Sampler246_g170395 , Coords246_g170395 , WorldPosition246_g170395 , WorldNormal246_g170395 );
				TEXTURE2D(Texture234_g170395) = _SecondAlbedoTex;
				SamplerState Sampler234_g170395 = SS19_g170411;
				float4 Coords234_g170395 = temp_output_37_0_g170395;
				float3 WorldPosition234_g170395 = temp_output_279_0_g170395;
				float4 localSampleStochastic2D234_g170395 = SampleStochastic2D( Texture234_g170395 , Sampler234_g170395 , Coords234_g170395 , WorldPosition234_g170395 );
				TEXTURE2D(Texture263_g170395) = _SecondAlbedoTex;
				SamplerState Sampler263_g170395 = SS19_g170411;
				half4 Coords263_g170395 = temp_output_37_0_g170395;
				half3 WorldPosition263_g170395 = temp_output_279_0_g170395;
				half3 WorldNormal263_g170395 = temp_output_280_0_g170395;
				half4 localSampleStochastic3D263_g170395 = SampleStochastic3D( Texture263_g170395 , Sampler263_g170395 , Coords263_g170395 , WorldPosition263_g170395 , WorldNormal263_g170395 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170394 = localSampleExtra275_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170394 = localSamplePlanar2D238_g170395;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170394 = localSamplePlanar3D246_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170394 = localSampleStochastic2D234_g170395;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170394 = localSampleStochastic3D263_g170395;
				#else
				float4 staticSwitch693_g170394 = localSampleMain276_g170395;
				#endif
				half4 Local_AlbedoTex777_g170394 = staticSwitch693_g170394;
				float3 lerpResult716_g170394 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170394).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170394 = lerpResult716_g170394;
				TEXTURE2D(Texture276_g170397) = _SecondShaderTex;
				float localFilterTexture30_g170413 = ( 0.0 );
				SamplerState SS30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170413 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170413 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170413 = SamplerDefault30_g170413;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170413 = SamplerDefault30_g170413;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170413 = SamplerPoint30_g170413;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170413 = SamplerLow30_g170413;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170413 = SamplerMedium30_g170413;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170413 = SamplerHigh30_g170413;
				#endif
				}
				SamplerState Sampler276_g170397 = SS30_g170413;
				float4 temp_output_37_0_g170397 = Local_LayerCoords790_g170394;
				half4 Coords276_g170397 = temp_output_37_0_g170397;
				half2 TexCoord276_g170397 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170397 = SampleMain( Texture276_g170397 , Sampler276_g170397 , Coords276_g170397 , TexCoord276_g170397 );
				TEXTURE2D(Texture275_g170397) = _SecondShaderTex;
				SamplerState Sampler275_g170397 = SS30_g170413;
				half4 Coords275_g170397 = temp_output_37_0_g170397;
				half2 TexCoord275_g170397 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170397 = SampleExtra( Texture275_g170397 , Sampler275_g170397 , Coords275_g170397 , TexCoord275_g170397 );
				TEXTURE2D(Texture238_g170397) = _SecondShaderTex;
				SamplerState Sampler238_g170397 = SS30_g170413;
				half4 Coords238_g170397 = temp_output_37_0_g170397;
				float3 temp_output_279_0_g170397 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170397 = temp_output_279_0_g170397;
				half4 localSamplePlanar2D238_g170397 = SamplePlanar2D( Texture238_g170397 , Sampler238_g170397 , Coords238_g170397 , WorldPosition238_g170397 );
				TEXTURE2D(Texture246_g170397) = _SecondShaderTex;
				SamplerState Sampler246_g170397 = SS30_g170413;
				half4 Coords246_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition246_g170397 = temp_output_279_0_g170397;
				float3 temp_output_280_0_g170397 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170397 = temp_output_280_0_g170397;
				half4 localSamplePlanar3D246_g170397 = SamplePlanar3D( Texture246_g170397 , Sampler246_g170397 , Coords246_g170397 , WorldPosition246_g170397 , WorldNormal246_g170397 );
				TEXTURE2D(Texture234_g170397) = _SecondShaderTex;
				SamplerState Sampler234_g170397 = SS30_g170413;
				float4 Coords234_g170397 = temp_output_37_0_g170397;
				float3 WorldPosition234_g170397 = temp_output_279_0_g170397;
				float4 localSampleStochastic2D234_g170397 = SampleStochastic2D( Texture234_g170397 , Sampler234_g170397 , Coords234_g170397 , WorldPosition234_g170397 );
				TEXTURE2D(Texture263_g170397) = _SecondShaderTex;
				SamplerState Sampler263_g170397 = SS30_g170413;
				half4 Coords263_g170397 = temp_output_37_0_g170397;
				half3 WorldPosition263_g170397 = temp_output_279_0_g170397;
				half3 WorldNormal263_g170397 = temp_output_280_0_g170397;
				half4 localSampleStochastic3D263_g170397 = SampleStochastic3D( Texture263_g170397 , Sampler263_g170397 , Coords263_g170397 , WorldPosition263_g170397 , WorldNormal263_g170397 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170394 = localSampleExtra275_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170394 = localSamplePlanar2D238_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170394 = localSamplePlanar3D246_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170394 = localSampleStochastic2D234_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170394 = localSampleStochastic3D263_g170397;
				#else
				float4 staticSwitch722_g170394 = localSampleMain276_g170397;
				#endif
				half4 Local_ShaderTex775_g170394 = staticSwitch722_g170394;
				float lerpResult739_g170394 = lerp( 1.0 , (Local_ShaderTex775_g170394).y , _SecondOcclusionValue);
				float4 appendResult749_g170394 = (float4(( (Local_ShaderTex775_g170394).x * _SecondMetallicValue ) , lerpResult739_g170394 , (Local_ShaderTex775_g170394).z , ( (Local_ShaderTex775_g170394).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170394 = appendResult749_g170394;
				float clampResult17_g170401 = clamp( (Local_Masks750_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170416 = _SecondMultiRemap.x;
				float temp_output_9_0_g170416 = ( clampResult17_g170401 - temp_output_7_0_g170416 );
				float temp_output_765_0_g170394 = saturate( ( ( temp_output_9_0_g170416 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170394 = temp_output_765_0_g170394;
				float lerpResult705_g170394 = lerp( 1.0 , Local_MultiMask767_g170394 , _SecondColorMode);
				float4 lerpResult706_g170394 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170394);
				half3 Local_ColorRGB774_g170394 = (lerpResult706_g170394).rgb;
				half3 Local_Albedo768_g170394 = ( Local_AlbedoRGB771_g170394 * Local_ColorRGB774_g170394 );
				float3 lerpResult985_g170394 = lerp( Local_Albedo768_g170394 , ( Visual_Albedo527_g170394 * Local_Albedo768_g170394 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170398) = _SecondMaskTex;
				SamplerState Sampler276_g170398 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170394 = _second_mask_coord_value;
				float4 temp_output_37_0_g170398 = Local_BlendCoords813_g170394;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondMaskTex;
				SamplerState Sampler275_g170398 = sampler_Linear_Repeat;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondMaskTex;
				SamplerState Sampler238_g170398 = sampler_Linear_Repeat;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondMaskTex;
				SamplerState Sampler246_g170398 = sampler_Linear_Repeat;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170394 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170394 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170394 = localSamplePlanar3D246_g170398;
				#else
				float4 staticSwitch817_g170394 = localSampleMain276_g170398;
				#endif
				half4 Local_MaskTex861_g170394 = staticSwitch817_g170394;
				float clampResult17_g170418 = clamp( (Local_MaskTex861_g170394).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170422 = _SecondMaskRemap.x;
				float temp_output_9_0_g170422 = ( clampResult17_g170418 - temp_output_7_0_g170422 );
				float lerpResult1015_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170422 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170394 = lerpResult1015_g170394;
				half Visual_Luminosity1041_g170394 = Out_Luminosity4_g170405;
				float clampResult17_g170427 = clamp( Visual_Luminosity1041_g170394 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170428 = _SecondLumaRemap.x;
				float temp_output_9_0_g170428 = ( clampResult17_g170427 - temp_output_7_0_g170428 );
				float lerpResult1036_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170428 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170394 = lerpResult1036_g170394;
				half3 Visual_NormalWS951_g170394 = Out_NormalWS4_g170405;
				float clampResult17_g170423 = clamp( saturate( (Visual_NormalWS951_g170394).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _SecondProjRemap.x;
				float temp_output_9_0_g170425 = ( clampResult17_g170423 - temp_output_7_0_g170425 );
				float lerpResult996_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170425 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170394 = lerpResult996_g170394;
				half4 Model_VertexMasks964_g170394 = Out_VertexData15_g170414;
				float4 break965_g170394 = Model_VertexMasks964_g170394;
				float4 break33_g170419 = _second_vert_mode;
				float temp_output_30_0_g170419 = ( break965_g170394.x * break33_g170419.x );
				float temp_output_29_0_g170419 = ( break965_g170394.y * break33_g170419.y );
				float temp_output_31_0_g170419 = ( break965_g170394.z * break33_g170419.z );
				float temp_output_28_0_g170419 = ( temp_output_30_0_g170419 + temp_output_29_0_g170419 + temp_output_31_0_g170419 + ( break965_g170394.w * break33_g170419.w ) );
				float clampResult17_g170417 = clamp( temp_output_28_0_g170419 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170421 = _SecondMeshRemap.x;
				float temp_output_9_0_g170421 = ( clampResult17_g170417 - temp_output_7_0_g170421 );
				float lerpResult1017_g170394 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170421 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170420 = lerpResult1017_g170394;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170420 = ( temp_output_6_0_g170420 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170420 = temp_output_6_0_g170420;
				#endif
				half Blend_VertMask918_g170394 = staticSwitch14_g170420;
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatParams204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintParams204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowParams204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoParams204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeParams204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormParams204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowParams204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatParams = In_CoatParams204_g170214;
				Data204_g170214.PaintParams = In_PaintParams204_g170214;
				Data204_g170214.GlowParams = In_GlowParams204_g170214;
				Data204_g170214.AtmoParams = In_AtmoParams204_g170214;
				Data204_g170214.FadeParams = In_FadeParams204_g170214;
				Data204_g170214.FormParams= In_FormParams204_g170214;
				Data204_g170214.FlowParams = In_FlowParams204_g170214;
				}
				TVEGlobalData Data15_g170404 = Data204_g170214;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170404 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatParams15_g170404 = Data15_g170404.CoatParams;
				Out_PaintParams15_g170404 = Data15_g170404.PaintParams;
				Out_GlowParams15_g170404 = Data15_g170404.GlowParams;
				Out_AtmoParams15_g170404= Data15_g170404.AtmoParams;
				Out_FadeParams15_g170404= Data15_g170404.FadeParams;
				Out_FormParams15_g170404 = Data15_g170404.FormParams;
				Out_FlowParams15_g170404 = Data15_g170404.FlowParams;
				}
				half4 Global_CoatParams975_g170394 = Out_CoatParams15_g170404;
				float temp_output_6_0_g170429 = (Global_CoatParams975_g170394).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170429 = ( temp_output_6_0_g170429 + ( _SecondElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170429 = temp_output_6_0_g170429;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170394 = staticSwitch14_g170429;
				#else
				float staticSwitch971_g170394 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170394 = lerp( 1.0 , staticSwitch971_g170394 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170394 = lerpResult1013_g170394;
				float clampResult17_g170424 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170394 * Blend_LumaMask1033_g170394 * Blend_ProjMask434_g170394 * Blend_VertMask918_g170394 * Blend_GlobalMask972_g170394 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170426 = _SecondBlendRemap.x;
				float temp_output_9_0_g170426 = ( clampResult17_g170424 - temp_output_7_0_g170426 );
				half Blend_Mask412_g170394 = ( saturate( ( ( temp_output_9_0_g170426 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170394 = lerp( Visual_Albedo527_g170394 , lerpResult985_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170394 = lerpResult403_g170394;
				#else
				float3 staticSwitch415_g170394 = Visual_Albedo527_g170394;
				#endif
				half3 Final_Albedo601_g170394 = staticSwitch415_g170394;
				float3 In_Albedo3_g170415 = Final_Albedo601_g170394;
				float3 In_AlbedoRaw3_g170415 = Final_Albedo601_g170394;
				half2 Visual_NormalTS529_g170394 = Out_NormalTS4_g170405;
				float2 lerpResult40_g170406 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170394 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170396) = _SecondNormalTex;
				float localFilterTexture29_g170412 = ( 0.0 );
				SamplerState SS29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170412 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170412 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170412 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170412 = SamplerDefault29_g170412;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170412 = SamplerDefault29_g170412;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170412 = SamplerPoint29_g170412;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170412 = SamplerLow29_g170412;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170412 = SamplerMedium29_g170412;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170412 = SamplerHigh29_g170412;
				#endif
				}
				SamplerState Sampler276_g170396 = SS29_g170412;
				float4 temp_output_37_0_g170396 = Local_LayerCoords790_g170394;
				half4 Coords276_g170396 = temp_output_37_0_g170396;
				half2 TexCoord276_g170396 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170396 = SampleMain( Texture276_g170396 , Sampler276_g170396 , Coords276_g170396 , TexCoord276_g170396 );
				TEXTURE2D(Texture275_g170396) = _SecondNormalTex;
				SamplerState Sampler275_g170396 = SS29_g170412;
				half4 Coords275_g170396 = temp_output_37_0_g170396;
				half2 TexCoord275_g170396 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170396 = SampleExtra( Texture275_g170396 , Sampler275_g170396 , Coords275_g170396 , TexCoord275_g170396 );
				TEXTURE2D(Texture238_g170396) = _SecondNormalTex;
				SamplerState Sampler238_g170396 = SS29_g170412;
				half4 Coords238_g170396 = temp_output_37_0_g170396;
				float3 temp_output_279_0_g170396 = Model_PositionWO636_g170394;
				half3 WorldPosition238_g170396 = temp_output_279_0_g170396;
				half4 localSamplePlanar2D238_g170396 = SamplePlanar2D( Texture238_g170396 , Sampler238_g170396 , Coords238_g170396 , WorldPosition238_g170396 );
				TEXTURE2D(Texture246_g170396) = _SecondNormalTex;
				SamplerState Sampler246_g170396 = SS29_g170412;
				half4 Coords246_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition246_g170396 = temp_output_279_0_g170396;
				float3 temp_output_280_0_g170396 = Model_NormalWS869_g170394;
				half3 WorldNormal246_g170396 = temp_output_280_0_g170396;
				half4 localSamplePlanar3D246_g170396 = SamplePlanar3D( Texture246_g170396 , Sampler246_g170396 , Coords246_g170396 , WorldPosition246_g170396 , WorldNormal246_g170396 );
				TEXTURE2D(Texture234_g170396) = _SecondNormalTex;
				SamplerState Sampler234_g170396 = SS29_g170412;
				float4 Coords234_g170396 = temp_output_37_0_g170396;
				float3 WorldPosition234_g170396 = temp_output_279_0_g170396;
				float4 localSampleStochastic2D234_g170396 = SampleStochastic2D( Texture234_g170396 , Sampler234_g170396 , Coords234_g170396 , WorldPosition234_g170396 );
				TEXTURE2D(Texture263_g170396) = _SecondNormalTex;
				SamplerState Sampler263_g170396 = SS29_g170412;
				half4 Coords263_g170396 = temp_output_37_0_g170396;
				half3 WorldPosition263_g170396 = temp_output_279_0_g170396;
				half3 WorldNormal263_g170396 = temp_output_280_0_g170396;
				half4 localSampleStochastic3D263_g170396 = SampleStochastic3D( Texture263_g170396 , Sampler263_g170396 , Coords263_g170396 , WorldPosition263_g170396 , WorldNormal263_g170396 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170394 = localSampleExtra275_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170394 = localSamplePlanar2D238_g170396;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170394 = localSamplePlanar3D246_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170394 = localSampleStochastic2D234_g170396;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170394 = localSampleStochastic3D263_g170396;
				#else
				float4 staticSwitch698_g170394 = localSampleMain276_g170396;
				#endif
				half4 Local_NormalTex776_g170394 = staticSwitch698_g170394;
				half4 Normal_Packed45_g170399 = Local_NormalTex776_g170394;
				float2 appendResult58_g170399 = (float2(( (Normal_Packed45_g170399).x * (Normal_Packed45_g170399).w ) , (Normal_Packed45_g170399).y));
				half2 Normal_Default50_g170399 = appendResult58_g170399;
				half2 Normal_ASTC41_g170399 = (Normal_Packed45_g170399).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170399 = Normal_ASTC41_g170399;
				#else
				float2 staticSwitch38_g170399 = Normal_Default50_g170399;
				#endif
				half2 Normal_NO_DTX544_g170399 = (Normal_Packed45_g170399).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170399 = Normal_NO_DTX544_g170399;
				#else
				float2 staticSwitch37_g170399 = staticSwitch38_g170399;
				#endif
				float2 temp_output_724_0_g170394 = ( (staticSwitch37_g170399*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170400 = temp_output_724_0_g170394;
				float2 break71_g170400 = Normal_Planar45_g170400;
				float3 appendResult72_g170400 = (float3(break71_g170400.x , 0.0 , break71_g170400.y));
				float2 temp_output_858_0_g170394 = (mul( ase_worldToTangent, appendResult72_g170400 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170394 = temp_output_858_0_g170394;
				#else
				float2 staticSwitch727_g170394 = temp_output_724_0_g170394;
				#endif
				half2 Local_NormalTS729_g170394 = staticSwitch727_g170394;
				float2 temp_output_36_0_g170406 = ( lerpResult40_g170406 + Local_NormalTS729_g170394 );
				float2 lerpResult405_g170394 = lerp( Visual_NormalTS529_g170394 , temp_output_36_0_g170406 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170394 = lerpResult405_g170394;
				#else
				float2 staticSwitch418_g170394 = Visual_NormalTS529_g170394;
				#endif
				half2 Final_NormalTS612_g170394 = staticSwitch418_g170394;
				float2 In_NormalTS3_g170415 = Final_NormalTS612_g170394;
				float3 appendResult68_g170407 = (float3(Final_NormalTS612_g170394 , 1.0));
				float3 tanNormal74_g170407 = appendResult68_g170407;
				float3 worldNormal74_g170407 = normalize( float3(dot(tanToWorld0,tanNormal74_g170407), dot(tanToWorld1,tanNormal74_g170407), dot(tanToWorld2,tanNormal74_g170407)) );
				half3 Final_NormalWS950_g170394 = worldNormal74_g170407;
				float3 In_NormalWS3_g170415 = Final_NormalWS950_g170394;
				half4 Visual_Shader531_g170394 = Out_Shader4_g170405;
				float4 lerpResult994_g170394 = lerp( Local_Masks750_g170394 , ( Visual_Shader531_g170394 * Local_Masks750_g170394 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170394 = lerp( Visual_Shader531_g170394 , lerpResult994_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170394 = lerpResult440_g170394;
				#else
				float4 staticSwitch451_g170394 = Visual_Shader531_g170394;
				#endif
				half4 Final_Masks613_g170394 = staticSwitch451_g170394;
				float4 In_Shader3_g170415 = Final_Masks613_g170394;
				float4 In_Emissive3_g170415 = Out_Emissive4_g170405;
				float3 temp_output_3_0_g170409 = Final_Albedo601_g170394;
				float dotResult20_g170409 = dot( temp_output_3_0_g170409 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170394 = dotResult20_g170409;
				float In_Grayscale3_g170415 = Final_Grayscale615_g170394;
				float clampResult651_g170394 = clamp( saturate( ( Final_Grayscale615_g170394 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170394 = clampResult651_g170394;
				float In_Luminosity3_g170415 = Final_Luminosity652_g170394;
				half Visual_MultiMask547_g170394 = Out_MultiMask4_g170405;
				float lerpResult477_g170394 = lerp( Visual_MultiMask547_g170394 , Local_MultiMask767_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch482_g170394 = lerpResult477_g170394;
				#else
				float staticSwitch482_g170394 = Visual_MultiMask547_g170394;
				#endif
				half Final_MultiMask572_g170394 = staticSwitch482_g170394;
				float In_MultiMask3_g170415 = Final_MultiMask572_g170394;
				half Visual_AlphaClip559_g170394 = Out_AlphaClip4_g170405;
				float temp_output_718_0_g170394 = (Local_AlbedoTex777_g170394).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170394 = ( temp_output_718_0_g170394 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170394 = temp_output_718_0_g170394;
				#endif
				half Local_AlphaClip772_g170394 = staticSwitch932_g170394;
				float lerpResult448_g170394 = lerp( Visual_AlphaClip559_g170394 , Local_AlphaClip772_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch564_g170394 = lerpResult448_g170394;
				#else
				float staticSwitch564_g170394 = Visual_AlphaClip559_g170394;
				#endif
				half Final_AlphaClip602_g170394 = staticSwitch564_g170394;
				float In_AlphaClip3_g170415 = Final_AlphaClip602_g170394;
				half Visual_AlphaFade588_g170394 = Out_AlphaFade4_g170405;
				half Local_AlphaFade773_g170394 = (lerpResult706_g170394).a;
				float lerpResult604_g170394 = lerp( Visual_AlphaFade588_g170394 , Local_AlphaFade773_g170394 , Blend_Mask412_g170394);
				#ifdef TVE_SECOND
				float staticSwitch608_g170394 = lerpResult604_g170394;
				#else
				float staticSwitch608_g170394 = Visual_AlphaFade588_g170394;
				#endif
				half Final_AlphaFade611_g170394 = staticSwitch608_g170394;
				float In_AlphaFade3_g170415 = Final_AlphaFade611_g170394;
				float3 In_Translucency3_g170415 = Out_Translucency4_g170405;
				float In_Transmission3_g170415 = Out_Transmission4_g170405;
				float In_Thickness3_g170415 = Out_Thickness4_g170405;
				float In_Diffusion3_g170415 = Out_Diffusion4_g170405;
				{
				Data3_g170415.Dummy = In_Dummy3_g170415;
				Data3_g170415.Albedo = In_Albedo3_g170415;
				Data3_g170415.AlbedoRaw = In_AlbedoRaw3_g170415;
				Data3_g170415.NormalTS = In_NormalTS3_g170415;
				Data3_g170415.NormalWS = In_NormalWS3_g170415;
				Data3_g170415.Shader = In_Shader3_g170415;
				Data3_g170415.Emissive= In_Emissive3_g170415;
				Data3_g170415.MultiMask = In_MultiMask3_g170415;
				Data3_g170415.Grayscale = In_Grayscale3_g170415;
				Data3_g170415.Luminosity = In_Luminosity3_g170415;
				Data3_g170415.AlphaClip = In_AlphaClip3_g170415;
				Data3_g170415.AlphaFade = In_AlphaFade3_g170415;
				Data3_g170415.Translucency = In_Translucency3_g170415;
				Data3_g170415.Transmission = In_Transmission3_g170415;
				Data3_g170415.Thickness = In_Thickness3_g170415;
				Data3_g170415.Diffusion = In_Diffusion3_g170415;
				}
				TVEVisualData Data4_g170446 = Data3_g170415;
				float Out_Dummy4_g170446 = 0;
				float3 Out_Albedo4_g170446 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170446 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170446 = float2( 0,0 );
				float3 Out_NormalWS4_g170446 = float3( 0,0,0 );
				float4 Out_Shader4_g170446 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170446 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170446 = 0;
				float Out_Grayscale4_g170446 = 0;
				float Out_Luminosity4_g170446 = 0;
				float Out_AlphaClip4_g170446 = 0;
				float Out_AlphaFade4_g170446 = 0;
				float3 Out_Translucency4_g170446 = float3( 0,0,0 );
				float Out_Transmission4_g170446 = 0;
				float Out_Thickness4_g170446 = 0;
				float Out_Diffusion4_g170446 = 0;
				{
				Out_Dummy4_g170446 = Data4_g170446.Dummy;
				Out_Albedo4_g170446 = Data4_g170446.Albedo;
				Out_AlbedoRaw4_g170446 = Data4_g170446.AlbedoRaw;
				Out_NormalTS4_g170446 = Data4_g170446.NormalTS;
				Out_NormalWS4_g170446 = Data4_g170446.NormalWS;
				Out_Shader4_g170446 = Data4_g170446.Shader;
				Out_Emissive4_g170446= Data4_g170446.Emissive;
				Out_MultiMask4_g170446 = Data4_g170446.MultiMask;
				Out_Grayscale4_g170446 = Data4_g170446.Grayscale;
				Out_Luminosity4_g170446= Data4_g170446.Luminosity;
				Out_AlphaClip4_g170446 = Data4_g170446.AlphaClip;
				Out_AlphaFade4_g170446 = Data4_g170446.AlphaFade;
				Out_Translucency4_g170446 = Data4_g170446.Translucency;
				Out_Transmission4_g170446 = Data4_g170446.Transmission;
				Out_Thickness4_g170446 = Data4_g170446.Thickness;
				Out_Diffusion4_g170446 = Data4_g170446.Diffusion;
				}
				half3 Visual_Albedo527_g170438 = Out_Albedo4_g170446;
				TEXTURE2D(Texture276_g170439) = _ThirdAlbedoTex;
				float localFilterTexture19_g170455 = ( 0.0 );
				SamplerState SS19_g170455 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170455 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170455 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170455 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170455 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170455 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170455 = SamplerDefault19_g170455;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170455 = SamplerDefault19_g170455;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170455 = SamplerPoint19_g170455;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170455 = SamplerLow19_g170455;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170455 = SamplerMedium19_g170455;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170455 = SamplerHigh19_g170455;
				#endif
				}
				SamplerState Sampler276_g170439 = SS19_g170455;
				half4 Local_LayerCoords790_g170438 = _third_coord_value;
				float4 temp_output_37_0_g170439 = Local_LayerCoords790_g170438;
				half4 Coords276_g170439 = temp_output_37_0_g170439;
				half2 TexCoord276_g170439 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170439 = SampleMain( Texture276_g170439 , Sampler276_g170439 , Coords276_g170439 , TexCoord276_g170439 );
				TEXTURE2D(Texture275_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170439 = SS19_g170455;
				half4 Coords275_g170439 = temp_output_37_0_g170439;
				half2 TexCoord275_g170439 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170439 = SampleExtra( Texture275_g170439 , Sampler275_g170439 , Coords275_g170439 , TexCoord275_g170439 );
				TEXTURE2D(Texture238_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170439 = SS19_g170455;
				half4 Coords238_g170439 = temp_output_37_0_g170439;
				TVEModelData Data15_g170458 = Data16_g170201;
				float Out_Dummy15_g170458 = 0;
				float3 Out_PositionWS15_g170458 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170458 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170458 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170458 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170458 = float3( 0,0,0 );
				float4 Out_VertexData15_g170458 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170458 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170458 = Data15_g170458.Dummy;
				Out_PositionWS15_g170458 = Data15_g170458.PositionWS;
				Out_PositionWO15_g170458 = Data15_g170458.PositionWO;
				Out_PivotWS15_g170458 = Data15_g170458.PivotWS;
				Out_PivotWO15_g170458 = Data15_g170458.PivotWO;
				Out_NormalWS15_g170458 = Data15_g170458.NormalWS;
				Out_ViewDirWS15_g170458 = Data15_g170458.ViewDirWS;
				Out_VertexData15_g170458 = Data15_g170458.VertexData;
				Out_BoundsData15_g170458 = Data15_g170458.BoundsData;
				}
				half3 Model_PositionWO636_g170438 = Out_PositionWO15_g170458;
				float3 temp_output_279_0_g170439 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170439 = temp_output_279_0_g170439;
				half4 localSamplePlanar2D238_g170439 = SamplePlanar2D( Texture238_g170439 , Sampler238_g170439 , Coords238_g170439 , WorldPosition238_g170439 );
				TEXTURE2D(Texture246_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170439 = SS19_g170455;
				half4 Coords246_g170439 = temp_output_37_0_g170439;
				half3 WorldPosition246_g170439 = temp_output_279_0_g170439;
				half3 Model_NormalWS869_g170438 = Out_NormalWS15_g170458;
				float3 temp_output_280_0_g170439 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170439 = temp_output_280_0_g170439;
				half4 localSamplePlanar3D246_g170439 = SamplePlanar3D( Texture246_g170439 , Sampler246_g170439 , Coords246_g170439 , WorldPosition246_g170439 , WorldNormal246_g170439 );
				TEXTURE2D(Texture234_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170439 = SS19_g170455;
				float4 Coords234_g170439 = temp_output_37_0_g170439;
				float3 WorldPosition234_g170439 = temp_output_279_0_g170439;
				float4 localSampleStochastic2D234_g170439 = SampleStochastic2D( Texture234_g170439 , Sampler234_g170439 , Coords234_g170439 , WorldPosition234_g170439 );
				TEXTURE2D(Texture263_g170439) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170439 = SS19_g170455;
				half4 Coords263_g170439 = temp_output_37_0_g170439;
				half3 WorldPosition263_g170439 = temp_output_279_0_g170439;
				half3 WorldNormal263_g170439 = temp_output_280_0_g170439;
				half4 localSampleStochastic3D263_g170439 = SampleStochastic3D( Texture263_g170439 , Sampler263_g170439 , Coords263_g170439 , WorldPosition263_g170439 , WorldNormal263_g170439 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170438 = localSampleMain276_g170439;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170438 = localSampleExtra275_g170439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170438 = localSamplePlanar2D238_g170439;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170438 = localSamplePlanar3D246_g170439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170438 = localSampleStochastic2D234_g170439;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170438 = localSampleStochastic3D263_g170439;
				#else
				float4 staticSwitch693_g170438 = localSampleMain276_g170439;
				#endif
				half4 Local_AlbedoTex777_g170438 = staticSwitch693_g170438;
				float3 lerpResult716_g170438 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170438).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170438 = lerpResult716_g170438;
				TEXTURE2D(Texture276_g170441) = _ThirdShaderTex;
				float localFilterTexture30_g170457 = ( 0.0 );
				SamplerState SS30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170457 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170457 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170457 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170457 = SamplerDefault30_g170457;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170457 = SamplerDefault30_g170457;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170457 = SamplerPoint30_g170457;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170457 = SamplerLow30_g170457;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170457 = SamplerMedium30_g170457;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170457 = SamplerHigh30_g170457;
				#endif
				}
				SamplerState Sampler276_g170441 = SS30_g170457;
				float4 temp_output_37_0_g170441 = Local_LayerCoords790_g170438;
				half4 Coords276_g170441 = temp_output_37_0_g170441;
				half2 TexCoord276_g170441 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170441 = SampleMain( Texture276_g170441 , Sampler276_g170441 , Coords276_g170441 , TexCoord276_g170441 );
				TEXTURE2D(Texture275_g170441) = _ThirdShaderTex;
				SamplerState Sampler275_g170441 = SS30_g170457;
				half4 Coords275_g170441 = temp_output_37_0_g170441;
				half2 TexCoord275_g170441 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170441 = SampleExtra( Texture275_g170441 , Sampler275_g170441 , Coords275_g170441 , TexCoord275_g170441 );
				TEXTURE2D(Texture238_g170441) = _ThirdShaderTex;
				SamplerState Sampler238_g170441 = SS30_g170457;
				half4 Coords238_g170441 = temp_output_37_0_g170441;
				float3 temp_output_279_0_g170441 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170441 = temp_output_279_0_g170441;
				half4 localSamplePlanar2D238_g170441 = SamplePlanar2D( Texture238_g170441 , Sampler238_g170441 , Coords238_g170441 , WorldPosition238_g170441 );
				TEXTURE2D(Texture246_g170441) = _ThirdShaderTex;
				SamplerState Sampler246_g170441 = SS30_g170457;
				half4 Coords246_g170441 = temp_output_37_0_g170441;
				half3 WorldPosition246_g170441 = temp_output_279_0_g170441;
				float3 temp_output_280_0_g170441 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170441 = temp_output_280_0_g170441;
				half4 localSamplePlanar3D246_g170441 = SamplePlanar3D( Texture246_g170441 , Sampler246_g170441 , Coords246_g170441 , WorldPosition246_g170441 , WorldNormal246_g170441 );
				TEXTURE2D(Texture234_g170441) = _ThirdShaderTex;
				SamplerState Sampler234_g170441 = SS30_g170457;
				float4 Coords234_g170441 = temp_output_37_0_g170441;
				float3 WorldPosition234_g170441 = temp_output_279_0_g170441;
				float4 localSampleStochastic2D234_g170441 = SampleStochastic2D( Texture234_g170441 , Sampler234_g170441 , Coords234_g170441 , WorldPosition234_g170441 );
				TEXTURE2D(Texture263_g170441) = _ThirdShaderTex;
				SamplerState Sampler263_g170441 = SS30_g170457;
				half4 Coords263_g170441 = temp_output_37_0_g170441;
				half3 WorldPosition263_g170441 = temp_output_279_0_g170441;
				half3 WorldNormal263_g170441 = temp_output_280_0_g170441;
				half4 localSampleStochastic3D263_g170441 = SampleStochastic3D( Texture263_g170441 , Sampler263_g170441 , Coords263_g170441 , WorldPosition263_g170441 , WorldNormal263_g170441 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170438 = localSampleMain276_g170441;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170438 = localSampleExtra275_g170441;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170438 = localSamplePlanar2D238_g170441;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170438 = localSamplePlanar3D246_g170441;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170438 = localSampleStochastic2D234_g170441;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170438 = localSampleStochastic3D263_g170441;
				#else
				float4 staticSwitch722_g170438 = localSampleMain276_g170441;
				#endif
				half4 Local_ShaderTex775_g170438 = staticSwitch722_g170438;
				float lerpResult739_g170438 = lerp( 1.0 , (Local_ShaderTex775_g170438).y , _ThirdOcclusionValue);
				float4 appendResult749_g170438 = (float4(( (Local_ShaderTex775_g170438).x * _ThirdMetallicValue ) , lerpResult739_g170438 , (Local_ShaderTex775_g170438).z , ( (Local_ShaderTex775_g170438).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170438 = appendResult749_g170438;
				float clampResult17_g170444 = clamp( (Local_Masks750_g170438).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170459 = ( clampResult17_g170444 - temp_output_7_0_g170459 );
				float temp_output_765_0_g170438 = saturate( ( ( temp_output_9_0_g170459 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170438 = temp_output_765_0_g170438;
				float lerpResult705_g170438 = lerp( 1.0 , Local_MultiMask767_g170438 , _ThirdColorMode);
				float4 lerpResult706_g170438 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170438);
				half3 Local_ColorRGB774_g170438 = (lerpResult706_g170438).rgb;
				half3 Local_Albedo768_g170438 = ( Local_AlbedoRGB771_g170438 * Local_ColorRGB774_g170438 );
				float3 lerpResult985_g170438 = lerp( Local_Albedo768_g170438 , ( Visual_Albedo527_g170438 * Local_Albedo768_g170438 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170453) = _ThirdMaskTex;
				SamplerState Sampler276_g170453 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170438 = _third_mask_coord_value;
				float4 temp_output_37_0_g170453 = Local_MaskCoords813_g170438;
				half4 Coords276_g170453 = temp_output_37_0_g170453;
				half2 TexCoord276_g170453 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170453 = SampleMain( Texture276_g170453 , Sampler276_g170453 , Coords276_g170453 , TexCoord276_g170453 );
				TEXTURE2D(Texture275_g170453) = _ThirdMaskTex;
				SamplerState Sampler275_g170453 = sampler_Linear_Repeat;
				half4 Coords275_g170453 = temp_output_37_0_g170453;
				half2 TexCoord275_g170453 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170453 = SampleExtra( Texture275_g170453 , Sampler275_g170453 , Coords275_g170453 , TexCoord275_g170453 );
				TEXTURE2D(Texture238_g170453) = _ThirdMaskTex;
				SamplerState Sampler238_g170453 = sampler_Linear_Repeat;
				half4 Coords238_g170453 = temp_output_37_0_g170453;
				float3 temp_output_279_0_g170453 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170453 = temp_output_279_0_g170453;
				half4 localSamplePlanar2D238_g170453 = SamplePlanar2D( Texture238_g170453 , Sampler238_g170453 , Coords238_g170453 , WorldPosition238_g170453 );
				TEXTURE2D(Texture246_g170453) = _ThirdMaskTex;
				SamplerState Sampler246_g170453 = sampler_Linear_Repeat;
				half4 Coords246_g170453 = temp_output_37_0_g170453;
				half3 WorldPosition246_g170453 = temp_output_279_0_g170453;
				float3 temp_output_280_0_g170453 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170453 = temp_output_280_0_g170453;
				half4 localSamplePlanar3D246_g170453 = SamplePlanar3D( Texture246_g170453 , Sampler246_g170453 , Coords246_g170453 , WorldPosition246_g170453 , WorldNormal246_g170453 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170438 = localSampleMain276_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170438 = localSampleExtra275_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170438 = localSamplePlanar2D238_g170453;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170438 = localSamplePlanar3D246_g170453;
				#else
				float4 staticSwitch817_g170438 = localSampleMain276_g170453;
				#endif
				half4 Local_MaskTex861_g170438 = staticSwitch817_g170438;
				float clampResult17_g170461 = clamp( (Local_MaskTex861_g170438).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170465 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170465 = ( clampResult17_g170461 - temp_output_7_0_g170465 );
				float lerpResult1028_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170465 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170438 = lerpResult1028_g170438;
				half Visual_Luminosity1049_g170438 = Out_Luminosity4_g170446;
				float clampResult17_g170470 = clamp( Visual_Luminosity1049_g170438 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170471 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170471 = ( clampResult17_g170470 - temp_output_7_0_g170471 );
				float lerpResult1040_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170471 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170438 = lerpResult1040_g170438;
				half4 Model_VertexMasks960_g170438 = Out_VertexData15_g170458;
				float4 break961_g170438 = Model_VertexMasks960_g170438;
				float4 break33_g170462 = _third_vert_mode;
				float temp_output_30_0_g170462 = ( break961_g170438.x * break33_g170462.x );
				float temp_output_29_0_g170462 = ( break961_g170438.y * break33_g170462.y );
				float temp_output_31_0_g170462 = ( break961_g170438.z * break33_g170462.z );
				float temp_output_28_0_g170462 = ( temp_output_30_0_g170462 + temp_output_29_0_g170462 + temp_output_31_0_g170462 + ( break961_g170438.w * break33_g170462.w ) );
				float clampResult17_g170460 = clamp( temp_output_28_0_g170462 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170464 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170464 = ( clampResult17_g170460 - temp_output_7_0_g170464 );
				float lerpResult1026_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170464 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170463 = lerpResult1026_g170438;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170463 = ( temp_output_6_0_g170463 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170463 = temp_output_6_0_g170463;
				#endif
				half Blend_VertMask913_g170438 = staticSwitch14_g170463;
				half3 Visual_NormalWS953_g170438 = Out_NormalWS4_g170446;
				float clampResult17_g170466 = clamp( saturate( (Visual_NormalWS953_g170438).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170468 = _ThirdProjRemap.x;
				float temp_output_9_0_g170468 = ( clampResult17_g170466 - temp_output_7_0_g170468 );
				float lerpResult1004_g170438 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170468 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170438 = lerpResult1004_g170438;
				TVEGlobalData Data15_g170448 = Data204_g170214;
				float Out_Dummy15_g170448 = 0;
				float4 Out_CoatParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170448 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170448 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170448 = Data15_g170448.Dummy;
				Out_CoatParams15_g170448 = Data15_g170448.CoatParams;
				Out_PaintParams15_g170448 = Data15_g170448.PaintParams;
				Out_GlowParams15_g170448 = Data15_g170448.GlowParams;
				Out_AtmoParams15_g170448= Data15_g170448.AtmoParams;
				Out_FadeParams15_g170448= Data15_g170448.FadeParams;
				Out_FormParams15_g170448 = Data15_g170448.FormParams;
				Out_FlowParams15_g170448 = Data15_g170448.FlowParams;
				}
				half4 Global_CoatParams972_g170438 = Out_CoatParams15_g170448;
				float temp_output_6_0_g170472 = (Global_CoatParams972_g170438).y;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170472 = ( temp_output_6_0_g170472 + ( _ThirdElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170472 = temp_output_6_0_g170472;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170438 = staticSwitch14_g170472;
				#else
				float staticSwitch1056_g170438 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170438 = lerp( 1.0 , staticSwitch1056_g170438 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170438 = lerpResult1060_g170438;
				float clampResult17_g170467 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170438 * Blend_LumaMask1046_g170438 * Blend_VertMask913_g170438 * Blend_ProjMask912_g170438 * Blend_GlobalMask968_g170438 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170469 = ( clampResult17_g170467 - temp_output_7_0_g170469 );
				half Detail_Mask412_g170438 = ( saturate( ( ( temp_output_9_0_g170469 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170438 = lerp( Visual_Albedo527_g170438 , lerpResult985_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170438 = lerpResult989_g170438;
				#else
				float3 staticSwitch415_g170438 = Visual_Albedo527_g170438;
				#endif
				half3 Final_Albedo601_g170438 = staticSwitch415_g170438;
				float3 In_Albedo3_g170447 = Final_Albedo601_g170438;
				float3 In_AlbedoRaw3_g170447 = Final_Albedo601_g170438;
				half2 Visual_NormalTS529_g170438 = Out_NormalTS4_g170446;
				float2 lerpResult40_g170449 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170438 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170440) = _ThirdNormalTex;
				float localFilterTexture29_g170456 = ( 0.0 );
				SamplerState SS29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170456 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170456 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170456 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170456 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170456 = SamplerDefault29_g170456;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170456 = SamplerDefault29_g170456;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170456 = SamplerPoint29_g170456;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170456 = SamplerLow29_g170456;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170456 = SamplerMedium29_g170456;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170456 = SamplerHigh29_g170456;
				#endif
				}
				SamplerState Sampler276_g170440 = SS29_g170456;
				float4 temp_output_37_0_g170440 = Local_LayerCoords790_g170438;
				half4 Coords276_g170440 = temp_output_37_0_g170440;
				half2 TexCoord276_g170440 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170440 = SampleMain( Texture276_g170440 , Sampler276_g170440 , Coords276_g170440 , TexCoord276_g170440 );
				TEXTURE2D(Texture275_g170440) = _ThirdNormalTex;
				SamplerState Sampler275_g170440 = SS29_g170456;
				half4 Coords275_g170440 = temp_output_37_0_g170440;
				half2 TexCoord275_g170440 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170440 = SampleExtra( Texture275_g170440 , Sampler275_g170440 , Coords275_g170440 , TexCoord275_g170440 );
				TEXTURE2D(Texture238_g170440) = _ThirdNormalTex;
				SamplerState Sampler238_g170440 = SS29_g170456;
				half4 Coords238_g170440 = temp_output_37_0_g170440;
				float3 temp_output_279_0_g170440 = Model_PositionWO636_g170438;
				half3 WorldPosition238_g170440 = temp_output_279_0_g170440;
				half4 localSamplePlanar2D238_g170440 = SamplePlanar2D( Texture238_g170440 , Sampler238_g170440 , Coords238_g170440 , WorldPosition238_g170440 );
				TEXTURE2D(Texture246_g170440) = _ThirdNormalTex;
				SamplerState Sampler246_g170440 = SS29_g170456;
				half4 Coords246_g170440 = temp_output_37_0_g170440;
				half3 WorldPosition246_g170440 = temp_output_279_0_g170440;
				float3 temp_output_280_0_g170440 = Model_NormalWS869_g170438;
				half3 WorldNormal246_g170440 = temp_output_280_0_g170440;
				half4 localSamplePlanar3D246_g170440 = SamplePlanar3D( Texture246_g170440 , Sampler246_g170440 , Coords246_g170440 , WorldPosition246_g170440 , WorldNormal246_g170440 );
				TEXTURE2D(Texture234_g170440) = _ThirdNormalTex;
				SamplerState Sampler234_g170440 = SS29_g170456;
				float4 Coords234_g170440 = temp_output_37_0_g170440;
				float3 WorldPosition234_g170440 = temp_output_279_0_g170440;
				float4 localSampleStochastic2D234_g170440 = SampleStochastic2D( Texture234_g170440 , Sampler234_g170440 , Coords234_g170440 , WorldPosition234_g170440 );
				TEXTURE2D(Texture263_g170440) = _ThirdNormalTex;
				SamplerState Sampler263_g170440 = SS29_g170456;
				half4 Coords263_g170440 = temp_output_37_0_g170440;
				half3 WorldPosition263_g170440 = temp_output_279_0_g170440;
				half3 WorldNormal263_g170440 = temp_output_280_0_g170440;
				half4 localSampleStochastic3D263_g170440 = SampleStochastic3D( Texture263_g170440 , Sampler263_g170440 , Coords263_g170440 , WorldPosition263_g170440 , WorldNormal263_g170440 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170438 = localSampleMain276_g170440;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170438 = localSampleExtra275_g170440;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170438 = localSamplePlanar2D238_g170440;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170438 = localSamplePlanar3D246_g170440;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170438 = localSampleStochastic2D234_g170440;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170438 = localSampleStochastic3D263_g170440;
				#else
				float4 staticSwitch698_g170438 = localSampleMain276_g170440;
				#endif
				half4 Local_NormalTex776_g170438 = staticSwitch698_g170438;
				half4 Normal_Packed45_g170442 = Local_NormalTex776_g170438;
				float2 appendResult58_g170442 = (float2(( (Normal_Packed45_g170442).x * (Normal_Packed45_g170442).w ) , (Normal_Packed45_g170442).y));
				half2 Normal_Default50_g170442 = appendResult58_g170442;
				half2 Normal_ASTC41_g170442 = (Normal_Packed45_g170442).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170442 = Normal_ASTC41_g170442;
				#else
				float2 staticSwitch38_g170442 = Normal_Default50_g170442;
				#endif
				half2 Normal_NO_DTX544_g170442 = (Normal_Packed45_g170442).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170442 = Normal_NO_DTX544_g170442;
				#else
				float2 staticSwitch37_g170442 = staticSwitch38_g170442;
				#endif
				float2 temp_output_724_0_g170438 = ( (staticSwitch37_g170442*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170443 = temp_output_724_0_g170438;
				float2 break71_g170443 = Normal_Planar45_g170443;
				float3 appendResult72_g170443 = (float3(break71_g170443.x , 0.0 , break71_g170443.y));
				float2 temp_output_858_0_g170438 = (mul( ase_worldToTangent, appendResult72_g170443 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170438 = temp_output_858_0_g170438;
				#else
				float2 staticSwitch727_g170438 = temp_output_724_0_g170438;
				#endif
				half2 Local_NormalTS729_g170438 = staticSwitch727_g170438;
				float2 temp_output_36_0_g170449 = ( lerpResult40_g170449 + Local_NormalTS729_g170438 );
				float2 lerpResult405_g170438 = lerp( Visual_NormalTS529_g170438 , temp_output_36_0_g170449 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170438 = lerpResult405_g170438;
				#else
				float2 staticSwitch418_g170438 = Visual_NormalTS529_g170438;
				#endif
				half2 Final_NormalTS612_g170438 = staticSwitch418_g170438;
				float2 In_NormalTS3_g170447 = Final_NormalTS612_g170438;
				float3 appendResult68_g170450 = (float3(Final_NormalTS612_g170438 , 1.0));
				float3 tanNormal74_g170450 = appendResult68_g170450;
				float3 worldNormal74_g170450 = normalize( float3(dot(tanToWorld0,tanNormal74_g170450), dot(tanToWorld1,tanNormal74_g170450), dot(tanToWorld2,tanNormal74_g170450)) );
				half3 Final_NormalWS956_g170438 = worldNormal74_g170450;
				float3 In_NormalWS3_g170447 = Final_NormalWS956_g170438;
				half4 Visual_Shader531_g170438 = Out_Shader4_g170446;
				float4 lerpResult1000_g170438 = lerp( Local_Masks750_g170438 , ( Visual_Shader531_g170438 * Local_Masks750_g170438 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170438 = lerp( Visual_Shader531_g170438 , lerpResult1000_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170438 = lerpResult998_g170438;
				#else
				float4 staticSwitch451_g170438 = Visual_Shader531_g170438;
				#endif
				half4 Final_Masks613_g170438 = staticSwitch451_g170438;
				float4 In_Shader3_g170447 = Final_Masks613_g170438;
				float4 In_Emissive3_g170447 = Out_Emissive4_g170446;
				float3 temp_output_3_0_g170452 = Final_Albedo601_g170438;
				float dotResult20_g170452 = dot( temp_output_3_0_g170452 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170438 = dotResult20_g170452;
				float In_Grayscale3_g170447 = Final_Grayscale615_g170438;
				float clampResult651_g170438 = clamp( saturate( ( Final_Grayscale615_g170438 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170438 = clampResult651_g170438;
				float In_Luminosity3_g170447 = Final_Luminosity652_g170438;
				half Visual_MultiMask547_g170438 = Out_MultiMask4_g170446;
				float lerpResult477_g170438 = lerp( Visual_MultiMask547_g170438 , Local_MultiMask767_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch482_g170438 = lerpResult477_g170438;
				#else
				float staticSwitch482_g170438 = Visual_MultiMask547_g170438;
				#endif
				half Final_MultiMask572_g170438 = staticSwitch482_g170438;
				float In_MultiMask3_g170447 = Final_MultiMask572_g170438;
				half Visual_AlphaClip559_g170438 = Out_AlphaClip4_g170446;
				float temp_output_718_0_g170438 = (Local_AlbedoTex777_g170438).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170438 = ( temp_output_718_0_g170438 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170438 = temp_output_718_0_g170438;
				#endif
				half Local_AlphaClip772_g170438 = staticSwitch924_g170438;
				float lerpResult448_g170438 = lerp( Visual_AlphaClip559_g170438 , Local_AlphaClip772_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch564_g170438 = lerpResult448_g170438;
				#else
				float staticSwitch564_g170438 = Visual_AlphaClip559_g170438;
				#endif
				half Final_AlphaClip602_g170438 = staticSwitch564_g170438;
				float In_AlphaClip3_g170447 = Final_AlphaClip602_g170438;
				half Visual_AlphaFade588_g170438 = Out_AlphaFade4_g170446;
				half Local_AlphaFade773_g170438 = (lerpResult706_g170438).a;
				float lerpResult604_g170438 = lerp( Visual_AlphaFade588_g170438 , Local_AlphaFade773_g170438 , Detail_Mask412_g170438);
				#ifdef TVE_THIRD
				float staticSwitch608_g170438 = lerpResult604_g170438;
				#else
				float staticSwitch608_g170438 = Visual_AlphaFade588_g170438;
				#endif
				half Final_AlphaFade611_g170438 = staticSwitch608_g170438;
				float In_AlphaFade3_g170447 = Final_AlphaFade611_g170438;
				float3 In_Translucency3_g170447 = Out_Translucency4_g170446;
				float In_Transmission3_g170447 = Out_Transmission4_g170446;
				float In_Thickness3_g170447 = Out_Thickness4_g170446;
				float In_Diffusion3_g170447 = Out_Diffusion4_g170446;
				{
				Data3_g170447.Dummy = In_Dummy3_g170447;
				Data3_g170447.Albedo = In_Albedo3_g170447;
				Data3_g170447.AlbedoRaw = In_AlbedoRaw3_g170447;
				Data3_g170447.NormalTS = In_NormalTS3_g170447;
				Data3_g170447.NormalWS = In_NormalWS3_g170447;
				Data3_g170447.Shader = In_Shader3_g170447;
				Data3_g170447.Emissive= In_Emissive3_g170447;
				Data3_g170447.MultiMask = In_MultiMask3_g170447;
				Data3_g170447.Grayscale = In_Grayscale3_g170447;
				Data3_g170447.Luminosity = In_Luminosity3_g170447;
				Data3_g170447.AlphaClip = In_AlphaClip3_g170447;
				Data3_g170447.AlphaFade = In_AlphaFade3_g170447;
				Data3_g170447.Translucency = In_Translucency3_g170447;
				Data3_g170447.Transmission = In_Transmission3_g170447;
				Data3_g170447.Thickness = In_Thickness3_g170447;
				Data3_g170447.Diffusion = In_Diffusion3_g170447;
				}
				TVEVisualData Data4_g170545 = Data3_g170447;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				{
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				}
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170552 = Data16_g170201;
				float Out_Dummy15_g170552 = 0;
				float3 Out_PositionWS15_g170552 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170552 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170552 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170552 = float3( 0,0,0 );
				float4 Out_VertexData15_g170552 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170552 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170552 = Data15_g170552.Dummy;
				Out_PositionWS15_g170552 = Data15_g170552.PositionWS;
				Out_PositionWO15_g170552 = Data15_g170552.PositionWO;
				Out_PivotWS15_g170552 = Data15_g170552.PivotWS;
				Out_PivotWO15_g170552 = Data15_g170552.PivotWO;
				Out_NormalWS15_g170552 = Data15_g170552.NormalWS;
				Out_ViewDirWS15_g170552 = Data15_g170552.ViewDirWS;
				Out_VertexData15_g170552 = Data15_g170552.VertexData;
				Out_BoundsData15_g170552 = Data15_g170552.BoundsData;
				}
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170552;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170550 = _occlusion_vert_mode;
				float temp_output_30_0_g170550 = ( break208_g170544.x * break33_g170550.x );
				float temp_output_29_0_g170550 = ( break208_g170544.y * break33_g170550.y );
				float temp_output_31_0_g170550 = ( break208_g170544.z * break33_g170550.z );
				float temp_output_28_0_g170550 = ( temp_output_30_0_g170550 + temp_output_29_0_g170550 + temp_output_31_0_g170550 + ( break208_g170544.w * break33_g170550.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170550;
				float clampResult17_g170548 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170553 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170553 = ( clampResult17_g170548 - temp_output_7_0_g170553 );
				float temp_output_6_0_g170549 = saturate( ( ( temp_output_9_0_g170553 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170549 = ( temp_output_6_0_g170549 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170549 = temp_output_6_0_g170549;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170549;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				{
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				}
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				{
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				}
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170562 = Data16_g170201;
				float Out_Dummy15_g170562 = 0;
				float3 Out_PositionWS15_g170562 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170562 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170562 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170562 = float3( 0,0,0 );
				float4 Out_VertexData15_g170562 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170562 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170562 = Data15_g170562.Dummy;
				Out_PositionWS15_g170562 = Data15_g170562.PositionWS;
				Out_PositionWO15_g170562 = Data15_g170562.PositionWO;
				Out_PivotWS15_g170562 = Data15_g170562.PivotWS;
				Out_PivotWO15_g170562 = Data15_g170562.PivotWO;
				Out_NormalWS15_g170562 = Data15_g170562.NormalWS;
				Out_ViewDirWS15_g170562 = Data15_g170562.ViewDirWS;
				Out_VertexData15_g170562 = Data15_g170562.VertexData;
				Out_BoundsData15_g170562 = Data15_g170562.BoundsData;
				}
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170562;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170563 = _GradientMeshRemap.x;
				float temp_output_9_0_g170563 = ( clampResult17_g170560 - temp_output_7_0_g170563 );
				float temp_output_6_0_g170561 = saturate( ( ( temp_output_9_0_g170563 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170561 = ( temp_output_6_0_g170561 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170561 = temp_output_6_0_g170561;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170561;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				{
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				}
				TVEVisualData Data4_g170566 = Data3_g170557;
				float Out_Dummy4_g170566 = 0;
				float3 Out_Albedo4_g170566 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170566 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170566 = float2( 0,0 );
				float3 Out_NormalWS4_g170566 = float3( 0,0,0 );
				float4 Out_Shader4_g170566 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170566 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170566 = 0;
				float Out_Grayscale4_g170566 = 0;
				float Out_Luminosity4_g170566 = 0;
				float Out_AlphaClip4_g170566 = 0;
				float Out_AlphaFade4_g170566 = 0;
				float3 Out_Translucency4_g170566 = float3( 0,0,0 );
				float Out_Transmission4_g170566 = 0;
				float Out_Thickness4_g170566 = 0;
				float Out_Diffusion4_g170566 = 0;
				{
				Out_Dummy4_g170566 = Data4_g170566.Dummy;
				Out_Albedo4_g170566 = Data4_g170566.Albedo;
				Out_AlbedoRaw4_g170566 = Data4_g170566.AlbedoRaw;
				Out_NormalTS4_g170566 = Data4_g170566.NormalTS;
				Out_NormalWS4_g170566 = Data4_g170566.NormalWS;
				Out_Shader4_g170566 = Data4_g170566.Shader;
				Out_Emissive4_g170566= Data4_g170566.Emissive;
				Out_MultiMask4_g170566 = Data4_g170566.MultiMask;
				Out_Grayscale4_g170566 = Data4_g170566.Grayscale;
				Out_Luminosity4_g170566= Data4_g170566.Luminosity;
				Out_AlphaClip4_g170566 = Data4_g170566.AlphaClip;
				Out_AlphaFade4_g170566 = Data4_g170566.AlphaFade;
				Out_Translucency4_g170566 = Data4_g170566.Translucency;
				Out_Transmission4_g170566 = Data4_g170566.Transmission;
				Out_Thickness4_g170566 = Data4_g170566.Thickness;
				Out_Diffusion4_g170566 = Data4_g170566.Diffusion;
				}
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170566;
				TVEModelData Data15_g170571 = Data16_g170201;
				float Out_Dummy15_g170571 = 0;
				float3 Out_PositionWS15_g170571 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170571 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170571 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170571 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170571 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170571 = float3( 0,0,0 );
				float4 Out_VertexData15_g170571 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170571 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170571 = Data15_g170571.Dummy;
				Out_PositionWS15_g170571 = Data15_g170571.PositionWS;
				Out_PositionWO15_g170571 = Data15_g170571.PositionWO;
				Out_PivotWS15_g170571 = Data15_g170571.PivotWS;
				Out_PivotWO15_g170571 = Data15_g170571.PivotWO;
				Out_NormalWS15_g170571 = Data15_g170571.NormalWS;
				Out_ViewDirWS15_g170571 = Data15_g170571.ViewDirWS;
				Out_VertexData15_g170571 = Data15_g170571.VertexData;
				Out_BoundsData15_g170571 = Data15_g170571.BoundsData;
				}
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170571;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170571;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170568 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170570 = clamp( tex3DNode60_g170568.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170572 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170572 = ( clampResult17_g170570 - temp_output_7_0_g170572 );
				float temp_output_238_0_g170564 = saturate( ( ( temp_output_9_0_g170572 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170566;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170567 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170567 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170567 = Out_NormalTS4_g170566;
				float3 In_NormalWS3_g170567 = Out_NormalWS4_g170566;
				float4 In_Shader3_g170567 = Out_Shader4_g170566;
				float4 In_Emissive3_g170567 = Out_Emissive4_g170566;
				float3 temp_output_3_0_g170565 = Final_Albedo160_g170564;
				float dotResult20_g170565 = dot( temp_output_3_0_g170565 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170564 = dotResult20_g170565;
				float In_Grayscale3_g170567 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170567 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170567 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170567 = Out_AlphaClip4_g170566;
				float In_AlphaFade3_g170567 = Out_AlphaFade4_g170566;
				float3 In_Translucency3_g170567 = Out_Translucency4_g170566;
				float In_Transmission3_g170567 = Out_Transmission4_g170566;
				float In_Thickness3_g170567 = Out_Thickness4_g170566;
				float In_Diffusion3_g170567 = Out_Diffusion4_g170566;
				{
				Data3_g170567.Dummy = In_Dummy3_g170567;
				Data3_g170567.Albedo = In_Albedo3_g170567;
				Data3_g170567.AlbedoRaw = In_AlbedoRaw3_g170567;
				Data3_g170567.NormalTS = In_NormalTS3_g170567;
				Data3_g170567.NormalWS = In_NormalWS3_g170567;
				Data3_g170567.Shader = In_Shader3_g170567;
				Data3_g170567.Emissive= In_Emissive3_g170567;
				Data3_g170567.MultiMask = In_MultiMask3_g170567;
				Data3_g170567.Grayscale = In_Grayscale3_g170567;
				Data3_g170567.Luminosity = In_Luminosity3_g170567;
				Data3_g170567.AlphaClip = In_AlphaClip3_g170567;
				Data3_g170567.AlphaFade = In_AlphaFade3_g170567;
				Data3_g170567.Translucency = In_Translucency3_g170567;
				Data3_g170567.Transmission = In_Transmission3_g170567;
				Data3_g170567.Thickness = In_Thickness3_g170567;
				Data3_g170567.Diffusion = In_Diffusion3_g170567;
				}
				TVEVisualData Data4_g170579 = Data3_g170567;
				float Out_Dummy4_g170579 = 0;
				float3 Out_Albedo4_g170579 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170579 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170579 = float2( 0,0 );
				float3 Out_NormalWS4_g170579 = float3( 0,0,0 );
				float4 Out_Shader4_g170579 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170579 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170579 = 0;
				float Out_Grayscale4_g170579 = 0;
				float Out_Luminosity4_g170579 = 0;
				float Out_AlphaClip4_g170579 = 0;
				float Out_AlphaFade4_g170579 = 0;
				float3 Out_Translucency4_g170579 = float3( 0,0,0 );
				float Out_Transmission4_g170579 = 0;
				float Out_Thickness4_g170579 = 0;
				float Out_Diffusion4_g170579 = 0;
				{
				Out_Dummy4_g170579 = Data4_g170579.Dummy;
				Out_Albedo4_g170579 = Data4_g170579.Albedo;
				Out_AlbedoRaw4_g170579 = Data4_g170579.AlbedoRaw;
				Out_NormalTS4_g170579 = Data4_g170579.NormalTS;
				Out_NormalWS4_g170579 = Data4_g170579.NormalWS;
				Out_Shader4_g170579 = Data4_g170579.Shader;
				Out_Emissive4_g170579= Data4_g170579.Emissive;
				Out_MultiMask4_g170579 = Data4_g170579.MultiMask;
				Out_Grayscale4_g170579 = Data4_g170579.Grayscale;
				Out_Luminosity4_g170579= Data4_g170579.Luminosity;
				Out_AlphaClip4_g170579 = Data4_g170579.AlphaClip;
				Out_AlphaFade4_g170579 = Data4_g170579.AlphaFade;
				Out_Translucency4_g170579 = Data4_g170579.Translucency;
				Out_Transmission4_g170579 = Data4_g170579.Transmission;
				Out_Thickness4_g170579 = Data4_g170579.Thickness;
				Out_Diffusion4_g170579 = Data4_g170579.Diffusion;
				}
				half3 Visual_Albedo139_g170574 = Out_Albedo4_g170579;
				float temp_output_200_12_g170574 = Out_Grayscale4_g170579;
				half Visual_Grayscale150_g170574 = temp_output_200_12_g170574;
				float3 temp_cast_33 = (Visual_Grayscale150_g170574).xxx;
				TVEGlobalData Data15_g170575 = Data204_g170214;
				float Out_Dummy15_g170575 = 0;
				float4 Out_CoatParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170575 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170575 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170575 = Data15_g170575.Dummy;
				Out_CoatParams15_g170575 = Data15_g170575.CoatParams;
				Out_PaintParams15_g170575 = Data15_g170575.PaintParams;
				Out_GlowParams15_g170575 = Data15_g170575.GlowParams;
				Out_AtmoParams15_g170575= Data15_g170575.AtmoParams;
				Out_FadeParams15_g170575= Data15_g170575.FadeParams;
				Out_FormParams15_g170575 = Data15_g170575.FormParams;
				Out_FlowParams15_g170575 = Data15_g170575.FlowParams;
				}
				half4 Global_PaintParams209_g170574 = Out_PaintParams15_g170575;
				float4 temp_output_6_0_g170596 = Global_PaintParams209_g170574;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170596 = ( temp_output_6_0_g170596 + ( _TintingElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170596 = temp_output_6_0_g170596;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170574 = staticSwitch14_g170596;
				#else
				float4 staticSwitch283_g170574 = TVE_PaintParams;
				#endif
				float lerpResult412_g170574 = lerp( 1.0 , ( saturate( (staticSwitch283_g170574).w ) * TVE_IsEnabled ) , _TintingGlobalValue);
				half Tinting_GlobalValue285_g170574 = lerpResult412_g170574;
				float3 lerpResult368_g170574 = lerp( Visual_Albedo139_g170574 , temp_cast_33 , ( Tinting_GlobalValue285_g170574 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g170574 = (staticSwitch283_g170574).xyz;
				float temp_output_200_11_g170574 = Out_MultiMask4_g170579;
				half Visual_MultiMask181_g170574 = temp_output_200_11_g170574;
				float lerpResult147_g170574 = lerp( 1.0 , Visual_MultiMask181_g170574 , _TintingMultiValue);
				half Tinting_MutiMask121_g170574 = lerpResult147_g170574;
				half Tinting_TexMask385_g170574 = 1.0;
				float temp_output_200_15_g170574 = Out_Luminosity4_g170579;
				half Visual_Luminosity257_g170574 = temp_output_200_15_g170574;
				float clampResult17_g170586 = clamp( Visual_Luminosity257_g170574 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170591 = _TintingLumaRemap.x;
				float temp_output_9_0_g170591 = ( clampResult17_g170586 - temp_output_7_0_g170591 );
				float lerpResult228_g170574 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170591 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170574 = lerpResult228_g170574;
				TVEModelData Data15_g170580 = Data16_g170201;
				float Out_Dummy15_g170580 = 0;
				float3 Out_PositionWS15_g170580 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170580 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170580 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170580 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170580 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170580 = float3( 0,0,0 );
				float4 Out_VertexData15_g170580 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170580 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170580 = Data15_g170580.Dummy;
				Out_PositionWS15_g170580 = Data15_g170580.PositionWS;
				Out_PositionWO15_g170580 = Data15_g170580.PositionWO;
				Out_PivotWS15_g170580 = Data15_g170580.PivotWS;
				Out_PivotWO15_g170580 = Data15_g170580.PivotWO;
				Out_NormalWS15_g170580 = Data15_g170580.NormalWS;
				Out_ViewDirWS15_g170580 = Data15_g170580.ViewDirWS;
				Out_VertexData15_g170580 = Data15_g170580.VertexData;
				Out_BoundsData15_g170580 = Data15_g170580.BoundsData;
				}
				half4 Model_VertexMasks307_g170574 = Out_VertexData15_g170580;
				float4 break311_g170574 = Model_VertexMasks307_g170574;
				float4 break33_g170583 = _tinting_vert_mode;
				float temp_output_30_0_g170583 = ( break311_g170574.x * break33_g170583.x );
				float temp_output_29_0_g170583 = ( break311_g170574.y * break33_g170583.y );
				float temp_output_31_0_g170583 = ( break311_g170574.z * break33_g170583.z );
				float temp_output_28_0_g170583 = ( temp_output_30_0_g170583 + temp_output_29_0_g170583 + temp_output_31_0_g170583 + ( break311_g170574.w * break33_g170583.w ) );
				float clampResult17_g170585 = clamp( temp_output_28_0_g170583 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170592 = _TintingMeshRemap.x;
				float temp_output_9_0_g170592 = ( clampResult17_g170585 - temp_output_7_0_g170592 );
				float lerpResult370_g170574 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170592 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170587 = lerpResult370_g170574;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170587 = ( temp_output_6_0_g170587 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170587 = temp_output_6_0_g170587;
				#endif
				half Tinting_VertMask309_g170574 = staticSwitch14_g170587;
				half Tinting_NoiseMask213_g170574 = 1.0;
				half Custom_Mask345_g170574 = 1.0;
				float temp_output_7_0_g170595 = _TintingBlendRemap.x;
				float temp_output_9_0_g170595 = ( ( _TintingIntensityValue * Tinting_MutiMask121_g170574 * Tinting_TexMask385_g170574 * Tinting_LumaMask153_g170574 * Tinting_VertMask309_g170574 * Tinting_NoiseMask213_g170574 * Tinting_GlobalValue285_g170574 * Custom_Mask345_g170574 ) - temp_output_7_0_g170595 );
				half Tinting_Mask242_g170574 = ( saturate( ( ( temp_output_9_0_g170595 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170574 = lerp( Visual_Albedo139_g170574 , ( lerpResult368_g170574 * 4.594794 * Tinting_GlobalColor290_g170574 * (_TintingColor).rgb ) , Tinting_Mask242_g170574);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170574 = lerpResult90_g170574;
				#else
				float3 staticSwitch286_g170574 = Visual_Albedo139_g170574;
				#endif
				half3 Final_Albedo97_g170574 = staticSwitch286_g170574;
				float3 In_Albedo3_g170578 = Final_Albedo97_g170574;
				float3 In_AlbedoRaw3_g170578 = Out_AlbedoRaw4_g170579;
				float2 In_NormalTS3_g170578 = Out_NormalTS4_g170579;
				float3 In_NormalWS3_g170578 = Out_NormalWS4_g170579;
				float4 In_Shader3_g170578 = Out_Shader4_g170579;
				float4 In_Emissive3_g170578 = Out_Emissive4_g170579;
				float In_Grayscale3_g170578 = temp_output_200_12_g170574;
				float In_Luminosity3_g170578 = temp_output_200_15_g170574;
				float In_MultiMask3_g170578 = temp_output_200_11_g170574;
				float In_AlphaClip3_g170578 = Out_AlphaClip4_g170579;
				float In_AlphaFade3_g170578 = Out_AlphaFade4_g170579;
				float3 In_Translucency3_g170578 = Out_Translucency4_g170579;
				float In_Transmission3_g170578 = Out_Transmission4_g170579;
				float In_Thickness3_g170578 = Out_Thickness4_g170579;
				float In_Diffusion3_g170578 = Out_Diffusion4_g170579;
				{
				Data3_g170578.Dummy = In_Dummy3_g170578;
				Data3_g170578.Albedo = In_Albedo3_g170578;
				Data3_g170578.AlbedoRaw = In_AlbedoRaw3_g170578;
				Data3_g170578.NormalTS = In_NormalTS3_g170578;
				Data3_g170578.NormalWS = In_NormalWS3_g170578;
				Data3_g170578.Shader = In_Shader3_g170578;
				Data3_g170578.Emissive= In_Emissive3_g170578;
				Data3_g170578.MultiMask = In_MultiMask3_g170578;
				Data3_g170578.Grayscale = In_Grayscale3_g170578;
				Data3_g170578.Luminosity = In_Luminosity3_g170578;
				Data3_g170578.AlphaClip = In_AlphaClip3_g170578;
				Data3_g170578.AlphaFade = In_AlphaFade3_g170578;
				Data3_g170578.Translucency = In_Translucency3_g170578;
				Data3_g170578.Transmission = In_Transmission3_g170578;
				Data3_g170578.Thickness = In_Thickness3_g170578;
				Data3_g170578.Diffusion = In_Diffusion3_g170578;
				}
				TVEVisualData Data4_g170600 = Data3_g170578;
				float Out_Dummy4_g170600 = 0;
				float3 Out_Albedo4_g170600 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170600 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170600 = float2( 0,0 );
				float3 Out_NormalWS4_g170600 = float3( 0,0,0 );
				float4 Out_Shader4_g170600 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170600 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170600 = 0;
				float Out_Grayscale4_g170600 = 0;
				float Out_Luminosity4_g170600 = 0;
				float Out_AlphaClip4_g170600 = 0;
				float Out_AlphaFade4_g170600 = 0;
				float3 Out_Translucency4_g170600 = float3( 0,0,0 );
				float Out_Transmission4_g170600 = 0;
				float Out_Thickness4_g170600 = 0;
				float Out_Diffusion4_g170600 = 0;
				{
				Out_Dummy4_g170600 = Data4_g170600.Dummy;
				Out_Albedo4_g170600 = Data4_g170600.Albedo;
				Out_AlbedoRaw4_g170600 = Data4_g170600.AlbedoRaw;
				Out_NormalTS4_g170600 = Data4_g170600.NormalTS;
				Out_NormalWS4_g170600 = Data4_g170600.NormalWS;
				Out_Shader4_g170600 = Data4_g170600.Shader;
				Out_Emissive4_g170600= Data4_g170600.Emissive;
				Out_MultiMask4_g170600 = Data4_g170600.MultiMask;
				Out_Grayscale4_g170600 = Data4_g170600.Grayscale;
				Out_Luminosity4_g170600= Data4_g170600.Luminosity;
				Out_AlphaClip4_g170600 = Data4_g170600.AlphaClip;
				Out_AlphaFade4_g170600 = Data4_g170600.AlphaFade;
				Out_Translucency4_g170600 = Data4_g170600.Translucency;
				Out_Transmission4_g170600 = Data4_g170600.Transmission;
				Out_Thickness4_g170600 = Data4_g170600.Thickness;
				Out_Diffusion4_g170600 = Data4_g170600.Diffusion;
				}
				half3 Visual_Albedo292_g170598 = Out_Albedo4_g170600;
				float temp_output_280_12_g170598 = Out_Grayscale4_g170600;
				half Visual_Grayscale308_g170598 = temp_output_280_12_g170598;
				float3 temp_cast_34 = (Visual_Grayscale308_g170598).xxx;
				TVEGlobalData Data15_g170599 = Data204_g170214;
				float Out_Dummy15_g170599 = 0;
				float4 Out_CoatParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170599 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170599 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170599 = Data15_g170599.Dummy;
				Out_CoatParams15_g170599 = Data15_g170599.CoatParams;
				Out_PaintParams15_g170599 = Data15_g170599.PaintParams;
				Out_GlowParams15_g170599 = Data15_g170599.GlowParams;
				Out_AtmoParams15_g170599= Data15_g170599.AtmoParams;
				Out_FadeParams15_g170599= Data15_g170599.FadeParams;
				Out_FormParams15_g170599 = Data15_g170599.FormParams;
				Out_FlowParams15_g170599 = Data15_g170599.FlowParams;
				}
				half4 Global_AtmoParams314_g170598 = Out_AtmoParams15_g170599;
				float temp_output_6_0_g170619 = (Global_AtmoParams314_g170598).x;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170619 = ( temp_output_6_0_g170619 + ( _DrynessElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170619 = temp_output_6_0_g170619;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170598 = staticSwitch14_g170619;
				#else
				float staticSwitch351_g170598 = TVE_AtmoData.x;
				#endif
				float lerpResult505_g170598 = lerp( 1.0 , ( staticSwitch351_g170598 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalMask352_g170598 = lerpResult505_g170598;
				float3 lerpResult485_g170598 = lerp( Visual_Albedo292_g170598 , temp_cast_34 , ( Dryness_GlobalMask352_g170598 * _DrynessGrayValue ));
				half Dryness_TexMask478_g170598 = 1.0;
				float temp_output_280_11_g170598 = Out_MultiMask4_g170600;
				half Visual_MultiMask310_g170598 = temp_output_280_11_g170598;
				float lerpResult283_g170598 = lerp( 1.0 , Visual_MultiMask310_g170598 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170598 = lerpResult283_g170598;
				float temp_output_280_15_g170598 = Out_Luminosity4_g170600;
				half Visual_Luminosity309_g170598 = temp_output_280_15_g170598;
				float clampResult17_g170610 = clamp( Visual_Luminosity309_g170598 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170615 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170615 = ( clampResult17_g170610 - temp_output_7_0_g170615 );
				float lerpResult295_g170598 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170615 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170598 = lerpResult295_g170598;
				TVEModelData Data15_g170604 = Data16_g170201;
				float Out_Dummy15_g170604 = 0;
				float3 Out_PositionWS15_g170604 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170604 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170604 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170604 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170604 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170604 = float3( 0,0,0 );
				float4 Out_VertexData15_g170604 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170604 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170604 = Data15_g170604.Dummy;
				Out_PositionWS15_g170604 = Data15_g170604.PositionWS;
				Out_PositionWO15_g170604 = Data15_g170604.PositionWO;
				Out_PivotWS15_g170604 = Data15_g170604.PivotWS;
				Out_PivotWO15_g170604 = Data15_g170604.PivotWO;
				Out_NormalWS15_g170604 = Data15_g170604.NormalWS;
				Out_ViewDirWS15_g170604 = Data15_g170604.ViewDirWS;
				Out_VertexData15_g170604 = Data15_g170604.VertexData;
				Out_BoundsData15_g170604 = Data15_g170604.BoundsData;
				}
				half4 Model_VertexMasks386_g170598 = Out_VertexData15_g170604;
				float4 break375_g170598 = Model_VertexMasks386_g170598;
				float4 break33_g170607 = _dryness_vert_mode;
				float temp_output_30_0_g170607 = ( break375_g170598.x * break33_g170607.x );
				float temp_output_29_0_g170607 = ( break375_g170598.y * break33_g170607.y );
				float temp_output_31_0_g170607 = ( break375_g170598.z * break33_g170607.z );
				float temp_output_28_0_g170607 = ( temp_output_30_0_g170607 + temp_output_29_0_g170607 + temp_output_31_0_g170607 + ( break375_g170598.w * break33_g170607.w ) );
				float clampResult17_g170608 = clamp( temp_output_28_0_g170607 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170616 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170616 = ( clampResult17_g170608 - temp_output_7_0_g170616 );
				float lerpResult452_g170598 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170616 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170611 = lerpResult452_g170598;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170611 = ( temp_output_6_0_g170611 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170611 = temp_output_6_0_g170611;
				#endif
				half Dryness_VertMask378_g170598 = staticSwitch14_g170611;
				half Dryness_MaskNoise291_g170598 = 1.0;
				half Custom_Mask411_g170598 = 1.0;
				float temp_output_7_0_g170618 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170618 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170598 * Dryness_MultiMask302_g170598 * Dryness_LumaMask301_g170598 * Dryness_VertMask378_g170598 * Dryness_MaskNoise291_g170598 * Dryness_GlobalMask352_g170598 * Custom_Mask411_g170598 ) - temp_output_7_0_g170618 );
				half Dryness_Mask329_g170598 = saturate( ( ( temp_output_9_0_g170618 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170598 = lerp( Visual_Albedo292_g170598 , ( lerpResult485_g170598 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170598 = lerpResult336_g170598;
				#else
				float3 staticSwitch356_g170598 = Visual_Albedo292_g170598;
				#endif
				half3 Final_Albedo331_g170598 = staticSwitch356_g170598;
				float3 In_Albedo3_g170601 = Final_Albedo331_g170598;
				float3 In_AlbedoRaw3_g170601 = Out_AlbedoRaw4_g170600;
				float2 In_NormalTS3_g170601 = Out_NormalTS4_g170600;
				float3 In_NormalWS3_g170601 = Out_NormalWS4_g170600;
				half4 Visual_Shader415_g170598 = Out_Shader4_g170600;
				float4 break438_g170598 = Visual_Shader415_g170598;
				float4 appendResult439_g170598 = (float4(break438_g170598.x , break438_g170598.y , break438_g170598.z , ( break438_g170598.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170598 = lerp( Visual_Shader415_g170598 , appendResult439_g170598 , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170598 = lerpResult427_g170598;
				#else
				float4 staticSwitch426_g170598 = Visual_Shader415_g170598;
				#endif
				half4 Final_Shader433_g170598 = staticSwitch426_g170598;
				float4 In_Shader3_g170601 = Final_Shader433_g170598;
				float4 In_Emissive3_g170601 = Out_Emissive4_g170600;
				float In_Grayscale3_g170601 = temp_output_280_12_g170598;
				float In_Luminosity3_g170601 = temp_output_280_15_g170598;
				float In_MultiMask3_g170601 = temp_output_280_11_g170598;
				float In_AlphaClip3_g170601 = Out_AlphaClip4_g170600;
				float In_AlphaFade3_g170601 = Out_AlphaFade4_g170600;
				float3 In_Translucency3_g170601 = Out_Translucency4_g170600;
				half Visual_Transmission416_g170598 = Out_Transmission4_g170600;
				float lerpResult421_g170598 = lerp( Visual_Transmission416_g170598 , ( Visual_Transmission416_g170598 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170598);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170598 = lerpResult421_g170598;
				#else
				float staticSwitch418_g170598 = Visual_Transmission416_g170598;
				#endif
				half Final_Transmission425_g170598 = staticSwitch418_g170598;
				float In_Transmission3_g170601 = Final_Transmission425_g170598;
				float In_Thickness3_g170601 = Out_Thickness4_g170600;
				float In_Diffusion3_g170601 = Out_Diffusion4_g170600;
				{
				Data3_g170601.Dummy = In_Dummy3_g170601;
				Data3_g170601.Albedo = In_Albedo3_g170601;
				Data3_g170601.AlbedoRaw = In_AlbedoRaw3_g170601;
				Data3_g170601.NormalTS = In_NormalTS3_g170601;
				Data3_g170601.NormalWS = In_NormalWS3_g170601;
				Data3_g170601.Shader = In_Shader3_g170601;
				Data3_g170601.Emissive= In_Emissive3_g170601;
				Data3_g170601.MultiMask = In_MultiMask3_g170601;
				Data3_g170601.Grayscale = In_Grayscale3_g170601;
				Data3_g170601.Luminosity = In_Luminosity3_g170601;
				Data3_g170601.AlphaClip = In_AlphaClip3_g170601;
				Data3_g170601.AlphaFade = In_AlphaFade3_g170601;
				Data3_g170601.Translucency = In_Translucency3_g170601;
				Data3_g170601.Transmission = In_Transmission3_g170601;
				Data3_g170601.Thickness = In_Thickness3_g170601;
				Data3_g170601.Diffusion = In_Diffusion3_g170601;
				}
				TVEVisualData Data4_g170623 = Data3_g170601;
				float Out_Dummy4_g170623 = 0;
				float3 Out_Albedo4_g170623 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170623 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170623 = float2( 0,0 );
				float3 Out_NormalWS4_g170623 = float3( 0,0,0 );
				float4 Out_Shader4_g170623 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170623 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170623 = 0;
				float Out_Grayscale4_g170623 = 0;
				float Out_Luminosity4_g170623 = 0;
				float Out_AlphaClip4_g170623 = 0;
				float Out_AlphaFade4_g170623 = 0;
				float3 Out_Translucency4_g170623 = float3( 0,0,0 );
				float Out_Transmission4_g170623 = 0;
				float Out_Thickness4_g170623 = 0;
				float Out_Diffusion4_g170623 = 0;
				{
				Out_Dummy4_g170623 = Data4_g170623.Dummy;
				Out_Albedo4_g170623 = Data4_g170623.Albedo;
				Out_AlbedoRaw4_g170623 = Data4_g170623.AlbedoRaw;
				Out_NormalTS4_g170623 = Data4_g170623.NormalTS;
				Out_NormalWS4_g170623 = Data4_g170623.NormalWS;
				Out_Shader4_g170623 = Data4_g170623.Shader;
				Out_Emissive4_g170623= Data4_g170623.Emissive;
				Out_MultiMask4_g170623 = Data4_g170623.MultiMask;
				Out_Grayscale4_g170623 = Data4_g170623.Grayscale;
				Out_Luminosity4_g170623= Data4_g170623.Luminosity;
				Out_AlphaClip4_g170623 = Data4_g170623.AlphaClip;
				Out_AlphaFade4_g170623 = Data4_g170623.AlphaFade;
				Out_Translucency4_g170623 = Data4_g170623.Translucency;
				Out_Transmission4_g170623 = Data4_g170623.Transmission;
				Out_Thickness4_g170623 = Data4_g170623.Thickness;
				Out_Diffusion4_g170623 = Data4_g170623.Diffusion;
				}
				half3 Visual_Albedo127_g170622 = Out_Albedo4_g170623;
				float4 vertexToFrag24_g170573 = packedInput.ase_texcoord11;
				half4 Interp_Data4335 = vertexToFrag24_g170573;
				float clampResult208_g170622 = clamp( (Interp_Data4335).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170622 = ( Visual_Albedo127_g170622 + ( ( Visual_Albedo127_g170622 * Visual_Albedo127_g170622 * 200.0 * _motion_highlight_color ) * clampResult208_g170622 ) );
				#else
				float3 staticSwitch214_g170622 = Visual_Albedo127_g170622;
				#endif
				half3 Final_Albedo160_g170622 = staticSwitch214_g170622;
				float3 In_Albedo3_g170624 = Final_Albedo160_g170622;
				float3 In_AlbedoRaw3_g170624 = Out_AlbedoRaw4_g170623;
				float2 In_NormalTS3_g170624 = Out_NormalTS4_g170623;
				float3 In_NormalWS3_g170624 = Out_NormalWS4_g170623;
				float4 In_Shader3_g170624 = Out_Shader4_g170623;
				float4 In_Emissive3_g170624 = Out_Emissive4_g170623;
				float In_Grayscale3_g170624 = Out_Grayscale4_g170623;
				float In_Luminosity3_g170624 = Out_Luminosity4_g170623;
				float In_MultiMask3_g170624 = Out_MultiMask4_g170623;
				float In_AlphaClip3_g170624 = Out_AlphaClip4_g170623;
				float In_AlphaFade3_g170624 = Out_AlphaFade4_g170623;
				float3 In_Translucency3_g170624 = Out_Translucency4_g170623;
				float In_Transmission3_g170624 = Out_Transmission4_g170623;
				float In_Thickness3_g170624 = Out_Thickness4_g170623;
				float In_Diffusion3_g170624 = Out_Diffusion4_g170623;
				{
				Data3_g170624.Dummy = In_Dummy3_g170624;
				Data3_g170624.Albedo = In_Albedo3_g170624;
				Data3_g170624.AlbedoRaw = In_AlbedoRaw3_g170624;
				Data3_g170624.NormalTS = In_NormalTS3_g170624;
				Data3_g170624.NormalWS = In_NormalWS3_g170624;
				Data3_g170624.Shader = In_Shader3_g170624;
				Data3_g170624.Emissive= In_Emissive3_g170624;
				Data3_g170624.MultiMask = In_MultiMask3_g170624;
				Data3_g170624.Grayscale = In_Grayscale3_g170624;
				Data3_g170624.Luminosity = In_Luminosity3_g170624;
				Data3_g170624.AlphaClip = In_AlphaClip3_g170624;
				Data3_g170624.AlphaFade = In_AlphaFade3_g170624;
				Data3_g170624.Translucency = In_Translucency3_g170624;
				Data3_g170624.Transmission = In_Transmission3_g170624;
				Data3_g170624.Thickness = In_Thickness3_g170624;
				Data3_g170624.Diffusion = In_Diffusion3_g170624;
				}
				TVEVisualData Data4_g170626 = Data3_g170624;
				float Out_Dummy4_g170626 = 0;
				float3 Out_Albedo4_g170626 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170626 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170626 = float2( 0,0 );
				float3 Out_NormalWS4_g170626 = float3( 0,0,0 );
				float4 Out_Shader4_g170626 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170626 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170626 = 0;
				float Out_Grayscale4_g170626 = 0;
				float Out_Luminosity4_g170626 = 0;
				float Out_AlphaClip4_g170626 = 0;
				float Out_AlphaFade4_g170626 = 0;
				float3 Out_Translucency4_g170626 = float3( 0,0,0 );
				float Out_Transmission4_g170626 = 0;
				float Out_Thickness4_g170626 = 0;
				float Out_Diffusion4_g170626 = 0;
				{
				Out_Dummy4_g170626 = Data4_g170626.Dummy;
				Out_Albedo4_g170626 = Data4_g170626.Albedo;
				Out_AlbedoRaw4_g170626 = Data4_g170626.AlbedoRaw;
				Out_NormalTS4_g170626 = Data4_g170626.NormalTS;
				Out_NormalWS4_g170626 = Data4_g170626.NormalWS;
				Out_Shader4_g170626 = Data4_g170626.Shader;
				Out_Emissive4_g170626= Data4_g170626.Emissive;
				Out_MultiMask4_g170626 = Data4_g170626.MultiMask;
				Out_Grayscale4_g170626 = Data4_g170626.Grayscale;
				Out_Luminosity4_g170626= Data4_g170626.Luminosity;
				Out_AlphaClip4_g170626 = Data4_g170626.AlphaClip;
				Out_AlphaFade4_g170626 = Data4_g170626.AlphaFade;
				Out_Translucency4_g170626 = Data4_g170626.Translucency;
				Out_Transmission4_g170626 = Data4_g170626.Transmission;
				Out_Thickness4_g170626 = Data4_g170626.Thickness;
				Out_Diffusion4_g170626 = Data4_g170626.Diffusion;
				}
				half3 Visual_Albedo127_g170625 = Out_Albedo4_g170626;
				float3 temp_output_622_0_g170625 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170629) = _OverlayAlbedoTex;
				float localFilterTexture19_g170641 = ( 0.0 );
				SamplerState SS19_g170641 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170641 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170641 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170641 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170641 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170641 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170641 = SamplerDefault19_g170641;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170641 = SamplerDefault19_g170641;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170641 = SamplerPoint19_g170641;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170641 = SamplerLow19_g170641;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170641 = SamplerMedium19_g170641;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170641 = SamplerHigh19_g170641;
				#endif
				}
				SamplerState Sampler238_g170629 = SS19_g170641;
				float4 temp_output_6_0_g170630 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170630 = ( temp_output_6_0_g170630 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170630 = temp_output_6_0_g170630;
				#endif
				half4 Overlay_Coords639_g170625 = staticSwitch14_g170630;
				float4 temp_output_37_0_g170629 = Overlay_Coords639_g170625;
				half4 Coords238_g170629 = temp_output_37_0_g170629;
				TVEModelData Data15_g170643 = Data16_g170201;
				float Out_Dummy15_g170643 = 0;
				float3 Out_PositionWS15_g170643 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170643 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170643 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170643 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170643 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170643 = float3( 0,0,0 );
				float4 Out_VertexData15_g170643 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170643 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170643 = Data15_g170643.Dummy;
				Out_PositionWS15_g170643 = Data15_g170643.PositionWS;
				Out_PositionWO15_g170643 = Data15_g170643.PositionWO;
				Out_PivotWS15_g170643 = Data15_g170643.PivotWS;
				Out_PivotWO15_g170643 = Data15_g170643.PivotWO;
				Out_NormalWS15_g170643 = Data15_g170643.NormalWS;
				Out_ViewDirWS15_g170643 = Data15_g170643.ViewDirWS;
				Out_VertexData15_g170643 = Data15_g170643.VertexData;
				Out_BoundsData15_g170643 = Data15_g170643.BoundsData;
				}
				half3 Model_PositionWO602_g170625 = Out_PositionWO15_g170643;
				float3 temp_output_279_0_g170629 = Model_PositionWO602_g170625;
				half3 WorldPosition238_g170629 = temp_output_279_0_g170629;
				half4 localSamplePlanar2D238_g170629 = SamplePlanar2D( Texture238_g170629 , Sampler238_g170629 , Coords238_g170629 , WorldPosition238_g170629 );
				TEXTURE2D(Texture246_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170629 = SS19_g170641;
				half4 Coords246_g170629 = temp_output_37_0_g170629;
				half3 WorldPosition246_g170629 = temp_output_279_0_g170629;
				half3 Model_NormalWS712_g170625 = Out_NormalWS15_g170643;
				float3 temp_output_280_0_g170629 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170629 = temp_output_280_0_g170629;
				half4 localSamplePlanar3D246_g170629 = SamplePlanar3D( Texture246_g170629 , Sampler246_g170629 , Coords246_g170629 , WorldPosition246_g170629 , WorldNormal246_g170629 );
				TEXTURE2D(Texture234_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170629 = SS19_g170641;
				float4 Coords234_g170629 = temp_output_37_0_g170629;
				float3 WorldPosition234_g170629 = temp_output_279_0_g170629;
				float4 localSampleStochastic2D234_g170629 = SampleStochastic2D( Texture234_g170629 , Sampler234_g170629 , Coords234_g170629 , WorldPosition234_g170629 );
				TEXTURE2D(Texture263_g170629) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170629 = SS19_g170641;
				half4 Coords263_g170629 = temp_output_37_0_g170629;
				half3 WorldPosition263_g170629 = temp_output_279_0_g170629;
				half3 WorldNormal263_g170629 = temp_output_280_0_g170629;
				half4 localSampleStochastic3D263_g170629 = SampleStochastic3D( Texture263_g170629 , Sampler263_g170629 , Coords263_g170629 , WorldPosition263_g170629 , WorldNormal263_g170629 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170625 = localSamplePlanar2D238_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170625 = localSamplePlanar3D246_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170625 = localSampleStochastic2D234_g170629;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170625 = localSampleStochastic3D263_g170629;
				#else
				float4 staticSwitch676_g170625 = localSamplePlanar2D238_g170629;
				#endif
				half3 Overlay_Albedo526_g170625 = (staticSwitch676_g170625).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170625 = ( temp_output_622_0_g170625 * Overlay_Albedo526_g170625 );
				#else
				float3 staticSwitch578_g170625 = temp_output_622_0_g170625;
				#endif
				float3 temp_output_6_0_g170644 = staticSwitch578_g170625;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170644 = ( temp_output_6_0_g170644 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170644 = temp_output_6_0_g170644;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				TEXTURE2D(Texture246_g170633) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170633 = sampler_Linear_Repeat;
				float4 appendResult863_g170625 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170633 = appendResult863_g170625;
				half4 Coords246_g170633 = temp_output_37_0_g170633;
				float3 temp_output_279_0_g170633 = Model_PositionWO602_g170625;
				half3 WorldPosition246_g170633 = temp_output_279_0_g170633;
				float3 temp_output_280_0_g170633 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170633 = temp_output_280_0_g170633;
				half4 localSamplePlanar3D246_g170633 = SamplePlanar3D( Texture246_g170633 , Sampler246_g170633 , Coords246_g170633 , WorldPosition246_g170633 , WorldNormal246_g170633 );
				half Overlay_GlitterTex854_g170625 = (localSamplePlanar3D246_g170633).x;
				half3 Model_PositionWS879_g170625 = Out_PositionWS15_g170643;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170625 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170625 * 1.0 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170625 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170625 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170625 = staticSwitch868_g170625;
				half Overlay_TexMask908_g170625 = 1.0;
				float3 temp_output_739_21_g170625 = Out_NormalWS4_g170626;
				half3 Visual_NormalWS749_g170625 = temp_output_739_21_g170625;
				float clampResult17_g170650 = clamp( saturate( (Visual_NormalWS749_g170625).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170654 = _OverlayProjRemap.x;
				float temp_output_9_0_g170654 = ( clampResult17_g170650 - temp_output_7_0_g170654 );
				float lerpResult842_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170654 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170625 = lerpResult842_g170625;
				float temp_output_739_15_g170625 = Out_Luminosity4_g170626;
				half Visual_Luminosity654_g170625 = temp_output_739_15_g170625;
				float clampResult17_g170658 = clamp( Visual_Luminosity654_g170625 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170659 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170659 = ( clampResult17_g170658 - temp_output_7_0_g170659 );
				float lerpResult587_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170659 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170625 = lerpResult587_g170625;
				half4 Model_VertexMasks791_g170625 = Out_VertexData15_g170643;
				float4 break792_g170625 = Model_VertexMasks791_g170625;
				float4 break33_g170645 = _overlay_vert_mode;
				float temp_output_30_0_g170645 = ( break792_g170625.x * break33_g170645.x );
				float temp_output_29_0_g170645 = ( break792_g170625.y * break33_g170645.y );
				float temp_output_31_0_g170645 = ( break792_g170625.z * break33_g170645.z );
				float temp_output_28_0_g170645 = ( temp_output_30_0_g170645 + temp_output_29_0_g170645 + temp_output_31_0_g170645 + ( break792_g170625.w * break33_g170645.w ) );
				float clampResult17_g170646 = clamp( temp_output_28_0_g170645 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170655 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170655 = ( clampResult17_g170646 - temp_output_7_0_g170655 );
				float lerpResult881_g170625 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170655 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170651 = lerpResult881_g170625;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170651 = ( temp_output_6_0_g170651 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170651 = temp_output_6_0_g170651;
				#endif
				half Overlay_VertMask801_g170625 = staticSwitch14_g170651;
				half Overlay_MaskNoise427_g170625 = 1.0;
				TVEGlobalData Data15_g170627 = Data204_g170214;
				float Out_Dummy15_g170627 = 0;
				float4 Out_CoatParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170627 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170627 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170627 = Data15_g170627.Dummy;
				Out_CoatParams15_g170627 = Data15_g170627.CoatParams;
				Out_PaintParams15_g170627 = Data15_g170627.PaintParams;
				Out_GlowParams15_g170627 = Data15_g170627.GlowParams;
				Out_AtmoParams15_g170627= Data15_g170627.AtmoParams;
				Out_FadeParams15_g170627= Data15_g170627.FadeParams;
				Out_FormParams15_g170627 = Data15_g170627.FormParams;
				Out_FlowParams15_g170627 = Data15_g170627.FlowParams;
				}
				half4 Global_AtmoParams516_g170625 = Out_AtmoParams15_g170627;
				float temp_output_6_0_g170660 = (Global_AtmoParams516_g170625).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170660 = ( temp_output_6_0_g170660 + ( _OverlayElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170660 = temp_output_6_0_g170660;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170625 = staticSwitch14_g170660;
				#else
				float staticSwitch705_g170625 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170625 = lerp( 1.0 , ( staticSwitch705_g170625 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170625 = lerpResult937_g170625;
				half Custom_Mask646_g170625 = 1.0;
				float temp_output_7_0_g170657 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170657 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170625 * Overlay_MaskProj457_g170625 * Overlay_MaskLuma438_g170625 * Overlay_VertMask801_g170625 * Overlay_MaskNoise427_g170625 * Overlay_MaskGlobal429_g170625 * Custom_Mask646_g170625 ) - temp_output_7_0_g170657 );
				half Overlay_Mask494_g170625 = saturate( ( ( temp_output_9_0_g170657 / ( _OverlayBlendRemap.y - temp_output_7_0_g170657 ) ) + 0.0001 ) );
				float3 lerpResult467_g170625 = lerp( Visual_Albedo127_g170625 , ( staticSwitch14_g170644 + Overlay_GlitterColor865_g170625 ) , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170625 = lerpResult467_g170625;
				#else
				float3 staticSwitch577_g170625 = Visual_Albedo127_g170625;
				#endif
				half3 Final_Albedo493_g170625 = staticSwitch577_g170625;
				float3 In_Albedo3_g170628 = Final_Albedo493_g170625;
				float3 In_AlbedoRaw3_g170628 = Out_AlbedoRaw4_g170626;
				half2 Visual_NormalTS535_g170625 = Out_NormalTS4_g170626;
				TEXTURE2D(Texture238_g170631) = _OverlayNormalTex;
				float localFilterTexture29_g170642 = ( 0.0 );
				SamplerState SS29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170642 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170642 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170642 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170642 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170642 = SamplerDefault29_g170642;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170642 = SamplerDefault29_g170642;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170642 = SamplerPoint29_g170642;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170642 = SamplerLow29_g170642;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170642 = SamplerMedium29_g170642;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170642 = SamplerHigh29_g170642;
				#endif
				}
				SamplerState Sampler238_g170631 = SS29_g170642;
				float4 temp_output_37_0_g170631 = Overlay_Coords639_g170625;
				half4 Coords238_g170631 = temp_output_37_0_g170631;
				float3 temp_output_279_0_g170631 = Model_PositionWO602_g170625;
				half3 WorldPosition238_g170631 = temp_output_279_0_g170631;
				half4 localSamplePlanar2D238_g170631 = SamplePlanar2D( Texture238_g170631 , Sampler238_g170631 , Coords238_g170631 , WorldPosition238_g170631 );
				TEXTURE2D(Texture246_g170631) = _OverlayNormalTex;
				SamplerState Sampler246_g170631 = SS29_g170642;
				half4 Coords246_g170631 = temp_output_37_0_g170631;
				half3 WorldPosition246_g170631 = temp_output_279_0_g170631;
				float3 temp_output_280_0_g170631 = Model_NormalWS712_g170625;
				half3 WorldNormal246_g170631 = temp_output_280_0_g170631;
				half4 localSamplePlanar3D246_g170631 = SamplePlanar3D( Texture246_g170631 , Sampler246_g170631 , Coords246_g170631 , WorldPosition246_g170631 , WorldNormal246_g170631 );
				TEXTURE2D(Texture234_g170631) = _OverlayNormalTex;
				SamplerState Sampler234_g170631 = SS29_g170642;
				float4 Coords234_g170631 = temp_output_37_0_g170631;
				float3 WorldPosition234_g170631 = temp_output_279_0_g170631;
				float4 localSampleStochastic2D234_g170631 = SampleStochastic2D( Texture234_g170631 , Sampler234_g170631 , Coords234_g170631 , WorldPosition234_g170631 );
				TEXTURE2D(Texture263_g170631) = _OverlayNormalTex;
				SamplerState Sampler263_g170631 = SS29_g170642;
				half4 Coords263_g170631 = temp_output_37_0_g170631;
				half3 WorldPosition263_g170631 = temp_output_279_0_g170631;
				half3 WorldNormal263_g170631 = temp_output_280_0_g170631;
				half4 localSampleStochastic3D263_g170631 = SampleStochastic3D( Texture263_g170631 , Sampler263_g170631 , Coords263_g170631 , WorldPosition263_g170631 , WorldNormal263_g170631 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170625 = localSamplePlanar2D238_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170625 = localSamplePlanar3D246_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170625 = localSampleStochastic2D234_g170631;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170625 = localSampleStochastic3D263_g170631;
				#else
				float4 staticSwitch686_g170625 = localSamplePlanar2D238_g170631;
				#endif
				half4 Normal_Packed45_g170635 = staticSwitch686_g170625;
				float2 appendResult58_g170635 = (float2(( (Normal_Packed45_g170635).x * (Normal_Packed45_g170635).w ) , (Normal_Packed45_g170635).y));
				half2 Normal_Default50_g170635 = appendResult58_g170635;
				half2 Normal_ASTC41_g170635 = (Normal_Packed45_g170635).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170635 = Normal_ASTC41_g170635;
				#else
				float2 staticSwitch38_g170635 = Normal_Default50_g170635;
				#endif
				half2 Normal_NO_DTX544_g170635 = (Normal_Packed45_g170635).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170635 = Normal_NO_DTX544_g170635;
				#else
				float2 staticSwitch37_g170635 = staticSwitch38_g170635;
				#endif
				half2 Normal_Planar45_g170634 = (staticSwitch37_g170635*2.0 + -1.0);
				float2 break71_g170634 = Normal_Planar45_g170634;
				float3 appendResult72_g170634 = (float3(break71_g170634.x , 0.0 , break71_g170634.y));
				half2 Overlay_Normal528_g170625 = (mul( ase_worldToTangent, appendResult72_g170634 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170625 = Overlay_Normal528_g170625;
				#else
				float2 staticSwitch579_g170625 = Visual_NormalTS535_g170625;
				#endif
				float2 lerpResult551_g170625 = lerp( Visual_NormalTS535_g170625 , ( staticSwitch579_g170625 * _OverlayNormalValue ) , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170625 = lerpResult551_g170625;
				#else
				float2 staticSwitch583_g170625 = Visual_NormalTS535_g170625;
				#endif
				half2 Final_NormalTS499_g170625 = staticSwitch583_g170625;
				float2 In_NormalTS3_g170628 = Final_NormalTS499_g170625;
				float3 In_NormalWS3_g170628 = temp_output_739_21_g170625;
				half4 Visual_Masks536_g170625 = Out_Shader4_g170626;
				float4 appendResult585_g170625 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170625 = lerp( Visual_Masks536_g170625 , appendResult585_g170625 , Overlay_Mask494_g170625);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170625 = lerpResult584_g170625;
				#else
				float4 staticSwitch586_g170625 = Visual_Masks536_g170625;
				#endif
				half4 Final_Masks482_g170625 = staticSwitch586_g170625;
				float4 In_Shader3_g170628 = Final_Masks482_g170625;
				float4 In_Emissive3_g170628 = Out_Emissive4_g170626;
				float temp_output_739_12_g170625 = Out_Grayscale4_g170626;
				float In_Grayscale3_g170628 = temp_output_739_12_g170625;
				float In_Luminosity3_g170628 = temp_output_739_15_g170625;
				float In_MultiMask3_g170628 = Out_MultiMask4_g170626;
				float In_AlphaClip3_g170628 = Out_AlphaClip4_g170626;
				float In_AlphaFade3_g170628 = Out_AlphaFade4_g170626;
				float3 In_Translucency3_g170628 = Out_Translucency4_g170626;
				half Visual_Transmission699_g170625 = Out_Transmission4_g170626;
				float lerpResult746_g170625 = lerp( Visual_Transmission699_g170625 , ( Visual_Transmission699_g170625 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170625 * Overlay_MaskNoise427_g170625 * Overlay_MaskGlobal429_g170625 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170625 = lerpResult746_g170625;
				#else
				float staticSwitch703_g170625 = Visual_Transmission699_g170625;
				#endif
				half Final_Transmission702_g170625 = staticSwitch703_g170625;
				float In_Transmission3_g170628 = Final_Transmission702_g170625;
				float In_Thickness3_g170628 = Out_Thickness4_g170626;
				float In_Diffusion3_g170628 = Out_Diffusion4_g170626;
				{
				Data3_g170628.Dummy = In_Dummy3_g170628;
				Data3_g170628.Albedo = In_Albedo3_g170628;
				Data3_g170628.AlbedoRaw = In_AlbedoRaw3_g170628;
				Data3_g170628.NormalTS = In_NormalTS3_g170628;
				Data3_g170628.NormalWS = In_NormalWS3_g170628;
				Data3_g170628.Shader = In_Shader3_g170628;
				Data3_g170628.Emissive= In_Emissive3_g170628;
				Data3_g170628.MultiMask = In_MultiMask3_g170628;
				Data3_g170628.Grayscale = In_Grayscale3_g170628;
				Data3_g170628.Luminosity = In_Luminosity3_g170628;
				Data3_g170628.AlphaClip = In_AlphaClip3_g170628;
				Data3_g170628.AlphaFade = In_AlphaFade3_g170628;
				Data3_g170628.Translucency = In_Translucency3_g170628;
				Data3_g170628.Transmission = In_Transmission3_g170628;
				Data3_g170628.Thickness = In_Thickness3_g170628;
				Data3_g170628.Diffusion = In_Diffusion3_g170628;
				}
				TVEVisualData Data4_g170663 = Data3_g170628;
				float Out_Dummy4_g170663 = 0;
				float3 Out_Albedo4_g170663 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170663 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170663 = float2( 0,0 );
				float3 Out_NormalWS4_g170663 = float3( 0,0,0 );
				float4 Out_Shader4_g170663 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170663 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170663 = 0;
				float Out_Grayscale4_g170663 = 0;
				float Out_Luminosity4_g170663 = 0;
				float Out_AlphaClip4_g170663 = 0;
				float Out_AlphaFade4_g170663 = 0;
				float3 Out_Translucency4_g170663 = float3( 0,0,0 );
				float Out_Transmission4_g170663 = 0;
				float Out_Thickness4_g170663 = 0;
				float Out_Diffusion4_g170663 = 0;
				{
				Out_Dummy4_g170663 = Data4_g170663.Dummy;
				Out_Albedo4_g170663 = Data4_g170663.Albedo;
				Out_AlbedoRaw4_g170663 = Data4_g170663.AlbedoRaw;
				Out_NormalTS4_g170663 = Data4_g170663.NormalTS;
				Out_NormalWS4_g170663 = Data4_g170663.NormalWS;
				Out_Shader4_g170663 = Data4_g170663.Shader;
				Out_Emissive4_g170663= Data4_g170663.Emissive;
				Out_MultiMask4_g170663 = Data4_g170663.MultiMask;
				Out_Grayscale4_g170663 = Data4_g170663.Grayscale;
				Out_Luminosity4_g170663= Data4_g170663.Luminosity;
				Out_AlphaClip4_g170663 = Data4_g170663.AlphaClip;
				Out_AlphaFade4_g170663 = Data4_g170663.AlphaFade;
				Out_Translucency4_g170663 = Data4_g170663.Translucency;
				Out_Transmission4_g170663 = Data4_g170663.Transmission;
				Out_Thickness4_g170663 = Data4_g170663.Thickness;
				Out_Diffusion4_g170663 = Data4_g170663.Diffusion;
				}
				half3 Visual_Albedo127_g170662 = Out_Albedo4_g170663;
				TVEGlobalData Data15_g170668 = Data204_g170214;
				float Out_Dummy15_g170668 = 0;
				float4 Out_CoatParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170668 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170668 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170668 = Data15_g170668.Dummy;
				Out_CoatParams15_g170668 = Data15_g170668.CoatParams;
				Out_PaintParams15_g170668 = Data15_g170668.PaintParams;
				Out_GlowParams15_g170668 = Data15_g170668.GlowParams;
				Out_AtmoParams15_g170668= Data15_g170668.AtmoParams;
				Out_FadeParams15_g170668= Data15_g170668.FadeParams;
				Out_FormParams15_g170668 = Data15_g170668.FormParams;
				Out_FlowParams15_g170668 = Data15_g170668.FlowParams;
				}
				half4 Global_AtmoParams516_g170662 = Out_AtmoParams15_g170668;
				float4 temp_output_6_0_g170689 = Global_AtmoParams516_g170662;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170689 = ( temp_output_6_0_g170689 + ( _WetnessElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170689 = temp_output_6_0_g170689;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170662 = staticSwitch14_g170689;
				#else
				float4 staticSwitch663_g170662 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170662 = lerp( float2( 1,1 ) , (( staticSwitch663_g170662 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170662 = lerpResult1121_g170662;
				half Global_Wetness429_g170662 = break1123_g170662.x;
				half Wetness_Value1042_g170662 = ( _WetnessIntensityValue * Global_Wetness429_g170662 );
				TVEModelData Data15_g170674 = Data16_g170201;
				float Out_Dummy15_g170674 = 0;
				float3 Out_PositionWS15_g170674 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170674 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170674 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170674 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170674 = float3( 0,0,0 );
				float4 Out_VertexData15_g170674 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_PositionWS15_g170674 = Data15_g170674.PositionWS;
				Out_PositionWO15_g170674 = Data15_g170674.PositionWO;
				Out_PivotWS15_g170674 = Data15_g170674.PivotWS;
				Out_PivotWO15_g170674 = Data15_g170674.PivotWO;
				Out_NormalWS15_g170674 = Data15_g170674.NormalWS;
				Out_ViewDirWS15_g170674 = Data15_g170674.ViewDirWS;
				Out_VertexData15_g170674 = Data15_g170674.VertexData;
				Out_BoundsData15_g170674 = Data15_g170674.BoundsData;
				}
				half4 Model_VertexData1030_g170662 = Out_VertexData15_g170674;
				float4 break1019_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170677 = _wetness_vert_mode;
				float temp_output_30_0_g170677 = ( break1019_g170662.x * break33_g170677.x );
				float temp_output_29_0_g170677 = ( break1019_g170662.y * break33_g170677.y );
				float temp_output_31_0_g170677 = ( break1019_g170662.z * break33_g170677.z );
				float temp_output_28_0_g170677 = ( temp_output_30_0_g170677 + temp_output_29_0_g170677 + temp_output_31_0_g170677 + ( break1019_g170662.w * break33_g170677.w ) );
				float clampResult17_g170676 = clamp( temp_output_28_0_g170677 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170685 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170685 = ( clampResult17_g170676 - temp_output_7_0_g170685 );
				float lerpResult1026_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170685 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170678 = lerpResult1026_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170678 = ( temp_output_6_0_g170678 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170678 = temp_output_6_0_g170678;
				#endif
				float temp_output_1025_0_g170662 = staticSwitch14_g170678;
				half Wetness_VertMask1024_g170662 = temp_output_1025_0_g170662;
				float temp_output_1043_0_g170662 = ( Wetness_Value1042_g170662 * Wetness_VertMask1024_g170662 );
				half Wetness_Mask866_g170662 = temp_output_1043_0_g170662;
				float4 break1083_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170680 = _wetness_water_vert_mode;
				float temp_output_30_0_g170680 = ( break1083_g170662.x * break33_g170680.x );
				float temp_output_29_0_g170680 = ( break1083_g170662.y * break33_g170680.y );
				float temp_output_31_0_g170680 = ( break1083_g170662.z * break33_g170680.z );
				float temp_output_28_0_g170680 = ( temp_output_30_0_g170680 + temp_output_29_0_g170680 + temp_output_31_0_g170680 + ( break1083_g170662.w * break33_g170680.w ) );
				float clampResult17_g170679 = clamp( temp_output_28_0_g170680 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170686 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170686 = ( clampResult17_g170679 - temp_output_7_0_g170686 );
				float lerpResult1089_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170686 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170681 = lerpResult1089_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170681 = ( temp_output_6_0_g170681 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170681 = temp_output_6_0_g170681;
				#endif
				float temp_output_1091_0_g170662 = staticSwitch14_g170681;
				half Water_VertMask1094_g170662 = temp_output_1091_0_g170662;
				half4 Visual_Masks536_g170662 = Out_Shader4_g170663;
				float lerpResult1013_g170662 = lerp( 1.0 , (Visual_Masks536_g170662).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170662 = lerpResult1013_g170662;
				float clampResult17_g170675 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170662 * Water_VertMask1094_g170662 ) - Water_HeightMask782_g170662 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170688 = ( clampResult17_g170675 - temp_output_7_0_g170688 );
				half3 Model_NormalWS798_g170662 = Out_NormalWS15_g170674;
				float temp_output_786_0_g170662 = saturate( (Model_NormalWS798_g170662).y );
				half Wetness_ProjMask790_g170662 = temp_output_786_0_g170662;
				half Water_Mask760_g170662 = ( saturate( ( ( temp_output_9_0_g170688 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170662 );
				float3 lerpResult918_g170662 = lerp( Visual_Albedo127_g170662 , ( Visual_Albedo127_g170662 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170662);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170662 = lerpResult918_g170662;
				#else
				float3 staticSwitch946_g170662 = Visual_Albedo127_g170662;
				#endif
				float3 lerpResult768_g170662 = lerp( staticSwitch946_g170662 , ( staticSwitch946_g170662 * staticSwitch946_g170662 ) , _WetnessContrastValue);
				float3 lerpResult651_g170662 = lerp( Visual_Albedo127_g170662 , lerpResult768_g170662 , Wetness_Mask866_g170662);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170662 = lerpResult651_g170662;
				#else
				float3 staticSwitch577_g170662 = Visual_Albedo127_g170662;
				#endif
				half3 Final_Albedo493_g170662 = staticSwitch577_g170662;
				float3 In_Albedo3_g170664 = Final_Albedo493_g170662;
				float3 In_AlbedoRaw3_g170664 = Out_AlbedoRaw4_g170663;
				half2 Visual_Normal535_g170662 = Out_NormalTS4_g170663;
				float lerpResult877_g170662 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170662 * Water_Mask760_g170662 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170662 = ( Visual_Normal535_g170662 * lerpResult877_g170662 );
				#else
				float2 staticSwitch957_g170662 = Visual_Normal535_g170662;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				TEXTURE2D(Texture238_g170672) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170672 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170662 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170672 = appendResult924_g170662;
				half4 Coords238_g170672 = temp_output_37_0_g170672;
				half3 Model_PositionWO602_g170662 = Out_PositionWO15_g170674;
				float3 temp_output_279_0_g170672 = Model_PositionWO602_g170662;
				half3 WorldPosition238_g170672 = temp_output_279_0_g170672;
				half4 localSamplePlanar2D238_g170672 = SamplePlanar2D( Texture238_g170672 , Sampler238_g170672 , Coords238_g170672 , WorldPosition238_g170672 );
				float4 temp_output_1010_0_g170662 = localSamplePlanar2D238_g170672;
				half2 Rain_DropsNormal919_g170662 = (temp_output_1010_0_g170662).zw;
				float2 temp_output_903_0_g170662 = (Rain_DropsNormal919_g170662*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170662 = (temp_output_1010_0_g170662).xy;
				float2 lerpResult904_g170662 = lerp( temp_output_903_0_g170662 , (Rain_RingsNormal713_g170662*2.0 + -1.0) , ( Water_Mask760_g170662 * Water_Mask760_g170662 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170662 = lerpResult904_g170662;
				#else
				float2 staticSwitch960_g170662 = temp_output_903_0_g170662;
				#endif
				half2 Rain_Drops1002_g170662 = ( staticSwitch960_g170662 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170662 = Out_PositionWS15_g170674;
				half Global_Rain955_g170662 = break1123_g170662.y;
				half Rain_Value1067_g170662 = Global_Rain955_g170662;
				float4 break1097_g170662 = Model_VertexData1030_g170662;
				float4 break33_g170683 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170683 = ( break1097_g170662.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1097_g170662.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1097_g170662.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1097_g170662.w * break33_g170683.w ) );
				float clampResult17_g170682 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170687 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170687 = ( clampResult17_g170682 - temp_output_7_0_g170687 );
				float lerpResult1100_g170662 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170687 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170684 = lerpResult1100_g170662;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				float temp_output_1101_0_g170662 = staticSwitch14_g170684;
				half Rain_VertMask1108_g170662 = temp_output_1101_0_g170662;
				half Rain_Mask999_g170662 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170662 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170662 * Rain_VertMask1108_g170662 );
				half2 Normal_Planar45_g170671 = ( Rain_Drops1002_g170662 * Rain_Mask999_g170662 * Wetness_ProjMask790_g170662 );
				float2 break71_g170671 = Normal_Planar45_g170671;
				float3 appendResult72_g170671 = (float3(break71_g170671.x , 0.0 , break71_g170671.y));
				half2 Wetness_Normal526_g170662 = (mul( ase_worldToTangent, appendResult72_g170671 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170662 = Wetness_Normal526_g170662;
				#else
				float2 staticSwitch583_g170662 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170662 = ( staticSwitch957_g170662 + staticSwitch583_g170662 );
				#else
				float2 staticSwitch774_g170662 = Visual_Normal535_g170662;
				#endif
				half2 Final_Normal499_g170662 = staticSwitch774_g170662;
				float2 In_NormalTS3_g170664 = Final_Normal499_g170662;
				float3 In_NormalWS3_g170664 = Out_NormalWS4_g170663;
				float4 break658_g170662 = Visual_Masks536_g170662;
				float temp_output_935_0_g170662 = ( Wetness_Mask866_g170662 * _WetnessSmoothnessValue );
				float lerpResult941_g170662 = lerp( temp_output_935_0_g170662 , 2.0 , Water_Mask760_g170662);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170662 = lerpResult941_g170662;
				#else
				float staticSwitch959_g170662 = temp_output_935_0_g170662;
				#endif
				float4 appendResult661_g170662 = (float4(break658_g170662.x , break658_g170662.y , break658_g170662.z , saturate( ( break658_g170662.w + staticSwitch959_g170662 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170662 = appendResult661_g170662;
				#else
				float4 staticSwitch586_g170662 = Visual_Masks536_g170662;
				#endif
				half4 Final_Masks482_g170662 = staticSwitch586_g170662;
				float4 In_Shader3_g170664 = Final_Masks482_g170662;
				float4 In_Emissive3_g170664 = Out_Emissive4_g170663;
				float In_Grayscale3_g170664 = Out_Grayscale4_g170663;
				float In_Luminosity3_g170664 = Out_Luminosity4_g170663;
				float In_MultiMask3_g170664 = Out_MultiMask4_g170663;
				float In_AlphaClip3_g170664 = Out_AlphaClip4_g170663;
				float In_AlphaFade3_g170664 = Out_AlphaFade4_g170663;
				float3 In_Translucency3_g170664 = Out_Translucency4_g170663;
				float In_Transmission3_g170664 = Out_Transmission4_g170663;
				float In_Thickness3_g170664 = Out_Thickness4_g170663;
				float In_Diffusion3_g170664 = Out_Diffusion4_g170663;
				{
				Data3_g170664.Dummy = In_Dummy3_g170664;
				Data3_g170664.Albedo = In_Albedo3_g170664;
				Data3_g170664.AlbedoRaw = In_AlbedoRaw3_g170664;
				Data3_g170664.NormalTS = In_NormalTS3_g170664;
				Data3_g170664.NormalWS = In_NormalWS3_g170664;
				Data3_g170664.Shader = In_Shader3_g170664;
				Data3_g170664.Emissive= In_Emissive3_g170664;
				Data3_g170664.MultiMask = In_MultiMask3_g170664;
				Data3_g170664.Grayscale = In_Grayscale3_g170664;
				Data3_g170664.Luminosity = In_Luminosity3_g170664;
				Data3_g170664.AlphaClip = In_AlphaClip3_g170664;
				Data3_g170664.AlphaFade = In_AlphaFade3_g170664;
				Data3_g170664.Translucency = In_Translucency3_g170664;
				Data3_g170664.Transmission = In_Transmission3_g170664;
				Data3_g170664.Thickness = In_Thickness3_g170664;
				Data3_g170664.Diffusion = In_Diffusion3_g170664;
				}
				TVEVisualData Data4_g170694 = Data3_g170664;
				float Out_Dummy4_g170694 = 0;
				float3 Out_Albedo4_g170694 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170694 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170694 = float2( 0,0 );
				float3 Out_NormalWS4_g170694 = float3( 0,0,0 );
				float4 Out_Shader4_g170694 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170694 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170694 = 0;
				float Out_Grayscale4_g170694 = 0;
				float Out_Luminosity4_g170694 = 0;
				float Out_AlphaClip4_g170694 = 0;
				float Out_AlphaFade4_g170694 = 0;
				float3 Out_Translucency4_g170694 = float3( 0,0,0 );
				float Out_Transmission4_g170694 = 0;
				float Out_Thickness4_g170694 = 0;
				float Out_Diffusion4_g170694 = 0;
				{
				Out_Dummy4_g170694 = Data4_g170694.Dummy;
				Out_Albedo4_g170694 = Data4_g170694.Albedo;
				Out_AlbedoRaw4_g170694 = Data4_g170694.AlbedoRaw;
				Out_NormalTS4_g170694 = Data4_g170694.NormalTS;
				Out_NormalWS4_g170694 = Data4_g170694.NormalWS;
				Out_Shader4_g170694 = Data4_g170694.Shader;
				Out_Emissive4_g170694= Data4_g170694.Emissive;
				Out_MultiMask4_g170694 = Data4_g170694.MultiMask;
				Out_Grayscale4_g170694 = Data4_g170694.Grayscale;
				Out_Luminosity4_g170694= Data4_g170694.Luminosity;
				Out_AlphaClip4_g170694 = Data4_g170694.AlphaClip;
				Out_AlphaFade4_g170694 = Data4_g170694.AlphaFade;
				Out_Translucency4_g170694 = Data4_g170694.Translucency;
				Out_Transmission4_g170694 = Data4_g170694.Transmission;
				Out_Thickness4_g170694 = Data4_g170694.Thickness;
				Out_Diffusion4_g170694 = Data4_g170694.Diffusion;
				}
				float3 In_Albedo3_g170692 = Out_Albedo4_g170694;
				float3 In_AlbedoRaw3_g170692 = Out_AlbedoRaw4_g170694;
				float2 In_NormalTS3_g170692 = Out_NormalTS4_g170694;
				float3 In_NormalWS3_g170692 = Out_NormalWS4_g170694;
				float4 In_Shader3_g170692 = Out_Shader4_g170694;
				float4 In_Emissive3_g170692 = Out_Emissive4_g170694;
				float In_Grayscale3_g170692 = Out_Grayscale4_g170694;
				float In_Luminosity3_g170692 = Out_Luminosity4_g170694;
				float temp_output_836_11_g170691 = Out_MultiMask4_g170694;
				float In_MultiMask3_g170692 = temp_output_836_11_g170691;
				half Visual_AlphaClip667_g170691 = Out_AlphaClip4_g170694;
				half Input_True57_g170701 = Visual_AlphaClip667_g170691;
				half True36_g170701 = Input_True57_g170701;
				TVEGlobalData Data15_g170693 = Data204_g170214;
				float Out_Dummy15_g170693 = 0;
				float4 Out_CoatParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170693 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170693 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170693 = Data15_g170693.Dummy;
				Out_CoatParams15_g170693 = Data15_g170693.CoatParams;
				Out_PaintParams15_g170693 = Data15_g170693.PaintParams;
				Out_GlowParams15_g170693 = Data15_g170693.GlowParams;
				Out_AtmoParams15_g170693= Data15_g170693.AtmoParams;
				Out_FadeParams15_g170693= Data15_g170693.FadeParams;
				Out_FormParams15_g170693 = Data15_g170693.FormParams;
				Out_FlowParams15_g170693 = Data15_g170693.FlowParams;
				}
				half4 Global_FadeParams516_g170691 = Out_FadeParams15_g170693;
				float temp_output_6_0_g170704 = saturate( (Global_FadeParams516_g170691).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170704 = ( temp_output_6_0_g170704 + ( _CutoutElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170704 = temp_output_6_0_g170704;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170691 = staticSwitch14_g170704;
				#else
				float staticSwitch663_g170691 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170691 = lerp( 1.0 , ( staticSwitch663_g170691 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170691 = lerpResult843_g170691;
				float lerpResult811_g170691 = lerp( 1.0 , Visual_AlphaClip667_g170691 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170691 = lerpResult811_g170691;
				TVEModelData Data15_g170695 = Data16_g170201;
				float Out_Dummy15_g170695 = 0;
				float3 Out_PositionWS15_g170695 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170695 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170695 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170695 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170695 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170695 = float3( 0,0,0 );
				float4 Out_VertexData15_g170695 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170695 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170695 = Data15_g170695.Dummy;
				Out_PositionWS15_g170695 = Data15_g170695.PositionWS;
				Out_PositionWO15_g170695 = Data15_g170695.PositionWO;
				Out_PivotWS15_g170695 = Data15_g170695.PivotWS;
				Out_PivotWO15_g170695 = Data15_g170695.PivotWO;
				Out_NormalWS15_g170695 = Data15_g170695.NormalWS;
				Out_ViewDirWS15_g170695 = Data15_g170695.ViewDirWS;
				Out_VertexData15_g170695 = Data15_g170695.VertexData;
				Out_BoundsData15_g170695 = Data15_g170695.BoundsData;
				}
				half3 Model_PositionWO602_g170691 = Out_PositionWO15_g170695;
				float4 tex3DNode60_g170698 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170691 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170691 = lerp( 1.0 , tex3DNode60_g170698.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170691 = lerpResult673_g170691;
				half4 Model_VertexMasks752_g170691 = Out_VertexData15_g170695;
				float4 break755_g170691 = Model_VertexMasks752_g170691;
				float4 break33_g170696 = _cutout_vert_mode;
				float temp_output_30_0_g170696 = ( break755_g170691.x * break33_g170696.x );
				float temp_output_29_0_g170696 = ( break755_g170691.y * break33_g170696.y );
				float temp_output_31_0_g170696 = ( break755_g170691.z * break33_g170696.z );
				float temp_output_28_0_g170696 = ( temp_output_30_0_g170696 + temp_output_29_0_g170696 + temp_output_31_0_g170696 + ( break755_g170691.w * break33_g170696.w ) );
				float clampResult17_g170697 = clamp( temp_output_28_0_g170696 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170703 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170703 = ( clampResult17_g170697 - temp_output_7_0_g170703 );
				float lerpResult820_g170691 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170703 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170700 = lerpResult820_g170691;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170700 = ( temp_output_6_0_g170700 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170700 = temp_output_6_0_g170700;
				#endif
				float temp_output_801_0_g170691 = staticSwitch14_g170700;
				half Local_VertMask766_g170691 = temp_output_801_0_g170691;
				half Visual_MultiMask671_g170691 = temp_output_836_11_g170691;
				float lerpResult683_g170691 = lerp( 1.0 , Visual_MultiMask671_g170691 , _CutoutMultiValue);
				half Local_MultiMask685_g170691 = lerpResult683_g170691;
				float lerpResult728_g170691 = lerp( Visual_AlphaClip667_g170691 , min( Visual_AlphaClip667_g170691 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170691 ) - ( Local_AlphaMask814_g170691 * Local_NoiseMask678_g170691 * Local_VertMask766_g170691 ) ) ) ) , Local_MultiMask685_g170691);
				half Local_AlphaClip784_g170691 = lerpResult728_g170691;
				half Input_False58_g170701 = Local_AlphaClip784_g170691;
				half False36_g170701 = Input_False58_g170701;
				half localShadowPassCheck36_g170701 = ShadowPassCheck36_g170701( True36_g170701 , False36_g170701 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170691 = Local_AlphaClip784_g170691;
				#else
				float staticSwitch791_g170691 = localShadowPassCheck36_g170701;
				#endif
				float temp_output_6_0_g170702 = staticSwitch791_g170691;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170702 = ( temp_output_6_0_g170702 + ( _CutoutShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170702 = temp_output_6_0_g170702;
				#endif
				float temp_output_798_0_g170691 = staticSwitch14_g170702;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170691 = temp_output_798_0_g170691;
				#else
				float staticSwitch577_g170691 = Visual_AlphaClip667_g170691;
				#endif
				half Final_AlphaClip795_g170691 = staticSwitch577_g170691;
				float In_AlphaClip3_g170692 = Final_AlphaClip795_g170691;
				float In_AlphaFade3_g170692 = Out_AlphaFade4_g170694;
				float3 In_Translucency3_g170692 = Out_Translucency4_g170694;
				float In_Transmission3_g170692 = Out_Transmission4_g170694;
				float In_Thickness3_g170692 = Out_Thickness4_g170694;
				float In_Diffusion3_g170692 = Out_Diffusion4_g170694;
				{
				Data3_g170692.Dummy = In_Dummy3_g170692;
				Data3_g170692.Albedo = In_Albedo3_g170692;
				Data3_g170692.AlbedoRaw = In_AlbedoRaw3_g170692;
				Data3_g170692.NormalTS = In_NormalTS3_g170692;
				Data3_g170692.NormalWS = In_NormalWS3_g170692;
				Data3_g170692.Shader = In_Shader3_g170692;
				Data3_g170692.Emissive= In_Emissive3_g170692;
				Data3_g170692.MultiMask = In_MultiMask3_g170692;
				Data3_g170692.Grayscale = In_Grayscale3_g170692;
				Data3_g170692.Luminosity = In_Luminosity3_g170692;
				Data3_g170692.AlphaClip = In_AlphaClip3_g170692;
				Data3_g170692.AlphaFade = In_AlphaFade3_g170692;
				Data3_g170692.Translucency = In_Translucency3_g170692;
				Data3_g170692.Transmission = In_Transmission3_g170692;
				Data3_g170692.Thickness = In_Thickness3_g170692;
				Data3_g170692.Diffusion = In_Diffusion3_g170692;
				}
				TVEVisualData Data4_g170708 = Data3_g170692;
				float Out_Dummy4_g170708 = 0;
				float3 Out_Albedo4_g170708 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170708 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170708 = float2( 0,0 );
				float3 Out_NormalWS4_g170708 = float3( 0,0,0 );
				float4 Out_Shader4_g170708 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170708 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170708 = 0;
				float Out_Grayscale4_g170708 = 0;
				float Out_Luminosity4_g170708 = 0;
				float Out_AlphaClip4_g170708 = 0;
				float Out_AlphaFade4_g170708 = 0;
				float3 Out_Translucency4_g170708 = float3( 0,0,0 );
				float Out_Transmission4_g170708 = 0;
				float Out_Thickness4_g170708 = 0;
				float Out_Diffusion4_g170708 = 0;
				{
				Out_Dummy4_g170708 = Data4_g170708.Dummy;
				Out_Albedo4_g170708 = Data4_g170708.Albedo;
				Out_AlbedoRaw4_g170708 = Data4_g170708.AlbedoRaw;
				Out_NormalTS4_g170708 = Data4_g170708.NormalTS;
				Out_NormalWS4_g170708 = Data4_g170708.NormalWS;
				Out_Shader4_g170708 = Data4_g170708.Shader;
				Out_Emissive4_g170708= Data4_g170708.Emissive;
				Out_MultiMask4_g170708 = Data4_g170708.MultiMask;
				Out_Grayscale4_g170708 = Data4_g170708.Grayscale;
				Out_Luminosity4_g170708= Data4_g170708.Luminosity;
				Out_AlphaClip4_g170708 = Data4_g170708.AlphaClip;
				Out_AlphaFade4_g170708 = Data4_g170708.AlphaFade;
				Out_Translucency4_g170708 = Data4_g170708.Translucency;
				Out_Transmission4_g170708 = Data4_g170708.Transmission;
				Out_Thickness4_g170708 = Data4_g170708.Thickness;
				Out_Diffusion4_g170708 = Data4_g170708.Diffusion;
				}
				float3 In_Albedo3_g170709 = Out_Albedo4_g170708;
				float3 In_AlbedoRaw3_g170709 = Out_AlbedoRaw4_g170708;
				float2 In_NormalTS3_g170709 = Out_NormalTS4_g170708;
				float3 In_NormalWS3_g170709 = Out_NormalWS4_g170708;
				float4 In_Shader3_g170709 = Out_Shader4_g170708;
				float4 In_Emissive3_g170709 = Out_Emissive4_g170708;
				float In_Grayscale3_g170709 = Out_Grayscale4_g170708;
				float In_Luminosity3_g170709 = Out_Luminosity4_g170708;
				float temp_output_821_11_g170706 = Out_MultiMask4_g170708;
				float In_MultiMask3_g170709 = temp_output_821_11_g170706;
				half Visual_AlphaClip754_g170706 = Out_AlphaClip4_g170708;
				half Input_True57_g170711 = Visual_AlphaClip754_g170706;
				half True36_g170711 = Input_True57_g170711;
				half Dither_Constant768_g170706 = _DitherConstantValue;
				float3 ase_positionWS = GetAbsolutePositionWS( positionRWS );
				half Dither_BiasProximity881_g170706 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170706 = TVE_DitherParams.w;
				float lerpResult884_g170706 = lerp( 1.0 , Dither_BiasProximity881_g170706 , Dither_BiasEnabled883_g170706);
				float temp_output_7_0_g170717 = _DitherProximityMaxValue;
				float temp_output_9_0_g170717 = ( ( distance( ase_positionWS , _WorldSpaceCameraPos ) * lerpResult884_g170706 ) - temp_output_7_0_g170717 );
				half Dither_Proximity767_g170706 = ( saturate( ( ( temp_output_9_0_g170717 / ( _DitherProximityMinValue - temp_output_7_0_g170717 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170710 = Data16_g170201;
				float Out_Dummy15_g170710 = 0;
				float3 Out_PositionWS15_g170710 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170710 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170710 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170710 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170710 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170710 = float3( 0,0,0 );
				float4 Out_VertexData15_g170710 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170710 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170710 = Data15_g170710.Dummy;
				Out_PositionWS15_g170710 = Data15_g170710.PositionWS;
				Out_PositionWO15_g170710 = Data15_g170710.PositionWO;
				Out_PivotWS15_g170710 = Data15_g170710.PivotWS;
				Out_PivotWO15_g170710 = Data15_g170710.PivotWO;
				Out_NormalWS15_g170710 = Data15_g170710.NormalWS;
				Out_ViewDirWS15_g170710 = Data15_g170710.ViewDirWS;
				Out_VertexData15_g170710 = Data15_g170710.VertexData;
				Out_BoundsData15_g170710 = Data15_g170710.BoundsData;
				}
				half3 Model_PositionWS776_g170706 = Out_PositionWS15_g170710;
				half Dither_BiasDistance882_g170706 = TVE_DitherParams.z;
				float lerpResult888_g170706 = lerp( 1.0 , Dither_BiasDistance882_g170706 , Dither_BiasEnabled883_g170706);
				float temp_output_7_0_g170718 = _DitherDistanceMinValue;
				float temp_output_9_0_g170718 = ( ( distance( Model_PositionWS776_g170706 , _WorldSpaceCameraPos ) * lerpResult888_g170706 ) - temp_output_7_0_g170718 );
				half Dither_Distance856_g170706 = ( saturate( ( ( temp_output_9_0_g170718 / ( _DitherDistanceMaxValue - temp_output_7_0_g170718 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170706 = Out_ViewDirWS15_g170710;
				float3 normalizeResult792_g170706 = normalize( cross( ddy( ase_positionWS ) , ddx( ase_positionWS ) ) );
				float dotResult778_g170706 = dot( Model_ViewDirWS845_g170706 , normalizeResult792_g170706 );
				half Dither_Glancing784_g170706 = ( saturate( ( ( 1.0 - abs( dotResult778_g170706 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170706 = max( max( max( Dither_Constant768_g170706 , Dither_Proximity767_g170706 ) , Dither_Distance856_g170706 ) , Dither_Glancing784_g170706 );
				half3 Model_PositionWO602_g170706 = Out_PositionWO15_g170710;
				float4 tex3DNode60_g170713 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170706 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170706 = tex3DNode60_g170713.r;
				half Local_MaskNoise678_g170706 = temp_output_809_0_g170706;
				half Visual_MultiMask671_g170706 = temp_output_821_11_g170706;
				float lerpResult683_g170706 = lerp( 1.0 , Visual_MultiMask671_g170706 , _DitherMultiValue);
				half Local_MaskMulti685_g170706 = lerpResult683_g170706;
				half Custom_Mask826_g170706 = 1.0;
				float lerpResult728_g170706 = lerp( Visual_AlphaClip754_g170706 , min( Visual_AlphaClip754_g170706 , ( -0.001 - ( Dither_Value429_g170706 - Local_MaskNoise678_g170706 ) ) ) , ( Local_MaskMulti685_g170706 * Custom_Mask826_g170706 ));
				half Local_AlphaClip834_g170706 = lerpResult728_g170706;
				half Input_False58_g170711 = Local_AlphaClip834_g170706;
				half False36_g170711 = Input_False58_g170711;
				half localShadowPassCheck36_g170711 = ShadowPassCheck36_g170711( True36_g170711 , False36_g170711 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170706 = Local_AlphaClip834_g170706;
				#else
				float staticSwitch831_g170706 = localShadowPassCheck36_g170711;
				#endif
				float temp_output_6_0_g170712 = staticSwitch831_g170706;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170712 = ( temp_output_6_0_g170712 + ( _DitherShadowMode * 0.0 ) );
				#else
				float staticSwitch14_g170712 = temp_output_6_0_g170712;
				#endif
				float temp_output_840_0_g170706 = staticSwitch14_g170712;
				#ifdef TVE_DITHER
				float staticSwitch577_g170706 = temp_output_840_0_g170706;
				#else
				float staticSwitch577_g170706 = Visual_AlphaClip754_g170706;
				#endif
				half Final_AlphaClip493_g170706 = staticSwitch577_g170706;
				float In_AlphaClip3_g170709 = Final_AlphaClip493_g170706;
				float In_AlphaFade3_g170709 = Out_AlphaFade4_g170708;
				float3 In_Translucency3_g170709 = Out_Translucency4_g170708;
				float In_Transmission3_g170709 = Out_Transmission4_g170708;
				float In_Thickness3_g170709 = Out_Thickness4_g170708;
				float In_Diffusion3_g170709 = Out_Diffusion4_g170708;
				{
				Data3_g170709.Dummy = In_Dummy3_g170709;
				Data3_g170709.Albedo = In_Albedo3_g170709;
				Data3_g170709.AlbedoRaw = In_AlbedoRaw3_g170709;
				Data3_g170709.NormalTS = In_NormalTS3_g170709;
				Data3_g170709.NormalWS = In_NormalWS3_g170709;
				Data3_g170709.Shader = In_Shader3_g170709;
				Data3_g170709.Emissive= In_Emissive3_g170709;
				Data3_g170709.MultiMask = In_MultiMask3_g170709;
				Data3_g170709.Grayscale = In_Grayscale3_g170709;
				Data3_g170709.Luminosity = In_Luminosity3_g170709;
				Data3_g170709.AlphaClip = In_AlphaClip3_g170709;
				Data3_g170709.AlphaFade = In_AlphaFade3_g170709;
				Data3_g170709.Translucency = In_Translucency3_g170709;
				Data3_g170709.Transmission = In_Transmission3_g170709;
				Data3_g170709.Thickness = In_Thickness3_g170709;
				Data3_g170709.Diffusion = In_Diffusion3_g170709;
				}
				TVEVisualData Data4_g170731 = Data3_g170709;
				float Out_Dummy4_g170731 = 0;
				float3 Out_Albedo4_g170731 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170731 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170731 = float2( 0,0 );
				float3 Out_NormalWS4_g170731 = float3( 0,0,0 );
				float4 Out_Shader4_g170731 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170731 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170731 = 0;
				float Out_Grayscale4_g170731 = 0;
				float Out_Luminosity4_g170731 = 0;
				float Out_AlphaClip4_g170731 = 0;
				float Out_AlphaFade4_g170731 = 0;
				float3 Out_Translucency4_g170731 = float3( 0,0,0 );
				float Out_Transmission4_g170731 = 0;
				float Out_Thickness4_g170731 = 0;
				float Out_Diffusion4_g170731 = 0;
				{
				Out_Dummy4_g170731 = Data4_g170731.Dummy;
				Out_Albedo4_g170731 = Data4_g170731.Albedo;
				Out_AlbedoRaw4_g170731 = Data4_g170731.AlbedoRaw;
				Out_NormalTS4_g170731 = Data4_g170731.NormalTS;
				Out_NormalWS4_g170731 = Data4_g170731.NormalWS;
				Out_Shader4_g170731 = Data4_g170731.Shader;
				Out_Emissive4_g170731= Data4_g170731.Emissive;
				Out_MultiMask4_g170731 = Data4_g170731.MultiMask;
				Out_Grayscale4_g170731 = Data4_g170731.Grayscale;
				Out_Luminosity4_g170731= Data4_g170731.Luminosity;
				Out_AlphaClip4_g170731 = Data4_g170731.AlphaClip;
				Out_AlphaFade4_g170731 = Data4_g170731.AlphaFade;
				Out_Translucency4_g170731 = Data4_g170731.Translucency;
				Out_Transmission4_g170731 = Data4_g170731.Transmission;
				Out_Thickness4_g170731 = Data4_g170731.Thickness;
				Out_Diffusion4_g170731 = Data4_g170731.Diffusion;
				}
				float3 temp_output_297_0_g170727 = Out_Albedo4_g170731;
				float3 In_Albedo3_g170732 = temp_output_297_0_g170727;
				float3 temp_output_297_23_g170727 = Out_AlbedoRaw4_g170731;
				float3 In_AlbedoRaw3_g170732 = temp_output_297_23_g170727;
				float2 In_NormalTS3_g170732 = Out_NormalTS4_g170731;
				float3 In_NormalWS3_g170732 = Out_NormalWS4_g170731;
				float4 In_Shader3_g170732 = Out_Shader4_g170731;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170727 = Out_Emissive4_g170731;
				TVEModelData Data15_g170733 = Data16_g170201;
				float Out_Dummy15_g170733 = 0;
				float3 Out_PositionWS15_g170733 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170733 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170733 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170733 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170733 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170733 = float3( 0,0,0 );
				float4 Out_VertexData15_g170733 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170733 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170733 = Data15_g170733.Dummy;
				Out_PositionWS15_g170733 = Data15_g170733.PositionWS;
				Out_PositionWO15_g170733 = Data15_g170733.PositionWO;
				Out_PivotWS15_g170733 = Data15_g170733.PivotWS;
				Out_PivotWO15_g170733 = Data15_g170733.PivotWO;
				Out_NormalWS15_g170733 = Data15_g170733.NormalWS;
				Out_ViewDirWS15_g170733 = Data15_g170733.ViewDirWS;
				Out_VertexData15_g170733 = Data15_g170733.VertexData;
				Out_BoundsData15_g170733 = Data15_g170733.BoundsData;
				}
				half4 Model_VertexMasks216_g170727 = Out_VertexData15_g170733;
				float4 break251_g170727 = Model_VertexMasks216_g170727;
				float4 break33_g170738 = _emissive_vert_mode;
				float temp_output_30_0_g170738 = ( break251_g170727.x * break33_g170738.x );
				float temp_output_29_0_g170738 = ( break251_g170727.y * break33_g170738.y );
				float temp_output_31_0_g170738 = ( break251_g170727.z * break33_g170738.z );
				float temp_output_28_0_g170738 = ( temp_output_30_0_g170738 + temp_output_29_0_g170738 + temp_output_31_0_g170738 + ( break251_g170727.w * break33_g170738.w ) );
				float clampResult17_g170737 = clamp( temp_output_28_0_g170738 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170741 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170741 = ( clampResult17_g170737 - temp_output_7_0_g170741 );
				float lerpResult303_g170727 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170741 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170740 = lerpResult303_g170727;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170740 = ( temp_output_6_0_g170740 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170740 = temp_output_6_0_g170740;
				#endif
				half Emissive_MeshMask221_g170727 = staticSwitch14_g170740;
				TEXTURE2D(Texture276_g170729) = _EmissiveMaskTex;
				SamplerState Sampler276_g170729 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170730 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170730 = ( temp_output_6_0_g170730 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170730 = temp_output_6_0_g170730;
				#endif
				half4 Emissive_Coords167_g170727 = staticSwitch14_g170730;
				float4 temp_output_37_0_g170729 = Emissive_Coords167_g170727;
				half4 Coords276_g170729 = temp_output_37_0_g170729;
				half2 TexCoord276_g170729 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170729 = SampleMain( Texture276_g170729 , Sampler276_g170729 , Coords276_g170729 , TexCoord276_g170729 );
				TEXTURE2D(Texture275_g170729) = _EmissiveMaskTex;
				SamplerState Sampler275_g170729 = sampler_Linear_Repeat;
				half4 Coords275_g170729 = temp_output_37_0_g170729;
				half2 TexCoord275_g170729 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170729 = SampleExtra( Texture275_g170729 , Sampler275_g170729 , Coords275_g170729 , TexCoord275_g170729 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170727 = localSampleMain276_g170729;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170727 = localSampleExtra275_g170729;
				#else
				float4 staticSwitch176_g170727 = localSampleMain276_g170729;
				#endif
				half4 Emissive_MaskTex201_g170727 = staticSwitch176_g170727;
				float clampResult17_g170739 = clamp( (Emissive_MaskTex201_g170727).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170742 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170742 = ( clampResult17_g170739 - temp_output_7_0_g170742 );
				float lerpResult302_g170727 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170742 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170727 = lerpResult302_g170727;
				float temp_output_279_0_g170727 = ( Emissive_MeshMask221_g170727 * Emissive_Mask103_g170727 );
				float3 appendResult293_g170727 = (float3(temp_output_279_0_g170727 , temp_output_279_0_g170727 , temp_output_279_0_g170727));
				half3 Local_EmissiveColor278_g170727 = appendResult293_g170727;
				float3 temp_output_316_0_g170727 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170728 = Data204_g170214;
				float Out_Dummy15_g170728 = 0;
				float4 Out_CoatParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170728 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170728 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170728 = Data15_g170728.Dummy;
				Out_CoatParams15_g170728 = Data15_g170728.CoatParams;
				Out_PaintParams15_g170728 = Data15_g170728.PaintParams;
				Out_GlowParams15_g170728 = Data15_g170728.GlowParams;
				Out_AtmoParams15_g170728= Data15_g170728.AtmoParams;
				Out_FadeParams15_g170728= Data15_g170728.FadeParams;
				Out_FormParams15_g170728 = Data15_g170728.FormParams;
				Out_FlowParams15_g170728 = Data15_g170728.FlowParams;
				}
				half4 Global_GlowParams179_g170727 = Out_GlowParams15_g170728;
				float3 temp_output_6_0_g170735 = (Global_GlowParams179_g170727).xyz;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170735 = ( temp_output_6_0_g170735 + ( _EmissiveElementMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170735 = temp_output_6_0_g170735;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170727 = staticSwitch14_g170735;
				#else
				float3 staticSwitch228_g170727 = temp_output_316_0_g170727;
				#endif
				float3 lerpResult299_g170727 = lerp( float3( 1,1,1 ) , staticSwitch228_g170727 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170727 = lerpResult299_g170727;
				half3 Visual_AlbedoRaw306_g170727 = temp_output_297_23_g170727;
				float3 lerpResult307_g170727 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170727 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170727 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170727 * lerpResult307_g170727 );
				half3 Emissive_Blend260_g170727 = ( ( (Visual_Emissive255_g170727).xyz * Local_EmissiveColor278_g170727 ) * Local_EmissiveValue88_g170727 );
				float3 temp_output_3_0_g170734 = Emissive_Blend260_g170727;
				float temp_output_15_0_g170734 = _emissive_power_value;
				float3 hdEmission22_g170734 = ASEGetEmissionHDRColor(temp_output_3_0_g170734,temp_output_15_0_g170734,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170727 = temp_output_279_0_g170727;
				float4 appendResult295_g170727 = (float4(hdEmission22_g170734 , Local_EmissiveMask294_g170727));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170727 = appendResult295_g170727;
				#else
				float4 staticSwitch129_g170727 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170727 = staticSwitch129_g170727;
				float4 In_Emissive3_g170732 = Final_Emissive184_g170727;
				float In_Grayscale3_g170732 = Out_Grayscale4_g170731;
				float In_Luminosity3_g170732 = Out_Luminosity4_g170731;
				float temp_output_297_11_g170727 = Out_MultiMask4_g170731;
				float In_MultiMask3_g170732 = temp_output_297_11_g170727;
				float In_AlphaClip3_g170732 = Out_AlphaClip4_g170731;
				float In_AlphaFade3_g170732 = Out_AlphaFade4_g170731;
				float3 In_Translucency3_g170732 = Out_Translucency4_g170731;
				float In_Transmission3_g170732 = Out_Transmission4_g170731;
				float In_Thickness3_g170732 = Out_Thickness4_g170731;
				float In_Diffusion3_g170732 = Out_Diffusion4_g170731;
				{
				Data3_g170732.Dummy = In_Dummy3_g170732;
				Data3_g170732.Albedo = In_Albedo3_g170732;
				Data3_g170732.AlbedoRaw = In_AlbedoRaw3_g170732;
				Data3_g170732.NormalTS = In_NormalTS3_g170732;
				Data3_g170732.NormalWS = In_NormalWS3_g170732;
				Data3_g170732.Shader = In_Shader3_g170732;
				Data3_g170732.Emissive= In_Emissive3_g170732;
				Data3_g170732.MultiMask = In_MultiMask3_g170732;
				Data3_g170732.Grayscale = In_Grayscale3_g170732;
				Data3_g170732.Luminosity = In_Luminosity3_g170732;
				Data3_g170732.AlphaClip = In_AlphaClip3_g170732;
				Data3_g170732.AlphaFade = In_AlphaFade3_g170732;
				Data3_g170732.Translucency = In_Translucency3_g170732;
				Data3_g170732.Transmission = In_Transmission3_g170732;
				Data3_g170732.Thickness = In_Thickness3_g170732;
				Data3_g170732.Diffusion = In_Diffusion3_g170732;
				}
				TVEVisualData Data4_g170763 = Data3_g170732;
				float Out_Dummy4_g170763 = 0;
				float3 Out_Albedo4_g170763 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170763 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170763 = float2( 0,0 );
				float3 Out_NormalWS4_g170763 = float3( 0,0,0 );
				float4 Out_Shader4_g170763 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170763 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170763 = 0;
				float Out_Grayscale4_g170763 = 0;
				float Out_Luminosity4_g170763 = 0;
				float Out_AlphaClip4_g170763 = 0;
				float Out_AlphaFade4_g170763 = 0;
				float3 Out_Translucency4_g170763 = float3( 0,0,0 );
				float Out_Transmission4_g170763 = 0;
				float Out_Thickness4_g170763 = 0;
				float Out_Diffusion4_g170763 = 0;
				{
				Out_Dummy4_g170763 = Data4_g170763.Dummy;
				Out_Albedo4_g170763 = Data4_g170763.Albedo;
				Out_AlbedoRaw4_g170763 = Data4_g170763.AlbedoRaw;
				Out_NormalTS4_g170763 = Data4_g170763.NormalTS;
				Out_NormalWS4_g170763 = Data4_g170763.NormalWS;
				Out_Shader4_g170763 = Data4_g170763.Shader;
				Out_Emissive4_g170763= Data4_g170763.Emissive;
				Out_MultiMask4_g170763 = Data4_g170763.MultiMask;
				Out_Grayscale4_g170763 = Data4_g170763.Grayscale;
				Out_Luminosity4_g170763= Data4_g170763.Luminosity;
				Out_AlphaClip4_g170763 = Data4_g170763.AlphaClip;
				Out_AlphaFade4_g170763 = Data4_g170763.AlphaFade;
				Out_Translucency4_g170763 = Data4_g170763.Translucency;
				Out_Transmission4_g170763 = Data4_g170763.Transmission;
				Out_Thickness4_g170763 = Data4_g170763.Thickness;
				Out_Diffusion4_g170763 = Data4_g170763.Diffusion;
				}
				half3 Visual_Albedo199_g170762 = Out_Albedo4_g170763;
				half3 Final_Albedo312_g170762 = Visual_Albedo199_g170762;
				float3 In_Albedo3_g170764 = Final_Albedo312_g170762;
				float3 In_AlbedoRaw3_g170764 = Out_AlbedoRaw4_g170763;
				float2 In_NormalTS3_g170764 = Out_NormalTS4_g170763;
				float3 In_NormalWS3_g170764 = Out_NormalWS4_g170763;
				float4 In_Shader3_g170764 = Out_Shader4_g170763;
				float4 In_Emissive3_g170764 = Out_Emissive4_g170763;
				float In_Grayscale3_g170764 = Out_Grayscale4_g170763;
				float In_Luminosity3_g170764 = Out_Luminosity4_g170763;
				float temp_output_301_11_g170762 = Out_MultiMask4_g170763;
				float In_MultiMask3_g170764 = temp_output_301_11_g170762;
				float In_AlphaClip3_g170764 = Out_AlphaClip4_g170763;
				float In_AlphaFade3_g170764 = Out_AlphaFade4_g170763;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g170762 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170762 );
				half Visual_Transmission138_g170762 = Out_Transmission4_g170763;
				half Subsurface_Value268_g170762 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170765 = Data204_g170214;
				float Out_Dummy15_g170765 = 0;
				float4 Out_CoatParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170765 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170765 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170765 = Data15_g170765.Dummy;
				Out_CoatParams15_g170765 = Data15_g170765.CoatParams;
				Out_PaintParams15_g170765 = Data15_g170765.PaintParams;
				Out_GlowParams15_g170765 = Data15_g170765.GlowParams;
				Out_AtmoParams15_g170765= Data15_g170765.AtmoParams;
				Out_FadeParams15_g170765= Data15_g170765.FadeParams;
				Out_FormParams15_g170765 = Data15_g170765.FormParams;
				Out_FlowParams15_g170765 = Data15_g170765.FlowParams;
				}
				half4 Global_GlowParams373_g170762 = Out_GlowParams15_g170765;
				float temp_output_6_0_g170768 = saturate( (Global_GlowParams373_g170762).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170768 = ( temp_output_6_0_g170768 + ( _SubsurfaceElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170768 = temp_output_6_0_g170768;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170762 = staticSwitch14_g170768;
				#else
				float staticSwitch367_g170762 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g170762 = lerp( 1.0 , staticSwitch367_g170762 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170762 = lerpResult403_g170762;
				half Visual_MultiMask292_g170762 = temp_output_301_11_g170762;
				float lerpResult293_g170762 = lerp( 1.0 , Visual_MultiMask292_g170762 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170762 = lerpResult293_g170762;
				half Custom_Mask363_g170762 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170762 = ( Visual_Transmission138_g170762 * Subsurface_Value268_g170762 * Subsurface_GlobalMask369_g170762 * Subsurface_MultiMask296_g170762 * Custom_Mask363_g170762 );
				#else
				float staticSwitch345_g170762 = 0.0;
				#endif
				half Final_Transmission269_g170762 = staticSwitch345_g170762;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170762 = ( Subsurface_Color264_g170762 * Final_Transmission269_g170762 * 10.0 );
				#else
				float3 staticSwitch348_g170762 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g170762 = staticSwitch348_g170762;
				float3 In_Translucency3_g170764 = Final_Translucency254_g170762;
				float In_Transmission3_g170764 = Final_Transmission269_g170762;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170762 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170762 = 1.0;
				#endif
				half Final_Thickness275_g170762 = staticSwitch351_g170762;
				float In_Thickness3_g170764 = Final_Thickness275_g170762;
				float Final_Diffusion340_g170762 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170764 = Final_Diffusion340_g170762;
				{
				Data3_g170764.Dummy = In_Dummy3_g170764;
				Data3_g170764.Albedo = In_Albedo3_g170764;
				Data3_g170764.AlbedoRaw = In_AlbedoRaw3_g170764;
				Data3_g170764.NormalTS = In_NormalTS3_g170764;
				Data3_g170764.NormalWS = In_NormalWS3_g170764;
				Data3_g170764.Shader = In_Shader3_g170764;
				Data3_g170764.Emissive= In_Emissive3_g170764;
				Data3_g170764.MultiMask = In_MultiMask3_g170764;
				Data3_g170764.Grayscale = In_Grayscale3_g170764;
				Data3_g170764.Luminosity = In_Luminosity3_g170764;
				Data3_g170764.AlphaClip = In_AlphaClip3_g170764;
				Data3_g170764.AlphaFade = In_AlphaFade3_g170764;
				Data3_g170764.Translucency = In_Translucency3_g170764;
				Data3_g170764.Transmission = In_Transmission3_g170764;
				Data3_g170764.Thickness = In_Thickness3_g170764;
				Data3_g170764.Diffusion = In_Diffusion3_g170764;
				}
				TVEVisualData Data4_g170777 = Data3_g170764;
				float Out_Dummy4_g170777 = 0;
				float3 Out_Albedo4_g170777 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170777 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170777 = float2( 0,0 );
				float3 Out_NormalWS4_g170777 = float3( 0,0,0 );
				float4 Out_Shader4_g170777 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170777 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170777 = 0;
				float Out_Grayscale4_g170777 = 0;
				float Out_Luminosity4_g170777 = 0;
				float Out_AlphaClip4_g170777 = 0;
				float Out_AlphaFade4_g170777 = 0;
				float3 Out_Translucency4_g170777 = float3( 0,0,0 );
				float Out_Transmission4_g170777 = 0;
				float Out_Thickness4_g170777 = 0;
				float Out_Diffusion4_g170777 = 0;
				{
				Out_Dummy4_g170777 = Data4_g170777.Dummy;
				Out_Albedo4_g170777 = Data4_g170777.Albedo;
				Out_AlbedoRaw4_g170777 = Data4_g170777.AlbedoRaw;
				Out_NormalTS4_g170777 = Data4_g170777.NormalTS;
				Out_NormalWS4_g170777 = Data4_g170777.NormalWS;
				Out_Shader4_g170777 = Data4_g170777.Shader;
				Out_Emissive4_g170777= Data4_g170777.Emissive;
				Out_MultiMask4_g170777 = Data4_g170777.MultiMask;
				Out_Grayscale4_g170777 = Data4_g170777.Grayscale;
				Out_Luminosity4_g170777= Data4_g170777.Luminosity;
				Out_AlphaClip4_g170777 = Data4_g170777.AlphaClip;
				Out_AlphaFade4_g170777 = Data4_g170777.AlphaFade;
				Out_Translucency4_g170777 = Data4_g170777.Translucency;
				Out_Transmission4_g170777 = Data4_g170777.Transmission;
				Out_Thickness4_g170777 = Data4_g170777.Thickness;
				Out_Diffusion4_g170777 = Data4_g170777.Diffusion;
				}
				float temp_output_3_0_g170784 = Out_AlphaClip4_g170777;
				float Alpha21_g170784 = temp_output_3_0_g170784;
				float temp_output_15_0_g170784 = 0.0;
				float Treshold21_g170784 = temp_output_15_0_g170784;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170784 - Treshold21_g170784);
				#endif
				#endif
				}
				
				surfaceDescription.Alpha = saturate( ( Alpha21_g170784 * Out_AlphaFade4_g170777 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold =  _AlphaCutoff;
				#endif

				outColor = _SelectionID;
			}

            ENDHLSL
		}

        Pass
        {

            Name "FullScreenDebug"
            Tags 
			{ 
				"LightMode" = "FullScreenDebug" 
            }

            Cull [_CullMode]
			ZTest LEqual
			ZWrite Off

            HLSLPROGRAM
            /*ase_pragma_before*/
            #pragma multi_compile _ DOTS_INSTANCING_ON

			#pragma vertex Vert
			#pragma fragment Frag

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#define SHADERPASS SHADERPASS_FULL_SCREEN_DEBUG

			#define ATTRIBUTES_NEED_NORMAL
			#define ATTRIBUTES_NEED_TANGENT

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

			#ifndef SHADER_UNLIT
			#if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
			#define VARYINGS_NEED_CULLFACE
			#endif
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
		    #define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

			#if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
			#if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
				#define WRITE_NORMAL_BUFFER
			#endif
			#endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

			#ifndef DEBUG_DISPLAY
				#if !defined(_SURFACE_TYPE_TRANSPARENT)
					#if SHADERPASS == SHADERPASS_FORWARD
					#define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
					#elif SHADERPASS == SHADERPASS_GBUFFER
					#define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
					#endif
				#endif
			#endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
					uint instanceID : INSTANCEID_SEMANTIC;
				#endif
			};

			struct VaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
					uint instanceID : CUSTOM_INSTANCE_ID;
				#endif
			};

			struct VertexDescriptionInputs
			{
				 float3 ObjectSpaceNormal;
				 float3 ObjectSpaceTangent;
				 float3 ObjectSpacePosition;
			};

			struct SurfaceDescriptionInputs
			{
				 float3 TangentSpaceNormal;
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
					uint instanceID : CUSTOM_INSTANCE_ID;
				#endif
			};

            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
			{
				PackedVaryingsMeshToPS output;
				ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
				output.positionCS = input.positionCS;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
				output.instanceID = input.instanceID;
				#endif
				return output;
			}

			VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
			{
				VaryingsMeshToPS output;
				output.positionCS = input.positionCS;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
				output.instanceID = input.instanceID;
				#endif
				return output;
			}

            struct VertexDescription
			{
				float3 Position;
				float3 Normal;
				float3 Tangent;
			};

			VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
			{
				VertexDescription description = (VertexDescription)0;
				description.Position = IN.ObjectSpacePosition;
				description.Normal = IN.ObjectSpaceNormal;
				description.Tangent = IN.ObjectSpaceTangent;
				return description;
			}

            struct SurfaceDescription
			{
				float3 BaseColor;
				float3 Emission;
				float Alpha;
				float3 BentNormal;
				float Smoothness;
				float Occlusion;
				float3 NormalTS;
				float Metallic;
			};

			SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
			{
				SurfaceDescription surface = (SurfaceDescription)0;
				surface.BaseColor = IsGammaSpace() ? float3(0.5, 0.5, 0.5) : SRGBToLinear(float3(0.5, 0.5, 0.5));
				surface.Emission = float3(0, 0, 0);
				surface.Alpha = 1;
				surface.BentNormal = IN.TangentSpaceNormal;
				surface.Smoothness = 0.5;
				surface.Occlusion = 1;
				surface.NormalTS = IN.TangentSpaceNormal;
				surface.Metallic = 0;
				return surface;
			}

			VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
			{
				VertexDescriptionInputs output;
				ZERO_INITIALIZE(VertexDescriptionInputs, output);

				output.ObjectSpaceNormal =                          input.normalOS;
				output.ObjectSpaceTangent =                         input.tangentOS.xyz;
				output.ObjectSpacePosition =                        input.positionOS;
				#if UNITY_ANY_INSTANCING_ENABLED
                #else
                #endif

				return output;
			}

			AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters  )
			{
				VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);

				VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);

				input.positionOS = vertexDescription.Position;
				input.normalOS = vertexDescription.Normal;
				input.tangentOS.xyz = vertexDescription.Tangent;
				return input;
			}

			FragInputs BuildFragInputs(VaryingsMeshToPS input)
			{
				FragInputs output;
				ZERO_INITIALIZE(FragInputs, output);

				output.tangentToWorld = k_identity3x3;
				output.positionSS = input.positionCS; // input.positionCS is SV_Position
				#if UNITY_ANY_INSTANCING_ENABLED
                #else
                #endif

				return output;
			}

			FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
			{
				UNITY_SETUP_INSTANCE_ID(input);
				VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
				return BuildFragInputs(unpacked);
			}

			#define DEBUG_DISPLAY
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/FullScreenDebug.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/VertMesh.hlsl"

			PackedVaryingsType Vert(AttributesMesh inputMesh)
			{
				VaryingsType varyingsType;
				varyingsType.vmesh = VertMesh(inputMesh);
				return PackVaryingsType(varyingsType);
			}

			#if !defined(_DEPTHOFFSET_ON)
			[earlydepthstencil]
			#endif
			void Frag(PackedVaryingsToPS packedInput)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				FragInputs input = UnpackVaryingsToFragInputs(packedInput);

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS.xyz);

			#ifdef PLATFORM_SUPPORTS_PRIMITIVE_ID_IN_PIXEL_SHADER
				if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_QUAD_OVERDRAW)
				{
					IncrementQuadOverdrawCounter(posInput.positionSS.xy, input.primitiveID);
				}
			#endif
			}
            ENDHLSL
        }
		
	}
	
	CustomEditor "TVEShaderGUICore"
	
	Fallback Off
}
/*ASEBEGIN
Version=19702
Node;AmplifyShaderEditor.FunctionNode;4301;-10240,-256;Inherit;False;Block Model;46;;170196;7ad7765e793a6714babedee0033c36e9;14,240,1,290,1,291,1,289,1,181,0,183,0,185,0,188,0,190,0,184,0,192,0,189,0,300,0,193,0;10;102;FLOAT3;0,0,0;False;163;FLOAT3;0,0,0;False;186;FLOAT3;0,0,0;False;187;FLOAT3;0,0,0;False;166;FLOAT3;0,0,0;False;164;FLOAT3;0,0,0;False;301;FLOAT3;0,0,0;False;167;FLOAT4;0,0,0,0;False;172;FLOAT4;0,0,0,0;False;175;FLOAT4;0,0,0,0;False;2;OBJECT;128;OBJECT;314
Node;AmplifyShaderEditor.RegisterLocalVarNode;4302;-9920,-192;Half;False;Model Frag;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4303;-9472,-256;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;4304;-9920,-256;Half;False;Model Vert;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4305;-9216,-256;Inherit;False;Block Global;57;;170214;212e17d4006dc88449d56ce0340cb5ff;17,315,1,311,1,317,1,388,1,321,1,398,1,404,1,337,1,282,1,396,1,283,1,285,1,276,1,349,1,402,1,385,1,308,1;1;206;OBJECT;0,0,0,0;False;1;OBJECT;151
Node;AmplifyShaderEditor.GetLocalVarNode;4306;-8448,-256;Inherit;False;4304;Model Vert;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4307;-4224,-256;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;4308;-8896,-256;Half;False;Global Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4309;-8192,-256;Inherit;False;Block Pivots Sub;-1;;170369;186f08b1bbe15894d9c677d50398679b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;4310;-3968,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4311;-3968,-64;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4312;-3968,-256;Inherit;False;Block Main;101;;170372;b04cfed9a7b4c0841afdb49a38c282c5;5,65,1,136,1,41,1,133,1,40,1;1;225;OBJECT;0,0,0,0;False;1;OBJECT;106
Node;AmplifyShaderEditor.FunctionNode;4314;-7808,-256;Inherit;False;Block Perspective;494;;170390;df5d9c54e8e4098459ebd6b9eabbd8ca;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;4313;-7808,-128;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4315;-3584,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4316;-3584,-64;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4317;-3584,-256;Inherit;False;Block Layer;123;;170394;5f6a6b9e0b5515744bf8e48a9ccead1b;13,986,1,709,1,726,1,748,1,747,1,746,1,1048,1,1045,1,1053,1,1035,1,1055,1,1051,1,1008,0;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;974;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.FunctionNode;4318;-7424,-256;Inherit;False;Block Size Fade;499;;170431;467c36a7402d0274b9ad844bbc95de33;2,228,1,225,1;2;146;OBJECT;0,0,0,0;False;186;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;4361;-7424,-128;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4319;-3200,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4320;-3200,-256;Inherit;False;Block Detail;173;;170438;a5b52fdec7b855a4fba859a90e837892;13,990,1,709,1,726,1,748,1,747,1,746,1,1062,1,1057,1,1067,1,1048,1,1069,1,1065,1,1013,0;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;971;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.FunctionNode;4321;-7040,-256;Inherit;False;Block Motion;509;;170474;d9ac7ad4f0387004fb72c16019bf8392;0;2;146;OBJECT;0,0,0,0;False;212;OBJECT;0,0,0,0;False;2;OBJECT;128;FLOAT;1903
Node;AmplifyShaderEditor.GetLocalVarNode;4322;-2816,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4323;-2816,-256;Inherit;False;Block Occlusion;220;;170544;ec16733ec52362048954a75640fbe560;1,210,1;2;144;OBJECT;0,0,0,0;False;204;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.RegisterLocalVarNode;4324;-6592,-128;Half;False;Wave Mask;-1;True;1;0;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4325;-2432,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4326;-2432,-256;Inherit;False;Block Gradient;232;;170554;1f0cb348753541648acbe7a6adce694e;1,228,1;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;4327;-5120,-256;Inherit;False;4324;Wave Mask;1;0;OBJECT;;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4328;-2048,-64;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4329;-2048,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4330;-2048,-256;Inherit;False;Block Variation;245;;170564;f25afe21028a28a4e8dee6f6da7bc1a5;0;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.FunctionNode;4331;-4864,-256;Inherit;False;Block Interp;-1;;170573;e2b225f9519c0194eaa2c47b94bb1bbc;0;4;19;FLOAT;0;False;20;FLOAT;0;False;21;FLOAT;0;False;22;FLOAT;0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;4332;-1664,-64;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4333;-1664,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4334;-1664,-256;Inherit;False;Block Tinting;258;;170574;9f39e156ea8d89e4997ea2a1e194137e;10,352,1,416,1,414,1,407,1,400,0,334,1,336,1,339,1,355,0,344,0;4;198;OBJECT;0,0,0,0;False;223;OBJECT;0,0,0,0;False;207;OBJECT;0,0,0,0;False;346;FLOAT;1;False;1;OBJECT;204
Node;AmplifyShaderEditor.RegisterLocalVarNode;4335;-4544,-256;Half;False;Interp Data;-1;True;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.FunctionNode;4336;-1280,-256;Inherit;False;Block Dryness;288;;170598;f05795de23f951c45bb73c8b4321e4b7;10,398,1,510,0,507,1,504,1,482,0,400,1,403,1,405,1,442,0,410,0;4;279;OBJECT;0,0,0,0;False;297;OBJECT;0,0,0,0;False;281;OBJECT;0,0,0,0;False;409;FLOAT;1;False;1;OBJECT;346
Node;AmplifyShaderEditor.GetLocalVarNode;4337;-1280,-128;Inherit;False;4335;Interp Data;1;0;OBJECT;;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;4338;-896,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4339;-896,-64;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4340;-896,-256;Inherit;False;Block Highlight;0;;170622;20f1f2e205564b848b07c7637cbf0686;0;2;144;OBJECT;0,0,0,0;False;212;FLOAT4;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;4341;-512,-64;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4342;-512,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4343;-512,-256;Inherit;False;Block Overlay;321;;170625;8ae9c8285a7817844a51243251284d21;11,813,1,821,1,819,1,942,1,940,1,944,0,826,1,823,1,828,1,844,0,447,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;445;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;4344;-128,-64;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4345;-128,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4346;-128,-256;Inherit;False;Block Wetness;369;;170662;52c5a1f52507fc44e926833b126e7855;10,850,1,1124,1,1120,1,1075,1,945,1,930,1,857,1,1092,1,851,1,1107,1;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;4347;256,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4348;256,-256;Inherit;False;Block Cutout;411;;170691;866b4a5fe67e7f34085520e1bb5be2b7;7,775,1,846,1,840,1,777,1,815,1,779,1,817,1;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;4349;640,-64;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4350;640,-256;Inherit;False;Block Dithering;430;;170706;c7e02d28445e979479d493926695e6f3;6,843,1,859,1,844,1,827,1,879,0,825,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;824;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;4351;640,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4352;-6656,-256;Inherit;False;Block Transform;-1;;170719;5ac6202bdddd8b34a85c261af6b8de8b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;4353;1024,-256;Inherit;False;Block Emissive;450;;170727;64497f287b9096b43b688b52b4a0bf20;6,282,0,273,1,319,1,312,1,264,1,267,1;3;146;OBJECT;0,0,0,0;False;148;OBJECT;0,0,0,0;False;178;OBJECT;0,0,0,0;False;1;OBJECT;183
Node;AmplifyShaderEditor.GetLocalVarNode;4354;1024,-64;Inherit;False;4308;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;4356;-6272,-256;Inherit;False;Block Normal;556;;170743;87f7defafe56dbf4b954caf5efc3f5ca;4,1713,0,1693,1,1700,0,1638,0;2;146;OBJECT;0,0,0,0;False;1631;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;4357;-5888,-256;Inherit;False;Block Pivots Add;-1;;170759;016babe9e3e643242aa4d123a988150c;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;4360;1408,-256;Inherit;False;Block Subsurface;474;;170762;d738d295ada6b1f409db6776b5efe789;5,315,0,413,1,411,1,359,1,362,0;4;146;OBJECT;0,0,0,0;False;385;OBJECT;0,0,0,0;False;371;OBJECT;0,0,0,0;False;361;FLOAT;1;False;1;OBJECT;183
Node;AmplifyShaderEditor.RegisterLocalVarNode;4358;1728,-256;Half;False;Visual Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;4359;-5568,-256;Half;False;Model Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2214;2432,-192;Inherit;False;4359;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2213;2432,-256;Inherit;False;4358;Visual Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RangedFloatNode;20;2608,-640;Half;False;Property;_render_src;_render_src;578;1;[HideInInspector];Create;True;0;0;0;True;0;False;5;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;10;2432,-640;Half;False;Property;_render_cull;_render_cull;577;1;[HideInInspector];Create;True;0;3;Both;0;Back;1;Front;2;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;7;2784,-640;Half;False;Property;_render_dst;_render_dst;579;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;10;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;17;2960,-640;Half;False;Property;_render_zw;_render_zw;580;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1355;3136,-640;Half;False;Property;_render_coverage;_render_coverage;581;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;1087;3712,-640;Inherit;False;Base Compile;-1;;170770;e67c8238031dbf04ab79a5d4d63d1b4f;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;4154;2688,-256;Inherit;False;Block Render;2;;170771;a46c8f81ec84cc34b8c5bbba7c174e1d;0;3;17;OBJECT;;False;19;OBJECT;;False;125;FLOAT;0;False;20;FLOAT3;21;FLOAT3;22;FLOAT3;34;FLOAT3;77;FLOAT;26;FLOAT;27;FLOAT;108;FLOAT;109;FLOAT;72;FLOAT;28;FLOAT;71;FLOAT3;65;FLOAT;66;FLOAT;67;FLOAT;68;FLOAT;73;FLOAT3;37;FLOAT3;30;FLOAT3;32;FLOAT4;33
Node;AmplifyShaderEditor.RangedFloatNode;2267;2432,-768;Half;False;Property;_IsGeneralShader;_IsGeneralShader;582;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;4258;2656,-768;Half;False;Property;_IsSubsurfaceShader;_IsSubsurfaceShader;583;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;4355;1024,-128;Inherit;False;4302;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4290;3232,-256;Float;False;True;-1;2;TVEShaderGUICore;0;15;BOXOPHOBIC/The Visual Engine/Geometry/General Subsurface Lit;28cd5599e02859647ae1798e4fcaef6c;True;GBuffer;0;0;GBuffer;34;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;9;d3d11;metal;vulkan;xboxone;xboxseries;playstation;ps4;ps5;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefGBuffer;255;False;;255;True;_StencilWriteMaskGBuffer;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;False;True;0;True;_ZTestGBuffer;False;True;1;LightMode=GBuffer;False;False;0;;0;0;Standard;38;Surface Type;0;0;  Rendering Pass;1;0;  Refraction Model;0;0;    Blending Mode;0;0;    Blend Preserves Specular;1;0;  Back Then Front Rendering;0;0;  Transparent Depth Prepass;0;0;  Transparent Depth Postpass;0;0;  ZWrite;0;0;  Z Test;4;0;Double-Sided;0;0;Alpha Clipping;0;0;  Use Shadow Threshold;0;0;Material Type,InvertActionOnDeselection;5;638504303166630831;  Energy Conserving Specular;1;0;  Transmission,InvertActionOnDeselection;0;0;Receive Decals;1;0;Receive SSR;1;0;Receive SSR Transparent;0;0;Motion Vectors;1;0;  Add Precomputed Velocity;0;0;Specular AA;0;0;Specular Occlusion Mode;1;0;Override Baked GI;0;0;Depth Offset;0;0;  Conserative;1;0;GPU Instancing;1;0;LOD CrossFade;1;638504303211660206;Tessellation;0;0;  Phong;0;0;  Strength;0.5,False,;0;  Type;0;0;  Tess;16,False,;0;  Min;10,False,;0;  Max;25,False,;0;  Edge Length;16,False,;0;  Max Displacement;25,False,;0;Vertex Position;0;638504303223830404;0;11;True;True;True;True;True;True;False;False;False;True;True;False;;True;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4291;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;META;0;1;META;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Meta;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4292;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ShadowCaster;0;2;ShadowCaster;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;True;False;False;False;False;0;False;;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;1;LightMode=ShadowCaster;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4293;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;SceneSelectionPass;0;3;SceneSelectionPass;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=SceneSelectionPass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4294;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;DepthOnly;0;4;DepthOnly;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefDepth;255;False;;255;True;_StencilWriteMaskDepth;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=DepthOnly;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4295;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;MotionVectors;0;5;MotionVectors;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefMV;255;False;;255;True;_StencilWriteMaskMV;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=MotionVectors;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4296;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentBackface;0;6;TransparentBackface;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;True;2;5;False;;10;False;;0;1;False;;0;False;;False;False;True;3;1;False;;10;False;;0;1;False;;0;False;;False;False;True;3;1;False;;10;False;;0;1;False;;0;False;;False;False;False;True;1;False;;False;False;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelOne;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelTwo;False;False;False;False;False;True;0;True;_ZWrite;True;0;True;_ZTestTransparent;False;True;1;LightMode=TransparentBackface;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4297;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentDepthPrepass;0;7;TransparentDepthPrepass;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefDepth;255;False;;255;True;_StencilWriteMaskDepth;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=TransparentDepthPrepass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4298;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentDepthPostpass;0;8;TransparentDepthPostpass;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;True;False;False;False;False;0;False;;False;False;False;False;False;False;False;False;False;True;1;False;;False;False;True;1;LightMode=TransparentDepthPostpass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4299;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Forward;0;9;Forward;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;True;2;5;False;;10;False;;0;1;False;;0;False;;False;False;True;1;1;False;;0;True;_DstBlend2;0;1;False;;0;False;;False;False;True;1;1;False;;0;True;_DstBlend2;0;1;False;;0;False;;False;False;False;True;0;True;_CullModeForward;False;False;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelOne;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelTwo;False;False;False;True;True;0;True;_StencilRef;255;False;;255;True;_StencilWriteMask;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;0;True;_ZWrite;True;0;True;_ZTestDepthEqualForOpaque;False;True;1;LightMode=Forward;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;4300;3232,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ScenePickingPass;0;10;ScenePickingPass;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;True;3;False;;False;True;1;LightMode=Picking;False;False;0;;0;0;Standard;0;False;0
WireConnection;4302;0;4301;314
WireConnection;4304;0;4301;128
WireConnection;4305;206;4303;0
WireConnection;4308;0;4305;151
WireConnection;4309;146;4306;0
WireConnection;4312;225;4307;0
WireConnection;4314;146;4309;128
WireConnection;4317;585;4312;106
WireConnection;4317;633;4310;0
WireConnection;4317;974;4311;0
WireConnection;4318;146;4314;128
WireConnection;4318;186;4313;0
WireConnection;4320;585;4317;552
WireConnection;4320;633;4315;0
WireConnection;4320;971;4316;0
WireConnection;4321;146;4318;128
WireConnection;4321;212;4361;0
WireConnection;4323;144;4320;552
WireConnection;4323;204;4319;0
WireConnection;4324;0;4321;1903
WireConnection;4326;144;4323;116
WireConnection;4326;222;4322;0
WireConnection;4330;144;4326;116
WireConnection;4330;222;4325;0
WireConnection;4331;22;4327;0
WireConnection;4334;198;4330;116
WireConnection;4334;223;4329;0
WireConnection;4334;207;4328;0
WireConnection;4335;0;4331;0
WireConnection;4336;279;4334;204
WireConnection;4336;297;4333;0
WireConnection;4336;281;4332;0
WireConnection;4340;144;4336;346
WireConnection;4340;212;4337;0
WireConnection;4343;572;4340;116
WireConnection;4343;596;4338;0
WireConnection;4343;600;4339;0
WireConnection;4346;572;4343;566
WireConnection;4346;596;4342;0
WireConnection;4346;600;4341;0
WireConnection;4348;572;4346;566
WireConnection;4348;596;4345;0
WireConnection;4348;600;4344;0
WireConnection;4350;572;4348;566
WireConnection;4350;596;4347;0
WireConnection;4352;146;4321;128
WireConnection;4353;146;4350;566
WireConnection;4353;148;4351;0
WireConnection;4353;178;4349;0
WireConnection;4356;146;4352;128
WireConnection;4357;146;4356;128
WireConnection;4360;146;4353;183
WireConnection;4360;371;4354;0
WireConnection;4358;0;4360;183
WireConnection;4359;0;4357;128
WireConnection;4154;17;2213;0
WireConnection;4154;19;2214;0
WireConnection;4290;0;4154;21
WireConnection;4290;1;4154;22
WireConnection;4290;6;4154;34
WireConnection;4290;7;4154;27
WireConnection;4290;8;4154;26
WireConnection;4290;9;4154;28
WireConnection;4290;16;4154;67
WireConnection;4290;61;4154;66
WireConnection;4290;62;4154;68
WireConnection;4290;11;4154;30
WireConnection;4290;12;4154;32
WireConnection;4290;27;4154;33
ASEEND*/
//CHKSM=7C35913708D860FB529E95D63521EA48FE279AC6
