// Made with Amplify Shader Editor v1.9.8
// Available at the Unity Asset Store - http://u3d.as/y3X 
Shader "BOXOPHOBIC/The Visual Engine/Geometry/General Simple Lit"
{
	Properties
	{
		[HideInInspector]_motion_highlight_color("_motion_highlight_color", Vector) = (0,0,0,0)
		[HideInInspector]_SpecColor("Specular Color", Color) = (1,1,1,1)
		[HideInInspector]_IsVersion("_IsVersion", Float) = 2050
		[HideInInspector]_IsTVEShader("_IsTVEShader", Float) = 1
		[HideInInspector]_IsShared("_IsShared", Float) = 0
		[HideInInspector]_IsIdentifier("_IsIdentifier", Float) = 0
		[HideInInspector]_IsCollected("_IsCollected", Float) = 0
		[HideInInspector]_IsConverted("_IsConverted", Float) = 0
		[HideInInspector]_IsCustomShader("_IsCustomShader", Float) = 0
		[HideInInspector]_HasDefaultTextures("_HasDefaultTextures", Float) = 0
		[HideInInspector]_MainTex("Legacy MainTex", 2D) = "white" {}
		[HideInInspector]_BumpMap("Legacy BumpMap", 2D) = "white" {}
		[HideInInspector]_Cutoff("Legacy Cutoff", Float) = 0.5
		[HideInInspector]_Color("Legacy Color", Color) = (0,0,0,0)
		[StyledCategory(Render Settings, true, 0, 10)]_RenderCategory("[ Render Category ]", Float) = 1
		[Enum(Opaque,0,Transparent,1)]_RenderMode("Render Mode", Float) = 0
		[Enum(Off,0,On,1)]_RenderZWrite("Render ZWrite", Float) = 1
		[Enum(Both,0,Back,1,Front,2)]_RenderCull("Render Faces", Float) = 2
		[HideInInspector]_render_normal("_render_normal", Vector) = (1,1,1,0)
		[HideInInspector]_RenderQueue("Render Queue", Float) = 0
		[HideInInspector]_RenderPriority("Render Priority", Float) = 0
		[HideInInspector]_RenderBakeGI("Render BakeGI", Float) = 0
		[Enum(Off,0,On,1)]_RenderSSR("Render SSR", Float) = 0
		[Enum(Off,0,On,1)]_RenderDecals("Render Decals", Float) = 0
		[Enum(Auto,0,Off,1,On,2)]_RenderMotion("Render Motion", Float) = 0
		[Enum(Flip,0,Mirror,1,Same,2)]_RenderNormal("Render Normals", Float) = 0
		[Enum(Off,0,On,1)]_RenderSpecular("Render Specular", Float) = 1
		[Enum(Off,0,On,1)]_RenderShadow("Render Shadows", Float) = 1
		[Enum(Default,0,Point ,1,Low,2,Medium,3,High,4)]_RenderFilter("Render Filtering", Float) = 0
		[Enum(Off,0,On,1)]_RenderClip("Render Clipping", Float) = 0
		[StyledSpace(10)]_RenderEnd("[ Render End ]", Float) = 1
		[StyledCategory(Noise Settings, true, 0, 10)]_NoiseCategory("[ Noise Category ]", Float) = 1
		[NoScaleOffset][StyledTextureSingleLine]_NoiseTex3D("Noise Mask 3D", 3D) = "white" {}
		[NoScaleOffset][StyledTextureSingleLine]_NoiseTexSS("Noise Mask SS", 2D) = "white" {}
		[StyledSpace(10)]_NoiseEnd("[ Noise End ]", Float) = 1
		[StyledCategory(Object Settings, true, 0, 10)]_ObjectCategory("[ Object Category ]", Float) = 1
		[StyledMessage(Info, Use the Object Height and Radius to remap the procedural height and spherical masks when used for motion., 0, 10)]_ObjectBoundsInfo("# ObjectBoundsInfo", Float) = 0
		[Enum(Legacy,0,Standard,1)]_ObjectModelMode("Object Model Mode", Float) = 1
		[Enum(Off,0,Baked,1,Procedural,2)]_ObjectPivotMode("Object Pivots Mode", Float) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ObjectPhaseMode("Object Phase Mask", Float) = 0
		_ObjectHeightValue("Object Height Value", Range( 0 , 40)) = 1
		_ObjectRadiusValue("Object Radius Value", Range( 0 , 40)) = 1
		[HideInInspector]_object_phase_mode("_object_phase_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_ObjectEnd("[ Object End ]", Float) = 1
		[StyledCategory(Global Settings, true, 0, 10)]_GlobalCategory("[ Global Category ]", Float) = 1
		[StyledMessage(Info, Use the Pivots sliders to control if the global texture is sampled in world space or at pivot position or pivots positions when baked pivots are used., 0, 10)]_GlobalPivotInfo("# GlobalPivotInfo", Float) = 0
		[StyledEnum(Coat Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalCoatLayerValue("Global Coat Layer", Float) = 0
		[StyledEnum(Paint Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalPaintLayerValue("Global Paint Layer", Float) = 0
		[StyledEnum(Atmo Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalAtmoLayerValue("Global Atmo Layer", Float) = 0
		[StyledEnum(Fade Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalFadeLayerValue("Global Fade Layer", Float) = 0
		[StyledEnum(Glow Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalGlowLayerValue("Global Glow Layer", Float) = 0
		[StyledEnum(Form Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalFormLayerValue("Global Form Layer", Float) = 0
		[StyledEnum(Flow Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_GlobalFlowLayerValue("Global Flow Layer", Float) = 0
		_GlobalCoatPivotValue("Global Coat Pivots", Range( 0 , 1)) = 0
		_GlobalPaintPivotValue("Global Paint Pivots", Range( 0 , 1)) = 0
		_GlobalAtmoPivotValue("Global Atmo Pivots", Range( 0 , 1)) = 0
		_GlobalFadePivotValue("Global Fade Pivots", Range( 0 , 1)) = 0
		_GlobalGlowPivotValue("Global Glow Pivots", Range( 0 , 1)) = 0
		_GlobalFormPivotValue("Global Form Pivots", Range( 0 , 1)) = 1
		_GlobalFlowPivotValue("Global Flow Pivots", Range( 0 , 1)) = 1
		[StyledSpace(10)]_GlobalEnd("[ Global End ]", Float) = 1
		[StyledCategory(Main Settings, true, 0, 10)]_MainCategory("[Main Category ]", Float) = 1
		[StyledMessage(Info, Use the Multi Mask remap sliders to mask out the leaves when using Dual Colors or for Global Effects. The mask is stored in the Shader texture blue channel. , 0, 10)]_MainMultiMaskInfo("# MainMultiMaskInfo", Float) = 0
		[StyledTextureSingleLine]_MainAlbedoTex("Main Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_MainNormalTex("Main Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_MainShaderTex("Main Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_MainSampleMode("Main Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_MainCoordMode("Main UV Mode", Float) = 0
		[StyledVector(9)]_MainCoordValue("Main UV Value", Vector) = (1,1,0,0)
		[HideInInspector]_main_coord_value("_main_coord_value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_MainColorMode("Main Color", Float) = 0
		[HDR]_MainColor("Main Color", Color) = (1,1,1,1)
		[HDR]_MainColorTwo("Main ColorB", Color) = (1,1,1,1)
		_MainAlphaClipValue("Main Alpha", Range( 0 , 1)) = 0.5
		_MainAlbedoValue("Main Albedo", Range( 0 , 1)) = 1
		_MainNormalValue("Main Normal", Range( -8 , 8)) = 1
		_MainMetallicValue("Main Metallic", Range( 0 , 1)) = 0
		_MainOcclusionValue("Main Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_MainMultiRemap("Main Multi Mask", Vector) = (0,0,0,0)
		_MainSmoothnessValue("Main Smoothness", Range( 0 , 1)) = 0
		[StyledSpace(10)]_MainEnd("[Main End ]", Float) = 1
		[StyledCategory(Layer Settings, true, 0, 10)]_LayerCategory("[ Layer Category ]", Float) = 1
		_SecondIntensityValue("Layer Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_SecondBakeMode("Layer Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_SecondAlbedoTex("Layer Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_SecondNormalTex("Layer Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_SecondShaderTex("Layer Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_SecondSampleMode("Layer Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondCoordMode("Layer UV Mode", Float) = 0
		[StyledVector(9)]_SecondCoordValue("Layer UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_SecondColorMode("Layer Color", Float) = 0
		[HDR]_SecondColor("Layer Color", Color) = (1,1,1,1)
		[HDR]_SecondColorTwo("Layer ColorB", Color) = (1,1,1,1)
		_SecondAlphaClipValue("Layer Alpha", Range( 0 , 1)) = 0.5
		_SecondAlbedoValue("Layer Albedo", Range( 0 , 1)) = 1
		_SecondNormalValue("Layer Normal", Range( -8 , 8)) = 1
		_SecondMetallicValue("Layer Metallic", Range( 0 , 1)) = 0
		_SecondOcclusionValue("Layer Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondMultiRemap("Layer Multi Mask", Vector) = (0,0,0,0)
		_SecondSmoothnessValue("Layer Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_SecondBlendIntensityValue("Layer Blend Intensity", Range( 0 , 1)) = 1
		_SecondBlendAlbedoValue("Layer Blend Albedos", Range( 0 , 1)) = 0
		_SecondBlendNormalValue("Layer Blend Normals", Range( 0 , 1)) = 0
		_SecondBlendShaderValue("Layer Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_SecondMaskTex("Layer Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_SecondMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_SecondMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_SecondGlobalValue("Layer Coat Mask", Range( 0 , 1)) = 1
		_SecondMaskValue("Layer TexB Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_SecondMaskRemap("Layer TexB Mask", Vector) = (0,1,0,0)
		_SecondLumaValue("Layer Luma Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondLumaRemap("Layer Luma Mask", Vector) = (0,1,0,0)
		_SecondProjValue("Layer ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondProjRemap("Layer ProjY Mask", Vector) = (0,1,0,0)
		_SecondMeshValue("Layer Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_SecondMeshMode("Layer Mesh Mask", Float) = 2
		[StyledRemapSlider]_SecondMeshRemap("Layer Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_SecondBlendRemap("Layer Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_SecondElementMode("Use Coat Elements", Float) = 0
		[StyledSpace(10)]_LayerEnd("[ Layer End ]", Float) = 1
		[HideInInspector]_second_coord_value("_second_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_second_vert_mode("_second_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_second_mask_coord_value("_second_mask_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Detail Settings, true, 0, 10)]_DetailCategory("[ Detail Category ]", Float) = 1
		_ThirdIntensityValue("Detail Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_ThirdBakeMode("Detail Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_ThirdAlbedoTex("Detail Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_ThirdNormalTex("Detail Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_ThirdShaderTex("Detail Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_ThirdSampleMode("Detail Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdCoordMode("Detail UV Mode", Float) = 0
		[StyledVector(9)]_ThirdCoordValue("Detail UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_ThirdColorMode("Detail Color", Float) = 0
		[HDR]_ThirdColor("Detail Color", Color) = (1,1,1,1)
		[HDR]_ThirdColorTwo("Detail ColorB", Color) = (1,1,1,1)
		_ThirdAlphaClipValue("Detail Alpha", Range( 0 , 1)) = 0.5
		_ThirdAlbedoValue("Detail Albedo", Range( 0 , 1)) = 1
		_ThirdNormalValue("Detail Normal", Range( -8 , 8)) = 1
		_ThirdMetallicValue("Detail Metallic", Range( 0 , 1)) = 0
		_ThirdOcclusionValue("Detail Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdMultiRemap("Detail Multi Mask", Vector) = (0,0,0,0)
		_ThirdSmoothnessValue("Detail Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_ThirdBlendIntensityValue("Detail Blend Intensity", Range( 0 , 1)) = 1
		_ThirdBlendAlbedoValue("Detail Blend Albedos", Range( 0 , 1)) = 0
		_ThirdBlendNormalValue("Detail Blend Normals", Range( 0 , 1)) = 0
		_ThirdBlendShaderValue("Detail Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_ThirdMaskTex("Detail Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_ThirdMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_ThirdMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_ThirdGlobalValue("Detail Coat Mask", Range( 0 , 1)) = 1
		_ThirdMaskValue("Detail TexG Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_ThirdMaskRemap("Detail TexG Mask", Vector) = (0,1,0,0)
		_ThirdLumaValue("Detail Luma Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdLumaRemap("Detail Luma Mask", Vector) = (0,1,0,0)
		_ThirdProjValue("Detail ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdProjRemap("Detail ProjY Mask", Vector) = (0,1,0,0)
		_ThirdMeshValue("Detail Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ThirdMeshMode("Detail Mesh Mask", Float) = 1
		[StyledRemapSlider]_ThirdMeshRemap("Detail Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_ThirdBlendRemap("Detail Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_ThirdElementMode("Use Coat Elements", Float) = 0
		[HideInInspector]_third_coord_value("_third_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_third_vert_mode("_third_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_third_mask_coord_value("_third_mask_coord_value", Vector) = (1,1,0,0)
		[StyledSpace(10)]_DetailEnd("[ Detail End ]", Float) = 1
		[StyledCategory(Occlusion Settings, true, 0, 10)]_OcclusionCategory("[ Occlusion Category ]", Float) = 1
		_OcclusionIntensityValue("Occlusion Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_OcclusionBakeMode("Occlusion Baking", Float) = 1
		[HDR]_OcclusionColorOne("Occlusion ColorA", Color) = (1,1,1,1)
		[HDR]_OcclusionColorTwo("Occlusion ColorB", Color) = (0.25,0.25,0.25,1)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)][Space(10)]_OcclusionMeshMode("Occlusion Mesh Mask", Float) = 1
		[StyledRemapSlider]_OcclusionMeshRemap("Occlusion Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_OcclusionEnd("[ Occlusion End ]", Float) = 1
		[HideInInspector]_occlusion_vert_mode("_occlusion_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Gradient Settings, true, 0, 10)]_GradientCategory("[ Gradient Category ]", Float) = 1
		_GradientIntensityValue("Gradient Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_GradientBakeMode("Gradient Baking", Float) = 1
		[HDR]_GradientColorOne("Gradient ColorA", Color) = (1,0.6135602,0,1)
		[HDR]_GradientColorTwo("Gradient ColorB", Color) = (0.754717,0.0389044,0.03203986,1)
		[Space(10)]_GradientMultiValue("Gradient Multi Mask", Range( 0 , 1)) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_GradientMeshMode("Gradient Mesh Mask", Float) = 3
		[StyledRemapSlider]_GradientMeshRemap("Gradient Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_GradientEnd("[ Gradient End ]", Float) = 1
		[HideInInspector]_gradient_vert_mode("_gradient_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Variation Settings, true, 0, 10)]_VariationCategory("[ Variation Category ]", Float) = 1
		_VariationIntensityValue("Variation Intensity", Range( 0 , 1)) = 0
		[HDR]_VariationColorOne("Variation ColorA", Color) = (0.4573758,0.6226415,0.2144001,1)
		[HDR]_VariationColorTwo("Variation ColorB", Color) = (0.7450981,0.5238863,0.1098039,1)
		[Space(10)]_VariationMultiValue("Variation Multi Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider()]_VariationNoiseRemap("Variation Noise Mask", Vector) = (0,1,0,0)
		_VariationNoiseTillingValue("Variation Noise Tilling", Range( 0 , 100)) = 10
		_VariationNoisePivotValue("Variation Noise Pivots", Range( 0 , 1)) = 0
		[StyledSpace(10)]_VariationEnd("[ Variation End ]", Float) = 1
		[StyledCategory(Tinting Settings, true, 0, 10)]_TintingCategory("[ Tinting Category ]", Float) = 1
		_TintingIntensityValue("Tinting Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_TintingBakeMode("Tinting Baking", Float) = 0
		_TintingGrayValue("Tinting Gray", Range( 0 , 1)) = 1
		[HDR][Gamma]_TintingColor("Tinting Color", Color) = (1,1,1,1)
		[StyledSpace(10)]_TintingSpace("[ Tinting Space ]", Float) = 1
		_TintingGlobalValue("Tinting Paint Mask", Range( 0 , 1)) = 1
		_TintingMultiValue("Tinting Multi Mask", Range( 0 , 1)) = 1
		_TintingLumaValue("Tinting Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_TintingLumaRemap("Tinting Luma Mask", Vector) = (0,1,0,0)
		_TintingMeshValue("Tinting Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_TintingMeshMode("Tinting Mesh Mask", Float) = 3
		[StyledRemapSlider]_TintingMeshRemap("Tinting Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_TintingBlendRemap("Tinting Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_TintingElementMode("Use Paint Elements", Float) = 0
		[StyledSpace(10)]_TintingEnd("[ Tinting End]", Float) = 1
		[HideInInspector]_tinting_vert_mode("_tinting_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Dryness Settings, true, 0, 10)]_DrynessCategory("[ Dryness Category ]", Float) = 1
		_DrynessIntensityValue("Dryness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_DrynessBakeMode("Dryness Baking", Float) = 0
		_DrynessGrayValue("Dryness Gray", Range( 0 , 1)) = 1
		[HDR][Gamma]_DrynessColor("Dryness Color", Color) = (1,0.7083712,0.495283,1)
		_DrynessSubsurfaceValue("Dryness Subsurface", Range( 0 , 1)) = 0.5
		_DrynessSmoothnessValue("Dryness Smoothness", Range( 0 , 1)) = 0.5
		[StyledSpace(10)]_DrynessSpace("[ Dryness Space ]", Float) = 1
		_DrynessGlobalValue("Dryness Atmo Mask", Range( 0 , 1)) = 1
		_DrynessMultiValue("Dryness Multi Mask", Range( 0 , 1)) = 1
		_DrynessLumaValue("Dryness Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_DrynessLumaRemap("Dryness Luma Mask", Vector) = (0,1,0,0)
		_DrynessMeshValue("Dryness Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_DrynessMeshMode("Dryness Mesh Mask", Float) = 3
		[StyledRemapSlider]_DrynessMeshRemap("Dryness Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_DrynessBlendRemap("Dryness Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_DrynessElementMode("Use Atmo Elements", Float) = 0
		[StyledSpace(10)]_DrynessEnd("[ Dryness End ]", Float) = 1
		[HideInInspector]_dryness_vert_mode("_dryness_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Overlay Settings, true, 0, 10)]_OverlayCategory("[ Overlay Category ]", Float) = 1
		_OverlayIntensityValue("Overlay Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_OverlayBakeMode("Overlay Baking", Float) = 0
		[Enum(Off,0,On,1)]_OverlayTextureMode("Overlay Maps", Float) = 0
		[Space(10)][StyledTextureSingleLine]_OverlayAlbedoTex("Overlay Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_OverlayNormalTex("Overlay Normal", 2D) = "bump" {}
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochastic Triplanar,3)][Space(10)]_OverlaySampleMode("Overlay Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_OverlayCoordMode("Overlay UV Mode", Float) = 0
		[StyledVector(9)]_OverlayCoordValue("Overlay UV Value", Vector) = (1,1,0,0)
		[HDR]_OverlayColor("Overlay Color", Color) = (0.2815503,0.4009458,0.5377358,1)
		_OverlayNormalValue("Overlay Normal", Range( -8 , 8)) = 1
		_OverlaySubsurfaceValue("Overlay Subsurface", Range( 0 , 1)) = 0.5
		_OverlaySmoothnessValue("Overlay Smoothness", Range( 0 , 1)) = 0.5
		[Space(10)][StyledTextureSingleLine]_OverlayGlitterTexRT("Overlay Glitter RT", 2D) = "black" {}
		[Space(10)]_OverlayGlitterIntensityValue("Overlay Glitter Intensity", Range( 0 , 1)) = 0
		[HDR]_OverlayGlitterColor("Overlay Glitter Color", Color) = (0.7215686,1.913725,2.996078,1)
		_OverlayGlitterTillingValue("Overlay Glitter Tilling", Range( 0 , 8)) = 4
		_OverlayGlitterDistValue("Overlay Glitter Limit", Range( 0 , 200)) = 100
		_OverlayGlitterAttenValue("Overlay Glitter Atten Mask", Range( 0 , 1)) = 0
		[StyledSpace(10)]_OverlaySpace("[ Overlay Space ]", Float) = 1
		_OverlayGlobalValue("Overlay Atmo Mask", Range( 0 , 1)) = 1
		_OverlayLumaValue("Overlay Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_OverlayLumaRemap("Overlay Luma Mask", Vector) = (0,1,0,0)
		_OverlayProjValue("Overlay ProjY Mask", Range( 0 , 1)) = 0.5
		[StyledRemapSlider]_OverlayProjRemap("Overlay ProjY Mask", Vector) = (0,1,0,0)
		_OverlayMeshValue("Overlay Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_OverlayMeshMode("Overlay Mesh Mask", Float) = 1
		[StyledRemapSlider]_OverlayMeshRemap("Overlay Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_OverlayBlendRemap("Overlay Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_OverlayElementMode("Use Atmo Elements", Float) = 0
		[HideInInspector]_overlay_vert_mode("_overlay_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_overlay_coord_value("_overlay_coord_value", Vector) = (1,1,0,0)
		[StyledSpace(10)]_OverlayEnd("[ Overlay End ]", Float) = 1
		[StyledCategory(Wetness Settings, true, 0, 10)]_WetnessCategory("[ Wetness Category ]", Float) = 1
		_WetnessIntensityValue("Wetness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_WetnessBakeMode("Wetness Baking", Float) = 0
		_WetnessContrastValue("Wetness Contrast", Range( 0 , 1)) = 0.2
		_WetnessSmoothnessValue("Wetness Smoothness", Range( 0 , 1)) = 0.8
		[Space(10)]_WetnessGlobalValue("Wetness Atmo Mask", Range( 0 , 1)) = 1
		_WetnessMeshValue("Wetness Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_WetnessMeshMode("Wetness Mesh Mask", Float) = 0
		[StyledRemapSlider]_WetnessMeshRemap("Wetness Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)]_WetnessWaterIntensityValue("Wetness Water Intensity", Range( 0 , 1)) = 0
		[HDR]_WetnessWaterColor("Wetness Water Color", Color) = (0.5420078,0.7924528,0.6068289,1)
		_WetnessWaterBaseValue("Wetness Water Base Mask", Range( 0 , 1)) = 1
		_WetnessWaterMeshValue("Wetness Water Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_WetnessWaterMeshMode("Wetness Water Mesh Mask", Float) = 1
		[StyledRemapSlider]_WetnessWaterMeshRemap("Wetness Water Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_WetnessWaterBlendRemap("Wetness Water Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledTextureSingleLine]_WetnessDropsTexRT("Wetness Drops RT", 2D) = "white" {}
		[Space(10)]_WetnessDropsIntensityValue("Wetness Drops Intensity", Range( 0 , 1)) = 1
		_WetnessDropsNormalValue("Wetness Drops Normal", Range( -8 , 8)) = 1
		_WetnessDropsTillingValue("Wetness Drops Tilling", Range( 0 , 8)) = 0.25
		_WetnessDropsDistValue("Wetness Drops Limit", Range( 0 , 200)) = 50
		_WetnessDropsMeshValue("Wetness Drops Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_WetnessDropsMeshMode("Wetness Drops Mesh Mask", Float) = 2
		[StyledRemapSlider]_WetnessDropsMeshRemap("Wetness Drops Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_WetnessElementMode("Use Atmo Elements", Float) = 0
		[HideInInspector]_wetness_water_vert_mode("_wetness_water_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_wetness_vert_mode("_wetness_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_wetness_drops_vert_mode("_wetness_drops_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_WetnessEnd("[ Wetness End ]", Float) = 1
		[StyledCategory(Cutout Settings, true, 0, 10)]_CutoutCategory("[ Cutout Category ]", Float) = 1
		_CutoutIntensityValue("Cutout Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_CutoutBakeMode("Cutout Baking", Float) = 0
		_CutoutMultiValue("Cutout Multi Mask", Range( 0 , 1)) = 1
		[Space(10)]_CutoutGlobalValue("Cutout Fade Mask", Range( 0 , 1)) = 1
		_CutoutAlphaValue("Cutout Alpha Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_CutoutMeshMode("Cutout Mesh Mask", Float) = 0
		_CutoutMeshValue("Cutout Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_CutoutMeshRemap("Cutout Mesh Mask", Vector) = (0,1,0,0)
		_CutoutNoiseValue("Cutout Noise Mask", Range( 0 , 1)) = 1
		_CutoutNoiseTillingValue("Cutout Noise Tilling", Range( 0 , 100)) = 50
		[Space(10)][StyledToggle]_CutoutElementMode("Use Fade Elements", Float) = 0
		[HideInInspector]_cutout_vert_mode("_cutout_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_CutoutEnd("[ Cutout End ]", Float) = 1
		[StyledCategory(Dither Settings, true, 0, 10)]_DitherCategory("[ Dither Category ]", Float) = 1
		_DitherConstantValue("Dither Constant", Range( 0 , 1)) = 0
		_DitherProximityValue("Dither Proximity", Range( 0 , 1)) = 0
		_DitherProximityMinValue("Dither Proximity Start", Range( 0 , 40)) = 0
		_DitherProximityMaxValue("Dither Proximity Limit", Range( 0 , 40)) = 1
		_DitherDistanceValue("Dither Distance", Range( 0 , 1)) = 0
		_DitherDistanceMinValue("Dither Distance Start", Range( 0 , 1000)) = 0
		_DitherDistanceMaxValue("Dither Distance Limit", Range( 0 , 1000)) = 0
		_DitherGlancingValue("Dither Glancing", Range( 0 , 1)) = 0
		_DitherGlancingAngleValue("Dither Glanging Angle", Range( 0 , 8)) = 1
		[Space(10)]_DitherMultiValue("Dither Multi Mask", Range( 0 , 1)) = 1
		_DitherNoiseTillingValue("Dither Noise Tilling", Range( 0 , 100)) = 50
		[StyledSpace(10)]_DitherEnd("[ Dither End ]", Float) = 1
		[StyledCategory(Emissive Settings, true, 0, 10)]_EmissiveCategory("[ Emissive Category ]", Float) = 1
		_EmissiveIntensityValue("Emissive Intensity", Range( 0 , 1)) = 0
		[Enum(None,0,Any,1,Baked,2,Realtime,3)]_EmissiveFlagMode("Emissive GI Mode", Float) = 0
		[Enum(Constant,0,Multiply With Base Albedo,1)]_EmissiveColorMode("Emissive Color", Float) = 0
		[HDR]_EmissiveColor("Emissive Color", Color) = (1,1,1,1)
		[Enum(Nits,0,EV100,1)]_EmissivePowerMode("Emissive Value", Float) = 0
		_EmissivePowerValue("Emissive Value", Float) = 1
		[Space(10)][StyledTextureSingleLine]_EmissiveMaskTex("Emissive Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)]_EmissiveSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_EmissiveCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(18)]_EmissiveCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		[Space(10)]_EmissiveGlobalValue("Emissive Glow Mask", Range( 0 , 1)) = 1
		_EmissiveMaskValue("Emissive TexR Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_EmissiveMaskRemap("Emissive TexR Mask", Vector) = (0,1,0,0)
		_EmissiveMeshValue("Emissive Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_EmissiveMeshMode("Emissive Mesh Mask", Float) = 0
		[StyledRemapSlider]_EmissiveMeshRemap("Emissive Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_EmissiveElementMode("Use Glow Elements", Float) = 0
		[StyledSpace(10)]_EmissiveEnd("[ Emissive End ]", Float) = 1
		[HideInInspector]_emissive_power_value("_emissive_power_value", Float) = 1
		[HideInInspector]_emissive_vert_mode("_emissive_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_emissive_coord_value("_emissive_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Subsurface Settings, true, 0, 10)]_SubsurfaceCategory("[ Subsurface Category ]", Float) = 1
		[StyledMessage(Info, When using Standard Lit shaders__ the Subsurface feature is an approximation effect designed to work in deferred rendering path., 0, 10)]_SubsurfaceAproxInfo("# Subsurface Aprox Info", Float) = 0
		[DiffusionProfile]_SubsurfaceDiffusion("Subsurface Diffusion", Float) = 0
		[HideInInspector]_SubsurfaceDiffusion_Asset("Subsurface Diffusion", Vector) = (0,0,0,0)
		[StyledSpace(10)]_SubsurfaceSpace("# SubsurfaceSpace", Float) = 0
		_SubsurfaceIntensityValue("Subsurface Intensity", Range( 0 , 1)) = 0
		[HDR]_SubsurfaceColor("Subsurface Color", Color) = (1,1,1,1)
		_SubsurfaceScatteringValue("Subsurface Value", Range( 0 , 16)) = 2
		_SubsurfaceAngleValue("Subsurface Angle", Range( 1 , 16)) = 8
		_SubsurfaceDirectValue("Subsurface Direct", Range( 0 , 1)) = 1
		_SubsurfaceNormalValue("Subsurface Normal", Range( 0 , 1)) = 0
		_SubsurfaceAmbientValue("Subsurface Ambient", Range( 0 , 1)) = 0.2
		_SubsurfaceShadowValue("Subsurface Shadow", Range( 0 , 1)) = 1
		[Space(10)]_SubsurfaceGlobalValue("Subsurface Glow Mask", Range( 0 , 1)) = 1
		_SubsurfaceMultiValue("Subsurface Multi Mask", Range( 0 , 1)) = 1
		[Space(10)][StyledToggle]_SubsurfaceElementMode("Use Glow Elements", Float) = 0
		[StyledSpace(10)]_SubsurfaceEnd("[ Subsurface End ]", Float) = 1
		[StyledCategory(Perspective Settings, true, 0, 10)]_PerspectiveCategory("[ Perspective Category ]", Float) = 1
		_PerspectiveIntensityValue("Perspective Intensity", Range( 0 , 8)) = 0
		_PerspectiveAngleValue("Perspective Angle", Range( 0 , 8)) = 1
		[StyledSpace(10)]_PerspectiveEnd("[ Perspective End ]", Float) = 1
		[StyledCategory(Size Fade Settings, true, 0, 10)]_SizeFadeCategory("[ Size Fade Category ]", Float) = 1
		_SizeFadeIntensityValue("Size Fade Intensity", Range( 0 , 1)) = 0
		[Enum(All Axis,0,Y Axis,1)]_SizeFadeScaleMode("Size Fade Mode", Float) = 0
		_SizeFadeScaleValue("Size Fade Value", Range( 0 , 1)) = 1
		_SizeFadeDistMinValue("Size Fade Start", Range( 0 , 1000)) = 0
		_SizeFadeDistMaxValue("Size Fade Limit", Range( 0 , 1000)) = 0
		[Space(10)]_SizeFadeGlobalValue("Size Fade Form Mask", Range( 0 , 1)) = 1
		[Space(10)][StyledToggle]_SizeFadeElementMode("Use Form Elements", Float) = 0
		[StyledSpace(10)]_SizeFadeEnd("[ Size Fade End ]", Float) = 1
		[StyledCategory(Motion Settings, true, 0, 10)]_MotionCategory("[ Motion Category ]", Float) = 1
		[StyledMessage(Info, The Interaction features require elements to work. Use Flow elements to add interaction and use the Push Mask slider to control the interaction amount per motion layer., 0, 10)]_MotionPushInfo("# Message Push", Float) = 0
		[NoScaleOffset][StyledTextureSingleLine]_MotionNoiseTex("Motion Texture", 2D) = "white" {}
		[Space(10)]_MotionIntensityValue("Motion Intensity", Range( 0 , 1)) = 1
		_MotionDistValue("Motion Details Limit", Range( 0 , 1000)) = 100
		[Space(10)]_MotionBaseIntensityValue("Motion Primary Intensity", Range( 0 , 10)) = 0
		_MotionBaseDelayValue("Motion Primary Delay", Range( 0 , 1)) = 0
		_MotionBaseNoiseValue("Motion Primary Noise", Range( 0 , 1)) = 0.5
		_MotionBasePivotValue("Motion Primary Pivots", Range( 0 , 1)) = 0.8
		_MotionBasePhaseValue("Motion Primary Phase", Range( 0 , 1)) = 0
		_MotionBaseTillingValue("Motion Primary Tilling", Range( 0 , 100)) = 5
		_MotionBaseSpeedValue("Motion Primary Speed", Range( 0 , 50)) = 5
		_MotionBasePushValue("Motion Primary Push Mask", Range( 0 , 1)) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionBaseMaskMode("Motion Primary Anim Mask", Float) = 3
		[StyledRemapSlider]_MotionBaseMaskRemap("Motion Primary Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionSmallIntensityValue("Motion Second Intensity", Range( 0 , 10)) = 0
		_MotionSmallDelayValue("Motion Second Delay", Range( 0 , 1)) = 0
		_MotionSmallNoiseValue("Motion Second Noise", Range( 0 , 1)) = 0.5
		_MotionSmallPivotValue("Motion Second Pivots", Range( 0 , 1)) = 0.2
		_MotionSmallPhaseValue("Motion Second Phase", Range( 0 , 1)) = 0
		_MotionSmallTillingValue("Motion Second Tilling", Range( 0 , 100)) = 5
		_MotionSmallSpeedValue("Motion Second Speed", Range( 0 , 50)) = 5
		_MotionSmallPushValue("Motion Second Push Mask", Range( 0 , 1)) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionSmallMaskMode("Motion Second Anim Mask", Float) = 1
		[StyledRemapSlider]_MotionSmallMaskRemap("Motion Second Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionTinyIntensityValue("Motion Leaves Intensity", Range( 0 , 10)) = 0
		_MotionTinyNoiseValue("Motion Leaves Noise", Range( 0 , 1)) = 1
		_MotionTinyTillingValue("Motion Leaves Tilling", Range( 0 , 100)) = 50
		_MotionTinySpeedValue("Motion Leaves Speed", Range( 0 , 50)) = 10
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionTinyMaskMode("Motion Leaves Anim Mask", Float) = 2
		[StyledRemapSlider]_MotionTinyMaskRemap("Motion Leaves Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionHighlightValue("Motion Ripples Intensity", Range( 0 , 1)) = 0
		[HDR]_MotionHighlightColor("Motion Ripples Color", Color) = (1,1,1,1)
		[Space(10)][StyledToggle]_MotionElementMode("Use Flow Elements", Float) = 0
		[StyledSpace(10)]_MotionWindEnd("[ Motion Wind End ]", Float) = 1
		[HideInInspector]_motion_base_mask_mode("_motion_base_mask_mode", Float) = 0
		[HideInInspector]_motion_base_vert_mode("_motion_base_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_base_proc_mode("_motion_base_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_mask_mode("_motion_small_mask_mode", Float) = 0
		[HideInInspector]_motion_small_vert_mode("_motion_small_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_proc_mode("_motion_small_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_mask_mode("_motion_tiny_mask_mode", Float) = 0
		[HideInInspector]_motion_tiny_vert_mode("_motion_tiny_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_proc_mode("_motion_tiny_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_mode("_motion_small_mode", Float) = 0
		[StyledCategory(Normal Settings, true, 0, 10)]_NormalCategory("[ Normal Category ]", Float) = 1
		_NormalFlattenValue("Normal Flattening", Range( 0 , 1)) = 0
		_NormalSphereValue("Normal Spherical", Range( 0 , 1)) = 0
		[StyledVector(18)]_NormalSphereOffsetValue("Normal Spherical Offset", Vector) = (0,0,0,0)
		_NormalComputeValue("Normal Compute", Range( 0 , 1)) = 0
		[StyledSpace(10)]_NormalSpace("[ Normal Space ]", Float) = 1
		_NormalMeshValue("Normal Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_NormalMeshMode("Normal Mesh Mask", Float) = 2
		[StyledRemapSlider]_NormalMeshRemap("Normal Mesh Mask", Vector) = (0,1,0,0)
		[HideInInspector]_normal_vert_mode("_normal_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_NormalEnd("[ Normal End ]", Float) = 1
		[HideInInspector]_render_cull("_render_cull", Float) = 0
		[HideInInspector]_render_src("_render_src", Float) = 1
		[HideInInspector]_render_dst("_render_dst", Float) = 0
		[HideInInspector]_render_zw("_render_zw", Float) = 1
		[HideInInspector]_render_coverage("_render_coverage", Float) = 0
		[HideInInspector]_IsGeneralShader("_IsGeneralShader", Float) = 1
		[HideInInspector]_IsSimpleShader("_IsSimpleShader", Float) = 1

		//_TransmissionShadow( "Transmission Shadow", Range( 0, 1 ) ) = 0.5
		//_TransStrength( "Trans Strength", Range( 0, 50 ) ) = 1
		//_TransNormal( "Trans Normal Distortion", Range( 0, 1 ) ) = 0.5
		//_TransScattering( "Trans Scattering", Range( 1, 50 ) ) = 2
		//_TransDirect( "Trans Direct", Range( 0, 1 ) ) = 0.9
		//_TransAmbient( "Trans Ambient", Range( 0, 1 ) ) = 0.1
		//_TransShadow( "Trans Shadow", Range( 0, 1 ) ) = 0.5
		//_TessPhongStrength( "Tess Phong Strength", Range( 0, 1 ) ) = 0.5
		//_TessValue( "Tess Max Tessellation", Range( 1, 32 ) ) = 16
		//_TessMin( "Tess Min Distance", Float ) = 10
		//_TessMax( "Tess Max Distance", Float ) = 25
		//_TessEdgeLength ( "Tess Edge length", Range( 2, 50 ) ) = 16
		//_TessMaxDisp( "Tess Max Displacement", Float ) = 25
		//[ToggleOff] _SpecularHighlights("Specular Highlights", Float) = 1.0
		//[ToggleOff] _GlossyReflections("Reflections", Float) = 1.0
	}

	SubShader
	{
		
		Tags { "RenderType"="Opaque" "Queue"="Geometry" "DisableBatching"="False" }
	LOD 0

		Cull [_render_cull]
		AlphaToMask Off
		ZWrite [_render_zw]
		ZTest LEqual
		ColorMask RGBA
		
		Blend [_render_src] [_render_dst]
		

		CGINCLUDE
		#pragma target 4.5

		float4 FixedTess( float tessValue )
		{
			return tessValue;
		}

		float CalcDistanceTessFactor (float4 vertex, float minDist, float maxDist, float tess, float4x4 o2w, float3 cameraPos )
		{
			float3 wpos = mul(o2w,vertex).xyz;
			float dist = distance (wpos, cameraPos);
			float f = clamp(1.0 - (dist - minDist) / (maxDist - minDist), 0.01, 1.0) * tess;
			return f;
		}

		float4 CalcTriEdgeTessFactors (float3 triVertexFactors)
		{
			float4 tess;
			tess.x = 0.5 * (triVertexFactors.y + triVertexFactors.z);
			tess.y = 0.5 * (triVertexFactors.x + triVertexFactors.z);
			tess.z = 0.5 * (triVertexFactors.x + triVertexFactors.y);
			tess.w = (triVertexFactors.x + triVertexFactors.y + triVertexFactors.z) / 3.0f;
			return tess;
		}

		float CalcEdgeTessFactor (float3 wpos0, float3 wpos1, float edgeLen, float3 cameraPos, float4 scParams )
		{
			float dist = distance (0.5 * (wpos0+wpos1), cameraPos);
			float len = distance(wpos0, wpos1);
			float f = max(len * scParams.y / (edgeLen * dist), 1.0);
			return f;
		}

		float DistanceFromPlane (float3 pos, float4 plane)
		{
			float d = dot (float4(pos,1.0f), plane);
			return d;
		}

		bool WorldViewFrustumCull (float3 wpos0, float3 wpos1, float3 wpos2, float cullEps, float4 planes[6] )
		{
			float4 planeTest;
			planeTest.x = (( DistanceFromPlane(wpos0, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[0]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.y = (( DistanceFromPlane(wpos0, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[1]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.z = (( DistanceFromPlane(wpos0, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[2]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.w = (( DistanceFromPlane(wpos0, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[3]) > -cullEps) ? 1.0f : 0.0f );
			return !all (planeTest);
		}

		float4 DistanceBasedTess( float4 v0, float4 v1, float4 v2, float tess, float minDist, float maxDist, float4x4 o2w, float3 cameraPos )
		{
			float3 f;
			f.x = CalcDistanceTessFactor (v0,minDist,maxDist,tess,o2w,cameraPos);
			f.y = CalcDistanceTessFactor (v1,minDist,maxDist,tess,o2w,cameraPos);
			f.z = CalcDistanceTessFactor (v2,minDist,maxDist,tess,o2w,cameraPos);

			return CalcTriEdgeTessFactors (f);
		}

		float4 EdgeLengthBasedTess( float4 v0, float4 v1, float4 v2, float edgeLength, float4x4 o2w, float3 cameraPos, float4 scParams )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;
			tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
			tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
			tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
			tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			return tess;
		}

		float4 EdgeLengthBasedTessCull( float4 v0, float4 v1, float4 v2, float edgeLength, float maxDisplacement, float4x4 o2w, float3 cameraPos, float4 scParams, float4 planes[6] )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;

			if (WorldViewFrustumCull(pos0, pos1, pos2, maxDisplacement, planes))
			{
				tess = 0.0f;
			}
			else
			{
				tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
				tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
				tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
				tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			}
			return tess;
		}
		ENDCG

		
		Pass
		{
			
			Name "ForwardBase"
			Tags { "LightMode"="ForwardBase" }

			Blend [_render_src] [_render_dst]

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma shader_feature_local_fragment _ _SPECULARHIGHLIGHTS_OFF
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define _SPECULAR_SETUP 1
			#define ASE_LIGHTING_SIMPLE 1
			#define _ENVIRONMENTREFLECTIONS_OFF 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_VERSION 19800
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma multi_compile_fwdbase
			#ifndef UNITY_PASS_FORWARDBASE
				#define UNITY_PASS_FORWARDBASE
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "AutoLight.cginc"

			#include "UnityStandardBRDF.cginc"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 FlowParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex3D(tex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#if defined(LIGHTMAP_ON) || (!defined(LIGHTMAP_ON) && SHADER_TARGET >= 30)
					float4 lmap : TEXCOORD0;
				#endif
				#if !defined(LIGHTMAP_ON) && UNITY_SHOULD_SAMPLE_SH
					half3 sh : TEXCOORD1;
				#endif
				#if defined(UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS) && UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHTING_COORDS(2,3)
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_SHADOW_COORDS(2)
					#else
						SHADOW_COORDS(2)
					#endif
				#endif
				#ifdef ASE_FOG
					UNITY_FOG_COORDS(4)
				#endif
				float4 tSpace0 : TEXCOORD5;
				float4 tSpace1 : TEXCOORD6;
				float4 tSpace2 : TEXCOORD7;
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 screenPos : TEXCOORD8;
				#endif
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				float4 ase_texcoord12 : TEXCOORD12;
				float4 ase_color : COLOR;
				float4 ase_texcoord13 : TEXCOORD13;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceSpace;
			uniform half _SubsurfaceScatteringValue;
			uniform half _render_cull;
			uniform half _render_src;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsGeneralShader;
			uniform half _IsSimpleShader;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			uniform half _RenderBakeGI;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderPriority;
			uniform half _RenderQueue;
			uniform half _RenderMotion;
			uniform half _RenderClip;
			uniform half _RenderShadow;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderFilter;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NoiseTexSS);
			SamplerState sampler_NoiseTexSS;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _NormalSpace;
			uniform half _MotionCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionElementMode;
			uniform half _MotionPushInfo;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform half _ObjectBoundsInfo;
			uniform float3 TVE_WorldOrigin;
			uniform half4 TVE_TimeParams;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half4 TVE_SizeFadeParams;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeScaleValue;
			uniform half4 TVE_FormParams;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half _GlobalPivotInfo;
			uniform half _GlobalCoatLayerValue;
			uniform float TVE_CoatLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			uniform half _GlobalCoatPivotValue;
			SamplerState sampler_Linear_Clamp;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatNearTex);
			uniform half4 TVE_RenderNearCoords;
			SamplerState sampler_Linear_Repeat;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_CoatParams;
			uniform half _GlobalPaintLayerValue;
			uniform float TVE_PaintLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintBaseTex);
			uniform half _GlobalPaintPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintNearTex);
			uniform half4 TVE_PaintParams;
			uniform half _GlobalGlowLayerValue;
			uniform float TVE_GlowLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowBaseTex);
			uniform half _GlobalGlowPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowNearTex);
			uniform half4 TVE_GlowParams;
			uniform half _GlobalAtmoLayerValue;
			uniform float TVE_AtmoLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoBaseTex);
			uniform half _GlobalAtmoPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoNearTex);
			uniform half4 TVE_AtmoParams;
			uniform half _GlobalFadeLayerValue;
			uniform float TVE_FadeLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeBaseTex);
			uniform half _GlobalFadePivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeNearTex);
			uniform half4 TVE_FadeParams;
			uniform half _GlobalFormLayerValue;
			uniform float TVE_FormLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormBaseTex);
			uniform half _GlobalFormPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormNearTex);
			uniform half _GlobalFlowLayerValue;
			uniform float TVE_FlowLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FlowBaseTex);
			uniform half _GlobalFlowPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FlowNearTex);
			uniform half4 TVE_FlowParams;
			uniform half _SizeFadeElementMode;
			uniform half _SizeFadeGlobalValue;
			uniform half TVE_IsEnabled;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half _motion_small_mask_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			uniform half4 TVE_MotionParams;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionSmallTillingValue;
			uniform half _MotionSmallSpeedValue;
			uniform half _MotionSmallNoiseValue;
			uniform half4 TVE_MotionParamsEditor;
			uniform half _MotionIntensityValue;
			uniform half _MotionSmallDelayValue;
			uniform half _MotionSmallPushValue;
			uniform half _MotionTinyIntensityValue;
			uniform half _MotionDistValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half _motion_tiny_mask_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionTinyNoiseValue;
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionBaseTillingValue;
			uniform half _MotionBaseSpeedValue;
			uniform half _MotionBasePushValue;
			uniform half _motion_small_mode;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half _motion_base_mask_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionBaseNoiseValue;
			uniform half _MotionBaseDelayValue;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half4 _normal_vert_mode;
			uniform half4 _NormalMeshRemap;
			uniform half _NormalMeshValue;
			uniform half _NormalMeshMode;
			uniform half _DisableSRPBatcher;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveFlagMode;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutBakeMode;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessBakeMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayBakeMode;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessBakeMode;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			uniform half _MainMultiMaskInfo;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			SamplerState sampler_Point_Repeat;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondLumaRemap;
			uniform half _SecondLumaValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half _SecondElementMode;
			uniform half _SecondGlobalValue;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _ThirdLumaRemap;
			uniform half _ThirdLumaValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdGlobalValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThirdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThirdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half _GradientMultiValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationNoisePivotValue;
			uniform half _VariationNoiseTillingValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationIntensityValue;
			uniform half _VariationMultiValue;
			uniform half _TintingElementMode;
			uniform half _TintingGlobalValue;
			uniform half _TintingGrayValue;
			uniform float4 _TintingColor;
			uniform half _TintingIntensityValue;
			uniform half _TintingMultiValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingLumaValue;
			uniform half4 _tinting_vert_mode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _TintingMeshMode;
			uniform half4 _TintingBlendRemap;
			uniform half4 TVE_AtmoData;
			uniform half _DrynessElementMode;
			uniform half _DrynessGlobalValue;
			uniform half _DrynessGrayValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessIntensityValue;
			uniform half _DrynessMultiValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessLumaValue;
			uniform half4 _dryness_vert_mode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessBlendRemap;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half3 _motion_highlight_color;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayGlitterIntensityValue;
			uniform half4 _OverlayGlitterColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTexRT);
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterAttenValue;
			uniform half _OverlayGlitterDistValue;
			uniform half _OverlayIntensityValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			uniform half _OverlayElementMode;
			uniform half _OverlayGlobalValue;
			uniform half4 _OverlayBlendRemap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _WetnessWaterColor;
			uniform half _WetnessWaterIntensityValue;
			uniform half _WetnessIntensityValue;
			uniform half _WetnessElementMode;
			uniform half _WetnessGlobalValue;
			uniform half4 _wetness_vert_mode;
			uniform half4 _WetnessMeshRemap;
			uniform half _WetnessMeshValue;
			uniform half _WetnessMeshMode;
			uniform half4 _wetness_water_vert_mode;
			uniform half4 _WetnessWaterMeshRemap;
			uniform half _WetnessWaterMeshValue;
			uniform half _WetnessWaterMeshMode;
			uniform half _WetnessWaterBaseValue;
			uniform half4 _WetnessWaterBlendRemap;
			uniform half _WetnessContrastValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTexRT);
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsDistValue;
			uniform half4 _wetness_drops_vert_mode;
			uniform half4 _WetnessDropsMeshRemap;
			uniform half _WetnessDropsMeshValue;
			uniform half _WetnessDropsMeshMode;
			uniform half _WetnessSmoothnessValue;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutElementMode;
			uniform half _CutoutGlobalValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutNoiseValue;
			uniform half4 _cutout_vert_mode;
			uniform half4 _CutoutMeshRemap;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half _CutoutMultiValue;
			uniform half _DitherConstantValue;
			uniform half4 TVE_DitherParams;
			uniform half _DitherProximityMaxValue;
			uniform half _DitherProximityMinValue;
			uniform half _DitherProximityValue;
			uniform half _DitherDistanceMinValue;
			uniform half _DitherDistanceMaxValue;
			uniform half _DitherDistanceValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _DitherMultiValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveGlobalValue;
			uniform half _EmissiveColorMode;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceElementMode;
			uniform half _SubsurfaceGlobalValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 TVE_MainLightDirection;
			uniform half _SubsurfaceAproxInfo;
			uniform half3 _render_normal;
			uniform half _RenderSpecular;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half ShadowPassCheck33_g171025( half True, half False )
			{
				half result;
				#if defined(UNITY_PASS_DEFERRED)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck33_g171026( half True, half False )
			{
				half result;
				#if defined(UNITY_PASS_DEFERRED)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g171013 = (TVEModelData)0;
				float In_Dummy16_g171013 = 0.0;
				TVEModelData Data16_g170989 = (TVEModelData)0;
				half Dummy1575_g170987 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170989 = Dummy1575_g170987;
				TVEModelData Data16_g170965 = (TVEModelData)0;
				float In_Dummy16_g170965 = 0.0;
				TVEModelData Data16_g170731 = (TVEModelData)0;
				half Dummy181_g170714 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170731 = Dummy181_g170714;
				TVEModelData Data16_g170673 = (TVEModelData)0;
				half Dummy181_g170671 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170673 = Dummy181_g170671;
				TVEModelData Data16_g170585 = (TVEModelData)0;
				half Dummy181_g170582 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170585 = Dummy181_g170582;
				TVEModelData Data16_g170580 = (TVEModelData)0;
				float In_Dummy16_g170580 = 0.0;
				TVEModelData Data16_g170482 = (TVEModelData)0;
				half Dummy207_g170478 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170482 = Dummy207_g170478;
				half3 PositionOS131_g170478 = v.vertex.xyz;
				float3 In_PositionOS16_g170482 = PositionOS131_g170478;
				float3 ase_positionWS = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g170478 = ase_positionWS;
				half3 PositionWS122_g170478 = vertexToFrag73_g170478;
				float3 In_PositionWS16_g170482 = PositionWS122_g170478;
				float4x4 break19_g170488 = unity_ObjectToWorld;
				float3 appendResult20_g170488 = (float3(break19_g170488[ 0 ][ 3 ] , break19_g170488[ 1 ][ 3 ] , break19_g170488[ 2 ][ 3 ]));
				float3 temp_output_340_7_g170478 = appendResult20_g170488;
				float4x4 break19_g170490 = unity_ObjectToWorld;
				float3 appendResult20_g170490 = (float3(break19_g170490[ 0 ][ 3 ] , break19_g170490[ 1 ][ 3 ] , break19_g170490[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170486 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g170478 = PositionOS131_g170478;
				float3 appendResult234_g170478 = (float3(break233_g170478.x , 0.0 , break233_g170478.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170478 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170478 = appendResult60_g170486;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170478 = appendResult234_g170478;
				#else
				float3 staticSwitch229_g170478 = _Vector0;
				#endif
				half3 PivotOS149_g170478 = staticSwitch229_g170478;
				float3 temp_output_122_0_g170490 = PivotOS149_g170478;
				float3 PivotsOnlyWS105_g170490 = mul( unity_ObjectToWorld, float4( temp_output_122_0_g170490 , 0.0 ) ).xyz;
				float3 temp_output_341_7_g170478 = ( appendResult20_g170490 + PivotsOnlyWS105_g170490 );
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170478 = temp_output_340_7_g170478;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170478 = temp_output_341_7_g170478;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170478 = temp_output_341_7_g170478;
				#else
				float3 staticSwitch236_g170478 = temp_output_340_7_g170478;
				#endif
				float3 vertexToFrag76_g170478 = staticSwitch236_g170478;
				half3 PivotWS121_g170478 = vertexToFrag76_g170478;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
				#else
				float3 staticSwitch204_g170478 = PositionWS122_g170478;
				#endif
				half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170482 = PositionWO132_g170478;
				float3 In_PositionRawOS16_g170482 = PositionOS131_g170478;
				float3 In_PositionAddOS16_g170482 = float3( 0,0,0 );
				float3 In_PivotOS16_g170482 = PivotOS149_g170478;
				float3 In_PivotWS16_g170482 = PivotWS121_g170478;
				half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170482 = PivotWO133_g170478;
				half3 NormalOS134_g170478 = v.normal;
				float3 In_NormalOS16_g170482 = NormalOS134_g170478;
				float3 ase_normalWS = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170478 = normalizedWorldNormal;
				float3 In_NormalWS16_g170482 = Normal_WS95_g170478;
				float3 In_NormalRawOS16_g170482 = NormalOS134_g170478;
				float3 objToWorldDir298_g170478 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g170478 = objToWorldDir298_g170478;
				float3 In_NormalRawWS16_g170482 = Normal_RawWS136_g170478;
				half4 TangentlOS153_g170478 = v.tangent;
				float4 In_TangentOS16_g170482 = TangentlOS153_g170478;
				float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
				half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
				float3 In_ViewDirWS16_g170482 = ViewDirWS169_g170478;
				half4 VertexMasks171_g170478 = v.ase_color;
				float4 In_VertexData16_g170482 = VertexMasks171_g170478;
				float mulTime113_g170485 = _Time.y * 0.52;
				float lerpResult128_g170485 = lerp( mulTime113_g170485 , ( ( mulTime113_g170485 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170478 = PivotWO133_g170478;
				half Pivot_Position322_g170478 = ( break319_g170478.x + break319_g170478.z );
				float mulTime113_g170484 = _Time.y * 0.27;
				float lerpResult128_g170484 = lerp( mulTime113_g170484 , ( ( mulTime113_g170484 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170487 = _object_phase_mode;
				float temp_output_30_0_g170487 = ( v.ase_color.r * break33_g170487.x );
				float temp_output_29_0_g170487 = ( v.ase_color.g * break33_g170487.y );
				float temp_output_31_0_g170487 = ( v.ase_color.b * break33_g170487.z );
				float temp_output_28_0_g170487 = ( temp_output_30_0_g170487 + temp_output_29_0_g170487 + temp_output_31_0_g170487 + ( v.ase_color.a * break33_g170487.w ) );
				float temp_output_315_0_g170478 = (frac( ( temp_output_28_0_g170487 + Pivot_Position322_g170478 ) )*2.0 + -1.0);
				float4 appendResult177_g170478 = (float4(sin( ( lerpResult128_g170485 + Pivot_Position322_g170478 ) ) , sin( ( lerpResult128_g170484 + Pivot_Position322_g170478 ) ) , temp_output_315_0_g170478 , 1.0));
				half4 MotionMasks176_g170478 = appendResult177_g170478;
				float4 In_PhaseData16_g170482 = MotionMasks176_g170478;
				half Object_HeightValue267_g170478 = _ObjectHeightValue;
				half Object_RadiusValue268_g170478 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170478 = saturate( ( (PositionOS131_g170478).y / Object_HeightValue267_g170478 ) );
				half Bounds_SphereMask282_g170478 = saturate( ( length( PositionOS131_g170478 ) / max( Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 ) ) );
				float4 appendResult253_g170478 = (float4(Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 , Bounds_HeightMask274_g170478 , Bounds_SphereMask282_g170478));
				half4 BoundsData254_g170478 = appendResult253_g170478;
				float4 In_BoundsData16_g170482 = BoundsData254_g170478;
				float4 In_RotationData16_g170482 = float4( 0,0,0,0 );
				{
				Data16_g170482.Dummy = In_Dummy16_g170482;
				Data16_g170482.PositionOS = In_PositionOS16_g170482;
				Data16_g170482.PositionWS = In_PositionWS16_g170482;
				Data16_g170482.PositionWO = In_PositionWO16_g170482;
				Data16_g170482.PositionRawOS = In_PositionRawOS16_g170482;
				Data16_g170482.PositionAddOS = In_PositionAddOS16_g170482;
				Data16_g170482.PivotOS = In_PivotOS16_g170482;
				Data16_g170482.PivotWS = In_PivotWS16_g170482;
				Data16_g170482.PivotWO = In_PivotWO16_g170482;
				Data16_g170482.NormalOS = In_NormalOS16_g170482;
				Data16_g170482.NormalWS = In_NormalWS16_g170482;
				Data16_g170482.NormalRawOS = In_NormalRawOS16_g170482;
				Data16_g170482.NormalRawWS = In_NormalRawWS16_g170482;
				Data16_g170482.TangentOS = In_TangentOS16_g170482;
				Data16_g170482.ViewDirWS = In_ViewDirWS16_g170482;
				Data16_g170482.VertexData = In_VertexData16_g170482;
				Data16_g170482.PhaseData = In_PhaseData16_g170482;
				Data16_g170482.BoundsData = In_BoundsData16_g170482;
				Data16_g170482.RotationData = In_RotationData16_g170482;
				}
				TVEModelData Data15_g170581 = Data16_g170482;
				float Out_Dummy15_g170581 = 0;
				float3 Out_PositionOS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170581 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170581 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
				float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170581 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170581 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170581 = Data15_g170581.Dummy;
				Out_PositionOS15_g170581 = Data15_g170581.PositionOS;
				Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
				Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
				Out_PositionRawOS15_g170581 = Data15_g170581.PositionRawOS;
				Out_PositionAddOS15_g170581 = Data15_g170581.PositionAddOS;
				Out_PivotOS15_g170581 = Data15_g170581.PivotOS;
				Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
				Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
				Out_NormalOS15_g170581 = Data15_g170581.NormalOS;
				Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
				Out_NormalRawOS15_g170581 = Data15_g170581.NormalRawOS;
				Out_NormalRawWS15_g170581 = Data15_g170581.NormalRawWS;
				Out_TangentOS15_g170581 = Data15_g170581.TangentOS;
				Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
				Out_VertexData15_g170581 = Data15_g170581.VertexData;
				Out_PhaseData15_g170581 = Data15_g170581.PhaseData;
				Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
				Out_RotationData15_g170581 = Data15_g170581.RotationData;
				}
				float3 temp_output_218_24_g170579 = Out_PivotOS15_g170581;
				float3 In_PositionOS16_g170580 = ( Out_PositionOS15_g170581 - temp_output_218_24_g170579 );
				float3 In_PositionWS16_g170580 = Out_PositionWS15_g170581;
				float3 In_PositionWO16_g170580 = Out_PositionWO15_g170581;
				float3 In_PositionRawOS16_g170580 = Out_PositionRawOS15_g170581;
				float3 In_PositionAddOS16_g170580 = Out_PositionAddOS15_g170581;
				float3 In_PivotOS16_g170580 = temp_output_218_24_g170579;
				float3 In_PivotWS16_g170580 = Out_PivotWS15_g170581;
				float3 In_PivotWO16_g170580 = Out_PivotWO15_g170581;
				float3 In_NormalOS16_g170580 = Out_NormalOS15_g170581;
				float3 In_NormalWS16_g170580 = Out_NormalWS15_g170581;
				float3 In_NormalRawOS16_g170580 = Out_NormalRawOS15_g170581;
				float3 In_NormalRawWS16_g170580 = Out_NormalRawWS15_g170581;
				float4 In_TangentOS16_g170580 = Out_TangentOS15_g170581;
				float3 In_ViewDirWS16_g170580 = Out_ViewDirWS15_g170581;
				float4 In_VertexData16_g170580 = Out_VertexData15_g170581;
				float4 In_PhaseData16_g170580 = Out_PhaseData15_g170581;
				float4 In_BoundsData16_g170580 = Out_BoundsData15_g170581;
				float4 In_RotationData16_g170580 = Out_RotationData15_g170581;
				{
				Data16_g170580.Dummy = In_Dummy16_g170580;
				Data16_g170580.PositionOS = In_PositionOS16_g170580;
				Data16_g170580.PositionWS = In_PositionWS16_g170580;
				Data16_g170580.PositionWO = In_PositionWO16_g170580;
				Data16_g170580.PositionRawOS = In_PositionRawOS16_g170580;
				Data16_g170580.PositionAddOS = In_PositionAddOS16_g170580;
				Data16_g170580.PivotOS = In_PivotOS16_g170580;
				Data16_g170580.PivotWS = In_PivotWS16_g170580;
				Data16_g170580.PivotWO = In_PivotWO16_g170580;
				Data16_g170580.NormalOS = In_NormalOS16_g170580;
				Data16_g170580.NormalWS = In_NormalWS16_g170580;
				Data16_g170580.NormalRawOS = In_NormalRawOS16_g170580;
				Data16_g170580.NormalRawWS = In_NormalRawWS16_g170580;
				Data16_g170580.TangentOS = In_TangentOS16_g170580;
				Data16_g170580.ViewDirWS = In_ViewDirWS16_g170580;
				Data16_g170580.VertexData = In_VertexData16_g170580;
				Data16_g170580.PhaseData = In_PhaseData16_g170580;
				Data16_g170580.BoundsData = In_BoundsData16_g170580;
				Data16_g170580.RotationData = In_RotationData16_g170580;
				}
				TVEModelData Data15_g170583 = Data16_g170580;
				float Out_Dummy15_g170583 = 0;
				float3 Out_PositionOS15_g170583 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170583 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170583 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170583 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170583 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170583 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170583 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170583 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170583 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170583 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170583 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170583 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170583 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170583 = float3( 0,0,0 );
				float4 Out_VertexData15_g170583 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170583 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170583 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170583 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170583 = Data15_g170583.Dummy;
				Out_PositionOS15_g170583 = Data15_g170583.PositionOS;
				Out_PositionWS15_g170583 = Data15_g170583.PositionWS;
				Out_PositionWO15_g170583 = Data15_g170583.PositionWO;
				Out_PositionRawOS15_g170583 = Data15_g170583.PositionRawOS;
				Out_PositionAddOS15_g170583 = Data15_g170583.PositionAddOS;
				Out_PivotOS15_g170583 = Data15_g170583.PivotOS;
				Out_PivotWS15_g170583 = Data15_g170583.PivotWS;
				Out_PivotWO15_g170583 = Data15_g170583.PivotWO;
				Out_NormalOS15_g170583 = Data15_g170583.NormalOS;
				Out_NormalWS15_g170583 = Data15_g170583.NormalWS;
				Out_NormalRawOS15_g170583 = Data15_g170583.NormalRawOS;
				Out_NormalRawWS15_g170583 = Data15_g170583.NormalRawWS;
				Out_TangentOS15_g170583 = Data15_g170583.TangentOS;
				Out_ViewDirWS15_g170583 = Data15_g170583.ViewDirWS;
				Out_VertexData15_g170583 = Data15_g170583.VertexData;
				Out_PhaseData15_g170583 = Data15_g170583.PhaseData;
				Out_BoundsData15_g170583 = Data15_g170583.BoundsData;
				Out_RotationData15_g170583 = Data15_g170583.RotationData;
				}
				half3 Model_PositionOS147_g170582 = Out_PositionOS15_g170583;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = Unity_SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170584 = unity_CameraToWorld;
				float3 appendResult118_g170584 = (float3(break117_g170584[ 0 ][ 2 ] , break117_g170584[ 1 ][ 2 ] , break117_g170584[ 2 ][ 2 ]));
				float3 lerpResult209_g170582 = lerp( ase_viewDirSafeWS , -appendResult118_g170584 , unity_OrthoParams.w);
				float3 break201_g170582 = cross( lerpResult209_g170582 , half3(0,1,0) );
				float3 appendResult196_g170582 = (float3(-break201_g170582.z , 0.0 , break201_g170582.x));
				float dotResult189_g170582 = dot( ase_viewDirSafeWS , float3(0,1,0) );
				float saferPower192_g170582 = abs( dotResult189_g170582 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170582 = ( Model_PositionOS147_g170582 + ( mul( unity_WorldToObject, float4( appendResult196_g170582 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170582 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170582).y ) ) );
				#else
				float3 staticSwitch211_g170582 = Model_PositionOS147_g170582;
				#endif
				half3 Final_Position178_g170582 = staticSwitch211_g170582;
				float3 In_PositionOS16_g170585 = Final_Position178_g170582;
				float3 In_PositionWS16_g170585 = Out_PositionWS15_g170583;
				float3 In_PositionWO16_g170585 = Out_PositionWO15_g170583;
				float3 In_PositionRawOS16_g170585 = Out_PositionRawOS15_g170583;
				float3 In_PositionAddOS16_g170585 = Out_PositionAddOS15_g170583;
				float3 In_PivotOS16_g170585 = Out_PivotOS15_g170583;
				float3 In_PivotWS16_g170585 = Out_PivotWS15_g170583;
				float3 In_PivotWO16_g170585 = Out_PivotWO15_g170583;
				float3 In_NormalOS16_g170585 = Out_NormalOS15_g170583;
				float3 In_NormalWS16_g170585 = Out_NormalWS15_g170583;
				float3 In_NormalRawOS16_g170585 = Out_NormalRawOS15_g170583;
				float3 In_NormalRawWS16_g170585 = Out_NormalRawWS15_g170583;
				float4 In_TangentOS16_g170585 = Out_TangentOS15_g170583;
				float3 In_ViewDirWS16_g170585 = Out_ViewDirWS15_g170583;
				float4 In_VertexData16_g170585 = Out_VertexData15_g170583;
				float4 In_PhaseData16_g170585 = Out_PhaseData15_g170583;
				float4 In_BoundsData16_g170585 = Out_BoundsData15_g170583;
				float4 In_RotationData16_g170585 = Out_RotationData15_g170583;
				{
				Data16_g170585.Dummy = In_Dummy16_g170585;
				Data16_g170585.PositionOS = In_PositionOS16_g170585;
				Data16_g170585.PositionWS = In_PositionWS16_g170585;
				Data16_g170585.PositionWO = In_PositionWO16_g170585;
				Data16_g170585.PositionRawOS = In_PositionRawOS16_g170585;
				Data16_g170585.PositionAddOS = In_PositionAddOS16_g170585;
				Data16_g170585.PivotOS = In_PivotOS16_g170585;
				Data16_g170585.PivotWS = In_PivotWS16_g170585;
				Data16_g170585.PivotWO = In_PivotWO16_g170585;
				Data16_g170585.NormalOS = In_NormalOS16_g170585;
				Data16_g170585.NormalWS = In_NormalWS16_g170585;
				Data16_g170585.NormalRawOS = In_NormalRawOS16_g170585;
				Data16_g170585.NormalRawWS = In_NormalRawWS16_g170585;
				Data16_g170585.TangentOS = In_TangentOS16_g170585;
				Data16_g170585.ViewDirWS = In_ViewDirWS16_g170585;
				Data16_g170585.VertexData = In_VertexData16_g170585;
				Data16_g170585.PhaseData = In_PhaseData16_g170585;
				Data16_g170585.BoundsData = In_BoundsData16_g170585;
				Data16_g170585.RotationData = In_RotationData16_g170585;
				}
				TVEModelData Data15_g170672 = Data16_g170585;
				float Out_Dummy15_g170672 = 0;
				float3 Out_PositionOS15_g170672 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170672 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170672 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170672 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170672 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170672 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170672 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170672 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170672 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170672 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170672 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170672 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170672 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170672 = float3( 0,0,0 );
				float4 Out_VertexData15_g170672 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170672 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170672 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170672 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170672 = Data15_g170672.Dummy;
				Out_PositionOS15_g170672 = Data15_g170672.PositionOS;
				Out_PositionWS15_g170672 = Data15_g170672.PositionWS;
				Out_PositionWO15_g170672 = Data15_g170672.PositionWO;
				Out_PositionRawOS15_g170672 = Data15_g170672.PositionRawOS;
				Out_PositionAddOS15_g170672 = Data15_g170672.PositionAddOS;
				Out_PivotOS15_g170672 = Data15_g170672.PivotOS;
				Out_PivotWS15_g170672 = Data15_g170672.PivotWS;
				Out_PivotWO15_g170672 = Data15_g170672.PivotWO;
				Out_NormalOS15_g170672 = Data15_g170672.NormalOS;
				Out_NormalWS15_g170672 = Data15_g170672.NormalWS;
				Out_NormalRawOS15_g170672 = Data15_g170672.NormalRawOS;
				Out_NormalRawWS15_g170672 = Data15_g170672.NormalRawWS;
				Out_TangentOS15_g170672 = Data15_g170672.TangentOS;
				Out_ViewDirWS15_g170672 = Data15_g170672.ViewDirWS;
				Out_VertexData15_g170672 = Data15_g170672.VertexData;
				Out_PhaseData15_g170672 = Data15_g170672.PhaseData;
				Out_BoundsData15_g170672 = Data15_g170672.BoundsData;
				Out_RotationData15_g170672 = Data15_g170672.RotationData;
				}
				half3 Model_PositionOS147_g170671 = Out_PositionOS15_g170672;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170671 = Out_PivotWO15_g170672;
				half3 Model_PivotWO162_g170671 = temp_output_210_19_g170671;
				float lerpResult216_g170671 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170675 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170675 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170671 ) * lerpResult216_g170671 ) - temp_output_7_0_g170675 );
				float localBuildGlobalData204_g170496 = ( 0.0 );
				TVEGlobalData Data204_g170496 = (TVEGlobalData)0;
				half Dummy211_g170496 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170496 = Dummy211_g170496;
				float temp_output_82_0_g170506 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170508 = TVE_CoatLayers[(int)temp_output_82_0_g170506];
				TVEModelData Data16_g170483 = (TVEModelData)0;
				float In_Dummy16_g170483 = 0.0;
				float3 In_PositionWS16_g170483 = PositionWS122_g170478;
				float3 In_PositionWO16_g170483 = PositionWO132_g170478;
				float3 In_PivotWS16_g170483 = PivotWS121_g170478;
				float3 In_PivotWO16_g170483 = PivotWO133_g170478;
				float3 In_NormalWS16_g170483 = Normal_WS95_g170478;
				float3 In_ViewDirWS16_g170483 = ViewDirWS169_g170478;
				float4 In_VertexData16_g170483 = VertexMasks171_g170478;
				float4 In_BoundsData16_g170483 = float4( 1,1,1,1 );
				{
				Data16_g170483.Dummy = In_Dummy16_g170483;
				Data16_g170483.PositionWS = In_PositionWS16_g170483;
				Data16_g170483.PositionWO = In_PositionWO16_g170483;
				Data16_g170483.PivotWS = In_PivotWS16_g170483;
				Data16_g170483.PivotWO = In_PivotWO16_g170483;
				Data16_g170483.NormalWS = In_NormalWS16_g170483;
				Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
				Data16_g170483.VertexData = In_VertexData16_g170483;
				Data16_g170483.BoundsData = In_BoundsData16_g170483;
				}
				TVEModelData Data15_g170542 = Data16_g170483;
				float Out_Dummy15_g170542 = 0;
				float3 Out_PositionWS15_g170542 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170542 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170542 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170542 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170542 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170542 = float3( 0,0,0 );
				float4 Out_VertexData15_g170542 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170542 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170542 = Data15_g170542.Dummy;
				Out_PositionWS15_g170542 = Data15_g170542.PositionWS;
				Out_PositionWO15_g170542 = Data15_g170542.PositionWO;
				Out_PivotWS15_g170542 = Data15_g170542.PivotWS;
				Out_PivotWO15_g170542 = Data15_g170542.PivotWO;
				Out_NormalWS15_g170542 = Data15_g170542.NormalWS;
				Out_ViewDirWS15_g170542 = Data15_g170542.ViewDirWS;
				Out_VertexData15_g170542 = Data15_g170542.VertexData;
				Out_BoundsData15_g170542 = Data15_g170542.BoundsData;
				}
				half3 Model_PositionWS143_g170496 = Out_PositionWS15_g170542;
				half3 Model_PivotWS145_g170496 = Out_PivotWS15_g170542;
				float3 lerpResult300_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170509 = lerpResult300_g170496;
				float2 temp_output_75_0_g170509 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170509).xz ) );
				float temp_output_82_0_g170509 = temp_output_82_0_g170506;
				float2 temp_output_119_0_g170509 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170509).xz ) );
				float temp_output_7_0_g170514 = 1.0;
				float temp_output_9_0_g170514 = ( saturate( ( distance( Input_Position180_g170509 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170514 );
				float4 lerpResult131_g170509 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170509,temp_output_82_0_g170509), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170509,temp_output_82_0_g170509), 0.0 ) , saturate( ( temp_output_9_0_g170514 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170514 ) ) ));
				float4 temp_output_17_0_g170508 = lerpResult131_g170509;
				float4 temp_output_3_0_g170508 = TVE_CoatParams;
				float4 ifLocalVar18_g170508 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170508 >= 0.5 )
				ifLocalVar18_g170508 = temp_output_17_0_g170508;
				else
				ifLocalVar18_g170508 = temp_output_3_0_g170508;
				float4 lerpResult22_g170508 = lerp( temp_output_3_0_g170508 , temp_output_17_0_g170508 , temp_output_19_0_g170508);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170508 = lerpResult22_g170508;
				#else
				float4 staticSwitch24_g170508 = ifLocalVar18_g170508;
				#endif
				half4 Coat_Params302_g170496 = staticSwitch24_g170508;
				float4 In_CoatParams204_g170496 = Coat_Params302_g170496;
				float temp_output_82_0_g170497 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170499 = TVE_PaintLayers[(int)temp_output_82_0_g170497];
				float3 lerpResult85_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170500 = lerpResult85_g170496;
				float2 temp_output_75_0_g170500 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170500).xz ) );
				float temp_output_82_0_g170500 = temp_output_82_0_g170497;
				float2 temp_output_119_0_g170500 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170500).xz ) );
				float temp_output_7_0_g170505 = 1.0;
				float temp_output_9_0_g170505 = ( saturate( ( distance( Input_Position180_g170500 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170505 );
				float4 lerpResult131_g170500 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170500,temp_output_82_0_g170500), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170500,temp_output_82_0_g170500), 0.0 ) , saturate( ( temp_output_9_0_g170505 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170505 ) ) ));
				float4 temp_output_17_0_g170499 = lerpResult131_g170500;
				float4 temp_output_3_0_g170499 = TVE_PaintParams;
				float4 ifLocalVar18_g170499 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170499 >= 0.5 )
				ifLocalVar18_g170499 = temp_output_17_0_g170499;
				else
				ifLocalVar18_g170499 = temp_output_3_0_g170499;
				float4 lerpResult22_g170499 = lerp( temp_output_3_0_g170499 , temp_output_17_0_g170499 , temp_output_19_0_g170499);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170499 = lerpResult22_g170499;
				#else
				float4 staticSwitch24_g170499 = ifLocalVar18_g170499;
				#endif
				half4 Paint_Params71_g170496 = staticSwitch24_g170499;
				float4 In_PaintParams204_g170496 = Paint_Params71_g170496;
				float temp_output_82_0_g170543 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170545 = TVE_GlowLayers[(int)temp_output_82_0_g170543];
				float3 lerpResult247_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170546 = lerpResult247_g170496;
				float2 temp_output_75_0_g170546 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170546).xz ) );
				float temp_output_82_0_g170546 = temp_output_82_0_g170543;
				float2 temp_output_119_0_g170546 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170546).xz ) );
				float temp_output_7_0_g170551 = 1.0;
				float temp_output_9_0_g170551 = ( saturate( ( distance( Input_Position180_g170546 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170551 );
				float4 lerpResult131_g170546 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170546,temp_output_82_0_g170546), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170546,temp_output_82_0_g170546), 0.0 ) , saturate( ( temp_output_9_0_g170551 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170551 ) ) ));
				float4 temp_output_17_0_g170545 = lerpResult131_g170546;
				float4 temp_output_3_0_g170545 = TVE_GlowParams;
				float4 ifLocalVar18_g170545 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170545 >= 0.5 )
				ifLocalVar18_g170545 = temp_output_17_0_g170545;
				else
				ifLocalVar18_g170545 = temp_output_3_0_g170545;
				float4 lerpResult22_g170545 = lerp( temp_output_3_0_g170545 , temp_output_17_0_g170545 , temp_output_19_0_g170545);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170545 = lerpResult22_g170545;
				#else
				float4 staticSwitch24_g170545 = ifLocalVar18_g170545;
				#endif
				half4 Glow_Params248_g170496 = staticSwitch24_g170545;
				float4 In_GlowParams204_g170496 = Glow_Params248_g170496;
				float temp_output_132_0_g170524 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170526 = TVE_AtmoLayers[(int)temp_output_132_0_g170524];
				float3 lerpResult104_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170527 = lerpResult104_g170496;
				float2 temp_output_75_0_g170527 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170527).xz ) );
				float temp_output_82_0_g170527 = temp_output_132_0_g170524;
				float2 temp_output_119_0_g170527 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170527).xz ) );
				float temp_output_7_0_g170532 = 1.0;
				float temp_output_9_0_g170532 = ( saturate( ( distance( Input_Position180_g170527 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170532 );
				float4 lerpResult131_g170527 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170527,temp_output_82_0_g170527), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170527,temp_output_82_0_g170527), 0.0 ) , saturate( ( temp_output_9_0_g170532 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170532 ) ) ));
				float4 temp_output_17_0_g170526 = lerpResult131_g170527;
				float4 temp_output_3_0_g170526 = TVE_AtmoParams;
				float4 ifLocalVar18_g170526 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170526 >= 0.5 )
				ifLocalVar18_g170526 = temp_output_17_0_g170526;
				else
				ifLocalVar18_g170526 = temp_output_3_0_g170526;
				float4 lerpResult22_g170526 = lerp( temp_output_3_0_g170526 , temp_output_17_0_g170526 , temp_output_19_0_g170526);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170526 = lerpResult22_g170526;
				#else
				float4 staticSwitch24_g170526 = ifLocalVar18_g170526;
				#endif
				half4 Atmo_Params80_g170496 = staticSwitch24_g170526;
				float4 In_AtmoParams204_g170496 = Atmo_Params80_g170496;
				float temp_output_132_0_g170533 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170535 = TVE_FadeLayers[(int)temp_output_132_0_g170533];
				float3 lerpResult382_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFadePivotValue);
				half3 Input_Position180_g170536 = lerpResult382_g170496;
				float2 temp_output_75_0_g170536 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170536).xz ) );
				float temp_output_82_0_g170536 = temp_output_132_0_g170533;
				float2 temp_output_119_0_g170536 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170536).xz ) );
				float temp_output_7_0_g170541 = 1.0;
				float temp_output_9_0_g170541 = ( saturate( ( distance( Input_Position180_g170536 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170541 );
				float4 lerpResult131_g170536 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170536,temp_output_82_0_g170536), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170536,temp_output_82_0_g170536), 0.0 ) , saturate( ( temp_output_9_0_g170541 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170541 ) ) ));
				float4 temp_output_17_0_g170535 = lerpResult131_g170536;
				float4 temp_output_3_0_g170535 = TVE_FadeParams;
				float4 ifLocalVar18_g170535 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170535 >= 0.5 )
				ifLocalVar18_g170535 = temp_output_17_0_g170535;
				else
				ifLocalVar18_g170535 = temp_output_3_0_g170535;
				float4 lerpResult22_g170535 = lerp( temp_output_3_0_g170535 , temp_output_17_0_g170535 , temp_output_19_0_g170535);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170535 = lerpResult22_g170535;
				#else
				float4 staticSwitch24_g170535 = ifLocalVar18_g170535;
				#endif
				half4 Fade_Params387_g170496 = staticSwitch24_g170535;
				float4 In_FadeParams204_g170496 = Fade_Params387_g170496;
				float temp_output_130_0_g170515 = _GlobalFormLayerValue;
				float temp_output_19_0_g170517 = TVE_FormLayers[(int)temp_output_130_0_g170515];
				float3 lerpResult168_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFormPivotValue);
				half3 Input_Position180_g170518 = lerpResult168_g170496;
				float2 temp_output_75_0_g170518 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170518).xz ) );
				float temp_output_82_0_g170518 = temp_output_130_0_g170515;
				float2 temp_output_119_0_g170518 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170518).xz ) );
				float temp_output_7_0_g170523 = 1.0;
				float temp_output_9_0_g170523 = ( saturate( ( distance( Input_Position180_g170518 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170523 );
				float4 lerpResult131_g170518 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170518,temp_output_82_0_g170518), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170518,temp_output_82_0_g170518), 0.0 ) , saturate( ( temp_output_9_0_g170523 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170523 ) ) ));
				float4 temp_output_17_0_g170517 = lerpResult131_g170518;
				float4 temp_output_3_0_g170517 = TVE_FormParams;
				float4 ifLocalVar18_g170517 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170517 >= 0.5 )
				ifLocalVar18_g170517 = temp_output_17_0_g170517;
				else
				ifLocalVar18_g170517 = temp_output_3_0_g170517;
				float4 lerpResult22_g170517 = lerp( temp_output_3_0_g170517 , temp_output_17_0_g170517 , temp_output_19_0_g170517);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170517 = lerpResult22_g170517;
				#else
				float4 staticSwitch24_g170517 = ifLocalVar18_g170517;
				#endif
				half4 Form_Params112_g170496 = staticSwitch24_g170517;
				float4 In_FormParams204_g170496 = Form_Params112_g170496;
				float temp_output_136_0_g170561 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170563 = TVE_FlowLayers[(int)temp_output_136_0_g170561];
				float3 lerpResult400_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170564 = lerpResult400_g170496;
				float2 temp_output_75_0_g170564 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170564).xz ) );
				float temp_output_82_0_g170564 = temp_output_136_0_g170561;
				float2 temp_output_119_0_g170564 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170564).xz ) );
				float temp_output_7_0_g170569 = 1.0;
				float temp_output_9_0_g170569 = ( saturate( ( distance( Input_Position180_g170564 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170569 );
				float4 lerpResult131_g170564 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170564,temp_output_82_0_g170564), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170564,temp_output_82_0_g170564), 0.0 ) , saturate( ( temp_output_9_0_g170569 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170569 ) ) ));
				float4 temp_output_17_0_g170563 = lerpResult131_g170564;
				float4 temp_output_3_0_g170563 = TVE_FlowParams;
				float4 ifLocalVar18_g170563 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170563 >= 0.5 )
				ifLocalVar18_g170563 = temp_output_17_0_g170563;
				else
				ifLocalVar18_g170563 = temp_output_3_0_g170563;
				float4 lerpResult22_g170563 = lerp( temp_output_3_0_g170563 , temp_output_17_0_g170563 , temp_output_19_0_g170563);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170563 = lerpResult22_g170563;
				#else
				float4 staticSwitch24_g170563 = ifLocalVar18_g170563;
				#endif
				half4 Flow_Params405_g170496 = staticSwitch24_g170563;
				float4 In_FlowParams204_g170496 = Flow_Params405_g170496;
				{
				Data204_g170496.Dummy = In_Dummy204_g170496;
				Data204_g170496.CoatParams = In_CoatParams204_g170496;
				Data204_g170496.PaintParams = In_PaintParams204_g170496;
				Data204_g170496.GlowParams = In_GlowParams204_g170496;
				Data204_g170496.AtmoParams = In_AtmoParams204_g170496;
				Data204_g170496.FadeParams = In_FadeParams204_g170496;
				Data204_g170496.FormParams= In_FormParams204_g170496;
				Data204_g170496.FlowParams = In_FlowParams204_g170496;
				}
				TVEGlobalData Data15_g170674 = Data204_g170496;
				float Out_Dummy15_g170674 = 0;
				float4 Out_CoatParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_CoatParams15_g170674 = Data15_g170674.CoatParams;
				Out_PaintParams15_g170674 = Data15_g170674.PaintParams;
				Out_GlowParams15_g170674 = Data15_g170674.GlowParams;
				Out_AtmoParams15_g170674= Data15_g170674.AtmoParams;
				Out_FadeParams15_g170674= Data15_g170674.FadeParams;
				Out_FormParams15_g170674 = Data15_g170674.FormParams;
				Out_FlowParams15_g170674 = Data15_g170674.FlowParams;
				}
				half4 Input_FormParams188_g170671 = Out_FormParams15_g170674;
				float temp_output_6_0_g170676 = saturate( (Input_FormParams188_g170671).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170676 = ( temp_output_6_0_g170676 + ( _SizeFadeElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170676 = temp_output_6_0_g170676;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170671 = staticSwitch14_g170676;
				#else
				float staticSwitch194_g170671 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170671 = lerp( 1.0 , staticSwitch194_g170671 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170671 = lerpResult213_g170671;
				float temp_output_189_0_g170671 = ( saturate( ( ( temp_output_9_0_g170675 / ( _SizeFadeDistMinValue - temp_output_7_0_g170675 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170671 );
				float3 appendResult200_g170671 = (float3(temp_output_189_0_g170671 , temp_output_189_0_g170671 , temp_output_189_0_g170671));
				float3 appendResult201_g170671 = (float3(1.0 , temp_output_189_0_g170671 , 1.0));
				float3 lerpResult202_g170671 = lerp( appendResult200_g170671 , appendResult201_g170671 , _SizeFadeScaleMode);
				float3 lerpResult184_g170671 = lerp( temp_cast_5 , lerpResult202_g170671 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170671 = ( lerpResult184_g170671 * Model_PositionOS147_g170671 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170671 = temp_output_167_0_g170671;
				#else
				float3 staticSwitch199_g170671 = Model_PositionOS147_g170671;
				#endif
				half3 Final_Position178_g170671 = staticSwitch199_g170671;
				float3 In_PositionOS16_g170673 = Final_Position178_g170671;
				float3 In_PositionWS16_g170673 = Out_PositionWS15_g170672;
				float3 In_PositionWO16_g170673 = Out_PositionWO15_g170672;
				float3 In_PositionRawOS16_g170673 = Out_PositionRawOS15_g170672;
				float3 In_PositionAddOS16_g170673 = Out_PositionAddOS15_g170672;
				float3 temp_output_210_24_g170671 = Out_PivotOS15_g170672;
				float3 In_PivotOS16_g170673 = temp_output_210_24_g170671;
				float3 In_PivotWS16_g170673 = Out_PivotWS15_g170672;
				float3 In_PivotWO16_g170673 = temp_output_210_19_g170671;
				float3 In_NormalOS16_g170673 = Out_NormalOS15_g170672;
				float3 In_NormalWS16_g170673 = Out_NormalWS15_g170672;
				float3 In_NormalRawOS16_g170673 = Out_NormalRawOS15_g170672;
				float3 In_NormalRawWS16_g170673 = Out_NormalRawWS15_g170672;
				float4 In_TangentOS16_g170673 = Out_TangentOS15_g170672;
				float3 In_ViewDirWS16_g170673 = Out_ViewDirWS15_g170672;
				float4 In_VertexData16_g170673 = Out_VertexData15_g170672;
				float4 In_PhaseData16_g170673 = Out_PhaseData15_g170672;
				float4 In_BoundsData16_g170673 = Out_BoundsData15_g170672;
				float4 In_RotationData16_g170673 = Out_RotationData15_g170672;
				{
				Data16_g170673.Dummy = In_Dummy16_g170673;
				Data16_g170673.PositionOS = In_PositionOS16_g170673;
				Data16_g170673.PositionWS = In_PositionWS16_g170673;
				Data16_g170673.PositionWO = In_PositionWO16_g170673;
				Data16_g170673.PositionRawOS = In_PositionRawOS16_g170673;
				Data16_g170673.PositionAddOS = In_PositionAddOS16_g170673;
				Data16_g170673.PivotOS = In_PivotOS16_g170673;
				Data16_g170673.PivotWS = In_PivotWS16_g170673;
				Data16_g170673.PivotWO = In_PivotWO16_g170673;
				Data16_g170673.NormalOS = In_NormalOS16_g170673;
				Data16_g170673.NormalWS = In_NormalWS16_g170673;
				Data16_g170673.NormalRawOS = In_NormalRawOS16_g170673;
				Data16_g170673.NormalRawWS = In_NormalRawWS16_g170673;
				Data16_g170673.TangentOS = In_TangentOS16_g170673;
				Data16_g170673.ViewDirWS = In_ViewDirWS16_g170673;
				Data16_g170673.VertexData = In_VertexData16_g170673;
				Data16_g170673.PhaseData = In_PhaseData16_g170673;
				Data16_g170673.BoundsData = In_BoundsData16_g170673;
				Data16_g170673.RotationData = In_RotationData16_g170673;
				}
				TVEModelData Data15_g170730 = Data16_g170673;
				float Out_Dummy15_g170730 = 0;
				float3 Out_PositionOS15_g170730 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170730 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170730 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170730 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170730 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170730 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170730 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170730 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170730 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170730 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170730 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170730 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170730 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170730 = float3( 0,0,0 );
				float4 Out_VertexData15_g170730 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170730 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170730 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170730 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170730 = Data15_g170730.Dummy;
				Out_PositionOS15_g170730 = Data15_g170730.PositionOS;
				Out_PositionWS15_g170730 = Data15_g170730.PositionWS;
				Out_PositionWO15_g170730 = Data15_g170730.PositionWO;
				Out_PositionRawOS15_g170730 = Data15_g170730.PositionRawOS;
				Out_PositionAddOS15_g170730 = Data15_g170730.PositionAddOS;
				Out_PivotOS15_g170730 = Data15_g170730.PivotOS;
				Out_PivotWS15_g170730 = Data15_g170730.PivotWS;
				Out_PivotWO15_g170730 = Data15_g170730.PivotWO;
				Out_NormalOS15_g170730 = Data15_g170730.NormalOS;
				Out_NormalWS15_g170730 = Data15_g170730.NormalWS;
				Out_NormalRawOS15_g170730 = Data15_g170730.NormalRawOS;
				Out_NormalRawWS15_g170730 = Data15_g170730.NormalRawWS;
				Out_TangentOS15_g170730 = Data15_g170730.TangentOS;
				Out_ViewDirWS15_g170730 = Data15_g170730.ViewDirWS;
				Out_VertexData15_g170730 = Data15_g170730.VertexData;
				Out_PhaseData15_g170730 = Data15_g170730.PhaseData;
				Out_BoundsData15_g170730 = Data15_g170730.BoundsData;
				Out_RotationData15_g170730 = Data15_g170730.RotationData;
				}
				float3 temp_output_2503_0_g170714 = Out_PositionOS15_g170730;
				float3 In_PositionOS16_g170731 = temp_output_2503_0_g170714;
				float3 temp_output_2503_16_g170714 = Out_PositionWS15_g170730;
				float3 In_PositionWS16_g170731 = temp_output_2503_16_g170714;
				float3 temp_output_2503_17_g170714 = Out_PositionWO15_g170730;
				float3 In_PositionWO16_g170731 = temp_output_2503_17_g170714;
				float3 In_PositionRawOS16_g170731 = Out_PositionRawOS15_g170730;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170714 = Out_VertexData15_g170730;
				half4 Model_VertexMasks518_g170714 = temp_output_2503_29_g170714;
				float4 break1689_g170714 = Model_VertexMasks518_g170714;
				float4 break33_g170715 = _motion_small_vert_mode;
				float temp_output_30_0_g170715 = ( break1689_g170714.x * break33_g170715.x );
				float temp_output_29_0_g170715 = ( break1689_g170714.y * break33_g170715.y );
				float temp_output_31_0_g170715 = ( break1689_g170714.z * break33_g170715.z );
				float temp_output_28_0_g170715 = ( temp_output_30_0_g170715 + temp_output_29_0_g170715 + temp_output_31_0_g170715 + ( break1689_g170714.w * break33_g170715.w ) );
				float temp_output_1727_0_g170714 = temp_output_28_0_g170715;
				float4 temp_output_2503_30_g170714 = Out_BoundsData15_g170730;
				half4 Model_BoundsData1322_g170714 = temp_output_2503_30_g170714;
				float4 break33_g170717 = _motion_small_proc_mode;
				float temp_output_30_0_g170717 = ( (Model_BoundsData1322_g170714).z * break33_g170717.x );
				float temp_output_29_0_g170717 = ( (Model_BoundsData1322_g170714).w * break33_g170717.y );
				float temp_output_1734_0_g170714 = ( temp_output_30_0_g170717 + temp_output_29_0_g170717 );
				float lerpResult1906_g170714 = lerp( temp_output_1727_0_g170714 , temp_output_1734_0_g170714 , _motion_small_mask_mode);
				float enc1805_g170714 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170714 = DecodeFloatToVector2( enc1805_g170714 );
				float2 break1804_g170714 = localDecodeFloatToVector21805_g170714;
				half Small_Mask_Legacy1806_g170714 = break1804_g170714.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170714 = Small_Mask_Legacy1806_g170714;
				#else
				float staticSwitch1800_g170714 = lerpResult1906_g170714;
				#endif
				float clampResult17_g170719 = clamp( staticSwitch1800_g170714 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170728 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170728 = ( clampResult17_g170719 - temp_output_7_0_g170728 );
				float temp_output_6_0_g170726 = saturate( ( ( temp_output_9_0_g170728 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170726 = ( temp_output_6_0_g170726 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170726 = temp_output_6_0_g170726;
				#endif
				half Small_Mask640_g170714 = staticSwitch14_g170726;
				float4 lerpResult836_g170750 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_MotionParams.w);
				half2 Global_WindDirWS2542_g170714 = ((lerpResult836_g170750).xy*2.0 + -1.0);
				half2 Input_WindDirWS803_g170745 = Global_WindDirWS2542_g170714;
				half3 Model_PositionWO162_g170714 = temp_output_2503_17_g170714;
				half3 Input_ModelPositionWO761_g170732 = Model_PositionWO162_g170714;
				float3 temp_output_2503_19_g170714 = Out_PivotWO15_g170730;
				half3 Model_PivotWO402_g170714 = temp_output_2503_19_g170714;
				half3 Input_ModelPivotsWO419_g170732 = Model_PivotWO402_g170714;
				half Input_MotionPivots629_g170732 = _MotionSmallPivotValue;
				float3 lerpResult771_g170732 = lerp( Input_ModelPositionWO761_g170732 , Input_ModelPivotsWO419_g170732 , Input_MotionPivots629_g170732);
				float4 temp_output_2503_27_g170714 = Out_PhaseData15_g170730;
				half4 Model_PhaseData489_g170714 = temp_output_2503_27_g170714;
				half4 Input_ModelMotionData763_g170732 = Model_PhaseData489_g170714;
				half Input_MotionPhase764_g170732 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170714 = ( lerpResult771_g170732 + ( (Input_ModelMotionData763_g170732).z * Input_MotionPhase764_g170732 * 5.0 ) );
				half3 Input_PositionWO419_g170745 = Small_Position1421_g170714;
				half Input_MotionTilling321_g170745 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170745 = ( -(Input_PositionWO419_g170745).xz * Input_MotionTilling321_g170745 * 0.005 );
				float2 temp_output_3_0_g170747 = Noise_Coord515_g170745;
				float2 temp_output_21_0_g170747 = Input_WindDirWS803_g170745;
				float lerpResult128_g170746 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170745 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170745 = ( lerpResult128_g170746 * 0.02 * Input_MotionSpeed62_g170745 );
				float temp_output_15_0_g170747 = Noise_Speed516_g170745;
				float temp_output_23_0_g170747 = frac( temp_output_15_0_g170747 );
				float4 lerpResult39_g170747 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170747 + ( temp_output_21_0_g170747 * temp_output_23_0_g170747 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170747 + ( temp_output_21_0_g170747 * frac( ( temp_output_15_0_g170747 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170747 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170745 = lerpResult39_g170747;
				half2 Noise_DirWS858_g170745 = ((temp_output_635_0_g170745).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170745 = _MotionSmallNoiseValue;
				half Global_WInd769_g170750 = (lerpResult836_g170750).z;
				TVEGlobalData Data15_g170738 = Data204_g170496;
				float Out_Dummy15_g170738 = 0;
				float4 Out_CoatParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170738 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170738 = Data15_g170738.Dummy;
				Out_CoatParams15_g170738 = Data15_g170738.CoatParams;
				Out_PaintParams15_g170738 = Data15_g170738.PaintParams;
				Out_GlowParams15_g170738 = Data15_g170738.GlowParams;
				Out_AtmoParams15_g170738= Data15_g170738.AtmoParams;
				Out_FadeParams15_g170738= Data15_g170738.FadeParams;
				Out_FormParams15_g170738 = Data15_g170738.FormParams;
				Out_FlowParams15_g170738 = Data15_g170738.FlowParams;
				}
				half4 Global_FlowParams2668_g170714 = Out_FlowParams15_g170738;
				half4 Input_GlobalFlow826_g170750 = Global_FlowParams2668_g170714;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170750 = saturate( (Input_GlobalFlow826_g170750).w );
				#else
				float staticSwitch612_g170750 = Global_WInd769_g170750;
				#endif
				float lerpResult853_g170750 = lerp( staticSwitch612_g170750 , saturate( (staticSwitch612_g170750*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170750 = _MotionIntensityValue;
				half Global_WindValue1855_g170714 = ( lerpResult853_g170750 * Input_MotionValue629_g170750 );
				half Input_WindValue881_g170745 = Global_WindValue1855_g170714;
				float lerpResult701_g170745 = lerp( 1.0 , Input_MotionNoise552_g170745 , Input_WindValue881_g170745);
				float2 lerpResult646_g170745 = lerp( Input_WindDirWS803_g170745 , Noise_DirWS858_g170745 , lerpResult701_g170745);
				half2 Small_DirWS817_g170745 = lerpResult646_g170745;
				float2 break823_g170745 = Small_DirWS817_g170745;
				half4 Noise_Params685_g170745 = temp_output_635_0_g170745;
				half Wind_Sinus820_g170745 = ( ((Noise_Params685_g170745).b*2.0 + -1.0) * Input_MotionNoise552_g170745 * 0.6 );
				float3 appendResult824_g170745 = (float3(break823_g170745.x , Wind_Sinus820_g170745 , break823_g170745.y));
				half Input_MotionDelay753_g170745 = _MotionSmallDelayValue;
				float lerpResult756_g170745 = lerp( 1.0 , ( Input_WindValue881_g170745 * Input_WindValue881_g170745 ) , Input_MotionDelay753_g170745);
				half Wind_Delay815_g170745 = lerpResult756_g170745;
				float3 appendResult825_g170745 = (float3(Wind_Delay815_g170745 , 1.0 , Wind_Delay815_g170745));
				float3 temp_output_827_0_g170745 = ( ( appendResult824_g170745 * Input_WindValue881_g170745 ) * appendResult825_g170745 );
				float2 break857_g170745 = Noise_DirWS858_g170745;
				float3 appendResult833_g170745 = (float3(break857_g170745.x , Wind_Sinus820_g170745 , break857_g170745.y));
				half Global_PushWave2675_g170714 = (Input_GlobalFlow826_g170750).z;
				half Input_PushWave890_g170745 = Global_PushWave2675_g170714;
				float2 temp_output_791_0_g170750 = ((Input_GlobalFlow826_g170750).xy*2.0 + -1.0);
				float temp_output_849_0_g170750 = saturate( length( temp_output_791_0_g170750 ) );
				half Global_PushAlpha1504_g170714 = temp_output_849_0_g170750;
				half Input_PushAlpha806_g170745 = ( Global_PushAlpha1504_g170714 * _MotionSmallPushValue );
				float3 lerpResult840_g170745 = lerp( temp_output_827_0_g170745 , ( appendResult833_g170745 * Input_PushWave890_g170745 ) , Input_PushAlpha806_g170745);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170745 = lerpResult840_g170745;
				#else
				float3 staticSwitch829_g170745 = temp_output_827_0_g170745;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half3 Small_Squash1489_g170714 = ( mul( unity_WorldToObject, float4( staticSwitch829_g170745 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Motion789_g170714 = ( _MotionSmallIntensityValue * Small_Mask640_g170714 * Small_Squash1489_g170714 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170714 = Small_Motion789_g170714;
				#else
				float3 staticSwitch495_g170714 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170714 = temp_output_2503_16_g170714;
				half Global_DistMask1820_g170714 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170714 ) / _MotionDistValue ) ) );
				float4 break1710_g170714 = Model_VertexMasks518_g170714;
				float4 break33_g170716 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170716 = ( break1710_g170714.x * break33_g170716.x );
				float temp_output_29_0_g170716 = ( break1710_g170714.y * break33_g170716.y );
				float temp_output_31_0_g170716 = ( break1710_g170714.z * break33_g170716.z );
				float temp_output_28_0_g170716 = ( temp_output_30_0_g170716 + temp_output_29_0_g170716 + temp_output_31_0_g170716 + ( break1710_g170714.w * break33_g170716.w ) );
				float temp_output_1729_0_g170714 = temp_output_28_0_g170716;
				float4 break33_g170718 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170718 = ( (Model_BoundsData1322_g170714).z * break33_g170718.x );
				float temp_output_29_0_g170718 = ( (Model_BoundsData1322_g170714).w * break33_g170718.y );
				float temp_output_1735_0_g170714 = ( temp_output_30_0_g170718 + temp_output_29_0_g170718 );
				float lerpResult1908_g170714 = lerp( temp_output_1729_0_g170714 , temp_output_1735_0_g170714 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170714 = break1804_g170714.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170714 = Tiny_Mask_Legacy1807_g170714;
				#else
				float staticSwitch1810_g170714 = lerpResult1908_g170714;
				#endif
				float clampResult17_g170720 = clamp( staticSwitch1810_g170714 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170729 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170729 = ( clampResult17_g170720 - temp_output_7_0_g170729 );
				float temp_output_6_0_g170721 = saturate( ( ( temp_output_9_0_g170729 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170721 = ( temp_output_6_0_g170721 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170721 = temp_output_6_0_g170721;
				#endif
				half Tiny_Mask218_g170714 = staticSwitch14_g170721;
				float3 temp_output_2503_20_g170714 = Out_NormalOS15_g170730;
				half3 Model_NormalOS554_g170714 = temp_output_2503_20_g170714;
				half3 Input_NormalOS533_g170734 = Model_NormalOS554_g170714;
				half3 Tiny_Position2469_g170714 = Model_PositionWO162_g170714;
				half3 Input_PositionWO500_g170734 = Tiny_Position2469_g170714;
				half Input_MotionTilling321_g170734 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170736 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170734 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170734 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170734).xz * Input_MotionTilling321_g170734 * 0.005 ) + ( lerpResult128_g170736 * Input_MotionSpeed62_g170734 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170734 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170734 = lerp( ( Input_NormalOS533_g170734 * Flutter_Noise535_g170734 ) , Flutter_Noise535_g170734 , Input_MotionNoise542_g170734);
				half3 Input_ModelPositionWO761_g170733 = Model_PositionWO162_g170714;
				half3 Input_ModelPivotsWO419_g170733 = Model_PivotWO402_g170714;
				half Input_MotionPivots629_g170733 = _MotionBasePivotValue;
				float3 lerpResult771_g170733 = lerp( Input_ModelPositionWO761_g170733 , Input_ModelPivotsWO419_g170733 , Input_MotionPivots629_g170733);
				half4 Input_ModelMotionData763_g170733 = Model_PhaseData489_g170714;
				half Input_MotionPhase764_g170733 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170714 = ( lerpResult771_g170733 + ( (Input_ModelMotionData763_g170733).z * Input_MotionPhase764_g170733 * 5.0 ) );
				half3 Input_PositionWO419_g170739 = Base_Position1394_g170714;
				half Input_MotionTilling321_g170739 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170739 = ( -(Input_PositionWO419_g170739).xz * Input_MotionTilling321_g170739 * 0.005 );
				float2 temp_output_3_0_g170741 = Noise_Coord515_g170739;
				half2 Input_WindDirWS803_g170739 = Global_WindDirWS2542_g170714;
				float2 temp_output_21_0_g170741 = Input_WindDirWS803_g170739;
				float lerpResult128_g170740 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170739 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170739 = ( lerpResult128_g170740 * 0.02 * Input_MotionSpeed62_g170739 );
				float temp_output_15_0_g170741 = Noise_Speed516_g170739;
				float temp_output_23_0_g170741 = frac( temp_output_15_0_g170741 );
				float4 lerpResult39_g170741 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170741 + ( temp_output_21_0_g170741 * temp_output_23_0_g170741 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170741 + ( temp_output_21_0_g170741 * frac( ( temp_output_15_0_g170741 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170741 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170739 = lerpResult39_g170741;
				half4 Noise_Params685_g170739 = temp_output_635_0_g170739;
				half Input_WindValue853_g170739 = Global_WindValue1855_g170714;
				float temp_output_855_0_g170739 = ( (Noise_Params685_g170739).a * Input_WindValue853_g170739 );
				half Input_PushWave858_g170739 = Global_PushWave2675_g170714;
				half Input_PushAlpha806_g170739 = ( Global_PushAlpha1504_g170714 * _MotionBasePushValue );
				float lerpResult831_g170739 = lerp( temp_output_855_0_g170739 , Input_PushWave858_g170739 , Input_PushAlpha806_g170739);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170739 = lerpResult831_g170739;
				#else
				float staticSwitch828_g170739 = temp_output_855_0_g170739;
				#endif
				half Base_Wave1159_g170714 = staticSwitch828_g170739;
				float temp_output_888_0_g170745 = ( (Noise_Params685_g170745).b * Input_WindValue881_g170745 );
				float lerpResult867_g170745 = lerp( temp_output_888_0_g170745 , ( (Noise_Params685_g170745).b * Input_PushWave890_g170745 ) , Input_PushAlpha806_g170745);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170745 = lerpResult867_g170745;
				#else
				float staticSwitch886_g170745 = temp_output_888_0_g170745;
				#endif
				half Small_Wave1427_g170714 = staticSwitch886_g170745;
				float lerpResult2422_g170714 = lerp( Base_Wave1159_g170714 , Small_Wave1427_g170714 , _motion_small_mode);
				half Global_Wave1475_g170714 = lerpResult2422_g170714;
				half Input_GlobalWave546_g170734 = Global_Wave1475_g170714;
				float temp_output_548_0_g170734 = ( Input_GlobalWave546_g170734 * Input_GlobalWave546_g170734 );
				half Flutter_Wave556_g170734 = temp_output_548_0_g170734;
				half3 Tiny_Noise859_g170714 = ( lerpResult537_g170734 * Flutter_Wave556_g170734 );
				half3 Tiny_Flutter1451_g170714 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170714 * Tiny_Mask218_g170714 * Tiny_Noise859_g170714 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170714 = Tiny_Flutter1451_g170714;
				#else
				float3 staticSwitch414_g170714 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170714 = ( staticSwitch495_g170714 + staticSwitch414_g170714 );
				float3 In_PositionAddOS16_g170731 = Final_PositionADD1569_g170714;
				float3 temp_output_2503_24_g170714 = Out_PivotOS15_g170730;
				float3 In_PivotOS16_g170731 = temp_output_2503_24_g170714;
				float3 In_PivotWS16_g170731 = Out_PivotWS15_g170730;
				float3 In_PivotWO16_g170731 = temp_output_2503_19_g170714;
				float3 In_NormalOS16_g170731 = temp_output_2503_20_g170714;
				float3 In_NormalWS16_g170731 = Out_NormalWS15_g170730;
				float3 In_NormalRawOS16_g170731 = Out_NormalRawOS15_g170730;
				float3 In_NormalRawWS16_g170731 = Out_NormalRawWS15_g170730;
				float4 In_TangentOS16_g170731 = Out_TangentOS15_g170730;
				float3 In_ViewDirWS16_g170731 = Out_ViewDirWS15_g170730;
				float4 In_VertexData16_g170731 = temp_output_2503_29_g170714;
				float4 In_PhaseData16_g170731 = temp_output_2503_27_g170714;
				float4 In_BoundsData16_g170731 = temp_output_2503_30_g170714;
				float4 break748_g170714 = Model_VertexMasks518_g170714;
				float4 break33_g170723 = _motion_base_vert_mode;
				float temp_output_30_0_g170723 = ( break748_g170714.x * break33_g170723.x );
				float temp_output_29_0_g170723 = ( break748_g170714.y * break33_g170723.y );
				float temp_output_31_0_g170723 = ( break748_g170714.z * break33_g170723.z );
				float temp_output_28_0_g170723 = ( temp_output_30_0_g170723 + temp_output_29_0_g170723 + temp_output_31_0_g170723 + ( break748_g170714.w * break33_g170723.w ) );
				float temp_output_1731_0_g170714 = temp_output_28_0_g170723;
				float4 break33_g170724 = _motion_base_proc_mode;
				float temp_output_30_0_g170724 = ( (Model_BoundsData1322_g170714).z * break33_g170724.x );
				float temp_output_29_0_g170724 = ( (Model_BoundsData1322_g170714).w * break33_g170724.y );
				float temp_output_1733_0_g170714 = ( temp_output_30_0_g170724 + temp_output_29_0_g170724 );
				float lerpResult1904_g170714 = lerp( temp_output_1731_0_g170714 , temp_output_1733_0_g170714 , _motion_base_mask_mode);
				float clampResult17_g170722 = clamp( lerpResult1904_g170714 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170727 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170727 = ( clampResult17_g170722 - temp_output_7_0_g170727 );
				float temp_output_6_0_g170725 = saturate( ( ( temp_output_9_0_g170727 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170725 = ( temp_output_6_0_g170725 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170725 = temp_output_6_0_g170725;
				#endif
				half Base_Mask217_g170714 = staticSwitch14_g170725;
				half2 Noise_DirWS825_g170739 = ((temp_output_635_0_g170739).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170739 = _MotionBaseNoiseValue;
				float lerpResult701_g170739 = lerp( 1.0 , Input_MotionNoise552_g170739 , Input_WindValue853_g170739);
				float2 lerpResult646_g170739 = lerp( Input_WindDirWS803_g170739 , Noise_DirWS825_g170739 , lerpResult701_g170739);
				half Input_MotionDelay753_g170739 = _MotionBaseDelayValue;
				float lerpResult756_g170739 = lerp( 1.0 , ( Input_WindValue853_g170739 * Input_WindValue853_g170739 ) , Input_MotionDelay753_g170739);
				half Wind_Delay815_g170739 = lerpResult756_g170739;
				float2 temp_output_809_0_g170739 = ( lerpResult646_g170739 * Input_WindValue853_g170739 * Wind_Delay815_g170739 );
				half2 Global_PushDirWS1972_g170714 = temp_output_791_0_g170750;
				half2 Input_PushDirWS807_g170739 = Global_PushDirWS1972_g170714;
				float2 lerpResult811_g170739 = lerp( temp_output_809_0_g170739 , Input_PushDirWS807_g170739 , Input_PushAlpha806_g170739);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170739 = lerpResult811_g170739;
				#else
				float2 staticSwitch808_g170739 = temp_output_809_0_g170739;
				#endif
				float2 break83_g170744 = staticSwitch808_g170739;
				float3 appendResult79_g170744 = (float3(break83_g170744.x , 0.0 , break83_g170744.y));
				half2 Base_Bending893_g170714 = (( mul( unity_WorldToObject, float4( appendResult79_g170744 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170714 = ( _MotionBaseIntensityValue * Base_Mask217_g170714 * Base_Bending893_g170714 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170714 = Base_Motion1440_g170714;
				#else
				float2 staticSwitch2384_g170714 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170714 = (float4(staticSwitch2384_g170714 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170714 = appendResult2023_g170714;
				float4 In_RotationData16_g170731 = Final_RotationData1570_g170714;
				{
				Data16_g170731.Dummy = In_Dummy16_g170731;
				Data16_g170731.PositionOS = In_PositionOS16_g170731;
				Data16_g170731.PositionWS = In_PositionWS16_g170731;
				Data16_g170731.PositionWO = In_PositionWO16_g170731;
				Data16_g170731.PositionRawOS = In_PositionRawOS16_g170731;
				Data16_g170731.PositionAddOS = In_PositionAddOS16_g170731;
				Data16_g170731.PivotOS = In_PivotOS16_g170731;
				Data16_g170731.PivotWS = In_PivotWS16_g170731;
				Data16_g170731.PivotWO = In_PivotWO16_g170731;
				Data16_g170731.NormalOS = In_NormalOS16_g170731;
				Data16_g170731.NormalWS = In_NormalWS16_g170731;
				Data16_g170731.NormalRawOS = In_NormalRawOS16_g170731;
				Data16_g170731.NormalRawWS = In_NormalRawWS16_g170731;
				Data16_g170731.TangentOS = In_TangentOS16_g170731;
				Data16_g170731.ViewDirWS = In_ViewDirWS16_g170731;
				Data16_g170731.VertexData = In_VertexData16_g170731;
				Data16_g170731.PhaseData = In_PhaseData16_g170731;
				Data16_g170731.BoundsData = In_BoundsData16_g170731;
				Data16_g170731.RotationData = In_RotationData16_g170731;
				}
				TVEModelData Data15_g170964 = Data16_g170731;
				float Out_Dummy15_g170964 = 0;
				float3 Out_PositionOS15_g170964 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170964 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170964 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170964 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170964 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170964 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170964 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170964 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170964 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170964 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170964 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170964 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170964 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170964 = float3( 0,0,0 );
				float4 Out_VertexData15_g170964 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170964 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170964 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170964 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170964 = Data15_g170964.Dummy;
				Out_PositionOS15_g170964 = Data15_g170964.PositionOS;
				Out_PositionWS15_g170964 = Data15_g170964.PositionWS;
				Out_PositionWO15_g170964 = Data15_g170964.PositionWO;
				Out_PositionRawOS15_g170964 = Data15_g170964.PositionRawOS;
				Out_PositionAddOS15_g170964 = Data15_g170964.PositionAddOS;
				Out_PivotOS15_g170964 = Data15_g170964.PivotOS;
				Out_PivotWS15_g170964 = Data15_g170964.PivotWS;
				Out_PivotWO15_g170964 = Data15_g170964.PivotWO;
				Out_NormalOS15_g170964 = Data15_g170964.NormalOS;
				Out_NormalWS15_g170964 = Data15_g170964.NormalWS;
				Out_NormalRawOS15_g170964 = Data15_g170964.NormalRawOS;
				Out_NormalRawWS15_g170964 = Data15_g170964.NormalRawWS;
				Out_TangentOS15_g170964 = Data15_g170964.TangentOS;
				Out_ViewDirWS15_g170964 = Data15_g170964.ViewDirWS;
				Out_VertexData15_g170964 = Data15_g170964.VertexData;
				Out_PhaseData15_g170964 = Data15_g170964.PhaseData;
				Out_BoundsData15_g170964 = Data15_g170964.BoundsData;
				Out_RotationData15_g170964 = Data15_g170964.RotationData;
				}
				half3 Model_PositionOS147_g170963 = Out_PositionOS15_g170964;
				half3 Input_False58_g170966 = Model_PositionOS147_g170963;
				half3 VertexPos40_g170967 = Model_PositionOS147_g170963;
				half3 VertexPos40_g170968 = VertexPos40_g170967;
				float3 appendResult74_g170968 = (float3(VertexPos40_g170968.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170968 = appendResult74_g170968;
				float3 break84_g170968 = VertexPos40_g170968;
				float3 appendResult81_g170968 = (float3(0.0 , break84_g170968.y , break84_g170968.z));
				half3 VertexPosOtherAxis82_g170968 = appendResult81_g170968;
				float4 temp_output_1567_33_g170963 = Out_RotationData15_g170964;
				half4 Model_VertexBend1569_g170963 = temp_output_1567_33_g170963;
				half2 Angle44_g170967 = (Model_VertexBend1569_g170963).xy;
				half Angle44_g170968 = (Angle44_g170967).y;
				half3 VertexPos40_g170969 = ( VertexPosRotationAxis50_g170968 + ( VertexPosOtherAxis82_g170968 * cos( Angle44_g170968 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170968 ) * sin( Angle44_g170968 ) ) );
				float3 appendResult74_g170969 = (float3(0.0 , 0.0 , VertexPos40_g170969.z));
				half3 VertexPosRotationAxis50_g170969 = appendResult74_g170969;
				float3 break84_g170969 = VertexPos40_g170969;
				float3 appendResult81_g170969 = (float3(break84_g170969.x , break84_g170969.y , 0.0));
				half3 VertexPosOtherAxis82_g170969 = appendResult81_g170969;
				half Angle44_g170969 = -(Angle44_g170967).x;
				half3 Input_True57_g170966 = ( VertexPosRotationAxis50_g170969 + ( VertexPosOtherAxis82_g170969 * cos( Angle44_g170969 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170969 ) * sin( Angle44_g170969 ) ) );
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170966 = Input_True57_g170966;
				#else
				float3 staticSwitch65_g170966 = Input_False58_g170966;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170966 = Input_True57_g170966;
				#else
				float3 staticSwitch69_g170966 = staticSwitch65_g170966;
				#endif
				float3 temp_output_1578_0_g170963 = staticSwitch69_g170966;
				float3 temp_output_1567_31_g170963 = Out_PositionAddOS15_g170964;
				half3 Model_PositionADD1568_g170963 = temp_output_1567_31_g170963;
				half3 Final_PositionOS178_g170963 = ( temp_output_1578_0_g170963 + Model_PositionADD1568_g170963 );
				float3 In_PositionOS16_g170965 = Final_PositionOS178_g170963;
				float3 In_PositionWS16_g170965 = Out_PositionWS15_g170964;
				float3 In_PositionWO16_g170965 = Out_PositionWO15_g170964;
				float3 In_PositionRawOS16_g170965 = Out_PositionRawOS15_g170964;
				float3 In_PositionAddOS16_g170965 = temp_output_1567_31_g170963;
				float3 In_PivotOS16_g170965 = Out_PivotOS15_g170964;
				float3 In_PivotWS16_g170965 = Out_PivotWS15_g170964;
				float3 In_PivotWO16_g170965 = Out_PivotWO15_g170964;
				float3 In_NormalOS16_g170965 = Out_NormalOS15_g170964;
				float3 In_NormalWS16_g170965 = Out_NormalWS15_g170964;
				float3 In_NormalRawOS16_g170965 = Out_NormalRawOS15_g170964;
				float3 In_NormalRawWS16_g170965 = Out_NormalRawWS15_g170964;
				float4 In_TangentOS16_g170965 = Out_TangentOS15_g170964;
				float3 In_ViewDirWS16_g170965 = Out_ViewDirWS15_g170964;
				float4 In_VertexData16_g170965 = Out_VertexData15_g170964;
				float4 In_PhaseData16_g170965 = Out_PhaseData15_g170964;
				float4 In_BoundsData16_g170965 = Out_BoundsData15_g170964;
				float4 In_RotationData16_g170965 = temp_output_1567_33_g170963;
				{
				Data16_g170965.Dummy = In_Dummy16_g170965;
				Data16_g170965.PositionOS = In_PositionOS16_g170965;
				Data16_g170965.PositionWS = In_PositionWS16_g170965;
				Data16_g170965.PositionWO = In_PositionWO16_g170965;
				Data16_g170965.PositionRawOS = In_PositionRawOS16_g170965;
				Data16_g170965.PositionAddOS = In_PositionAddOS16_g170965;
				Data16_g170965.PivotOS = In_PivotOS16_g170965;
				Data16_g170965.PivotWS = In_PivotWS16_g170965;
				Data16_g170965.PivotWO = In_PivotWO16_g170965;
				Data16_g170965.NormalOS = In_NormalOS16_g170965;
				Data16_g170965.NormalWS = In_NormalWS16_g170965;
				Data16_g170965.NormalRawOS = In_NormalRawOS16_g170965;
				Data16_g170965.NormalRawWS = In_NormalRawWS16_g170965;
				Data16_g170965.TangentOS = In_TangentOS16_g170965;
				Data16_g170965.ViewDirWS = In_ViewDirWS16_g170965;
				Data16_g170965.VertexData = In_VertexData16_g170965;
				Data16_g170965.PhaseData = In_PhaseData16_g170965;
				Data16_g170965.BoundsData = In_BoundsData16_g170965;
				Data16_g170965.RotationData = In_RotationData16_g170965;
				}
				TVEModelData Data15_g170988 = Data16_g170965;
				float Out_Dummy15_g170988 = 0;
				float3 Out_PositionOS15_g170988 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170988 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170988 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170988 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170988 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170988 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170988 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170988 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170988 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170988 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170988 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170988 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170988 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170988 = float3( 0,0,0 );
				float4 Out_VertexData15_g170988 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170988 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170988 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170988 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170988 = Data15_g170988.Dummy;
				Out_PositionOS15_g170988 = Data15_g170988.PositionOS;
				Out_PositionWS15_g170988 = Data15_g170988.PositionWS;
				Out_PositionWO15_g170988 = Data15_g170988.PositionWO;
				Out_PositionRawOS15_g170988 = Data15_g170988.PositionRawOS;
				Out_PositionAddOS15_g170988 = Data15_g170988.PositionAddOS;
				Out_PivotOS15_g170988 = Data15_g170988.PivotOS;
				Out_PivotWS15_g170988 = Data15_g170988.PivotWS;
				Out_PivotWO15_g170988 = Data15_g170988.PivotWO;
				Out_NormalOS15_g170988 = Data15_g170988.NormalOS;
				Out_NormalWS15_g170988 = Data15_g170988.NormalWS;
				Out_NormalRawOS15_g170988 = Data15_g170988.NormalRawOS;
				Out_NormalRawWS15_g170988 = Data15_g170988.NormalRawWS;
				Out_TangentOS15_g170988 = Data15_g170988.TangentOS;
				Out_ViewDirWS15_g170988 = Data15_g170988.ViewDirWS;
				Out_VertexData15_g170988 = Data15_g170988.VertexData;
				Out_PhaseData15_g170988 = Data15_g170988.PhaseData;
				Out_BoundsData15_g170988 = Data15_g170988.BoundsData;
				Out_RotationData15_g170988 = Data15_g170988.RotationData;
				}
				float3 In_PositionOS16_g170989 = Out_PositionOS15_g170988;
				float3 In_PositionWS16_g170989 = Out_PositionWS15_g170988;
				float3 temp_output_1567_17_g170987 = Out_PositionWO15_g170988;
				float3 In_PositionWO16_g170989 = temp_output_1567_17_g170987;
				float3 temp_output_1567_26_g170987 = Out_PositionRawOS15_g170988;
				float3 In_PositionRawOS16_g170989 = temp_output_1567_26_g170987;
				float3 In_PositionAddOS16_g170989 = Out_PositionAddOS15_g170988;
				float3 In_PivotOS16_g170989 = Out_PivotOS15_g170988;
				float3 In_PivotWS16_g170989 = Out_PivotWS15_g170988;
				float3 In_PivotWO16_g170989 = Out_PivotWO15_g170988;
				half3 Model_NormalOS1568_g170987 = Out_NormalOS15_g170988;
				float3 lerpResult1589_g170987 = lerp( Model_NormalOS1568_g170987 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170987 = temp_output_1567_26_g170987;
				float3 normalizeResult1594_g170987 = ASESafeNormalize( ( Model_PositionRAW1592_g170987 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170987 = lerp( lerpResult1589_g170987 , normalizeResult1594_g170987 , _NormalSphereValue);
				half3 Input_False58_g171002 = lerpResult1585_g170987;
				half3 VertexPos40_g170991 = lerpResult1585_g170987;
				half3 VertexPos40_g170992 = VertexPos40_g170991;
				float3 appendResult74_g170992 = (float3(VertexPos40_g170992.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170992 = appendResult74_g170992;
				float3 break84_g170992 = VertexPos40_g170992;
				float3 appendResult81_g170992 = (float3(0.0 , break84_g170992.y , break84_g170992.z));
				half3 VertexPosOtherAxis82_g170992 = appendResult81_g170992;
				float4 temp_output_1567_33_g170987 = Out_RotationData15_g170988;
				half4 Model_RotationData1583_g170987 = temp_output_1567_33_g170987;
				half2 Angle44_g170991 = Model_RotationData1583_g170987.xy;
				half Angle44_g170992 = (Angle44_g170991).y;
				half3 VertexPos40_g170993 = ( VertexPosRotationAxis50_g170992 + ( VertexPosOtherAxis82_g170992 * cos( Angle44_g170992 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170992 ) * sin( Angle44_g170992 ) ) );
				float3 appendResult74_g170993 = (float3(0.0 , 0.0 , VertexPos40_g170993.z));
				half3 VertexPosRotationAxis50_g170993 = appendResult74_g170993;
				float3 break84_g170993 = VertexPos40_g170993;
				float3 appendResult81_g170993 = (float3(break84_g170993.x , break84_g170993.y , 0.0));
				half3 VertexPosOtherAxis82_g170993 = appendResult81_g170993;
				half Angle44_g170993 = -(Angle44_g170991).x;
				float3 lerpResult1591_g170987 = lerp( lerpResult1585_g170987 , ( VertexPosRotationAxis50_g170993 + ( VertexPosOtherAxis82_g170993 * cos( Angle44_g170993 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170993 ) * sin( Angle44_g170993 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g171002 = lerpResult1591_g170987;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g171002 = Input_True57_g171002;
				#else
				float3 staticSwitch65_g171002 = Input_False58_g171002;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g171002 = Input_True57_g171002;
				#else
				float3 staticSwitch69_g171002 = staticSwitch65_g171002;
				#endif
				float3 temp_output_1715_0_g170987 = staticSwitch69_g171002;
				float4 temp_output_1567_29_g170987 = Out_VertexData15_g170988;
				half4 Model_VertexData1608_g170987 = temp_output_1567_29_g170987;
				float4 break1683_g170987 = Model_VertexData1608_g170987;
				float4 break33_g170994 = _normal_vert_mode;
				float temp_output_30_0_g170994 = ( break1683_g170987.x * break33_g170994.x );
				float temp_output_29_0_g170994 = ( break1683_g170987.y * break33_g170994.y );
				float temp_output_31_0_g170994 = ( break1683_g170987.z * break33_g170994.z );
				float temp_output_28_0_g170994 = ( temp_output_30_0_g170994 + temp_output_29_0_g170994 + temp_output_31_0_g170994 + ( break1683_g170987.w * break33_g170994.w ) );
				float clampResult17_g170995 = clamp( temp_output_28_0_g170994 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170999 = _NormalMeshRemap.x;
				float temp_output_9_0_g170999 = ( clampResult17_g170995 - temp_output_7_0_g170999 );
				float lerpResult1695_g170987 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170999 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170996 = lerpResult1695_g170987;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170996 = ( temp_output_6_0_g170996 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170996 = temp_output_6_0_g170996;
				#endif
				float temp_output_1690_0_g170987 = staticSwitch14_g170996;
				half Normal_MeskMask1691_g170987 = temp_output_1690_0_g170987;
				half Normal_Proj_Mask1647_g170987 = 1.0;
				float temp_output_1699_0_g170987 = ( Normal_MeskMask1691_g170987 * Normal_Proj_Mask1647_g170987 );
				float3 lerpResult1670_g170987 = lerp( Model_NormalOS1568_g170987 , temp_output_1715_0_g170987 , temp_output_1699_0_g170987);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170987 = lerpResult1670_g170987;
				#else
				float3 staticSwitch1716_g170987 = Model_NormalOS1568_g170987;
				#endif
				half3 Final_NormalOS178_g170987 = staticSwitch1716_g170987;
				float3 In_NormalOS16_g170989 = Final_NormalOS178_g170987;
				float3 temp_output_1567_21_g170987 = Out_NormalWS15_g170988;
				float3 In_NormalWS16_g170989 = temp_output_1567_21_g170987;
				float3 In_NormalRawOS16_g170989 = Out_NormalRawOS15_g170988;
				float3 In_NormalRawWS16_g170989 = Out_NormalRawWS15_g170988;
				float4 In_TangentOS16_g170989 = Out_TangentOS15_g170988;
				float3 In_ViewDirWS16_g170989 = Out_ViewDirWS15_g170988;
				float4 In_VertexData16_g170989 = temp_output_1567_29_g170987;
				float4 In_PhaseData16_g170989 = Out_PhaseData15_g170988;
				float4 In_BoundsData16_g170989 = Out_BoundsData15_g170988;
				float4 In_RotationData16_g170989 = temp_output_1567_33_g170987;
				{
				Data16_g170989.Dummy = In_Dummy16_g170989;
				Data16_g170989.PositionOS = In_PositionOS16_g170989;
				Data16_g170989.PositionWS = In_PositionWS16_g170989;
				Data16_g170989.PositionWO = In_PositionWO16_g170989;
				Data16_g170989.PositionRawOS = In_PositionRawOS16_g170989;
				Data16_g170989.PositionAddOS = In_PositionAddOS16_g170989;
				Data16_g170989.PivotOS = In_PivotOS16_g170989;
				Data16_g170989.PivotWS = In_PivotWS16_g170989;
				Data16_g170989.PivotWO = In_PivotWO16_g170989;
				Data16_g170989.NormalOS = In_NormalOS16_g170989;
				Data16_g170989.NormalWS = In_NormalWS16_g170989;
				Data16_g170989.NormalRawOS = In_NormalRawOS16_g170989;
				Data16_g170989.NormalRawWS = In_NormalRawWS16_g170989;
				Data16_g170989.TangentOS = In_TangentOS16_g170989;
				Data16_g170989.ViewDirWS = In_ViewDirWS16_g170989;
				Data16_g170989.VertexData = In_VertexData16_g170989;
				Data16_g170989.PhaseData = In_PhaseData16_g170989;
				Data16_g170989.BoundsData = In_BoundsData16_g170989;
				Data16_g170989.RotationData = In_RotationData16_g170989;
				}
				TVEModelData Data15_g171012 = Data16_g170989;
				float Out_Dummy15_g171012 = 0;
				float3 Out_PositionOS15_g171012 = float3( 0,0,0 );
				float3 Out_PositionWS15_g171012 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171012 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g171012 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g171012 = float3( 0,0,0 );
				float3 Out_PivotOS15_g171012 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171012 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171012 = float3( 0,0,0 );
				float3 Out_NormalOS15_g171012 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171012 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g171012 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g171012 = float3( 0,0,0 );
				float4 Out_TangentOS15_g171012 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g171012 = float3( 0,0,0 );
				float4 Out_VertexData15_g171012 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g171012 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171012 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g171012 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g171012 = Data15_g171012.Dummy;
				Out_PositionOS15_g171012 = Data15_g171012.PositionOS;
				Out_PositionWS15_g171012 = Data15_g171012.PositionWS;
				Out_PositionWO15_g171012 = Data15_g171012.PositionWO;
				Out_PositionRawOS15_g171012 = Data15_g171012.PositionRawOS;
				Out_PositionAddOS15_g171012 = Data15_g171012.PositionAddOS;
				Out_PivotOS15_g171012 = Data15_g171012.PivotOS;
				Out_PivotWS15_g171012 = Data15_g171012.PivotWS;
				Out_PivotWO15_g171012 = Data15_g171012.PivotWO;
				Out_NormalOS15_g171012 = Data15_g171012.NormalOS;
				Out_NormalWS15_g171012 = Data15_g171012.NormalWS;
				Out_NormalRawOS15_g171012 = Data15_g171012.NormalRawOS;
				Out_NormalRawWS15_g171012 = Data15_g171012.NormalRawWS;
				Out_TangentOS15_g171012 = Data15_g171012.TangentOS;
				Out_ViewDirWS15_g171012 = Data15_g171012.ViewDirWS;
				Out_VertexData15_g171012 = Data15_g171012.VertexData;
				Out_PhaseData15_g171012 = Data15_g171012.PhaseData;
				Out_BoundsData15_g171012 = Data15_g171012.BoundsData;
				Out_RotationData15_g171012 = Data15_g171012.RotationData;
				}
				float3 temp_output_217_24_g171011 = Out_PivotOS15_g171012;
				float3 In_PositionOS16_g171013 = ( Out_PositionOS15_g171012 + temp_output_217_24_g171011 );
				float3 In_PositionWS16_g171013 = Out_PositionWS15_g171012;
				float3 In_PositionWO16_g171013 = Out_PositionWO15_g171012;
				float3 In_PositionRawOS16_g171013 = Out_PositionRawOS15_g171012;
				float3 In_PositionAddOS16_g171013 = Out_PositionAddOS15_g171012;
				float3 In_PivotOS16_g171013 = temp_output_217_24_g171011;
				float3 In_PivotWS16_g171013 = Out_PivotWS15_g171012;
				float3 In_PivotWO16_g171013 = Out_PivotWO15_g171012;
				float3 In_NormalOS16_g171013 = Out_NormalOS15_g171012;
				float3 In_NormalWS16_g171013 = Out_NormalWS15_g171012;
				float3 In_NormalRawOS16_g171013 = Out_NormalRawOS15_g171012;
				float3 In_NormalRawWS16_g171013 = Out_NormalRawWS15_g171012;
				float4 In_TangentOS16_g171013 = Out_TangentOS15_g171012;
				float3 In_ViewDirWS16_g171013 = Out_ViewDirWS15_g171012;
				float4 In_VertexData16_g171013 = Out_VertexData15_g171012;
				float4 In_PhaseData16_g171013 = Out_PhaseData15_g171012;
				float4 In_BoundsData16_g171013 = Out_BoundsData15_g171012;
				float4 In_RotationData16_g171013 = Out_RotationData15_g171012;
				{
				Data16_g171013.Dummy = In_Dummy16_g171013;
				Data16_g171013.PositionOS = In_PositionOS16_g171013;
				Data16_g171013.PositionWS = In_PositionWS16_g171013;
				Data16_g171013.PositionWO = In_PositionWO16_g171013;
				Data16_g171013.PositionRawOS = In_PositionRawOS16_g171013;
				Data16_g171013.PositionAddOS = In_PositionAddOS16_g171013;
				Data16_g171013.PivotOS = In_PivotOS16_g171013;
				Data16_g171013.PivotWS = In_PivotWS16_g171013;
				Data16_g171013.PivotWO = In_PivotWO16_g171013;
				Data16_g171013.NormalOS = In_NormalOS16_g171013;
				Data16_g171013.NormalWS = In_NormalWS16_g171013;
				Data16_g171013.NormalRawOS = In_NormalRawOS16_g171013;
				Data16_g171013.NormalRawWS = In_NormalRawWS16_g171013;
				Data16_g171013.TangentOS = In_TangentOS16_g171013;
				Data16_g171013.ViewDirWS = In_ViewDirWS16_g171013;
				Data16_g171013.VertexData = In_VertexData16_g171013;
				Data16_g171013.PhaseData = In_PhaseData16_g171013;
				Data16_g171013.BoundsData = In_BoundsData16_g171013;
				Data16_g171013.RotationData = In_RotationData16_g171013;
				}
				TVEModelData Data15_g171018 = Data16_g171013;
				float Out_Dummy15_g171018 = 0;
				float3 Out_PositionOS15_g171018 = float3( 0,0,0 );
				float3 Out_PositionWS15_g171018 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171018 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g171018 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g171018 = float3( 0,0,0 );
				float3 Out_PivotOS15_g171018 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171018 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171018 = float3( 0,0,0 );
				float3 Out_NormalOS15_g171018 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171018 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g171018 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g171018 = float3( 0,0,0 );
				float4 Out_TangentOS15_g171018 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g171018 = float3( 0,0,0 );
				float4 Out_VertexData15_g171018 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g171018 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171018 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g171018 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g171018 = Data15_g171018.Dummy;
				Out_PositionOS15_g171018 = Data15_g171018.PositionOS;
				Out_PositionWS15_g171018 = Data15_g171018.PositionWS;
				Out_PositionWO15_g171018 = Data15_g171018.PositionWO;
				Out_PositionRawOS15_g171018 = Data15_g171018.PositionRawOS;
				Out_PositionAddOS15_g171018 = Data15_g171018.PositionAddOS;
				Out_PivotOS15_g171018 = Data15_g171018.PivotOS;
				Out_PivotWS15_g171018 = Data15_g171018.PivotWS;
				Out_PivotWO15_g171018 = Data15_g171018.PivotWO;
				Out_NormalOS15_g171018 = Data15_g171018.NormalOS;
				Out_NormalWS15_g171018 = Data15_g171018.NormalWS;
				Out_NormalRawOS15_g171018 = Data15_g171018.NormalRawOS;
				Out_NormalRawWS15_g171018 = Data15_g171018.NormalRawWS;
				Out_TangentOS15_g171018 = Data15_g171018.TangentOS;
				Out_ViewDirWS15_g171018 = Data15_g171018.ViewDirWS;
				Out_VertexData15_g171018 = Data15_g171018.VertexData;
				Out_PhaseData15_g171018 = Data15_g171018.PhaseData;
				Out_BoundsData15_g171018 = Data15_g171018.BoundsData;
				Out_RotationData15_g171018 = Data15_g171018.RotationData;
				}
				float3 temp_output_31_0_g171015 = Out_PositionOS15_g171018;
				float3 temp_output_6_0_g171029 = ( temp_output_31_0_g171015 + _DisableSRPBatcher );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g171029 = ( temp_output_6_0_g171029 + ( 0.0 * 0.0 ) );
				#else
				float3 staticSwitch14_g171029 = temp_output_6_0_g171029;
				#endif
				
				o.ase_texcoord11.xyz = vertexToFrag73_g170478;
				o.ase_texcoord12.xyz = vertexToFrag76_g170478;
				float temp_output_6_0_g170737 = ( _MotionHighlightValue * Global_DistMask1820_g170714 * ( Tiny_Mask218_g170714 * Tiny_Mask218_g170714 ) * ( Global_Wave1475_g170714 * Global_Wave1475_g170714 * Global_Wave1475_g170714 * Global_Wave1475_g170714 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170737 = ( temp_output_6_0_g170737 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170737 = temp_output_6_0_g170737;
				#endif
				half Wave_Mask1263 = staticSwitch14_g170737;
				float4 appendResult23_g170817 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1263));
				float4 vertexToFrag24_g170817 = appendResult23_g170817;
				o.ase_texcoord13 = vertexToFrag24_g170817;
				
				o.ase_texcoord9 = v.ase_texcoord;
				o.ase_texcoord10.xy = v.texcoord2.xyzw.xy;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord10.zw = 0;
				o.ase_texcoord11.w = 0;
				o.ase_texcoord12.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = staticSwitch14_g171029;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g171018;
				v.tangent = Out_TangentOS15_g171018;

				o.pos = UnityObjectToClipPos(v.vertex);
				float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
				fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);
				fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
				fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
				fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
				o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
				o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
				o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);

				#ifdef DYNAMICLIGHTMAP_ON
				o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
				#endif
				#ifdef LIGHTMAP_ON
				o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
				#endif

				#ifndef LIGHTMAP_ON
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						o.sh = 0;
						#ifdef VERTEXLIGHT_ON
						o.sh += Shade4PointLights (
							unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
							unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
							unity_4LightAtten0, worldPos, worldNormal);
						#endif
						o.sh = ShadeSHPerVertex (worldNormal, o.sh);
					#endif
				#endif

				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_TRANSFER_LIGHTING(o, v.texcoord1.xy);
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_TRANSFER_SHADOW(o, v.texcoord1.xy);
					#else
						TRANSFER_SHADOW(o);
					#endif
				#endif

				#ifdef ASE_FOG
					UNITY_TRANSFER_FOG(o,o.pos);
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
					o.screenPos = ComputeScreenPos(o.pos);
				#endif
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN , bool ase_vface : SV_IsFrontFace
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float3 WorldTangent = float3(IN.tSpace0.x,IN.tSpace1.x,IN.tSpace2.x);
				float3 WorldBiTangent = float3(IN.tSpace0.y,IN.tSpace1.y,IN.tSpace2.y);
				float3 WorldNormal = float3(IN.tSpace0.z,IN.tSpace1.z,IN.tSpace2.z);
				float3 worldPos = float3(IN.tSpace0.w,IN.tSpace1.w,IN.tSpace2.w);
				float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
				#if defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
				#else
					half atten = 1;
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 ScreenPos = IN.screenPos;
				#endif

				float localBreakData4_g171021 = ( 0.0 );
				float localCompData3_g171005 = ( 0.0 );
				TVEVisualData Data3_g171005 = (TVEVisualData)0;
				half Dummy145_g171003 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g171005 = Dummy145_g171003;
				float localBreakData4_g171004 = ( 0.0 );
				float localCompData3_g170976 = ( 0.0 );
				TVEVisualData Data3_g170976 = (TVEVisualData)0;
				half Dummy145_g170971 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170976 = Dummy145_g170971;
				float localBreakData4_g170975 = ( 0.0 );
				float localCompData3_g170953 = ( 0.0 );
				TVEVisualData Data3_g170953 = (TVEVisualData)0;
				half Dummy594_g170950 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170953 = Dummy594_g170950;
				float localBreakData4_g170952 = ( 0.0 );
				float localCompData3_g170936 = ( 0.0 );
				TVEVisualData Data3_g170936 = (TVEVisualData)0;
				half Dummy594_g170935 = ( _CutoutCategory + _CutoutEnd + _CutoutBakeMode );
				float In_Dummy3_g170936 = Dummy594_g170935;
				float localBreakData4_g170938 = ( 0.0 );
				float localCompData3_g170908 = ( 0.0 );
				TVEVisualData Data3_g170908 = (TVEVisualData)0;
				half Dummy594_g170906 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170908 = Dummy594_g170906;
				float localBreakData4_g170907 = ( 0.0 );
				float localCompData3_g170872 = ( 0.0 );
				TVEVisualData Data3_g170872 = (TVEVisualData)0;
				half Dummy594_g170869 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170872 = Dummy594_g170869;
				float localBreakData4_g170870 = ( 0.0 );
				float localCompData3_g170868 = ( 0.0 );
				TVEVisualData Data3_g170868 = (TVEVisualData)0;
				float In_Dummy3_g170868 = 0.0;
				float localBreakData4_g170867 = ( 0.0 );
				float localCompData3_g170845 = ( 0.0 );
				TVEVisualData Data3_g170845 = (TVEVisualData)0;
				half Dummy205_g170842 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170845 = Dummy205_g170842;
				float localBreakData4_g170844 = ( 0.0 );
				float localCompData3_g170822 = ( 0.0 );
				TVEVisualData Data3_g170822 = (TVEVisualData)0;
				half Dummy205_g170818 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170822 = Dummy205_g170818;
				float localBreakData4_g170823 = ( 0.0 );
				float localCompData3_g170811 = ( 0.0 );
				TVEVisualData Data3_g170811 = (TVEVisualData)0;
				half Dummy220_g170808 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170811 = Dummy220_g170808;
				float localBreakData4_g170810 = ( 0.0 );
				float localCompData3_g170801 = ( 0.0 );
				TVEVisualData Data3_g170801 = (TVEVisualData)0;
				half Dummy220_g170798 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170801 = Dummy220_g170798;
				float localBreakData4_g170800 = ( 0.0 );
				float localCompData3_g170790 = ( 0.0 );
				TVEVisualData Data3_g170790 = (TVEVisualData)0;
				half Dummy202_g170788 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170790 = Dummy202_g170788;
				float localBreakData4_g170789 = ( 0.0 );
				float localCompData3_g170687 = ( 0.0 );
				TVEVisualData Data3_g170687 = (TVEVisualData)0;
				half4 Dummy944_g170678 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170687 = Dummy944_g170678.x;
				float localBreakData4_g170686 = ( 0.0 );
				float localCompData3_g170655 = ( 0.0 );
				TVEVisualData Data3_g170655 = (TVEVisualData)0;
				half4 Dummy946_g170634 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170655 = Dummy946_g170634.x;
				float localBreakData4_g170645 = ( 0.0 );
				float localCompData3_g170632 = ( 0.0 );
				TVEVisualData Data3_g170632 = (TVEVisualData)0;
				half4 Dummy130_g170617 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170632 = Dummy130_g170617.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170625) = _MainAlbedoTex;
				float localFilterTexture19_g170628 = ( 0.0 );
				SamplerState SS19_g170628 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170628 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170628 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170628 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170628 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170628 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170628 = SamplerDefault19_g170628;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170628 = SamplerDefault19_g170628;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170628 = SamplerPoint19_g170628;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170628 = SamplerLow19_g170628;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170628 = SamplerMedium19_g170628;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170628 = SamplerHigh19_g170628;
				#endif
				}
				SamplerState Sampler276_g170625 = SS19_g170628;
				half4 Local_Coords180_g170617 = _main_coord_value;
				float4 temp_output_37_0_g170625 = Local_Coords180_g170617;
				half4 Coords276_g170625 = temp_output_37_0_g170625;
				half2 TexCoord276_g170625 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170625 = SampleMain( Texture276_g170625 , Sampler276_g170625 , Coords276_g170625 , TexCoord276_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170625) = _MainAlbedoTex;
				SamplerState Sampler275_g170625 = SS19_g170628;
				half4 Coords275_g170625 = temp_output_37_0_g170625;
				half2 TexCoord275_g170625 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170625 = SampleExtra( Texture275_g170625 , Sampler275_g170625 , Coords275_g170625 , TexCoord275_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170625) = _MainAlbedoTex;
				SamplerState Sampler238_g170625 = SS19_g170628;
				half4 Coords238_g170625 = temp_output_37_0_g170625;
				TVEModelData Data16_g170483 = (TVEModelData)0;
				float In_Dummy16_g170483 = 0.0;
				float3 vertexToFrag73_g170478 = IN.ase_texcoord11.xyz;
				half3 PositionWS122_g170478 = vertexToFrag73_g170478;
				float3 In_PositionWS16_g170483 = PositionWS122_g170478;
				float3 vertexToFrag76_g170478 = IN.ase_texcoord12.xyz;
				half3 PivotWS121_g170478 = vertexToFrag76_g170478;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
				#else
				float3 staticSwitch204_g170478 = PositionWS122_g170478;
				#endif
				half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170483 = PositionWO132_g170478;
				float3 In_PivotWS16_g170483 = PivotWS121_g170478;
				half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170483 = PivotWO133_g170478;
				float3 normalizedWorldNormal = normalize( WorldNormal );
				half3 Normal_WS95_g170478 = normalizedWorldNormal;
				float3 In_NormalWS16_g170483 = Normal_WS95_g170478;
				float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
				half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
				float3 In_ViewDirWS16_g170483 = ViewDirWS169_g170478;
				half4 VertexMasks171_g170478 = IN.ase_color;
				float4 In_VertexData16_g170483 = VertexMasks171_g170478;
				float4 In_BoundsData16_g170483 = float4( 1,1,1,1 );
				{
				Data16_g170483.Dummy = In_Dummy16_g170483;
				Data16_g170483.PositionWS = In_PositionWS16_g170483;
				Data16_g170483.PositionWO = In_PositionWO16_g170483;
				Data16_g170483.PivotWS = In_PivotWS16_g170483;
				Data16_g170483.PivotWO = In_PivotWO16_g170483;
				Data16_g170483.NormalWS = In_NormalWS16_g170483;
				Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
				Data16_g170483.VertexData = In_VertexData16_g170483;
				Data16_g170483.BoundsData = In_BoundsData16_g170483;
				}
				TVEModelData Data15_g170631 = Data16_g170483;
				float Out_Dummy15_g170631 = 0;
				float3 Out_PositionWS15_g170631 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170631 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170631 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170631 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170631 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170631 = float3( 0,0,0 );
				float4 Out_VertexData15_g170631 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170631 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170631 = Data15_g170631.Dummy;
				Out_PositionWS15_g170631 = Data15_g170631.PositionWS;
				Out_PositionWO15_g170631 = Data15_g170631.PositionWO;
				Out_PivotWS15_g170631 = Data15_g170631.PivotWS;
				Out_PivotWO15_g170631 = Data15_g170631.PivotWO;
				Out_NormalWS15_g170631 = Data15_g170631.NormalWS;
				Out_ViewDirWS15_g170631 = Data15_g170631.ViewDirWS;
				Out_VertexData15_g170631 = Data15_g170631.VertexData;
				Out_BoundsData15_g170631 = Data15_g170631.BoundsData;
				}
				half3 Model_PositionWO222_g170617 = Out_PositionWO15_g170631;
				float3 temp_output_279_0_g170625 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170625 = temp_output_279_0_g170625;
				half4 localSamplePlanar2D238_g170625 = SamplePlanar2D( Texture238_g170625 , Sampler238_g170625 , Coords238_g170625 , WorldPosition238_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170625) = _MainAlbedoTex;
				SamplerState Sampler246_g170625 = SS19_g170628;
				half4 Coords246_g170625 = temp_output_37_0_g170625;
				half3 WorldPosition246_g170625 = temp_output_279_0_g170625;
				half3 Model_NormalWS226_g170617 = Out_NormalWS15_g170631;
				float3 temp_output_280_0_g170625 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170625 = temp_output_280_0_g170625;
				half4 localSamplePlanar3D246_g170625 = SamplePlanar3D( Texture246_g170625 , Sampler246_g170625 , Coords246_g170625 , WorldPosition246_g170625 , WorldNormal246_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170625) = _MainAlbedoTex;
				SamplerState Sampler234_g170625 = SS19_g170628;
				float4 Coords234_g170625 = temp_output_37_0_g170625;
				float3 WorldPosition234_g170625 = temp_output_279_0_g170625;
				float4 localSampleStochastic2D234_g170625 = SampleStochastic2D( Texture234_g170625 , Sampler234_g170625 , Coords234_g170625 , WorldPosition234_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170625) = _MainAlbedoTex;
				SamplerState Sampler263_g170625 = SS19_g170628;
				half4 Coords263_g170625 = temp_output_37_0_g170625;
				half3 WorldPosition263_g170625 = temp_output_279_0_g170625;
				half3 WorldNormal263_g170625 = temp_output_280_0_g170625;
				half4 localSampleStochastic3D263_g170625 = SampleStochastic3D( Texture263_g170625 , Sampler263_g170625 , Coords263_g170625 , WorldPosition263_g170625 , WorldNormal263_g170625 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170617 = localSampleMain276_g170625;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170617 = localSampleExtra275_g170625;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170617 = localSamplePlanar2D238_g170625;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170617 = localSamplePlanar3D246_g170625;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170617 = localSampleStochastic2D234_g170625;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170617 = localSampleStochastic3D263_g170625;
				#else
				float4 staticSwitch184_g170617 = localSampleMain276_g170625;
				#endif
				half4 Local_AlbedoTex185_g170617 = staticSwitch184_g170617;
				float3 lerpResult53_g170617 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170617).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170617 = lerpResult53_g170617;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170627) = _MainShaderTex;
				float localFilterTexture30_g170630 = ( 0.0 );
				SamplerState SS30_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170630 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170630 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170630 = SamplerDefault30_g170630;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170630 = SamplerDefault30_g170630;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170630 = SamplerPoint30_g170630;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170630 = SamplerLow30_g170630;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170630 = SamplerMedium30_g170630;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170630 = SamplerHigh30_g170630;
				#endif
				}
				SamplerState Sampler276_g170627 = SS30_g170630;
				float4 temp_output_37_0_g170627 = Local_Coords180_g170617;
				half4 Coords276_g170627 = temp_output_37_0_g170627;
				half2 TexCoord276_g170627 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170627 = SampleMain( Texture276_g170627 , Sampler276_g170627 , Coords276_g170627 , TexCoord276_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170627) = _MainShaderTex;
				SamplerState Sampler275_g170627 = SS30_g170630;
				half4 Coords275_g170627 = temp_output_37_0_g170627;
				half2 TexCoord275_g170627 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170627 = SampleExtra( Texture275_g170627 , Sampler275_g170627 , Coords275_g170627 , TexCoord275_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170627) = _MainShaderTex;
				SamplerState Sampler238_g170627 = SS30_g170630;
				half4 Coords238_g170627 = temp_output_37_0_g170627;
				float3 temp_output_279_0_g170627 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170627 = temp_output_279_0_g170627;
				half4 localSamplePlanar2D238_g170627 = SamplePlanar2D( Texture238_g170627 , Sampler238_g170627 , Coords238_g170627 , WorldPosition238_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170627) = _MainShaderTex;
				SamplerState Sampler246_g170627 = SS30_g170630;
				half4 Coords246_g170627 = temp_output_37_0_g170627;
				half3 WorldPosition246_g170627 = temp_output_279_0_g170627;
				float3 temp_output_280_0_g170627 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170627 = temp_output_280_0_g170627;
				half4 localSamplePlanar3D246_g170627 = SamplePlanar3D( Texture246_g170627 , Sampler246_g170627 , Coords246_g170627 , WorldPosition246_g170627 , WorldNormal246_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170627) = _MainShaderTex;
				SamplerState Sampler234_g170627 = SS30_g170630;
				float4 Coords234_g170627 = temp_output_37_0_g170627;
				float3 WorldPosition234_g170627 = temp_output_279_0_g170627;
				float4 localSampleStochastic2D234_g170627 = SampleStochastic2D( Texture234_g170627 , Sampler234_g170627 , Coords234_g170627 , WorldPosition234_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170627) = _MainShaderTex;
				SamplerState Sampler263_g170627 = SS30_g170630;
				half4 Coords263_g170627 = temp_output_37_0_g170627;
				half3 WorldPosition263_g170627 = temp_output_279_0_g170627;
				half3 WorldNormal263_g170627 = temp_output_280_0_g170627;
				half4 localSampleStochastic3D263_g170627 = SampleStochastic3D( Texture263_g170627 , Sampler263_g170627 , Coords263_g170627 , WorldPosition263_g170627 , WorldNormal263_g170627 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170617 = localSampleMain276_g170627;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170617 = localSampleExtra275_g170627;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170617 = localSamplePlanar2D238_g170627;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170617 = localSamplePlanar3D246_g170627;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170617 = localSampleStochastic2D234_g170627;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170617 = localSampleStochastic3D263_g170627;
				#else
				float4 staticSwitch198_g170617 = localSampleMain276_g170627;
				#endif
				half4 Local_MasksTex199_g170617 = staticSwitch198_g170617;
				float lerpResult23_g170617 = lerp( 1.0 , (Local_MasksTex199_g170617).y , _MainOcclusionValue);
				float4 appendResult73_g170617 = (float4(( (Local_MasksTex199_g170617).x * _MainMetallicValue ) , lerpResult23_g170617 , (Local_MasksTex199_g170617).z , ( (Local_MasksTex199_g170617).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170617 = appendResult73_g170617;
				float clampResult17_g170622 = clamp( (Local_Masks109_g170617).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170633 = _MainMultiRemap.x;
				float temp_output_9_0_g170633 = ( clampResult17_g170622 - temp_output_7_0_g170633 );
				half Local_MultiMask78_g170617 = saturate( ( ( temp_output_9_0_g170633 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170617 = lerp( 1.0 , Local_MultiMask78_g170617 , _MainColorMode);
				float4 lerpResult62_g170617 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170617);
				half3 Local_ColorRGB93_g170617 = (lerpResult62_g170617).rgb;
				half3 Local_Albedo139_g170617 = ( Local_AlbedoRGB107_g170617 * Local_ColorRGB93_g170617 );
				float3 In_Albedo3_g170632 = Local_Albedo139_g170617;
				float3 In_AlbedoRaw3_g170632 = Local_Albedo139_g170617;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170626) = _MainNormalTex;
				float localFilterTexture29_g170629 = ( 0.0 );
				SamplerState SS29_g170629 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170629 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170629 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170629 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170629 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170629 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170629 = SamplerDefault29_g170629;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170629 = SamplerDefault29_g170629;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170629 = SamplerPoint29_g170629;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170629 = SamplerLow29_g170629;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170629 = SamplerMedium29_g170629;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170629 = SamplerHigh29_g170629;
				#endif
				}
				SamplerState Sampler276_g170626 = SS29_g170629;
				float4 temp_output_37_0_g170626 = Local_Coords180_g170617;
				half4 Coords276_g170626 = temp_output_37_0_g170626;
				half2 TexCoord276_g170626 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170626 = SampleMain( Texture276_g170626 , Sampler276_g170626 , Coords276_g170626 , TexCoord276_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170626) = _MainNormalTex;
				SamplerState Sampler275_g170626 = SS29_g170629;
				half4 Coords275_g170626 = temp_output_37_0_g170626;
				half2 TexCoord275_g170626 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170626 = SampleExtra( Texture275_g170626 , Sampler275_g170626 , Coords275_g170626 , TexCoord275_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170626) = _MainNormalTex;
				SamplerState Sampler238_g170626 = SS29_g170629;
				half4 Coords238_g170626 = temp_output_37_0_g170626;
				float3 temp_output_279_0_g170626 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170626 = temp_output_279_0_g170626;
				half4 localSamplePlanar2D238_g170626 = SamplePlanar2D( Texture238_g170626 , Sampler238_g170626 , Coords238_g170626 , WorldPosition238_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170626) = _MainNormalTex;
				SamplerState Sampler246_g170626 = SS29_g170629;
				half4 Coords246_g170626 = temp_output_37_0_g170626;
				half3 WorldPosition246_g170626 = temp_output_279_0_g170626;
				float3 temp_output_280_0_g170626 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170626 = temp_output_280_0_g170626;
				half4 localSamplePlanar3D246_g170626 = SamplePlanar3D( Texture246_g170626 , Sampler246_g170626 , Coords246_g170626 , WorldPosition246_g170626 , WorldNormal246_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170626) = _MainNormalTex;
				SamplerState Sampler234_g170626 = SS29_g170629;
				float4 Coords234_g170626 = temp_output_37_0_g170626;
				float3 WorldPosition234_g170626 = temp_output_279_0_g170626;
				float4 localSampleStochastic2D234_g170626 = SampleStochastic2D( Texture234_g170626 , Sampler234_g170626 , Coords234_g170626 , WorldPosition234_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170626) = _MainNormalTex;
				SamplerState Sampler263_g170626 = SS29_g170629;
				half4 Coords263_g170626 = temp_output_37_0_g170626;
				half3 WorldPosition263_g170626 = temp_output_279_0_g170626;
				half3 WorldNormal263_g170626 = temp_output_280_0_g170626;
				half4 localSampleStochastic3D263_g170626 = SampleStochastic3D( Texture263_g170626 , Sampler263_g170626 , Coords263_g170626 , WorldPosition263_g170626 , WorldNormal263_g170626 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170617 = localSampleMain276_g170626;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170617 = localSampleExtra275_g170626;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170617 = localSamplePlanar2D238_g170626;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170617 = localSamplePlanar3D246_g170626;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170617 = localSampleStochastic2D234_g170626;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170617 = localSampleStochastic3D263_g170626;
				#else
				float4 staticSwitch193_g170617 = localSampleMain276_g170626;
				#endif
				half4 Local_NormaTex191_g170617 = staticSwitch193_g170617;
				half4 Normal_Packed45_g170618 = Local_NormaTex191_g170617;
				float2 appendResult58_g170618 = (float2(( (Normal_Packed45_g170618).x * (Normal_Packed45_g170618).w ) , (Normal_Packed45_g170618).y));
				half2 Normal_Default50_g170618 = appendResult58_g170618;
				half2 Normal_ASTC41_g170618 = (Normal_Packed45_g170618).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170618 = Normal_ASTC41_g170618;
				#else
				float2 staticSwitch38_g170618 = Normal_Default50_g170618;
				#endif
				half2 Normal_NO_DTX544_g170618 = (Normal_Packed45_g170618).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170618 = Normal_NO_DTX544_g170618;
				#else
				float2 staticSwitch37_g170618 = staticSwitch38_g170618;
				#endif
				float2 temp_output_26_0_g170617 = ( (staticSwitch37_g170618*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3(WorldTangent,WorldBiTangent,WorldNormal);
				half2 Normal_Planar45_g170619 = temp_output_26_0_g170617;
				float2 break71_g170619 = Normal_Planar45_g170619;
				float3 appendResult72_g170619 = (float3(break71_g170619.x , 0.0 , break71_g170619.y));
				float2 temp_output_205_0_g170617 = (mul( ase_worldToTangent, appendResult72_g170619 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#else
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#endif
				half2 Local_NormalTS108_g170617 = staticSwitch204_g170617;
				float2 In_NormalTS3_g170632 = Local_NormalTS108_g170617;
				float3 appendResult68_g170620 = (float3(Local_NormalTS108_g170617 , 1.0));
				float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
				float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
				float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
				float3 tanNormal74_g170620 = appendResult68_g170620;
				float3 worldNormal74_g170620 = normalize( float3(dot(tanToWorld0,tanNormal74_g170620), dot(tanToWorld1,tanNormal74_g170620), dot(tanToWorld2,tanNormal74_g170620)) );
				half3 Local_NormalWS250_g170617 = worldNormal74_g170620;
				float3 In_NormalWS3_g170632 = Local_NormalWS250_g170617;
				float4 In_Shader3_g170632 = Local_Masks109_g170617;
				float4 In_Emissive3_g170632 = half4(1,1,1,1);
				float3 temp_output_3_0_g170621 = Local_Albedo139_g170617;
				float dotResult20_g170621 = dot( temp_output_3_0_g170621 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170617 = dotResult20_g170621;
				float In_Grayscale3_g170632 = Local_Grayscale110_g170617;
				float clampResult144_g170617 = clamp( saturate( ( Local_Grayscale110_g170617 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170617 = clampResult144_g170617;
				float In_Luminosity3_g170632 = Local_Luminosity145_g170617;
				float In_MultiMask3_g170632 = Local_MultiMask78_g170617;
				float temp_output_187_0_g170617 = (Local_AlbedoTex185_g170617).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170617 = ( temp_output_187_0_g170617 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170617 = temp_output_187_0_g170617;
				#endif
				half Local_AlphaClip111_g170617 = staticSwitch236_g170617;
				float In_AlphaClip3_g170632 = Local_AlphaClip111_g170617;
				half Local_AlphaFade246_g170617 = (lerpResult62_g170617).a;
				float In_AlphaFade3_g170632 = Local_AlphaFade246_g170617;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170632 = temp_cast_4;
				float In_Transmission3_g170632 = 1.0;
				float In_Thickness3_g170632 = 0.0;
				float In_Diffusion3_g170632 = 0.0;
				{
				Data3_g170632.Dummy = In_Dummy3_g170632;
				Data3_g170632.Albedo = In_Albedo3_g170632;
				Data3_g170632.AlbedoRaw = In_AlbedoRaw3_g170632;
				Data3_g170632.NormalTS = In_NormalTS3_g170632;
				Data3_g170632.NormalWS = In_NormalWS3_g170632;
				Data3_g170632.Shader = In_Shader3_g170632;
				Data3_g170632.Emissive= In_Emissive3_g170632;
				Data3_g170632.MultiMask = In_MultiMask3_g170632;
				Data3_g170632.Grayscale = In_Grayscale3_g170632;
				Data3_g170632.Luminosity = In_Luminosity3_g170632;
				Data3_g170632.AlphaClip = In_AlphaClip3_g170632;
				Data3_g170632.AlphaFade = In_AlphaFade3_g170632;
				Data3_g170632.Translucency = In_Translucency3_g170632;
				Data3_g170632.Transmission = In_Transmission3_g170632;
				Data3_g170632.Thickness = In_Thickness3_g170632;
				Data3_g170632.Diffusion = In_Diffusion3_g170632;
				}
				TVEVisualData Data4_g170645 = Data3_g170632;
				float Out_Dummy4_g170645 = 0;
				float3 Out_Albedo4_g170645 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170645 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170645 = float2( 0,0 );
				float3 Out_NormalWS4_g170645 = float3( 0,0,0 );
				float4 Out_Shader4_g170645 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170645 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170645 = 0;
				float Out_Grayscale4_g170645 = 0;
				float Out_Luminosity4_g170645 = 0;
				float Out_AlphaClip4_g170645 = 0;
				float Out_AlphaFade4_g170645 = 0;
				float3 Out_Translucency4_g170645 = float3( 0,0,0 );
				float Out_Transmission4_g170645 = 0;
				float Out_Thickness4_g170645 = 0;
				float Out_Diffusion4_g170645 = 0;
				{
				Out_Dummy4_g170645 = Data4_g170645.Dummy;
				Out_Albedo4_g170645 = Data4_g170645.Albedo;
				Out_AlbedoRaw4_g170645 = Data4_g170645.AlbedoRaw;
				Out_NormalTS4_g170645 = Data4_g170645.NormalTS;
				Out_NormalWS4_g170645 = Data4_g170645.NormalWS;
				Out_Shader4_g170645 = Data4_g170645.Shader;
				Out_Emissive4_g170645= Data4_g170645.Emissive;
				Out_MultiMask4_g170645 = Data4_g170645.MultiMask;
				Out_Grayscale4_g170645 = Data4_g170645.Grayscale;
				Out_Luminosity4_g170645= Data4_g170645.Luminosity;
				Out_AlphaClip4_g170645 = Data4_g170645.AlphaClip;
				Out_AlphaFade4_g170645 = Data4_g170645.AlphaFade;
				Out_Translucency4_g170645 = Data4_g170645.Translucency;
				Out_Transmission4_g170645 = Data4_g170645.Transmission;
				Out_Thickness4_g170645 = Data4_g170645.Thickness;
				Out_Diffusion4_g170645 = Data4_g170645.Diffusion;
				}
				half3 Visual_Albedo527_g170634 = Out_Albedo4_g170645;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170635) = _SecondAlbedoTex;
				float localFilterTexture19_g170651 = ( 0.0 );
				SamplerState SS19_g170651 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170651 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170651 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170651 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170651 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170651 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170651 = SamplerDefault19_g170651;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170651 = SamplerDefault19_g170651;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170651 = SamplerPoint19_g170651;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170651 = SamplerLow19_g170651;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170651 = SamplerMedium19_g170651;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170651 = SamplerHigh19_g170651;
				#endif
				}
				SamplerState Sampler276_g170635 = SS19_g170651;
				half4 Local_LayerCoords790_g170634 = _second_coord_value;
				float4 temp_output_37_0_g170635 = Local_LayerCoords790_g170634;
				half4 Coords276_g170635 = temp_output_37_0_g170635;
				half2 TexCoord276_g170635 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170635 = SampleMain( Texture276_g170635 , Sampler276_g170635 , Coords276_g170635 , TexCoord276_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170635) = _SecondAlbedoTex;
				SamplerState Sampler275_g170635 = SS19_g170651;
				half4 Coords275_g170635 = temp_output_37_0_g170635;
				half2 TexCoord275_g170635 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170635 = SampleExtra( Texture275_g170635 , Sampler275_g170635 , Coords275_g170635 , TexCoord275_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170635) = _SecondAlbedoTex;
				SamplerState Sampler238_g170635 = SS19_g170651;
				half4 Coords238_g170635 = temp_output_37_0_g170635;
				TVEModelData Data15_g170654 = Data16_g170483;
				float Out_Dummy15_g170654 = 0;
				float3 Out_PositionWS15_g170654 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170654 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170654 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170654 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170654 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170654 = float3( 0,0,0 );
				float4 Out_VertexData15_g170654 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170654 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170654 = Data15_g170654.Dummy;
				Out_PositionWS15_g170654 = Data15_g170654.PositionWS;
				Out_PositionWO15_g170654 = Data15_g170654.PositionWO;
				Out_PivotWS15_g170654 = Data15_g170654.PivotWS;
				Out_PivotWO15_g170654 = Data15_g170654.PivotWO;
				Out_NormalWS15_g170654 = Data15_g170654.NormalWS;
				Out_ViewDirWS15_g170654 = Data15_g170654.ViewDirWS;
				Out_VertexData15_g170654 = Data15_g170654.VertexData;
				Out_BoundsData15_g170654 = Data15_g170654.BoundsData;
				}
				half3 Model_PositionWO636_g170634 = Out_PositionWO15_g170654;
				float3 temp_output_279_0_g170635 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170635 = temp_output_279_0_g170635;
				half4 localSamplePlanar2D238_g170635 = SamplePlanar2D( Texture238_g170635 , Sampler238_g170635 , Coords238_g170635 , WorldPosition238_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170635) = _SecondAlbedoTex;
				SamplerState Sampler246_g170635 = SS19_g170651;
				half4 Coords246_g170635 = temp_output_37_0_g170635;
				half3 WorldPosition246_g170635 = temp_output_279_0_g170635;
				half3 Model_NormalWS869_g170634 = Out_NormalWS15_g170654;
				float3 temp_output_280_0_g170635 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170635 = temp_output_280_0_g170635;
				half4 localSamplePlanar3D246_g170635 = SamplePlanar3D( Texture246_g170635 , Sampler246_g170635 , Coords246_g170635 , WorldPosition246_g170635 , WorldNormal246_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170635) = _SecondAlbedoTex;
				SamplerState Sampler234_g170635 = SS19_g170651;
				float4 Coords234_g170635 = temp_output_37_0_g170635;
				float3 WorldPosition234_g170635 = temp_output_279_0_g170635;
				float4 localSampleStochastic2D234_g170635 = SampleStochastic2D( Texture234_g170635 , Sampler234_g170635 , Coords234_g170635 , WorldPosition234_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170635) = _SecondAlbedoTex;
				SamplerState Sampler263_g170635 = SS19_g170651;
				half4 Coords263_g170635 = temp_output_37_0_g170635;
				half3 WorldPosition263_g170635 = temp_output_279_0_g170635;
				half3 WorldNormal263_g170635 = temp_output_280_0_g170635;
				half4 localSampleStochastic3D263_g170635 = SampleStochastic3D( Texture263_g170635 , Sampler263_g170635 , Coords263_g170635 , WorldPosition263_g170635 , WorldNormal263_g170635 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170634 = localSampleMain276_g170635;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170634 = localSampleExtra275_g170635;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170634 = localSamplePlanar2D238_g170635;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170634 = localSamplePlanar3D246_g170635;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170634 = localSampleStochastic2D234_g170635;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170634 = localSampleStochastic3D263_g170635;
				#else
				float4 staticSwitch693_g170634 = localSampleMain276_g170635;
				#endif
				half4 Local_AlbedoTex777_g170634 = staticSwitch693_g170634;
				float3 lerpResult716_g170634 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170634).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170634 = lerpResult716_g170634;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170637) = _SecondShaderTex;
				float localFilterTexture30_g170653 = ( 0.0 );
				SamplerState SS30_g170653 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170653 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170653 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170653 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170653 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170653 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170653 = SamplerDefault30_g170653;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170653 = SamplerDefault30_g170653;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170653 = SamplerPoint30_g170653;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170653 = SamplerLow30_g170653;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170653 = SamplerMedium30_g170653;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170653 = SamplerHigh30_g170653;
				#endif
				}
				SamplerState Sampler276_g170637 = SS30_g170653;
				float4 temp_output_37_0_g170637 = Local_LayerCoords790_g170634;
				half4 Coords276_g170637 = temp_output_37_0_g170637;
				half2 TexCoord276_g170637 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170637 = SampleMain( Texture276_g170637 , Sampler276_g170637 , Coords276_g170637 , TexCoord276_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170637) = _SecondShaderTex;
				SamplerState Sampler275_g170637 = SS30_g170653;
				half4 Coords275_g170637 = temp_output_37_0_g170637;
				half2 TexCoord275_g170637 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170637 = SampleExtra( Texture275_g170637 , Sampler275_g170637 , Coords275_g170637 , TexCoord275_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170637) = _SecondShaderTex;
				SamplerState Sampler238_g170637 = SS30_g170653;
				half4 Coords238_g170637 = temp_output_37_0_g170637;
				float3 temp_output_279_0_g170637 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170637 = temp_output_279_0_g170637;
				half4 localSamplePlanar2D238_g170637 = SamplePlanar2D( Texture238_g170637 , Sampler238_g170637 , Coords238_g170637 , WorldPosition238_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170637) = _SecondShaderTex;
				SamplerState Sampler246_g170637 = SS30_g170653;
				half4 Coords246_g170637 = temp_output_37_0_g170637;
				half3 WorldPosition246_g170637 = temp_output_279_0_g170637;
				float3 temp_output_280_0_g170637 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170637 = temp_output_280_0_g170637;
				half4 localSamplePlanar3D246_g170637 = SamplePlanar3D( Texture246_g170637 , Sampler246_g170637 , Coords246_g170637 , WorldPosition246_g170637 , WorldNormal246_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170637) = _SecondShaderTex;
				SamplerState Sampler234_g170637 = SS30_g170653;
				float4 Coords234_g170637 = temp_output_37_0_g170637;
				float3 WorldPosition234_g170637 = temp_output_279_0_g170637;
				float4 localSampleStochastic2D234_g170637 = SampleStochastic2D( Texture234_g170637 , Sampler234_g170637 , Coords234_g170637 , WorldPosition234_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170637) = _SecondShaderTex;
				SamplerState Sampler263_g170637 = SS30_g170653;
				half4 Coords263_g170637 = temp_output_37_0_g170637;
				half3 WorldPosition263_g170637 = temp_output_279_0_g170637;
				half3 WorldNormal263_g170637 = temp_output_280_0_g170637;
				half4 localSampleStochastic3D263_g170637 = SampleStochastic3D( Texture263_g170637 , Sampler263_g170637 , Coords263_g170637 , WorldPosition263_g170637 , WorldNormal263_g170637 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170634 = localSampleMain276_g170637;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170634 = localSampleExtra275_g170637;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170634 = localSamplePlanar2D238_g170637;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170634 = localSamplePlanar3D246_g170637;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170634 = localSampleStochastic2D234_g170637;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170634 = localSampleStochastic3D263_g170637;
				#else
				float4 staticSwitch722_g170634 = localSampleMain276_g170637;
				#endif
				half4 Local_ShaderTex775_g170634 = staticSwitch722_g170634;
				float lerpResult739_g170634 = lerp( 1.0 , (Local_ShaderTex775_g170634).y , _SecondOcclusionValue);
				float4 appendResult749_g170634 = (float4(( (Local_ShaderTex775_g170634).x * _SecondMetallicValue ) , lerpResult739_g170634 , (Local_ShaderTex775_g170634).z , ( (Local_ShaderTex775_g170634).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170634 = appendResult749_g170634;
				float clampResult17_g170641 = clamp( (Local_Masks750_g170634).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170656 = _SecondMultiRemap.x;
				float temp_output_9_0_g170656 = ( clampResult17_g170641 - temp_output_7_0_g170656 );
				float temp_output_765_0_g170634 = saturate( ( ( temp_output_9_0_g170656 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170634 = temp_output_765_0_g170634;
				float lerpResult705_g170634 = lerp( 1.0 , Local_MultiMask767_g170634 , _SecondColorMode);
				float4 lerpResult706_g170634 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170634);
				half3 Local_ColorRGB774_g170634 = (lerpResult706_g170634).rgb;
				half3 Local_Albedo768_g170634 = ( Local_AlbedoRGB771_g170634 * Local_ColorRGB774_g170634 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170648 = 2.0;
				#else
				float staticSwitch1_g170648 = 4.594794;
				#endif
				float3 lerpResult985_g170634 = lerp( Local_Albedo768_g170634 , ( Visual_Albedo527_g170634 * Local_Albedo768_g170634 * staticSwitch1_g170648 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170638) = _SecondMaskTex;
				SamplerState Sampler276_g170638 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170634 = _second_mask_coord_value;
				float4 temp_output_37_0_g170638 = Local_BlendCoords813_g170634;
				half4 Coords276_g170638 = temp_output_37_0_g170638;
				half2 TexCoord276_g170638 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170638 = SampleMain( Texture276_g170638 , Sampler276_g170638 , Coords276_g170638 , TexCoord276_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170638) = _SecondMaskTex;
				SamplerState Sampler275_g170638 = sampler_Linear_Repeat;
				half4 Coords275_g170638 = temp_output_37_0_g170638;
				half2 TexCoord275_g170638 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170638 = SampleExtra( Texture275_g170638 , Sampler275_g170638 , Coords275_g170638 , TexCoord275_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170638) = _SecondMaskTex;
				SamplerState Sampler238_g170638 = sampler_Linear_Repeat;
				half4 Coords238_g170638 = temp_output_37_0_g170638;
				float3 temp_output_279_0_g170638 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170638 = temp_output_279_0_g170638;
				half4 localSamplePlanar2D238_g170638 = SamplePlanar2D( Texture238_g170638 , Sampler238_g170638 , Coords238_g170638 , WorldPosition238_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170638) = _SecondMaskTex;
				SamplerState Sampler246_g170638 = sampler_Linear_Repeat;
				half4 Coords246_g170638 = temp_output_37_0_g170638;
				half3 WorldPosition246_g170638 = temp_output_279_0_g170638;
				float3 temp_output_280_0_g170638 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170638 = temp_output_280_0_g170638;
				half4 localSamplePlanar3D246_g170638 = SamplePlanar3D( Texture246_g170638 , Sampler246_g170638 , Coords246_g170638 , WorldPosition246_g170638 , WorldNormal246_g170638 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170634 = localSampleMain276_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170634 = localSampleExtra275_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170634 = localSamplePlanar2D238_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170634 = localSamplePlanar3D246_g170638;
				#else
				float4 staticSwitch817_g170634 = localSampleMain276_g170638;
				#endif
				half4 Local_MaskTex861_g170634 = staticSwitch817_g170634;
				float clampResult17_g170658 = clamp( (Local_MaskTex861_g170634).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170662 = _SecondMaskRemap.x;
				float temp_output_9_0_g170662 = ( clampResult17_g170658 - temp_output_7_0_g170662 );
				float lerpResult1015_g170634 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170662 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170634 = lerpResult1015_g170634;
				half Visual_Luminosity1041_g170634 = Out_Luminosity4_g170645;
				float clampResult17_g170667 = clamp( Visual_Luminosity1041_g170634 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170668 = _SecondLumaRemap.x;
				float temp_output_9_0_g170668 = ( clampResult17_g170667 - temp_output_7_0_g170668 );
				float lerpResult1036_g170634 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170668 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170634 = lerpResult1036_g170634;
				half3 Visual_NormalWS951_g170634 = Out_NormalWS4_g170645;
				float clampResult17_g170663 = clamp( saturate( (Visual_NormalWS951_g170634).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170665 = _SecondProjRemap.x;
				float temp_output_9_0_g170665 = ( clampResult17_g170663 - temp_output_7_0_g170665 );
				float lerpResult996_g170634 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170665 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170634 = lerpResult996_g170634;
				half4 Model_VertexMasks964_g170634 = Out_VertexData15_g170654;
				float4 break965_g170634 = Model_VertexMasks964_g170634;
				float4 break33_g170659 = _second_vert_mode;
				float temp_output_30_0_g170659 = ( break965_g170634.x * break33_g170659.x );
				float temp_output_29_0_g170659 = ( break965_g170634.y * break33_g170659.y );
				float temp_output_31_0_g170659 = ( break965_g170634.z * break33_g170659.z );
				float temp_output_28_0_g170659 = ( temp_output_30_0_g170659 + temp_output_29_0_g170659 + temp_output_31_0_g170659 + ( break965_g170634.w * break33_g170659.w ) );
				float clampResult17_g170657 = clamp( temp_output_28_0_g170659 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170661 = _SecondMeshRemap.x;
				float temp_output_9_0_g170661 = ( clampResult17_g170657 - temp_output_7_0_g170661 );
				float lerpResult1017_g170634 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170661 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170660 = lerpResult1017_g170634;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170660 = ( temp_output_6_0_g170660 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170660 = temp_output_6_0_g170660;
				#endif
				half Blend_VertMask918_g170634 = staticSwitch14_g170660;
				float localBuildGlobalData204_g170496 = ( 0.0 );
				TVEGlobalData Data204_g170496 = (TVEGlobalData)0;
				half Dummy211_g170496 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170496 = Dummy211_g170496;
				float temp_output_82_0_g170506 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170508 = TVE_CoatLayers[(int)temp_output_82_0_g170506];
				TVEModelData Data15_g170542 = Data16_g170483;
				float Out_Dummy15_g170542 = 0;
				float3 Out_PositionWS15_g170542 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170542 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170542 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170542 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170542 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170542 = float3( 0,0,0 );
				float4 Out_VertexData15_g170542 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170542 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170542 = Data15_g170542.Dummy;
				Out_PositionWS15_g170542 = Data15_g170542.PositionWS;
				Out_PositionWO15_g170542 = Data15_g170542.PositionWO;
				Out_PivotWS15_g170542 = Data15_g170542.PivotWS;
				Out_PivotWO15_g170542 = Data15_g170542.PivotWO;
				Out_NormalWS15_g170542 = Data15_g170542.NormalWS;
				Out_ViewDirWS15_g170542 = Data15_g170542.ViewDirWS;
				Out_VertexData15_g170542 = Data15_g170542.VertexData;
				Out_BoundsData15_g170542 = Data15_g170542.BoundsData;
				}
				half3 Model_PositionWS143_g170496 = Out_PositionWS15_g170542;
				half3 Model_PivotWS145_g170496 = Out_PivotWS15_g170542;
				float3 lerpResult300_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170509 = lerpResult300_g170496;
				float2 temp_output_75_0_g170509 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170509).xz ) );
				float temp_output_82_0_g170509 = temp_output_82_0_g170506;
				float2 temp_output_119_0_g170509 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170509).xz ) );
				float temp_output_7_0_g170514 = 1.0;
				float temp_output_9_0_g170514 = ( saturate( ( distance( Input_Position180_g170509 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170514 );
				float4 lerpResult131_g170509 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170509,temp_output_82_0_g170509), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170509,temp_output_82_0_g170509), 0.0 ) , saturate( ( temp_output_9_0_g170514 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170514 ) ) ));
				float4 temp_output_17_0_g170508 = lerpResult131_g170509;
				float4 temp_output_3_0_g170508 = TVE_CoatParams;
				float4 ifLocalVar18_g170508 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170508 >= 0.5 )
				ifLocalVar18_g170508 = temp_output_17_0_g170508;
				else
				ifLocalVar18_g170508 = temp_output_3_0_g170508;
				float4 lerpResult22_g170508 = lerp( temp_output_3_0_g170508 , temp_output_17_0_g170508 , temp_output_19_0_g170508);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170508 = lerpResult22_g170508;
				#else
				float4 staticSwitch24_g170508 = ifLocalVar18_g170508;
				#endif
				half4 Coat_Params302_g170496 = staticSwitch24_g170508;
				float4 In_CoatParams204_g170496 = Coat_Params302_g170496;
				float temp_output_82_0_g170497 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170499 = TVE_PaintLayers[(int)temp_output_82_0_g170497];
				float3 lerpResult85_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170500 = lerpResult85_g170496;
				float2 temp_output_75_0_g170500 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170500).xz ) );
				float temp_output_82_0_g170500 = temp_output_82_0_g170497;
				float2 temp_output_119_0_g170500 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170500).xz ) );
				float temp_output_7_0_g170505 = 1.0;
				float temp_output_9_0_g170505 = ( saturate( ( distance( Input_Position180_g170500 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170505 );
				float4 lerpResult131_g170500 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170500,temp_output_82_0_g170500), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170500,temp_output_82_0_g170500), 0.0 ) , saturate( ( temp_output_9_0_g170505 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170505 ) ) ));
				float4 temp_output_17_0_g170499 = lerpResult131_g170500;
				float4 temp_output_3_0_g170499 = TVE_PaintParams;
				float4 ifLocalVar18_g170499 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170499 >= 0.5 )
				ifLocalVar18_g170499 = temp_output_17_0_g170499;
				else
				ifLocalVar18_g170499 = temp_output_3_0_g170499;
				float4 lerpResult22_g170499 = lerp( temp_output_3_0_g170499 , temp_output_17_0_g170499 , temp_output_19_0_g170499);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170499 = lerpResult22_g170499;
				#else
				float4 staticSwitch24_g170499 = ifLocalVar18_g170499;
				#endif
				half4 Paint_Params71_g170496 = staticSwitch24_g170499;
				float4 In_PaintParams204_g170496 = Paint_Params71_g170496;
				float temp_output_82_0_g170543 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170545 = TVE_GlowLayers[(int)temp_output_82_0_g170543];
				float3 lerpResult247_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170546 = lerpResult247_g170496;
				float2 temp_output_75_0_g170546 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170546).xz ) );
				float temp_output_82_0_g170546 = temp_output_82_0_g170543;
				float2 temp_output_119_0_g170546 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170546).xz ) );
				float temp_output_7_0_g170551 = 1.0;
				float temp_output_9_0_g170551 = ( saturate( ( distance( Input_Position180_g170546 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170551 );
				float4 lerpResult131_g170546 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170546,temp_output_82_0_g170546), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170546,temp_output_82_0_g170546), 0.0 ) , saturate( ( temp_output_9_0_g170551 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170551 ) ) ));
				float4 temp_output_17_0_g170545 = lerpResult131_g170546;
				float4 temp_output_3_0_g170545 = TVE_GlowParams;
				float4 ifLocalVar18_g170545 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170545 >= 0.5 )
				ifLocalVar18_g170545 = temp_output_17_0_g170545;
				else
				ifLocalVar18_g170545 = temp_output_3_0_g170545;
				float4 lerpResult22_g170545 = lerp( temp_output_3_0_g170545 , temp_output_17_0_g170545 , temp_output_19_0_g170545);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170545 = lerpResult22_g170545;
				#else
				float4 staticSwitch24_g170545 = ifLocalVar18_g170545;
				#endif
				half4 Glow_Params248_g170496 = staticSwitch24_g170545;
				float4 In_GlowParams204_g170496 = Glow_Params248_g170496;
				float temp_output_132_0_g170524 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170526 = TVE_AtmoLayers[(int)temp_output_132_0_g170524];
				float3 lerpResult104_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170527 = lerpResult104_g170496;
				float2 temp_output_75_0_g170527 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170527).xz ) );
				float temp_output_82_0_g170527 = temp_output_132_0_g170524;
				float2 temp_output_119_0_g170527 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170527).xz ) );
				float temp_output_7_0_g170532 = 1.0;
				float temp_output_9_0_g170532 = ( saturate( ( distance( Input_Position180_g170527 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170532 );
				float4 lerpResult131_g170527 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170527,temp_output_82_0_g170527), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170527,temp_output_82_0_g170527), 0.0 ) , saturate( ( temp_output_9_0_g170532 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170532 ) ) ));
				float4 temp_output_17_0_g170526 = lerpResult131_g170527;
				float4 temp_output_3_0_g170526 = TVE_AtmoParams;
				float4 ifLocalVar18_g170526 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170526 >= 0.5 )
				ifLocalVar18_g170526 = temp_output_17_0_g170526;
				else
				ifLocalVar18_g170526 = temp_output_3_0_g170526;
				float4 lerpResult22_g170526 = lerp( temp_output_3_0_g170526 , temp_output_17_0_g170526 , temp_output_19_0_g170526);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170526 = lerpResult22_g170526;
				#else
				float4 staticSwitch24_g170526 = ifLocalVar18_g170526;
				#endif
				half4 Atmo_Params80_g170496 = staticSwitch24_g170526;
				float4 In_AtmoParams204_g170496 = Atmo_Params80_g170496;
				float temp_output_132_0_g170533 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170535 = TVE_FadeLayers[(int)temp_output_132_0_g170533];
				float3 lerpResult382_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFadePivotValue);
				half3 Input_Position180_g170536 = lerpResult382_g170496;
				float2 temp_output_75_0_g170536 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170536).xz ) );
				float temp_output_82_0_g170536 = temp_output_132_0_g170533;
				float2 temp_output_119_0_g170536 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170536).xz ) );
				float temp_output_7_0_g170541 = 1.0;
				float temp_output_9_0_g170541 = ( saturate( ( distance( Input_Position180_g170536 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170541 );
				float4 lerpResult131_g170536 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170536,temp_output_82_0_g170536), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170536,temp_output_82_0_g170536), 0.0 ) , saturate( ( temp_output_9_0_g170541 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170541 ) ) ));
				float4 temp_output_17_0_g170535 = lerpResult131_g170536;
				float4 temp_output_3_0_g170535 = TVE_FadeParams;
				float4 ifLocalVar18_g170535 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170535 >= 0.5 )
				ifLocalVar18_g170535 = temp_output_17_0_g170535;
				else
				ifLocalVar18_g170535 = temp_output_3_0_g170535;
				float4 lerpResult22_g170535 = lerp( temp_output_3_0_g170535 , temp_output_17_0_g170535 , temp_output_19_0_g170535);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170535 = lerpResult22_g170535;
				#else
				float4 staticSwitch24_g170535 = ifLocalVar18_g170535;
				#endif
				half4 Fade_Params387_g170496 = staticSwitch24_g170535;
				float4 In_FadeParams204_g170496 = Fade_Params387_g170496;
				float temp_output_130_0_g170515 = _GlobalFormLayerValue;
				float temp_output_19_0_g170517 = TVE_FormLayers[(int)temp_output_130_0_g170515];
				float3 lerpResult168_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFormPivotValue);
				half3 Input_Position180_g170518 = lerpResult168_g170496;
				float2 temp_output_75_0_g170518 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170518).xz ) );
				float temp_output_82_0_g170518 = temp_output_130_0_g170515;
				float2 temp_output_119_0_g170518 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170518).xz ) );
				float temp_output_7_0_g170523 = 1.0;
				float temp_output_9_0_g170523 = ( saturate( ( distance( Input_Position180_g170518 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170523 );
				float4 lerpResult131_g170518 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170518,temp_output_82_0_g170518), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170518,temp_output_82_0_g170518), 0.0 ) , saturate( ( temp_output_9_0_g170523 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170523 ) ) ));
				float4 temp_output_17_0_g170517 = lerpResult131_g170518;
				float4 temp_output_3_0_g170517 = TVE_FormParams;
				float4 ifLocalVar18_g170517 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170517 >= 0.5 )
				ifLocalVar18_g170517 = temp_output_17_0_g170517;
				else
				ifLocalVar18_g170517 = temp_output_3_0_g170517;
				float4 lerpResult22_g170517 = lerp( temp_output_3_0_g170517 , temp_output_17_0_g170517 , temp_output_19_0_g170517);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170517 = lerpResult22_g170517;
				#else
				float4 staticSwitch24_g170517 = ifLocalVar18_g170517;
				#endif
				half4 Form_Params112_g170496 = staticSwitch24_g170517;
				float4 In_FormParams204_g170496 = Form_Params112_g170496;
				float temp_output_136_0_g170561 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170563 = TVE_FlowLayers[(int)temp_output_136_0_g170561];
				float3 lerpResult400_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170564 = lerpResult400_g170496;
				float2 temp_output_75_0_g170564 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170564).xz ) );
				float temp_output_82_0_g170564 = temp_output_136_0_g170561;
				float2 temp_output_119_0_g170564 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170564).xz ) );
				float temp_output_7_0_g170569 = 1.0;
				float temp_output_9_0_g170569 = ( saturate( ( distance( Input_Position180_g170564 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170569 );
				float4 lerpResult131_g170564 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170564,temp_output_82_0_g170564), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170564,temp_output_82_0_g170564), 0.0 ) , saturate( ( temp_output_9_0_g170569 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170569 ) ) ));
				float4 temp_output_17_0_g170563 = lerpResult131_g170564;
				float4 temp_output_3_0_g170563 = TVE_FlowParams;
				float4 ifLocalVar18_g170563 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170563 >= 0.5 )
				ifLocalVar18_g170563 = temp_output_17_0_g170563;
				else
				ifLocalVar18_g170563 = temp_output_3_0_g170563;
				float4 lerpResult22_g170563 = lerp( temp_output_3_0_g170563 , temp_output_17_0_g170563 , temp_output_19_0_g170563);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170563 = lerpResult22_g170563;
				#else
				float4 staticSwitch24_g170563 = ifLocalVar18_g170563;
				#endif
				half4 Flow_Params405_g170496 = staticSwitch24_g170563;
				float4 In_FlowParams204_g170496 = Flow_Params405_g170496;
				{
				Data204_g170496.Dummy = In_Dummy204_g170496;
				Data204_g170496.CoatParams = In_CoatParams204_g170496;
				Data204_g170496.PaintParams = In_PaintParams204_g170496;
				Data204_g170496.GlowParams = In_GlowParams204_g170496;
				Data204_g170496.AtmoParams = In_AtmoParams204_g170496;
				Data204_g170496.FadeParams = In_FadeParams204_g170496;
				Data204_g170496.FormParams= In_FormParams204_g170496;
				Data204_g170496.FlowParams = In_FlowParams204_g170496;
				}
				TVEGlobalData Data15_g170644 = Data204_g170496;
				float Out_Dummy15_g170644 = 0;
				float4 Out_CoatParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170644 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170644 = Data15_g170644.Dummy;
				Out_CoatParams15_g170644 = Data15_g170644.CoatParams;
				Out_PaintParams15_g170644 = Data15_g170644.PaintParams;
				Out_GlowParams15_g170644 = Data15_g170644.GlowParams;
				Out_AtmoParams15_g170644= Data15_g170644.AtmoParams;
				Out_FadeParams15_g170644= Data15_g170644.FadeParams;
				Out_FormParams15_g170644 = Data15_g170644.FormParams;
				Out_FlowParams15_g170644 = Data15_g170644.FlowParams;
				}
				half4 Global_CoatParams975_g170634 = Out_CoatParams15_g170644;
				float temp_output_6_0_g170669 = (Global_CoatParams975_g170634).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170669 = ( temp_output_6_0_g170669 + ( _SecondElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170669 = temp_output_6_0_g170669;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170634 = staticSwitch14_g170669;
				#else
				float staticSwitch971_g170634 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170634 = lerp( 1.0 , staticSwitch971_g170634 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170634 = lerpResult1013_g170634;
				float clampResult17_g170664 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170634 * Blend_LumaMask1033_g170634 * Blend_ProjMask434_g170634 * Blend_VertMask918_g170634 * Blend_GlobalMask972_g170634 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170666 = _SecondBlendRemap.x;
				float temp_output_9_0_g170666 = ( clampResult17_g170664 - temp_output_7_0_g170666 );
				half Blend_Mask412_g170634 = ( saturate( ( ( temp_output_9_0_g170666 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170634 = lerp( Visual_Albedo527_g170634 , lerpResult985_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170634 = lerpResult403_g170634;
				#else
				float3 staticSwitch415_g170634 = Visual_Albedo527_g170634;
				#endif
				half3 Final_Albedo601_g170634 = staticSwitch415_g170634;
				float3 In_Albedo3_g170655 = Final_Albedo601_g170634;
				float3 In_AlbedoRaw3_g170655 = Final_Albedo601_g170634;
				half2 Visual_NormalTS529_g170634 = Out_NormalTS4_g170645;
				float2 lerpResult40_g170646 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170634 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170636) = _SecondNormalTex;
				float localFilterTexture29_g170652 = ( 0.0 );
				SamplerState SS29_g170652 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170652 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170652 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170652 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170652 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170652 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170652 = SamplerDefault29_g170652;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170652 = SamplerDefault29_g170652;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170652 = SamplerPoint29_g170652;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170652 = SamplerLow29_g170652;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170652 = SamplerMedium29_g170652;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170652 = SamplerHigh29_g170652;
				#endif
				}
				SamplerState Sampler276_g170636 = SS29_g170652;
				float4 temp_output_37_0_g170636 = Local_LayerCoords790_g170634;
				half4 Coords276_g170636 = temp_output_37_0_g170636;
				half2 TexCoord276_g170636 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170636 = SampleMain( Texture276_g170636 , Sampler276_g170636 , Coords276_g170636 , TexCoord276_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170636) = _SecondNormalTex;
				SamplerState Sampler275_g170636 = SS29_g170652;
				half4 Coords275_g170636 = temp_output_37_0_g170636;
				half2 TexCoord275_g170636 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170636 = SampleExtra( Texture275_g170636 , Sampler275_g170636 , Coords275_g170636 , TexCoord275_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170636) = _SecondNormalTex;
				SamplerState Sampler238_g170636 = SS29_g170652;
				half4 Coords238_g170636 = temp_output_37_0_g170636;
				float3 temp_output_279_0_g170636 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170636 = temp_output_279_0_g170636;
				half4 localSamplePlanar2D238_g170636 = SamplePlanar2D( Texture238_g170636 , Sampler238_g170636 , Coords238_g170636 , WorldPosition238_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170636) = _SecondNormalTex;
				SamplerState Sampler246_g170636 = SS29_g170652;
				half4 Coords246_g170636 = temp_output_37_0_g170636;
				half3 WorldPosition246_g170636 = temp_output_279_0_g170636;
				float3 temp_output_280_0_g170636 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170636 = temp_output_280_0_g170636;
				half4 localSamplePlanar3D246_g170636 = SamplePlanar3D( Texture246_g170636 , Sampler246_g170636 , Coords246_g170636 , WorldPosition246_g170636 , WorldNormal246_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170636) = _SecondNormalTex;
				SamplerState Sampler234_g170636 = SS29_g170652;
				float4 Coords234_g170636 = temp_output_37_0_g170636;
				float3 WorldPosition234_g170636 = temp_output_279_0_g170636;
				float4 localSampleStochastic2D234_g170636 = SampleStochastic2D( Texture234_g170636 , Sampler234_g170636 , Coords234_g170636 , WorldPosition234_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170636) = _SecondNormalTex;
				SamplerState Sampler263_g170636 = SS29_g170652;
				half4 Coords263_g170636 = temp_output_37_0_g170636;
				half3 WorldPosition263_g170636 = temp_output_279_0_g170636;
				half3 WorldNormal263_g170636 = temp_output_280_0_g170636;
				half4 localSampleStochastic3D263_g170636 = SampleStochastic3D( Texture263_g170636 , Sampler263_g170636 , Coords263_g170636 , WorldPosition263_g170636 , WorldNormal263_g170636 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170634 = localSampleMain276_g170636;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170634 = localSampleExtra275_g170636;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170634 = localSamplePlanar2D238_g170636;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170634 = localSamplePlanar3D246_g170636;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170634 = localSampleStochastic2D234_g170636;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170634 = localSampleStochastic3D263_g170636;
				#else
				float4 staticSwitch698_g170634 = localSampleMain276_g170636;
				#endif
				half4 Local_NormalTex776_g170634 = staticSwitch698_g170634;
				half4 Normal_Packed45_g170639 = Local_NormalTex776_g170634;
				float2 appendResult58_g170639 = (float2(( (Normal_Packed45_g170639).x * (Normal_Packed45_g170639).w ) , (Normal_Packed45_g170639).y));
				half2 Normal_Default50_g170639 = appendResult58_g170639;
				half2 Normal_ASTC41_g170639 = (Normal_Packed45_g170639).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170639 = Normal_ASTC41_g170639;
				#else
				float2 staticSwitch38_g170639 = Normal_Default50_g170639;
				#endif
				half2 Normal_NO_DTX544_g170639 = (Normal_Packed45_g170639).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170639 = Normal_NO_DTX544_g170639;
				#else
				float2 staticSwitch37_g170639 = staticSwitch38_g170639;
				#endif
				float2 temp_output_724_0_g170634 = ( (staticSwitch37_g170639*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170640 = temp_output_724_0_g170634;
				float2 break71_g170640 = Normal_Planar45_g170640;
				float3 appendResult72_g170640 = (float3(break71_g170640.x , 0.0 , break71_g170640.y));
				float2 temp_output_858_0_g170634 = (mul( ase_worldToTangent, appendResult72_g170640 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#else
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#endif
				half2 Local_NormalTS729_g170634 = staticSwitch727_g170634;
				float2 temp_output_36_0_g170646 = ( lerpResult40_g170646 + Local_NormalTS729_g170634 );
				float2 lerpResult405_g170634 = lerp( Visual_NormalTS529_g170634 , temp_output_36_0_g170646 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170634 = lerpResult405_g170634;
				#else
				float2 staticSwitch418_g170634 = Visual_NormalTS529_g170634;
				#endif
				half2 Final_NormalTS612_g170634 = staticSwitch418_g170634;
				float2 In_NormalTS3_g170655 = Final_NormalTS612_g170634;
				float3 appendResult68_g170647 = (float3(Final_NormalTS612_g170634 , 1.0));
				float3 tanNormal74_g170647 = appendResult68_g170647;
				float3 worldNormal74_g170647 = normalize( float3(dot(tanToWorld0,tanNormal74_g170647), dot(tanToWorld1,tanNormal74_g170647), dot(tanToWorld2,tanNormal74_g170647)) );
				half3 Final_NormalWS950_g170634 = worldNormal74_g170647;
				float3 In_NormalWS3_g170655 = Final_NormalWS950_g170634;
				half4 Visual_Shader531_g170634 = Out_Shader4_g170645;
				float4 lerpResult994_g170634 = lerp( Local_Masks750_g170634 , ( Visual_Shader531_g170634 * Local_Masks750_g170634 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170634 = lerp( Visual_Shader531_g170634 , lerpResult994_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170634 = lerpResult440_g170634;
				#else
				float4 staticSwitch451_g170634 = Visual_Shader531_g170634;
				#endif
				half4 Final_Masks613_g170634 = staticSwitch451_g170634;
				float4 In_Shader3_g170655 = Final_Masks613_g170634;
				float4 In_Emissive3_g170655 = Out_Emissive4_g170645;
				float3 temp_output_3_0_g170649 = Final_Albedo601_g170634;
				float dotResult20_g170649 = dot( temp_output_3_0_g170649 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170634 = dotResult20_g170649;
				float In_Grayscale3_g170655 = Final_Grayscale615_g170634;
				float clampResult651_g170634 = clamp( saturate( ( Final_Grayscale615_g170634 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170634 = clampResult651_g170634;
				float In_Luminosity3_g170655 = Final_Luminosity652_g170634;
				half Visual_MultiMask547_g170634 = Out_MultiMask4_g170645;
				float lerpResult477_g170634 = lerp( Visual_MultiMask547_g170634 , Local_MultiMask767_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch482_g170634 = lerpResult477_g170634;
				#else
				float staticSwitch482_g170634 = Visual_MultiMask547_g170634;
				#endif
				half Final_MultiMask572_g170634 = staticSwitch482_g170634;
				float In_MultiMask3_g170655 = Final_MultiMask572_g170634;
				half Visual_AlphaClip559_g170634 = Out_AlphaClip4_g170645;
				float temp_output_718_0_g170634 = (Local_AlbedoTex777_g170634).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170634 = ( temp_output_718_0_g170634 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170634 = temp_output_718_0_g170634;
				#endif
				half Local_AlphaClip772_g170634 = staticSwitch932_g170634;
				float lerpResult448_g170634 = lerp( Visual_AlphaClip559_g170634 , Local_AlphaClip772_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch564_g170634 = lerpResult448_g170634;
				#else
				float staticSwitch564_g170634 = Visual_AlphaClip559_g170634;
				#endif
				half Final_AlphaClip602_g170634 = staticSwitch564_g170634;
				float In_AlphaClip3_g170655 = Final_AlphaClip602_g170634;
				half Visual_AlphaFade588_g170634 = Out_AlphaFade4_g170645;
				half Local_AlphaFade773_g170634 = (lerpResult706_g170634).a;
				float lerpResult604_g170634 = lerp( Visual_AlphaFade588_g170634 , Local_AlphaFade773_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch608_g170634 = lerpResult604_g170634;
				#else
				float staticSwitch608_g170634 = Visual_AlphaFade588_g170634;
				#endif
				half Final_AlphaFade611_g170634 = staticSwitch608_g170634;
				float In_AlphaFade3_g170655 = Final_AlphaFade611_g170634;
				float3 In_Translucency3_g170655 = Out_Translucency4_g170645;
				float In_Transmission3_g170655 = Out_Transmission4_g170645;
				float In_Thickness3_g170655 = Out_Thickness4_g170645;
				float In_Diffusion3_g170655 = Out_Diffusion4_g170645;
				{
				Data3_g170655.Dummy = In_Dummy3_g170655;
				Data3_g170655.Albedo = In_Albedo3_g170655;
				Data3_g170655.AlbedoRaw = In_AlbedoRaw3_g170655;
				Data3_g170655.NormalTS = In_NormalTS3_g170655;
				Data3_g170655.NormalWS = In_NormalWS3_g170655;
				Data3_g170655.Shader = In_Shader3_g170655;
				Data3_g170655.Emissive= In_Emissive3_g170655;
				Data3_g170655.MultiMask = In_MultiMask3_g170655;
				Data3_g170655.Grayscale = In_Grayscale3_g170655;
				Data3_g170655.Luminosity = In_Luminosity3_g170655;
				Data3_g170655.AlphaClip = In_AlphaClip3_g170655;
				Data3_g170655.AlphaFade = In_AlphaFade3_g170655;
				Data3_g170655.Translucency = In_Translucency3_g170655;
				Data3_g170655.Transmission = In_Transmission3_g170655;
				Data3_g170655.Thickness = In_Thickness3_g170655;
				Data3_g170655.Diffusion = In_Diffusion3_g170655;
				}
				TVEVisualData Data4_g170686 = Data3_g170655;
				float Out_Dummy4_g170686 = 0;
				float3 Out_Albedo4_g170686 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170686 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170686 = float2( 0,0 );
				float3 Out_NormalWS4_g170686 = float3( 0,0,0 );
				float4 Out_Shader4_g170686 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170686 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170686 = 0;
				float Out_Grayscale4_g170686 = 0;
				float Out_Luminosity4_g170686 = 0;
				float Out_AlphaClip4_g170686 = 0;
				float Out_AlphaFade4_g170686 = 0;
				float3 Out_Translucency4_g170686 = float3( 0,0,0 );
				float Out_Transmission4_g170686 = 0;
				float Out_Thickness4_g170686 = 0;
				float Out_Diffusion4_g170686 = 0;
				{
				Out_Dummy4_g170686 = Data4_g170686.Dummy;
				Out_Albedo4_g170686 = Data4_g170686.Albedo;
				Out_AlbedoRaw4_g170686 = Data4_g170686.AlbedoRaw;
				Out_NormalTS4_g170686 = Data4_g170686.NormalTS;
				Out_NormalWS4_g170686 = Data4_g170686.NormalWS;
				Out_Shader4_g170686 = Data4_g170686.Shader;
				Out_Emissive4_g170686= Data4_g170686.Emissive;
				Out_MultiMask4_g170686 = Data4_g170686.MultiMask;
				Out_Grayscale4_g170686 = Data4_g170686.Grayscale;
				Out_Luminosity4_g170686= Data4_g170686.Luminosity;
				Out_AlphaClip4_g170686 = Data4_g170686.AlphaClip;
				Out_AlphaFade4_g170686 = Data4_g170686.AlphaFade;
				Out_Translucency4_g170686 = Data4_g170686.Translucency;
				Out_Transmission4_g170686 = Data4_g170686.Transmission;
				Out_Thickness4_g170686 = Data4_g170686.Thickness;
				Out_Diffusion4_g170686 = Data4_g170686.Diffusion;
				}
				half3 Visual_Albedo527_g170678 = Out_Albedo4_g170686;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170679) = _ThirdAlbedoTex;
				float localFilterTexture19_g170695 = ( 0.0 );
				SamplerState SS19_g170695 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170695 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170695 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170695 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170695 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170695 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170695 = SamplerDefault19_g170695;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170695 = SamplerDefault19_g170695;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170695 = SamplerPoint19_g170695;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170695 = SamplerLow19_g170695;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170695 = SamplerMedium19_g170695;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170695 = SamplerHigh19_g170695;
				#endif
				}
				SamplerState Sampler276_g170679 = SS19_g170695;
				half4 Local_LayerCoords790_g170678 = _third_coord_value;
				float4 temp_output_37_0_g170679 = Local_LayerCoords790_g170678;
				half4 Coords276_g170679 = temp_output_37_0_g170679;
				half2 TexCoord276_g170679 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170679 = SampleMain( Texture276_g170679 , Sampler276_g170679 , Coords276_g170679 , TexCoord276_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170679 = SS19_g170695;
				half4 Coords275_g170679 = temp_output_37_0_g170679;
				half2 TexCoord275_g170679 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170679 = SampleExtra( Texture275_g170679 , Sampler275_g170679 , Coords275_g170679 , TexCoord275_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170679 = SS19_g170695;
				half4 Coords238_g170679 = temp_output_37_0_g170679;
				TVEModelData Data15_g170698 = Data16_g170483;
				float Out_Dummy15_g170698 = 0;
				float3 Out_PositionWS15_g170698 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170698 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170698 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170698 = float3( 0,0,0 );
				float4 Out_VertexData15_g170698 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170698 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170698 = Data15_g170698.Dummy;
				Out_PositionWS15_g170698 = Data15_g170698.PositionWS;
				Out_PositionWO15_g170698 = Data15_g170698.PositionWO;
				Out_PivotWS15_g170698 = Data15_g170698.PivotWS;
				Out_PivotWO15_g170698 = Data15_g170698.PivotWO;
				Out_NormalWS15_g170698 = Data15_g170698.NormalWS;
				Out_ViewDirWS15_g170698 = Data15_g170698.ViewDirWS;
				Out_VertexData15_g170698 = Data15_g170698.VertexData;
				Out_BoundsData15_g170698 = Data15_g170698.BoundsData;
				}
				half3 Model_PositionWO636_g170678 = Out_PositionWO15_g170698;
				float3 temp_output_279_0_g170679 = Model_PositionWO636_g170678;
				half3 WorldPosition238_g170679 = temp_output_279_0_g170679;
				half4 localSamplePlanar2D238_g170679 = SamplePlanar2D( Texture238_g170679 , Sampler238_g170679 , Coords238_g170679 , WorldPosition238_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170679 = SS19_g170695;
				half4 Coords246_g170679 = temp_output_37_0_g170679;
				half3 WorldPosition246_g170679 = temp_output_279_0_g170679;
				half3 Model_NormalWS869_g170678 = Out_NormalWS15_g170698;
				float3 temp_output_280_0_g170679 = Model_NormalWS869_g170678;
				half3 WorldNormal246_g170679 = temp_output_280_0_g170679;
				half4 localSamplePlanar3D246_g170679 = SamplePlanar3D( Texture246_g170679 , Sampler246_g170679 , Coords246_g170679 , WorldPosition246_g170679 , WorldNormal246_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170679 = SS19_g170695;
				float4 Coords234_g170679 = temp_output_37_0_g170679;
				float3 WorldPosition234_g170679 = temp_output_279_0_g170679;
				float4 localSampleStochastic2D234_g170679 = SampleStochastic2D( Texture234_g170679 , Sampler234_g170679 , Coords234_g170679 , WorldPosition234_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170679 = SS19_g170695;
				half4 Coords263_g170679 = temp_output_37_0_g170679;
				half3 WorldPosition263_g170679 = temp_output_279_0_g170679;
				half3 WorldNormal263_g170679 = temp_output_280_0_g170679;
				half4 localSampleStochastic3D263_g170679 = SampleStochastic3D( Texture263_g170679 , Sampler263_g170679 , Coords263_g170679 , WorldPosition263_g170679 , WorldNormal263_g170679 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170678 = localSampleMain276_g170679;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170678 = localSampleExtra275_g170679;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170678 = localSamplePlanar2D238_g170679;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170678 = localSamplePlanar3D246_g170679;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170678 = localSampleStochastic2D234_g170679;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170678 = localSampleStochastic3D263_g170679;
				#else
				float4 staticSwitch693_g170678 = localSampleMain276_g170679;
				#endif
				half4 Local_AlbedoTex777_g170678 = staticSwitch693_g170678;
				float3 lerpResult716_g170678 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170678).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170678 = lerpResult716_g170678;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170681) = _ThirdShaderTex;
				float localFilterTexture30_g170697 = ( 0.0 );
				SamplerState SS30_g170697 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170697 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170697 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170697 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170697 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170697 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170697 = SamplerDefault30_g170697;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170697 = SamplerDefault30_g170697;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170697 = SamplerPoint30_g170697;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170697 = SamplerLow30_g170697;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170697 = SamplerMedium30_g170697;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170697 = SamplerHigh30_g170697;
				#endif
				}
				SamplerState Sampler276_g170681 = SS30_g170697;
				float4 temp_output_37_0_g170681 = Local_LayerCoords790_g170678;
				half4 Coords276_g170681 = temp_output_37_0_g170681;
				half2 TexCoord276_g170681 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170681 = SampleMain( Texture276_g170681 , Sampler276_g170681 , Coords276_g170681 , TexCoord276_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170681) = _ThirdShaderTex;
				SamplerState Sampler275_g170681 = SS30_g170697;
				half4 Coords275_g170681 = temp_output_37_0_g170681;
				half2 TexCoord275_g170681 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170681 = SampleExtra( Texture275_g170681 , Sampler275_g170681 , Coords275_g170681 , TexCoord275_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170681) = _ThirdShaderTex;
				SamplerState Sampler238_g170681 = SS30_g170697;
				half4 Coords238_g170681 = temp_output_37_0_g170681;
				float3 temp_output_279_0_g170681 = Model_PositionWO636_g170678;
				half3 WorldPosition238_g170681 = temp_output_279_0_g170681;
				half4 localSamplePlanar2D238_g170681 = SamplePlanar2D( Texture238_g170681 , Sampler238_g170681 , Coords238_g170681 , WorldPosition238_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170681) = _ThirdShaderTex;
				SamplerState Sampler246_g170681 = SS30_g170697;
				half4 Coords246_g170681 = temp_output_37_0_g170681;
				half3 WorldPosition246_g170681 = temp_output_279_0_g170681;
				float3 temp_output_280_0_g170681 = Model_NormalWS869_g170678;
				half3 WorldNormal246_g170681 = temp_output_280_0_g170681;
				half4 localSamplePlanar3D246_g170681 = SamplePlanar3D( Texture246_g170681 , Sampler246_g170681 , Coords246_g170681 , WorldPosition246_g170681 , WorldNormal246_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170681) = _ThirdShaderTex;
				SamplerState Sampler234_g170681 = SS30_g170697;
				float4 Coords234_g170681 = temp_output_37_0_g170681;
				float3 WorldPosition234_g170681 = temp_output_279_0_g170681;
				float4 localSampleStochastic2D234_g170681 = SampleStochastic2D( Texture234_g170681 , Sampler234_g170681 , Coords234_g170681 , WorldPosition234_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170681) = _ThirdShaderTex;
				SamplerState Sampler263_g170681 = SS30_g170697;
				half4 Coords263_g170681 = temp_output_37_0_g170681;
				half3 WorldPosition263_g170681 = temp_output_279_0_g170681;
				half3 WorldNormal263_g170681 = temp_output_280_0_g170681;
				half4 localSampleStochastic3D263_g170681 = SampleStochastic3D( Texture263_g170681 , Sampler263_g170681 , Coords263_g170681 , WorldPosition263_g170681 , WorldNormal263_g170681 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170678 = localSampleMain276_g170681;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170678 = localSampleExtra275_g170681;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170678 = localSamplePlanar2D238_g170681;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170678 = localSamplePlanar3D246_g170681;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170678 = localSampleStochastic2D234_g170681;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170678 = localSampleStochastic3D263_g170681;
				#else
				float4 staticSwitch722_g170678 = localSampleMain276_g170681;
				#endif
				half4 Local_ShaderTex775_g170678 = staticSwitch722_g170678;
				float lerpResult739_g170678 = lerp( 1.0 , (Local_ShaderTex775_g170678).y , _ThirdOcclusionValue);
				float4 appendResult749_g170678 = (float4(( (Local_ShaderTex775_g170678).x * _ThirdMetallicValue ) , lerpResult739_g170678 , (Local_ShaderTex775_g170678).z , ( (Local_ShaderTex775_g170678).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170678 = appendResult749_g170678;
				float clampResult17_g170684 = clamp( (Local_Masks750_g170678).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170699 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170699 = ( clampResult17_g170684 - temp_output_7_0_g170699 );
				float temp_output_765_0_g170678 = saturate( ( ( temp_output_9_0_g170699 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170678 = temp_output_765_0_g170678;
				float lerpResult705_g170678 = lerp( 1.0 , Local_MultiMask767_g170678 , _ThirdColorMode);
				float4 lerpResult706_g170678 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170678);
				half3 Local_ColorRGB774_g170678 = (lerpResult706_g170678).rgb;
				half3 Local_Albedo768_g170678 = ( Local_AlbedoRGB771_g170678 * Local_ColorRGB774_g170678 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170691 = 2.0;
				#else
				float staticSwitch1_g170691 = 4.594794;
				#endif
				float3 lerpResult985_g170678 = lerp( Local_Albedo768_g170678 , ( Visual_Albedo527_g170678 * Local_Albedo768_g170678 * staticSwitch1_g170691 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170693) = _ThirdMaskTex;
				SamplerState Sampler276_g170693 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170678 = _third_mask_coord_value;
				float4 temp_output_37_0_g170693 = Local_MaskCoords813_g170678;
				half4 Coords276_g170693 = temp_output_37_0_g170693;
				half2 TexCoord276_g170693 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170693 = SampleMain( Texture276_g170693 , Sampler276_g170693 , Coords276_g170693 , TexCoord276_g170693 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170693) = _ThirdMaskTex;
				SamplerState Sampler275_g170693 = sampler_Linear_Repeat;
				half4 Coords275_g170693 = temp_output_37_0_g170693;
				half2 TexCoord275_g170693 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170693 = SampleExtra( Texture275_g170693 , Sampler275_g170693 , Coords275_g170693 , TexCoord275_g170693 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170693) = _ThirdMaskTex;
				SamplerState Sampler238_g170693 = sampler_Linear_Repeat;
				half4 Coords238_g170693 = temp_output_37_0_g170693;
				float3 temp_output_279_0_g170693 = Model_PositionWO636_g170678;
				half3 WorldPosition238_g170693 = temp_output_279_0_g170693;
				half4 localSamplePlanar2D238_g170693 = SamplePlanar2D( Texture238_g170693 , Sampler238_g170693 , Coords238_g170693 , WorldPosition238_g170693 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170693) = _ThirdMaskTex;
				SamplerState Sampler246_g170693 = sampler_Linear_Repeat;
				half4 Coords246_g170693 = temp_output_37_0_g170693;
				half3 WorldPosition246_g170693 = temp_output_279_0_g170693;
				float3 temp_output_280_0_g170693 = Model_NormalWS869_g170678;
				half3 WorldNormal246_g170693 = temp_output_280_0_g170693;
				half4 localSamplePlanar3D246_g170693 = SamplePlanar3D( Texture246_g170693 , Sampler246_g170693 , Coords246_g170693 , WorldPosition246_g170693 , WorldNormal246_g170693 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170678 = localSampleMain276_g170693;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170678 = localSampleExtra275_g170693;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170678 = localSamplePlanar2D238_g170693;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170678 = localSamplePlanar3D246_g170693;
				#else
				float4 staticSwitch817_g170678 = localSampleMain276_g170693;
				#endif
				half4 Local_MaskTex861_g170678 = staticSwitch817_g170678;
				float clampResult17_g170701 = clamp( (Local_MaskTex861_g170678).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170705 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170705 = ( clampResult17_g170701 - temp_output_7_0_g170705 );
				float lerpResult1028_g170678 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170705 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170678 = lerpResult1028_g170678;
				half Visual_Luminosity1049_g170678 = Out_Luminosity4_g170686;
				float clampResult17_g170710 = clamp( Visual_Luminosity1049_g170678 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170711 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170711 = ( clampResult17_g170710 - temp_output_7_0_g170711 );
				float lerpResult1040_g170678 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170711 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170678 = lerpResult1040_g170678;
				half4 Model_VertexMasks960_g170678 = Out_VertexData15_g170698;
				float4 break961_g170678 = Model_VertexMasks960_g170678;
				float4 break33_g170702 = _third_vert_mode;
				float temp_output_30_0_g170702 = ( break961_g170678.x * break33_g170702.x );
				float temp_output_29_0_g170702 = ( break961_g170678.y * break33_g170702.y );
				float temp_output_31_0_g170702 = ( break961_g170678.z * break33_g170702.z );
				float temp_output_28_0_g170702 = ( temp_output_30_0_g170702 + temp_output_29_0_g170702 + temp_output_31_0_g170702 + ( break961_g170678.w * break33_g170702.w ) );
				float clampResult17_g170700 = clamp( temp_output_28_0_g170702 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170704 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170704 = ( clampResult17_g170700 - temp_output_7_0_g170704 );
				float lerpResult1026_g170678 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170704 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170703 = lerpResult1026_g170678;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170703 = ( temp_output_6_0_g170703 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170703 = temp_output_6_0_g170703;
				#endif
				half Blend_VertMask913_g170678 = staticSwitch14_g170703;
				half3 Visual_NormalWS953_g170678 = Out_NormalWS4_g170686;
				float clampResult17_g170706 = clamp( saturate( (Visual_NormalWS953_g170678).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170708 = _ThirdProjRemap.x;
				float temp_output_9_0_g170708 = ( clampResult17_g170706 - temp_output_7_0_g170708 );
				float lerpResult1004_g170678 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170708 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170678 = lerpResult1004_g170678;
				TVEGlobalData Data15_g170688 = Data204_g170496;
				float Out_Dummy15_g170688 = 0;
				float4 Out_CoatParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170688 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170688 = Data15_g170688.Dummy;
				Out_CoatParams15_g170688 = Data15_g170688.CoatParams;
				Out_PaintParams15_g170688 = Data15_g170688.PaintParams;
				Out_GlowParams15_g170688 = Data15_g170688.GlowParams;
				Out_AtmoParams15_g170688= Data15_g170688.AtmoParams;
				Out_FadeParams15_g170688= Data15_g170688.FadeParams;
				Out_FormParams15_g170688 = Data15_g170688.FormParams;
				Out_FlowParams15_g170688 = Data15_g170688.FlowParams;
				}
				half4 Global_CoatParams972_g170678 = Out_CoatParams15_g170688;
				float temp_output_6_0_g170712 = (Global_CoatParams972_g170678).y;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170712 = ( temp_output_6_0_g170712 + ( _ThirdElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170712 = temp_output_6_0_g170712;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170678 = staticSwitch14_g170712;
				#else
				float staticSwitch1056_g170678 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170678 = lerp( 1.0 , staticSwitch1056_g170678 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170678 = lerpResult1060_g170678;
				float clampResult17_g170707 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170678 * Blend_LumaMask1046_g170678 * Blend_VertMask913_g170678 * Blend_ProjMask912_g170678 * Blend_GlobalMask968_g170678 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170709 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170709 = ( clampResult17_g170707 - temp_output_7_0_g170709 );
				half Detail_Mask412_g170678 = ( saturate( ( ( temp_output_9_0_g170709 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170678 = lerp( Visual_Albedo527_g170678 , lerpResult985_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170678 = lerpResult989_g170678;
				#else
				float3 staticSwitch415_g170678 = Visual_Albedo527_g170678;
				#endif
				half3 Final_Albedo601_g170678 = staticSwitch415_g170678;
				float3 In_Albedo3_g170687 = Final_Albedo601_g170678;
				float3 In_AlbedoRaw3_g170687 = Final_Albedo601_g170678;
				half2 Visual_NormalTS529_g170678 = Out_NormalTS4_g170686;
				float2 lerpResult40_g170689 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170678 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170680) = _ThirdNormalTex;
				float localFilterTexture29_g170696 = ( 0.0 );
				SamplerState SS29_g170696 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170696 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170696 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170696 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170696 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170696 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170696 = SamplerDefault29_g170696;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170696 = SamplerDefault29_g170696;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170696 = SamplerPoint29_g170696;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170696 = SamplerLow29_g170696;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170696 = SamplerMedium29_g170696;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170696 = SamplerHigh29_g170696;
				#endif
				}
				SamplerState Sampler276_g170680 = SS29_g170696;
				float4 temp_output_37_0_g170680 = Local_LayerCoords790_g170678;
				half4 Coords276_g170680 = temp_output_37_0_g170680;
				half2 TexCoord276_g170680 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170680 = SampleMain( Texture276_g170680 , Sampler276_g170680 , Coords276_g170680 , TexCoord276_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170680) = _ThirdNormalTex;
				SamplerState Sampler275_g170680 = SS29_g170696;
				half4 Coords275_g170680 = temp_output_37_0_g170680;
				half2 TexCoord275_g170680 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170680 = SampleExtra( Texture275_g170680 , Sampler275_g170680 , Coords275_g170680 , TexCoord275_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170680) = _ThirdNormalTex;
				SamplerState Sampler238_g170680 = SS29_g170696;
				half4 Coords238_g170680 = temp_output_37_0_g170680;
				float3 temp_output_279_0_g170680 = Model_PositionWO636_g170678;
				half3 WorldPosition238_g170680 = temp_output_279_0_g170680;
				half4 localSamplePlanar2D238_g170680 = SamplePlanar2D( Texture238_g170680 , Sampler238_g170680 , Coords238_g170680 , WorldPosition238_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170680) = _ThirdNormalTex;
				SamplerState Sampler246_g170680 = SS29_g170696;
				half4 Coords246_g170680 = temp_output_37_0_g170680;
				half3 WorldPosition246_g170680 = temp_output_279_0_g170680;
				float3 temp_output_280_0_g170680 = Model_NormalWS869_g170678;
				half3 WorldNormal246_g170680 = temp_output_280_0_g170680;
				half4 localSamplePlanar3D246_g170680 = SamplePlanar3D( Texture246_g170680 , Sampler246_g170680 , Coords246_g170680 , WorldPosition246_g170680 , WorldNormal246_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170680) = _ThirdNormalTex;
				SamplerState Sampler234_g170680 = SS29_g170696;
				float4 Coords234_g170680 = temp_output_37_0_g170680;
				float3 WorldPosition234_g170680 = temp_output_279_0_g170680;
				float4 localSampleStochastic2D234_g170680 = SampleStochastic2D( Texture234_g170680 , Sampler234_g170680 , Coords234_g170680 , WorldPosition234_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170680) = _ThirdNormalTex;
				SamplerState Sampler263_g170680 = SS29_g170696;
				half4 Coords263_g170680 = temp_output_37_0_g170680;
				half3 WorldPosition263_g170680 = temp_output_279_0_g170680;
				half3 WorldNormal263_g170680 = temp_output_280_0_g170680;
				half4 localSampleStochastic3D263_g170680 = SampleStochastic3D( Texture263_g170680 , Sampler263_g170680 , Coords263_g170680 , WorldPosition263_g170680 , WorldNormal263_g170680 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170678 = localSampleMain276_g170680;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170678 = localSampleExtra275_g170680;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170678 = localSamplePlanar2D238_g170680;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170678 = localSamplePlanar3D246_g170680;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170678 = localSampleStochastic2D234_g170680;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170678 = localSampleStochastic3D263_g170680;
				#else
				float4 staticSwitch698_g170678 = localSampleMain276_g170680;
				#endif
				half4 Local_NormalTex776_g170678 = staticSwitch698_g170678;
				half4 Normal_Packed45_g170682 = Local_NormalTex776_g170678;
				float2 appendResult58_g170682 = (float2(( (Normal_Packed45_g170682).x * (Normal_Packed45_g170682).w ) , (Normal_Packed45_g170682).y));
				half2 Normal_Default50_g170682 = appendResult58_g170682;
				half2 Normal_ASTC41_g170682 = (Normal_Packed45_g170682).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170682 = Normal_ASTC41_g170682;
				#else
				float2 staticSwitch38_g170682 = Normal_Default50_g170682;
				#endif
				half2 Normal_NO_DTX544_g170682 = (Normal_Packed45_g170682).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170682 = Normal_NO_DTX544_g170682;
				#else
				float2 staticSwitch37_g170682 = staticSwitch38_g170682;
				#endif
				float2 temp_output_724_0_g170678 = ( (staticSwitch37_g170682*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170683 = temp_output_724_0_g170678;
				float2 break71_g170683 = Normal_Planar45_g170683;
				float3 appendResult72_g170683 = (float3(break71_g170683.x , 0.0 , break71_g170683.y));
				float2 temp_output_858_0_g170678 = (mul( ase_worldToTangent, appendResult72_g170683 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170678 = temp_output_724_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170678 = temp_output_724_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170678 = temp_output_858_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170678 = temp_output_858_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170678 = temp_output_858_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170678 = temp_output_858_0_g170678;
				#else
				float2 staticSwitch727_g170678 = temp_output_724_0_g170678;
				#endif
				half2 Local_NormalTS729_g170678 = staticSwitch727_g170678;
				float2 temp_output_36_0_g170689 = ( lerpResult40_g170689 + Local_NormalTS729_g170678 );
				float2 lerpResult405_g170678 = lerp( Visual_NormalTS529_g170678 , temp_output_36_0_g170689 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170678 = lerpResult405_g170678;
				#else
				float2 staticSwitch418_g170678 = Visual_NormalTS529_g170678;
				#endif
				half2 Final_NormalTS612_g170678 = staticSwitch418_g170678;
				float2 In_NormalTS3_g170687 = Final_NormalTS612_g170678;
				float3 appendResult68_g170690 = (float3(Final_NormalTS612_g170678 , 1.0));
				float3 tanNormal74_g170690 = appendResult68_g170690;
				float3 worldNormal74_g170690 = normalize( float3(dot(tanToWorld0,tanNormal74_g170690), dot(tanToWorld1,tanNormal74_g170690), dot(tanToWorld2,tanNormal74_g170690)) );
				half3 Final_NormalWS956_g170678 = worldNormal74_g170690;
				float3 In_NormalWS3_g170687 = Final_NormalWS956_g170678;
				half4 Visual_Shader531_g170678 = Out_Shader4_g170686;
				float4 lerpResult1000_g170678 = lerp( Local_Masks750_g170678 , ( Visual_Shader531_g170678 * Local_Masks750_g170678 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170678 = lerp( Visual_Shader531_g170678 , lerpResult1000_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170678 = lerpResult998_g170678;
				#else
				float4 staticSwitch451_g170678 = Visual_Shader531_g170678;
				#endif
				half4 Final_Masks613_g170678 = staticSwitch451_g170678;
				float4 In_Shader3_g170687 = Final_Masks613_g170678;
				float4 In_Emissive3_g170687 = Out_Emissive4_g170686;
				float3 temp_output_3_0_g170692 = Final_Albedo601_g170678;
				float dotResult20_g170692 = dot( temp_output_3_0_g170692 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170678 = dotResult20_g170692;
				float In_Grayscale3_g170687 = Final_Grayscale615_g170678;
				float clampResult651_g170678 = clamp( saturate( ( Final_Grayscale615_g170678 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170678 = clampResult651_g170678;
				float In_Luminosity3_g170687 = Final_Luminosity652_g170678;
				half Visual_MultiMask547_g170678 = Out_MultiMask4_g170686;
				float lerpResult477_g170678 = lerp( Visual_MultiMask547_g170678 , Local_MultiMask767_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float staticSwitch482_g170678 = lerpResult477_g170678;
				#else
				float staticSwitch482_g170678 = Visual_MultiMask547_g170678;
				#endif
				half Final_MultiMask572_g170678 = staticSwitch482_g170678;
				float In_MultiMask3_g170687 = Final_MultiMask572_g170678;
				half Visual_AlphaClip559_g170678 = Out_AlphaClip4_g170686;
				float temp_output_718_0_g170678 = (Local_AlbedoTex777_g170678).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170678 = ( temp_output_718_0_g170678 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170678 = temp_output_718_0_g170678;
				#endif
				half Local_AlphaClip772_g170678 = staticSwitch924_g170678;
				float lerpResult448_g170678 = lerp( Visual_AlphaClip559_g170678 , Local_AlphaClip772_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float staticSwitch564_g170678 = lerpResult448_g170678;
				#else
				float staticSwitch564_g170678 = Visual_AlphaClip559_g170678;
				#endif
				half Final_AlphaClip602_g170678 = staticSwitch564_g170678;
				float In_AlphaClip3_g170687 = Final_AlphaClip602_g170678;
				half Visual_AlphaFade588_g170678 = Out_AlphaFade4_g170686;
				half Local_AlphaFade773_g170678 = (lerpResult706_g170678).a;
				float lerpResult604_g170678 = lerp( Visual_AlphaFade588_g170678 , Local_AlphaFade773_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float staticSwitch608_g170678 = lerpResult604_g170678;
				#else
				float staticSwitch608_g170678 = Visual_AlphaFade588_g170678;
				#endif
				half Final_AlphaFade611_g170678 = staticSwitch608_g170678;
				float In_AlphaFade3_g170687 = Final_AlphaFade611_g170678;
				float3 In_Translucency3_g170687 = Out_Translucency4_g170686;
				float In_Transmission3_g170687 = Out_Transmission4_g170686;
				float In_Thickness3_g170687 = Out_Thickness4_g170686;
				float In_Diffusion3_g170687 = Out_Diffusion4_g170686;
				{
				Data3_g170687.Dummy = In_Dummy3_g170687;
				Data3_g170687.Albedo = In_Albedo3_g170687;
				Data3_g170687.AlbedoRaw = In_AlbedoRaw3_g170687;
				Data3_g170687.NormalTS = In_NormalTS3_g170687;
				Data3_g170687.NormalWS = In_NormalWS3_g170687;
				Data3_g170687.Shader = In_Shader3_g170687;
				Data3_g170687.Emissive= In_Emissive3_g170687;
				Data3_g170687.MultiMask = In_MultiMask3_g170687;
				Data3_g170687.Grayscale = In_Grayscale3_g170687;
				Data3_g170687.Luminosity = In_Luminosity3_g170687;
				Data3_g170687.AlphaClip = In_AlphaClip3_g170687;
				Data3_g170687.AlphaFade = In_AlphaFade3_g170687;
				Data3_g170687.Translucency = In_Translucency3_g170687;
				Data3_g170687.Transmission = In_Transmission3_g170687;
				Data3_g170687.Thickness = In_Thickness3_g170687;
				Data3_g170687.Diffusion = In_Diffusion3_g170687;
				}
				TVEVisualData Data4_g170789 = Data3_g170687;
				float Out_Dummy4_g170789 = 0;
				float3 Out_Albedo4_g170789 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170789 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170789 = float2( 0,0 );
				float3 Out_NormalWS4_g170789 = float3( 0,0,0 );
				float4 Out_Shader4_g170789 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170789 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170789 = 0;
				float Out_Grayscale4_g170789 = 0;
				float Out_Luminosity4_g170789 = 0;
				float Out_AlphaClip4_g170789 = 0;
				float Out_AlphaFade4_g170789 = 0;
				float3 Out_Translucency4_g170789 = float3( 0,0,0 );
				float Out_Transmission4_g170789 = 0;
				float Out_Thickness4_g170789 = 0;
				float Out_Diffusion4_g170789 = 0;
				{
				Out_Dummy4_g170789 = Data4_g170789.Dummy;
				Out_Albedo4_g170789 = Data4_g170789.Albedo;
				Out_AlbedoRaw4_g170789 = Data4_g170789.AlbedoRaw;
				Out_NormalTS4_g170789 = Data4_g170789.NormalTS;
				Out_NormalWS4_g170789 = Data4_g170789.NormalWS;
				Out_Shader4_g170789 = Data4_g170789.Shader;
				Out_Emissive4_g170789= Data4_g170789.Emissive;
				Out_MultiMask4_g170789 = Data4_g170789.MultiMask;
				Out_Grayscale4_g170789 = Data4_g170789.Grayscale;
				Out_Luminosity4_g170789= Data4_g170789.Luminosity;
				Out_AlphaClip4_g170789 = Data4_g170789.AlphaClip;
				Out_AlphaFade4_g170789 = Data4_g170789.AlphaFade;
				Out_Translucency4_g170789 = Data4_g170789.Translucency;
				Out_Transmission4_g170789 = Data4_g170789.Transmission;
				Out_Thickness4_g170789 = Data4_g170789.Thickness;
				Out_Diffusion4_g170789 = Data4_g170789.Diffusion;
				}
				half3 Visual_Albedo127_g170788 = Out_Albedo4_g170789;
				TVEModelData Data15_g170796 = Data16_g170483;
				float Out_Dummy15_g170796 = 0;
				float3 Out_PositionWS15_g170796 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170796 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170796 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170796 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170796 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170796 = float3( 0,0,0 );
				float4 Out_VertexData15_g170796 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170796 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170796 = Data15_g170796.Dummy;
				Out_PositionWS15_g170796 = Data15_g170796.PositionWS;
				Out_PositionWO15_g170796 = Data15_g170796.PositionWO;
				Out_PivotWS15_g170796 = Data15_g170796.PivotWS;
				Out_PivotWO15_g170796 = Data15_g170796.PivotWO;
				Out_NormalWS15_g170796 = Data15_g170796.NormalWS;
				Out_ViewDirWS15_g170796 = Data15_g170796.ViewDirWS;
				Out_VertexData15_g170796 = Data15_g170796.VertexData;
				Out_BoundsData15_g170796 = Data15_g170796.BoundsData;
				}
				half4 Model_VertexData206_g170788 = Out_VertexData15_g170796;
				float4 break208_g170788 = Model_VertexData206_g170788;
				float4 break33_g170794 = _occlusion_vert_mode;
				float temp_output_30_0_g170794 = ( break208_g170788.x * break33_g170794.x );
				float temp_output_29_0_g170794 = ( break208_g170788.y * break33_g170794.y );
				float temp_output_31_0_g170794 = ( break208_g170788.z * break33_g170794.z );
				float temp_output_28_0_g170794 = ( temp_output_30_0_g170794 + temp_output_29_0_g170794 + temp_output_31_0_g170794 + ( break208_g170788.w * break33_g170794.w ) );
				float temp_output_194_0_g170788 = temp_output_28_0_g170794;
				float clampResult17_g170792 = clamp( temp_output_194_0_g170788 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170797 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170797 = ( clampResult17_g170792 - temp_output_7_0_g170797 );
				float temp_output_6_0_g170793 = saturate( ( ( temp_output_9_0_g170797 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170793 = ( temp_output_6_0_g170793 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170793 = temp_output_6_0_g170793;
				#endif
				half Occlusion_Mask82_g170788 = staticSwitch14_g170793;
				float3 lerpResult75_g170788 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170788);
				float3 lerpResult186_g170788 = lerp( Visual_Albedo127_g170788 , ( Visual_Albedo127_g170788 * lerpResult75_g170788 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170788 = lerpResult186_g170788;
				#else
				float3 staticSwitch171_g170788 = Visual_Albedo127_g170788;
				#endif
				half3 Final_Albedo160_g170788 = staticSwitch171_g170788;
				float3 In_Albedo3_g170790 = Final_Albedo160_g170788;
				float3 In_AlbedoRaw3_g170790 = Final_Albedo160_g170788;
				float2 In_NormalTS3_g170790 = Out_NormalTS4_g170789;
				float3 In_NormalWS3_g170790 = Out_NormalWS4_g170789;
				float4 In_Shader3_g170790 = Out_Shader4_g170789;
				float4 In_Emissive3_g170790 = Out_Emissive4_g170789;
				float3 temp_output_3_0_g170791 = Final_Albedo160_g170788;
				float dotResult20_g170791 = dot( temp_output_3_0_g170791 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170788 = dotResult20_g170791;
				float In_Grayscale3_g170790 = Final_Grayscale164_g170788;
				float clampResult180_g170788 = clamp( saturate( ( Final_Grayscale164_g170788 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170788 = clampResult180_g170788;
				float In_Luminosity3_g170790 = Final_Shading181_g170788;
				float In_MultiMask3_g170790 = Out_MultiMask4_g170789;
				float In_AlphaClip3_g170790 = Out_AlphaClip4_g170789;
				float In_AlphaFade3_g170790 = Out_AlphaFade4_g170789;
				float3 In_Translucency3_g170790 = Out_Translucency4_g170789;
				float In_Transmission3_g170790 = Out_Transmission4_g170789;
				float In_Thickness3_g170790 = Out_Thickness4_g170789;
				float In_Diffusion3_g170790 = Out_Diffusion4_g170789;
				{
				Data3_g170790.Dummy = In_Dummy3_g170790;
				Data3_g170790.Albedo = In_Albedo3_g170790;
				Data3_g170790.AlbedoRaw = In_AlbedoRaw3_g170790;
				Data3_g170790.NormalTS = In_NormalTS3_g170790;
				Data3_g170790.NormalWS = In_NormalWS3_g170790;
				Data3_g170790.Shader = In_Shader3_g170790;
				Data3_g170790.Emissive= In_Emissive3_g170790;
				Data3_g170790.MultiMask = In_MultiMask3_g170790;
				Data3_g170790.Grayscale = In_Grayscale3_g170790;
				Data3_g170790.Luminosity = In_Luminosity3_g170790;
				Data3_g170790.AlphaClip = In_AlphaClip3_g170790;
				Data3_g170790.AlphaFade = In_AlphaFade3_g170790;
				Data3_g170790.Translucency = In_Translucency3_g170790;
				Data3_g170790.Transmission = In_Transmission3_g170790;
				Data3_g170790.Thickness = In_Thickness3_g170790;
				Data3_g170790.Diffusion = In_Diffusion3_g170790;
				}
				TVEVisualData Data4_g170800 = Data3_g170790;
				float Out_Dummy4_g170800 = 0;
				float3 Out_Albedo4_g170800 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170800 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170800 = float2( 0,0 );
				float3 Out_NormalWS4_g170800 = float3( 0,0,0 );
				float4 Out_Shader4_g170800 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170800 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170800 = 0;
				float Out_Grayscale4_g170800 = 0;
				float Out_Luminosity4_g170800 = 0;
				float Out_AlphaClip4_g170800 = 0;
				float Out_AlphaFade4_g170800 = 0;
				float3 Out_Translucency4_g170800 = float3( 0,0,0 );
				float Out_Transmission4_g170800 = 0;
				float Out_Thickness4_g170800 = 0;
				float Out_Diffusion4_g170800 = 0;
				{
				Out_Dummy4_g170800 = Data4_g170800.Dummy;
				Out_Albedo4_g170800 = Data4_g170800.Albedo;
				Out_AlbedoRaw4_g170800 = Data4_g170800.AlbedoRaw;
				Out_NormalTS4_g170800 = Data4_g170800.NormalTS;
				Out_NormalWS4_g170800 = Data4_g170800.NormalWS;
				Out_Shader4_g170800 = Data4_g170800.Shader;
				Out_Emissive4_g170800= Data4_g170800.Emissive;
				Out_MultiMask4_g170800 = Data4_g170800.MultiMask;
				Out_Grayscale4_g170800 = Data4_g170800.Grayscale;
				Out_Luminosity4_g170800= Data4_g170800.Luminosity;
				Out_AlphaClip4_g170800 = Data4_g170800.AlphaClip;
				Out_AlphaFade4_g170800 = Data4_g170800.AlphaFade;
				Out_Translucency4_g170800 = Data4_g170800.Translucency;
				Out_Transmission4_g170800 = Data4_g170800.Transmission;
				Out_Thickness4_g170800 = Data4_g170800.Thickness;
				Out_Diffusion4_g170800 = Data4_g170800.Diffusion;
				}
				half3 Visual_Albedo127_g170798 = Out_Albedo4_g170800;
				TVEModelData Data15_g170806 = Data16_g170483;
				float Out_Dummy15_g170806 = 0;
				float3 Out_PositionWS15_g170806 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170806 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170806 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170806 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170806 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170806 = float3( 0,0,0 );
				float4 Out_VertexData15_g170806 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170806 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170806 = Data15_g170806.Dummy;
				Out_PositionWS15_g170806 = Data15_g170806.PositionWS;
				Out_PositionWO15_g170806 = Data15_g170806.PositionWO;
				Out_PivotWS15_g170806 = Data15_g170806.PivotWS;
				Out_PivotWO15_g170806 = Data15_g170806.PivotWO;
				Out_NormalWS15_g170806 = Data15_g170806.NormalWS;
				Out_ViewDirWS15_g170806 = Data15_g170806.ViewDirWS;
				Out_VertexData15_g170806 = Data15_g170806.VertexData;
				Out_BoundsData15_g170806 = Data15_g170806.BoundsData;
				}
				half4 Model_VertexData224_g170798 = Out_VertexData15_g170806;
				float4 break226_g170798 = Model_VertexData224_g170798;
				float4 break33_g170799 = _gradient_vert_mode;
				float temp_output_30_0_g170799 = ( break226_g170798.x * break33_g170799.x );
				float temp_output_29_0_g170799 = ( break226_g170798.y * break33_g170799.y );
				float temp_output_31_0_g170799 = ( break226_g170798.z * break33_g170799.z );
				float temp_output_28_0_g170799 = ( temp_output_30_0_g170799 + temp_output_29_0_g170799 + temp_output_31_0_g170799 + ( break226_g170798.w * break33_g170799.w ) );
				float temp_output_211_0_g170798 = temp_output_28_0_g170799;
				float clampResult17_g170804 = clamp( temp_output_211_0_g170798 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170807 = _GradientMeshRemap.x;
				float temp_output_9_0_g170807 = ( clampResult17_g170804 - temp_output_7_0_g170807 );
				float temp_output_6_0_g170805 = saturate( ( ( temp_output_9_0_g170807 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170805 = ( temp_output_6_0_g170805 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170805 = temp_output_6_0_g170805;
				#endif
				half Gradient_VertMask82_g170798 = staticSwitch14_g170805;
				half Gradient_Mask200_g170798 = Gradient_VertMask82_g170798;
				float3 lerpResult75_g170798 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170798);
				float temp_output_162_11_g170798 = Out_MultiMask4_g170800;
				half Visual_MultiMask196_g170798 = temp_output_162_11_g170798;
				float lerpResult190_g170798 = lerp( 1.0 , Visual_MultiMask196_g170798 , _GradientMultiValue);
				half Gradient_MultiMask194_g170798 = lerpResult190_g170798;
				float3 lerpResult186_g170798 = lerp( Visual_Albedo127_g170798 , ( Visual_Albedo127_g170798 * lerpResult75_g170798 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170798 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170798 = lerpResult186_g170798;
				#else
				float3 staticSwitch171_g170798 = Visual_Albedo127_g170798;
				#endif
				half3 Final_Albedo160_g170798 = staticSwitch171_g170798;
				float3 In_Albedo3_g170801 = Final_Albedo160_g170798;
				float3 In_AlbedoRaw3_g170801 = Final_Albedo160_g170798;
				float2 In_NormalTS3_g170801 = Out_NormalTS4_g170800;
				float3 In_NormalWS3_g170801 = Out_NormalWS4_g170800;
				float4 In_Shader3_g170801 = Out_Shader4_g170800;
				float4 In_Emissive3_g170801 = Out_Emissive4_g170800;
				float3 temp_output_3_0_g170802 = Final_Albedo160_g170798;
				float dotResult20_g170802 = dot( temp_output_3_0_g170802 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170798 = dotResult20_g170802;
				float In_Grayscale3_g170801 = Final_Grayscale164_g170798;
				float clampResult180_g170798 = clamp( saturate( ( Final_Grayscale164_g170798 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170798 = clampResult180_g170798;
				float In_Luminosity3_g170801 = Final_Luminosity181_g170798;
				float In_MultiMask3_g170801 = temp_output_162_11_g170798;
				float In_AlphaClip3_g170801 = Out_AlphaClip4_g170800;
				float In_AlphaFade3_g170801 = Out_AlphaFade4_g170800;
				float3 In_Translucency3_g170801 = Out_Translucency4_g170800;
				float In_Transmission3_g170801 = Out_Transmission4_g170800;
				float In_Thickness3_g170801 = Out_Thickness4_g170800;
				float In_Diffusion3_g170801 = Out_Diffusion4_g170800;
				{
				Data3_g170801.Dummy = In_Dummy3_g170801;
				Data3_g170801.Albedo = In_Albedo3_g170801;
				Data3_g170801.AlbedoRaw = In_AlbedoRaw3_g170801;
				Data3_g170801.NormalTS = In_NormalTS3_g170801;
				Data3_g170801.NormalWS = In_NormalWS3_g170801;
				Data3_g170801.Shader = In_Shader3_g170801;
				Data3_g170801.Emissive= In_Emissive3_g170801;
				Data3_g170801.MultiMask = In_MultiMask3_g170801;
				Data3_g170801.Grayscale = In_Grayscale3_g170801;
				Data3_g170801.Luminosity = In_Luminosity3_g170801;
				Data3_g170801.AlphaClip = In_AlphaClip3_g170801;
				Data3_g170801.AlphaFade = In_AlphaFade3_g170801;
				Data3_g170801.Translucency = In_Translucency3_g170801;
				Data3_g170801.Transmission = In_Transmission3_g170801;
				Data3_g170801.Thickness = In_Thickness3_g170801;
				Data3_g170801.Diffusion = In_Diffusion3_g170801;
				}
				TVEVisualData Data4_g170810 = Data3_g170801;
				float Out_Dummy4_g170810 = 0;
				float3 Out_Albedo4_g170810 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170810 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170810 = float2( 0,0 );
				float3 Out_NormalWS4_g170810 = float3( 0,0,0 );
				float4 Out_Shader4_g170810 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170810 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170810 = 0;
				float Out_Grayscale4_g170810 = 0;
				float Out_Luminosity4_g170810 = 0;
				float Out_AlphaClip4_g170810 = 0;
				float Out_AlphaFade4_g170810 = 0;
				float3 Out_Translucency4_g170810 = float3( 0,0,0 );
				float Out_Transmission4_g170810 = 0;
				float Out_Thickness4_g170810 = 0;
				float Out_Diffusion4_g170810 = 0;
				{
				Out_Dummy4_g170810 = Data4_g170810.Dummy;
				Out_Albedo4_g170810 = Data4_g170810.Albedo;
				Out_AlbedoRaw4_g170810 = Data4_g170810.AlbedoRaw;
				Out_NormalTS4_g170810 = Data4_g170810.NormalTS;
				Out_NormalWS4_g170810 = Data4_g170810.NormalWS;
				Out_Shader4_g170810 = Data4_g170810.Shader;
				Out_Emissive4_g170810= Data4_g170810.Emissive;
				Out_MultiMask4_g170810 = Data4_g170810.MultiMask;
				Out_Grayscale4_g170810 = Data4_g170810.Grayscale;
				Out_Luminosity4_g170810= Data4_g170810.Luminosity;
				Out_AlphaClip4_g170810 = Data4_g170810.AlphaClip;
				Out_AlphaFade4_g170810 = Data4_g170810.AlphaFade;
				Out_Translucency4_g170810 = Data4_g170810.Translucency;
				Out_Transmission4_g170810 = Data4_g170810.Transmission;
				Out_Thickness4_g170810 = Data4_g170810.Thickness;
				Out_Diffusion4_g170810 = Data4_g170810.Diffusion;
				}
				half3 Visual_Albedo127_g170808 = Out_Albedo4_g170810;
				TVEModelData Data15_g170815 = Data16_g170483;
				float Out_Dummy15_g170815 = 0;
				float3 Out_PositionWS15_g170815 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170815 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170815 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170815 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170815 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170815 = float3( 0,0,0 );
				float4 Out_VertexData15_g170815 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170815 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170815 = Data15_g170815.Dummy;
				Out_PositionWS15_g170815 = Data15_g170815.PositionWS;
				Out_PositionWO15_g170815 = Data15_g170815.PositionWO;
				Out_PivotWS15_g170815 = Data15_g170815.PivotWS;
				Out_PivotWO15_g170815 = Data15_g170815.PivotWO;
				Out_NormalWS15_g170815 = Data15_g170815.NormalWS;
				Out_ViewDirWS15_g170815 = Data15_g170815.ViewDirWS;
				Out_VertexData15_g170815 = Data15_g170815.VertexData;
				Out_BoundsData15_g170815 = Data15_g170815.BoundsData;
				}
				half3 Model_PositionWO224_g170808 = Out_PositionWO15_g170815;
				half3 Model_PivotWO239_g170808 = Out_PivotWO15_g170815;
				float3 lerpResult242_g170808 = lerp( Model_PositionWO224_g170808 , Model_PivotWO239_g170808 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170812 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170808 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170814 = clamp( tex3DNode60_g170812.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170816 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170816 = ( clampResult17_g170814 - temp_output_7_0_g170816 );
				float temp_output_238_0_g170808 = saturate( ( ( temp_output_9_0_g170816 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170808 = temp_output_238_0_g170808;
				half Variaton_Mask200_g170808 = Variaton_NoiseMask82_g170808;
				float3 lerpResult75_g170808 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170808);
				float temp_output_162_11_g170808 = Out_MultiMask4_g170810;
				half Visual_MultiMask196_g170808 = temp_output_162_11_g170808;
				float lerpResult190_g170808 = lerp( 1.0 , Visual_MultiMask196_g170808 , _VariationMultiValue);
				half Variaton_MultiMask194_g170808 = lerpResult190_g170808;
				float3 lerpResult186_g170808 = lerp( Visual_Albedo127_g170808 , ( Visual_Albedo127_g170808 * lerpResult75_g170808 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170808 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170808 = lerpResult186_g170808;
				#else
				float3 staticSwitch171_g170808 = Visual_Albedo127_g170808;
				#endif
				half3 Final_Albedo160_g170808 = staticSwitch171_g170808;
				float3 In_Albedo3_g170811 = Final_Albedo160_g170808;
				float3 In_AlbedoRaw3_g170811 = Final_Albedo160_g170808;
				float2 In_NormalTS3_g170811 = Out_NormalTS4_g170810;
				float3 In_NormalWS3_g170811 = Out_NormalWS4_g170810;
				float4 In_Shader3_g170811 = Out_Shader4_g170810;
				float4 In_Emissive3_g170811 = Out_Emissive4_g170810;
				float3 temp_output_3_0_g170809 = Final_Albedo160_g170808;
				float dotResult20_g170809 = dot( temp_output_3_0_g170809 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170808 = dotResult20_g170809;
				float In_Grayscale3_g170811 = Final_Grayscale164_g170808;
				float clampResult180_g170808 = clamp( saturate( ( Final_Grayscale164_g170808 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170808 = clampResult180_g170808;
				float In_Luminosity3_g170811 = Final_Luminosity181_g170808;
				float In_MultiMask3_g170811 = temp_output_162_11_g170808;
				float In_AlphaClip3_g170811 = Out_AlphaClip4_g170810;
				float In_AlphaFade3_g170811 = Out_AlphaFade4_g170810;
				float3 In_Translucency3_g170811 = Out_Translucency4_g170810;
				float In_Transmission3_g170811 = Out_Transmission4_g170810;
				float In_Thickness3_g170811 = Out_Thickness4_g170810;
				float In_Diffusion3_g170811 = Out_Diffusion4_g170810;
				{
				Data3_g170811.Dummy = In_Dummy3_g170811;
				Data3_g170811.Albedo = In_Albedo3_g170811;
				Data3_g170811.AlbedoRaw = In_AlbedoRaw3_g170811;
				Data3_g170811.NormalTS = In_NormalTS3_g170811;
				Data3_g170811.NormalWS = In_NormalWS3_g170811;
				Data3_g170811.Shader = In_Shader3_g170811;
				Data3_g170811.Emissive= In_Emissive3_g170811;
				Data3_g170811.MultiMask = In_MultiMask3_g170811;
				Data3_g170811.Grayscale = In_Grayscale3_g170811;
				Data3_g170811.Luminosity = In_Luminosity3_g170811;
				Data3_g170811.AlphaClip = In_AlphaClip3_g170811;
				Data3_g170811.AlphaFade = In_AlphaFade3_g170811;
				Data3_g170811.Translucency = In_Translucency3_g170811;
				Data3_g170811.Transmission = In_Transmission3_g170811;
				Data3_g170811.Thickness = In_Thickness3_g170811;
				Data3_g170811.Diffusion = In_Diffusion3_g170811;
				}
				TVEVisualData Data4_g170823 = Data3_g170811;
				float Out_Dummy4_g170823 = 0;
				float3 Out_Albedo4_g170823 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170823 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170823 = float2( 0,0 );
				float3 Out_NormalWS4_g170823 = float3( 0,0,0 );
				float4 Out_Shader4_g170823 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170823 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170823 = 0;
				float Out_Grayscale4_g170823 = 0;
				float Out_Luminosity4_g170823 = 0;
				float Out_AlphaClip4_g170823 = 0;
				float Out_AlphaFade4_g170823 = 0;
				float3 Out_Translucency4_g170823 = float3( 0,0,0 );
				float Out_Transmission4_g170823 = 0;
				float Out_Thickness4_g170823 = 0;
				float Out_Diffusion4_g170823 = 0;
				{
				Out_Dummy4_g170823 = Data4_g170823.Dummy;
				Out_Albedo4_g170823 = Data4_g170823.Albedo;
				Out_AlbedoRaw4_g170823 = Data4_g170823.AlbedoRaw;
				Out_NormalTS4_g170823 = Data4_g170823.NormalTS;
				Out_NormalWS4_g170823 = Data4_g170823.NormalWS;
				Out_Shader4_g170823 = Data4_g170823.Shader;
				Out_Emissive4_g170823= Data4_g170823.Emissive;
				Out_MultiMask4_g170823 = Data4_g170823.MultiMask;
				Out_Grayscale4_g170823 = Data4_g170823.Grayscale;
				Out_Luminosity4_g170823= Data4_g170823.Luminosity;
				Out_AlphaClip4_g170823 = Data4_g170823.AlphaClip;
				Out_AlphaFade4_g170823 = Data4_g170823.AlphaFade;
				Out_Translucency4_g170823 = Data4_g170823.Translucency;
				Out_Transmission4_g170823 = Data4_g170823.Transmission;
				Out_Thickness4_g170823 = Data4_g170823.Thickness;
				Out_Diffusion4_g170823 = Data4_g170823.Diffusion;
				}
				half3 Visual_Albedo139_g170818 = Out_Albedo4_g170823;
				float temp_output_200_12_g170818 = Out_Grayscale4_g170823;
				half Visual_Grayscale150_g170818 = temp_output_200_12_g170818;
				float3 temp_cast_33 = (Visual_Grayscale150_g170818).xxx;
				TVEGlobalData Data15_g170819 = Data204_g170496;
				float Out_Dummy15_g170819 = 0;
				float4 Out_CoatParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170819 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170819 = Data15_g170819.Dummy;
				Out_CoatParams15_g170819 = Data15_g170819.CoatParams;
				Out_PaintParams15_g170819 = Data15_g170819.PaintParams;
				Out_GlowParams15_g170819 = Data15_g170819.GlowParams;
				Out_AtmoParams15_g170819= Data15_g170819.AtmoParams;
				Out_FadeParams15_g170819= Data15_g170819.FadeParams;
				Out_FormParams15_g170819 = Data15_g170819.FormParams;
				Out_FlowParams15_g170819 = Data15_g170819.FlowParams;
				}
				half4 Global_PaintParams209_g170818 = Out_PaintParams15_g170819;
				float4 temp_output_6_0_g170840 = Global_PaintParams209_g170818;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170840 = ( temp_output_6_0_g170840 + ( _TintingElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170840 = temp_output_6_0_g170840;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170818 = staticSwitch14_g170840;
				#else
				float4 staticSwitch283_g170818 = TVE_PaintParams;
				#endif
				float lerpResult412_g170818 = lerp( 1.0 , ( saturate( (staticSwitch283_g170818).w ) * TVE_IsEnabled ) , _TintingGlobalValue);
				half Tinting_GlobalValue285_g170818 = lerpResult412_g170818;
				float3 lerpResult368_g170818 = lerp( Visual_Albedo139_g170818 , temp_cast_33 , ( Tinting_GlobalValue285_g170818 * _TintingGrayValue ));
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170833 = 2.0;
				#else
				float staticSwitch1_g170833 = 4.594794;
				#endif
				half3 Tinting_GlobalColor290_g170818 = (staticSwitch283_g170818).xyz;
				float temp_output_200_11_g170818 = Out_MultiMask4_g170823;
				half Visual_MultiMask181_g170818 = temp_output_200_11_g170818;
				float lerpResult147_g170818 = lerp( 1.0 , Visual_MultiMask181_g170818 , _TintingMultiValue);
				half Tinting_MutiMask121_g170818 = lerpResult147_g170818;
				half Tinting_TexMask385_g170818 = 1.0;
				float temp_output_200_15_g170818 = Out_Luminosity4_g170823;
				half Visual_Luminosity257_g170818 = temp_output_200_15_g170818;
				float clampResult17_g170830 = clamp( Visual_Luminosity257_g170818 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170835 = _TintingLumaRemap.x;
				float temp_output_9_0_g170835 = ( clampResult17_g170830 - temp_output_7_0_g170835 );
				float lerpResult228_g170818 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170835 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170818 = lerpResult228_g170818;
				TVEModelData Data15_g170824 = Data16_g170483;
				float Out_Dummy15_g170824 = 0;
				float3 Out_PositionWS15_g170824 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170824 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170824 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170824 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170824 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170824 = float3( 0,0,0 );
				float4 Out_VertexData15_g170824 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170824 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170824 = Data15_g170824.Dummy;
				Out_PositionWS15_g170824 = Data15_g170824.PositionWS;
				Out_PositionWO15_g170824 = Data15_g170824.PositionWO;
				Out_PivotWS15_g170824 = Data15_g170824.PivotWS;
				Out_PivotWO15_g170824 = Data15_g170824.PivotWO;
				Out_NormalWS15_g170824 = Data15_g170824.NormalWS;
				Out_ViewDirWS15_g170824 = Data15_g170824.ViewDirWS;
				Out_VertexData15_g170824 = Data15_g170824.VertexData;
				Out_BoundsData15_g170824 = Data15_g170824.BoundsData;
				}
				half4 Model_VertexMasks307_g170818 = Out_VertexData15_g170824;
				float4 break311_g170818 = Model_VertexMasks307_g170818;
				float4 break33_g170827 = _tinting_vert_mode;
				float temp_output_30_0_g170827 = ( break311_g170818.x * break33_g170827.x );
				float temp_output_29_0_g170827 = ( break311_g170818.y * break33_g170827.y );
				float temp_output_31_0_g170827 = ( break311_g170818.z * break33_g170827.z );
				float temp_output_28_0_g170827 = ( temp_output_30_0_g170827 + temp_output_29_0_g170827 + temp_output_31_0_g170827 + ( break311_g170818.w * break33_g170827.w ) );
				float clampResult17_g170829 = clamp( temp_output_28_0_g170827 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170836 = _TintingMeshRemap.x;
				float temp_output_9_0_g170836 = ( clampResult17_g170829 - temp_output_7_0_g170836 );
				float lerpResult370_g170818 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170836 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170831 = lerpResult370_g170818;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170831 = ( temp_output_6_0_g170831 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170831 = temp_output_6_0_g170831;
				#endif
				half Tinting_VertMask309_g170818 = staticSwitch14_g170831;
				half Tinting_NoiseMask213_g170818 = 1.0;
				half Custom_Mask345_g170818 = 1.0;
				float temp_output_7_0_g170839 = _TintingBlendRemap.x;
				float temp_output_9_0_g170839 = ( ( _TintingIntensityValue * Tinting_MutiMask121_g170818 * Tinting_TexMask385_g170818 * Tinting_LumaMask153_g170818 * Tinting_VertMask309_g170818 * Tinting_NoiseMask213_g170818 * Tinting_GlobalValue285_g170818 * Custom_Mask345_g170818 ) - temp_output_7_0_g170839 );
				half Tinting_Mask242_g170818 = ( saturate( ( ( temp_output_9_0_g170839 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170818 = lerp( Visual_Albedo139_g170818 , ( lerpResult368_g170818 * staticSwitch1_g170833 * Tinting_GlobalColor290_g170818 * (_TintingColor).rgb ) , Tinting_Mask242_g170818);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170818 = lerpResult90_g170818;
				#else
				float3 staticSwitch286_g170818 = Visual_Albedo139_g170818;
				#endif
				half3 Final_Albedo97_g170818 = staticSwitch286_g170818;
				float3 In_Albedo3_g170822 = Final_Albedo97_g170818;
				float3 In_AlbedoRaw3_g170822 = Out_AlbedoRaw4_g170823;
				float2 In_NormalTS3_g170822 = Out_NormalTS4_g170823;
				float3 In_NormalWS3_g170822 = Out_NormalWS4_g170823;
				float4 In_Shader3_g170822 = Out_Shader4_g170823;
				float4 In_Emissive3_g170822 = Out_Emissive4_g170823;
				float In_Grayscale3_g170822 = temp_output_200_12_g170818;
				float In_Luminosity3_g170822 = temp_output_200_15_g170818;
				float In_MultiMask3_g170822 = temp_output_200_11_g170818;
				float In_AlphaClip3_g170822 = Out_AlphaClip4_g170823;
				float In_AlphaFade3_g170822 = Out_AlphaFade4_g170823;
				float3 In_Translucency3_g170822 = Out_Translucency4_g170823;
				float In_Transmission3_g170822 = Out_Transmission4_g170823;
				float In_Thickness3_g170822 = Out_Thickness4_g170823;
				float In_Diffusion3_g170822 = Out_Diffusion4_g170823;
				{
				Data3_g170822.Dummy = In_Dummy3_g170822;
				Data3_g170822.Albedo = In_Albedo3_g170822;
				Data3_g170822.AlbedoRaw = In_AlbedoRaw3_g170822;
				Data3_g170822.NormalTS = In_NormalTS3_g170822;
				Data3_g170822.NormalWS = In_NormalWS3_g170822;
				Data3_g170822.Shader = In_Shader3_g170822;
				Data3_g170822.Emissive= In_Emissive3_g170822;
				Data3_g170822.MultiMask = In_MultiMask3_g170822;
				Data3_g170822.Grayscale = In_Grayscale3_g170822;
				Data3_g170822.Luminosity = In_Luminosity3_g170822;
				Data3_g170822.AlphaClip = In_AlphaClip3_g170822;
				Data3_g170822.AlphaFade = In_AlphaFade3_g170822;
				Data3_g170822.Translucency = In_Translucency3_g170822;
				Data3_g170822.Transmission = In_Transmission3_g170822;
				Data3_g170822.Thickness = In_Thickness3_g170822;
				Data3_g170822.Diffusion = In_Diffusion3_g170822;
				}
				TVEVisualData Data4_g170844 = Data3_g170822;
				float Out_Dummy4_g170844 = 0;
				float3 Out_Albedo4_g170844 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170844 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170844 = float2( 0,0 );
				float3 Out_NormalWS4_g170844 = float3( 0,0,0 );
				float4 Out_Shader4_g170844 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170844 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170844 = 0;
				float Out_Grayscale4_g170844 = 0;
				float Out_Luminosity4_g170844 = 0;
				float Out_AlphaClip4_g170844 = 0;
				float Out_AlphaFade4_g170844 = 0;
				float3 Out_Translucency4_g170844 = float3( 0,0,0 );
				float Out_Transmission4_g170844 = 0;
				float Out_Thickness4_g170844 = 0;
				float Out_Diffusion4_g170844 = 0;
				{
				Out_Dummy4_g170844 = Data4_g170844.Dummy;
				Out_Albedo4_g170844 = Data4_g170844.Albedo;
				Out_AlbedoRaw4_g170844 = Data4_g170844.AlbedoRaw;
				Out_NormalTS4_g170844 = Data4_g170844.NormalTS;
				Out_NormalWS4_g170844 = Data4_g170844.NormalWS;
				Out_Shader4_g170844 = Data4_g170844.Shader;
				Out_Emissive4_g170844= Data4_g170844.Emissive;
				Out_MultiMask4_g170844 = Data4_g170844.MultiMask;
				Out_Grayscale4_g170844 = Data4_g170844.Grayscale;
				Out_Luminosity4_g170844= Data4_g170844.Luminosity;
				Out_AlphaClip4_g170844 = Data4_g170844.AlphaClip;
				Out_AlphaFade4_g170844 = Data4_g170844.AlphaFade;
				Out_Translucency4_g170844 = Data4_g170844.Translucency;
				Out_Transmission4_g170844 = Data4_g170844.Transmission;
				Out_Thickness4_g170844 = Data4_g170844.Thickness;
				Out_Diffusion4_g170844 = Data4_g170844.Diffusion;
				}
				half3 Visual_Albedo292_g170842 = Out_Albedo4_g170844;
				float temp_output_280_12_g170842 = Out_Grayscale4_g170844;
				half Visual_Grayscale308_g170842 = temp_output_280_12_g170842;
				float3 temp_cast_34 = (Visual_Grayscale308_g170842).xxx;
				TVEGlobalData Data15_g170843 = Data204_g170496;
				float Out_Dummy15_g170843 = 0;
				float4 Out_CoatParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170843 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170843 = Data15_g170843.Dummy;
				Out_CoatParams15_g170843 = Data15_g170843.CoatParams;
				Out_PaintParams15_g170843 = Data15_g170843.PaintParams;
				Out_GlowParams15_g170843 = Data15_g170843.GlowParams;
				Out_AtmoParams15_g170843= Data15_g170843.AtmoParams;
				Out_FadeParams15_g170843= Data15_g170843.FadeParams;
				Out_FormParams15_g170843 = Data15_g170843.FormParams;
				Out_FlowParams15_g170843 = Data15_g170843.FlowParams;
				}
				half4 Global_AtmoParams314_g170842 = Out_AtmoParams15_g170843;
				float temp_output_6_0_g170863 = (Global_AtmoParams314_g170842).x;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170863 = ( temp_output_6_0_g170863 + ( _DrynessElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170863 = temp_output_6_0_g170863;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170842 = staticSwitch14_g170863;
				#else
				float staticSwitch351_g170842 = TVE_AtmoData.x;
				#endif
				float lerpResult505_g170842 = lerp( 1.0 , ( staticSwitch351_g170842 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalMask352_g170842 = lerpResult505_g170842;
				float3 lerpResult485_g170842 = lerp( Visual_Albedo292_g170842 , temp_cast_34 , ( Dryness_GlobalMask352_g170842 * _DrynessGrayValue ));
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170857 = 2.0;
				#else
				float staticSwitch1_g170857 = 4.594794;
				#endif
				half Dryness_TexMask478_g170842 = 1.0;
				float temp_output_280_11_g170842 = Out_MultiMask4_g170844;
				half Visual_MultiMask310_g170842 = temp_output_280_11_g170842;
				float lerpResult283_g170842 = lerp( 1.0 , Visual_MultiMask310_g170842 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170842 = lerpResult283_g170842;
				float temp_output_280_15_g170842 = Out_Luminosity4_g170844;
				half Visual_Luminosity309_g170842 = temp_output_280_15_g170842;
				float clampResult17_g170854 = clamp( Visual_Luminosity309_g170842 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170859 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170859 = ( clampResult17_g170854 - temp_output_7_0_g170859 );
				float lerpResult295_g170842 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170859 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170842 = lerpResult295_g170842;
				TVEModelData Data15_g170848 = Data16_g170483;
				float Out_Dummy15_g170848 = 0;
				float3 Out_PositionWS15_g170848 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170848 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170848 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170848 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170848 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170848 = float3( 0,0,0 );
				float4 Out_VertexData15_g170848 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170848 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170848 = Data15_g170848.Dummy;
				Out_PositionWS15_g170848 = Data15_g170848.PositionWS;
				Out_PositionWO15_g170848 = Data15_g170848.PositionWO;
				Out_PivotWS15_g170848 = Data15_g170848.PivotWS;
				Out_PivotWO15_g170848 = Data15_g170848.PivotWO;
				Out_NormalWS15_g170848 = Data15_g170848.NormalWS;
				Out_ViewDirWS15_g170848 = Data15_g170848.ViewDirWS;
				Out_VertexData15_g170848 = Data15_g170848.VertexData;
				Out_BoundsData15_g170848 = Data15_g170848.BoundsData;
				}
				half4 Model_VertexMasks386_g170842 = Out_VertexData15_g170848;
				float4 break375_g170842 = Model_VertexMasks386_g170842;
				float4 break33_g170851 = _dryness_vert_mode;
				float temp_output_30_0_g170851 = ( break375_g170842.x * break33_g170851.x );
				float temp_output_29_0_g170851 = ( break375_g170842.y * break33_g170851.y );
				float temp_output_31_0_g170851 = ( break375_g170842.z * break33_g170851.z );
				float temp_output_28_0_g170851 = ( temp_output_30_0_g170851 + temp_output_29_0_g170851 + temp_output_31_0_g170851 + ( break375_g170842.w * break33_g170851.w ) );
				float clampResult17_g170852 = clamp( temp_output_28_0_g170851 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170860 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170860 = ( clampResult17_g170852 - temp_output_7_0_g170860 );
				float lerpResult452_g170842 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170860 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170855 = lerpResult452_g170842;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170855 = ( temp_output_6_0_g170855 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170855 = temp_output_6_0_g170855;
				#endif
				half Dryness_VertMask378_g170842 = staticSwitch14_g170855;
				half Dryness_MaskNoise291_g170842 = 1.0;
				half Custom_Mask411_g170842 = 1.0;
				float temp_output_7_0_g170862 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170862 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170842 * Dryness_MultiMask302_g170842 * Dryness_LumaMask301_g170842 * Dryness_VertMask378_g170842 * Dryness_MaskNoise291_g170842 * Dryness_GlobalMask352_g170842 * Custom_Mask411_g170842 ) - temp_output_7_0_g170862 );
				half Dryness_Mask329_g170842 = saturate( ( ( temp_output_9_0_g170862 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170842 = lerp( Visual_Albedo292_g170842 , ( lerpResult485_g170842 * staticSwitch1_g170857 * (_DrynessColor).rgb ) , Dryness_Mask329_g170842);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170842 = lerpResult336_g170842;
				#else
				float3 staticSwitch356_g170842 = Visual_Albedo292_g170842;
				#endif
				half3 Final_Albedo331_g170842 = staticSwitch356_g170842;
				float3 In_Albedo3_g170845 = Final_Albedo331_g170842;
				float3 In_AlbedoRaw3_g170845 = Out_AlbedoRaw4_g170844;
				float2 In_NormalTS3_g170845 = Out_NormalTS4_g170844;
				float3 In_NormalWS3_g170845 = Out_NormalWS4_g170844;
				half4 Visual_Shader415_g170842 = Out_Shader4_g170844;
				float4 break438_g170842 = Visual_Shader415_g170842;
				float4 appendResult439_g170842 = (float4(break438_g170842.x , break438_g170842.y , break438_g170842.z , ( break438_g170842.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170842 = lerp( Visual_Shader415_g170842 , appendResult439_g170842 , Dryness_Mask329_g170842);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170842 = lerpResult427_g170842;
				#else
				float4 staticSwitch426_g170842 = Visual_Shader415_g170842;
				#endif
				half4 Final_Shader433_g170842 = staticSwitch426_g170842;
				float4 In_Shader3_g170845 = Final_Shader433_g170842;
				float4 In_Emissive3_g170845 = Out_Emissive4_g170844;
				float In_Grayscale3_g170845 = temp_output_280_12_g170842;
				float In_Luminosity3_g170845 = temp_output_280_15_g170842;
				float In_MultiMask3_g170845 = temp_output_280_11_g170842;
				float In_AlphaClip3_g170845 = Out_AlphaClip4_g170844;
				float In_AlphaFade3_g170845 = Out_AlphaFade4_g170844;
				float3 In_Translucency3_g170845 = Out_Translucency4_g170844;
				half Visual_Transmission416_g170842 = Out_Transmission4_g170844;
				float lerpResult421_g170842 = lerp( Visual_Transmission416_g170842 , ( Visual_Transmission416_g170842 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170842);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170842 = lerpResult421_g170842;
				#else
				float staticSwitch418_g170842 = Visual_Transmission416_g170842;
				#endif
				half Final_Transmission425_g170842 = staticSwitch418_g170842;
				float In_Transmission3_g170845 = Final_Transmission425_g170842;
				float In_Thickness3_g170845 = Out_Thickness4_g170844;
				float In_Diffusion3_g170845 = Out_Diffusion4_g170844;
				{
				Data3_g170845.Dummy = In_Dummy3_g170845;
				Data3_g170845.Albedo = In_Albedo3_g170845;
				Data3_g170845.AlbedoRaw = In_AlbedoRaw3_g170845;
				Data3_g170845.NormalTS = In_NormalTS3_g170845;
				Data3_g170845.NormalWS = In_NormalWS3_g170845;
				Data3_g170845.Shader = In_Shader3_g170845;
				Data3_g170845.Emissive= In_Emissive3_g170845;
				Data3_g170845.MultiMask = In_MultiMask3_g170845;
				Data3_g170845.Grayscale = In_Grayscale3_g170845;
				Data3_g170845.Luminosity = In_Luminosity3_g170845;
				Data3_g170845.AlphaClip = In_AlphaClip3_g170845;
				Data3_g170845.AlphaFade = In_AlphaFade3_g170845;
				Data3_g170845.Translucency = In_Translucency3_g170845;
				Data3_g170845.Transmission = In_Transmission3_g170845;
				Data3_g170845.Thickness = In_Thickness3_g170845;
				Data3_g170845.Diffusion = In_Diffusion3_g170845;
				}
				TVEVisualData Data4_g170867 = Data3_g170845;
				float Out_Dummy4_g170867 = 0;
				float3 Out_Albedo4_g170867 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170867 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170867 = float2( 0,0 );
				float3 Out_NormalWS4_g170867 = float3( 0,0,0 );
				float4 Out_Shader4_g170867 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170867 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170867 = 0;
				float Out_Grayscale4_g170867 = 0;
				float Out_Luminosity4_g170867 = 0;
				float Out_AlphaClip4_g170867 = 0;
				float Out_AlphaFade4_g170867 = 0;
				float3 Out_Translucency4_g170867 = float3( 0,0,0 );
				float Out_Transmission4_g170867 = 0;
				float Out_Thickness4_g170867 = 0;
				float Out_Diffusion4_g170867 = 0;
				{
				Out_Dummy4_g170867 = Data4_g170867.Dummy;
				Out_Albedo4_g170867 = Data4_g170867.Albedo;
				Out_AlbedoRaw4_g170867 = Data4_g170867.AlbedoRaw;
				Out_NormalTS4_g170867 = Data4_g170867.NormalTS;
				Out_NormalWS4_g170867 = Data4_g170867.NormalWS;
				Out_Shader4_g170867 = Data4_g170867.Shader;
				Out_Emissive4_g170867= Data4_g170867.Emissive;
				Out_MultiMask4_g170867 = Data4_g170867.MultiMask;
				Out_Grayscale4_g170867 = Data4_g170867.Grayscale;
				Out_Luminosity4_g170867= Data4_g170867.Luminosity;
				Out_AlphaClip4_g170867 = Data4_g170867.AlphaClip;
				Out_AlphaFade4_g170867 = Data4_g170867.AlphaFade;
				Out_Translucency4_g170867 = Data4_g170867.Translucency;
				Out_Transmission4_g170867 = Data4_g170867.Transmission;
				Out_Thickness4_g170867 = Data4_g170867.Thickness;
				Out_Diffusion4_g170867 = Data4_g170867.Diffusion;
				}
				half3 Visual_Albedo127_g170866 = Out_Albedo4_g170867;
				float4 vertexToFrag24_g170817 = IN.ase_texcoord13;
				half4 Interp_Data1269 = vertexToFrag24_g170817;
				float clampResult208_g170866 = clamp( (Interp_Data1269).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170866 = ( Visual_Albedo127_g170866 + ( ( Visual_Albedo127_g170866 * Visual_Albedo127_g170866 * 200.0 * _motion_highlight_color ) * clampResult208_g170866 ) );
				#else
				float3 staticSwitch214_g170866 = Visual_Albedo127_g170866;
				#endif
				half3 Final_Albedo160_g170866 = staticSwitch214_g170866;
				float3 In_Albedo3_g170868 = Final_Albedo160_g170866;
				float3 In_AlbedoRaw3_g170868 = Out_AlbedoRaw4_g170867;
				float2 In_NormalTS3_g170868 = Out_NormalTS4_g170867;
				float3 In_NormalWS3_g170868 = Out_NormalWS4_g170867;
				float4 In_Shader3_g170868 = Out_Shader4_g170867;
				float4 In_Emissive3_g170868 = Out_Emissive4_g170867;
				float In_Grayscale3_g170868 = Out_Grayscale4_g170867;
				float In_Luminosity3_g170868 = Out_Luminosity4_g170867;
				float In_MultiMask3_g170868 = Out_MultiMask4_g170867;
				float In_AlphaClip3_g170868 = Out_AlphaClip4_g170867;
				float In_AlphaFade3_g170868 = Out_AlphaFade4_g170867;
				float3 In_Translucency3_g170868 = Out_Translucency4_g170867;
				float In_Transmission3_g170868 = Out_Transmission4_g170867;
				float In_Thickness3_g170868 = Out_Thickness4_g170867;
				float In_Diffusion3_g170868 = Out_Diffusion4_g170867;
				{
				Data3_g170868.Dummy = In_Dummy3_g170868;
				Data3_g170868.Albedo = In_Albedo3_g170868;
				Data3_g170868.AlbedoRaw = In_AlbedoRaw3_g170868;
				Data3_g170868.NormalTS = In_NormalTS3_g170868;
				Data3_g170868.NormalWS = In_NormalWS3_g170868;
				Data3_g170868.Shader = In_Shader3_g170868;
				Data3_g170868.Emissive= In_Emissive3_g170868;
				Data3_g170868.MultiMask = In_MultiMask3_g170868;
				Data3_g170868.Grayscale = In_Grayscale3_g170868;
				Data3_g170868.Luminosity = In_Luminosity3_g170868;
				Data3_g170868.AlphaClip = In_AlphaClip3_g170868;
				Data3_g170868.AlphaFade = In_AlphaFade3_g170868;
				Data3_g170868.Translucency = In_Translucency3_g170868;
				Data3_g170868.Transmission = In_Transmission3_g170868;
				Data3_g170868.Thickness = In_Thickness3_g170868;
				Data3_g170868.Diffusion = In_Diffusion3_g170868;
				}
				TVEVisualData Data4_g170870 = Data3_g170868;
				float Out_Dummy4_g170870 = 0;
				float3 Out_Albedo4_g170870 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170870 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170870 = float2( 0,0 );
				float3 Out_NormalWS4_g170870 = float3( 0,0,0 );
				float4 Out_Shader4_g170870 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170870 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170870 = 0;
				float Out_Grayscale4_g170870 = 0;
				float Out_Luminosity4_g170870 = 0;
				float Out_AlphaClip4_g170870 = 0;
				float Out_AlphaFade4_g170870 = 0;
				float3 Out_Translucency4_g170870 = float3( 0,0,0 );
				float Out_Transmission4_g170870 = 0;
				float Out_Thickness4_g170870 = 0;
				float Out_Diffusion4_g170870 = 0;
				{
				Out_Dummy4_g170870 = Data4_g170870.Dummy;
				Out_Albedo4_g170870 = Data4_g170870.Albedo;
				Out_AlbedoRaw4_g170870 = Data4_g170870.AlbedoRaw;
				Out_NormalTS4_g170870 = Data4_g170870.NormalTS;
				Out_NormalWS4_g170870 = Data4_g170870.NormalWS;
				Out_Shader4_g170870 = Data4_g170870.Shader;
				Out_Emissive4_g170870= Data4_g170870.Emissive;
				Out_MultiMask4_g170870 = Data4_g170870.MultiMask;
				Out_Grayscale4_g170870 = Data4_g170870.Grayscale;
				Out_Luminosity4_g170870= Data4_g170870.Luminosity;
				Out_AlphaClip4_g170870 = Data4_g170870.AlphaClip;
				Out_AlphaFade4_g170870 = Data4_g170870.AlphaFade;
				Out_Translucency4_g170870 = Data4_g170870.Translucency;
				Out_Transmission4_g170870 = Data4_g170870.Transmission;
				Out_Thickness4_g170870 = Data4_g170870.Thickness;
				Out_Diffusion4_g170870 = Data4_g170870.Diffusion;
				}
				half3 Visual_Albedo127_g170869 = Out_Albedo4_g170870;
				float3 temp_output_622_0_g170869 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170873) = _OverlayAlbedoTex;
				float localFilterTexture19_g170885 = ( 0.0 );
				SamplerState SS19_g170885 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170885 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170885 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170885 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170885 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170885 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170885 = SamplerDefault19_g170885;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170885 = SamplerDefault19_g170885;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170885 = SamplerPoint19_g170885;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170885 = SamplerLow19_g170885;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170885 = SamplerMedium19_g170885;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170885 = SamplerHigh19_g170885;
				#endif
				}
				SamplerState Sampler238_g170873 = SS19_g170885;
				float4 temp_output_6_0_g170874 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170874 = ( temp_output_6_0_g170874 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170874 = temp_output_6_0_g170874;
				#endif
				half4 Overlay_Coords639_g170869 = staticSwitch14_g170874;
				float4 temp_output_37_0_g170873 = Overlay_Coords639_g170869;
				half4 Coords238_g170873 = temp_output_37_0_g170873;
				TVEModelData Data15_g170887 = Data16_g170483;
				float Out_Dummy15_g170887 = 0;
				float3 Out_PositionWS15_g170887 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170887 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170887 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170887 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170887 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170887 = float3( 0,0,0 );
				float4 Out_VertexData15_g170887 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170887 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170887 = Data15_g170887.Dummy;
				Out_PositionWS15_g170887 = Data15_g170887.PositionWS;
				Out_PositionWO15_g170887 = Data15_g170887.PositionWO;
				Out_PivotWS15_g170887 = Data15_g170887.PivotWS;
				Out_PivotWO15_g170887 = Data15_g170887.PivotWO;
				Out_NormalWS15_g170887 = Data15_g170887.NormalWS;
				Out_ViewDirWS15_g170887 = Data15_g170887.ViewDirWS;
				Out_VertexData15_g170887 = Data15_g170887.VertexData;
				Out_BoundsData15_g170887 = Data15_g170887.BoundsData;
				}
				half3 Model_PositionWO602_g170869 = Out_PositionWO15_g170887;
				float3 temp_output_279_0_g170873 = Model_PositionWO602_g170869;
				half3 WorldPosition238_g170873 = temp_output_279_0_g170873;
				half4 localSamplePlanar2D238_g170873 = SamplePlanar2D( Texture238_g170873 , Sampler238_g170873 , Coords238_g170873 , WorldPosition238_g170873 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170873) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170873 = SS19_g170885;
				half4 Coords246_g170873 = temp_output_37_0_g170873;
				half3 WorldPosition246_g170873 = temp_output_279_0_g170873;
				half3 Model_NormalWS712_g170869 = Out_NormalWS15_g170887;
				float3 temp_output_280_0_g170873 = Model_NormalWS712_g170869;
				half3 WorldNormal246_g170873 = temp_output_280_0_g170873;
				half4 localSamplePlanar3D246_g170873 = SamplePlanar3D( Texture246_g170873 , Sampler246_g170873 , Coords246_g170873 , WorldPosition246_g170873 , WorldNormal246_g170873 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170873) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170873 = SS19_g170885;
				float4 Coords234_g170873 = temp_output_37_0_g170873;
				float3 WorldPosition234_g170873 = temp_output_279_0_g170873;
				float4 localSampleStochastic2D234_g170873 = SampleStochastic2D( Texture234_g170873 , Sampler234_g170873 , Coords234_g170873 , WorldPosition234_g170873 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170873) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170873 = SS19_g170885;
				half4 Coords263_g170873 = temp_output_37_0_g170873;
				half3 WorldPosition263_g170873 = temp_output_279_0_g170873;
				half3 WorldNormal263_g170873 = temp_output_280_0_g170873;
				half4 localSampleStochastic3D263_g170873 = SampleStochastic3D( Texture263_g170873 , Sampler263_g170873 , Coords263_g170873 , WorldPosition263_g170873 , WorldNormal263_g170873 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170869 = localSamplePlanar2D238_g170873;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170869 = localSamplePlanar3D246_g170873;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170869 = localSampleStochastic2D234_g170873;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170869 = localSampleStochastic3D263_g170873;
				#else
				float4 staticSwitch676_g170869 = localSamplePlanar2D238_g170873;
				#endif
				half3 Overlay_Albedo526_g170869 = (staticSwitch676_g170869).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170869 = ( temp_output_622_0_g170869 * Overlay_Albedo526_g170869 );
				#else
				float3 staticSwitch578_g170869 = temp_output_622_0_g170869;
				#endif
				float3 temp_output_6_0_g170888 = staticSwitch578_g170869;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170888 = ( temp_output_6_0_g170888 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170888 = temp_output_6_0_g170888;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170877) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170877 = sampler_Linear_Repeat;
				float4 appendResult863_g170869 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170877 = appendResult863_g170869;
				half4 Coords246_g170877 = temp_output_37_0_g170877;
				float3 temp_output_279_0_g170877 = Model_PositionWO602_g170869;
				half3 WorldPosition246_g170877 = temp_output_279_0_g170877;
				float3 temp_output_280_0_g170877 = Model_NormalWS712_g170869;
				half3 WorldNormal246_g170877 = temp_output_280_0_g170877;
				half4 localSamplePlanar3D246_g170877 = SamplePlanar3D( Texture246_g170877 , Sampler246_g170877 , Coords246_g170877 , WorldPosition246_g170877 , WorldNormal246_g170877 );
				half Overlay_GlitterTex854_g170869 = (localSamplePlanar3D246_g170877).x;
				float lerpResult922_g170869 = lerp( 1.0 , float4(atten,0,0,0) , _OverlayGlitterAttenValue);
				half3 Model_PositionWS879_g170869 = Out_PositionWS15_g170887;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170869 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170869 * lerpResult922_g170869 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170869 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170869 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170869 = staticSwitch868_g170869;
				half Overlay_TexMask908_g170869 = 1.0;
				float3 temp_output_739_21_g170869 = Out_NormalWS4_g170870;
				half3 Visual_NormalWS749_g170869 = temp_output_739_21_g170869;
				float clampResult17_g170894 = clamp( saturate( (Visual_NormalWS749_g170869).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170898 = _OverlayProjRemap.x;
				float temp_output_9_0_g170898 = ( clampResult17_g170894 - temp_output_7_0_g170898 );
				float lerpResult842_g170869 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170898 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170869 = lerpResult842_g170869;
				float temp_output_739_15_g170869 = Out_Luminosity4_g170870;
				half Visual_Luminosity654_g170869 = temp_output_739_15_g170869;
				float clampResult17_g170902 = clamp( Visual_Luminosity654_g170869 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170903 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170903 = ( clampResult17_g170902 - temp_output_7_0_g170903 );
				float lerpResult587_g170869 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170903 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170869 = lerpResult587_g170869;
				half4 Model_VertexMasks791_g170869 = Out_VertexData15_g170887;
				float4 break792_g170869 = Model_VertexMasks791_g170869;
				float4 break33_g170889 = _overlay_vert_mode;
				float temp_output_30_0_g170889 = ( break792_g170869.x * break33_g170889.x );
				float temp_output_29_0_g170889 = ( break792_g170869.y * break33_g170889.y );
				float temp_output_31_0_g170889 = ( break792_g170869.z * break33_g170889.z );
				float temp_output_28_0_g170889 = ( temp_output_30_0_g170889 + temp_output_29_0_g170889 + temp_output_31_0_g170889 + ( break792_g170869.w * break33_g170889.w ) );
				float clampResult17_g170890 = clamp( temp_output_28_0_g170889 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170899 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170899 = ( clampResult17_g170890 - temp_output_7_0_g170899 );
				float lerpResult881_g170869 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170899 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170895 = lerpResult881_g170869;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170895 = ( temp_output_6_0_g170895 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170895 = temp_output_6_0_g170895;
				#endif
				half Overlay_VertMask801_g170869 = staticSwitch14_g170895;
				half Overlay_MaskNoise427_g170869 = 1.0;
				TVEGlobalData Data15_g170871 = Data204_g170496;
				float Out_Dummy15_g170871 = 0;
				float4 Out_CoatParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170871 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170871 = Data15_g170871.Dummy;
				Out_CoatParams15_g170871 = Data15_g170871.CoatParams;
				Out_PaintParams15_g170871 = Data15_g170871.PaintParams;
				Out_GlowParams15_g170871 = Data15_g170871.GlowParams;
				Out_AtmoParams15_g170871= Data15_g170871.AtmoParams;
				Out_FadeParams15_g170871= Data15_g170871.FadeParams;
				Out_FormParams15_g170871 = Data15_g170871.FormParams;
				Out_FlowParams15_g170871 = Data15_g170871.FlowParams;
				}
				half4 Global_AtmoParams516_g170869 = Out_AtmoParams15_g170871;
				float temp_output_6_0_g170904 = (Global_AtmoParams516_g170869).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170904 = ( temp_output_6_0_g170904 + ( _OverlayElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170904 = temp_output_6_0_g170904;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170869 = staticSwitch14_g170904;
				#else
				float staticSwitch705_g170869 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170869 = lerp( 1.0 , ( staticSwitch705_g170869 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170869 = lerpResult937_g170869;
				half Custom_Mask646_g170869 = 1.0;
				float temp_output_7_0_g170901 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170901 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170869 * Overlay_MaskProj457_g170869 * Overlay_MaskLuma438_g170869 * Overlay_VertMask801_g170869 * Overlay_MaskNoise427_g170869 * Overlay_MaskGlobal429_g170869 * Custom_Mask646_g170869 ) - temp_output_7_0_g170901 );
				half Overlay_Mask494_g170869 = saturate( ( ( temp_output_9_0_g170901 / ( _OverlayBlendRemap.y - temp_output_7_0_g170901 ) ) + 0.0001 ) );
				float3 lerpResult467_g170869 = lerp( Visual_Albedo127_g170869 , ( staticSwitch14_g170888 + Overlay_GlitterColor865_g170869 ) , Overlay_Mask494_g170869);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170869 = lerpResult467_g170869;
				#else
				float3 staticSwitch577_g170869 = Visual_Albedo127_g170869;
				#endif
				half3 Final_Albedo493_g170869 = staticSwitch577_g170869;
				float3 In_Albedo3_g170872 = Final_Albedo493_g170869;
				float3 In_AlbedoRaw3_g170872 = Out_AlbedoRaw4_g170870;
				half2 Visual_NormalTS535_g170869 = Out_NormalTS4_g170870;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170875) = _OverlayNormalTex;
				float localFilterTexture29_g170886 = ( 0.0 );
				SamplerState SS29_g170886 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170886 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170886 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170886 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170886 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170886 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170886 = SamplerDefault29_g170886;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170886 = SamplerDefault29_g170886;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170886 = SamplerPoint29_g170886;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170886 = SamplerLow29_g170886;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170886 = SamplerMedium29_g170886;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170886 = SamplerHigh29_g170886;
				#endif
				}
				SamplerState Sampler238_g170875 = SS29_g170886;
				float4 temp_output_37_0_g170875 = Overlay_Coords639_g170869;
				half4 Coords238_g170875 = temp_output_37_0_g170875;
				float3 temp_output_279_0_g170875 = Model_PositionWO602_g170869;
				half3 WorldPosition238_g170875 = temp_output_279_0_g170875;
				half4 localSamplePlanar2D238_g170875 = SamplePlanar2D( Texture238_g170875 , Sampler238_g170875 , Coords238_g170875 , WorldPosition238_g170875 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170875) = _OverlayNormalTex;
				SamplerState Sampler246_g170875 = SS29_g170886;
				half4 Coords246_g170875 = temp_output_37_0_g170875;
				half3 WorldPosition246_g170875 = temp_output_279_0_g170875;
				float3 temp_output_280_0_g170875 = Model_NormalWS712_g170869;
				half3 WorldNormal246_g170875 = temp_output_280_0_g170875;
				half4 localSamplePlanar3D246_g170875 = SamplePlanar3D( Texture246_g170875 , Sampler246_g170875 , Coords246_g170875 , WorldPosition246_g170875 , WorldNormal246_g170875 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170875) = _OverlayNormalTex;
				SamplerState Sampler234_g170875 = SS29_g170886;
				float4 Coords234_g170875 = temp_output_37_0_g170875;
				float3 WorldPosition234_g170875 = temp_output_279_0_g170875;
				float4 localSampleStochastic2D234_g170875 = SampleStochastic2D( Texture234_g170875 , Sampler234_g170875 , Coords234_g170875 , WorldPosition234_g170875 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170875) = _OverlayNormalTex;
				SamplerState Sampler263_g170875 = SS29_g170886;
				half4 Coords263_g170875 = temp_output_37_0_g170875;
				half3 WorldPosition263_g170875 = temp_output_279_0_g170875;
				half3 WorldNormal263_g170875 = temp_output_280_0_g170875;
				half4 localSampleStochastic3D263_g170875 = SampleStochastic3D( Texture263_g170875 , Sampler263_g170875 , Coords263_g170875 , WorldPosition263_g170875 , WorldNormal263_g170875 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170869 = localSamplePlanar2D238_g170875;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170869 = localSamplePlanar3D246_g170875;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170869 = localSampleStochastic2D234_g170875;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170869 = localSampleStochastic3D263_g170875;
				#else
				float4 staticSwitch686_g170869 = localSamplePlanar2D238_g170875;
				#endif
				half4 Normal_Packed45_g170879 = staticSwitch686_g170869;
				float2 appendResult58_g170879 = (float2(( (Normal_Packed45_g170879).x * (Normal_Packed45_g170879).w ) , (Normal_Packed45_g170879).y));
				half2 Normal_Default50_g170879 = appendResult58_g170879;
				half2 Normal_ASTC41_g170879 = (Normal_Packed45_g170879).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170879 = Normal_ASTC41_g170879;
				#else
				float2 staticSwitch38_g170879 = Normal_Default50_g170879;
				#endif
				half2 Normal_NO_DTX544_g170879 = (Normal_Packed45_g170879).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170879 = Normal_NO_DTX544_g170879;
				#else
				float2 staticSwitch37_g170879 = staticSwitch38_g170879;
				#endif
				half2 Normal_Planar45_g170878 = (staticSwitch37_g170879*2.0 + -1.0);
				float2 break71_g170878 = Normal_Planar45_g170878;
				float3 appendResult72_g170878 = (float3(break71_g170878.x , 0.0 , break71_g170878.y));
				half2 Overlay_Normal528_g170869 = (mul( ase_worldToTangent, appendResult72_g170878 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170869 = Overlay_Normal528_g170869;
				#else
				float2 staticSwitch579_g170869 = Visual_NormalTS535_g170869;
				#endif
				float2 lerpResult551_g170869 = lerp( Visual_NormalTS535_g170869 , ( staticSwitch579_g170869 * _OverlayNormalValue ) , Overlay_Mask494_g170869);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170869 = lerpResult551_g170869;
				#else
				float2 staticSwitch583_g170869 = Visual_NormalTS535_g170869;
				#endif
				half2 Final_NormalTS499_g170869 = staticSwitch583_g170869;
				float2 In_NormalTS3_g170872 = Final_NormalTS499_g170869;
				float3 In_NormalWS3_g170872 = temp_output_739_21_g170869;
				half4 Visual_Masks536_g170869 = Out_Shader4_g170870;
				float4 appendResult585_g170869 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170869 = lerp( Visual_Masks536_g170869 , appendResult585_g170869 , Overlay_Mask494_g170869);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170869 = lerpResult584_g170869;
				#else
				float4 staticSwitch586_g170869 = Visual_Masks536_g170869;
				#endif
				half4 Final_Masks482_g170869 = staticSwitch586_g170869;
				float4 In_Shader3_g170872 = Final_Masks482_g170869;
				float4 In_Emissive3_g170872 = Out_Emissive4_g170870;
				float temp_output_739_12_g170869 = Out_Grayscale4_g170870;
				float In_Grayscale3_g170872 = temp_output_739_12_g170869;
				float In_Luminosity3_g170872 = temp_output_739_15_g170869;
				float In_MultiMask3_g170872 = Out_MultiMask4_g170870;
				float In_AlphaClip3_g170872 = Out_AlphaClip4_g170870;
				float In_AlphaFade3_g170872 = Out_AlphaFade4_g170870;
				float3 In_Translucency3_g170872 = Out_Translucency4_g170870;
				half Visual_Transmission699_g170869 = Out_Transmission4_g170870;
				float lerpResult746_g170869 = lerp( Visual_Transmission699_g170869 , ( Visual_Transmission699_g170869 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170869 * Overlay_MaskNoise427_g170869 * Overlay_MaskGlobal429_g170869 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170869 = lerpResult746_g170869;
				#else
				float staticSwitch703_g170869 = Visual_Transmission699_g170869;
				#endif
				half Final_Transmission702_g170869 = staticSwitch703_g170869;
				float In_Transmission3_g170872 = Final_Transmission702_g170869;
				float In_Thickness3_g170872 = Out_Thickness4_g170870;
				float In_Diffusion3_g170872 = Out_Diffusion4_g170870;
				{
				Data3_g170872.Dummy = In_Dummy3_g170872;
				Data3_g170872.Albedo = In_Albedo3_g170872;
				Data3_g170872.AlbedoRaw = In_AlbedoRaw3_g170872;
				Data3_g170872.NormalTS = In_NormalTS3_g170872;
				Data3_g170872.NormalWS = In_NormalWS3_g170872;
				Data3_g170872.Shader = In_Shader3_g170872;
				Data3_g170872.Emissive= In_Emissive3_g170872;
				Data3_g170872.MultiMask = In_MultiMask3_g170872;
				Data3_g170872.Grayscale = In_Grayscale3_g170872;
				Data3_g170872.Luminosity = In_Luminosity3_g170872;
				Data3_g170872.AlphaClip = In_AlphaClip3_g170872;
				Data3_g170872.AlphaFade = In_AlphaFade3_g170872;
				Data3_g170872.Translucency = In_Translucency3_g170872;
				Data3_g170872.Transmission = In_Transmission3_g170872;
				Data3_g170872.Thickness = In_Thickness3_g170872;
				Data3_g170872.Diffusion = In_Diffusion3_g170872;
				}
				TVEVisualData Data4_g170907 = Data3_g170872;
				float Out_Dummy4_g170907 = 0;
				float3 Out_Albedo4_g170907 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170907 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170907 = float2( 0,0 );
				float3 Out_NormalWS4_g170907 = float3( 0,0,0 );
				float4 Out_Shader4_g170907 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170907 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170907 = 0;
				float Out_Grayscale4_g170907 = 0;
				float Out_Luminosity4_g170907 = 0;
				float Out_AlphaClip4_g170907 = 0;
				float Out_AlphaFade4_g170907 = 0;
				float3 Out_Translucency4_g170907 = float3( 0,0,0 );
				float Out_Transmission4_g170907 = 0;
				float Out_Thickness4_g170907 = 0;
				float Out_Diffusion4_g170907 = 0;
				{
				Out_Dummy4_g170907 = Data4_g170907.Dummy;
				Out_Albedo4_g170907 = Data4_g170907.Albedo;
				Out_AlbedoRaw4_g170907 = Data4_g170907.AlbedoRaw;
				Out_NormalTS4_g170907 = Data4_g170907.NormalTS;
				Out_NormalWS4_g170907 = Data4_g170907.NormalWS;
				Out_Shader4_g170907 = Data4_g170907.Shader;
				Out_Emissive4_g170907= Data4_g170907.Emissive;
				Out_MultiMask4_g170907 = Data4_g170907.MultiMask;
				Out_Grayscale4_g170907 = Data4_g170907.Grayscale;
				Out_Luminosity4_g170907= Data4_g170907.Luminosity;
				Out_AlphaClip4_g170907 = Data4_g170907.AlphaClip;
				Out_AlphaFade4_g170907 = Data4_g170907.AlphaFade;
				Out_Translucency4_g170907 = Data4_g170907.Translucency;
				Out_Transmission4_g170907 = Data4_g170907.Transmission;
				Out_Thickness4_g170907 = Data4_g170907.Thickness;
				Out_Diffusion4_g170907 = Data4_g170907.Diffusion;
				}
				half3 Visual_Albedo127_g170906 = Out_Albedo4_g170907;
				TVEGlobalData Data15_g170912 = Data204_g170496;
				float Out_Dummy15_g170912 = 0;
				float4 Out_CoatParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170912 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170912 = Data15_g170912.Dummy;
				Out_CoatParams15_g170912 = Data15_g170912.CoatParams;
				Out_PaintParams15_g170912 = Data15_g170912.PaintParams;
				Out_GlowParams15_g170912 = Data15_g170912.GlowParams;
				Out_AtmoParams15_g170912= Data15_g170912.AtmoParams;
				Out_FadeParams15_g170912= Data15_g170912.FadeParams;
				Out_FormParams15_g170912 = Data15_g170912.FormParams;
				Out_FlowParams15_g170912 = Data15_g170912.FlowParams;
				}
				half4 Global_AtmoParams516_g170906 = Out_AtmoParams15_g170912;
				float4 temp_output_6_0_g170933 = Global_AtmoParams516_g170906;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170933 = ( temp_output_6_0_g170933 + ( _WetnessElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170933 = temp_output_6_0_g170933;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170906 = staticSwitch14_g170933;
				#else
				float4 staticSwitch663_g170906 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170906 = lerp( float2( 1,1 ) , (( staticSwitch663_g170906 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170906 = lerpResult1121_g170906;
				half Global_Wetness429_g170906 = break1123_g170906.x;
				half Wetness_Value1042_g170906 = ( _WetnessIntensityValue * Global_Wetness429_g170906 );
				TVEModelData Data15_g170918 = Data16_g170483;
				float Out_Dummy15_g170918 = 0;
				float3 Out_PositionWS15_g170918 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170918 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170918 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170918 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170918 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170918 = float3( 0,0,0 );
				float4 Out_VertexData15_g170918 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170918 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170918 = Data15_g170918.Dummy;
				Out_PositionWS15_g170918 = Data15_g170918.PositionWS;
				Out_PositionWO15_g170918 = Data15_g170918.PositionWO;
				Out_PivotWS15_g170918 = Data15_g170918.PivotWS;
				Out_PivotWO15_g170918 = Data15_g170918.PivotWO;
				Out_NormalWS15_g170918 = Data15_g170918.NormalWS;
				Out_ViewDirWS15_g170918 = Data15_g170918.ViewDirWS;
				Out_VertexData15_g170918 = Data15_g170918.VertexData;
				Out_BoundsData15_g170918 = Data15_g170918.BoundsData;
				}
				half4 Model_VertexData1030_g170906 = Out_VertexData15_g170918;
				float4 break1019_g170906 = Model_VertexData1030_g170906;
				float4 break33_g170921 = _wetness_vert_mode;
				float temp_output_30_0_g170921 = ( break1019_g170906.x * break33_g170921.x );
				float temp_output_29_0_g170921 = ( break1019_g170906.y * break33_g170921.y );
				float temp_output_31_0_g170921 = ( break1019_g170906.z * break33_g170921.z );
				float temp_output_28_0_g170921 = ( temp_output_30_0_g170921 + temp_output_29_0_g170921 + temp_output_31_0_g170921 + ( break1019_g170906.w * break33_g170921.w ) );
				float clampResult17_g170920 = clamp( temp_output_28_0_g170921 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170929 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170929 = ( clampResult17_g170920 - temp_output_7_0_g170929 );
				float lerpResult1026_g170906 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170929 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170922 = lerpResult1026_g170906;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170922 = ( temp_output_6_0_g170922 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170922 = temp_output_6_0_g170922;
				#endif
				float temp_output_1025_0_g170906 = staticSwitch14_g170922;
				half Wetness_VertMask1024_g170906 = temp_output_1025_0_g170906;
				float temp_output_1043_0_g170906 = ( Wetness_Value1042_g170906 * Wetness_VertMask1024_g170906 );
				half Wetness_Mask866_g170906 = temp_output_1043_0_g170906;
				float4 break1083_g170906 = Model_VertexData1030_g170906;
				float4 break33_g170924 = _wetness_water_vert_mode;
				float temp_output_30_0_g170924 = ( break1083_g170906.x * break33_g170924.x );
				float temp_output_29_0_g170924 = ( break1083_g170906.y * break33_g170924.y );
				float temp_output_31_0_g170924 = ( break1083_g170906.z * break33_g170924.z );
				float temp_output_28_0_g170924 = ( temp_output_30_0_g170924 + temp_output_29_0_g170924 + temp_output_31_0_g170924 + ( break1083_g170906.w * break33_g170924.w ) );
				float clampResult17_g170923 = clamp( temp_output_28_0_g170924 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170930 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170930 = ( clampResult17_g170923 - temp_output_7_0_g170930 );
				float lerpResult1089_g170906 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170930 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170925 = lerpResult1089_g170906;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170925 = ( temp_output_6_0_g170925 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170925 = temp_output_6_0_g170925;
				#endif
				float temp_output_1091_0_g170906 = staticSwitch14_g170925;
				half Water_VertMask1094_g170906 = temp_output_1091_0_g170906;
				half4 Visual_Masks536_g170906 = Out_Shader4_g170907;
				float lerpResult1013_g170906 = lerp( 1.0 , (Visual_Masks536_g170906).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170906 = lerpResult1013_g170906;
				float clampResult17_g170919 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170906 * Water_VertMask1094_g170906 ) - Water_HeightMask782_g170906 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170932 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170932 = ( clampResult17_g170919 - temp_output_7_0_g170932 );
				half3 Model_NormalWS798_g170906 = Out_NormalWS15_g170918;
				float temp_output_786_0_g170906 = saturate( (Model_NormalWS798_g170906).y );
				half Wetness_ProjMask790_g170906 = temp_output_786_0_g170906;
				half Water_Mask760_g170906 = ( saturate( ( ( temp_output_9_0_g170932 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170906 );
				float3 lerpResult918_g170906 = lerp( Visual_Albedo127_g170906 , ( Visual_Albedo127_g170906 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170906);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170906 = lerpResult918_g170906;
				#else
				float3 staticSwitch946_g170906 = Visual_Albedo127_g170906;
				#endif
				float3 lerpResult768_g170906 = lerp( staticSwitch946_g170906 , ( staticSwitch946_g170906 * staticSwitch946_g170906 ) , _WetnessContrastValue);
				float3 lerpResult651_g170906 = lerp( Visual_Albedo127_g170906 , lerpResult768_g170906 , Wetness_Mask866_g170906);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170906 = lerpResult651_g170906;
				#else
				float3 staticSwitch577_g170906 = Visual_Albedo127_g170906;
				#endif
				half3 Final_Albedo493_g170906 = staticSwitch577_g170906;
				float3 In_Albedo3_g170908 = Final_Albedo493_g170906;
				float3 In_AlbedoRaw3_g170908 = Out_AlbedoRaw4_g170907;
				half2 Visual_Normal535_g170906 = Out_NormalTS4_g170907;
				float lerpResult877_g170906 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170906 * Water_Mask760_g170906 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170906 = ( Visual_Normal535_g170906 * lerpResult877_g170906 );
				#else
				float2 staticSwitch957_g170906 = Visual_Normal535_g170906;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170916) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170916 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170906 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170916 = appendResult924_g170906;
				half4 Coords238_g170916 = temp_output_37_0_g170916;
				half3 Model_PositionWO602_g170906 = Out_PositionWO15_g170918;
				float3 temp_output_279_0_g170916 = Model_PositionWO602_g170906;
				half3 WorldPosition238_g170916 = temp_output_279_0_g170916;
				half4 localSamplePlanar2D238_g170916 = SamplePlanar2D( Texture238_g170916 , Sampler238_g170916 , Coords238_g170916 , WorldPosition238_g170916 );
				float4 temp_output_1010_0_g170906 = localSamplePlanar2D238_g170916;
				half2 Rain_DropsNormal919_g170906 = (temp_output_1010_0_g170906).zw;
				float2 temp_output_903_0_g170906 = (Rain_DropsNormal919_g170906*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170906 = (temp_output_1010_0_g170906).xy;
				float2 lerpResult904_g170906 = lerp( temp_output_903_0_g170906 , (Rain_RingsNormal713_g170906*2.0 + -1.0) , ( Water_Mask760_g170906 * Water_Mask760_g170906 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170906 = lerpResult904_g170906;
				#else
				float2 staticSwitch960_g170906 = temp_output_903_0_g170906;
				#endif
				half2 Rain_Drops1002_g170906 = ( staticSwitch960_g170906 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170906 = Out_PositionWS15_g170918;
				half Global_Rain955_g170906 = break1123_g170906.y;
				half Rain_Value1067_g170906 = Global_Rain955_g170906;
				float4 break1097_g170906 = Model_VertexData1030_g170906;
				float4 break33_g170927 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170927 = ( break1097_g170906.x * break33_g170927.x );
				float temp_output_29_0_g170927 = ( break1097_g170906.y * break33_g170927.y );
				float temp_output_31_0_g170927 = ( break1097_g170906.z * break33_g170927.z );
				float temp_output_28_0_g170927 = ( temp_output_30_0_g170927 + temp_output_29_0_g170927 + temp_output_31_0_g170927 + ( break1097_g170906.w * break33_g170927.w ) );
				float clampResult17_g170926 = clamp( temp_output_28_0_g170927 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170931 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170931 = ( clampResult17_g170926 - temp_output_7_0_g170931 );
				float lerpResult1100_g170906 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170931 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170928 = lerpResult1100_g170906;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170928 = ( temp_output_6_0_g170928 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170928 = temp_output_6_0_g170928;
				#endif
				float temp_output_1101_0_g170906 = staticSwitch14_g170928;
				half Rain_VertMask1108_g170906 = temp_output_1101_0_g170906;
				half Rain_Mask999_g170906 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170906 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170906 * Rain_VertMask1108_g170906 );
				half2 Normal_Planar45_g170915 = ( Rain_Drops1002_g170906 * Rain_Mask999_g170906 * Wetness_ProjMask790_g170906 );
				float2 break71_g170915 = Normal_Planar45_g170915;
				float3 appendResult72_g170915 = (float3(break71_g170915.x , 0.0 , break71_g170915.y));
				half2 Wetness_Normal526_g170906 = (mul( ase_worldToTangent, appendResult72_g170915 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170906 = Wetness_Normal526_g170906;
				#else
				float2 staticSwitch583_g170906 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170906 = ( staticSwitch957_g170906 + staticSwitch583_g170906 );
				#else
				float2 staticSwitch774_g170906 = Visual_Normal535_g170906;
				#endif
				half2 Final_Normal499_g170906 = staticSwitch774_g170906;
				float2 In_NormalTS3_g170908 = Final_Normal499_g170906;
				float3 In_NormalWS3_g170908 = Out_NormalWS4_g170907;
				float4 break658_g170906 = Visual_Masks536_g170906;
				float temp_output_935_0_g170906 = ( Wetness_Mask866_g170906 * _WetnessSmoothnessValue );
				float lerpResult941_g170906 = lerp( temp_output_935_0_g170906 , 2.0 , Water_Mask760_g170906);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170906 = lerpResult941_g170906;
				#else
				float staticSwitch959_g170906 = temp_output_935_0_g170906;
				#endif
				float4 appendResult661_g170906 = (float4(break658_g170906.x , break658_g170906.y , break658_g170906.z , saturate( ( break658_g170906.w + staticSwitch959_g170906 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170906 = appendResult661_g170906;
				#else
				float4 staticSwitch586_g170906 = Visual_Masks536_g170906;
				#endif
				half4 Final_Masks482_g170906 = staticSwitch586_g170906;
				float4 In_Shader3_g170908 = Final_Masks482_g170906;
				float4 In_Emissive3_g170908 = Out_Emissive4_g170907;
				float In_Grayscale3_g170908 = Out_Grayscale4_g170907;
				float In_Luminosity3_g170908 = Out_Luminosity4_g170907;
				float In_MultiMask3_g170908 = Out_MultiMask4_g170907;
				float In_AlphaClip3_g170908 = Out_AlphaClip4_g170907;
				float In_AlphaFade3_g170908 = Out_AlphaFade4_g170907;
				float3 In_Translucency3_g170908 = Out_Translucency4_g170907;
				float In_Transmission3_g170908 = Out_Transmission4_g170907;
				float In_Thickness3_g170908 = Out_Thickness4_g170907;
				float In_Diffusion3_g170908 = Out_Diffusion4_g170907;
				{
				Data3_g170908.Dummy = In_Dummy3_g170908;
				Data3_g170908.Albedo = In_Albedo3_g170908;
				Data3_g170908.AlbedoRaw = In_AlbedoRaw3_g170908;
				Data3_g170908.NormalTS = In_NormalTS3_g170908;
				Data3_g170908.NormalWS = In_NormalWS3_g170908;
				Data3_g170908.Shader = In_Shader3_g170908;
				Data3_g170908.Emissive= In_Emissive3_g170908;
				Data3_g170908.MultiMask = In_MultiMask3_g170908;
				Data3_g170908.Grayscale = In_Grayscale3_g170908;
				Data3_g170908.Luminosity = In_Luminosity3_g170908;
				Data3_g170908.AlphaClip = In_AlphaClip3_g170908;
				Data3_g170908.AlphaFade = In_AlphaFade3_g170908;
				Data3_g170908.Translucency = In_Translucency3_g170908;
				Data3_g170908.Transmission = In_Transmission3_g170908;
				Data3_g170908.Thickness = In_Thickness3_g170908;
				Data3_g170908.Diffusion = In_Diffusion3_g170908;
				}
				TVEVisualData Data4_g170938 = Data3_g170908;
				float Out_Dummy4_g170938 = 0;
				float3 Out_Albedo4_g170938 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170938 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170938 = float2( 0,0 );
				float3 Out_NormalWS4_g170938 = float3( 0,0,0 );
				float4 Out_Shader4_g170938 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170938 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170938 = 0;
				float Out_Grayscale4_g170938 = 0;
				float Out_Luminosity4_g170938 = 0;
				float Out_AlphaClip4_g170938 = 0;
				float Out_AlphaFade4_g170938 = 0;
				float3 Out_Translucency4_g170938 = float3( 0,0,0 );
				float Out_Transmission4_g170938 = 0;
				float Out_Thickness4_g170938 = 0;
				float Out_Diffusion4_g170938 = 0;
				{
				Out_Dummy4_g170938 = Data4_g170938.Dummy;
				Out_Albedo4_g170938 = Data4_g170938.Albedo;
				Out_AlbedoRaw4_g170938 = Data4_g170938.AlbedoRaw;
				Out_NormalTS4_g170938 = Data4_g170938.NormalTS;
				Out_NormalWS4_g170938 = Data4_g170938.NormalWS;
				Out_Shader4_g170938 = Data4_g170938.Shader;
				Out_Emissive4_g170938= Data4_g170938.Emissive;
				Out_MultiMask4_g170938 = Data4_g170938.MultiMask;
				Out_Grayscale4_g170938 = Data4_g170938.Grayscale;
				Out_Luminosity4_g170938= Data4_g170938.Luminosity;
				Out_AlphaClip4_g170938 = Data4_g170938.AlphaClip;
				Out_AlphaFade4_g170938 = Data4_g170938.AlphaFade;
				Out_Translucency4_g170938 = Data4_g170938.Translucency;
				Out_Transmission4_g170938 = Data4_g170938.Transmission;
				Out_Thickness4_g170938 = Data4_g170938.Thickness;
				Out_Diffusion4_g170938 = Data4_g170938.Diffusion;
				}
				float3 In_Albedo3_g170936 = Out_Albedo4_g170938;
				float3 In_AlbedoRaw3_g170936 = Out_AlbedoRaw4_g170938;
				float2 In_NormalTS3_g170936 = Out_NormalTS4_g170938;
				float3 In_NormalWS3_g170936 = Out_NormalWS4_g170938;
				float4 In_Shader3_g170936 = Out_Shader4_g170938;
				float4 In_Emissive3_g170936 = Out_Emissive4_g170938;
				float In_Grayscale3_g170936 = Out_Grayscale4_g170938;
				float In_Luminosity3_g170936 = Out_Luminosity4_g170938;
				float temp_output_836_11_g170935 = Out_MultiMask4_g170938;
				float In_MultiMask3_g170936 = temp_output_836_11_g170935;
				half Visual_AlphaClip667_g170935 = Out_AlphaClip4_g170938;
				TVEGlobalData Data15_g170937 = Data204_g170496;
				float Out_Dummy15_g170937 = 0;
				float4 Out_CoatParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170937 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170937 = Data15_g170937.Dummy;
				Out_CoatParams15_g170937 = Data15_g170937.CoatParams;
				Out_PaintParams15_g170937 = Data15_g170937.PaintParams;
				Out_GlowParams15_g170937 = Data15_g170937.GlowParams;
				Out_AtmoParams15_g170937= Data15_g170937.AtmoParams;
				Out_FadeParams15_g170937= Data15_g170937.FadeParams;
				Out_FormParams15_g170937 = Data15_g170937.FormParams;
				Out_FlowParams15_g170937 = Data15_g170937.FlowParams;
				}
				half4 Global_FadeParams516_g170935 = Out_FadeParams15_g170937;
				float temp_output_6_0_g170948 = saturate( (Global_FadeParams516_g170935).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170948 = ( temp_output_6_0_g170948 + ( _CutoutElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170948 = temp_output_6_0_g170948;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170935 = staticSwitch14_g170948;
				#else
				float staticSwitch663_g170935 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170935 = lerp( 1.0 , ( staticSwitch663_g170935 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170935 = lerpResult843_g170935;
				float lerpResult811_g170935 = lerp( 1.0 , Visual_AlphaClip667_g170935 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170935 = lerpResult811_g170935;
				TVEModelData Data15_g170939 = Data16_g170483;
				float Out_Dummy15_g170939 = 0;
				float3 Out_PositionWS15_g170939 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170939 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170939 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170939 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170939 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170939 = float3( 0,0,0 );
				float4 Out_VertexData15_g170939 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170939 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170939 = Data15_g170939.Dummy;
				Out_PositionWS15_g170939 = Data15_g170939.PositionWS;
				Out_PositionWO15_g170939 = Data15_g170939.PositionWO;
				Out_PivotWS15_g170939 = Data15_g170939.PivotWS;
				Out_PivotWO15_g170939 = Data15_g170939.PivotWO;
				Out_NormalWS15_g170939 = Data15_g170939.NormalWS;
				Out_ViewDirWS15_g170939 = Data15_g170939.ViewDirWS;
				Out_VertexData15_g170939 = Data15_g170939.VertexData;
				Out_BoundsData15_g170939 = Data15_g170939.BoundsData;
				}
				half3 Model_PositionWO602_g170935 = Out_PositionWO15_g170939;
				float4 tex3DNode60_g170942 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170935 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170935 = lerp( 1.0 , tex3DNode60_g170942.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170935 = lerpResult673_g170935;
				half4 Model_VertexMasks752_g170935 = Out_VertexData15_g170939;
				float4 break755_g170935 = Model_VertexMasks752_g170935;
				float4 break33_g170940 = _cutout_vert_mode;
				float temp_output_30_0_g170940 = ( break755_g170935.x * break33_g170940.x );
				float temp_output_29_0_g170940 = ( break755_g170935.y * break33_g170940.y );
				float temp_output_31_0_g170940 = ( break755_g170935.z * break33_g170940.z );
				float temp_output_28_0_g170940 = ( temp_output_30_0_g170940 + temp_output_29_0_g170940 + temp_output_31_0_g170940 + ( break755_g170935.w * break33_g170940.w ) );
				float clampResult17_g170941 = clamp( temp_output_28_0_g170940 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170947 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170947 = ( clampResult17_g170941 - temp_output_7_0_g170947 );
				float lerpResult820_g170935 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170947 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170944 = lerpResult820_g170935;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170944 = ( temp_output_6_0_g170944 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170944 = temp_output_6_0_g170944;
				#endif
				float temp_output_801_0_g170935 = staticSwitch14_g170944;
				half Local_VertMask766_g170935 = temp_output_801_0_g170935;
				half Visual_MultiMask671_g170935 = temp_output_836_11_g170935;
				float lerpResult683_g170935 = lerp( 1.0 , Visual_MultiMask671_g170935 , _CutoutMultiValue);
				half Local_MultiMask685_g170935 = lerpResult683_g170935;
				float lerpResult728_g170935 = lerp( Visual_AlphaClip667_g170935 , min( Visual_AlphaClip667_g170935 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170935 ) - ( Local_AlphaMask814_g170935 * Local_NoiseMask678_g170935 * Local_VertMask766_g170935 ) ) ) ) , Local_MultiMask685_g170935);
				half Local_AlphaClip784_g170935 = lerpResult728_g170935;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170935 = Local_AlphaClip784_g170935;
				#else
				float staticSwitch577_g170935 = Visual_AlphaClip667_g170935;
				#endif
				half Final_AlphaClip795_g170935 = staticSwitch577_g170935;
				float In_AlphaClip3_g170936 = Final_AlphaClip795_g170935;
				float In_AlphaFade3_g170936 = Out_AlphaFade4_g170938;
				float3 In_Translucency3_g170936 = Out_Translucency4_g170938;
				float In_Transmission3_g170936 = Out_Transmission4_g170938;
				float In_Thickness3_g170936 = Out_Thickness4_g170938;
				float In_Diffusion3_g170936 = Out_Diffusion4_g170938;
				{
				Data3_g170936.Dummy = In_Dummy3_g170936;
				Data3_g170936.Albedo = In_Albedo3_g170936;
				Data3_g170936.AlbedoRaw = In_AlbedoRaw3_g170936;
				Data3_g170936.NormalTS = In_NormalTS3_g170936;
				Data3_g170936.NormalWS = In_NormalWS3_g170936;
				Data3_g170936.Shader = In_Shader3_g170936;
				Data3_g170936.Emissive= In_Emissive3_g170936;
				Data3_g170936.MultiMask = In_MultiMask3_g170936;
				Data3_g170936.Grayscale = In_Grayscale3_g170936;
				Data3_g170936.Luminosity = In_Luminosity3_g170936;
				Data3_g170936.AlphaClip = In_AlphaClip3_g170936;
				Data3_g170936.AlphaFade = In_AlphaFade3_g170936;
				Data3_g170936.Translucency = In_Translucency3_g170936;
				Data3_g170936.Transmission = In_Transmission3_g170936;
				Data3_g170936.Thickness = In_Thickness3_g170936;
				Data3_g170936.Diffusion = In_Diffusion3_g170936;
				}
				TVEVisualData Data4_g170952 = Data3_g170936;
				float Out_Dummy4_g170952 = 0;
				float3 Out_Albedo4_g170952 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170952 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170952 = float2( 0,0 );
				float3 Out_NormalWS4_g170952 = float3( 0,0,0 );
				float4 Out_Shader4_g170952 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170952 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170952 = 0;
				float Out_Grayscale4_g170952 = 0;
				float Out_Luminosity4_g170952 = 0;
				float Out_AlphaClip4_g170952 = 0;
				float Out_AlphaFade4_g170952 = 0;
				float3 Out_Translucency4_g170952 = float3( 0,0,0 );
				float Out_Transmission4_g170952 = 0;
				float Out_Thickness4_g170952 = 0;
				float Out_Diffusion4_g170952 = 0;
				{
				Out_Dummy4_g170952 = Data4_g170952.Dummy;
				Out_Albedo4_g170952 = Data4_g170952.Albedo;
				Out_AlbedoRaw4_g170952 = Data4_g170952.AlbedoRaw;
				Out_NormalTS4_g170952 = Data4_g170952.NormalTS;
				Out_NormalWS4_g170952 = Data4_g170952.NormalWS;
				Out_Shader4_g170952 = Data4_g170952.Shader;
				Out_Emissive4_g170952= Data4_g170952.Emissive;
				Out_MultiMask4_g170952 = Data4_g170952.MultiMask;
				Out_Grayscale4_g170952 = Data4_g170952.Grayscale;
				Out_Luminosity4_g170952= Data4_g170952.Luminosity;
				Out_AlphaClip4_g170952 = Data4_g170952.AlphaClip;
				Out_AlphaFade4_g170952 = Data4_g170952.AlphaFade;
				Out_Translucency4_g170952 = Data4_g170952.Translucency;
				Out_Transmission4_g170952 = Data4_g170952.Transmission;
				Out_Thickness4_g170952 = Data4_g170952.Thickness;
				Out_Diffusion4_g170952 = Data4_g170952.Diffusion;
				}
				float3 In_Albedo3_g170953 = Out_Albedo4_g170952;
				float3 In_AlbedoRaw3_g170953 = Out_AlbedoRaw4_g170952;
				float2 In_NormalTS3_g170953 = Out_NormalTS4_g170952;
				float3 In_NormalWS3_g170953 = Out_NormalWS4_g170952;
				float4 In_Shader3_g170953 = Out_Shader4_g170952;
				float4 In_Emissive3_g170953 = Out_Emissive4_g170952;
				float In_Grayscale3_g170953 = Out_Grayscale4_g170952;
				float In_Luminosity3_g170953 = Out_Luminosity4_g170952;
				float temp_output_821_11_g170950 = Out_MultiMask4_g170952;
				float In_MultiMask3_g170953 = temp_output_821_11_g170950;
				half Visual_AlphaClip754_g170950 = Out_AlphaClip4_g170952;
				half Dither_Constant768_g170950 = _DitherConstantValue;
				half Dither_BiasProximity881_g170950 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170950 = TVE_DitherParams.w;
				float lerpResult884_g170950 = lerp( 1.0 , Dither_BiasProximity881_g170950 , Dither_BiasEnabled883_g170950);
				float temp_output_7_0_g170961 = _DitherProximityMaxValue;
				float temp_output_9_0_g170961 = ( ( distance( worldPos , _WorldSpaceCameraPos ) * lerpResult884_g170950 ) - temp_output_7_0_g170961 );
				half Dither_Proximity767_g170950 = ( saturate( ( ( temp_output_9_0_g170961 / ( _DitherProximityMinValue - temp_output_7_0_g170961 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170954 = Data16_g170483;
				float Out_Dummy15_g170954 = 0;
				float3 Out_PositionWS15_g170954 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170954 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170954 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170954 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170954 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170954 = float3( 0,0,0 );
				float4 Out_VertexData15_g170954 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170954 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170954 = Data15_g170954.Dummy;
				Out_PositionWS15_g170954 = Data15_g170954.PositionWS;
				Out_PositionWO15_g170954 = Data15_g170954.PositionWO;
				Out_PivotWS15_g170954 = Data15_g170954.PivotWS;
				Out_PivotWO15_g170954 = Data15_g170954.PivotWO;
				Out_NormalWS15_g170954 = Data15_g170954.NormalWS;
				Out_ViewDirWS15_g170954 = Data15_g170954.ViewDirWS;
				Out_VertexData15_g170954 = Data15_g170954.VertexData;
				Out_BoundsData15_g170954 = Data15_g170954.BoundsData;
				}
				half3 Model_PositionWS776_g170950 = Out_PositionWS15_g170954;
				half Dither_BiasDistance882_g170950 = TVE_DitherParams.z;
				float lerpResult888_g170950 = lerp( 1.0 , Dither_BiasDistance882_g170950 , Dither_BiasEnabled883_g170950);
				float temp_output_7_0_g170962 = _DitherDistanceMinValue;
				float temp_output_9_0_g170962 = ( ( distance( Model_PositionWS776_g170950 , _WorldSpaceCameraPos ) * lerpResult888_g170950 ) - temp_output_7_0_g170962 );
				half Dither_Distance856_g170950 = ( saturate( ( ( temp_output_9_0_g170962 / ( _DitherDistanceMaxValue - temp_output_7_0_g170962 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170950 = Out_ViewDirWS15_g170954;
				float3 normalizeResult792_g170950 = normalize( cross( ddy( worldPos ) , ddx( worldPos ) ) );
				float dotResult778_g170950 = dot( Model_ViewDirWS845_g170950 , normalizeResult792_g170950 );
				half Dither_Glancing784_g170950 = ( saturate( ( ( 1.0 - abs( dotResult778_g170950 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170950 = max( max( max( Dither_Constant768_g170950 , Dither_Proximity767_g170950 ) , Dither_Distance856_g170950 ) , Dither_Glancing784_g170950 );
				half3 Model_PositionWO602_g170950 = Out_PositionWO15_g170954;
				float4 tex3DNode60_g170957 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170950 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170950 = tex3DNode60_g170957.r;
				half Local_MaskNoise678_g170950 = temp_output_809_0_g170950;
				half Visual_MultiMask671_g170950 = temp_output_821_11_g170950;
				float lerpResult683_g170950 = lerp( 1.0 , Visual_MultiMask671_g170950 , _DitherMultiValue);
				half Local_MaskMulti685_g170950 = lerpResult683_g170950;
				half Custom_Mask826_g170950 = 1.0;
				float lerpResult728_g170950 = lerp( Visual_AlphaClip754_g170950 , min( Visual_AlphaClip754_g170950 , ( -0.001 - ( Dither_Value429_g170950 - Local_MaskNoise678_g170950 ) ) ) , ( Local_MaskMulti685_g170950 * Custom_Mask826_g170950 ));
				half Local_AlphaClip834_g170950 = lerpResult728_g170950;
				#ifdef TVE_DITHER
				float staticSwitch577_g170950 = Local_AlphaClip834_g170950;
				#else
				float staticSwitch577_g170950 = Visual_AlphaClip754_g170950;
				#endif
				half Final_AlphaClip493_g170950 = staticSwitch577_g170950;
				float In_AlphaClip3_g170953 = Final_AlphaClip493_g170950;
				float In_AlphaFade3_g170953 = Out_AlphaFade4_g170952;
				float3 In_Translucency3_g170953 = Out_Translucency4_g170952;
				float In_Transmission3_g170953 = Out_Transmission4_g170952;
				float In_Thickness3_g170953 = Out_Thickness4_g170952;
				float In_Diffusion3_g170953 = Out_Diffusion4_g170952;
				{
				Data3_g170953.Dummy = In_Dummy3_g170953;
				Data3_g170953.Albedo = In_Albedo3_g170953;
				Data3_g170953.AlbedoRaw = In_AlbedoRaw3_g170953;
				Data3_g170953.NormalTS = In_NormalTS3_g170953;
				Data3_g170953.NormalWS = In_NormalWS3_g170953;
				Data3_g170953.Shader = In_Shader3_g170953;
				Data3_g170953.Emissive= In_Emissive3_g170953;
				Data3_g170953.MultiMask = In_MultiMask3_g170953;
				Data3_g170953.Grayscale = In_Grayscale3_g170953;
				Data3_g170953.Luminosity = In_Luminosity3_g170953;
				Data3_g170953.AlphaClip = In_AlphaClip3_g170953;
				Data3_g170953.AlphaFade = In_AlphaFade3_g170953;
				Data3_g170953.Translucency = In_Translucency3_g170953;
				Data3_g170953.Transmission = In_Transmission3_g170953;
				Data3_g170953.Thickness = In_Thickness3_g170953;
				Data3_g170953.Diffusion = In_Diffusion3_g170953;
				}
				TVEVisualData Data4_g170975 = Data3_g170953;
				float Out_Dummy4_g170975 = 0;
				float3 Out_Albedo4_g170975 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170975 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170975 = float2( 0,0 );
				float3 Out_NormalWS4_g170975 = float3( 0,0,0 );
				float4 Out_Shader4_g170975 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170975 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170975 = 0;
				float Out_Grayscale4_g170975 = 0;
				float Out_Luminosity4_g170975 = 0;
				float Out_AlphaClip4_g170975 = 0;
				float Out_AlphaFade4_g170975 = 0;
				float3 Out_Translucency4_g170975 = float3( 0,0,0 );
				float Out_Transmission4_g170975 = 0;
				float Out_Thickness4_g170975 = 0;
				float Out_Diffusion4_g170975 = 0;
				{
				Out_Dummy4_g170975 = Data4_g170975.Dummy;
				Out_Albedo4_g170975 = Data4_g170975.Albedo;
				Out_AlbedoRaw4_g170975 = Data4_g170975.AlbedoRaw;
				Out_NormalTS4_g170975 = Data4_g170975.NormalTS;
				Out_NormalWS4_g170975 = Data4_g170975.NormalWS;
				Out_Shader4_g170975 = Data4_g170975.Shader;
				Out_Emissive4_g170975= Data4_g170975.Emissive;
				Out_MultiMask4_g170975 = Data4_g170975.MultiMask;
				Out_Grayscale4_g170975 = Data4_g170975.Grayscale;
				Out_Luminosity4_g170975= Data4_g170975.Luminosity;
				Out_AlphaClip4_g170975 = Data4_g170975.AlphaClip;
				Out_AlphaFade4_g170975 = Data4_g170975.AlphaFade;
				Out_Translucency4_g170975 = Data4_g170975.Translucency;
				Out_Transmission4_g170975 = Data4_g170975.Transmission;
				Out_Thickness4_g170975 = Data4_g170975.Thickness;
				Out_Diffusion4_g170975 = Data4_g170975.Diffusion;
				}
				float3 temp_output_297_0_g170971 = Out_Albedo4_g170975;
				float3 In_Albedo3_g170976 = temp_output_297_0_g170971;
				float3 temp_output_297_23_g170971 = Out_AlbedoRaw4_g170975;
				float3 In_AlbedoRaw3_g170976 = temp_output_297_23_g170971;
				float2 In_NormalTS3_g170976 = Out_NormalTS4_g170975;
				float3 In_NormalWS3_g170976 = Out_NormalWS4_g170975;
				float4 In_Shader3_g170976 = Out_Shader4_g170975;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170971 = Out_Emissive4_g170975;
				TVEModelData Data15_g170977 = Data16_g170483;
				float Out_Dummy15_g170977 = 0;
				float3 Out_PositionWS15_g170977 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170977 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170977 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170977 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170977 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170977 = float3( 0,0,0 );
				float4 Out_VertexData15_g170977 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170977 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170977 = Data15_g170977.Dummy;
				Out_PositionWS15_g170977 = Data15_g170977.PositionWS;
				Out_PositionWO15_g170977 = Data15_g170977.PositionWO;
				Out_PivotWS15_g170977 = Data15_g170977.PivotWS;
				Out_PivotWO15_g170977 = Data15_g170977.PivotWO;
				Out_NormalWS15_g170977 = Data15_g170977.NormalWS;
				Out_ViewDirWS15_g170977 = Data15_g170977.ViewDirWS;
				Out_VertexData15_g170977 = Data15_g170977.VertexData;
				Out_BoundsData15_g170977 = Data15_g170977.BoundsData;
				}
				half4 Model_VertexMasks216_g170971 = Out_VertexData15_g170977;
				float4 break251_g170971 = Model_VertexMasks216_g170971;
				float4 break33_g170982 = _emissive_vert_mode;
				float temp_output_30_0_g170982 = ( break251_g170971.x * break33_g170982.x );
				float temp_output_29_0_g170982 = ( break251_g170971.y * break33_g170982.y );
				float temp_output_31_0_g170982 = ( break251_g170971.z * break33_g170982.z );
				float temp_output_28_0_g170982 = ( temp_output_30_0_g170982 + temp_output_29_0_g170982 + temp_output_31_0_g170982 + ( break251_g170971.w * break33_g170982.w ) );
				float clampResult17_g170981 = clamp( temp_output_28_0_g170982 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170985 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170985 = ( clampResult17_g170981 - temp_output_7_0_g170985 );
				float lerpResult303_g170971 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170985 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170984 = lerpResult303_g170971;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170984 = ( temp_output_6_0_g170984 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170984 = temp_output_6_0_g170984;
				#endif
				half Emissive_MeshMask221_g170971 = staticSwitch14_g170984;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170973) = _EmissiveMaskTex;
				SamplerState Sampler276_g170973 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170974 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170974 = ( temp_output_6_0_g170974 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170974 = temp_output_6_0_g170974;
				#endif
				half4 Emissive_Coords167_g170971 = staticSwitch14_g170974;
				float4 temp_output_37_0_g170973 = Emissive_Coords167_g170971;
				half4 Coords276_g170973 = temp_output_37_0_g170973;
				half2 TexCoord276_g170973 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170973 = SampleMain( Texture276_g170973 , Sampler276_g170973 , Coords276_g170973 , TexCoord276_g170973 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170973) = _EmissiveMaskTex;
				SamplerState Sampler275_g170973 = sampler_Linear_Repeat;
				half4 Coords275_g170973 = temp_output_37_0_g170973;
				half2 TexCoord275_g170973 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170973 = SampleExtra( Texture275_g170973 , Sampler275_g170973 , Coords275_g170973 , TexCoord275_g170973 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170971 = localSampleMain276_g170973;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170971 = localSampleExtra275_g170973;
				#else
				float4 staticSwitch176_g170971 = localSampleMain276_g170973;
				#endif
				half4 Emissive_MaskTex201_g170971 = staticSwitch176_g170971;
				float clampResult17_g170983 = clamp( (Emissive_MaskTex201_g170971).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170986 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170986 = ( clampResult17_g170983 - temp_output_7_0_g170986 );
				float lerpResult302_g170971 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170986 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170971 = lerpResult302_g170971;
				float temp_output_279_0_g170971 = ( Emissive_MeshMask221_g170971 * Emissive_Mask103_g170971 );
				float3 appendResult293_g170971 = (float3(temp_output_279_0_g170971 , temp_output_279_0_g170971 , temp_output_279_0_g170971));
				half3 Local_EmissiveColor278_g170971 = appendResult293_g170971;
				float3 temp_output_316_0_g170971 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170972 = Data204_g170496;
				float Out_Dummy15_g170972 = 0;
				float4 Out_CoatParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170972 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170972 = Data15_g170972.Dummy;
				Out_CoatParams15_g170972 = Data15_g170972.CoatParams;
				Out_PaintParams15_g170972 = Data15_g170972.PaintParams;
				Out_GlowParams15_g170972 = Data15_g170972.GlowParams;
				Out_AtmoParams15_g170972= Data15_g170972.AtmoParams;
				Out_FadeParams15_g170972= Data15_g170972.FadeParams;
				Out_FormParams15_g170972 = Data15_g170972.FormParams;
				Out_FlowParams15_g170972 = Data15_g170972.FlowParams;
				}
				half4 Global_GlowParams179_g170971 = Out_GlowParams15_g170972;
				float3 temp_output_6_0_g170979 = (Global_GlowParams179_g170971).xyz;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170979 = ( temp_output_6_0_g170979 + ( _EmissiveElementMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170979 = temp_output_6_0_g170979;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170971 = staticSwitch14_g170979;
				#else
				float3 staticSwitch228_g170971 = temp_output_316_0_g170971;
				#endif
				float3 lerpResult299_g170971 = lerp( float3( 1,1,1 ) , staticSwitch228_g170971 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170971 = lerpResult299_g170971;
				half3 Visual_AlbedoRaw306_g170971 = temp_output_297_23_g170971;
				float3 lerpResult307_g170971 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170971 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170971 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170971 * lerpResult307_g170971 );
				half3 Emissive_Blend260_g170971 = ( ( (Visual_Emissive255_g170971).xyz * Local_EmissiveColor278_g170971 ) * Local_EmissiveValue88_g170971 );
				float3 temp_output_3_0_g170978 = Emissive_Blend260_g170971;
				float temp_output_15_0_g170978 = _emissive_power_value;
				float3 temp_output_23_0_g170978 = ( temp_output_3_0_g170978 * temp_output_15_0_g170978 );
				half Local_EmissiveMask294_g170971 = temp_output_279_0_g170971;
				float4 appendResult295_g170971 = (float4(temp_output_23_0_g170978 , Local_EmissiveMask294_g170971));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170971 = appendResult295_g170971;
				#else
				float4 staticSwitch129_g170971 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170971 = staticSwitch129_g170971;
				float4 In_Emissive3_g170976 = Final_Emissive184_g170971;
				float In_Grayscale3_g170976 = Out_Grayscale4_g170975;
				float In_Luminosity3_g170976 = Out_Luminosity4_g170975;
				float temp_output_297_11_g170971 = Out_MultiMask4_g170975;
				float In_MultiMask3_g170976 = temp_output_297_11_g170971;
				float In_AlphaClip3_g170976 = Out_AlphaClip4_g170975;
				float In_AlphaFade3_g170976 = Out_AlphaFade4_g170975;
				float3 In_Translucency3_g170976 = Out_Translucency4_g170975;
				float In_Transmission3_g170976 = Out_Transmission4_g170975;
				float In_Thickness3_g170976 = Out_Thickness4_g170975;
				float In_Diffusion3_g170976 = Out_Diffusion4_g170975;
				{
				Data3_g170976.Dummy = In_Dummy3_g170976;
				Data3_g170976.Albedo = In_Albedo3_g170976;
				Data3_g170976.AlbedoRaw = In_AlbedoRaw3_g170976;
				Data3_g170976.NormalTS = In_NormalTS3_g170976;
				Data3_g170976.NormalWS = In_NormalWS3_g170976;
				Data3_g170976.Shader = In_Shader3_g170976;
				Data3_g170976.Emissive= In_Emissive3_g170976;
				Data3_g170976.MultiMask = In_MultiMask3_g170976;
				Data3_g170976.Grayscale = In_Grayscale3_g170976;
				Data3_g170976.Luminosity = In_Luminosity3_g170976;
				Data3_g170976.AlphaClip = In_AlphaClip3_g170976;
				Data3_g170976.AlphaFade = In_AlphaFade3_g170976;
				Data3_g170976.Translucency = In_Translucency3_g170976;
				Data3_g170976.Transmission = In_Transmission3_g170976;
				Data3_g170976.Thickness = In_Thickness3_g170976;
				Data3_g170976.Diffusion = In_Diffusion3_g170976;
				}
				TVEVisualData Data4_g171004 = Data3_g170976;
				float Out_Dummy4_g171004 = 0;
				float3 Out_Albedo4_g171004 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g171004 = float3( 0,0,0 );
				float2 Out_NormalTS4_g171004 = float2( 0,0 );
				float3 Out_NormalWS4_g171004 = float3( 0,0,0 );
				float4 Out_Shader4_g171004 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g171004 = float4( 0,0,0,0 );
				float Out_MultiMask4_g171004 = 0;
				float Out_Grayscale4_g171004 = 0;
				float Out_Luminosity4_g171004 = 0;
				float Out_AlphaClip4_g171004 = 0;
				float Out_AlphaFade4_g171004 = 0;
				float3 Out_Translucency4_g171004 = float3( 0,0,0 );
				float Out_Transmission4_g171004 = 0;
				float Out_Thickness4_g171004 = 0;
				float Out_Diffusion4_g171004 = 0;
				{
				Out_Dummy4_g171004 = Data4_g171004.Dummy;
				Out_Albedo4_g171004 = Data4_g171004.Albedo;
				Out_AlbedoRaw4_g171004 = Data4_g171004.AlbedoRaw;
				Out_NormalTS4_g171004 = Data4_g171004.NormalTS;
				Out_NormalWS4_g171004 = Data4_g171004.NormalWS;
				Out_Shader4_g171004 = Data4_g171004.Shader;
				Out_Emissive4_g171004= Data4_g171004.Emissive;
				Out_MultiMask4_g171004 = Data4_g171004.MultiMask;
				Out_Grayscale4_g171004 = Data4_g171004.Grayscale;
				Out_Luminosity4_g171004= Data4_g171004.Luminosity;
				Out_AlphaClip4_g171004 = Data4_g171004.AlphaClip;
				Out_AlphaFade4_g171004 = Data4_g171004.AlphaFade;
				Out_Translucency4_g171004 = Data4_g171004.Translucency;
				Out_Transmission4_g171004 = Data4_g171004.Transmission;
				Out_Thickness4_g171004 = Data4_g171004.Thickness;
				Out_Diffusion4_g171004 = Data4_g171004.Diffusion;
				}
				half3 Visual_Albedo199_g171003 = Out_Albedo4_g171004;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g171003 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g171003 );
				half Visual_Transmission138_g171003 = Out_Transmission4_g171004;
				half Subsurface_Value268_g171003 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g171006 = Data204_g170496;
				float Out_Dummy15_g171006 = 0;
				float4 Out_CoatParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g171006 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g171006 = Data15_g171006.Dummy;
				Out_CoatParams15_g171006 = Data15_g171006.CoatParams;
				Out_PaintParams15_g171006 = Data15_g171006.PaintParams;
				Out_GlowParams15_g171006 = Data15_g171006.GlowParams;
				Out_AtmoParams15_g171006= Data15_g171006.AtmoParams;
				Out_FadeParams15_g171006= Data15_g171006.FadeParams;
				Out_FormParams15_g171006 = Data15_g171006.FormParams;
				Out_FlowParams15_g171006 = Data15_g171006.FlowParams;
				}
				half4 Global_GlowParams373_g171003 = Out_GlowParams15_g171006;
				float temp_output_6_0_g171009 = saturate( (Global_GlowParams373_g171003).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g171009 = ( temp_output_6_0_g171009 + ( _SubsurfaceElementMode * 0.0 ) );
				#else
				float staticSwitch14_g171009 = temp_output_6_0_g171009;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g171003 = staticSwitch14_g171009;
				#else
				float staticSwitch367_g171003 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g171003 = lerp( 1.0 , staticSwitch367_g171003 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g171003 = lerpResult403_g171003;
				float temp_output_301_11_g171003 = Out_MultiMask4_g171004;
				half Visual_MultiMask292_g171003 = temp_output_301_11_g171003;
				float lerpResult293_g171003 = lerp( 1.0 , Visual_MultiMask292_g171003 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g171003 = lerpResult293_g171003;
				half Custom_Mask363_g171003 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g171003 = ( Visual_Transmission138_g171003 * Subsurface_Value268_g171003 * Subsurface_GlobalMask369_g171003 * Subsurface_MultiMask296_g171003 * Custom_Mask363_g171003 );
				#else
				float staticSwitch345_g171003 = 0.0;
				#endif
				half Final_Transmission269_g171003 = staticSwitch345_g171003;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g171003 = ( Subsurface_Color264_g171003 * Final_Transmission269_g171003 * 10.0 );
				#else
				float3 staticSwitch348_g171003 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g171003 = staticSwitch348_g171003;
				TVEModelData Data15_g171007 = Data16_g170483;
				float Out_Dummy15_g171007 = 0;
				float3 Out_PositionWS15_g171007 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171007 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171007 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171007 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171007 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g171007 = float3( 0,0,0 );
				float4 Out_VertexData15_g171007 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171007 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g171007 = Data15_g171007.Dummy;
				Out_PositionWS15_g171007 = Data15_g171007.PositionWS;
				Out_PositionWO15_g171007 = Data15_g171007.PositionWO;
				Out_PivotWS15_g171007 = Data15_g171007.PivotWS;
				Out_PivotWO15_g171007 = Data15_g171007.PivotWO;
				Out_NormalWS15_g171007 = Data15_g171007.NormalWS;
				Out_ViewDirWS15_g171007 = Data15_g171007.ViewDirWS;
				Out_VertexData15_g171007 = Data15_g171007.VertexData;
				Out_BoundsData15_g171007 = Data15_g171007.BoundsData;
				}
				half3 Model_ViewDirWS392_g171003 = Out_ViewDirWS15_g171007;
				float dotResult324_g171003 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g171003 );
				float saferPower323_g171003 = abs( saturate( dotResult324_g171003 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g171003 = 0.0;
				#else
				float staticSwitch330_g171003 = ( pow( saferPower323_g171003 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g171003 = staticSwitch330_g171003;
				float3 temp_output_6_0_g171008 = ( Final_Translucency254_g171003 * Mask_Subsurface_View320_g171003 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g171008 = ( temp_output_6_0_g171008 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g171008 = temp_output_6_0_g171008;
				#endif
				half3 Subsurface_Approximation333_g171003 = staticSwitch14_g171008;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g171003 = ( Visual_Albedo199_g171003 + Subsurface_Approximation333_g171003 );
				#else
				float3 staticSwitch353_g171003 = Visual_Albedo199_g171003;
				#endif
				half3 Final_Albedo312_g171003 = staticSwitch353_g171003;
				float3 In_Albedo3_g171005 = Final_Albedo312_g171003;
				float3 In_AlbedoRaw3_g171005 = Out_AlbedoRaw4_g171004;
				float2 In_NormalTS3_g171005 = Out_NormalTS4_g171004;
				float3 In_NormalWS3_g171005 = Out_NormalWS4_g171004;
				float4 In_Shader3_g171005 = Out_Shader4_g171004;
				float4 In_Emissive3_g171005 = Out_Emissive4_g171004;
				float In_Grayscale3_g171005 = Out_Grayscale4_g171004;
				float In_Luminosity3_g171005 = Out_Luminosity4_g171004;
				float In_MultiMask3_g171005 = temp_output_301_11_g171003;
				float In_AlphaClip3_g171005 = Out_AlphaClip4_g171004;
				float In_AlphaFade3_g171005 = Out_AlphaFade4_g171004;
				float3 In_Translucency3_g171005 = Final_Translucency254_g171003;
				float In_Transmission3_g171005 = Final_Transmission269_g171003;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g171003 = 0.0;
				#else
				float staticSwitch351_g171003 = 1.0;
				#endif
				half Final_Thickness275_g171003 = staticSwitch351_g171003;
				float In_Thickness3_g171005 = Final_Thickness275_g171003;
				float Final_Diffusion340_g171003 = _SubsurfaceDiffusion;
				float In_Diffusion3_g171005 = Final_Diffusion340_g171003;
				{
				Data3_g171005.Dummy = In_Dummy3_g171005;
				Data3_g171005.Albedo = In_Albedo3_g171005;
				Data3_g171005.AlbedoRaw = In_AlbedoRaw3_g171005;
				Data3_g171005.NormalTS = In_NormalTS3_g171005;
				Data3_g171005.NormalWS = In_NormalWS3_g171005;
				Data3_g171005.Shader = In_Shader3_g171005;
				Data3_g171005.Emissive= In_Emissive3_g171005;
				Data3_g171005.MultiMask = In_MultiMask3_g171005;
				Data3_g171005.Grayscale = In_Grayscale3_g171005;
				Data3_g171005.Luminosity = In_Luminosity3_g171005;
				Data3_g171005.AlphaClip = In_AlphaClip3_g171005;
				Data3_g171005.AlphaFade = In_AlphaFade3_g171005;
				Data3_g171005.Translucency = In_Translucency3_g171005;
				Data3_g171005.Transmission = In_Transmission3_g171005;
				Data3_g171005.Thickness = In_Thickness3_g171005;
				Data3_g171005.Diffusion = In_Diffusion3_g171005;
				}
				TVEVisualData Data4_g171021 = Data3_g171005;
				float Out_Dummy4_g171021 = 0;
				float3 Out_Albedo4_g171021 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g171021 = float3( 0,0,0 );
				float2 Out_NormalTS4_g171021 = float2( 0,0 );
				float3 Out_NormalWS4_g171021 = float3( 0,0,0 );
				float4 Out_Shader4_g171021 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g171021 = float4( 0,0,0,0 );
				float Out_MultiMask4_g171021 = 0;
				float Out_Grayscale4_g171021 = 0;
				float Out_Luminosity4_g171021 = 0;
				float Out_AlphaClip4_g171021 = 0;
				float Out_AlphaFade4_g171021 = 0;
				float3 Out_Translucency4_g171021 = float3( 0,0,0 );
				float Out_Transmission4_g171021 = 0;
				float Out_Thickness4_g171021 = 0;
				float Out_Diffusion4_g171021 = 0;
				{
				Out_Dummy4_g171021 = Data4_g171021.Dummy;
				Out_Albedo4_g171021 = Data4_g171021.Albedo;
				Out_AlbedoRaw4_g171021 = Data4_g171021.AlbedoRaw;
				Out_NormalTS4_g171021 = Data4_g171021.NormalTS;
				Out_NormalWS4_g171021 = Data4_g171021.NormalWS;
				Out_Shader4_g171021 = Data4_g171021.Shader;
				Out_Emissive4_g171021= Data4_g171021.Emissive;
				Out_MultiMask4_g171021 = Data4_g171021.MultiMask;
				Out_Grayscale4_g171021 = Data4_g171021.Grayscale;
				Out_Luminosity4_g171021= Data4_g171021.Luminosity;
				Out_AlphaClip4_g171021 = Data4_g171021.AlphaClip;
				Out_AlphaFade4_g171021 = Data4_g171021.AlphaFade;
				Out_Translucency4_g171021 = Data4_g171021.Translucency;
				Out_Transmission4_g171021 = Data4_g171021.Transmission;
				Out_Thickness4_g171021 = Data4_g171021.Thickness;
				Out_Diffusion4_g171021 = Data4_g171021.Diffusion;
				}
				half3 Input_Albedo24_g171020 = Out_Albedo4_g171021;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g171020 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g171020 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g171020 = staticSwitch22_g171020;
				float4 break24_g171015 = Out_Shader4_g171021;
				half Metallic95_g171015 = break24_g171015.x;
				half Input_Metallic25_g171020 = Metallic95_g171015;
				half OneMinusReflectivity31_g171020 = ( (ColorSpaceDielectricSpec23_g171020).w - ( (ColorSpaceDielectricSpec23_g171020).w * Input_Metallic25_g171020 ) );
				
				float3 appendResult23_g171015 = (float3(Out_NormalTS4_g171021 , 1.0));
				float3 temp_output_13_0_g171019 = appendResult23_g171015;
				float3 temp_output_33_0_g171019 = ( temp_output_13_0_g171019 * _render_normal );
				float3 switchResult12_g171019 = (((ase_vface>0)?(temp_output_13_0_g171019):(temp_output_33_0_g171019)));
				
				half Smoothness105_g171015 = break24_g171015.w;
				half Input_Smoothness43_g171023 = Smoothness105_g171015;
				half Input_True57_g171025 = Input_Smoothness43_g171023;
				half True33_g171025 = Input_True57_g171025;
				half RenderSpec102_g171015 = _RenderSpecular;
				half Input_RenderSpec58_g171023 = RenderSpec102_g171015;
				float temp_output_46_0_g171023 = max( ( Input_Smoothness43_g171023 * Input_RenderSpec58_g171023 ) , 0.001 );
				float temp_output_6_0_g171024 = temp_output_46_0_g171023;
				#ifdef TVE_REGISTER
				float staticSwitch14_g171024 = ( temp_output_6_0_g171024 + ( _SpecColor.r * 0.0 ) );
				#else
				float staticSwitch14_g171024 = temp_output_6_0_g171024;
				#endif
				float temp_output_61_0_g171023 = staticSwitch14_g171024;
				half Input_False58_g171025 = temp_output_61_0_g171023;
				half False33_g171025 = Input_False58_g171025;
				half localShadowPassCheck33_g171025 = ShadowPassCheck33_g171025( True33_g171025 , False33_g171025 );
				
				half Input_True57_g171026 = 0.04;
				half True33_g171026 = Input_True57_g171026;
				half Input_False58_g171026 = temp_output_46_0_g171023;
				half False33_g171026 = Input_False58_g171026;
				half localShadowPassCheck33_g171026 = ShadowPassCheck33_g171026( True33_g171026 , False33_g171026 );
				
				float localCustomAlphaClip20_g171028 = ( 0.0 );
				float temp_output_3_0_g171028 = Out_AlphaClip4_g171021;
				float Alpha20_g171028 = temp_output_3_0_g171028;
				float temp_output_15_0_g171028 = 0.0;
				float Treshold20_g171028 = temp_output_15_0_g171028;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				clip(Alpha20_g171028 - Treshold20_g171028);
				#endif
				}
				
				o.Albedo = ( Input_Albedo24_g171020 * OneMinusReflectivity31_g171020 );
				o.Normal = switchResult12_g171019;
				o.Emission = (Out_Emissive4_g171021).xyz;

				#if defined(ASE_LIGHTING_SIMPLE)
					o.Specular = localShadowPassCheck33_g171025;
					o.Gloss = localShadowPassCheck33_g171026;
				#else
					#if defined(_SPECULAR_SETUP)
						o.Specular = fixed3( 1, 1, 1 );
					#else
						o.Metallic = 0;
					#endif
					o.Occlusion = 1;
					o.Smoothness = 0;
				#endif

				o.Alpha = saturate( ( Alpha20_g171028 * Out_AlphaFade4_g171021 ) );
				float AlphaClipThreshold = 0.5;
				float AlphaClipThresholdShadow = 0.5;
				float3 BakedGI = 0;
				float3 RefractionColor = 1;
				float RefractionIndex = 1;
				float3 Transmission = 1;
				float3 Translucency = 1;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				#ifndef USING_DIRECTIONAL_LIGHT
					fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
				#else
					fixed3 lightDir = _WorldSpaceLightPos0.xyz;
				#endif

				fixed4 c = 0;
				float3 worldN;
				worldN.x = dot(IN.tSpace0.xyz, o.Normal);
				worldN.y = dot(IN.tSpace1.xyz, o.Normal);
				worldN.z = dot(IN.tSpace2.xyz, o.Normal);
				worldN = normalize(worldN);
				o.Normal = worldN;

				UnityGI gi;
				UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
				gi.indirect.diffuse = 0;
				gi.indirect.specular = 0;
				gi.light.color = _LightColor0.rgb;
				gi.light.dir = lightDir;

				UnityGIInput giInput;
				UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
				giInput.light = gi.light;
				giInput.worldPos = worldPos;
				giInput.worldViewDir = worldViewDir;
				giInput.atten = atten;
				#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
					giInput.lightmapUV = IN.lmap;
				#else
					giInput.lightmapUV = 0.0;
				#endif
				#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
					giInput.ambient = IN.sh;
				#else
					giInput.ambient.rgb = 0.0;
				#endif
				giInput.probeHDR[0] = unity_SpecCube0_HDR;
				giInput.probeHDR[1] = unity_SpecCube1_HDR;
				#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
					giInput.boxMin[0] = unity_SpecCube0_BoxMin;
				#endif
				#ifdef UNITY_SPECCUBE_BOX_PROJECTION
					giInput.boxMax[0] = unity_SpecCube0_BoxMax;
					giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
					giInput.boxMax[1] = unity_SpecCube1_BoxMax;
					giInput.boxMin[1] = unity_SpecCube1_BoxMin;
					giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						LightingBlinnPhong_GI(o, giInput, gi);
					#else
						LightingLambert_GI(o, giInput, gi);
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						LightingStandardSpecular_GI(o, giInput, gi);
					#else
						LightingStandard_GI(o, giInput, gi);
					#endif
				#endif

				#ifdef ASE_BAKEDGI
					gi.indirect.diffuse = BakedGI;
				#endif

				#if UNITY_SHOULD_SAMPLE_SH && !defined(LIGHTMAP_ON) && defined(ASE_NO_AMBIENT)
					gi.indirect.diffuse = 0;
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						c += LightingBlinnPhong (o, worldViewDir, gi);
					#else
						c += LightingLambert( o, gi );
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						c += LightingStandardSpecular (o, worldViewDir, gi);
					#else
						c += LightingStandard(o, worldViewDir, gi);
					#endif
				#endif

				#ifdef ASE_TRANSMISSION
				{
					float shadow = _TransmissionShadow;
					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 transmission = max(0 , -dot(o.Normal, gi.light.dir)) * lightAtten * Transmission;
					c.rgb += o.Albedo * transmission;
				}
				#endif

				#ifdef ASE_TRANSLUCENCY
				{
					float shadow = _TransShadow;
					float normal = _TransNormal;
					float scattering = _TransScattering;
					float direct = _TransDirect;
					float ambient = _TransAmbient;
					float strength = _TransStrength;

					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 lightDir = gi.light.dir + o.Normal * normal;
					half transVdotL = pow( saturate( dot( worldViewDir, -lightDir ) ), scattering );
					half3 translucency = lightAtten * (transVdotL * direct + gi.indirect.diffuse * ambient) * Translucency;
					c.rgb += o.Albedo * translucency * strength;
				}
				#endif

				//#ifdef ASE_REFRACTION
				//	float4 projScreenPos = ScreenPos / ScreenPos.w;
				//	float3 refractionOffset = ( RefractionIndex - 1.0 ) * mul( UNITY_MATRIX_V, WorldNormal ).xyz * ( 1.0 - dot( WorldNormal, WorldViewDirection ) );
				//	projScreenPos.xy += refractionOffset.xy;
				//	float3 refraction = UNITY_SAMPLE_SCREENSPACE_TEXTURE( _GrabTexture, projScreenPos ) * RefractionColor;
				//	color.rgb = lerp( refraction, color.rgb, color.a );
				//	color.a = 1;
				//#endif

				c.rgb += o.Emission;

				#ifdef ASE_FOG
					UNITY_APPLY_FOG(IN.fogCoord, c);
				#endif
				return c;
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "ForwardAdd"
			Tags { "LightMode"="ForwardAdd" }
			ZWrite Off
			Blend One One

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma shader_feature_local_fragment _ _SPECULARHIGHLIGHTS_OFF
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define _SPECULAR_SETUP 1
			#define ASE_LIGHTING_SIMPLE 1
			#define _ENVIRONMENTREFLECTIONS_OFF 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_VERSION 19800
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants INSTANCING_ON
			#pragma multi_compile_fwdadd_fullshadows
			#ifndef UNITY_PASS_FORWARDADD
				#define UNITY_PASS_FORWARDADD
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "AutoLight.cginc"

			#include "UnityStandardBRDF.cginc"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 FlowParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex3D(tex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};
			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHTING_COORDS(1,2)
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_SHADOW_COORDS(1)
					#else
						SHADOW_COORDS(1)
					#endif
				#endif
				#ifdef ASE_FOG
					UNITY_FOG_COORDS(3)
				#endif
				float4 tSpace0 : TEXCOORD5;
				float4 tSpace1 : TEXCOORD6;
				float4 tSpace2 : TEXCOORD7;
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 screenPos : TEXCOORD8;
				#endif
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				float4 ase_texcoord12 : TEXCOORD12;
				float4 ase_color : COLOR;
				float4 ase_texcoord13 : TEXCOORD13;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceSpace;
			uniform half _SubsurfaceScatteringValue;
			uniform half _render_cull;
			uniform half _render_src;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsGeneralShader;
			uniform half _IsSimpleShader;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			uniform half _RenderBakeGI;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderPriority;
			uniform half _RenderQueue;
			uniform half _RenderMotion;
			uniform half _RenderClip;
			uniform half _RenderShadow;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderFilter;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NoiseTexSS);
			SamplerState sampler_NoiseTexSS;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _NormalSpace;
			uniform half _MotionCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionElementMode;
			uniform half _MotionPushInfo;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform half _ObjectBoundsInfo;
			uniform float3 TVE_WorldOrigin;
			uniform half4 TVE_TimeParams;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half4 TVE_SizeFadeParams;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeScaleValue;
			uniform half4 TVE_FormParams;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half _GlobalPivotInfo;
			uniform half _GlobalCoatLayerValue;
			uniform float TVE_CoatLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			uniform half _GlobalCoatPivotValue;
			SamplerState sampler_Linear_Clamp;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatNearTex);
			uniform half4 TVE_RenderNearCoords;
			SamplerState sampler_Linear_Repeat;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_CoatParams;
			uniform half _GlobalPaintLayerValue;
			uniform float TVE_PaintLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintBaseTex);
			uniform half _GlobalPaintPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintNearTex);
			uniform half4 TVE_PaintParams;
			uniform half _GlobalGlowLayerValue;
			uniform float TVE_GlowLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowBaseTex);
			uniform half _GlobalGlowPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowNearTex);
			uniform half4 TVE_GlowParams;
			uniform half _GlobalAtmoLayerValue;
			uniform float TVE_AtmoLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoBaseTex);
			uniform half _GlobalAtmoPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoNearTex);
			uniform half4 TVE_AtmoParams;
			uniform half _GlobalFadeLayerValue;
			uniform float TVE_FadeLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeBaseTex);
			uniform half _GlobalFadePivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeNearTex);
			uniform half4 TVE_FadeParams;
			uniform half _GlobalFormLayerValue;
			uniform float TVE_FormLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormBaseTex);
			uniform half _GlobalFormPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormNearTex);
			uniform half _GlobalFlowLayerValue;
			uniform float TVE_FlowLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FlowBaseTex);
			uniform half _GlobalFlowPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FlowNearTex);
			uniform half4 TVE_FlowParams;
			uniform half _SizeFadeElementMode;
			uniform half _SizeFadeGlobalValue;
			uniform half TVE_IsEnabled;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half _motion_small_mask_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			uniform half4 TVE_MotionParams;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionSmallTillingValue;
			uniform half _MotionSmallSpeedValue;
			uniform half _MotionSmallNoiseValue;
			uniform half4 TVE_MotionParamsEditor;
			uniform half _MotionIntensityValue;
			uniform half _MotionSmallDelayValue;
			uniform half _MotionSmallPushValue;
			uniform half _MotionTinyIntensityValue;
			uniform half _MotionDistValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half _motion_tiny_mask_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionTinyNoiseValue;
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionBaseTillingValue;
			uniform half _MotionBaseSpeedValue;
			uniform half _MotionBasePushValue;
			uniform half _motion_small_mode;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half _motion_base_mask_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionBaseNoiseValue;
			uniform half _MotionBaseDelayValue;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half4 _normal_vert_mode;
			uniform half4 _NormalMeshRemap;
			uniform half _NormalMeshValue;
			uniform half _NormalMeshMode;
			uniform half _DisableSRPBatcher;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveFlagMode;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutBakeMode;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessBakeMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayBakeMode;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessBakeMode;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			uniform half _MainMultiMaskInfo;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			SamplerState sampler_Point_Repeat;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondLumaRemap;
			uniform half _SecondLumaValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half _SecondElementMode;
			uniform half _SecondGlobalValue;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _ThirdLumaRemap;
			uniform half _ThirdLumaValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdGlobalValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThirdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThirdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half _GradientMultiValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationNoisePivotValue;
			uniform half _VariationNoiseTillingValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationIntensityValue;
			uniform half _VariationMultiValue;
			uniform half _TintingElementMode;
			uniform half _TintingGlobalValue;
			uniform half _TintingGrayValue;
			uniform float4 _TintingColor;
			uniform half _TintingIntensityValue;
			uniform half _TintingMultiValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingLumaValue;
			uniform half4 _tinting_vert_mode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _TintingMeshMode;
			uniform half4 _TintingBlendRemap;
			uniform half4 TVE_AtmoData;
			uniform half _DrynessElementMode;
			uniform half _DrynessGlobalValue;
			uniform half _DrynessGrayValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessIntensityValue;
			uniform half _DrynessMultiValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessLumaValue;
			uniform half4 _dryness_vert_mode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessBlendRemap;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half3 _motion_highlight_color;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayGlitterIntensityValue;
			uniform half4 _OverlayGlitterColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTexRT);
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterAttenValue;
			uniform half _OverlayGlitterDistValue;
			uniform half _OverlayIntensityValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			uniform half _OverlayElementMode;
			uniform half _OverlayGlobalValue;
			uniform half4 _OverlayBlendRemap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _WetnessWaterColor;
			uniform half _WetnessWaterIntensityValue;
			uniform half _WetnessIntensityValue;
			uniform half _WetnessElementMode;
			uniform half _WetnessGlobalValue;
			uniform half4 _wetness_vert_mode;
			uniform half4 _WetnessMeshRemap;
			uniform half _WetnessMeshValue;
			uniform half _WetnessMeshMode;
			uniform half4 _wetness_water_vert_mode;
			uniform half4 _WetnessWaterMeshRemap;
			uniform half _WetnessWaterMeshValue;
			uniform half _WetnessWaterMeshMode;
			uniform half _WetnessWaterBaseValue;
			uniform half4 _WetnessWaterBlendRemap;
			uniform half _WetnessContrastValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTexRT);
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsDistValue;
			uniform half4 _wetness_drops_vert_mode;
			uniform half4 _WetnessDropsMeshRemap;
			uniform half _WetnessDropsMeshValue;
			uniform half _WetnessDropsMeshMode;
			uniform half _WetnessSmoothnessValue;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutElementMode;
			uniform half _CutoutGlobalValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutNoiseValue;
			uniform half4 _cutout_vert_mode;
			uniform half4 _CutoutMeshRemap;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half _CutoutMultiValue;
			uniform half _DitherConstantValue;
			uniform half4 TVE_DitherParams;
			uniform half _DitherProximityMaxValue;
			uniform half _DitherProximityMinValue;
			uniform half _DitherProximityValue;
			uniform half _DitherDistanceMinValue;
			uniform half _DitherDistanceMaxValue;
			uniform half _DitherDistanceValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _DitherMultiValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveGlobalValue;
			uniform half _EmissiveColorMode;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceElementMode;
			uniform half _SubsurfaceGlobalValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 TVE_MainLightDirection;
			uniform half _SubsurfaceAproxInfo;
			uniform half3 _render_normal;
			uniform half _RenderSpecular;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half ShadowPassCheck33_g171025( half True, half False )
			{
				half result;
				#if defined(UNITY_PASS_DEFERRED)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck33_g171026( half True, half False )
			{
				half result;
				#if defined(UNITY_PASS_DEFERRED)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g171013 = (TVEModelData)0;
				float In_Dummy16_g171013 = 0.0;
				TVEModelData Data16_g170989 = (TVEModelData)0;
				half Dummy1575_g170987 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170989 = Dummy1575_g170987;
				TVEModelData Data16_g170965 = (TVEModelData)0;
				float In_Dummy16_g170965 = 0.0;
				TVEModelData Data16_g170731 = (TVEModelData)0;
				half Dummy181_g170714 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170731 = Dummy181_g170714;
				TVEModelData Data16_g170673 = (TVEModelData)0;
				half Dummy181_g170671 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170673 = Dummy181_g170671;
				TVEModelData Data16_g170585 = (TVEModelData)0;
				half Dummy181_g170582 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170585 = Dummy181_g170582;
				TVEModelData Data16_g170580 = (TVEModelData)0;
				float In_Dummy16_g170580 = 0.0;
				TVEModelData Data16_g170482 = (TVEModelData)0;
				half Dummy207_g170478 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170482 = Dummy207_g170478;
				half3 PositionOS131_g170478 = v.vertex.xyz;
				float3 In_PositionOS16_g170482 = PositionOS131_g170478;
				float3 ase_positionWS = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g170478 = ase_positionWS;
				half3 PositionWS122_g170478 = vertexToFrag73_g170478;
				float3 In_PositionWS16_g170482 = PositionWS122_g170478;
				float4x4 break19_g170488 = unity_ObjectToWorld;
				float3 appendResult20_g170488 = (float3(break19_g170488[ 0 ][ 3 ] , break19_g170488[ 1 ][ 3 ] , break19_g170488[ 2 ][ 3 ]));
				float3 temp_output_340_7_g170478 = appendResult20_g170488;
				float4x4 break19_g170490 = unity_ObjectToWorld;
				float3 appendResult20_g170490 = (float3(break19_g170490[ 0 ][ 3 ] , break19_g170490[ 1 ][ 3 ] , break19_g170490[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170486 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g170478 = PositionOS131_g170478;
				float3 appendResult234_g170478 = (float3(break233_g170478.x , 0.0 , break233_g170478.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170478 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170478 = appendResult60_g170486;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170478 = appendResult234_g170478;
				#else
				float3 staticSwitch229_g170478 = _Vector0;
				#endif
				half3 PivotOS149_g170478 = staticSwitch229_g170478;
				float3 temp_output_122_0_g170490 = PivotOS149_g170478;
				float3 PivotsOnlyWS105_g170490 = mul( unity_ObjectToWorld, float4( temp_output_122_0_g170490 , 0.0 ) ).xyz;
				float3 temp_output_341_7_g170478 = ( appendResult20_g170490 + PivotsOnlyWS105_g170490 );
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170478 = temp_output_340_7_g170478;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170478 = temp_output_341_7_g170478;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170478 = temp_output_341_7_g170478;
				#else
				float3 staticSwitch236_g170478 = temp_output_340_7_g170478;
				#endif
				float3 vertexToFrag76_g170478 = staticSwitch236_g170478;
				half3 PivotWS121_g170478 = vertexToFrag76_g170478;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
				#else
				float3 staticSwitch204_g170478 = PositionWS122_g170478;
				#endif
				half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170482 = PositionWO132_g170478;
				float3 In_PositionRawOS16_g170482 = PositionOS131_g170478;
				float3 In_PositionAddOS16_g170482 = float3( 0,0,0 );
				float3 In_PivotOS16_g170482 = PivotOS149_g170478;
				float3 In_PivotWS16_g170482 = PivotWS121_g170478;
				half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170482 = PivotWO133_g170478;
				half3 NormalOS134_g170478 = v.normal;
				float3 In_NormalOS16_g170482 = NormalOS134_g170478;
				float3 ase_normalWS = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170478 = normalizedWorldNormal;
				float3 In_NormalWS16_g170482 = Normal_WS95_g170478;
				float3 In_NormalRawOS16_g170482 = NormalOS134_g170478;
				float3 objToWorldDir298_g170478 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g170478 = objToWorldDir298_g170478;
				float3 In_NormalRawWS16_g170482 = Normal_RawWS136_g170478;
				half4 TangentlOS153_g170478 = v.tangent;
				float4 In_TangentOS16_g170482 = TangentlOS153_g170478;
				float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
				half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
				float3 In_ViewDirWS16_g170482 = ViewDirWS169_g170478;
				half4 VertexMasks171_g170478 = v.ase_color;
				float4 In_VertexData16_g170482 = VertexMasks171_g170478;
				float mulTime113_g170485 = _Time.y * 0.52;
				float lerpResult128_g170485 = lerp( mulTime113_g170485 , ( ( mulTime113_g170485 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170478 = PivotWO133_g170478;
				half Pivot_Position322_g170478 = ( break319_g170478.x + break319_g170478.z );
				float mulTime113_g170484 = _Time.y * 0.27;
				float lerpResult128_g170484 = lerp( mulTime113_g170484 , ( ( mulTime113_g170484 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170487 = _object_phase_mode;
				float temp_output_30_0_g170487 = ( v.ase_color.r * break33_g170487.x );
				float temp_output_29_0_g170487 = ( v.ase_color.g * break33_g170487.y );
				float temp_output_31_0_g170487 = ( v.ase_color.b * break33_g170487.z );
				float temp_output_28_0_g170487 = ( temp_output_30_0_g170487 + temp_output_29_0_g170487 + temp_output_31_0_g170487 + ( v.ase_color.a * break33_g170487.w ) );
				float temp_output_315_0_g170478 = (frac( ( temp_output_28_0_g170487 + Pivot_Position322_g170478 ) )*2.0 + -1.0);
				float4 appendResult177_g170478 = (float4(sin( ( lerpResult128_g170485 + Pivot_Position322_g170478 ) ) , sin( ( lerpResult128_g170484 + Pivot_Position322_g170478 ) ) , temp_output_315_0_g170478 , 1.0));
				half4 MotionMasks176_g170478 = appendResult177_g170478;
				float4 In_PhaseData16_g170482 = MotionMasks176_g170478;
				half Object_HeightValue267_g170478 = _ObjectHeightValue;
				half Object_RadiusValue268_g170478 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170478 = saturate( ( (PositionOS131_g170478).y / Object_HeightValue267_g170478 ) );
				half Bounds_SphereMask282_g170478 = saturate( ( length( PositionOS131_g170478 ) / max( Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 ) ) );
				float4 appendResult253_g170478 = (float4(Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 , Bounds_HeightMask274_g170478 , Bounds_SphereMask282_g170478));
				half4 BoundsData254_g170478 = appendResult253_g170478;
				float4 In_BoundsData16_g170482 = BoundsData254_g170478;
				float4 In_RotationData16_g170482 = float4( 0,0,0,0 );
				{
				Data16_g170482.Dummy = In_Dummy16_g170482;
				Data16_g170482.PositionOS = In_PositionOS16_g170482;
				Data16_g170482.PositionWS = In_PositionWS16_g170482;
				Data16_g170482.PositionWO = In_PositionWO16_g170482;
				Data16_g170482.PositionRawOS = In_PositionRawOS16_g170482;
				Data16_g170482.PositionAddOS = In_PositionAddOS16_g170482;
				Data16_g170482.PivotOS = In_PivotOS16_g170482;
				Data16_g170482.PivotWS = In_PivotWS16_g170482;
				Data16_g170482.PivotWO = In_PivotWO16_g170482;
				Data16_g170482.NormalOS = In_NormalOS16_g170482;
				Data16_g170482.NormalWS = In_NormalWS16_g170482;
				Data16_g170482.NormalRawOS = In_NormalRawOS16_g170482;
				Data16_g170482.NormalRawWS = In_NormalRawWS16_g170482;
				Data16_g170482.TangentOS = In_TangentOS16_g170482;
				Data16_g170482.ViewDirWS = In_ViewDirWS16_g170482;
				Data16_g170482.VertexData = In_VertexData16_g170482;
				Data16_g170482.PhaseData = In_PhaseData16_g170482;
				Data16_g170482.BoundsData = In_BoundsData16_g170482;
				Data16_g170482.RotationData = In_RotationData16_g170482;
				}
				TVEModelData Data15_g170581 = Data16_g170482;
				float Out_Dummy15_g170581 = 0;
				float3 Out_PositionOS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170581 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170581 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
				float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170581 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170581 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170581 = Data15_g170581.Dummy;
				Out_PositionOS15_g170581 = Data15_g170581.PositionOS;
				Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
				Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
				Out_PositionRawOS15_g170581 = Data15_g170581.PositionRawOS;
				Out_PositionAddOS15_g170581 = Data15_g170581.PositionAddOS;
				Out_PivotOS15_g170581 = Data15_g170581.PivotOS;
				Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
				Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
				Out_NormalOS15_g170581 = Data15_g170581.NormalOS;
				Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
				Out_NormalRawOS15_g170581 = Data15_g170581.NormalRawOS;
				Out_NormalRawWS15_g170581 = Data15_g170581.NormalRawWS;
				Out_TangentOS15_g170581 = Data15_g170581.TangentOS;
				Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
				Out_VertexData15_g170581 = Data15_g170581.VertexData;
				Out_PhaseData15_g170581 = Data15_g170581.PhaseData;
				Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
				Out_RotationData15_g170581 = Data15_g170581.RotationData;
				}
				float3 temp_output_218_24_g170579 = Out_PivotOS15_g170581;
				float3 In_PositionOS16_g170580 = ( Out_PositionOS15_g170581 - temp_output_218_24_g170579 );
				float3 In_PositionWS16_g170580 = Out_PositionWS15_g170581;
				float3 In_PositionWO16_g170580 = Out_PositionWO15_g170581;
				float3 In_PositionRawOS16_g170580 = Out_PositionRawOS15_g170581;
				float3 In_PositionAddOS16_g170580 = Out_PositionAddOS15_g170581;
				float3 In_PivotOS16_g170580 = temp_output_218_24_g170579;
				float3 In_PivotWS16_g170580 = Out_PivotWS15_g170581;
				float3 In_PivotWO16_g170580 = Out_PivotWO15_g170581;
				float3 In_NormalOS16_g170580 = Out_NormalOS15_g170581;
				float3 In_NormalWS16_g170580 = Out_NormalWS15_g170581;
				float3 In_NormalRawOS16_g170580 = Out_NormalRawOS15_g170581;
				float3 In_NormalRawWS16_g170580 = Out_NormalRawWS15_g170581;
				float4 In_TangentOS16_g170580 = Out_TangentOS15_g170581;
				float3 In_ViewDirWS16_g170580 = Out_ViewDirWS15_g170581;
				float4 In_VertexData16_g170580 = Out_VertexData15_g170581;
				float4 In_PhaseData16_g170580 = Out_PhaseData15_g170581;
				float4 In_BoundsData16_g170580 = Out_BoundsData15_g170581;
				float4 In_RotationData16_g170580 = Out_RotationData15_g170581;
				{
				Data16_g170580.Dummy = In_Dummy16_g170580;
				Data16_g170580.PositionOS = In_PositionOS16_g170580;
				Data16_g170580.PositionWS = In_PositionWS16_g170580;
				Data16_g170580.PositionWO = In_PositionWO16_g170580;
				Data16_g170580.PositionRawOS = In_PositionRawOS16_g170580;
				Data16_g170580.PositionAddOS = In_PositionAddOS16_g170580;
				Data16_g170580.PivotOS = In_PivotOS16_g170580;
				Data16_g170580.PivotWS = In_PivotWS16_g170580;
				Data16_g170580.PivotWO = In_PivotWO16_g170580;
				Data16_g170580.NormalOS = In_NormalOS16_g170580;
				Data16_g170580.NormalWS = In_NormalWS16_g170580;
				Data16_g170580.NormalRawOS = In_NormalRawOS16_g170580;
				Data16_g170580.NormalRawWS = In_NormalRawWS16_g170580;
				Data16_g170580.TangentOS = In_TangentOS16_g170580;
				Data16_g170580.ViewDirWS = In_ViewDirWS16_g170580;
				Data16_g170580.VertexData = In_VertexData16_g170580;
				Data16_g170580.PhaseData = In_PhaseData16_g170580;
				Data16_g170580.BoundsData = In_BoundsData16_g170580;
				Data16_g170580.RotationData = In_RotationData16_g170580;
				}
				TVEModelData Data15_g170583 = Data16_g170580;
				float Out_Dummy15_g170583 = 0;
				float3 Out_PositionOS15_g170583 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170583 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170583 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170583 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170583 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170583 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170583 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170583 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170583 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170583 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170583 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170583 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170583 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170583 = float3( 0,0,0 );
				float4 Out_VertexData15_g170583 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170583 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170583 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170583 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170583 = Data15_g170583.Dummy;
				Out_PositionOS15_g170583 = Data15_g170583.PositionOS;
				Out_PositionWS15_g170583 = Data15_g170583.PositionWS;
				Out_PositionWO15_g170583 = Data15_g170583.PositionWO;
				Out_PositionRawOS15_g170583 = Data15_g170583.PositionRawOS;
				Out_PositionAddOS15_g170583 = Data15_g170583.PositionAddOS;
				Out_PivotOS15_g170583 = Data15_g170583.PivotOS;
				Out_PivotWS15_g170583 = Data15_g170583.PivotWS;
				Out_PivotWO15_g170583 = Data15_g170583.PivotWO;
				Out_NormalOS15_g170583 = Data15_g170583.NormalOS;
				Out_NormalWS15_g170583 = Data15_g170583.NormalWS;
				Out_NormalRawOS15_g170583 = Data15_g170583.NormalRawOS;
				Out_NormalRawWS15_g170583 = Data15_g170583.NormalRawWS;
				Out_TangentOS15_g170583 = Data15_g170583.TangentOS;
				Out_ViewDirWS15_g170583 = Data15_g170583.ViewDirWS;
				Out_VertexData15_g170583 = Data15_g170583.VertexData;
				Out_PhaseData15_g170583 = Data15_g170583.PhaseData;
				Out_BoundsData15_g170583 = Data15_g170583.BoundsData;
				Out_RotationData15_g170583 = Data15_g170583.RotationData;
				}
				half3 Model_PositionOS147_g170582 = Out_PositionOS15_g170583;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = Unity_SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170584 = unity_CameraToWorld;
				float3 appendResult118_g170584 = (float3(break117_g170584[ 0 ][ 2 ] , break117_g170584[ 1 ][ 2 ] , break117_g170584[ 2 ][ 2 ]));
				float3 lerpResult209_g170582 = lerp( ase_viewDirSafeWS , -appendResult118_g170584 , unity_OrthoParams.w);
				float3 break201_g170582 = cross( lerpResult209_g170582 , half3(0,1,0) );
				float3 appendResult196_g170582 = (float3(-break201_g170582.z , 0.0 , break201_g170582.x));
				float dotResult189_g170582 = dot( ase_viewDirSafeWS , float3(0,1,0) );
				float saferPower192_g170582 = abs( dotResult189_g170582 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170582 = ( Model_PositionOS147_g170582 + ( mul( unity_WorldToObject, float4( appendResult196_g170582 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170582 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170582).y ) ) );
				#else
				float3 staticSwitch211_g170582 = Model_PositionOS147_g170582;
				#endif
				half3 Final_Position178_g170582 = staticSwitch211_g170582;
				float3 In_PositionOS16_g170585 = Final_Position178_g170582;
				float3 In_PositionWS16_g170585 = Out_PositionWS15_g170583;
				float3 In_PositionWO16_g170585 = Out_PositionWO15_g170583;
				float3 In_PositionRawOS16_g170585 = Out_PositionRawOS15_g170583;
				float3 In_PositionAddOS16_g170585 = Out_PositionAddOS15_g170583;
				float3 In_PivotOS16_g170585 = Out_PivotOS15_g170583;
				float3 In_PivotWS16_g170585 = Out_PivotWS15_g170583;
				float3 In_PivotWO16_g170585 = Out_PivotWO15_g170583;
				float3 In_NormalOS16_g170585 = Out_NormalOS15_g170583;
				float3 In_NormalWS16_g170585 = Out_NormalWS15_g170583;
				float3 In_NormalRawOS16_g170585 = Out_NormalRawOS15_g170583;
				float3 In_NormalRawWS16_g170585 = Out_NormalRawWS15_g170583;
				float4 In_TangentOS16_g170585 = Out_TangentOS15_g170583;
				float3 In_ViewDirWS16_g170585 = Out_ViewDirWS15_g170583;
				float4 In_VertexData16_g170585 = Out_VertexData15_g170583;
				float4 In_PhaseData16_g170585 = Out_PhaseData15_g170583;
				float4 In_BoundsData16_g170585 = Out_BoundsData15_g170583;
				float4 In_RotationData16_g170585 = Out_RotationData15_g170583;
				{
				Data16_g170585.Dummy = In_Dummy16_g170585;
				Data16_g170585.PositionOS = In_PositionOS16_g170585;
				Data16_g170585.PositionWS = In_PositionWS16_g170585;
				Data16_g170585.PositionWO = In_PositionWO16_g170585;
				Data16_g170585.PositionRawOS = In_PositionRawOS16_g170585;
				Data16_g170585.PositionAddOS = In_PositionAddOS16_g170585;
				Data16_g170585.PivotOS = In_PivotOS16_g170585;
				Data16_g170585.PivotWS = In_PivotWS16_g170585;
				Data16_g170585.PivotWO = In_PivotWO16_g170585;
				Data16_g170585.NormalOS = In_NormalOS16_g170585;
				Data16_g170585.NormalWS = In_NormalWS16_g170585;
				Data16_g170585.NormalRawOS = In_NormalRawOS16_g170585;
				Data16_g170585.NormalRawWS = In_NormalRawWS16_g170585;
				Data16_g170585.TangentOS = In_TangentOS16_g170585;
				Data16_g170585.ViewDirWS = In_ViewDirWS16_g170585;
				Data16_g170585.VertexData = In_VertexData16_g170585;
				Data16_g170585.PhaseData = In_PhaseData16_g170585;
				Data16_g170585.BoundsData = In_BoundsData16_g170585;
				Data16_g170585.RotationData = In_RotationData16_g170585;
				}
				TVEModelData Data15_g170672 = Data16_g170585;
				float Out_Dummy15_g170672 = 0;
				float3 Out_PositionOS15_g170672 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170672 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170672 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170672 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170672 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170672 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170672 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170672 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170672 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170672 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170672 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170672 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170672 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170672 = float3( 0,0,0 );
				float4 Out_VertexData15_g170672 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170672 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170672 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170672 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170672 = Data15_g170672.Dummy;
				Out_PositionOS15_g170672 = Data15_g170672.PositionOS;
				Out_PositionWS15_g170672 = Data15_g170672.PositionWS;
				Out_PositionWO15_g170672 = Data15_g170672.PositionWO;
				Out_PositionRawOS15_g170672 = Data15_g170672.PositionRawOS;
				Out_PositionAddOS15_g170672 = Data15_g170672.PositionAddOS;
				Out_PivotOS15_g170672 = Data15_g170672.PivotOS;
				Out_PivotWS15_g170672 = Data15_g170672.PivotWS;
				Out_PivotWO15_g170672 = Data15_g170672.PivotWO;
				Out_NormalOS15_g170672 = Data15_g170672.NormalOS;
				Out_NormalWS15_g170672 = Data15_g170672.NormalWS;
				Out_NormalRawOS15_g170672 = Data15_g170672.NormalRawOS;
				Out_NormalRawWS15_g170672 = Data15_g170672.NormalRawWS;
				Out_TangentOS15_g170672 = Data15_g170672.TangentOS;
				Out_ViewDirWS15_g170672 = Data15_g170672.ViewDirWS;
				Out_VertexData15_g170672 = Data15_g170672.VertexData;
				Out_PhaseData15_g170672 = Data15_g170672.PhaseData;
				Out_BoundsData15_g170672 = Data15_g170672.BoundsData;
				Out_RotationData15_g170672 = Data15_g170672.RotationData;
				}
				half3 Model_PositionOS147_g170671 = Out_PositionOS15_g170672;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170671 = Out_PivotWO15_g170672;
				half3 Model_PivotWO162_g170671 = temp_output_210_19_g170671;
				float lerpResult216_g170671 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170675 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170675 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170671 ) * lerpResult216_g170671 ) - temp_output_7_0_g170675 );
				float localBuildGlobalData204_g170496 = ( 0.0 );
				TVEGlobalData Data204_g170496 = (TVEGlobalData)0;
				half Dummy211_g170496 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170496 = Dummy211_g170496;
				float temp_output_82_0_g170506 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170508 = TVE_CoatLayers[(int)temp_output_82_0_g170506];
				TVEModelData Data16_g170483 = (TVEModelData)0;
				float In_Dummy16_g170483 = 0.0;
				float3 In_PositionWS16_g170483 = PositionWS122_g170478;
				float3 In_PositionWO16_g170483 = PositionWO132_g170478;
				float3 In_PivotWS16_g170483 = PivotWS121_g170478;
				float3 In_PivotWO16_g170483 = PivotWO133_g170478;
				float3 In_NormalWS16_g170483 = Normal_WS95_g170478;
				float3 In_ViewDirWS16_g170483 = ViewDirWS169_g170478;
				float4 In_VertexData16_g170483 = VertexMasks171_g170478;
				float4 In_BoundsData16_g170483 = float4( 1,1,1,1 );
				{
				Data16_g170483.Dummy = In_Dummy16_g170483;
				Data16_g170483.PositionWS = In_PositionWS16_g170483;
				Data16_g170483.PositionWO = In_PositionWO16_g170483;
				Data16_g170483.PivotWS = In_PivotWS16_g170483;
				Data16_g170483.PivotWO = In_PivotWO16_g170483;
				Data16_g170483.NormalWS = In_NormalWS16_g170483;
				Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
				Data16_g170483.VertexData = In_VertexData16_g170483;
				Data16_g170483.BoundsData = In_BoundsData16_g170483;
				}
				TVEModelData Data15_g170542 = Data16_g170483;
				float Out_Dummy15_g170542 = 0;
				float3 Out_PositionWS15_g170542 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170542 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170542 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170542 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170542 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170542 = float3( 0,0,0 );
				float4 Out_VertexData15_g170542 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170542 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170542 = Data15_g170542.Dummy;
				Out_PositionWS15_g170542 = Data15_g170542.PositionWS;
				Out_PositionWO15_g170542 = Data15_g170542.PositionWO;
				Out_PivotWS15_g170542 = Data15_g170542.PivotWS;
				Out_PivotWO15_g170542 = Data15_g170542.PivotWO;
				Out_NormalWS15_g170542 = Data15_g170542.NormalWS;
				Out_ViewDirWS15_g170542 = Data15_g170542.ViewDirWS;
				Out_VertexData15_g170542 = Data15_g170542.VertexData;
				Out_BoundsData15_g170542 = Data15_g170542.BoundsData;
				}
				half3 Model_PositionWS143_g170496 = Out_PositionWS15_g170542;
				half3 Model_PivotWS145_g170496 = Out_PivotWS15_g170542;
				float3 lerpResult300_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170509 = lerpResult300_g170496;
				float2 temp_output_75_0_g170509 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170509).xz ) );
				float temp_output_82_0_g170509 = temp_output_82_0_g170506;
				float2 temp_output_119_0_g170509 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170509).xz ) );
				float temp_output_7_0_g170514 = 1.0;
				float temp_output_9_0_g170514 = ( saturate( ( distance( Input_Position180_g170509 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170514 );
				float4 lerpResult131_g170509 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170509,temp_output_82_0_g170509), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170509,temp_output_82_0_g170509), 0.0 ) , saturate( ( temp_output_9_0_g170514 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170514 ) ) ));
				float4 temp_output_17_0_g170508 = lerpResult131_g170509;
				float4 temp_output_3_0_g170508 = TVE_CoatParams;
				float4 ifLocalVar18_g170508 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170508 >= 0.5 )
				ifLocalVar18_g170508 = temp_output_17_0_g170508;
				else
				ifLocalVar18_g170508 = temp_output_3_0_g170508;
				float4 lerpResult22_g170508 = lerp( temp_output_3_0_g170508 , temp_output_17_0_g170508 , temp_output_19_0_g170508);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170508 = lerpResult22_g170508;
				#else
				float4 staticSwitch24_g170508 = ifLocalVar18_g170508;
				#endif
				half4 Coat_Params302_g170496 = staticSwitch24_g170508;
				float4 In_CoatParams204_g170496 = Coat_Params302_g170496;
				float temp_output_82_0_g170497 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170499 = TVE_PaintLayers[(int)temp_output_82_0_g170497];
				float3 lerpResult85_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170500 = lerpResult85_g170496;
				float2 temp_output_75_0_g170500 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170500).xz ) );
				float temp_output_82_0_g170500 = temp_output_82_0_g170497;
				float2 temp_output_119_0_g170500 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170500).xz ) );
				float temp_output_7_0_g170505 = 1.0;
				float temp_output_9_0_g170505 = ( saturate( ( distance( Input_Position180_g170500 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170505 );
				float4 lerpResult131_g170500 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170500,temp_output_82_0_g170500), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170500,temp_output_82_0_g170500), 0.0 ) , saturate( ( temp_output_9_0_g170505 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170505 ) ) ));
				float4 temp_output_17_0_g170499 = lerpResult131_g170500;
				float4 temp_output_3_0_g170499 = TVE_PaintParams;
				float4 ifLocalVar18_g170499 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170499 >= 0.5 )
				ifLocalVar18_g170499 = temp_output_17_0_g170499;
				else
				ifLocalVar18_g170499 = temp_output_3_0_g170499;
				float4 lerpResult22_g170499 = lerp( temp_output_3_0_g170499 , temp_output_17_0_g170499 , temp_output_19_0_g170499);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170499 = lerpResult22_g170499;
				#else
				float4 staticSwitch24_g170499 = ifLocalVar18_g170499;
				#endif
				half4 Paint_Params71_g170496 = staticSwitch24_g170499;
				float4 In_PaintParams204_g170496 = Paint_Params71_g170496;
				float temp_output_82_0_g170543 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170545 = TVE_GlowLayers[(int)temp_output_82_0_g170543];
				float3 lerpResult247_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170546 = lerpResult247_g170496;
				float2 temp_output_75_0_g170546 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170546).xz ) );
				float temp_output_82_0_g170546 = temp_output_82_0_g170543;
				float2 temp_output_119_0_g170546 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170546).xz ) );
				float temp_output_7_0_g170551 = 1.0;
				float temp_output_9_0_g170551 = ( saturate( ( distance( Input_Position180_g170546 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170551 );
				float4 lerpResult131_g170546 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170546,temp_output_82_0_g170546), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170546,temp_output_82_0_g170546), 0.0 ) , saturate( ( temp_output_9_0_g170551 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170551 ) ) ));
				float4 temp_output_17_0_g170545 = lerpResult131_g170546;
				float4 temp_output_3_0_g170545 = TVE_GlowParams;
				float4 ifLocalVar18_g170545 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170545 >= 0.5 )
				ifLocalVar18_g170545 = temp_output_17_0_g170545;
				else
				ifLocalVar18_g170545 = temp_output_3_0_g170545;
				float4 lerpResult22_g170545 = lerp( temp_output_3_0_g170545 , temp_output_17_0_g170545 , temp_output_19_0_g170545);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170545 = lerpResult22_g170545;
				#else
				float4 staticSwitch24_g170545 = ifLocalVar18_g170545;
				#endif
				half4 Glow_Params248_g170496 = staticSwitch24_g170545;
				float4 In_GlowParams204_g170496 = Glow_Params248_g170496;
				float temp_output_132_0_g170524 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170526 = TVE_AtmoLayers[(int)temp_output_132_0_g170524];
				float3 lerpResult104_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170527 = lerpResult104_g170496;
				float2 temp_output_75_0_g170527 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170527).xz ) );
				float temp_output_82_0_g170527 = temp_output_132_0_g170524;
				float2 temp_output_119_0_g170527 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170527).xz ) );
				float temp_output_7_0_g170532 = 1.0;
				float temp_output_9_0_g170532 = ( saturate( ( distance( Input_Position180_g170527 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170532 );
				float4 lerpResult131_g170527 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170527,temp_output_82_0_g170527), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170527,temp_output_82_0_g170527), 0.0 ) , saturate( ( temp_output_9_0_g170532 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170532 ) ) ));
				float4 temp_output_17_0_g170526 = lerpResult131_g170527;
				float4 temp_output_3_0_g170526 = TVE_AtmoParams;
				float4 ifLocalVar18_g170526 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170526 >= 0.5 )
				ifLocalVar18_g170526 = temp_output_17_0_g170526;
				else
				ifLocalVar18_g170526 = temp_output_3_0_g170526;
				float4 lerpResult22_g170526 = lerp( temp_output_3_0_g170526 , temp_output_17_0_g170526 , temp_output_19_0_g170526);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170526 = lerpResult22_g170526;
				#else
				float4 staticSwitch24_g170526 = ifLocalVar18_g170526;
				#endif
				half4 Atmo_Params80_g170496 = staticSwitch24_g170526;
				float4 In_AtmoParams204_g170496 = Atmo_Params80_g170496;
				float temp_output_132_0_g170533 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170535 = TVE_FadeLayers[(int)temp_output_132_0_g170533];
				float3 lerpResult382_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFadePivotValue);
				half3 Input_Position180_g170536 = lerpResult382_g170496;
				float2 temp_output_75_0_g170536 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170536).xz ) );
				float temp_output_82_0_g170536 = temp_output_132_0_g170533;
				float2 temp_output_119_0_g170536 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170536).xz ) );
				float temp_output_7_0_g170541 = 1.0;
				float temp_output_9_0_g170541 = ( saturate( ( distance( Input_Position180_g170536 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170541 );
				float4 lerpResult131_g170536 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170536,temp_output_82_0_g170536), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170536,temp_output_82_0_g170536), 0.0 ) , saturate( ( temp_output_9_0_g170541 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170541 ) ) ));
				float4 temp_output_17_0_g170535 = lerpResult131_g170536;
				float4 temp_output_3_0_g170535 = TVE_FadeParams;
				float4 ifLocalVar18_g170535 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170535 >= 0.5 )
				ifLocalVar18_g170535 = temp_output_17_0_g170535;
				else
				ifLocalVar18_g170535 = temp_output_3_0_g170535;
				float4 lerpResult22_g170535 = lerp( temp_output_3_0_g170535 , temp_output_17_0_g170535 , temp_output_19_0_g170535);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170535 = lerpResult22_g170535;
				#else
				float4 staticSwitch24_g170535 = ifLocalVar18_g170535;
				#endif
				half4 Fade_Params387_g170496 = staticSwitch24_g170535;
				float4 In_FadeParams204_g170496 = Fade_Params387_g170496;
				float temp_output_130_0_g170515 = _GlobalFormLayerValue;
				float temp_output_19_0_g170517 = TVE_FormLayers[(int)temp_output_130_0_g170515];
				float3 lerpResult168_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFormPivotValue);
				half3 Input_Position180_g170518 = lerpResult168_g170496;
				float2 temp_output_75_0_g170518 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170518).xz ) );
				float temp_output_82_0_g170518 = temp_output_130_0_g170515;
				float2 temp_output_119_0_g170518 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170518).xz ) );
				float temp_output_7_0_g170523 = 1.0;
				float temp_output_9_0_g170523 = ( saturate( ( distance( Input_Position180_g170518 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170523 );
				float4 lerpResult131_g170518 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170518,temp_output_82_0_g170518), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170518,temp_output_82_0_g170518), 0.0 ) , saturate( ( temp_output_9_0_g170523 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170523 ) ) ));
				float4 temp_output_17_0_g170517 = lerpResult131_g170518;
				float4 temp_output_3_0_g170517 = TVE_FormParams;
				float4 ifLocalVar18_g170517 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170517 >= 0.5 )
				ifLocalVar18_g170517 = temp_output_17_0_g170517;
				else
				ifLocalVar18_g170517 = temp_output_3_0_g170517;
				float4 lerpResult22_g170517 = lerp( temp_output_3_0_g170517 , temp_output_17_0_g170517 , temp_output_19_0_g170517);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170517 = lerpResult22_g170517;
				#else
				float4 staticSwitch24_g170517 = ifLocalVar18_g170517;
				#endif
				half4 Form_Params112_g170496 = staticSwitch24_g170517;
				float4 In_FormParams204_g170496 = Form_Params112_g170496;
				float temp_output_136_0_g170561 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170563 = TVE_FlowLayers[(int)temp_output_136_0_g170561];
				float3 lerpResult400_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170564 = lerpResult400_g170496;
				float2 temp_output_75_0_g170564 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170564).xz ) );
				float temp_output_82_0_g170564 = temp_output_136_0_g170561;
				float2 temp_output_119_0_g170564 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170564).xz ) );
				float temp_output_7_0_g170569 = 1.0;
				float temp_output_9_0_g170569 = ( saturate( ( distance( Input_Position180_g170564 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170569 );
				float4 lerpResult131_g170564 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170564,temp_output_82_0_g170564), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170564,temp_output_82_0_g170564), 0.0 ) , saturate( ( temp_output_9_0_g170569 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170569 ) ) ));
				float4 temp_output_17_0_g170563 = lerpResult131_g170564;
				float4 temp_output_3_0_g170563 = TVE_FlowParams;
				float4 ifLocalVar18_g170563 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170563 >= 0.5 )
				ifLocalVar18_g170563 = temp_output_17_0_g170563;
				else
				ifLocalVar18_g170563 = temp_output_3_0_g170563;
				float4 lerpResult22_g170563 = lerp( temp_output_3_0_g170563 , temp_output_17_0_g170563 , temp_output_19_0_g170563);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170563 = lerpResult22_g170563;
				#else
				float4 staticSwitch24_g170563 = ifLocalVar18_g170563;
				#endif
				half4 Flow_Params405_g170496 = staticSwitch24_g170563;
				float4 In_FlowParams204_g170496 = Flow_Params405_g170496;
				{
				Data204_g170496.Dummy = In_Dummy204_g170496;
				Data204_g170496.CoatParams = In_CoatParams204_g170496;
				Data204_g170496.PaintParams = In_PaintParams204_g170496;
				Data204_g170496.GlowParams = In_GlowParams204_g170496;
				Data204_g170496.AtmoParams = In_AtmoParams204_g170496;
				Data204_g170496.FadeParams = In_FadeParams204_g170496;
				Data204_g170496.FormParams= In_FormParams204_g170496;
				Data204_g170496.FlowParams = In_FlowParams204_g170496;
				}
				TVEGlobalData Data15_g170674 = Data204_g170496;
				float Out_Dummy15_g170674 = 0;
				float4 Out_CoatParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_CoatParams15_g170674 = Data15_g170674.CoatParams;
				Out_PaintParams15_g170674 = Data15_g170674.PaintParams;
				Out_GlowParams15_g170674 = Data15_g170674.GlowParams;
				Out_AtmoParams15_g170674= Data15_g170674.AtmoParams;
				Out_FadeParams15_g170674= Data15_g170674.FadeParams;
				Out_FormParams15_g170674 = Data15_g170674.FormParams;
				Out_FlowParams15_g170674 = Data15_g170674.FlowParams;
				}
				half4 Input_FormParams188_g170671 = Out_FormParams15_g170674;
				float temp_output_6_0_g170676 = saturate( (Input_FormParams188_g170671).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170676 = ( temp_output_6_0_g170676 + ( _SizeFadeElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170676 = temp_output_6_0_g170676;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170671 = staticSwitch14_g170676;
				#else
				float staticSwitch194_g170671 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170671 = lerp( 1.0 , staticSwitch194_g170671 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170671 = lerpResult213_g170671;
				float temp_output_189_0_g170671 = ( saturate( ( ( temp_output_9_0_g170675 / ( _SizeFadeDistMinValue - temp_output_7_0_g170675 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170671 );
				float3 appendResult200_g170671 = (float3(temp_output_189_0_g170671 , temp_output_189_0_g170671 , temp_output_189_0_g170671));
				float3 appendResult201_g170671 = (float3(1.0 , temp_output_189_0_g170671 , 1.0));
				float3 lerpResult202_g170671 = lerp( appendResult200_g170671 , appendResult201_g170671 , _SizeFadeScaleMode);
				float3 lerpResult184_g170671 = lerp( temp_cast_5 , lerpResult202_g170671 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170671 = ( lerpResult184_g170671 * Model_PositionOS147_g170671 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170671 = temp_output_167_0_g170671;
				#else
				float3 staticSwitch199_g170671 = Model_PositionOS147_g170671;
				#endif
				half3 Final_Position178_g170671 = staticSwitch199_g170671;
				float3 In_PositionOS16_g170673 = Final_Position178_g170671;
				float3 In_PositionWS16_g170673 = Out_PositionWS15_g170672;
				float3 In_PositionWO16_g170673 = Out_PositionWO15_g170672;
				float3 In_PositionRawOS16_g170673 = Out_PositionRawOS15_g170672;
				float3 In_PositionAddOS16_g170673 = Out_PositionAddOS15_g170672;
				float3 temp_output_210_24_g170671 = Out_PivotOS15_g170672;
				float3 In_PivotOS16_g170673 = temp_output_210_24_g170671;
				float3 In_PivotWS16_g170673 = Out_PivotWS15_g170672;
				float3 In_PivotWO16_g170673 = temp_output_210_19_g170671;
				float3 In_NormalOS16_g170673 = Out_NormalOS15_g170672;
				float3 In_NormalWS16_g170673 = Out_NormalWS15_g170672;
				float3 In_NormalRawOS16_g170673 = Out_NormalRawOS15_g170672;
				float3 In_NormalRawWS16_g170673 = Out_NormalRawWS15_g170672;
				float4 In_TangentOS16_g170673 = Out_TangentOS15_g170672;
				float3 In_ViewDirWS16_g170673 = Out_ViewDirWS15_g170672;
				float4 In_VertexData16_g170673 = Out_VertexData15_g170672;
				float4 In_PhaseData16_g170673 = Out_PhaseData15_g170672;
				float4 In_BoundsData16_g170673 = Out_BoundsData15_g170672;
				float4 In_RotationData16_g170673 = Out_RotationData15_g170672;
				{
				Data16_g170673.Dummy = In_Dummy16_g170673;
				Data16_g170673.PositionOS = In_PositionOS16_g170673;
				Data16_g170673.PositionWS = In_PositionWS16_g170673;
				Data16_g170673.PositionWO = In_PositionWO16_g170673;
				Data16_g170673.PositionRawOS = In_PositionRawOS16_g170673;
				Data16_g170673.PositionAddOS = In_PositionAddOS16_g170673;
				Data16_g170673.PivotOS = In_PivotOS16_g170673;
				Data16_g170673.PivotWS = In_PivotWS16_g170673;
				Data16_g170673.PivotWO = In_PivotWO16_g170673;
				Data16_g170673.NormalOS = In_NormalOS16_g170673;
				Data16_g170673.NormalWS = In_NormalWS16_g170673;
				Data16_g170673.NormalRawOS = In_NormalRawOS16_g170673;
				Data16_g170673.NormalRawWS = In_NormalRawWS16_g170673;
				Data16_g170673.TangentOS = In_TangentOS16_g170673;
				Data16_g170673.ViewDirWS = In_ViewDirWS16_g170673;
				Data16_g170673.VertexData = In_VertexData16_g170673;
				Data16_g170673.PhaseData = In_PhaseData16_g170673;
				Data16_g170673.BoundsData = In_BoundsData16_g170673;
				Data16_g170673.RotationData = In_RotationData16_g170673;
				}
				TVEModelData Data15_g170730 = Data16_g170673;
				float Out_Dummy15_g170730 = 0;
				float3 Out_PositionOS15_g170730 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170730 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170730 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170730 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170730 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170730 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170730 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170730 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170730 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170730 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170730 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170730 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170730 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170730 = float3( 0,0,0 );
				float4 Out_VertexData15_g170730 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170730 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170730 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170730 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170730 = Data15_g170730.Dummy;
				Out_PositionOS15_g170730 = Data15_g170730.PositionOS;
				Out_PositionWS15_g170730 = Data15_g170730.PositionWS;
				Out_PositionWO15_g170730 = Data15_g170730.PositionWO;
				Out_PositionRawOS15_g170730 = Data15_g170730.PositionRawOS;
				Out_PositionAddOS15_g170730 = Data15_g170730.PositionAddOS;
				Out_PivotOS15_g170730 = Data15_g170730.PivotOS;
				Out_PivotWS15_g170730 = Data15_g170730.PivotWS;
				Out_PivotWO15_g170730 = Data15_g170730.PivotWO;
				Out_NormalOS15_g170730 = Data15_g170730.NormalOS;
				Out_NormalWS15_g170730 = Data15_g170730.NormalWS;
				Out_NormalRawOS15_g170730 = Data15_g170730.NormalRawOS;
				Out_NormalRawWS15_g170730 = Data15_g170730.NormalRawWS;
				Out_TangentOS15_g170730 = Data15_g170730.TangentOS;
				Out_ViewDirWS15_g170730 = Data15_g170730.ViewDirWS;
				Out_VertexData15_g170730 = Data15_g170730.VertexData;
				Out_PhaseData15_g170730 = Data15_g170730.PhaseData;
				Out_BoundsData15_g170730 = Data15_g170730.BoundsData;
				Out_RotationData15_g170730 = Data15_g170730.RotationData;
				}
				float3 temp_output_2503_0_g170714 = Out_PositionOS15_g170730;
				float3 In_PositionOS16_g170731 = temp_output_2503_0_g170714;
				float3 temp_output_2503_16_g170714 = Out_PositionWS15_g170730;
				float3 In_PositionWS16_g170731 = temp_output_2503_16_g170714;
				float3 temp_output_2503_17_g170714 = Out_PositionWO15_g170730;
				float3 In_PositionWO16_g170731 = temp_output_2503_17_g170714;
				float3 In_PositionRawOS16_g170731 = Out_PositionRawOS15_g170730;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170714 = Out_VertexData15_g170730;
				half4 Model_VertexMasks518_g170714 = temp_output_2503_29_g170714;
				float4 break1689_g170714 = Model_VertexMasks518_g170714;
				float4 break33_g170715 = _motion_small_vert_mode;
				float temp_output_30_0_g170715 = ( break1689_g170714.x * break33_g170715.x );
				float temp_output_29_0_g170715 = ( break1689_g170714.y * break33_g170715.y );
				float temp_output_31_0_g170715 = ( break1689_g170714.z * break33_g170715.z );
				float temp_output_28_0_g170715 = ( temp_output_30_0_g170715 + temp_output_29_0_g170715 + temp_output_31_0_g170715 + ( break1689_g170714.w * break33_g170715.w ) );
				float temp_output_1727_0_g170714 = temp_output_28_0_g170715;
				float4 temp_output_2503_30_g170714 = Out_BoundsData15_g170730;
				half4 Model_BoundsData1322_g170714 = temp_output_2503_30_g170714;
				float4 break33_g170717 = _motion_small_proc_mode;
				float temp_output_30_0_g170717 = ( (Model_BoundsData1322_g170714).z * break33_g170717.x );
				float temp_output_29_0_g170717 = ( (Model_BoundsData1322_g170714).w * break33_g170717.y );
				float temp_output_1734_0_g170714 = ( temp_output_30_0_g170717 + temp_output_29_0_g170717 );
				float lerpResult1906_g170714 = lerp( temp_output_1727_0_g170714 , temp_output_1734_0_g170714 , _motion_small_mask_mode);
				float enc1805_g170714 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170714 = DecodeFloatToVector2( enc1805_g170714 );
				float2 break1804_g170714 = localDecodeFloatToVector21805_g170714;
				half Small_Mask_Legacy1806_g170714 = break1804_g170714.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170714 = Small_Mask_Legacy1806_g170714;
				#else
				float staticSwitch1800_g170714 = lerpResult1906_g170714;
				#endif
				float clampResult17_g170719 = clamp( staticSwitch1800_g170714 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170728 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170728 = ( clampResult17_g170719 - temp_output_7_0_g170728 );
				float temp_output_6_0_g170726 = saturate( ( ( temp_output_9_0_g170728 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170726 = ( temp_output_6_0_g170726 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170726 = temp_output_6_0_g170726;
				#endif
				half Small_Mask640_g170714 = staticSwitch14_g170726;
				float4 lerpResult836_g170750 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_MotionParams.w);
				half2 Global_WindDirWS2542_g170714 = ((lerpResult836_g170750).xy*2.0 + -1.0);
				half2 Input_WindDirWS803_g170745 = Global_WindDirWS2542_g170714;
				half3 Model_PositionWO162_g170714 = temp_output_2503_17_g170714;
				half3 Input_ModelPositionWO761_g170732 = Model_PositionWO162_g170714;
				float3 temp_output_2503_19_g170714 = Out_PivotWO15_g170730;
				half3 Model_PivotWO402_g170714 = temp_output_2503_19_g170714;
				half3 Input_ModelPivotsWO419_g170732 = Model_PivotWO402_g170714;
				half Input_MotionPivots629_g170732 = _MotionSmallPivotValue;
				float3 lerpResult771_g170732 = lerp( Input_ModelPositionWO761_g170732 , Input_ModelPivotsWO419_g170732 , Input_MotionPivots629_g170732);
				float4 temp_output_2503_27_g170714 = Out_PhaseData15_g170730;
				half4 Model_PhaseData489_g170714 = temp_output_2503_27_g170714;
				half4 Input_ModelMotionData763_g170732 = Model_PhaseData489_g170714;
				half Input_MotionPhase764_g170732 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170714 = ( lerpResult771_g170732 + ( (Input_ModelMotionData763_g170732).z * Input_MotionPhase764_g170732 * 5.0 ) );
				half3 Input_PositionWO419_g170745 = Small_Position1421_g170714;
				half Input_MotionTilling321_g170745 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170745 = ( -(Input_PositionWO419_g170745).xz * Input_MotionTilling321_g170745 * 0.005 );
				float2 temp_output_3_0_g170747 = Noise_Coord515_g170745;
				float2 temp_output_21_0_g170747 = Input_WindDirWS803_g170745;
				float lerpResult128_g170746 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170745 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170745 = ( lerpResult128_g170746 * 0.02 * Input_MotionSpeed62_g170745 );
				float temp_output_15_0_g170747 = Noise_Speed516_g170745;
				float temp_output_23_0_g170747 = frac( temp_output_15_0_g170747 );
				float4 lerpResult39_g170747 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170747 + ( temp_output_21_0_g170747 * temp_output_23_0_g170747 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170747 + ( temp_output_21_0_g170747 * frac( ( temp_output_15_0_g170747 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170747 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170745 = lerpResult39_g170747;
				half2 Noise_DirWS858_g170745 = ((temp_output_635_0_g170745).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170745 = _MotionSmallNoiseValue;
				half Global_WInd769_g170750 = (lerpResult836_g170750).z;
				TVEGlobalData Data15_g170738 = Data204_g170496;
				float Out_Dummy15_g170738 = 0;
				float4 Out_CoatParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170738 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170738 = Data15_g170738.Dummy;
				Out_CoatParams15_g170738 = Data15_g170738.CoatParams;
				Out_PaintParams15_g170738 = Data15_g170738.PaintParams;
				Out_GlowParams15_g170738 = Data15_g170738.GlowParams;
				Out_AtmoParams15_g170738= Data15_g170738.AtmoParams;
				Out_FadeParams15_g170738= Data15_g170738.FadeParams;
				Out_FormParams15_g170738 = Data15_g170738.FormParams;
				Out_FlowParams15_g170738 = Data15_g170738.FlowParams;
				}
				half4 Global_FlowParams2668_g170714 = Out_FlowParams15_g170738;
				half4 Input_GlobalFlow826_g170750 = Global_FlowParams2668_g170714;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170750 = saturate( (Input_GlobalFlow826_g170750).w );
				#else
				float staticSwitch612_g170750 = Global_WInd769_g170750;
				#endif
				float lerpResult853_g170750 = lerp( staticSwitch612_g170750 , saturate( (staticSwitch612_g170750*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170750 = _MotionIntensityValue;
				half Global_WindValue1855_g170714 = ( lerpResult853_g170750 * Input_MotionValue629_g170750 );
				half Input_WindValue881_g170745 = Global_WindValue1855_g170714;
				float lerpResult701_g170745 = lerp( 1.0 , Input_MotionNoise552_g170745 , Input_WindValue881_g170745);
				float2 lerpResult646_g170745 = lerp( Input_WindDirWS803_g170745 , Noise_DirWS858_g170745 , lerpResult701_g170745);
				half2 Small_DirWS817_g170745 = lerpResult646_g170745;
				float2 break823_g170745 = Small_DirWS817_g170745;
				half4 Noise_Params685_g170745 = temp_output_635_0_g170745;
				half Wind_Sinus820_g170745 = ( ((Noise_Params685_g170745).b*2.0 + -1.0) * Input_MotionNoise552_g170745 * 0.6 );
				float3 appendResult824_g170745 = (float3(break823_g170745.x , Wind_Sinus820_g170745 , break823_g170745.y));
				half Input_MotionDelay753_g170745 = _MotionSmallDelayValue;
				float lerpResult756_g170745 = lerp( 1.0 , ( Input_WindValue881_g170745 * Input_WindValue881_g170745 ) , Input_MotionDelay753_g170745);
				half Wind_Delay815_g170745 = lerpResult756_g170745;
				float3 appendResult825_g170745 = (float3(Wind_Delay815_g170745 , 1.0 , Wind_Delay815_g170745));
				float3 temp_output_827_0_g170745 = ( ( appendResult824_g170745 * Input_WindValue881_g170745 ) * appendResult825_g170745 );
				float2 break857_g170745 = Noise_DirWS858_g170745;
				float3 appendResult833_g170745 = (float3(break857_g170745.x , Wind_Sinus820_g170745 , break857_g170745.y));
				half Global_PushWave2675_g170714 = (Input_GlobalFlow826_g170750).z;
				half Input_PushWave890_g170745 = Global_PushWave2675_g170714;
				float2 temp_output_791_0_g170750 = ((Input_GlobalFlow826_g170750).xy*2.0 + -1.0);
				float temp_output_849_0_g170750 = saturate( length( temp_output_791_0_g170750 ) );
				half Global_PushAlpha1504_g170714 = temp_output_849_0_g170750;
				half Input_PushAlpha806_g170745 = ( Global_PushAlpha1504_g170714 * _MotionSmallPushValue );
				float3 lerpResult840_g170745 = lerp( temp_output_827_0_g170745 , ( appendResult833_g170745 * Input_PushWave890_g170745 ) , Input_PushAlpha806_g170745);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170745 = lerpResult840_g170745;
				#else
				float3 staticSwitch829_g170745 = temp_output_827_0_g170745;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half3 Small_Squash1489_g170714 = ( mul( unity_WorldToObject, float4( staticSwitch829_g170745 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Motion789_g170714 = ( _MotionSmallIntensityValue * Small_Mask640_g170714 * Small_Squash1489_g170714 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170714 = Small_Motion789_g170714;
				#else
				float3 staticSwitch495_g170714 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170714 = temp_output_2503_16_g170714;
				half Global_DistMask1820_g170714 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170714 ) / _MotionDistValue ) ) );
				float4 break1710_g170714 = Model_VertexMasks518_g170714;
				float4 break33_g170716 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170716 = ( break1710_g170714.x * break33_g170716.x );
				float temp_output_29_0_g170716 = ( break1710_g170714.y * break33_g170716.y );
				float temp_output_31_0_g170716 = ( break1710_g170714.z * break33_g170716.z );
				float temp_output_28_0_g170716 = ( temp_output_30_0_g170716 + temp_output_29_0_g170716 + temp_output_31_0_g170716 + ( break1710_g170714.w * break33_g170716.w ) );
				float temp_output_1729_0_g170714 = temp_output_28_0_g170716;
				float4 break33_g170718 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170718 = ( (Model_BoundsData1322_g170714).z * break33_g170718.x );
				float temp_output_29_0_g170718 = ( (Model_BoundsData1322_g170714).w * break33_g170718.y );
				float temp_output_1735_0_g170714 = ( temp_output_30_0_g170718 + temp_output_29_0_g170718 );
				float lerpResult1908_g170714 = lerp( temp_output_1729_0_g170714 , temp_output_1735_0_g170714 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170714 = break1804_g170714.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170714 = Tiny_Mask_Legacy1807_g170714;
				#else
				float staticSwitch1810_g170714 = lerpResult1908_g170714;
				#endif
				float clampResult17_g170720 = clamp( staticSwitch1810_g170714 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170729 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170729 = ( clampResult17_g170720 - temp_output_7_0_g170729 );
				float temp_output_6_0_g170721 = saturate( ( ( temp_output_9_0_g170729 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170721 = ( temp_output_6_0_g170721 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170721 = temp_output_6_0_g170721;
				#endif
				half Tiny_Mask218_g170714 = staticSwitch14_g170721;
				float3 temp_output_2503_20_g170714 = Out_NormalOS15_g170730;
				half3 Model_NormalOS554_g170714 = temp_output_2503_20_g170714;
				half3 Input_NormalOS533_g170734 = Model_NormalOS554_g170714;
				half3 Tiny_Position2469_g170714 = Model_PositionWO162_g170714;
				half3 Input_PositionWO500_g170734 = Tiny_Position2469_g170714;
				half Input_MotionTilling321_g170734 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170736 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170734 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170734 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170734).xz * Input_MotionTilling321_g170734 * 0.005 ) + ( lerpResult128_g170736 * Input_MotionSpeed62_g170734 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170734 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170734 = lerp( ( Input_NormalOS533_g170734 * Flutter_Noise535_g170734 ) , Flutter_Noise535_g170734 , Input_MotionNoise542_g170734);
				half3 Input_ModelPositionWO761_g170733 = Model_PositionWO162_g170714;
				half3 Input_ModelPivotsWO419_g170733 = Model_PivotWO402_g170714;
				half Input_MotionPivots629_g170733 = _MotionBasePivotValue;
				float3 lerpResult771_g170733 = lerp( Input_ModelPositionWO761_g170733 , Input_ModelPivotsWO419_g170733 , Input_MotionPivots629_g170733);
				half4 Input_ModelMotionData763_g170733 = Model_PhaseData489_g170714;
				half Input_MotionPhase764_g170733 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170714 = ( lerpResult771_g170733 + ( (Input_ModelMotionData763_g170733).z * Input_MotionPhase764_g170733 * 5.0 ) );
				half3 Input_PositionWO419_g170739 = Base_Position1394_g170714;
				half Input_MotionTilling321_g170739 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170739 = ( -(Input_PositionWO419_g170739).xz * Input_MotionTilling321_g170739 * 0.005 );
				float2 temp_output_3_0_g170741 = Noise_Coord515_g170739;
				half2 Input_WindDirWS803_g170739 = Global_WindDirWS2542_g170714;
				float2 temp_output_21_0_g170741 = Input_WindDirWS803_g170739;
				float lerpResult128_g170740 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170739 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170739 = ( lerpResult128_g170740 * 0.02 * Input_MotionSpeed62_g170739 );
				float temp_output_15_0_g170741 = Noise_Speed516_g170739;
				float temp_output_23_0_g170741 = frac( temp_output_15_0_g170741 );
				float4 lerpResult39_g170741 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170741 + ( temp_output_21_0_g170741 * temp_output_23_0_g170741 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170741 + ( temp_output_21_0_g170741 * frac( ( temp_output_15_0_g170741 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170741 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170739 = lerpResult39_g170741;
				half4 Noise_Params685_g170739 = temp_output_635_0_g170739;
				half Input_WindValue853_g170739 = Global_WindValue1855_g170714;
				float temp_output_855_0_g170739 = ( (Noise_Params685_g170739).a * Input_WindValue853_g170739 );
				half Input_PushWave858_g170739 = Global_PushWave2675_g170714;
				half Input_PushAlpha806_g170739 = ( Global_PushAlpha1504_g170714 * _MotionBasePushValue );
				float lerpResult831_g170739 = lerp( temp_output_855_0_g170739 , Input_PushWave858_g170739 , Input_PushAlpha806_g170739);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170739 = lerpResult831_g170739;
				#else
				float staticSwitch828_g170739 = temp_output_855_0_g170739;
				#endif
				half Base_Wave1159_g170714 = staticSwitch828_g170739;
				float temp_output_888_0_g170745 = ( (Noise_Params685_g170745).b * Input_WindValue881_g170745 );
				float lerpResult867_g170745 = lerp( temp_output_888_0_g170745 , ( (Noise_Params685_g170745).b * Input_PushWave890_g170745 ) , Input_PushAlpha806_g170745);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170745 = lerpResult867_g170745;
				#else
				float staticSwitch886_g170745 = temp_output_888_0_g170745;
				#endif
				half Small_Wave1427_g170714 = staticSwitch886_g170745;
				float lerpResult2422_g170714 = lerp( Base_Wave1159_g170714 , Small_Wave1427_g170714 , _motion_small_mode);
				half Global_Wave1475_g170714 = lerpResult2422_g170714;
				half Input_GlobalWave546_g170734 = Global_Wave1475_g170714;
				float temp_output_548_0_g170734 = ( Input_GlobalWave546_g170734 * Input_GlobalWave546_g170734 );
				half Flutter_Wave556_g170734 = temp_output_548_0_g170734;
				half3 Tiny_Noise859_g170714 = ( lerpResult537_g170734 * Flutter_Wave556_g170734 );
				half3 Tiny_Flutter1451_g170714 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170714 * Tiny_Mask218_g170714 * Tiny_Noise859_g170714 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170714 = Tiny_Flutter1451_g170714;
				#else
				float3 staticSwitch414_g170714 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170714 = ( staticSwitch495_g170714 + staticSwitch414_g170714 );
				float3 In_PositionAddOS16_g170731 = Final_PositionADD1569_g170714;
				float3 temp_output_2503_24_g170714 = Out_PivotOS15_g170730;
				float3 In_PivotOS16_g170731 = temp_output_2503_24_g170714;
				float3 In_PivotWS16_g170731 = Out_PivotWS15_g170730;
				float3 In_PivotWO16_g170731 = temp_output_2503_19_g170714;
				float3 In_NormalOS16_g170731 = temp_output_2503_20_g170714;
				float3 In_NormalWS16_g170731 = Out_NormalWS15_g170730;
				float3 In_NormalRawOS16_g170731 = Out_NormalRawOS15_g170730;
				float3 In_NormalRawWS16_g170731 = Out_NormalRawWS15_g170730;
				float4 In_TangentOS16_g170731 = Out_TangentOS15_g170730;
				float3 In_ViewDirWS16_g170731 = Out_ViewDirWS15_g170730;
				float4 In_VertexData16_g170731 = temp_output_2503_29_g170714;
				float4 In_PhaseData16_g170731 = temp_output_2503_27_g170714;
				float4 In_BoundsData16_g170731 = temp_output_2503_30_g170714;
				float4 break748_g170714 = Model_VertexMasks518_g170714;
				float4 break33_g170723 = _motion_base_vert_mode;
				float temp_output_30_0_g170723 = ( break748_g170714.x * break33_g170723.x );
				float temp_output_29_0_g170723 = ( break748_g170714.y * break33_g170723.y );
				float temp_output_31_0_g170723 = ( break748_g170714.z * break33_g170723.z );
				float temp_output_28_0_g170723 = ( temp_output_30_0_g170723 + temp_output_29_0_g170723 + temp_output_31_0_g170723 + ( break748_g170714.w * break33_g170723.w ) );
				float temp_output_1731_0_g170714 = temp_output_28_0_g170723;
				float4 break33_g170724 = _motion_base_proc_mode;
				float temp_output_30_0_g170724 = ( (Model_BoundsData1322_g170714).z * break33_g170724.x );
				float temp_output_29_0_g170724 = ( (Model_BoundsData1322_g170714).w * break33_g170724.y );
				float temp_output_1733_0_g170714 = ( temp_output_30_0_g170724 + temp_output_29_0_g170724 );
				float lerpResult1904_g170714 = lerp( temp_output_1731_0_g170714 , temp_output_1733_0_g170714 , _motion_base_mask_mode);
				float clampResult17_g170722 = clamp( lerpResult1904_g170714 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170727 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170727 = ( clampResult17_g170722 - temp_output_7_0_g170727 );
				float temp_output_6_0_g170725 = saturate( ( ( temp_output_9_0_g170727 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170725 = ( temp_output_6_0_g170725 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170725 = temp_output_6_0_g170725;
				#endif
				half Base_Mask217_g170714 = staticSwitch14_g170725;
				half2 Noise_DirWS825_g170739 = ((temp_output_635_0_g170739).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170739 = _MotionBaseNoiseValue;
				float lerpResult701_g170739 = lerp( 1.0 , Input_MotionNoise552_g170739 , Input_WindValue853_g170739);
				float2 lerpResult646_g170739 = lerp( Input_WindDirWS803_g170739 , Noise_DirWS825_g170739 , lerpResult701_g170739);
				half Input_MotionDelay753_g170739 = _MotionBaseDelayValue;
				float lerpResult756_g170739 = lerp( 1.0 , ( Input_WindValue853_g170739 * Input_WindValue853_g170739 ) , Input_MotionDelay753_g170739);
				half Wind_Delay815_g170739 = lerpResult756_g170739;
				float2 temp_output_809_0_g170739 = ( lerpResult646_g170739 * Input_WindValue853_g170739 * Wind_Delay815_g170739 );
				half2 Global_PushDirWS1972_g170714 = temp_output_791_0_g170750;
				half2 Input_PushDirWS807_g170739 = Global_PushDirWS1972_g170714;
				float2 lerpResult811_g170739 = lerp( temp_output_809_0_g170739 , Input_PushDirWS807_g170739 , Input_PushAlpha806_g170739);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170739 = lerpResult811_g170739;
				#else
				float2 staticSwitch808_g170739 = temp_output_809_0_g170739;
				#endif
				float2 break83_g170744 = staticSwitch808_g170739;
				float3 appendResult79_g170744 = (float3(break83_g170744.x , 0.0 , break83_g170744.y));
				half2 Base_Bending893_g170714 = (( mul( unity_WorldToObject, float4( appendResult79_g170744 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170714 = ( _MotionBaseIntensityValue * Base_Mask217_g170714 * Base_Bending893_g170714 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170714 = Base_Motion1440_g170714;
				#else
				float2 staticSwitch2384_g170714 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170714 = (float4(staticSwitch2384_g170714 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170714 = appendResult2023_g170714;
				float4 In_RotationData16_g170731 = Final_RotationData1570_g170714;
				{
				Data16_g170731.Dummy = In_Dummy16_g170731;
				Data16_g170731.PositionOS = In_PositionOS16_g170731;
				Data16_g170731.PositionWS = In_PositionWS16_g170731;
				Data16_g170731.PositionWO = In_PositionWO16_g170731;
				Data16_g170731.PositionRawOS = In_PositionRawOS16_g170731;
				Data16_g170731.PositionAddOS = In_PositionAddOS16_g170731;
				Data16_g170731.PivotOS = In_PivotOS16_g170731;
				Data16_g170731.PivotWS = In_PivotWS16_g170731;
				Data16_g170731.PivotWO = In_PivotWO16_g170731;
				Data16_g170731.NormalOS = In_NormalOS16_g170731;
				Data16_g170731.NormalWS = In_NormalWS16_g170731;
				Data16_g170731.NormalRawOS = In_NormalRawOS16_g170731;
				Data16_g170731.NormalRawWS = In_NormalRawWS16_g170731;
				Data16_g170731.TangentOS = In_TangentOS16_g170731;
				Data16_g170731.ViewDirWS = In_ViewDirWS16_g170731;
				Data16_g170731.VertexData = In_VertexData16_g170731;
				Data16_g170731.PhaseData = In_PhaseData16_g170731;
				Data16_g170731.BoundsData = In_BoundsData16_g170731;
				Data16_g170731.RotationData = In_RotationData16_g170731;
				}
				TVEModelData Data15_g170964 = Data16_g170731;
				float Out_Dummy15_g170964 = 0;
				float3 Out_PositionOS15_g170964 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170964 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170964 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170964 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170964 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170964 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170964 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170964 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170964 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170964 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170964 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170964 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170964 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170964 = float3( 0,0,0 );
				float4 Out_VertexData15_g170964 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170964 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170964 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170964 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170964 = Data15_g170964.Dummy;
				Out_PositionOS15_g170964 = Data15_g170964.PositionOS;
				Out_PositionWS15_g170964 = Data15_g170964.PositionWS;
				Out_PositionWO15_g170964 = Data15_g170964.PositionWO;
				Out_PositionRawOS15_g170964 = Data15_g170964.PositionRawOS;
				Out_PositionAddOS15_g170964 = Data15_g170964.PositionAddOS;
				Out_PivotOS15_g170964 = Data15_g170964.PivotOS;
				Out_PivotWS15_g170964 = Data15_g170964.PivotWS;
				Out_PivotWO15_g170964 = Data15_g170964.PivotWO;
				Out_NormalOS15_g170964 = Data15_g170964.NormalOS;
				Out_NormalWS15_g170964 = Data15_g170964.NormalWS;
				Out_NormalRawOS15_g170964 = Data15_g170964.NormalRawOS;
				Out_NormalRawWS15_g170964 = Data15_g170964.NormalRawWS;
				Out_TangentOS15_g170964 = Data15_g170964.TangentOS;
				Out_ViewDirWS15_g170964 = Data15_g170964.ViewDirWS;
				Out_VertexData15_g170964 = Data15_g170964.VertexData;
				Out_PhaseData15_g170964 = Data15_g170964.PhaseData;
				Out_BoundsData15_g170964 = Data15_g170964.BoundsData;
				Out_RotationData15_g170964 = Data15_g170964.RotationData;
				}
				half3 Model_PositionOS147_g170963 = Out_PositionOS15_g170964;
				half3 Input_False58_g170966 = Model_PositionOS147_g170963;
				half3 VertexPos40_g170967 = Model_PositionOS147_g170963;
				half3 VertexPos40_g170968 = VertexPos40_g170967;
				float3 appendResult74_g170968 = (float3(VertexPos40_g170968.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170968 = appendResult74_g170968;
				float3 break84_g170968 = VertexPos40_g170968;
				float3 appendResult81_g170968 = (float3(0.0 , break84_g170968.y , break84_g170968.z));
				half3 VertexPosOtherAxis82_g170968 = appendResult81_g170968;
				float4 temp_output_1567_33_g170963 = Out_RotationData15_g170964;
				half4 Model_VertexBend1569_g170963 = temp_output_1567_33_g170963;
				half2 Angle44_g170967 = (Model_VertexBend1569_g170963).xy;
				half Angle44_g170968 = (Angle44_g170967).y;
				half3 VertexPos40_g170969 = ( VertexPosRotationAxis50_g170968 + ( VertexPosOtherAxis82_g170968 * cos( Angle44_g170968 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170968 ) * sin( Angle44_g170968 ) ) );
				float3 appendResult74_g170969 = (float3(0.0 , 0.0 , VertexPos40_g170969.z));
				half3 VertexPosRotationAxis50_g170969 = appendResult74_g170969;
				float3 break84_g170969 = VertexPos40_g170969;
				float3 appendResult81_g170969 = (float3(break84_g170969.x , break84_g170969.y , 0.0));
				half3 VertexPosOtherAxis82_g170969 = appendResult81_g170969;
				half Angle44_g170969 = -(Angle44_g170967).x;
				half3 Input_True57_g170966 = ( VertexPosRotationAxis50_g170969 + ( VertexPosOtherAxis82_g170969 * cos( Angle44_g170969 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170969 ) * sin( Angle44_g170969 ) ) );
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170966 = Input_True57_g170966;
				#else
				float3 staticSwitch65_g170966 = Input_False58_g170966;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170966 = Input_True57_g170966;
				#else
				float3 staticSwitch69_g170966 = staticSwitch65_g170966;
				#endif
				float3 temp_output_1578_0_g170963 = staticSwitch69_g170966;
				float3 temp_output_1567_31_g170963 = Out_PositionAddOS15_g170964;
				half3 Model_PositionADD1568_g170963 = temp_output_1567_31_g170963;
				half3 Final_PositionOS178_g170963 = ( temp_output_1578_0_g170963 + Model_PositionADD1568_g170963 );
				float3 In_PositionOS16_g170965 = Final_PositionOS178_g170963;
				float3 In_PositionWS16_g170965 = Out_PositionWS15_g170964;
				float3 In_PositionWO16_g170965 = Out_PositionWO15_g170964;
				float3 In_PositionRawOS16_g170965 = Out_PositionRawOS15_g170964;
				float3 In_PositionAddOS16_g170965 = temp_output_1567_31_g170963;
				float3 In_PivotOS16_g170965 = Out_PivotOS15_g170964;
				float3 In_PivotWS16_g170965 = Out_PivotWS15_g170964;
				float3 In_PivotWO16_g170965 = Out_PivotWO15_g170964;
				float3 In_NormalOS16_g170965 = Out_NormalOS15_g170964;
				float3 In_NormalWS16_g170965 = Out_NormalWS15_g170964;
				float3 In_NormalRawOS16_g170965 = Out_NormalRawOS15_g170964;
				float3 In_NormalRawWS16_g170965 = Out_NormalRawWS15_g170964;
				float4 In_TangentOS16_g170965 = Out_TangentOS15_g170964;
				float3 In_ViewDirWS16_g170965 = Out_ViewDirWS15_g170964;
				float4 In_VertexData16_g170965 = Out_VertexData15_g170964;
				float4 In_PhaseData16_g170965 = Out_PhaseData15_g170964;
				float4 In_BoundsData16_g170965 = Out_BoundsData15_g170964;
				float4 In_RotationData16_g170965 = temp_output_1567_33_g170963;
				{
				Data16_g170965.Dummy = In_Dummy16_g170965;
				Data16_g170965.PositionOS = In_PositionOS16_g170965;
				Data16_g170965.PositionWS = In_PositionWS16_g170965;
				Data16_g170965.PositionWO = In_PositionWO16_g170965;
				Data16_g170965.PositionRawOS = In_PositionRawOS16_g170965;
				Data16_g170965.PositionAddOS = In_PositionAddOS16_g170965;
				Data16_g170965.PivotOS = In_PivotOS16_g170965;
				Data16_g170965.PivotWS = In_PivotWS16_g170965;
				Data16_g170965.PivotWO = In_PivotWO16_g170965;
				Data16_g170965.NormalOS = In_NormalOS16_g170965;
				Data16_g170965.NormalWS = In_NormalWS16_g170965;
				Data16_g170965.NormalRawOS = In_NormalRawOS16_g170965;
				Data16_g170965.NormalRawWS = In_NormalRawWS16_g170965;
				Data16_g170965.TangentOS = In_TangentOS16_g170965;
				Data16_g170965.ViewDirWS = In_ViewDirWS16_g170965;
				Data16_g170965.VertexData = In_VertexData16_g170965;
				Data16_g170965.PhaseData = In_PhaseData16_g170965;
				Data16_g170965.BoundsData = In_BoundsData16_g170965;
				Data16_g170965.RotationData = In_RotationData16_g170965;
				}
				TVEModelData Data15_g170988 = Data16_g170965;
				float Out_Dummy15_g170988 = 0;
				float3 Out_PositionOS15_g170988 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170988 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170988 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170988 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170988 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170988 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170988 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170988 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170988 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170988 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170988 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170988 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170988 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170988 = float3( 0,0,0 );
				float4 Out_VertexData15_g170988 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170988 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170988 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170988 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170988 = Data15_g170988.Dummy;
				Out_PositionOS15_g170988 = Data15_g170988.PositionOS;
				Out_PositionWS15_g170988 = Data15_g170988.PositionWS;
				Out_PositionWO15_g170988 = Data15_g170988.PositionWO;
				Out_PositionRawOS15_g170988 = Data15_g170988.PositionRawOS;
				Out_PositionAddOS15_g170988 = Data15_g170988.PositionAddOS;
				Out_PivotOS15_g170988 = Data15_g170988.PivotOS;
				Out_PivotWS15_g170988 = Data15_g170988.PivotWS;
				Out_PivotWO15_g170988 = Data15_g170988.PivotWO;
				Out_NormalOS15_g170988 = Data15_g170988.NormalOS;
				Out_NormalWS15_g170988 = Data15_g170988.NormalWS;
				Out_NormalRawOS15_g170988 = Data15_g170988.NormalRawOS;
				Out_NormalRawWS15_g170988 = Data15_g170988.NormalRawWS;
				Out_TangentOS15_g170988 = Data15_g170988.TangentOS;
				Out_ViewDirWS15_g170988 = Data15_g170988.ViewDirWS;
				Out_VertexData15_g170988 = Data15_g170988.VertexData;
				Out_PhaseData15_g170988 = Data15_g170988.PhaseData;
				Out_BoundsData15_g170988 = Data15_g170988.BoundsData;
				Out_RotationData15_g170988 = Data15_g170988.RotationData;
				}
				float3 In_PositionOS16_g170989 = Out_PositionOS15_g170988;
				float3 In_PositionWS16_g170989 = Out_PositionWS15_g170988;
				float3 temp_output_1567_17_g170987 = Out_PositionWO15_g170988;
				float3 In_PositionWO16_g170989 = temp_output_1567_17_g170987;
				float3 temp_output_1567_26_g170987 = Out_PositionRawOS15_g170988;
				float3 In_PositionRawOS16_g170989 = temp_output_1567_26_g170987;
				float3 In_PositionAddOS16_g170989 = Out_PositionAddOS15_g170988;
				float3 In_PivotOS16_g170989 = Out_PivotOS15_g170988;
				float3 In_PivotWS16_g170989 = Out_PivotWS15_g170988;
				float3 In_PivotWO16_g170989 = Out_PivotWO15_g170988;
				half3 Model_NormalOS1568_g170987 = Out_NormalOS15_g170988;
				float3 lerpResult1589_g170987 = lerp( Model_NormalOS1568_g170987 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170987 = temp_output_1567_26_g170987;
				float3 normalizeResult1594_g170987 = ASESafeNormalize( ( Model_PositionRAW1592_g170987 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170987 = lerp( lerpResult1589_g170987 , normalizeResult1594_g170987 , _NormalSphereValue);
				half3 Input_False58_g171002 = lerpResult1585_g170987;
				half3 VertexPos40_g170991 = lerpResult1585_g170987;
				half3 VertexPos40_g170992 = VertexPos40_g170991;
				float3 appendResult74_g170992 = (float3(VertexPos40_g170992.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170992 = appendResult74_g170992;
				float3 break84_g170992 = VertexPos40_g170992;
				float3 appendResult81_g170992 = (float3(0.0 , break84_g170992.y , break84_g170992.z));
				half3 VertexPosOtherAxis82_g170992 = appendResult81_g170992;
				float4 temp_output_1567_33_g170987 = Out_RotationData15_g170988;
				half4 Model_RotationData1583_g170987 = temp_output_1567_33_g170987;
				half2 Angle44_g170991 = Model_RotationData1583_g170987.xy;
				half Angle44_g170992 = (Angle44_g170991).y;
				half3 VertexPos40_g170993 = ( VertexPosRotationAxis50_g170992 + ( VertexPosOtherAxis82_g170992 * cos( Angle44_g170992 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170992 ) * sin( Angle44_g170992 ) ) );
				float3 appendResult74_g170993 = (float3(0.0 , 0.0 , VertexPos40_g170993.z));
				half3 VertexPosRotationAxis50_g170993 = appendResult74_g170993;
				float3 break84_g170993 = VertexPos40_g170993;
				float3 appendResult81_g170993 = (float3(break84_g170993.x , break84_g170993.y , 0.0));
				half3 VertexPosOtherAxis82_g170993 = appendResult81_g170993;
				half Angle44_g170993 = -(Angle44_g170991).x;
				float3 lerpResult1591_g170987 = lerp( lerpResult1585_g170987 , ( VertexPosRotationAxis50_g170993 + ( VertexPosOtherAxis82_g170993 * cos( Angle44_g170993 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170993 ) * sin( Angle44_g170993 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g171002 = lerpResult1591_g170987;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g171002 = Input_True57_g171002;
				#else
				float3 staticSwitch65_g171002 = Input_False58_g171002;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g171002 = Input_True57_g171002;
				#else
				float3 staticSwitch69_g171002 = staticSwitch65_g171002;
				#endif
				float3 temp_output_1715_0_g170987 = staticSwitch69_g171002;
				float4 temp_output_1567_29_g170987 = Out_VertexData15_g170988;
				half4 Model_VertexData1608_g170987 = temp_output_1567_29_g170987;
				float4 break1683_g170987 = Model_VertexData1608_g170987;
				float4 break33_g170994 = _normal_vert_mode;
				float temp_output_30_0_g170994 = ( break1683_g170987.x * break33_g170994.x );
				float temp_output_29_0_g170994 = ( break1683_g170987.y * break33_g170994.y );
				float temp_output_31_0_g170994 = ( break1683_g170987.z * break33_g170994.z );
				float temp_output_28_0_g170994 = ( temp_output_30_0_g170994 + temp_output_29_0_g170994 + temp_output_31_0_g170994 + ( break1683_g170987.w * break33_g170994.w ) );
				float clampResult17_g170995 = clamp( temp_output_28_0_g170994 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170999 = _NormalMeshRemap.x;
				float temp_output_9_0_g170999 = ( clampResult17_g170995 - temp_output_7_0_g170999 );
				float lerpResult1695_g170987 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170999 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170996 = lerpResult1695_g170987;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170996 = ( temp_output_6_0_g170996 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170996 = temp_output_6_0_g170996;
				#endif
				float temp_output_1690_0_g170987 = staticSwitch14_g170996;
				half Normal_MeskMask1691_g170987 = temp_output_1690_0_g170987;
				half Normal_Proj_Mask1647_g170987 = 1.0;
				float temp_output_1699_0_g170987 = ( Normal_MeskMask1691_g170987 * Normal_Proj_Mask1647_g170987 );
				float3 lerpResult1670_g170987 = lerp( Model_NormalOS1568_g170987 , temp_output_1715_0_g170987 , temp_output_1699_0_g170987);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170987 = lerpResult1670_g170987;
				#else
				float3 staticSwitch1716_g170987 = Model_NormalOS1568_g170987;
				#endif
				half3 Final_NormalOS178_g170987 = staticSwitch1716_g170987;
				float3 In_NormalOS16_g170989 = Final_NormalOS178_g170987;
				float3 temp_output_1567_21_g170987 = Out_NormalWS15_g170988;
				float3 In_NormalWS16_g170989 = temp_output_1567_21_g170987;
				float3 In_NormalRawOS16_g170989 = Out_NormalRawOS15_g170988;
				float3 In_NormalRawWS16_g170989 = Out_NormalRawWS15_g170988;
				float4 In_TangentOS16_g170989 = Out_TangentOS15_g170988;
				float3 In_ViewDirWS16_g170989 = Out_ViewDirWS15_g170988;
				float4 In_VertexData16_g170989 = temp_output_1567_29_g170987;
				float4 In_PhaseData16_g170989 = Out_PhaseData15_g170988;
				float4 In_BoundsData16_g170989 = Out_BoundsData15_g170988;
				float4 In_RotationData16_g170989 = temp_output_1567_33_g170987;
				{
				Data16_g170989.Dummy = In_Dummy16_g170989;
				Data16_g170989.PositionOS = In_PositionOS16_g170989;
				Data16_g170989.PositionWS = In_PositionWS16_g170989;
				Data16_g170989.PositionWO = In_PositionWO16_g170989;
				Data16_g170989.PositionRawOS = In_PositionRawOS16_g170989;
				Data16_g170989.PositionAddOS = In_PositionAddOS16_g170989;
				Data16_g170989.PivotOS = In_PivotOS16_g170989;
				Data16_g170989.PivotWS = In_PivotWS16_g170989;
				Data16_g170989.PivotWO = In_PivotWO16_g170989;
				Data16_g170989.NormalOS = In_NormalOS16_g170989;
				Data16_g170989.NormalWS = In_NormalWS16_g170989;
				Data16_g170989.NormalRawOS = In_NormalRawOS16_g170989;
				Data16_g170989.NormalRawWS = In_NormalRawWS16_g170989;
				Data16_g170989.TangentOS = In_TangentOS16_g170989;
				Data16_g170989.ViewDirWS = In_ViewDirWS16_g170989;
				Data16_g170989.VertexData = In_VertexData16_g170989;
				Data16_g170989.PhaseData = In_PhaseData16_g170989;
				Data16_g170989.BoundsData = In_BoundsData16_g170989;
				Data16_g170989.RotationData = In_RotationData16_g170989;
				}
				TVEModelData Data15_g171012 = Data16_g170989;
				float Out_Dummy15_g171012 = 0;
				float3 Out_PositionOS15_g171012 = float3( 0,0,0 );
				float3 Out_PositionWS15_g171012 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171012 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g171012 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g171012 = float3( 0,0,0 );
				float3 Out_PivotOS15_g171012 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171012 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171012 = float3( 0,0,0 );
				float3 Out_NormalOS15_g171012 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171012 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g171012 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g171012 = float3( 0,0,0 );
				float4 Out_TangentOS15_g171012 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g171012 = float3( 0,0,0 );
				float4 Out_VertexData15_g171012 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g171012 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171012 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g171012 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g171012 = Data15_g171012.Dummy;
				Out_PositionOS15_g171012 = Data15_g171012.PositionOS;
				Out_PositionWS15_g171012 = Data15_g171012.PositionWS;
				Out_PositionWO15_g171012 = Data15_g171012.PositionWO;
				Out_PositionRawOS15_g171012 = Data15_g171012.PositionRawOS;
				Out_PositionAddOS15_g171012 = Data15_g171012.PositionAddOS;
				Out_PivotOS15_g171012 = Data15_g171012.PivotOS;
				Out_PivotWS15_g171012 = Data15_g171012.PivotWS;
				Out_PivotWO15_g171012 = Data15_g171012.PivotWO;
				Out_NormalOS15_g171012 = Data15_g171012.NormalOS;
				Out_NormalWS15_g171012 = Data15_g171012.NormalWS;
				Out_NormalRawOS15_g171012 = Data15_g171012.NormalRawOS;
				Out_NormalRawWS15_g171012 = Data15_g171012.NormalRawWS;
				Out_TangentOS15_g171012 = Data15_g171012.TangentOS;
				Out_ViewDirWS15_g171012 = Data15_g171012.ViewDirWS;
				Out_VertexData15_g171012 = Data15_g171012.VertexData;
				Out_PhaseData15_g171012 = Data15_g171012.PhaseData;
				Out_BoundsData15_g171012 = Data15_g171012.BoundsData;
				Out_RotationData15_g171012 = Data15_g171012.RotationData;
				}
				float3 temp_output_217_24_g171011 = Out_PivotOS15_g171012;
				float3 In_PositionOS16_g171013 = ( Out_PositionOS15_g171012 + temp_output_217_24_g171011 );
				float3 In_PositionWS16_g171013 = Out_PositionWS15_g171012;
				float3 In_PositionWO16_g171013 = Out_PositionWO15_g171012;
				float3 In_PositionRawOS16_g171013 = Out_PositionRawOS15_g171012;
				float3 In_PositionAddOS16_g171013 = Out_PositionAddOS15_g171012;
				float3 In_PivotOS16_g171013 = temp_output_217_24_g171011;
				float3 In_PivotWS16_g171013 = Out_PivotWS15_g171012;
				float3 In_PivotWO16_g171013 = Out_PivotWO15_g171012;
				float3 In_NormalOS16_g171013 = Out_NormalOS15_g171012;
				float3 In_NormalWS16_g171013 = Out_NormalWS15_g171012;
				float3 In_NormalRawOS16_g171013 = Out_NormalRawOS15_g171012;
				float3 In_NormalRawWS16_g171013 = Out_NormalRawWS15_g171012;
				float4 In_TangentOS16_g171013 = Out_TangentOS15_g171012;
				float3 In_ViewDirWS16_g171013 = Out_ViewDirWS15_g171012;
				float4 In_VertexData16_g171013 = Out_VertexData15_g171012;
				float4 In_PhaseData16_g171013 = Out_PhaseData15_g171012;
				float4 In_BoundsData16_g171013 = Out_BoundsData15_g171012;
				float4 In_RotationData16_g171013 = Out_RotationData15_g171012;
				{
				Data16_g171013.Dummy = In_Dummy16_g171013;
				Data16_g171013.PositionOS = In_PositionOS16_g171013;
				Data16_g171013.PositionWS = In_PositionWS16_g171013;
				Data16_g171013.PositionWO = In_PositionWO16_g171013;
				Data16_g171013.PositionRawOS = In_PositionRawOS16_g171013;
				Data16_g171013.PositionAddOS = In_PositionAddOS16_g171013;
				Data16_g171013.PivotOS = In_PivotOS16_g171013;
				Data16_g171013.PivotWS = In_PivotWS16_g171013;
				Data16_g171013.PivotWO = In_PivotWO16_g171013;
				Data16_g171013.NormalOS = In_NormalOS16_g171013;
				Data16_g171013.NormalWS = In_NormalWS16_g171013;
				Data16_g171013.NormalRawOS = In_NormalRawOS16_g171013;
				Data16_g171013.NormalRawWS = In_NormalRawWS16_g171013;
				Data16_g171013.TangentOS = In_TangentOS16_g171013;
				Data16_g171013.ViewDirWS = In_ViewDirWS16_g171013;
				Data16_g171013.VertexData = In_VertexData16_g171013;
				Data16_g171013.PhaseData = In_PhaseData16_g171013;
				Data16_g171013.BoundsData = In_BoundsData16_g171013;
				Data16_g171013.RotationData = In_RotationData16_g171013;
				}
				TVEModelData Data15_g171018 = Data16_g171013;
				float Out_Dummy15_g171018 = 0;
				float3 Out_PositionOS15_g171018 = float3( 0,0,0 );
				float3 Out_PositionWS15_g171018 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171018 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g171018 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g171018 = float3( 0,0,0 );
				float3 Out_PivotOS15_g171018 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171018 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171018 = float3( 0,0,0 );
				float3 Out_NormalOS15_g171018 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171018 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g171018 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g171018 = float3( 0,0,0 );
				float4 Out_TangentOS15_g171018 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g171018 = float3( 0,0,0 );
				float4 Out_VertexData15_g171018 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g171018 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171018 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g171018 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g171018 = Data15_g171018.Dummy;
				Out_PositionOS15_g171018 = Data15_g171018.PositionOS;
				Out_PositionWS15_g171018 = Data15_g171018.PositionWS;
				Out_PositionWO15_g171018 = Data15_g171018.PositionWO;
				Out_PositionRawOS15_g171018 = Data15_g171018.PositionRawOS;
				Out_PositionAddOS15_g171018 = Data15_g171018.PositionAddOS;
				Out_PivotOS15_g171018 = Data15_g171018.PivotOS;
				Out_PivotWS15_g171018 = Data15_g171018.PivotWS;
				Out_PivotWO15_g171018 = Data15_g171018.PivotWO;
				Out_NormalOS15_g171018 = Data15_g171018.NormalOS;
				Out_NormalWS15_g171018 = Data15_g171018.NormalWS;
				Out_NormalRawOS15_g171018 = Data15_g171018.NormalRawOS;
				Out_NormalRawWS15_g171018 = Data15_g171018.NormalRawWS;
				Out_TangentOS15_g171018 = Data15_g171018.TangentOS;
				Out_ViewDirWS15_g171018 = Data15_g171018.ViewDirWS;
				Out_VertexData15_g171018 = Data15_g171018.VertexData;
				Out_PhaseData15_g171018 = Data15_g171018.PhaseData;
				Out_BoundsData15_g171018 = Data15_g171018.BoundsData;
				Out_RotationData15_g171018 = Data15_g171018.RotationData;
				}
				float3 temp_output_31_0_g171015 = Out_PositionOS15_g171018;
				float3 temp_output_6_0_g171029 = ( temp_output_31_0_g171015 + _DisableSRPBatcher );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g171029 = ( temp_output_6_0_g171029 + ( 0.0 * 0.0 ) );
				#else
				float3 staticSwitch14_g171029 = temp_output_6_0_g171029;
				#endif
				
				o.ase_texcoord11.xyz = vertexToFrag73_g170478;
				o.ase_texcoord12.xyz = vertexToFrag76_g170478;
				float temp_output_6_0_g170737 = ( _MotionHighlightValue * Global_DistMask1820_g170714 * ( Tiny_Mask218_g170714 * Tiny_Mask218_g170714 ) * ( Global_Wave1475_g170714 * Global_Wave1475_g170714 * Global_Wave1475_g170714 * Global_Wave1475_g170714 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170737 = ( temp_output_6_0_g170737 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170737 = temp_output_6_0_g170737;
				#endif
				half Wave_Mask1263 = staticSwitch14_g170737;
				float4 appendResult23_g170817 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1263));
				float4 vertexToFrag24_g170817 = appendResult23_g170817;
				o.ase_texcoord13 = vertexToFrag24_g170817;
				
				o.ase_texcoord9 = v.ase_texcoord;
				o.ase_texcoord10.xy = v.texcoord2.xyzw.xy;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord10.zw = 0;
				o.ase_texcoord11.w = 0;
				o.ase_texcoord12.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = staticSwitch14_g171029;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g171018;
				v.tangent = Out_TangentOS15_g171018;

				o.pos = UnityObjectToClipPos(v.vertex);
				float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
				fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);
				fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
				fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
				fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
				o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
				o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
				o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);

				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_TRANSFER_LIGHTING(o, v.texcoord1.xy);
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_TRANSFER_SHADOW(o, v.texcoord1.xy);
					#else
						TRANSFER_SHADOW(o);
					#endif
				#endif

				#ifdef ASE_FOG
					UNITY_TRANSFER_FOG(o,o.pos);
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
					o.screenPos = ComputeScreenPos(o.pos);
				#endif
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag ( v2f IN , bool ase_vface : SV_IsFrontFace
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float3 WorldTangent = float3(IN.tSpace0.x,IN.tSpace1.x,IN.tSpace2.x);
				float3 WorldBiTangent = float3(IN.tSpace0.y,IN.tSpace1.y,IN.tSpace2.y);
				float3 WorldNormal = float3(IN.tSpace0.z,IN.tSpace1.z,IN.tSpace2.z);
				float3 worldPos = float3(IN.tSpace0.w,IN.tSpace1.w,IN.tSpace2.w);
				float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
				#if defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
				#else
					half atten = 1;
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 ScreenPos = IN.screenPos;
				#endif


				float localBreakData4_g171021 = ( 0.0 );
				float localCompData3_g171005 = ( 0.0 );
				TVEVisualData Data3_g171005 = (TVEVisualData)0;
				half Dummy145_g171003 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g171005 = Dummy145_g171003;
				float localBreakData4_g171004 = ( 0.0 );
				float localCompData3_g170976 = ( 0.0 );
				TVEVisualData Data3_g170976 = (TVEVisualData)0;
				half Dummy145_g170971 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170976 = Dummy145_g170971;
				float localBreakData4_g170975 = ( 0.0 );
				float localCompData3_g170953 = ( 0.0 );
				TVEVisualData Data3_g170953 = (TVEVisualData)0;
				half Dummy594_g170950 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170953 = Dummy594_g170950;
				float localBreakData4_g170952 = ( 0.0 );
				float localCompData3_g170936 = ( 0.0 );
				TVEVisualData Data3_g170936 = (TVEVisualData)0;
				half Dummy594_g170935 = ( _CutoutCategory + _CutoutEnd + _CutoutBakeMode );
				float In_Dummy3_g170936 = Dummy594_g170935;
				float localBreakData4_g170938 = ( 0.0 );
				float localCompData3_g170908 = ( 0.0 );
				TVEVisualData Data3_g170908 = (TVEVisualData)0;
				half Dummy594_g170906 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170908 = Dummy594_g170906;
				float localBreakData4_g170907 = ( 0.0 );
				float localCompData3_g170872 = ( 0.0 );
				TVEVisualData Data3_g170872 = (TVEVisualData)0;
				half Dummy594_g170869 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170872 = Dummy594_g170869;
				float localBreakData4_g170870 = ( 0.0 );
				float localCompData3_g170868 = ( 0.0 );
				TVEVisualData Data3_g170868 = (TVEVisualData)0;
				float In_Dummy3_g170868 = 0.0;
				float localBreakData4_g170867 = ( 0.0 );
				float localCompData3_g170845 = ( 0.0 );
				TVEVisualData Data3_g170845 = (TVEVisualData)0;
				half Dummy205_g170842 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170845 = Dummy205_g170842;
				float localBreakData4_g170844 = ( 0.0 );
				float localCompData3_g170822 = ( 0.0 );
				TVEVisualData Data3_g170822 = (TVEVisualData)0;
				half Dummy205_g170818 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170822 = Dummy205_g170818;
				float localBreakData4_g170823 = ( 0.0 );
				float localCompData3_g170811 = ( 0.0 );
				TVEVisualData Data3_g170811 = (TVEVisualData)0;
				half Dummy220_g170808 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170811 = Dummy220_g170808;
				float localBreakData4_g170810 = ( 0.0 );
				float localCompData3_g170801 = ( 0.0 );
				TVEVisualData Data3_g170801 = (TVEVisualData)0;
				half Dummy220_g170798 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170801 = Dummy220_g170798;
				float localBreakData4_g170800 = ( 0.0 );
				float localCompData3_g170790 = ( 0.0 );
				TVEVisualData Data3_g170790 = (TVEVisualData)0;
				half Dummy202_g170788 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170790 = Dummy202_g170788;
				float localBreakData4_g170789 = ( 0.0 );
				float localCompData3_g170687 = ( 0.0 );
				TVEVisualData Data3_g170687 = (TVEVisualData)0;
				half4 Dummy944_g170678 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170687 = Dummy944_g170678.x;
				float localBreakData4_g170686 = ( 0.0 );
				float localCompData3_g170655 = ( 0.0 );
				TVEVisualData Data3_g170655 = (TVEVisualData)0;
				half4 Dummy946_g170634 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170655 = Dummy946_g170634.x;
				float localBreakData4_g170645 = ( 0.0 );
				float localCompData3_g170632 = ( 0.0 );
				TVEVisualData Data3_g170632 = (TVEVisualData)0;
				half4 Dummy130_g170617 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170632 = Dummy130_g170617.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170625) = _MainAlbedoTex;
				float localFilterTexture19_g170628 = ( 0.0 );
				SamplerState SS19_g170628 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170628 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170628 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170628 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170628 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170628 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170628 = SamplerDefault19_g170628;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170628 = SamplerDefault19_g170628;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170628 = SamplerPoint19_g170628;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170628 = SamplerLow19_g170628;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170628 = SamplerMedium19_g170628;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170628 = SamplerHigh19_g170628;
				#endif
				}
				SamplerState Sampler276_g170625 = SS19_g170628;
				half4 Local_Coords180_g170617 = _main_coord_value;
				float4 temp_output_37_0_g170625 = Local_Coords180_g170617;
				half4 Coords276_g170625 = temp_output_37_0_g170625;
				half2 TexCoord276_g170625 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170625 = SampleMain( Texture276_g170625 , Sampler276_g170625 , Coords276_g170625 , TexCoord276_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170625) = _MainAlbedoTex;
				SamplerState Sampler275_g170625 = SS19_g170628;
				half4 Coords275_g170625 = temp_output_37_0_g170625;
				half2 TexCoord275_g170625 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170625 = SampleExtra( Texture275_g170625 , Sampler275_g170625 , Coords275_g170625 , TexCoord275_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170625) = _MainAlbedoTex;
				SamplerState Sampler238_g170625 = SS19_g170628;
				half4 Coords238_g170625 = temp_output_37_0_g170625;
				TVEModelData Data16_g170483 = (TVEModelData)0;
				float In_Dummy16_g170483 = 0.0;
				float3 vertexToFrag73_g170478 = IN.ase_texcoord11.xyz;
				half3 PositionWS122_g170478 = vertexToFrag73_g170478;
				float3 In_PositionWS16_g170483 = PositionWS122_g170478;
				float3 vertexToFrag76_g170478 = IN.ase_texcoord12.xyz;
				half3 PivotWS121_g170478 = vertexToFrag76_g170478;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
				#else
				float3 staticSwitch204_g170478 = PositionWS122_g170478;
				#endif
				half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170483 = PositionWO132_g170478;
				float3 In_PivotWS16_g170483 = PivotWS121_g170478;
				half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170483 = PivotWO133_g170478;
				float3 normalizedWorldNormal = normalize( WorldNormal );
				half3 Normal_WS95_g170478 = normalizedWorldNormal;
				float3 In_NormalWS16_g170483 = Normal_WS95_g170478;
				float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
				half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
				float3 In_ViewDirWS16_g170483 = ViewDirWS169_g170478;
				half4 VertexMasks171_g170478 = IN.ase_color;
				float4 In_VertexData16_g170483 = VertexMasks171_g170478;
				float4 In_BoundsData16_g170483 = float4( 1,1,1,1 );
				{
				Data16_g170483.Dummy = In_Dummy16_g170483;
				Data16_g170483.PositionWS = In_PositionWS16_g170483;
				Data16_g170483.PositionWO = In_PositionWO16_g170483;
				Data16_g170483.PivotWS = In_PivotWS16_g170483;
				Data16_g170483.PivotWO = In_PivotWO16_g170483;
				Data16_g170483.NormalWS = In_NormalWS16_g170483;
				Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
				Data16_g170483.VertexData = In_VertexData16_g170483;
				Data16_g170483.BoundsData = In_BoundsData16_g170483;
				}
				TVEModelData Data15_g170631 = Data16_g170483;
				float Out_Dummy15_g170631 = 0;
				float3 Out_PositionWS15_g170631 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170631 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170631 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170631 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170631 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170631 = float3( 0,0,0 );
				float4 Out_VertexData15_g170631 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170631 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170631 = Data15_g170631.Dummy;
				Out_PositionWS15_g170631 = Data15_g170631.PositionWS;
				Out_PositionWO15_g170631 = Data15_g170631.PositionWO;
				Out_PivotWS15_g170631 = Data15_g170631.PivotWS;
				Out_PivotWO15_g170631 = Data15_g170631.PivotWO;
				Out_NormalWS15_g170631 = Data15_g170631.NormalWS;
				Out_ViewDirWS15_g170631 = Data15_g170631.ViewDirWS;
				Out_VertexData15_g170631 = Data15_g170631.VertexData;
				Out_BoundsData15_g170631 = Data15_g170631.BoundsData;
				}
				half3 Model_PositionWO222_g170617 = Out_PositionWO15_g170631;
				float3 temp_output_279_0_g170625 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170625 = temp_output_279_0_g170625;
				half4 localSamplePlanar2D238_g170625 = SamplePlanar2D( Texture238_g170625 , Sampler238_g170625 , Coords238_g170625 , WorldPosition238_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170625) = _MainAlbedoTex;
				SamplerState Sampler246_g170625 = SS19_g170628;
				half4 Coords246_g170625 = temp_output_37_0_g170625;
				half3 WorldPosition246_g170625 = temp_output_279_0_g170625;
				half3 Model_NormalWS226_g170617 = Out_NormalWS15_g170631;
				float3 temp_output_280_0_g170625 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170625 = temp_output_280_0_g170625;
				half4 localSamplePlanar3D246_g170625 = SamplePlanar3D( Texture246_g170625 , Sampler246_g170625 , Coords246_g170625 , WorldPosition246_g170625 , WorldNormal246_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170625) = _MainAlbedoTex;
				SamplerState Sampler234_g170625 = SS19_g170628;
				float4 Coords234_g170625 = temp_output_37_0_g170625;
				float3 WorldPosition234_g170625 = temp_output_279_0_g170625;
				float4 localSampleStochastic2D234_g170625 = SampleStochastic2D( Texture234_g170625 , Sampler234_g170625 , Coords234_g170625 , WorldPosition234_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170625) = _MainAlbedoTex;
				SamplerState Sampler263_g170625 = SS19_g170628;
				half4 Coords263_g170625 = temp_output_37_0_g170625;
				half3 WorldPosition263_g170625 = temp_output_279_0_g170625;
				half3 WorldNormal263_g170625 = temp_output_280_0_g170625;
				half4 localSampleStochastic3D263_g170625 = SampleStochastic3D( Texture263_g170625 , Sampler263_g170625 , Coords263_g170625 , WorldPosition263_g170625 , WorldNormal263_g170625 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170617 = localSampleMain276_g170625;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170617 = localSampleExtra275_g170625;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170617 = localSamplePlanar2D238_g170625;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170617 = localSamplePlanar3D246_g170625;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170617 = localSampleStochastic2D234_g170625;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170617 = localSampleStochastic3D263_g170625;
				#else
				float4 staticSwitch184_g170617 = localSampleMain276_g170625;
				#endif
				half4 Local_AlbedoTex185_g170617 = staticSwitch184_g170617;
				float3 lerpResult53_g170617 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170617).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170617 = lerpResult53_g170617;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170627) = _MainShaderTex;
				float localFilterTexture30_g170630 = ( 0.0 );
				SamplerState SS30_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170630 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170630 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170630 = SamplerDefault30_g170630;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170630 = SamplerDefault30_g170630;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170630 = SamplerPoint30_g170630;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170630 = SamplerLow30_g170630;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170630 = SamplerMedium30_g170630;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170630 = SamplerHigh30_g170630;
				#endif
				}
				SamplerState Sampler276_g170627 = SS30_g170630;
				float4 temp_output_37_0_g170627 = Local_Coords180_g170617;
				half4 Coords276_g170627 = temp_output_37_0_g170627;
				half2 TexCoord276_g170627 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170627 = SampleMain( Texture276_g170627 , Sampler276_g170627 , Coords276_g170627 , TexCoord276_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170627) = _MainShaderTex;
				SamplerState Sampler275_g170627 = SS30_g170630;
				half4 Coords275_g170627 = temp_output_37_0_g170627;
				half2 TexCoord275_g170627 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170627 = SampleExtra( Texture275_g170627 , Sampler275_g170627 , Coords275_g170627 , TexCoord275_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170627) = _MainShaderTex;
				SamplerState Sampler238_g170627 = SS30_g170630;
				half4 Coords238_g170627 = temp_output_37_0_g170627;
				float3 temp_output_279_0_g170627 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170627 = temp_output_279_0_g170627;
				half4 localSamplePlanar2D238_g170627 = SamplePlanar2D( Texture238_g170627 , Sampler238_g170627 , Coords238_g170627 , WorldPosition238_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170627) = _MainShaderTex;
				SamplerState Sampler246_g170627 = SS30_g170630;
				half4 Coords246_g170627 = temp_output_37_0_g170627;
				half3 WorldPosition246_g170627 = temp_output_279_0_g170627;
				float3 temp_output_280_0_g170627 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170627 = temp_output_280_0_g170627;
				half4 localSamplePlanar3D246_g170627 = SamplePlanar3D( Texture246_g170627 , Sampler246_g170627 , Coords246_g170627 , WorldPosition246_g170627 , WorldNormal246_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170627) = _MainShaderTex;
				SamplerState Sampler234_g170627 = SS30_g170630;
				float4 Coords234_g170627 = temp_output_37_0_g170627;
				float3 WorldPosition234_g170627 = temp_output_279_0_g170627;
				float4 localSampleStochastic2D234_g170627 = SampleStochastic2D( Texture234_g170627 , Sampler234_g170627 , Coords234_g170627 , WorldPosition234_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170627) = _MainShaderTex;
				SamplerState Sampler263_g170627 = SS30_g170630;
				half4 Coords263_g170627 = temp_output_37_0_g170627;
				half3 WorldPosition263_g170627 = temp_output_279_0_g170627;
				half3 WorldNormal263_g170627 = temp_output_280_0_g170627;
				half4 localSampleStochastic3D263_g170627 = SampleStochastic3D( Texture263_g170627 , Sampler263_g170627 , Coords263_g170627 , WorldPosition263_g170627 , WorldNormal263_g170627 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170617 = localSampleMain276_g170627;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170617 = localSampleExtra275_g170627;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170617 = localSamplePlanar2D238_g170627;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170617 = localSamplePlanar3D246_g170627;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170617 = localSampleStochastic2D234_g170627;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170617 = localSampleStochastic3D263_g170627;
				#else
				float4 staticSwitch198_g170617 = localSampleMain276_g170627;
				#endif
				half4 Local_MasksTex199_g170617 = staticSwitch198_g170617;
				float lerpResult23_g170617 = lerp( 1.0 , (Local_MasksTex199_g170617).y , _MainOcclusionValue);
				float4 appendResult73_g170617 = (float4(( (Local_MasksTex199_g170617).x * _MainMetallicValue ) , lerpResult23_g170617 , (Local_MasksTex199_g170617).z , ( (Local_MasksTex199_g170617).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170617 = appendResult73_g170617;
				float clampResult17_g170622 = clamp( (Local_Masks109_g170617).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170633 = _MainMultiRemap.x;
				float temp_output_9_0_g170633 = ( clampResult17_g170622 - temp_output_7_0_g170633 );
				half Local_MultiMask78_g170617 = saturate( ( ( temp_output_9_0_g170633 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170617 = lerp( 1.0 , Local_MultiMask78_g170617 , _MainColorMode);
				float4 lerpResult62_g170617 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170617);
				half3 Local_ColorRGB93_g170617 = (lerpResult62_g170617).rgb;
				half3 Local_Albedo139_g170617 = ( Local_AlbedoRGB107_g170617 * Local_ColorRGB93_g170617 );
				float3 In_Albedo3_g170632 = Local_Albedo139_g170617;
				float3 In_AlbedoRaw3_g170632 = Local_Albedo139_g170617;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170626) = _MainNormalTex;
				float localFilterTexture29_g170629 = ( 0.0 );
				SamplerState SS29_g170629 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170629 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170629 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170629 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170629 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170629 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170629 = SamplerDefault29_g170629;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170629 = SamplerDefault29_g170629;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170629 = SamplerPoint29_g170629;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170629 = SamplerLow29_g170629;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170629 = SamplerMedium29_g170629;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170629 = SamplerHigh29_g170629;
				#endif
				}
				SamplerState Sampler276_g170626 = SS29_g170629;
				float4 temp_output_37_0_g170626 = Local_Coords180_g170617;
				half4 Coords276_g170626 = temp_output_37_0_g170626;
				half2 TexCoord276_g170626 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170626 = SampleMain( Texture276_g170626 , Sampler276_g170626 , Coords276_g170626 , TexCoord276_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170626) = _MainNormalTex;
				SamplerState Sampler275_g170626 = SS29_g170629;
				half4 Coords275_g170626 = temp_output_37_0_g170626;
				half2 TexCoord275_g170626 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170626 = SampleExtra( Texture275_g170626 , Sampler275_g170626 , Coords275_g170626 , TexCoord275_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170626) = _MainNormalTex;
				SamplerState Sampler238_g170626 = SS29_g170629;
				half4 Coords238_g170626 = temp_output_37_0_g170626;
				float3 temp_output_279_0_g170626 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170626 = temp_output_279_0_g170626;
				half4 localSamplePlanar2D238_g170626 = SamplePlanar2D( Texture238_g170626 , Sampler238_g170626 , Coords238_g170626 , WorldPosition238_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170626) = _MainNormalTex;
				SamplerState Sampler246_g170626 = SS29_g170629;
				half4 Coords246_g170626 = temp_output_37_0_g170626;
				half3 WorldPosition246_g170626 = temp_output_279_0_g170626;
				float3 temp_output_280_0_g170626 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170626 = temp_output_280_0_g170626;
				half4 localSamplePlanar3D246_g170626 = SamplePlanar3D( Texture246_g170626 , Sampler246_g170626 , Coords246_g170626 , WorldPosition246_g170626 , WorldNormal246_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170626) = _MainNormalTex;
				SamplerState Sampler234_g170626 = SS29_g170629;
				float4 Coords234_g170626 = temp_output_37_0_g170626;
				float3 WorldPosition234_g170626 = temp_output_279_0_g170626;
				float4 localSampleStochastic2D234_g170626 = SampleStochastic2D( Texture234_g170626 , Sampler234_g170626 , Coords234_g170626 , WorldPosition234_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170626) = _MainNormalTex;
				SamplerState Sampler263_g170626 = SS29_g170629;
				half4 Coords263_g170626 = temp_output_37_0_g170626;
				half3 WorldPosition263_g170626 = temp_output_279_0_g170626;
				half3 WorldNormal263_g170626 = temp_output_280_0_g170626;
				half4 localSampleStochastic3D263_g170626 = SampleStochastic3D( Texture263_g170626 , Sampler263_g170626 , Coords263_g170626 , WorldPosition263_g170626 , WorldNormal263_g170626 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170617 = localSampleMain276_g170626;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170617 = localSampleExtra275_g170626;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170617 = localSamplePlanar2D238_g170626;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170617 = localSamplePlanar3D246_g170626;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170617 = localSampleStochastic2D234_g170626;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170617 = localSampleStochastic3D263_g170626;
				#else
				float4 staticSwitch193_g170617 = localSampleMain276_g170626;
				#endif
				half4 Local_NormaTex191_g170617 = staticSwitch193_g170617;
				half4 Normal_Packed45_g170618 = Local_NormaTex191_g170617;
				float2 appendResult58_g170618 = (float2(( (Normal_Packed45_g170618).x * (Normal_Packed45_g170618).w ) , (Normal_Packed45_g170618).y));
				half2 Normal_Default50_g170618 = appendResult58_g170618;
				half2 Normal_ASTC41_g170618 = (Normal_Packed45_g170618).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170618 = Normal_ASTC41_g170618;
				#else
				float2 staticSwitch38_g170618 = Normal_Default50_g170618;
				#endif
				half2 Normal_NO_DTX544_g170618 = (Normal_Packed45_g170618).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170618 = Normal_NO_DTX544_g170618;
				#else
				float2 staticSwitch37_g170618 = staticSwitch38_g170618;
				#endif
				float2 temp_output_26_0_g170617 = ( (staticSwitch37_g170618*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3(WorldTangent,WorldBiTangent,WorldNormal);
				half2 Normal_Planar45_g170619 = temp_output_26_0_g170617;
				float2 break71_g170619 = Normal_Planar45_g170619;
				float3 appendResult72_g170619 = (float3(break71_g170619.x , 0.0 , break71_g170619.y));
				float2 temp_output_205_0_g170617 = (mul( ase_worldToTangent, appendResult72_g170619 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#else
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#endif
				half2 Local_NormalTS108_g170617 = staticSwitch204_g170617;
				float2 In_NormalTS3_g170632 = Local_NormalTS108_g170617;
				float3 appendResult68_g170620 = (float3(Local_NormalTS108_g170617 , 1.0));
				float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
				float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
				float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
				float3 tanNormal74_g170620 = appendResult68_g170620;
				float3 worldNormal74_g170620 = normalize( float3(dot(tanToWorld0,tanNormal74_g170620), dot(tanToWorld1,tanNormal74_g170620), dot(tanToWorld2,tanNormal74_g170620)) );
				half3 Local_NormalWS250_g170617 = worldNormal74_g170620;
				float3 In_NormalWS3_g170632 = Local_NormalWS250_g170617;
				float4 In_Shader3_g170632 = Local_Masks109_g170617;
				float4 In_Emissive3_g170632 = half4(1,1,1,1);
				float3 temp_output_3_0_g170621 = Local_Albedo139_g170617;
				float dotResult20_g170621 = dot( temp_output_3_0_g170621 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170617 = dotResult20_g170621;
				float In_Grayscale3_g170632 = Local_Grayscale110_g170617;
				float clampResult144_g170617 = clamp( saturate( ( Local_Grayscale110_g170617 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170617 = clampResult144_g170617;
				float In_Luminosity3_g170632 = Local_Luminosity145_g170617;
				float In_MultiMask3_g170632 = Local_MultiMask78_g170617;
				float temp_output_187_0_g170617 = (Local_AlbedoTex185_g170617).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170617 = ( temp_output_187_0_g170617 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170617 = temp_output_187_0_g170617;
				#endif
				half Local_AlphaClip111_g170617 = staticSwitch236_g170617;
				float In_AlphaClip3_g170632 = Local_AlphaClip111_g170617;
				half Local_AlphaFade246_g170617 = (lerpResult62_g170617).a;
				float In_AlphaFade3_g170632 = Local_AlphaFade246_g170617;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170632 = temp_cast_4;
				float In_Transmission3_g170632 = 1.0;
				float In_Thickness3_g170632 = 0.0;
				float In_Diffusion3_g170632 = 0.0;
				{
				Data3_g170632.Dummy = In_Dummy3_g170632;
				Data3_g170632.Albedo = In_Albedo3_g170632;
				Data3_g170632.AlbedoRaw = In_AlbedoRaw3_g170632;
				Data3_g170632.NormalTS = In_NormalTS3_g170632;
				Data3_g170632.NormalWS = In_NormalWS3_g170632;
				Data3_g170632.Shader = In_Shader3_g170632;
				Data3_g170632.Emissive= In_Emissive3_g170632;
				Data3_g170632.MultiMask = In_MultiMask3_g170632;
				Data3_g170632.Grayscale = In_Grayscale3_g170632;
				Data3_g170632.Luminosity = In_Luminosity3_g170632;
				Data3_g170632.AlphaClip = In_AlphaClip3_g170632;
				Data3_g170632.AlphaFade = In_AlphaFade3_g170632;
				Data3_g170632.Translucency = In_Translucency3_g170632;
				Data3_g170632.Transmission = In_Transmission3_g170632;
				Data3_g170632.Thickness = In_Thickness3_g170632;
				Data3_g170632.Diffusion = In_Diffusion3_g170632;
				}
				TVEVisualData Data4_g170645 = Data3_g170632;
				float Out_Dummy4_g170645 = 0;
				float3 Out_Albedo4_g170645 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170645 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170645 = float2( 0,0 );
				float3 Out_NormalWS4_g170645 = float3( 0,0,0 );
				float4 Out_Shader4_g170645 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170645 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170645 = 0;
				float Out_Grayscale4_g170645 = 0;
				float Out_Luminosity4_g170645 = 0;
				float Out_AlphaClip4_g170645 = 0;
				float Out_AlphaFade4_g170645 = 0;
				float3 Out_Translucency4_g170645 = float3( 0,0,0 );
				float Out_Transmission4_g170645 = 0;
				float Out_Thickness4_g170645 = 0;
				float Out_Diffusion4_g170645 = 0;
				{
				Out_Dummy4_g170645 = Data4_g170645.Dummy;
				Out_Albedo4_g170645 = Data4_g170645.Albedo;
				Out_AlbedoRaw4_g170645 = Data4_g170645.AlbedoRaw;
				Out_NormalTS4_g170645 = Data4_g170645.NormalTS;
				Out_NormalWS4_g170645 = Data4_g170645.NormalWS;
				Out_Shader4_g170645 = Data4_g170645.Shader;
				Out_Emissive4_g170645= Data4_g170645.Emissive;
				Out_MultiMask4_g170645 = Data4_g170645.MultiMask;
				Out_Grayscale4_g170645 = Data4_g170645.Grayscale;
				Out_Luminosity4_g170645= Data4_g170645.Luminosity;
				Out_AlphaClip4_g170645 = Data4_g170645.AlphaClip;
				Out_AlphaFade4_g170645 = Data4_g170645.AlphaFade;
				Out_Translucency4_g170645 = Data4_g170645.Translucency;
				Out_Transmission4_g170645 = Data4_g170645.Transmission;
				Out_Thickness4_g170645 = Data4_g170645.Thickness;
				Out_Diffusion4_g170645 = Data4_g170645.Diffusion;
				}
				half3 Visual_Albedo527_g170634 = Out_Albedo4_g170645;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170635) = _SecondAlbedoTex;
				float localFilterTexture19_g170651 = ( 0.0 );
				SamplerState SS19_g170651 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170651 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170651 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170651 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170651 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170651 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170651 = SamplerDefault19_g170651;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170651 = SamplerDefault19_g170651;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170651 = SamplerPoint19_g170651;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170651 = SamplerLow19_g170651;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170651 = SamplerMedium19_g170651;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170651 = SamplerHigh19_g170651;
				#endif
				}
				SamplerState Sampler276_g170635 = SS19_g170651;
				half4 Local_LayerCoords790_g170634 = _second_coord_value;
				float4 temp_output_37_0_g170635 = Local_LayerCoords790_g170634;
				half4 Coords276_g170635 = temp_output_37_0_g170635;
				half2 TexCoord276_g170635 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170635 = SampleMain( Texture276_g170635 , Sampler276_g170635 , Coords276_g170635 , TexCoord276_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170635) = _SecondAlbedoTex;
				SamplerState Sampler275_g170635 = SS19_g170651;
				half4 Coords275_g170635 = temp_output_37_0_g170635;
				half2 TexCoord275_g170635 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170635 = SampleExtra( Texture275_g170635 , Sampler275_g170635 , Coords275_g170635 , TexCoord275_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170635) = _SecondAlbedoTex;
				SamplerState Sampler238_g170635 = SS19_g170651;
				half4 Coords238_g170635 = temp_output_37_0_g170635;
				TVEModelData Data15_g170654 = Data16_g170483;
				float Out_Dummy15_g170654 = 0;
				float3 Out_PositionWS15_g170654 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170654 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170654 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170654 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170654 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170654 = float3( 0,0,0 );
				float4 Out_VertexData15_g170654 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170654 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170654 = Data15_g170654.Dummy;
				Out_PositionWS15_g170654 = Data15_g170654.PositionWS;
				Out_PositionWO15_g170654 = Data15_g170654.PositionWO;
				Out_PivotWS15_g170654 = Data15_g170654.PivotWS;
				Out_PivotWO15_g170654 = Data15_g170654.PivotWO;
				Out_NormalWS15_g170654 = Data15_g170654.NormalWS;
				Out_ViewDirWS15_g170654 = Data15_g170654.ViewDirWS;
				Out_VertexData15_g170654 = Data15_g170654.VertexData;
				Out_BoundsData15_g170654 = Data15_g170654.BoundsData;
				}
				half3 Model_PositionWO636_g170634 = Out_PositionWO15_g170654;
				float3 temp_output_279_0_g170635 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170635 = temp_output_279_0_g170635;
				half4 localSamplePlanar2D238_g170635 = SamplePlanar2D( Texture238_g170635 , Sampler238_g170635 , Coords238_g170635 , WorldPosition238_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170635) = _SecondAlbedoTex;
				SamplerState Sampler246_g170635 = SS19_g170651;
				half4 Coords246_g170635 = temp_output_37_0_g170635;
				half3 WorldPosition246_g170635 = temp_output_279_0_g170635;
				half3 Model_NormalWS869_g170634 = Out_NormalWS15_g170654;
				float3 temp_output_280_0_g170635 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170635 = temp_output_280_0_g170635;
				half4 localSamplePlanar3D246_g170635 = SamplePlanar3D( Texture246_g170635 , Sampler246_g170635 , Coords246_g170635 , WorldPosition246_g170635 , WorldNormal246_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170635) = _SecondAlbedoTex;
				SamplerState Sampler234_g170635 = SS19_g170651;
				float4 Coords234_g170635 = temp_output_37_0_g170635;
				float3 WorldPosition234_g170635 = temp_output_279_0_g170635;
				float4 localSampleStochastic2D234_g170635 = SampleStochastic2D( Texture234_g170635 , Sampler234_g170635 , Coords234_g170635 , WorldPosition234_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170635) = _SecondAlbedoTex;
				SamplerState Sampler263_g170635 = SS19_g170651;
				half4 Coords263_g170635 = temp_output_37_0_g170635;
				half3 WorldPosition263_g170635 = temp_output_279_0_g170635;
				half3 WorldNormal263_g170635 = temp_output_280_0_g170635;
				half4 localSampleStochastic3D263_g170635 = SampleStochastic3D( Texture263_g170635 , Sampler263_g170635 , Coords263_g170635 , WorldPosition263_g170635 , WorldNormal263_g170635 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170634 = localSampleMain276_g170635;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170634 = localSampleExtra275_g170635;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170634 = localSamplePlanar2D238_g170635;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170634 = localSamplePlanar3D246_g170635;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170634 = localSampleStochastic2D234_g170635;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170634 = localSampleStochastic3D263_g170635;
				#else
				float4 staticSwitch693_g170634 = localSampleMain276_g170635;
				#endif
				half4 Local_AlbedoTex777_g170634 = staticSwitch693_g170634;
				float3 lerpResult716_g170634 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170634).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170634 = lerpResult716_g170634;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170637) = _SecondShaderTex;
				float localFilterTexture30_g170653 = ( 0.0 );
				SamplerState SS30_g170653 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170653 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170653 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170653 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170653 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170653 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170653 = SamplerDefault30_g170653;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170653 = SamplerDefault30_g170653;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170653 = SamplerPoint30_g170653;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170653 = SamplerLow30_g170653;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170653 = SamplerMedium30_g170653;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170653 = SamplerHigh30_g170653;
				#endif
				}
				SamplerState Sampler276_g170637 = SS30_g170653;
				float4 temp_output_37_0_g170637 = Local_LayerCoords790_g170634;
				half4 Coords276_g170637 = temp_output_37_0_g170637;
				half2 TexCoord276_g170637 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170637 = SampleMain( Texture276_g170637 , Sampler276_g170637 , Coords276_g170637 , TexCoord276_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170637) = _SecondShaderTex;
				SamplerState Sampler275_g170637 = SS30_g170653;
				half4 Coords275_g170637 = temp_output_37_0_g170637;
				half2 TexCoord275_g170637 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170637 = SampleExtra( Texture275_g170637 , Sampler275_g170637 , Coords275_g170637 , TexCoord275_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170637) = _SecondShaderTex;
				SamplerState Sampler238_g170637 = SS30_g170653;
				half4 Coords238_g170637 = temp_output_37_0_g170637;
				float3 temp_output_279_0_g170637 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170637 = temp_output_279_0_g170637;
				half4 localSamplePlanar2D238_g170637 = SamplePlanar2D( Texture238_g170637 , Sampler238_g170637 , Coords238_g170637 , WorldPosition238_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170637) = _SecondShaderTex;
				SamplerState Sampler246_g170637 = SS30_g170653;
				half4 Coords246_g170637 = temp_output_37_0_g170637;
				half3 WorldPosition246_g170637 = temp_output_279_0_g170637;
				float3 temp_output_280_0_g170637 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170637 = temp_output_280_0_g170637;
				half4 localSamplePlanar3D246_g170637 = SamplePlanar3D( Texture246_g170637 , Sampler246_g170637 , Coords246_g170637 , WorldPosition246_g170637 , WorldNormal246_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170637) = _SecondShaderTex;
				SamplerState Sampler234_g170637 = SS30_g170653;
				float4 Coords234_g170637 = temp_output_37_0_g170637;
				float3 WorldPosition234_g170637 = temp_output_279_0_g170637;
				float4 localSampleStochastic2D234_g170637 = SampleStochastic2D( Texture234_g170637 , Sampler234_g170637 , Coords234_g170637 , WorldPosition234_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170637) = _SecondShaderTex;
				SamplerState Sampler263_g170637 = SS30_g170653;
				half4 Coords263_g170637 = temp_output_37_0_g170637;
				half3 WorldPosition263_g170637 = temp_output_279_0_g170637;
				half3 WorldNormal263_g170637 = temp_output_280_0_g170637;
				half4 localSampleStochastic3D263_g170637 = SampleStochastic3D( Texture263_g170637 , Sampler263_g170637 , Coords263_g170637 , WorldPosition263_g170637 , WorldNormal263_g170637 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170634 = localSampleMain276_g170637;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170634 = localSampleExtra275_g170637;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170634 = localSamplePlanar2D238_g170637;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170634 = localSamplePlanar3D246_g170637;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170634 = localSampleStochastic2D234_g170637;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170634 = localSampleStochastic3D263_g170637;
				#else
				float4 staticSwitch722_g170634 = localSampleMain276_g170637;
				#endif
				half4 Local_ShaderTex775_g170634 = staticSwitch722_g170634;
				float lerpResult739_g170634 = lerp( 1.0 , (Local_ShaderTex775_g170634).y , _SecondOcclusionValue);
				float4 appendResult749_g170634 = (float4(( (Local_ShaderTex775_g170634).x * _SecondMetallicValue ) , lerpResult739_g170634 , (Local_ShaderTex775_g170634).z , ( (Local_ShaderTex775_g170634).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170634 = appendResult749_g170634;
				float clampResult17_g170641 = clamp( (Local_Masks750_g170634).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170656 = _SecondMultiRemap.x;
				float temp_output_9_0_g170656 = ( clampResult17_g170641 - temp_output_7_0_g170656 );
				float temp_output_765_0_g170634 = saturate( ( ( temp_output_9_0_g170656 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170634 = temp_output_765_0_g170634;
				float lerpResult705_g170634 = lerp( 1.0 , Local_MultiMask767_g170634 , _SecondColorMode);
				float4 lerpResult706_g170634 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170634);
				half3 Local_ColorRGB774_g170634 = (lerpResult706_g170634).rgb;
				half3 Local_Albedo768_g170634 = ( Local_AlbedoRGB771_g170634 * Local_ColorRGB774_g170634 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170648 = 2.0;
				#else
				float staticSwitch1_g170648 = 4.594794;
				#endif
				float3 lerpResult985_g170634 = lerp( Local_Albedo768_g170634 , ( Visual_Albedo527_g170634 * Local_Albedo768_g170634 * staticSwitch1_g170648 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170638) = _SecondMaskTex;
				SamplerState Sampler276_g170638 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170634 = _second_mask_coord_value;
				float4 temp_output_37_0_g170638 = Local_BlendCoords813_g170634;
				half4 Coords276_g170638 = temp_output_37_0_g170638;
				half2 TexCoord276_g170638 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170638 = SampleMain( Texture276_g170638 , Sampler276_g170638 , Coords276_g170638 , TexCoord276_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170638) = _SecondMaskTex;
				SamplerState Sampler275_g170638 = sampler_Linear_Repeat;
				half4 Coords275_g170638 = temp_output_37_0_g170638;
				half2 TexCoord275_g170638 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170638 = SampleExtra( Texture275_g170638 , Sampler275_g170638 , Coords275_g170638 , TexCoord275_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170638) = _SecondMaskTex;
				SamplerState Sampler238_g170638 = sampler_Linear_Repeat;
				half4 Coords238_g170638 = temp_output_37_0_g170638;
				float3 temp_output_279_0_g170638 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170638 = temp_output_279_0_g170638;
				half4 localSamplePlanar2D238_g170638 = SamplePlanar2D( Texture238_g170638 , Sampler238_g170638 , Coords238_g170638 , WorldPosition238_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170638) = _SecondMaskTex;
				SamplerState Sampler246_g170638 = sampler_Linear_Repeat;
				half4 Coords246_g170638 = temp_output_37_0_g170638;
				half3 WorldPosition246_g170638 = temp_output_279_0_g170638;
				float3 temp_output_280_0_g170638 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170638 = temp_output_280_0_g170638;
				half4 localSamplePlanar3D246_g170638 = SamplePlanar3D( Texture246_g170638 , Sampler246_g170638 , Coords246_g170638 , WorldPosition246_g170638 , WorldNormal246_g170638 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170634 = localSampleMain276_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170634 = localSampleExtra275_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170634 = localSamplePlanar2D238_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170634 = localSamplePlanar3D246_g170638;
				#else
				float4 staticSwitch817_g170634 = localSampleMain276_g170638;
				#endif
				half4 Local_MaskTex861_g170634 = staticSwitch817_g170634;
				float clampResult17_g170658 = clamp( (Local_MaskTex861_g170634).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170662 = _SecondMaskRemap.x;
				float temp_output_9_0_g170662 = ( clampResult17_g170658 - temp_output_7_0_g170662 );
				float lerpResult1015_g170634 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170662 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170634 = lerpResult1015_g170634;
				half Visual_Luminosity1041_g170634 = Out_Luminosity4_g170645;
				float clampResult17_g170667 = clamp( Visual_Luminosity1041_g170634 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170668 = _SecondLumaRemap.x;
				float temp_output_9_0_g170668 = ( clampResult17_g170667 - temp_output_7_0_g170668 );
				float lerpResult1036_g170634 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170668 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170634 = lerpResult1036_g170634;
				half3 Visual_NormalWS951_g170634 = Out_NormalWS4_g170645;
				float clampResult17_g170663 = clamp( saturate( (Visual_NormalWS951_g170634).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170665 = _SecondProjRemap.x;
				float temp_output_9_0_g170665 = ( clampResult17_g170663 - temp_output_7_0_g170665 );
				float lerpResult996_g170634 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170665 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170634 = lerpResult996_g170634;
				half4 Model_VertexMasks964_g170634 = Out_VertexData15_g170654;
				float4 break965_g170634 = Model_VertexMasks964_g170634;
				float4 break33_g170659 = _second_vert_mode;
				float temp_output_30_0_g170659 = ( break965_g170634.x * break33_g170659.x );
				float temp_output_29_0_g170659 = ( break965_g170634.y * break33_g170659.y );
				float temp_output_31_0_g170659 = ( break965_g170634.z * break33_g170659.z );
				float temp_output_28_0_g170659 = ( temp_output_30_0_g170659 + temp_output_29_0_g170659 + temp_output_31_0_g170659 + ( break965_g170634.w * break33_g170659.w ) );
				float clampResult17_g170657 = clamp( temp_output_28_0_g170659 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170661 = _SecondMeshRemap.x;
				float temp_output_9_0_g170661 = ( clampResult17_g170657 - temp_output_7_0_g170661 );
				float lerpResult1017_g170634 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170661 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170660 = lerpResult1017_g170634;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170660 = ( temp_output_6_0_g170660 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170660 = temp_output_6_0_g170660;
				#endif
				half Blend_VertMask918_g170634 = staticSwitch14_g170660;
				float localBuildGlobalData204_g170496 = ( 0.0 );
				TVEGlobalData Data204_g170496 = (TVEGlobalData)0;
				half Dummy211_g170496 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170496 = Dummy211_g170496;
				float temp_output_82_0_g170506 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170508 = TVE_CoatLayers[(int)temp_output_82_0_g170506];
				TVEModelData Data15_g170542 = Data16_g170483;
				float Out_Dummy15_g170542 = 0;
				float3 Out_PositionWS15_g170542 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170542 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170542 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170542 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170542 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170542 = float3( 0,0,0 );
				float4 Out_VertexData15_g170542 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170542 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170542 = Data15_g170542.Dummy;
				Out_PositionWS15_g170542 = Data15_g170542.PositionWS;
				Out_PositionWO15_g170542 = Data15_g170542.PositionWO;
				Out_PivotWS15_g170542 = Data15_g170542.PivotWS;
				Out_PivotWO15_g170542 = Data15_g170542.PivotWO;
				Out_NormalWS15_g170542 = Data15_g170542.NormalWS;
				Out_ViewDirWS15_g170542 = Data15_g170542.ViewDirWS;
				Out_VertexData15_g170542 = Data15_g170542.VertexData;
				Out_BoundsData15_g170542 = Data15_g170542.BoundsData;
				}
				half3 Model_PositionWS143_g170496 = Out_PositionWS15_g170542;
				half3 Model_PivotWS145_g170496 = Out_PivotWS15_g170542;
				float3 lerpResult300_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170509 = lerpResult300_g170496;
				float2 temp_output_75_0_g170509 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170509).xz ) );
				float temp_output_82_0_g170509 = temp_output_82_0_g170506;
				float2 temp_output_119_0_g170509 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170509).xz ) );
				float temp_output_7_0_g170514 = 1.0;
				float temp_output_9_0_g170514 = ( saturate( ( distance( Input_Position180_g170509 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170514 );
				float4 lerpResult131_g170509 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170509,temp_output_82_0_g170509), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170509,temp_output_82_0_g170509), 0.0 ) , saturate( ( temp_output_9_0_g170514 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170514 ) ) ));
				float4 temp_output_17_0_g170508 = lerpResult131_g170509;
				float4 temp_output_3_0_g170508 = TVE_CoatParams;
				float4 ifLocalVar18_g170508 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170508 >= 0.5 )
				ifLocalVar18_g170508 = temp_output_17_0_g170508;
				else
				ifLocalVar18_g170508 = temp_output_3_0_g170508;
				float4 lerpResult22_g170508 = lerp( temp_output_3_0_g170508 , temp_output_17_0_g170508 , temp_output_19_0_g170508);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170508 = lerpResult22_g170508;
				#else
				float4 staticSwitch24_g170508 = ifLocalVar18_g170508;
				#endif
				half4 Coat_Params302_g170496 = staticSwitch24_g170508;
				float4 In_CoatParams204_g170496 = Coat_Params302_g170496;
				float temp_output_82_0_g170497 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170499 = TVE_PaintLayers[(int)temp_output_82_0_g170497];
				float3 lerpResult85_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170500 = lerpResult85_g170496;
				float2 temp_output_75_0_g170500 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170500).xz ) );
				float temp_output_82_0_g170500 = temp_output_82_0_g170497;
				float2 temp_output_119_0_g170500 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170500).xz ) );
				float temp_output_7_0_g170505 = 1.0;
				float temp_output_9_0_g170505 = ( saturate( ( distance( Input_Position180_g170500 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170505 );
				float4 lerpResult131_g170500 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170500,temp_output_82_0_g170500), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170500,temp_output_82_0_g170500), 0.0 ) , saturate( ( temp_output_9_0_g170505 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170505 ) ) ));
				float4 temp_output_17_0_g170499 = lerpResult131_g170500;
				float4 temp_output_3_0_g170499 = TVE_PaintParams;
				float4 ifLocalVar18_g170499 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170499 >= 0.5 )
				ifLocalVar18_g170499 = temp_output_17_0_g170499;
				else
				ifLocalVar18_g170499 = temp_output_3_0_g170499;
				float4 lerpResult22_g170499 = lerp( temp_output_3_0_g170499 , temp_output_17_0_g170499 , temp_output_19_0_g170499);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170499 = lerpResult22_g170499;
				#else
				float4 staticSwitch24_g170499 = ifLocalVar18_g170499;
				#endif
				half4 Paint_Params71_g170496 = staticSwitch24_g170499;
				float4 In_PaintParams204_g170496 = Paint_Params71_g170496;
				float temp_output_82_0_g170543 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170545 = TVE_GlowLayers[(int)temp_output_82_0_g170543];
				float3 lerpResult247_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170546 = lerpResult247_g170496;
				float2 temp_output_75_0_g170546 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170546).xz ) );
				float temp_output_82_0_g170546 = temp_output_82_0_g170543;
				float2 temp_output_119_0_g170546 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170546).xz ) );
				float temp_output_7_0_g170551 = 1.0;
				float temp_output_9_0_g170551 = ( saturate( ( distance( Input_Position180_g170546 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170551 );
				float4 lerpResult131_g170546 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170546,temp_output_82_0_g170546), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170546,temp_output_82_0_g170546), 0.0 ) , saturate( ( temp_output_9_0_g170551 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170551 ) ) ));
				float4 temp_output_17_0_g170545 = lerpResult131_g170546;
				float4 temp_output_3_0_g170545 = TVE_GlowParams;
				float4 ifLocalVar18_g170545 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170545 >= 0.5 )
				ifLocalVar18_g170545 = temp_output_17_0_g170545;
				else
				ifLocalVar18_g170545 = temp_output_3_0_g170545;
				float4 lerpResult22_g170545 = lerp( temp_output_3_0_g170545 , temp_output_17_0_g170545 , temp_output_19_0_g170545);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170545 = lerpResult22_g170545;
				#else
				float4 staticSwitch24_g170545 = ifLocalVar18_g170545;
				#endif
				half4 Glow_Params248_g170496 = staticSwitch24_g170545;
				float4 In_GlowParams204_g170496 = Glow_Params248_g170496;
				float temp_output_132_0_g170524 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170526 = TVE_AtmoLayers[(int)temp_output_132_0_g170524];
				float3 lerpResult104_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170527 = lerpResult104_g170496;
				float2 temp_output_75_0_g170527 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170527).xz ) );
				float temp_output_82_0_g170527 = temp_output_132_0_g170524;
				float2 temp_output_119_0_g170527 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170527).xz ) );
				float temp_output_7_0_g170532 = 1.0;
				float temp_output_9_0_g170532 = ( saturate( ( distance( Input_Position180_g170527 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170532 );
				float4 lerpResult131_g170527 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170527,temp_output_82_0_g170527), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170527,temp_output_82_0_g170527), 0.0 ) , saturate( ( temp_output_9_0_g170532 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170532 ) ) ));
				float4 temp_output_17_0_g170526 = lerpResult131_g170527;
				float4 temp_output_3_0_g170526 = TVE_AtmoParams;
				float4 ifLocalVar18_g170526 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170526 >= 0.5 )
				ifLocalVar18_g170526 = temp_output_17_0_g170526;
				else
				ifLocalVar18_g170526 = temp_output_3_0_g170526;
				float4 lerpResult22_g170526 = lerp( temp_output_3_0_g170526 , temp_output_17_0_g170526 , temp_output_19_0_g170526);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170526 = lerpResult22_g170526;
				#else
				float4 staticSwitch24_g170526 = ifLocalVar18_g170526;
				#endif
				half4 Atmo_Params80_g170496 = staticSwitch24_g170526;
				float4 In_AtmoParams204_g170496 = Atmo_Params80_g170496;
				float temp_output_132_0_g170533 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170535 = TVE_FadeLayers[(int)temp_output_132_0_g170533];
				float3 lerpResult382_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFadePivotValue);
				half3 Input_Position180_g170536 = lerpResult382_g170496;
				float2 temp_output_75_0_g170536 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170536).xz ) );
				float temp_output_82_0_g170536 = temp_output_132_0_g170533;
				float2 temp_output_119_0_g170536 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170536).xz ) );
				float temp_output_7_0_g170541 = 1.0;
				float temp_output_9_0_g170541 = ( saturate( ( distance( Input_Position180_g170536 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170541 );
				float4 lerpResult131_g170536 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170536,temp_output_82_0_g170536), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170536,temp_output_82_0_g170536), 0.0 ) , saturate( ( temp_output_9_0_g170541 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170541 ) ) ));
				float4 temp_output_17_0_g170535 = lerpResult131_g170536;
				float4 temp_output_3_0_g170535 = TVE_FadeParams;
				float4 ifLocalVar18_g170535 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170535 >= 0.5 )
				ifLocalVar18_g170535 = temp_output_17_0_g170535;
				else
				ifLocalVar18_g170535 = temp_output_3_0_g170535;
				float4 lerpResult22_g170535 = lerp( temp_output_3_0_g170535 , temp_output_17_0_g170535 , temp_output_19_0_g170535);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170535 = lerpResult22_g170535;
				#else
				float4 staticSwitch24_g170535 = ifLocalVar18_g170535;
				#endif
				half4 Fade_Params387_g170496 = staticSwitch24_g170535;
				float4 In_FadeParams204_g170496 = Fade_Params387_g170496;
				float temp_output_130_0_g170515 = _GlobalFormLayerValue;
				float temp_output_19_0_g170517 = TVE_FormLayers[(int)temp_output_130_0_g170515];
				float3 lerpResult168_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFormPivotValue);
				half3 Input_Position180_g170518 = lerpResult168_g170496;
				float2 temp_output_75_0_g170518 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170518).xz ) );
				float temp_output_82_0_g170518 = temp_output_130_0_g170515;
				float2 temp_output_119_0_g170518 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170518).xz ) );
				float temp_output_7_0_g170523 = 1.0;
				float temp_output_9_0_g170523 = ( saturate( ( distance( Input_Position180_g170518 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170523 );
				float4 lerpResult131_g170518 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170518,temp_output_82_0_g170518), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170518,temp_output_82_0_g170518), 0.0 ) , saturate( ( temp_output_9_0_g170523 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170523 ) ) ));
				float4 temp_output_17_0_g170517 = lerpResult131_g170518;
				float4 temp_output_3_0_g170517 = TVE_FormParams;
				float4 ifLocalVar18_g170517 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170517 >= 0.5 )
				ifLocalVar18_g170517 = temp_output_17_0_g170517;
				else
				ifLocalVar18_g170517 = temp_output_3_0_g170517;
				float4 lerpResult22_g170517 = lerp( temp_output_3_0_g170517 , temp_output_17_0_g170517 , temp_output_19_0_g170517);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170517 = lerpResult22_g170517;
				#else
				float4 staticSwitch24_g170517 = ifLocalVar18_g170517;
				#endif
				half4 Form_Params112_g170496 = staticSwitch24_g170517;
				float4 In_FormParams204_g170496 = Form_Params112_g170496;
				float temp_output_136_0_g170561 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170563 = TVE_FlowLayers[(int)temp_output_136_0_g170561];
				float3 lerpResult400_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170564 = lerpResult400_g170496;
				float2 temp_output_75_0_g170564 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170564).xz ) );
				float temp_output_82_0_g170564 = temp_output_136_0_g170561;
				float2 temp_output_119_0_g170564 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170564).xz ) );
				float temp_output_7_0_g170569 = 1.0;
				float temp_output_9_0_g170569 = ( saturate( ( distance( Input_Position180_g170564 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170569 );
				float4 lerpResult131_g170564 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170564,temp_output_82_0_g170564), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170564,temp_output_82_0_g170564), 0.0 ) , saturate( ( temp_output_9_0_g170569 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170569 ) ) ));
				float4 temp_output_17_0_g170563 = lerpResult131_g170564;
				float4 temp_output_3_0_g170563 = TVE_FlowParams;
				float4 ifLocalVar18_g170563 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170563 >= 0.5 )
				ifLocalVar18_g170563 = temp_output_17_0_g170563;
				else
				ifLocalVar18_g170563 = temp_output_3_0_g170563;
				float4 lerpResult22_g170563 = lerp( temp_output_3_0_g170563 , temp_output_17_0_g170563 , temp_output_19_0_g170563);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170563 = lerpResult22_g170563;
				#else
				float4 staticSwitch24_g170563 = ifLocalVar18_g170563;
				#endif
				half4 Flow_Params405_g170496 = staticSwitch24_g170563;
				float4 In_FlowParams204_g170496 = Flow_Params405_g170496;
				{
				Data204_g170496.Dummy = In_Dummy204_g170496;
				Data204_g170496.CoatParams = In_CoatParams204_g170496;
				Data204_g170496.PaintParams = In_PaintParams204_g170496;
				Data204_g170496.GlowParams = In_GlowParams204_g170496;
				Data204_g170496.AtmoParams = In_AtmoParams204_g170496;
				Data204_g170496.FadeParams = In_FadeParams204_g170496;
				Data204_g170496.FormParams= In_FormParams204_g170496;
				Data204_g170496.FlowParams = In_FlowParams204_g170496;
				}
				TVEGlobalData Data15_g170644 = Data204_g170496;
				float Out_Dummy15_g170644 = 0;
				float4 Out_CoatParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170644 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170644 = Data15_g170644.Dummy;
				Out_CoatParams15_g170644 = Data15_g170644.CoatParams;
				Out_PaintParams15_g170644 = Data15_g170644.PaintParams;
				Out_GlowParams15_g170644 = Data15_g170644.GlowParams;
				Out_AtmoParams15_g170644= Data15_g170644.AtmoParams;
				Out_FadeParams15_g170644= Data15_g170644.FadeParams;
				Out_FormParams15_g170644 = Data15_g170644.FormParams;
				Out_FlowParams15_g170644 = Data15_g170644.FlowParams;
				}
				half4 Global_CoatParams975_g170634 = Out_CoatParams15_g170644;
				float temp_output_6_0_g170669 = (Global_CoatParams975_g170634).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170669 = ( temp_output_6_0_g170669 + ( _SecondElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170669 = temp_output_6_0_g170669;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170634 = staticSwitch14_g170669;
				#else
				float staticSwitch971_g170634 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170634 = lerp( 1.0 , staticSwitch971_g170634 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170634 = lerpResult1013_g170634;
				float clampResult17_g170664 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170634 * Blend_LumaMask1033_g170634 * Blend_ProjMask434_g170634 * Blend_VertMask918_g170634 * Blend_GlobalMask972_g170634 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170666 = _SecondBlendRemap.x;
				float temp_output_9_0_g170666 = ( clampResult17_g170664 - temp_output_7_0_g170666 );
				half Blend_Mask412_g170634 = ( saturate( ( ( temp_output_9_0_g170666 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170634 = lerp( Visual_Albedo527_g170634 , lerpResult985_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170634 = lerpResult403_g170634;
				#else
				float3 staticSwitch415_g170634 = Visual_Albedo527_g170634;
				#endif
				half3 Final_Albedo601_g170634 = staticSwitch415_g170634;
				float3 In_Albedo3_g170655 = Final_Albedo601_g170634;
				float3 In_AlbedoRaw3_g170655 = Final_Albedo601_g170634;
				half2 Visual_NormalTS529_g170634 = Out_NormalTS4_g170645;
				float2 lerpResult40_g170646 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170634 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170636) = _SecondNormalTex;
				float localFilterTexture29_g170652 = ( 0.0 );
				SamplerState SS29_g170652 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170652 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170652 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170652 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170652 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170652 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170652 = SamplerDefault29_g170652;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170652 = SamplerDefault29_g170652;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170652 = SamplerPoint29_g170652;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170652 = SamplerLow29_g170652;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170652 = SamplerMedium29_g170652;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170652 = SamplerHigh29_g170652;
				#endif
				}
				SamplerState Sampler276_g170636 = SS29_g170652;
				float4 temp_output_37_0_g170636 = Local_LayerCoords790_g170634;
				half4 Coords276_g170636 = temp_output_37_0_g170636;
				half2 TexCoord276_g170636 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170636 = SampleMain( Texture276_g170636 , Sampler276_g170636 , Coords276_g170636 , TexCoord276_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170636) = _SecondNormalTex;
				SamplerState Sampler275_g170636 = SS29_g170652;
				half4 Coords275_g170636 = temp_output_37_0_g170636;
				half2 TexCoord275_g170636 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170636 = SampleExtra( Texture275_g170636 , Sampler275_g170636 , Coords275_g170636 , TexCoord275_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170636) = _SecondNormalTex;
				SamplerState Sampler238_g170636 = SS29_g170652;
				half4 Coords238_g170636 = temp_output_37_0_g170636;
				float3 temp_output_279_0_g170636 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170636 = temp_output_279_0_g170636;
				half4 localSamplePlanar2D238_g170636 = SamplePlanar2D( Texture238_g170636 , Sampler238_g170636 , Coords238_g170636 , WorldPosition238_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170636) = _SecondNormalTex;
				SamplerState Sampler246_g170636 = SS29_g170652;
				half4 Coords246_g170636 = temp_output_37_0_g170636;
				half3 WorldPosition246_g170636 = temp_output_279_0_g170636;
				float3 temp_output_280_0_g170636 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170636 = temp_output_280_0_g170636;
				half4 localSamplePlanar3D246_g170636 = SamplePlanar3D( Texture246_g170636 , Sampler246_g170636 , Coords246_g170636 , WorldPosition246_g170636 , WorldNormal246_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170636) = _SecondNormalTex;
				SamplerState Sampler234_g170636 = SS29_g170652;
				float4 Coords234_g170636 = temp_output_37_0_g170636;
				float3 WorldPosition234_g170636 = temp_output_279_0_g170636;
				float4 localSampleStochastic2D234_g170636 = SampleStochastic2D( Texture234_g170636 , Sampler234_g170636 , Coords234_g170636 , WorldPosition234_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170636) = _SecondNormalTex;
				SamplerState Sampler263_g170636 = SS29_g170652;
				half4 Coords263_g170636 = temp_output_37_0_g170636;
				half3 WorldPosition263_g170636 = temp_output_279_0_g170636;
				half3 WorldNormal263_g170636 = temp_output_280_0_g170636;
				half4 localSampleStochastic3D263_g170636 = SampleStochastic3D( Texture263_g170636 , Sampler263_g170636 , Coords263_g170636 , WorldPosition263_g170636 , WorldNormal263_g170636 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170634 = localSampleMain276_g170636;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170634 = localSampleExtra275_g170636;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170634 = localSamplePlanar2D238_g170636;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170634 = localSamplePlanar3D246_g170636;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170634 = localSampleStochastic2D234_g170636;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170634 = localSampleStochastic3D263_g170636;
				#else
				float4 staticSwitch698_g170634 = localSampleMain276_g170636;
				#endif
				half4 Local_NormalTex776_g170634 = staticSwitch698_g170634;
				half4 Normal_Packed45_g170639 = Local_NormalTex776_g170634;
				float2 appendResult58_g170639 = (float2(( (Normal_Packed45_g170639).x * (Normal_Packed45_g170639).w ) , (Normal_Packed45_g170639).y));
				half2 Normal_Default50_g170639 = appendResult58_g170639;
				half2 Normal_ASTC41_g170639 = (Normal_Packed45_g170639).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170639 = Normal_ASTC41_g170639;
				#else
				float2 staticSwitch38_g170639 = Normal_Default50_g170639;
				#endif
				half2 Normal_NO_DTX544_g170639 = (Normal_Packed45_g170639).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170639 = Normal_NO_DTX544_g170639;
				#else
				float2 staticSwitch37_g170639 = staticSwitch38_g170639;
				#endif
				float2 temp_output_724_0_g170634 = ( (staticSwitch37_g170639*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170640 = temp_output_724_0_g170634;
				float2 break71_g170640 = Normal_Planar45_g170640;
				float3 appendResult72_g170640 = (float3(break71_g170640.x , 0.0 , break71_g170640.y));
				float2 temp_output_858_0_g170634 = (mul( ase_worldToTangent, appendResult72_g170640 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#else
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#endif
				half2 Local_NormalTS729_g170634 = staticSwitch727_g170634;
				float2 temp_output_36_0_g170646 = ( lerpResult40_g170646 + Local_NormalTS729_g170634 );
				float2 lerpResult405_g170634 = lerp( Visual_NormalTS529_g170634 , temp_output_36_0_g170646 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170634 = lerpResult405_g170634;
				#else
				float2 staticSwitch418_g170634 = Visual_NormalTS529_g170634;
				#endif
				half2 Final_NormalTS612_g170634 = staticSwitch418_g170634;
				float2 In_NormalTS3_g170655 = Final_NormalTS612_g170634;
				float3 appendResult68_g170647 = (float3(Final_NormalTS612_g170634 , 1.0));
				float3 tanNormal74_g170647 = appendResult68_g170647;
				float3 worldNormal74_g170647 = normalize( float3(dot(tanToWorld0,tanNormal74_g170647), dot(tanToWorld1,tanNormal74_g170647), dot(tanToWorld2,tanNormal74_g170647)) );
				half3 Final_NormalWS950_g170634 = worldNormal74_g170647;
				float3 In_NormalWS3_g170655 = Final_NormalWS950_g170634;
				half4 Visual_Shader531_g170634 = Out_Shader4_g170645;
				float4 lerpResult994_g170634 = lerp( Local_Masks750_g170634 , ( Visual_Shader531_g170634 * Local_Masks750_g170634 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170634 = lerp( Visual_Shader531_g170634 , lerpResult994_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170634 = lerpResult440_g170634;
				#else
				float4 staticSwitch451_g170634 = Visual_Shader531_g170634;
				#endif
				half4 Final_Masks613_g170634 = staticSwitch451_g170634;
				float4 In_Shader3_g170655 = Final_Masks613_g170634;
				float4 In_Emissive3_g170655 = Out_Emissive4_g170645;
				float3 temp_output_3_0_g170649 = Final_Albedo601_g170634;
				float dotResult20_g170649 = dot( temp_output_3_0_g170649 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170634 = dotResult20_g170649;
				float In_Grayscale3_g170655 = Final_Grayscale615_g170634;
				float clampResult651_g170634 = clamp( saturate( ( Final_Grayscale615_g170634 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170634 = clampResult651_g170634;
				float In_Luminosity3_g170655 = Final_Luminosity652_g170634;
				half Visual_MultiMask547_g170634 = Out_MultiMask4_g170645;
				float lerpResult477_g170634 = lerp( Visual_MultiMask547_g170634 , Local_MultiMask767_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch482_g170634 = lerpResult477_g170634;
				#else
				float staticSwitch482_g170634 = Visual_MultiMask547_g170634;
				#endif
				half Final_MultiMask572_g170634 = staticSwitch482_g170634;
				float In_MultiMask3_g170655 = Final_MultiMask572_g170634;
				half Visual_AlphaClip559_g170634 = Out_AlphaClip4_g170645;
				float temp_output_718_0_g170634 = (Local_AlbedoTex777_g170634).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170634 = ( temp_output_718_0_g170634 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170634 = temp_output_718_0_g170634;
				#endif
				half Local_AlphaClip772_g170634 = staticSwitch932_g170634;
				float lerpResult448_g170634 = lerp( Visual_AlphaClip559_g170634 , Local_AlphaClip772_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch564_g170634 = lerpResult448_g170634;
				#else
				float staticSwitch564_g170634 = Visual_AlphaClip559_g170634;
				#endif
				half Final_AlphaClip602_g170634 = staticSwitch564_g170634;
				float In_AlphaClip3_g170655 = Final_AlphaClip602_g170634;
				half Visual_AlphaFade588_g170634 = Out_AlphaFade4_g170645;
				half Local_AlphaFade773_g170634 = (lerpResult706_g170634).a;
				float lerpResult604_g170634 = lerp( Visual_AlphaFade588_g170634 , Local_AlphaFade773_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch608_g170634 = lerpResult604_g170634;
				#else
				float staticSwitch608_g170634 = Visual_AlphaFade588_g170634;
				#endif
				half Final_AlphaFade611_g170634 = staticSwitch608_g170634;
				float In_AlphaFade3_g170655 = Final_AlphaFade611_g170634;
				float3 In_Translucency3_g170655 = Out_Translucency4_g170645;
				float In_Transmission3_g170655 = Out_Transmission4_g170645;
				float In_Thickness3_g170655 = Out_Thickness4_g170645;
				float In_Diffusion3_g170655 = Out_Diffusion4_g170645;
				{
				Data3_g170655.Dummy = In_Dummy3_g170655;
				Data3_g170655.Albedo = In_Albedo3_g170655;
				Data3_g170655.AlbedoRaw = In_AlbedoRaw3_g170655;
				Data3_g170655.NormalTS = In_NormalTS3_g170655;
				Data3_g170655.NormalWS = In_NormalWS3_g170655;
				Data3_g170655.Shader = In_Shader3_g170655;
				Data3_g170655.Emissive= In_Emissive3_g170655;
				Data3_g170655.MultiMask = In_MultiMask3_g170655;
				Data3_g170655.Grayscale = In_Grayscale3_g170655;
				Data3_g170655.Luminosity = In_Luminosity3_g170655;
				Data3_g170655.AlphaClip = In_AlphaClip3_g170655;
				Data3_g170655.AlphaFade = In_AlphaFade3_g170655;
				Data3_g170655.Translucency = In_Translucency3_g170655;
				Data3_g170655.Transmission = In_Transmission3_g170655;
				Data3_g170655.Thickness = In_Thickness3_g170655;
				Data3_g170655.Diffusion = In_Diffusion3_g170655;
				}
				TVEVisualData Data4_g170686 = Data3_g170655;
				float Out_Dummy4_g170686 = 0;
				float3 Out_Albedo4_g170686 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170686 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170686 = float2( 0,0 );
				float3 Out_NormalWS4_g170686 = float3( 0,0,0 );
				float4 Out_Shader4_g170686 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170686 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170686 = 0;
				float Out_Grayscale4_g170686 = 0;
				float Out_Luminosity4_g170686 = 0;
				float Out_AlphaClip4_g170686 = 0;
				float Out_AlphaFade4_g170686 = 0;
				float3 Out_Translucency4_g170686 = float3( 0,0,0 );
				float Out_Transmission4_g170686 = 0;
				float Out_Thickness4_g170686 = 0;
				float Out_Diffusion4_g170686 = 0;
				{
				Out_Dummy4_g170686 = Data4_g170686.Dummy;
				Out_Albedo4_g170686 = Data4_g170686.Albedo;
				Out_AlbedoRaw4_g170686 = Data4_g170686.AlbedoRaw;
				Out_NormalTS4_g170686 = Data4_g170686.NormalTS;
				Out_NormalWS4_g170686 = Data4_g170686.NormalWS;
				Out_Shader4_g170686 = Data4_g170686.Shader;
				Out_Emissive4_g170686= Data4_g170686.Emissive;
				Out_MultiMask4_g170686 = Data4_g170686.MultiMask;
				Out_Grayscale4_g170686 = Data4_g170686.Grayscale;
				Out_Luminosity4_g170686= Data4_g170686.Luminosity;
				Out_AlphaClip4_g170686 = Data4_g170686.AlphaClip;
				Out_AlphaFade4_g170686 = Data4_g170686.AlphaFade;
				Out_Translucency4_g170686 = Data4_g170686.Translucency;
				Out_Transmission4_g170686 = Data4_g170686.Transmission;
				Out_Thickness4_g170686 = Data4_g170686.Thickness;
				Out_Diffusion4_g170686 = Data4_g170686.Diffusion;
				}
				half3 Visual_Albedo527_g170678 = Out_Albedo4_g170686;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170679) = _ThirdAlbedoTex;
				float localFilterTexture19_g170695 = ( 0.0 );
				SamplerState SS19_g170695 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170695 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170695 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170695 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170695 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170695 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170695 = SamplerDefault19_g170695;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170695 = SamplerDefault19_g170695;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170695 = SamplerPoint19_g170695;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170695 = SamplerLow19_g170695;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170695 = SamplerMedium19_g170695;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170695 = SamplerHigh19_g170695;
				#endif
				}
				SamplerState Sampler276_g170679 = SS19_g170695;
				half4 Local_LayerCoords790_g170678 = _third_coord_value;
				float4 temp_output_37_0_g170679 = Local_LayerCoords790_g170678;
				half4 Coords276_g170679 = temp_output_37_0_g170679;
				half2 TexCoord276_g170679 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170679 = SampleMain( Texture276_g170679 , Sampler276_g170679 , Coords276_g170679 , TexCoord276_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170679 = SS19_g170695;
				half4 Coords275_g170679 = temp_output_37_0_g170679;
				half2 TexCoord275_g170679 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170679 = SampleExtra( Texture275_g170679 , Sampler275_g170679 , Coords275_g170679 , TexCoord275_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170679 = SS19_g170695;
				half4 Coords238_g170679 = temp_output_37_0_g170679;
				TVEModelData Data15_g170698 = Data16_g170483;
				float Out_Dummy15_g170698 = 0;
				float3 Out_PositionWS15_g170698 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170698 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170698 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170698 = float3( 0,0,0 );
				float4 Out_VertexData15_g170698 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170698 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170698 = Data15_g170698.Dummy;
				Out_PositionWS15_g170698 = Data15_g170698.PositionWS;
				Out_PositionWO15_g170698 = Data15_g170698.PositionWO;
				Out_PivotWS15_g170698 = Data15_g170698.PivotWS;
				Out_PivotWO15_g170698 = Data15_g170698.PivotWO;
				Out_NormalWS15_g170698 = Data15_g170698.NormalWS;
				Out_ViewDirWS15_g170698 = Data15_g170698.ViewDirWS;
				Out_VertexData15_g170698 = Data15_g170698.VertexData;
				Out_BoundsData15_g170698 = Data15_g170698.BoundsData;
				}
				half3 Model_PositionWO636_g170678 = Out_PositionWO15_g170698;
				float3 temp_output_279_0_g170679 = Model_PositionWO636_g170678;
				half3 WorldPosition238_g170679 = temp_output_279_0_g170679;
				half4 localSamplePlanar2D238_g170679 = SamplePlanar2D( Texture238_g170679 , Sampler238_g170679 , Coords238_g170679 , WorldPosition238_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170679 = SS19_g170695;
				half4 Coords246_g170679 = temp_output_37_0_g170679;
				half3 WorldPosition246_g170679 = temp_output_279_0_g170679;
				half3 Model_NormalWS869_g170678 = Out_NormalWS15_g170698;
				float3 temp_output_280_0_g170679 = Model_NormalWS869_g170678;
				half3 WorldNormal246_g170679 = temp_output_280_0_g170679;
				half4 localSamplePlanar3D246_g170679 = SamplePlanar3D( Texture246_g170679 , Sampler246_g170679 , Coords246_g170679 , WorldPosition246_g170679 , WorldNormal246_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170679 = SS19_g170695;
				float4 Coords234_g170679 = temp_output_37_0_g170679;
				float3 WorldPosition234_g170679 = temp_output_279_0_g170679;
				float4 localSampleStochastic2D234_g170679 = SampleStochastic2D( Texture234_g170679 , Sampler234_g170679 , Coords234_g170679 , WorldPosition234_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170679 = SS19_g170695;
				half4 Coords263_g170679 = temp_output_37_0_g170679;
				half3 WorldPosition263_g170679 = temp_output_279_0_g170679;
				half3 WorldNormal263_g170679 = temp_output_280_0_g170679;
				half4 localSampleStochastic3D263_g170679 = SampleStochastic3D( Texture263_g170679 , Sampler263_g170679 , Coords263_g170679 , WorldPosition263_g170679 , WorldNormal263_g170679 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170678 = localSampleMain276_g170679;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170678 = localSampleExtra275_g170679;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170678 = localSamplePlanar2D238_g170679;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170678 = localSamplePlanar3D246_g170679;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170678 = localSampleStochastic2D234_g170679;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170678 = localSampleStochastic3D263_g170679;
				#else
				float4 staticSwitch693_g170678 = localSampleMain276_g170679;
				#endif
				half4 Local_AlbedoTex777_g170678 = staticSwitch693_g170678;
				float3 lerpResult716_g170678 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170678).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170678 = lerpResult716_g170678;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170681) = _ThirdShaderTex;
				float localFilterTexture30_g170697 = ( 0.0 );
				SamplerState SS30_g170697 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170697 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170697 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170697 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170697 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170697 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170697 = SamplerDefault30_g170697;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170697 = SamplerDefault30_g170697;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170697 = SamplerPoint30_g170697;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170697 = SamplerLow30_g170697;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170697 = SamplerMedium30_g170697;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170697 = SamplerHigh30_g170697;
				#endif
				}
				SamplerState Sampler276_g170681 = SS30_g170697;
				float4 temp_output_37_0_g170681 = Local_LayerCoords790_g170678;
				half4 Coords276_g170681 = temp_output_37_0_g170681;
				half2 TexCoord276_g170681 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170681 = SampleMain( Texture276_g170681 , Sampler276_g170681 , Coords276_g170681 , TexCoord276_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170681) = _ThirdShaderTex;
				SamplerState Sampler275_g170681 = SS30_g170697;
				half4 Coords275_g170681 = temp_output_37_0_g170681;
				half2 TexCoord275_g170681 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170681 = SampleExtra( Texture275_g170681 , Sampler275_g170681 , Coords275_g170681 , TexCoord275_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170681) = _ThirdShaderTex;
				SamplerState Sampler238_g170681 = SS30_g170697;
				half4 Coords238_g170681 = temp_output_37_0_g170681;
				float3 temp_output_279_0_g170681 = Model_PositionWO636_g170678;
				half3 WorldPosition238_g170681 = temp_output_279_0_g170681;
				half4 localSamplePlanar2D238_g170681 = SamplePlanar2D( Texture238_g170681 , Sampler238_g170681 , Coords238_g170681 , WorldPosition238_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170681) = _ThirdShaderTex;
				SamplerState Sampler246_g170681 = SS30_g170697;
				half4 Coords246_g170681 = temp_output_37_0_g170681;
				half3 WorldPosition246_g170681 = temp_output_279_0_g170681;
				float3 temp_output_280_0_g170681 = Model_NormalWS869_g170678;
				half3 WorldNormal246_g170681 = temp_output_280_0_g170681;
				half4 localSamplePlanar3D246_g170681 = SamplePlanar3D( Texture246_g170681 , Sampler246_g170681 , Coords246_g170681 , WorldPosition246_g170681 , WorldNormal246_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170681) = _ThirdShaderTex;
				SamplerState Sampler234_g170681 = SS30_g170697;
				float4 Coords234_g170681 = temp_output_37_0_g170681;
				float3 WorldPosition234_g170681 = temp_output_279_0_g170681;
				float4 localSampleStochastic2D234_g170681 = SampleStochastic2D( Texture234_g170681 , Sampler234_g170681 , Coords234_g170681 , WorldPosition234_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170681) = _ThirdShaderTex;
				SamplerState Sampler263_g170681 = SS30_g170697;
				half4 Coords263_g170681 = temp_output_37_0_g170681;
				half3 WorldPosition263_g170681 = temp_output_279_0_g170681;
				half3 WorldNormal263_g170681 = temp_output_280_0_g170681;
				half4 localSampleStochastic3D263_g170681 = SampleStochastic3D( Texture263_g170681 , Sampler263_g170681 , Coords263_g170681 , WorldPosition263_g170681 , WorldNormal263_g170681 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170678 = localSampleMain276_g170681;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170678 = localSampleExtra275_g170681;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170678 = localSamplePlanar2D238_g170681;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170678 = localSamplePlanar3D246_g170681;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170678 = localSampleStochastic2D234_g170681;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170678 = localSampleStochastic3D263_g170681;
				#else
				float4 staticSwitch722_g170678 = localSampleMain276_g170681;
				#endif
				half4 Local_ShaderTex775_g170678 = staticSwitch722_g170678;
				float lerpResult739_g170678 = lerp( 1.0 , (Local_ShaderTex775_g170678).y , _ThirdOcclusionValue);
				float4 appendResult749_g170678 = (float4(( (Local_ShaderTex775_g170678).x * _ThirdMetallicValue ) , lerpResult739_g170678 , (Local_ShaderTex775_g170678).z , ( (Local_ShaderTex775_g170678).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170678 = appendResult749_g170678;
				float clampResult17_g170684 = clamp( (Local_Masks750_g170678).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170699 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170699 = ( clampResult17_g170684 - temp_output_7_0_g170699 );
				float temp_output_765_0_g170678 = saturate( ( ( temp_output_9_0_g170699 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170678 = temp_output_765_0_g170678;
				float lerpResult705_g170678 = lerp( 1.0 , Local_MultiMask767_g170678 , _ThirdColorMode);
				float4 lerpResult706_g170678 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170678);
				half3 Local_ColorRGB774_g170678 = (lerpResult706_g170678).rgb;
				half3 Local_Albedo768_g170678 = ( Local_AlbedoRGB771_g170678 * Local_ColorRGB774_g170678 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170691 = 2.0;
				#else
				float staticSwitch1_g170691 = 4.594794;
				#endif
				float3 lerpResult985_g170678 = lerp( Local_Albedo768_g170678 , ( Visual_Albedo527_g170678 * Local_Albedo768_g170678 * staticSwitch1_g170691 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170693) = _ThirdMaskTex;
				SamplerState Sampler276_g170693 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170678 = _third_mask_coord_value;
				float4 temp_output_37_0_g170693 = Local_MaskCoords813_g170678;
				half4 Coords276_g170693 = temp_output_37_0_g170693;
				half2 TexCoord276_g170693 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170693 = SampleMain( Texture276_g170693 , Sampler276_g170693 , Coords276_g170693 , TexCoord276_g170693 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170693) = _ThirdMaskTex;
				SamplerState Sampler275_g170693 = sampler_Linear_Repeat;
				half4 Coords275_g170693 = temp_output_37_0_g170693;
				half2 TexCoord275_g170693 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170693 = SampleExtra( Texture275_g170693 , Sampler275_g170693 , Coords275_g170693 , TexCoord275_g170693 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170693) = _ThirdMaskTex;
				SamplerState Sampler238_g170693 = sampler_Linear_Repeat;
				half4 Coords238_g170693 = temp_output_37_0_g170693;
				float3 temp_output_279_0_g170693 = Model_PositionWO636_g170678;
				half3 WorldPosition238_g170693 = temp_output_279_0_g170693;
				half4 localSamplePlanar2D238_g170693 = SamplePlanar2D( Texture238_g170693 , Sampler238_g170693 , Coords238_g170693 , WorldPosition238_g170693 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170693) = _ThirdMaskTex;
				SamplerState Sampler246_g170693 = sampler_Linear_Repeat;
				half4 Coords246_g170693 = temp_output_37_0_g170693;
				half3 WorldPosition246_g170693 = temp_output_279_0_g170693;
				float3 temp_output_280_0_g170693 = Model_NormalWS869_g170678;
				half3 WorldNormal246_g170693 = temp_output_280_0_g170693;
				half4 localSamplePlanar3D246_g170693 = SamplePlanar3D( Texture246_g170693 , Sampler246_g170693 , Coords246_g170693 , WorldPosition246_g170693 , WorldNormal246_g170693 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170678 = localSampleMain276_g170693;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170678 = localSampleExtra275_g170693;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170678 = localSamplePlanar2D238_g170693;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170678 = localSamplePlanar3D246_g170693;
				#else
				float4 staticSwitch817_g170678 = localSampleMain276_g170693;
				#endif
				half4 Local_MaskTex861_g170678 = staticSwitch817_g170678;
				float clampResult17_g170701 = clamp( (Local_MaskTex861_g170678).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170705 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170705 = ( clampResult17_g170701 - temp_output_7_0_g170705 );
				float lerpResult1028_g170678 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170705 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170678 = lerpResult1028_g170678;
				half Visual_Luminosity1049_g170678 = Out_Luminosity4_g170686;
				float clampResult17_g170710 = clamp( Visual_Luminosity1049_g170678 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170711 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170711 = ( clampResult17_g170710 - temp_output_7_0_g170711 );
				float lerpResult1040_g170678 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170711 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170678 = lerpResult1040_g170678;
				half4 Model_VertexMasks960_g170678 = Out_VertexData15_g170698;
				float4 break961_g170678 = Model_VertexMasks960_g170678;
				float4 break33_g170702 = _third_vert_mode;
				float temp_output_30_0_g170702 = ( break961_g170678.x * break33_g170702.x );
				float temp_output_29_0_g170702 = ( break961_g170678.y * break33_g170702.y );
				float temp_output_31_0_g170702 = ( break961_g170678.z * break33_g170702.z );
				float temp_output_28_0_g170702 = ( temp_output_30_0_g170702 + temp_output_29_0_g170702 + temp_output_31_0_g170702 + ( break961_g170678.w * break33_g170702.w ) );
				float clampResult17_g170700 = clamp( temp_output_28_0_g170702 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170704 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170704 = ( clampResult17_g170700 - temp_output_7_0_g170704 );
				float lerpResult1026_g170678 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170704 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170703 = lerpResult1026_g170678;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170703 = ( temp_output_6_0_g170703 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170703 = temp_output_6_0_g170703;
				#endif
				half Blend_VertMask913_g170678 = staticSwitch14_g170703;
				half3 Visual_NormalWS953_g170678 = Out_NormalWS4_g170686;
				float clampResult17_g170706 = clamp( saturate( (Visual_NormalWS953_g170678).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170708 = _ThirdProjRemap.x;
				float temp_output_9_0_g170708 = ( clampResult17_g170706 - temp_output_7_0_g170708 );
				float lerpResult1004_g170678 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170708 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170678 = lerpResult1004_g170678;
				TVEGlobalData Data15_g170688 = Data204_g170496;
				float Out_Dummy15_g170688 = 0;
				float4 Out_CoatParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170688 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170688 = Data15_g170688.Dummy;
				Out_CoatParams15_g170688 = Data15_g170688.CoatParams;
				Out_PaintParams15_g170688 = Data15_g170688.PaintParams;
				Out_GlowParams15_g170688 = Data15_g170688.GlowParams;
				Out_AtmoParams15_g170688= Data15_g170688.AtmoParams;
				Out_FadeParams15_g170688= Data15_g170688.FadeParams;
				Out_FormParams15_g170688 = Data15_g170688.FormParams;
				Out_FlowParams15_g170688 = Data15_g170688.FlowParams;
				}
				half4 Global_CoatParams972_g170678 = Out_CoatParams15_g170688;
				float temp_output_6_0_g170712 = (Global_CoatParams972_g170678).y;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170712 = ( temp_output_6_0_g170712 + ( _ThirdElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170712 = temp_output_6_0_g170712;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170678 = staticSwitch14_g170712;
				#else
				float staticSwitch1056_g170678 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170678 = lerp( 1.0 , staticSwitch1056_g170678 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170678 = lerpResult1060_g170678;
				float clampResult17_g170707 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170678 * Blend_LumaMask1046_g170678 * Blend_VertMask913_g170678 * Blend_ProjMask912_g170678 * Blend_GlobalMask968_g170678 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170709 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170709 = ( clampResult17_g170707 - temp_output_7_0_g170709 );
				half Detail_Mask412_g170678 = ( saturate( ( ( temp_output_9_0_g170709 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170678 = lerp( Visual_Albedo527_g170678 , lerpResult985_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170678 = lerpResult989_g170678;
				#else
				float3 staticSwitch415_g170678 = Visual_Albedo527_g170678;
				#endif
				half3 Final_Albedo601_g170678 = staticSwitch415_g170678;
				float3 In_Albedo3_g170687 = Final_Albedo601_g170678;
				float3 In_AlbedoRaw3_g170687 = Final_Albedo601_g170678;
				half2 Visual_NormalTS529_g170678 = Out_NormalTS4_g170686;
				float2 lerpResult40_g170689 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170678 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170680) = _ThirdNormalTex;
				float localFilterTexture29_g170696 = ( 0.0 );
				SamplerState SS29_g170696 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170696 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170696 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170696 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170696 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170696 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170696 = SamplerDefault29_g170696;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170696 = SamplerDefault29_g170696;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170696 = SamplerPoint29_g170696;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170696 = SamplerLow29_g170696;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170696 = SamplerMedium29_g170696;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170696 = SamplerHigh29_g170696;
				#endif
				}
				SamplerState Sampler276_g170680 = SS29_g170696;
				float4 temp_output_37_0_g170680 = Local_LayerCoords790_g170678;
				half4 Coords276_g170680 = temp_output_37_0_g170680;
				half2 TexCoord276_g170680 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170680 = SampleMain( Texture276_g170680 , Sampler276_g170680 , Coords276_g170680 , TexCoord276_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170680) = _ThirdNormalTex;
				SamplerState Sampler275_g170680 = SS29_g170696;
				half4 Coords275_g170680 = temp_output_37_0_g170680;
				half2 TexCoord275_g170680 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170680 = SampleExtra( Texture275_g170680 , Sampler275_g170680 , Coords275_g170680 , TexCoord275_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170680) = _ThirdNormalTex;
				SamplerState Sampler238_g170680 = SS29_g170696;
				half4 Coords238_g170680 = temp_output_37_0_g170680;
				float3 temp_output_279_0_g170680 = Model_PositionWO636_g170678;
				half3 WorldPosition238_g170680 = temp_output_279_0_g170680;
				half4 localSamplePlanar2D238_g170680 = SamplePlanar2D( Texture238_g170680 , Sampler238_g170680 , Coords238_g170680 , WorldPosition238_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170680) = _ThirdNormalTex;
				SamplerState Sampler246_g170680 = SS29_g170696;
				half4 Coords246_g170680 = temp_output_37_0_g170680;
				half3 WorldPosition246_g170680 = temp_output_279_0_g170680;
				float3 temp_output_280_0_g170680 = Model_NormalWS869_g170678;
				half3 WorldNormal246_g170680 = temp_output_280_0_g170680;
				half4 localSamplePlanar3D246_g170680 = SamplePlanar3D( Texture246_g170680 , Sampler246_g170680 , Coords246_g170680 , WorldPosition246_g170680 , WorldNormal246_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170680) = _ThirdNormalTex;
				SamplerState Sampler234_g170680 = SS29_g170696;
				float4 Coords234_g170680 = temp_output_37_0_g170680;
				float3 WorldPosition234_g170680 = temp_output_279_0_g170680;
				float4 localSampleStochastic2D234_g170680 = SampleStochastic2D( Texture234_g170680 , Sampler234_g170680 , Coords234_g170680 , WorldPosition234_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170680) = _ThirdNormalTex;
				SamplerState Sampler263_g170680 = SS29_g170696;
				half4 Coords263_g170680 = temp_output_37_0_g170680;
				half3 WorldPosition263_g170680 = temp_output_279_0_g170680;
				half3 WorldNormal263_g170680 = temp_output_280_0_g170680;
				half4 localSampleStochastic3D263_g170680 = SampleStochastic3D( Texture263_g170680 , Sampler263_g170680 , Coords263_g170680 , WorldPosition263_g170680 , WorldNormal263_g170680 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170678 = localSampleMain276_g170680;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170678 = localSampleExtra275_g170680;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170678 = localSamplePlanar2D238_g170680;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170678 = localSamplePlanar3D246_g170680;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170678 = localSampleStochastic2D234_g170680;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170678 = localSampleStochastic3D263_g170680;
				#else
				float4 staticSwitch698_g170678 = localSampleMain276_g170680;
				#endif
				half4 Local_NormalTex776_g170678 = staticSwitch698_g170678;
				half4 Normal_Packed45_g170682 = Local_NormalTex776_g170678;
				float2 appendResult58_g170682 = (float2(( (Normal_Packed45_g170682).x * (Normal_Packed45_g170682).w ) , (Normal_Packed45_g170682).y));
				half2 Normal_Default50_g170682 = appendResult58_g170682;
				half2 Normal_ASTC41_g170682 = (Normal_Packed45_g170682).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170682 = Normal_ASTC41_g170682;
				#else
				float2 staticSwitch38_g170682 = Normal_Default50_g170682;
				#endif
				half2 Normal_NO_DTX544_g170682 = (Normal_Packed45_g170682).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170682 = Normal_NO_DTX544_g170682;
				#else
				float2 staticSwitch37_g170682 = staticSwitch38_g170682;
				#endif
				float2 temp_output_724_0_g170678 = ( (staticSwitch37_g170682*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170683 = temp_output_724_0_g170678;
				float2 break71_g170683 = Normal_Planar45_g170683;
				float3 appendResult72_g170683 = (float3(break71_g170683.x , 0.0 , break71_g170683.y));
				float2 temp_output_858_0_g170678 = (mul( ase_worldToTangent, appendResult72_g170683 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170678 = temp_output_724_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170678 = temp_output_724_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170678 = temp_output_858_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170678 = temp_output_858_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170678 = temp_output_858_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170678 = temp_output_858_0_g170678;
				#else
				float2 staticSwitch727_g170678 = temp_output_724_0_g170678;
				#endif
				half2 Local_NormalTS729_g170678 = staticSwitch727_g170678;
				float2 temp_output_36_0_g170689 = ( lerpResult40_g170689 + Local_NormalTS729_g170678 );
				float2 lerpResult405_g170678 = lerp( Visual_NormalTS529_g170678 , temp_output_36_0_g170689 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170678 = lerpResult405_g170678;
				#else
				float2 staticSwitch418_g170678 = Visual_NormalTS529_g170678;
				#endif
				half2 Final_NormalTS612_g170678 = staticSwitch418_g170678;
				float2 In_NormalTS3_g170687 = Final_NormalTS612_g170678;
				float3 appendResult68_g170690 = (float3(Final_NormalTS612_g170678 , 1.0));
				float3 tanNormal74_g170690 = appendResult68_g170690;
				float3 worldNormal74_g170690 = normalize( float3(dot(tanToWorld0,tanNormal74_g170690), dot(tanToWorld1,tanNormal74_g170690), dot(tanToWorld2,tanNormal74_g170690)) );
				half3 Final_NormalWS956_g170678 = worldNormal74_g170690;
				float3 In_NormalWS3_g170687 = Final_NormalWS956_g170678;
				half4 Visual_Shader531_g170678 = Out_Shader4_g170686;
				float4 lerpResult1000_g170678 = lerp( Local_Masks750_g170678 , ( Visual_Shader531_g170678 * Local_Masks750_g170678 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170678 = lerp( Visual_Shader531_g170678 , lerpResult1000_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170678 = lerpResult998_g170678;
				#else
				float4 staticSwitch451_g170678 = Visual_Shader531_g170678;
				#endif
				half4 Final_Masks613_g170678 = staticSwitch451_g170678;
				float4 In_Shader3_g170687 = Final_Masks613_g170678;
				float4 In_Emissive3_g170687 = Out_Emissive4_g170686;
				float3 temp_output_3_0_g170692 = Final_Albedo601_g170678;
				float dotResult20_g170692 = dot( temp_output_3_0_g170692 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170678 = dotResult20_g170692;
				float In_Grayscale3_g170687 = Final_Grayscale615_g170678;
				float clampResult651_g170678 = clamp( saturate( ( Final_Grayscale615_g170678 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170678 = clampResult651_g170678;
				float In_Luminosity3_g170687 = Final_Luminosity652_g170678;
				half Visual_MultiMask547_g170678 = Out_MultiMask4_g170686;
				float lerpResult477_g170678 = lerp( Visual_MultiMask547_g170678 , Local_MultiMask767_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float staticSwitch482_g170678 = lerpResult477_g170678;
				#else
				float staticSwitch482_g170678 = Visual_MultiMask547_g170678;
				#endif
				half Final_MultiMask572_g170678 = staticSwitch482_g170678;
				float In_MultiMask3_g170687 = Final_MultiMask572_g170678;
				half Visual_AlphaClip559_g170678 = Out_AlphaClip4_g170686;
				float temp_output_718_0_g170678 = (Local_AlbedoTex777_g170678).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170678 = ( temp_output_718_0_g170678 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170678 = temp_output_718_0_g170678;
				#endif
				half Local_AlphaClip772_g170678 = staticSwitch924_g170678;
				float lerpResult448_g170678 = lerp( Visual_AlphaClip559_g170678 , Local_AlphaClip772_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float staticSwitch564_g170678 = lerpResult448_g170678;
				#else
				float staticSwitch564_g170678 = Visual_AlphaClip559_g170678;
				#endif
				half Final_AlphaClip602_g170678 = staticSwitch564_g170678;
				float In_AlphaClip3_g170687 = Final_AlphaClip602_g170678;
				half Visual_AlphaFade588_g170678 = Out_AlphaFade4_g170686;
				half Local_AlphaFade773_g170678 = (lerpResult706_g170678).a;
				float lerpResult604_g170678 = lerp( Visual_AlphaFade588_g170678 , Local_AlphaFade773_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float staticSwitch608_g170678 = lerpResult604_g170678;
				#else
				float staticSwitch608_g170678 = Visual_AlphaFade588_g170678;
				#endif
				half Final_AlphaFade611_g170678 = staticSwitch608_g170678;
				float In_AlphaFade3_g170687 = Final_AlphaFade611_g170678;
				float3 In_Translucency3_g170687 = Out_Translucency4_g170686;
				float In_Transmission3_g170687 = Out_Transmission4_g170686;
				float In_Thickness3_g170687 = Out_Thickness4_g170686;
				float In_Diffusion3_g170687 = Out_Diffusion4_g170686;
				{
				Data3_g170687.Dummy = In_Dummy3_g170687;
				Data3_g170687.Albedo = In_Albedo3_g170687;
				Data3_g170687.AlbedoRaw = In_AlbedoRaw3_g170687;
				Data3_g170687.NormalTS = In_NormalTS3_g170687;
				Data3_g170687.NormalWS = In_NormalWS3_g170687;
				Data3_g170687.Shader = In_Shader3_g170687;
				Data3_g170687.Emissive= In_Emissive3_g170687;
				Data3_g170687.MultiMask = In_MultiMask3_g170687;
				Data3_g170687.Grayscale = In_Grayscale3_g170687;
				Data3_g170687.Luminosity = In_Luminosity3_g170687;
				Data3_g170687.AlphaClip = In_AlphaClip3_g170687;
				Data3_g170687.AlphaFade = In_AlphaFade3_g170687;
				Data3_g170687.Translucency = In_Translucency3_g170687;
				Data3_g170687.Transmission = In_Transmission3_g170687;
				Data3_g170687.Thickness = In_Thickness3_g170687;
				Data3_g170687.Diffusion = In_Diffusion3_g170687;
				}
				TVEVisualData Data4_g170789 = Data3_g170687;
				float Out_Dummy4_g170789 = 0;
				float3 Out_Albedo4_g170789 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170789 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170789 = float2( 0,0 );
				float3 Out_NormalWS4_g170789 = float3( 0,0,0 );
				float4 Out_Shader4_g170789 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170789 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170789 = 0;
				float Out_Grayscale4_g170789 = 0;
				float Out_Luminosity4_g170789 = 0;
				float Out_AlphaClip4_g170789 = 0;
				float Out_AlphaFade4_g170789 = 0;
				float3 Out_Translucency4_g170789 = float3( 0,0,0 );
				float Out_Transmission4_g170789 = 0;
				float Out_Thickness4_g170789 = 0;
				float Out_Diffusion4_g170789 = 0;
				{
				Out_Dummy4_g170789 = Data4_g170789.Dummy;
				Out_Albedo4_g170789 = Data4_g170789.Albedo;
				Out_AlbedoRaw4_g170789 = Data4_g170789.AlbedoRaw;
				Out_NormalTS4_g170789 = Data4_g170789.NormalTS;
				Out_NormalWS4_g170789 = Data4_g170789.NormalWS;
				Out_Shader4_g170789 = Data4_g170789.Shader;
				Out_Emissive4_g170789= Data4_g170789.Emissive;
				Out_MultiMask4_g170789 = Data4_g170789.MultiMask;
				Out_Grayscale4_g170789 = Data4_g170789.Grayscale;
				Out_Luminosity4_g170789= Data4_g170789.Luminosity;
				Out_AlphaClip4_g170789 = Data4_g170789.AlphaClip;
				Out_AlphaFade4_g170789 = Data4_g170789.AlphaFade;
				Out_Translucency4_g170789 = Data4_g170789.Translucency;
				Out_Transmission4_g170789 = Data4_g170789.Transmission;
				Out_Thickness4_g170789 = Data4_g170789.Thickness;
				Out_Diffusion4_g170789 = Data4_g170789.Diffusion;
				}
				half3 Visual_Albedo127_g170788 = Out_Albedo4_g170789;
				TVEModelData Data15_g170796 = Data16_g170483;
				float Out_Dummy15_g170796 = 0;
				float3 Out_PositionWS15_g170796 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170796 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170796 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170796 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170796 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170796 = float3( 0,0,0 );
				float4 Out_VertexData15_g170796 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170796 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170796 = Data15_g170796.Dummy;
				Out_PositionWS15_g170796 = Data15_g170796.PositionWS;
				Out_PositionWO15_g170796 = Data15_g170796.PositionWO;
				Out_PivotWS15_g170796 = Data15_g170796.PivotWS;
				Out_PivotWO15_g170796 = Data15_g170796.PivotWO;
				Out_NormalWS15_g170796 = Data15_g170796.NormalWS;
				Out_ViewDirWS15_g170796 = Data15_g170796.ViewDirWS;
				Out_VertexData15_g170796 = Data15_g170796.VertexData;
				Out_BoundsData15_g170796 = Data15_g170796.BoundsData;
				}
				half4 Model_VertexData206_g170788 = Out_VertexData15_g170796;
				float4 break208_g170788 = Model_VertexData206_g170788;
				float4 break33_g170794 = _occlusion_vert_mode;
				float temp_output_30_0_g170794 = ( break208_g170788.x * break33_g170794.x );
				float temp_output_29_0_g170794 = ( break208_g170788.y * break33_g170794.y );
				float temp_output_31_0_g170794 = ( break208_g170788.z * break33_g170794.z );
				float temp_output_28_0_g170794 = ( temp_output_30_0_g170794 + temp_output_29_0_g170794 + temp_output_31_0_g170794 + ( break208_g170788.w * break33_g170794.w ) );
				float temp_output_194_0_g170788 = temp_output_28_0_g170794;
				float clampResult17_g170792 = clamp( temp_output_194_0_g170788 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170797 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170797 = ( clampResult17_g170792 - temp_output_7_0_g170797 );
				float temp_output_6_0_g170793 = saturate( ( ( temp_output_9_0_g170797 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170793 = ( temp_output_6_0_g170793 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170793 = temp_output_6_0_g170793;
				#endif
				half Occlusion_Mask82_g170788 = staticSwitch14_g170793;
				float3 lerpResult75_g170788 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170788);
				float3 lerpResult186_g170788 = lerp( Visual_Albedo127_g170788 , ( Visual_Albedo127_g170788 * lerpResult75_g170788 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170788 = lerpResult186_g170788;
				#else
				float3 staticSwitch171_g170788 = Visual_Albedo127_g170788;
				#endif
				half3 Final_Albedo160_g170788 = staticSwitch171_g170788;
				float3 In_Albedo3_g170790 = Final_Albedo160_g170788;
				float3 In_AlbedoRaw3_g170790 = Final_Albedo160_g170788;
				float2 In_NormalTS3_g170790 = Out_NormalTS4_g170789;
				float3 In_NormalWS3_g170790 = Out_NormalWS4_g170789;
				float4 In_Shader3_g170790 = Out_Shader4_g170789;
				float4 In_Emissive3_g170790 = Out_Emissive4_g170789;
				float3 temp_output_3_0_g170791 = Final_Albedo160_g170788;
				float dotResult20_g170791 = dot( temp_output_3_0_g170791 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170788 = dotResult20_g170791;
				float In_Grayscale3_g170790 = Final_Grayscale164_g170788;
				float clampResult180_g170788 = clamp( saturate( ( Final_Grayscale164_g170788 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170788 = clampResult180_g170788;
				float In_Luminosity3_g170790 = Final_Shading181_g170788;
				float In_MultiMask3_g170790 = Out_MultiMask4_g170789;
				float In_AlphaClip3_g170790 = Out_AlphaClip4_g170789;
				float In_AlphaFade3_g170790 = Out_AlphaFade4_g170789;
				float3 In_Translucency3_g170790 = Out_Translucency4_g170789;
				float In_Transmission3_g170790 = Out_Transmission4_g170789;
				float In_Thickness3_g170790 = Out_Thickness4_g170789;
				float In_Diffusion3_g170790 = Out_Diffusion4_g170789;
				{
				Data3_g170790.Dummy = In_Dummy3_g170790;
				Data3_g170790.Albedo = In_Albedo3_g170790;
				Data3_g170790.AlbedoRaw = In_AlbedoRaw3_g170790;
				Data3_g170790.NormalTS = In_NormalTS3_g170790;
				Data3_g170790.NormalWS = In_NormalWS3_g170790;
				Data3_g170790.Shader = In_Shader3_g170790;
				Data3_g170790.Emissive= In_Emissive3_g170790;
				Data3_g170790.MultiMask = In_MultiMask3_g170790;
				Data3_g170790.Grayscale = In_Grayscale3_g170790;
				Data3_g170790.Luminosity = In_Luminosity3_g170790;
				Data3_g170790.AlphaClip = In_AlphaClip3_g170790;
				Data3_g170790.AlphaFade = In_AlphaFade3_g170790;
				Data3_g170790.Translucency = In_Translucency3_g170790;
				Data3_g170790.Transmission = In_Transmission3_g170790;
				Data3_g170790.Thickness = In_Thickness3_g170790;
				Data3_g170790.Diffusion = In_Diffusion3_g170790;
				}
				TVEVisualData Data4_g170800 = Data3_g170790;
				float Out_Dummy4_g170800 = 0;
				float3 Out_Albedo4_g170800 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170800 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170800 = float2( 0,0 );
				float3 Out_NormalWS4_g170800 = float3( 0,0,0 );
				float4 Out_Shader4_g170800 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170800 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170800 = 0;
				float Out_Grayscale4_g170800 = 0;
				float Out_Luminosity4_g170800 = 0;
				float Out_AlphaClip4_g170800 = 0;
				float Out_AlphaFade4_g170800 = 0;
				float3 Out_Translucency4_g170800 = float3( 0,0,0 );
				float Out_Transmission4_g170800 = 0;
				float Out_Thickness4_g170800 = 0;
				float Out_Diffusion4_g170800 = 0;
				{
				Out_Dummy4_g170800 = Data4_g170800.Dummy;
				Out_Albedo4_g170800 = Data4_g170800.Albedo;
				Out_AlbedoRaw4_g170800 = Data4_g170800.AlbedoRaw;
				Out_NormalTS4_g170800 = Data4_g170800.NormalTS;
				Out_NormalWS4_g170800 = Data4_g170800.NormalWS;
				Out_Shader4_g170800 = Data4_g170800.Shader;
				Out_Emissive4_g170800= Data4_g170800.Emissive;
				Out_MultiMask4_g170800 = Data4_g170800.MultiMask;
				Out_Grayscale4_g170800 = Data4_g170800.Grayscale;
				Out_Luminosity4_g170800= Data4_g170800.Luminosity;
				Out_AlphaClip4_g170800 = Data4_g170800.AlphaClip;
				Out_AlphaFade4_g170800 = Data4_g170800.AlphaFade;
				Out_Translucency4_g170800 = Data4_g170800.Translucency;
				Out_Transmission4_g170800 = Data4_g170800.Transmission;
				Out_Thickness4_g170800 = Data4_g170800.Thickness;
				Out_Diffusion4_g170800 = Data4_g170800.Diffusion;
				}
				half3 Visual_Albedo127_g170798 = Out_Albedo4_g170800;
				TVEModelData Data15_g170806 = Data16_g170483;
				float Out_Dummy15_g170806 = 0;
				float3 Out_PositionWS15_g170806 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170806 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170806 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170806 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170806 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170806 = float3( 0,0,0 );
				float4 Out_VertexData15_g170806 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170806 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170806 = Data15_g170806.Dummy;
				Out_PositionWS15_g170806 = Data15_g170806.PositionWS;
				Out_PositionWO15_g170806 = Data15_g170806.PositionWO;
				Out_PivotWS15_g170806 = Data15_g170806.PivotWS;
				Out_PivotWO15_g170806 = Data15_g170806.PivotWO;
				Out_NormalWS15_g170806 = Data15_g170806.NormalWS;
				Out_ViewDirWS15_g170806 = Data15_g170806.ViewDirWS;
				Out_VertexData15_g170806 = Data15_g170806.VertexData;
				Out_BoundsData15_g170806 = Data15_g170806.BoundsData;
				}
				half4 Model_VertexData224_g170798 = Out_VertexData15_g170806;
				float4 break226_g170798 = Model_VertexData224_g170798;
				float4 break33_g170799 = _gradient_vert_mode;
				float temp_output_30_0_g170799 = ( break226_g170798.x * break33_g170799.x );
				float temp_output_29_0_g170799 = ( break226_g170798.y * break33_g170799.y );
				float temp_output_31_0_g170799 = ( break226_g170798.z * break33_g170799.z );
				float temp_output_28_0_g170799 = ( temp_output_30_0_g170799 + temp_output_29_0_g170799 + temp_output_31_0_g170799 + ( break226_g170798.w * break33_g170799.w ) );
				float temp_output_211_0_g170798 = temp_output_28_0_g170799;
				float clampResult17_g170804 = clamp( temp_output_211_0_g170798 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170807 = _GradientMeshRemap.x;
				float temp_output_9_0_g170807 = ( clampResult17_g170804 - temp_output_7_0_g170807 );
				float temp_output_6_0_g170805 = saturate( ( ( temp_output_9_0_g170807 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170805 = ( temp_output_6_0_g170805 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170805 = temp_output_6_0_g170805;
				#endif
				half Gradient_VertMask82_g170798 = staticSwitch14_g170805;
				half Gradient_Mask200_g170798 = Gradient_VertMask82_g170798;
				float3 lerpResult75_g170798 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170798);
				float temp_output_162_11_g170798 = Out_MultiMask4_g170800;
				half Visual_MultiMask196_g170798 = temp_output_162_11_g170798;
				float lerpResult190_g170798 = lerp( 1.0 , Visual_MultiMask196_g170798 , _GradientMultiValue);
				half Gradient_MultiMask194_g170798 = lerpResult190_g170798;
				float3 lerpResult186_g170798 = lerp( Visual_Albedo127_g170798 , ( Visual_Albedo127_g170798 * lerpResult75_g170798 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170798 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170798 = lerpResult186_g170798;
				#else
				float3 staticSwitch171_g170798 = Visual_Albedo127_g170798;
				#endif
				half3 Final_Albedo160_g170798 = staticSwitch171_g170798;
				float3 In_Albedo3_g170801 = Final_Albedo160_g170798;
				float3 In_AlbedoRaw3_g170801 = Final_Albedo160_g170798;
				float2 In_NormalTS3_g170801 = Out_NormalTS4_g170800;
				float3 In_NormalWS3_g170801 = Out_NormalWS4_g170800;
				float4 In_Shader3_g170801 = Out_Shader4_g170800;
				float4 In_Emissive3_g170801 = Out_Emissive4_g170800;
				float3 temp_output_3_0_g170802 = Final_Albedo160_g170798;
				float dotResult20_g170802 = dot( temp_output_3_0_g170802 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170798 = dotResult20_g170802;
				float In_Grayscale3_g170801 = Final_Grayscale164_g170798;
				float clampResult180_g170798 = clamp( saturate( ( Final_Grayscale164_g170798 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170798 = clampResult180_g170798;
				float In_Luminosity3_g170801 = Final_Luminosity181_g170798;
				float In_MultiMask3_g170801 = temp_output_162_11_g170798;
				float In_AlphaClip3_g170801 = Out_AlphaClip4_g170800;
				float In_AlphaFade3_g170801 = Out_AlphaFade4_g170800;
				float3 In_Translucency3_g170801 = Out_Translucency4_g170800;
				float In_Transmission3_g170801 = Out_Transmission4_g170800;
				float In_Thickness3_g170801 = Out_Thickness4_g170800;
				float In_Diffusion3_g170801 = Out_Diffusion4_g170800;
				{
				Data3_g170801.Dummy = In_Dummy3_g170801;
				Data3_g170801.Albedo = In_Albedo3_g170801;
				Data3_g170801.AlbedoRaw = In_AlbedoRaw3_g170801;
				Data3_g170801.NormalTS = In_NormalTS3_g170801;
				Data3_g170801.NormalWS = In_NormalWS3_g170801;
				Data3_g170801.Shader = In_Shader3_g170801;
				Data3_g170801.Emissive= In_Emissive3_g170801;
				Data3_g170801.MultiMask = In_MultiMask3_g170801;
				Data3_g170801.Grayscale = In_Grayscale3_g170801;
				Data3_g170801.Luminosity = In_Luminosity3_g170801;
				Data3_g170801.AlphaClip = In_AlphaClip3_g170801;
				Data3_g170801.AlphaFade = In_AlphaFade3_g170801;
				Data3_g170801.Translucency = In_Translucency3_g170801;
				Data3_g170801.Transmission = In_Transmission3_g170801;
				Data3_g170801.Thickness = In_Thickness3_g170801;
				Data3_g170801.Diffusion = In_Diffusion3_g170801;
				}
				TVEVisualData Data4_g170810 = Data3_g170801;
				float Out_Dummy4_g170810 = 0;
				float3 Out_Albedo4_g170810 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170810 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170810 = float2( 0,0 );
				float3 Out_NormalWS4_g170810 = float3( 0,0,0 );
				float4 Out_Shader4_g170810 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170810 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170810 = 0;
				float Out_Grayscale4_g170810 = 0;
				float Out_Luminosity4_g170810 = 0;
				float Out_AlphaClip4_g170810 = 0;
				float Out_AlphaFade4_g170810 = 0;
				float3 Out_Translucency4_g170810 = float3( 0,0,0 );
				float Out_Transmission4_g170810 = 0;
				float Out_Thickness4_g170810 = 0;
				float Out_Diffusion4_g170810 = 0;
				{
				Out_Dummy4_g170810 = Data4_g170810.Dummy;
				Out_Albedo4_g170810 = Data4_g170810.Albedo;
				Out_AlbedoRaw4_g170810 = Data4_g170810.AlbedoRaw;
				Out_NormalTS4_g170810 = Data4_g170810.NormalTS;
				Out_NormalWS4_g170810 = Data4_g170810.NormalWS;
				Out_Shader4_g170810 = Data4_g170810.Shader;
				Out_Emissive4_g170810= Data4_g170810.Emissive;
				Out_MultiMask4_g170810 = Data4_g170810.MultiMask;
				Out_Grayscale4_g170810 = Data4_g170810.Grayscale;
				Out_Luminosity4_g170810= Data4_g170810.Luminosity;
				Out_AlphaClip4_g170810 = Data4_g170810.AlphaClip;
				Out_AlphaFade4_g170810 = Data4_g170810.AlphaFade;
				Out_Translucency4_g170810 = Data4_g170810.Translucency;
				Out_Transmission4_g170810 = Data4_g170810.Transmission;
				Out_Thickness4_g170810 = Data4_g170810.Thickness;
				Out_Diffusion4_g170810 = Data4_g170810.Diffusion;
				}
				half3 Visual_Albedo127_g170808 = Out_Albedo4_g170810;
				TVEModelData Data15_g170815 = Data16_g170483;
				float Out_Dummy15_g170815 = 0;
				float3 Out_PositionWS15_g170815 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170815 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170815 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170815 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170815 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170815 = float3( 0,0,0 );
				float4 Out_VertexData15_g170815 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170815 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170815 = Data15_g170815.Dummy;
				Out_PositionWS15_g170815 = Data15_g170815.PositionWS;
				Out_PositionWO15_g170815 = Data15_g170815.PositionWO;
				Out_PivotWS15_g170815 = Data15_g170815.PivotWS;
				Out_PivotWO15_g170815 = Data15_g170815.PivotWO;
				Out_NormalWS15_g170815 = Data15_g170815.NormalWS;
				Out_ViewDirWS15_g170815 = Data15_g170815.ViewDirWS;
				Out_VertexData15_g170815 = Data15_g170815.VertexData;
				Out_BoundsData15_g170815 = Data15_g170815.BoundsData;
				}
				half3 Model_PositionWO224_g170808 = Out_PositionWO15_g170815;
				half3 Model_PivotWO239_g170808 = Out_PivotWO15_g170815;
				float3 lerpResult242_g170808 = lerp( Model_PositionWO224_g170808 , Model_PivotWO239_g170808 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170812 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170808 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170814 = clamp( tex3DNode60_g170812.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170816 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170816 = ( clampResult17_g170814 - temp_output_7_0_g170816 );
				float temp_output_238_0_g170808 = saturate( ( ( temp_output_9_0_g170816 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170808 = temp_output_238_0_g170808;
				half Variaton_Mask200_g170808 = Variaton_NoiseMask82_g170808;
				float3 lerpResult75_g170808 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170808);
				float temp_output_162_11_g170808 = Out_MultiMask4_g170810;
				half Visual_MultiMask196_g170808 = temp_output_162_11_g170808;
				float lerpResult190_g170808 = lerp( 1.0 , Visual_MultiMask196_g170808 , _VariationMultiValue);
				half Variaton_MultiMask194_g170808 = lerpResult190_g170808;
				float3 lerpResult186_g170808 = lerp( Visual_Albedo127_g170808 , ( Visual_Albedo127_g170808 * lerpResult75_g170808 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170808 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170808 = lerpResult186_g170808;
				#else
				float3 staticSwitch171_g170808 = Visual_Albedo127_g170808;
				#endif
				half3 Final_Albedo160_g170808 = staticSwitch171_g170808;
				float3 In_Albedo3_g170811 = Final_Albedo160_g170808;
				float3 In_AlbedoRaw3_g170811 = Final_Albedo160_g170808;
				float2 In_NormalTS3_g170811 = Out_NormalTS4_g170810;
				float3 In_NormalWS3_g170811 = Out_NormalWS4_g170810;
				float4 In_Shader3_g170811 = Out_Shader4_g170810;
				float4 In_Emissive3_g170811 = Out_Emissive4_g170810;
				float3 temp_output_3_0_g170809 = Final_Albedo160_g170808;
				float dotResult20_g170809 = dot( temp_output_3_0_g170809 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170808 = dotResult20_g170809;
				float In_Grayscale3_g170811 = Final_Grayscale164_g170808;
				float clampResult180_g170808 = clamp( saturate( ( Final_Grayscale164_g170808 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170808 = clampResult180_g170808;
				float In_Luminosity3_g170811 = Final_Luminosity181_g170808;
				float In_MultiMask3_g170811 = temp_output_162_11_g170808;
				float In_AlphaClip3_g170811 = Out_AlphaClip4_g170810;
				float In_AlphaFade3_g170811 = Out_AlphaFade4_g170810;
				float3 In_Translucency3_g170811 = Out_Translucency4_g170810;
				float In_Transmission3_g170811 = Out_Transmission4_g170810;
				float In_Thickness3_g170811 = Out_Thickness4_g170810;
				float In_Diffusion3_g170811 = Out_Diffusion4_g170810;
				{
				Data3_g170811.Dummy = In_Dummy3_g170811;
				Data3_g170811.Albedo = In_Albedo3_g170811;
				Data3_g170811.AlbedoRaw = In_AlbedoRaw3_g170811;
				Data3_g170811.NormalTS = In_NormalTS3_g170811;
				Data3_g170811.NormalWS = In_NormalWS3_g170811;
				Data3_g170811.Shader = In_Shader3_g170811;
				Data3_g170811.Emissive= In_Emissive3_g170811;
				Data3_g170811.MultiMask = In_MultiMask3_g170811;
				Data3_g170811.Grayscale = In_Grayscale3_g170811;
				Data3_g170811.Luminosity = In_Luminosity3_g170811;
				Data3_g170811.AlphaClip = In_AlphaClip3_g170811;
				Data3_g170811.AlphaFade = In_AlphaFade3_g170811;
				Data3_g170811.Translucency = In_Translucency3_g170811;
				Data3_g170811.Transmission = In_Transmission3_g170811;
				Data3_g170811.Thickness = In_Thickness3_g170811;
				Data3_g170811.Diffusion = In_Diffusion3_g170811;
				}
				TVEVisualData Data4_g170823 = Data3_g170811;
				float Out_Dummy4_g170823 = 0;
				float3 Out_Albedo4_g170823 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170823 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170823 = float2( 0,0 );
				float3 Out_NormalWS4_g170823 = float3( 0,0,0 );
				float4 Out_Shader4_g170823 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170823 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170823 = 0;
				float Out_Grayscale4_g170823 = 0;
				float Out_Luminosity4_g170823 = 0;
				float Out_AlphaClip4_g170823 = 0;
				float Out_AlphaFade4_g170823 = 0;
				float3 Out_Translucency4_g170823 = float3( 0,0,0 );
				float Out_Transmission4_g170823 = 0;
				float Out_Thickness4_g170823 = 0;
				float Out_Diffusion4_g170823 = 0;
				{
				Out_Dummy4_g170823 = Data4_g170823.Dummy;
				Out_Albedo4_g170823 = Data4_g170823.Albedo;
				Out_AlbedoRaw4_g170823 = Data4_g170823.AlbedoRaw;
				Out_NormalTS4_g170823 = Data4_g170823.NormalTS;
				Out_NormalWS4_g170823 = Data4_g170823.NormalWS;
				Out_Shader4_g170823 = Data4_g170823.Shader;
				Out_Emissive4_g170823= Data4_g170823.Emissive;
				Out_MultiMask4_g170823 = Data4_g170823.MultiMask;
				Out_Grayscale4_g170823 = Data4_g170823.Grayscale;
				Out_Luminosity4_g170823= Data4_g170823.Luminosity;
				Out_AlphaClip4_g170823 = Data4_g170823.AlphaClip;
				Out_AlphaFade4_g170823 = Data4_g170823.AlphaFade;
				Out_Translucency4_g170823 = Data4_g170823.Translucency;
				Out_Transmission4_g170823 = Data4_g170823.Transmission;
				Out_Thickness4_g170823 = Data4_g170823.Thickness;
				Out_Diffusion4_g170823 = Data4_g170823.Diffusion;
				}
				half3 Visual_Albedo139_g170818 = Out_Albedo4_g170823;
				float temp_output_200_12_g170818 = Out_Grayscale4_g170823;
				half Visual_Grayscale150_g170818 = temp_output_200_12_g170818;
				float3 temp_cast_33 = (Visual_Grayscale150_g170818).xxx;
				TVEGlobalData Data15_g170819 = Data204_g170496;
				float Out_Dummy15_g170819 = 0;
				float4 Out_CoatParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170819 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170819 = Data15_g170819.Dummy;
				Out_CoatParams15_g170819 = Data15_g170819.CoatParams;
				Out_PaintParams15_g170819 = Data15_g170819.PaintParams;
				Out_GlowParams15_g170819 = Data15_g170819.GlowParams;
				Out_AtmoParams15_g170819= Data15_g170819.AtmoParams;
				Out_FadeParams15_g170819= Data15_g170819.FadeParams;
				Out_FormParams15_g170819 = Data15_g170819.FormParams;
				Out_FlowParams15_g170819 = Data15_g170819.FlowParams;
				}
				half4 Global_PaintParams209_g170818 = Out_PaintParams15_g170819;
				float4 temp_output_6_0_g170840 = Global_PaintParams209_g170818;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170840 = ( temp_output_6_0_g170840 + ( _TintingElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170840 = temp_output_6_0_g170840;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170818 = staticSwitch14_g170840;
				#else
				float4 staticSwitch283_g170818 = TVE_PaintParams;
				#endif
				float lerpResult412_g170818 = lerp( 1.0 , ( saturate( (staticSwitch283_g170818).w ) * TVE_IsEnabled ) , _TintingGlobalValue);
				half Tinting_GlobalValue285_g170818 = lerpResult412_g170818;
				float3 lerpResult368_g170818 = lerp( Visual_Albedo139_g170818 , temp_cast_33 , ( Tinting_GlobalValue285_g170818 * _TintingGrayValue ));
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170833 = 2.0;
				#else
				float staticSwitch1_g170833 = 4.594794;
				#endif
				half3 Tinting_GlobalColor290_g170818 = (staticSwitch283_g170818).xyz;
				float temp_output_200_11_g170818 = Out_MultiMask4_g170823;
				half Visual_MultiMask181_g170818 = temp_output_200_11_g170818;
				float lerpResult147_g170818 = lerp( 1.0 , Visual_MultiMask181_g170818 , _TintingMultiValue);
				half Tinting_MutiMask121_g170818 = lerpResult147_g170818;
				half Tinting_TexMask385_g170818 = 1.0;
				float temp_output_200_15_g170818 = Out_Luminosity4_g170823;
				half Visual_Luminosity257_g170818 = temp_output_200_15_g170818;
				float clampResult17_g170830 = clamp( Visual_Luminosity257_g170818 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170835 = _TintingLumaRemap.x;
				float temp_output_9_0_g170835 = ( clampResult17_g170830 - temp_output_7_0_g170835 );
				float lerpResult228_g170818 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170835 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170818 = lerpResult228_g170818;
				TVEModelData Data15_g170824 = Data16_g170483;
				float Out_Dummy15_g170824 = 0;
				float3 Out_PositionWS15_g170824 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170824 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170824 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170824 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170824 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170824 = float3( 0,0,0 );
				float4 Out_VertexData15_g170824 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170824 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170824 = Data15_g170824.Dummy;
				Out_PositionWS15_g170824 = Data15_g170824.PositionWS;
				Out_PositionWO15_g170824 = Data15_g170824.PositionWO;
				Out_PivotWS15_g170824 = Data15_g170824.PivotWS;
				Out_PivotWO15_g170824 = Data15_g170824.PivotWO;
				Out_NormalWS15_g170824 = Data15_g170824.NormalWS;
				Out_ViewDirWS15_g170824 = Data15_g170824.ViewDirWS;
				Out_VertexData15_g170824 = Data15_g170824.VertexData;
				Out_BoundsData15_g170824 = Data15_g170824.BoundsData;
				}
				half4 Model_VertexMasks307_g170818 = Out_VertexData15_g170824;
				float4 break311_g170818 = Model_VertexMasks307_g170818;
				float4 break33_g170827 = _tinting_vert_mode;
				float temp_output_30_0_g170827 = ( break311_g170818.x * break33_g170827.x );
				float temp_output_29_0_g170827 = ( break311_g170818.y * break33_g170827.y );
				float temp_output_31_0_g170827 = ( break311_g170818.z * break33_g170827.z );
				float temp_output_28_0_g170827 = ( temp_output_30_0_g170827 + temp_output_29_0_g170827 + temp_output_31_0_g170827 + ( break311_g170818.w * break33_g170827.w ) );
				float clampResult17_g170829 = clamp( temp_output_28_0_g170827 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170836 = _TintingMeshRemap.x;
				float temp_output_9_0_g170836 = ( clampResult17_g170829 - temp_output_7_0_g170836 );
				float lerpResult370_g170818 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170836 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170831 = lerpResult370_g170818;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170831 = ( temp_output_6_0_g170831 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170831 = temp_output_6_0_g170831;
				#endif
				half Tinting_VertMask309_g170818 = staticSwitch14_g170831;
				half Tinting_NoiseMask213_g170818 = 1.0;
				half Custom_Mask345_g170818 = 1.0;
				float temp_output_7_0_g170839 = _TintingBlendRemap.x;
				float temp_output_9_0_g170839 = ( ( _TintingIntensityValue * Tinting_MutiMask121_g170818 * Tinting_TexMask385_g170818 * Tinting_LumaMask153_g170818 * Tinting_VertMask309_g170818 * Tinting_NoiseMask213_g170818 * Tinting_GlobalValue285_g170818 * Custom_Mask345_g170818 ) - temp_output_7_0_g170839 );
				half Tinting_Mask242_g170818 = ( saturate( ( ( temp_output_9_0_g170839 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170818 = lerp( Visual_Albedo139_g170818 , ( lerpResult368_g170818 * staticSwitch1_g170833 * Tinting_GlobalColor290_g170818 * (_TintingColor).rgb ) , Tinting_Mask242_g170818);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170818 = lerpResult90_g170818;
				#else
				float3 staticSwitch286_g170818 = Visual_Albedo139_g170818;
				#endif
				half3 Final_Albedo97_g170818 = staticSwitch286_g170818;
				float3 In_Albedo3_g170822 = Final_Albedo97_g170818;
				float3 In_AlbedoRaw3_g170822 = Out_AlbedoRaw4_g170823;
				float2 In_NormalTS3_g170822 = Out_NormalTS4_g170823;
				float3 In_NormalWS3_g170822 = Out_NormalWS4_g170823;
				float4 In_Shader3_g170822 = Out_Shader4_g170823;
				float4 In_Emissive3_g170822 = Out_Emissive4_g170823;
				float In_Grayscale3_g170822 = temp_output_200_12_g170818;
				float In_Luminosity3_g170822 = temp_output_200_15_g170818;
				float In_MultiMask3_g170822 = temp_output_200_11_g170818;
				float In_AlphaClip3_g170822 = Out_AlphaClip4_g170823;
				float In_AlphaFade3_g170822 = Out_AlphaFade4_g170823;
				float3 In_Translucency3_g170822 = Out_Translucency4_g170823;
				float In_Transmission3_g170822 = Out_Transmission4_g170823;
				float In_Thickness3_g170822 = Out_Thickness4_g170823;
				float In_Diffusion3_g170822 = Out_Diffusion4_g170823;
				{
				Data3_g170822.Dummy = In_Dummy3_g170822;
				Data3_g170822.Albedo = In_Albedo3_g170822;
				Data3_g170822.AlbedoRaw = In_AlbedoRaw3_g170822;
				Data3_g170822.NormalTS = In_NormalTS3_g170822;
				Data3_g170822.NormalWS = In_NormalWS3_g170822;
				Data3_g170822.Shader = In_Shader3_g170822;
				Data3_g170822.Emissive= In_Emissive3_g170822;
				Data3_g170822.MultiMask = In_MultiMask3_g170822;
				Data3_g170822.Grayscale = In_Grayscale3_g170822;
				Data3_g170822.Luminosity = In_Luminosity3_g170822;
				Data3_g170822.AlphaClip = In_AlphaClip3_g170822;
				Data3_g170822.AlphaFade = In_AlphaFade3_g170822;
				Data3_g170822.Translucency = In_Translucency3_g170822;
				Data3_g170822.Transmission = In_Transmission3_g170822;
				Data3_g170822.Thickness = In_Thickness3_g170822;
				Data3_g170822.Diffusion = In_Diffusion3_g170822;
				}
				TVEVisualData Data4_g170844 = Data3_g170822;
				float Out_Dummy4_g170844 = 0;
				float3 Out_Albedo4_g170844 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170844 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170844 = float2( 0,0 );
				float3 Out_NormalWS4_g170844 = float3( 0,0,0 );
				float4 Out_Shader4_g170844 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170844 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170844 = 0;
				float Out_Grayscale4_g170844 = 0;
				float Out_Luminosity4_g170844 = 0;
				float Out_AlphaClip4_g170844 = 0;
				float Out_AlphaFade4_g170844 = 0;
				float3 Out_Translucency4_g170844 = float3( 0,0,0 );
				float Out_Transmission4_g170844 = 0;
				float Out_Thickness4_g170844 = 0;
				float Out_Diffusion4_g170844 = 0;
				{
				Out_Dummy4_g170844 = Data4_g170844.Dummy;
				Out_Albedo4_g170844 = Data4_g170844.Albedo;
				Out_AlbedoRaw4_g170844 = Data4_g170844.AlbedoRaw;
				Out_NormalTS4_g170844 = Data4_g170844.NormalTS;
				Out_NormalWS4_g170844 = Data4_g170844.NormalWS;
				Out_Shader4_g170844 = Data4_g170844.Shader;
				Out_Emissive4_g170844= Data4_g170844.Emissive;
				Out_MultiMask4_g170844 = Data4_g170844.MultiMask;
				Out_Grayscale4_g170844 = Data4_g170844.Grayscale;
				Out_Luminosity4_g170844= Data4_g170844.Luminosity;
				Out_AlphaClip4_g170844 = Data4_g170844.AlphaClip;
				Out_AlphaFade4_g170844 = Data4_g170844.AlphaFade;
				Out_Translucency4_g170844 = Data4_g170844.Translucency;
				Out_Transmission4_g170844 = Data4_g170844.Transmission;
				Out_Thickness4_g170844 = Data4_g170844.Thickness;
				Out_Diffusion4_g170844 = Data4_g170844.Diffusion;
				}
				half3 Visual_Albedo292_g170842 = Out_Albedo4_g170844;
				float temp_output_280_12_g170842 = Out_Grayscale4_g170844;
				half Visual_Grayscale308_g170842 = temp_output_280_12_g170842;
				float3 temp_cast_34 = (Visual_Grayscale308_g170842).xxx;
				TVEGlobalData Data15_g170843 = Data204_g170496;
				float Out_Dummy15_g170843 = 0;
				float4 Out_CoatParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170843 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170843 = Data15_g170843.Dummy;
				Out_CoatParams15_g170843 = Data15_g170843.CoatParams;
				Out_PaintParams15_g170843 = Data15_g170843.PaintParams;
				Out_GlowParams15_g170843 = Data15_g170843.GlowParams;
				Out_AtmoParams15_g170843= Data15_g170843.AtmoParams;
				Out_FadeParams15_g170843= Data15_g170843.FadeParams;
				Out_FormParams15_g170843 = Data15_g170843.FormParams;
				Out_FlowParams15_g170843 = Data15_g170843.FlowParams;
				}
				half4 Global_AtmoParams314_g170842 = Out_AtmoParams15_g170843;
				float temp_output_6_0_g170863 = (Global_AtmoParams314_g170842).x;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170863 = ( temp_output_6_0_g170863 + ( _DrynessElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170863 = temp_output_6_0_g170863;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170842 = staticSwitch14_g170863;
				#else
				float staticSwitch351_g170842 = TVE_AtmoData.x;
				#endif
				float lerpResult505_g170842 = lerp( 1.0 , ( staticSwitch351_g170842 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalMask352_g170842 = lerpResult505_g170842;
				float3 lerpResult485_g170842 = lerp( Visual_Albedo292_g170842 , temp_cast_34 , ( Dryness_GlobalMask352_g170842 * _DrynessGrayValue ));
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170857 = 2.0;
				#else
				float staticSwitch1_g170857 = 4.594794;
				#endif
				half Dryness_TexMask478_g170842 = 1.0;
				float temp_output_280_11_g170842 = Out_MultiMask4_g170844;
				half Visual_MultiMask310_g170842 = temp_output_280_11_g170842;
				float lerpResult283_g170842 = lerp( 1.0 , Visual_MultiMask310_g170842 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170842 = lerpResult283_g170842;
				float temp_output_280_15_g170842 = Out_Luminosity4_g170844;
				half Visual_Luminosity309_g170842 = temp_output_280_15_g170842;
				float clampResult17_g170854 = clamp( Visual_Luminosity309_g170842 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170859 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170859 = ( clampResult17_g170854 - temp_output_7_0_g170859 );
				float lerpResult295_g170842 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170859 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170842 = lerpResult295_g170842;
				TVEModelData Data15_g170848 = Data16_g170483;
				float Out_Dummy15_g170848 = 0;
				float3 Out_PositionWS15_g170848 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170848 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170848 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170848 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170848 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170848 = float3( 0,0,0 );
				float4 Out_VertexData15_g170848 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170848 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170848 = Data15_g170848.Dummy;
				Out_PositionWS15_g170848 = Data15_g170848.PositionWS;
				Out_PositionWO15_g170848 = Data15_g170848.PositionWO;
				Out_PivotWS15_g170848 = Data15_g170848.PivotWS;
				Out_PivotWO15_g170848 = Data15_g170848.PivotWO;
				Out_NormalWS15_g170848 = Data15_g170848.NormalWS;
				Out_ViewDirWS15_g170848 = Data15_g170848.ViewDirWS;
				Out_VertexData15_g170848 = Data15_g170848.VertexData;
				Out_BoundsData15_g170848 = Data15_g170848.BoundsData;
				}
				half4 Model_VertexMasks386_g170842 = Out_VertexData15_g170848;
				float4 break375_g170842 = Model_VertexMasks386_g170842;
				float4 break33_g170851 = _dryness_vert_mode;
				float temp_output_30_0_g170851 = ( break375_g170842.x * break33_g170851.x );
				float temp_output_29_0_g170851 = ( break375_g170842.y * break33_g170851.y );
				float temp_output_31_0_g170851 = ( break375_g170842.z * break33_g170851.z );
				float temp_output_28_0_g170851 = ( temp_output_30_0_g170851 + temp_output_29_0_g170851 + temp_output_31_0_g170851 + ( break375_g170842.w * break33_g170851.w ) );
				float clampResult17_g170852 = clamp( temp_output_28_0_g170851 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170860 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170860 = ( clampResult17_g170852 - temp_output_7_0_g170860 );
				float lerpResult452_g170842 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170860 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170855 = lerpResult452_g170842;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170855 = ( temp_output_6_0_g170855 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170855 = temp_output_6_0_g170855;
				#endif
				half Dryness_VertMask378_g170842 = staticSwitch14_g170855;
				half Dryness_MaskNoise291_g170842 = 1.0;
				half Custom_Mask411_g170842 = 1.0;
				float temp_output_7_0_g170862 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170862 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170842 * Dryness_MultiMask302_g170842 * Dryness_LumaMask301_g170842 * Dryness_VertMask378_g170842 * Dryness_MaskNoise291_g170842 * Dryness_GlobalMask352_g170842 * Custom_Mask411_g170842 ) - temp_output_7_0_g170862 );
				half Dryness_Mask329_g170842 = saturate( ( ( temp_output_9_0_g170862 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170842 = lerp( Visual_Albedo292_g170842 , ( lerpResult485_g170842 * staticSwitch1_g170857 * (_DrynessColor).rgb ) , Dryness_Mask329_g170842);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170842 = lerpResult336_g170842;
				#else
				float3 staticSwitch356_g170842 = Visual_Albedo292_g170842;
				#endif
				half3 Final_Albedo331_g170842 = staticSwitch356_g170842;
				float3 In_Albedo3_g170845 = Final_Albedo331_g170842;
				float3 In_AlbedoRaw3_g170845 = Out_AlbedoRaw4_g170844;
				float2 In_NormalTS3_g170845 = Out_NormalTS4_g170844;
				float3 In_NormalWS3_g170845 = Out_NormalWS4_g170844;
				half4 Visual_Shader415_g170842 = Out_Shader4_g170844;
				float4 break438_g170842 = Visual_Shader415_g170842;
				float4 appendResult439_g170842 = (float4(break438_g170842.x , break438_g170842.y , break438_g170842.z , ( break438_g170842.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170842 = lerp( Visual_Shader415_g170842 , appendResult439_g170842 , Dryness_Mask329_g170842);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170842 = lerpResult427_g170842;
				#else
				float4 staticSwitch426_g170842 = Visual_Shader415_g170842;
				#endif
				half4 Final_Shader433_g170842 = staticSwitch426_g170842;
				float4 In_Shader3_g170845 = Final_Shader433_g170842;
				float4 In_Emissive3_g170845 = Out_Emissive4_g170844;
				float In_Grayscale3_g170845 = temp_output_280_12_g170842;
				float In_Luminosity3_g170845 = temp_output_280_15_g170842;
				float In_MultiMask3_g170845 = temp_output_280_11_g170842;
				float In_AlphaClip3_g170845 = Out_AlphaClip4_g170844;
				float In_AlphaFade3_g170845 = Out_AlphaFade4_g170844;
				float3 In_Translucency3_g170845 = Out_Translucency4_g170844;
				half Visual_Transmission416_g170842 = Out_Transmission4_g170844;
				float lerpResult421_g170842 = lerp( Visual_Transmission416_g170842 , ( Visual_Transmission416_g170842 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170842);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170842 = lerpResult421_g170842;
				#else
				float staticSwitch418_g170842 = Visual_Transmission416_g170842;
				#endif
				half Final_Transmission425_g170842 = staticSwitch418_g170842;
				float In_Transmission3_g170845 = Final_Transmission425_g170842;
				float In_Thickness3_g170845 = Out_Thickness4_g170844;
				float In_Diffusion3_g170845 = Out_Diffusion4_g170844;
				{
				Data3_g170845.Dummy = In_Dummy3_g170845;
				Data3_g170845.Albedo = In_Albedo3_g170845;
				Data3_g170845.AlbedoRaw = In_AlbedoRaw3_g170845;
				Data3_g170845.NormalTS = In_NormalTS3_g170845;
				Data3_g170845.NormalWS = In_NormalWS3_g170845;
				Data3_g170845.Shader = In_Shader3_g170845;
				Data3_g170845.Emissive= In_Emissive3_g170845;
				Data3_g170845.MultiMask = In_MultiMask3_g170845;
				Data3_g170845.Grayscale = In_Grayscale3_g170845;
				Data3_g170845.Luminosity = In_Luminosity3_g170845;
				Data3_g170845.AlphaClip = In_AlphaClip3_g170845;
				Data3_g170845.AlphaFade = In_AlphaFade3_g170845;
				Data3_g170845.Translucency = In_Translucency3_g170845;
				Data3_g170845.Transmission = In_Transmission3_g170845;
				Data3_g170845.Thickness = In_Thickness3_g170845;
				Data3_g170845.Diffusion = In_Diffusion3_g170845;
				}
				TVEVisualData Data4_g170867 = Data3_g170845;
				float Out_Dummy4_g170867 = 0;
				float3 Out_Albedo4_g170867 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170867 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170867 = float2( 0,0 );
				float3 Out_NormalWS4_g170867 = float3( 0,0,0 );
				float4 Out_Shader4_g170867 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170867 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170867 = 0;
				float Out_Grayscale4_g170867 = 0;
				float Out_Luminosity4_g170867 = 0;
				float Out_AlphaClip4_g170867 = 0;
				float Out_AlphaFade4_g170867 = 0;
				float3 Out_Translucency4_g170867 = float3( 0,0,0 );
				float Out_Transmission4_g170867 = 0;
				float Out_Thickness4_g170867 = 0;
				float Out_Diffusion4_g170867 = 0;
				{
				Out_Dummy4_g170867 = Data4_g170867.Dummy;
				Out_Albedo4_g170867 = Data4_g170867.Albedo;
				Out_AlbedoRaw4_g170867 = Data4_g170867.AlbedoRaw;
				Out_NormalTS4_g170867 = Data4_g170867.NormalTS;
				Out_NormalWS4_g170867 = Data4_g170867.NormalWS;
				Out_Shader4_g170867 = Data4_g170867.Shader;
				Out_Emissive4_g170867= Data4_g170867.Emissive;
				Out_MultiMask4_g170867 = Data4_g170867.MultiMask;
				Out_Grayscale4_g170867 = Data4_g170867.Grayscale;
				Out_Luminosity4_g170867= Data4_g170867.Luminosity;
				Out_AlphaClip4_g170867 = Data4_g170867.AlphaClip;
				Out_AlphaFade4_g170867 = Data4_g170867.AlphaFade;
				Out_Translucency4_g170867 = Data4_g170867.Translucency;
				Out_Transmission4_g170867 = Data4_g170867.Transmission;
				Out_Thickness4_g170867 = Data4_g170867.Thickness;
				Out_Diffusion4_g170867 = Data4_g170867.Diffusion;
				}
				half3 Visual_Albedo127_g170866 = Out_Albedo4_g170867;
				float4 vertexToFrag24_g170817 = IN.ase_texcoord13;
				half4 Interp_Data1269 = vertexToFrag24_g170817;
				float clampResult208_g170866 = clamp( (Interp_Data1269).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170866 = ( Visual_Albedo127_g170866 + ( ( Visual_Albedo127_g170866 * Visual_Albedo127_g170866 * 200.0 * _motion_highlight_color ) * clampResult208_g170866 ) );
				#else
				float3 staticSwitch214_g170866 = Visual_Albedo127_g170866;
				#endif
				half3 Final_Albedo160_g170866 = staticSwitch214_g170866;
				float3 In_Albedo3_g170868 = Final_Albedo160_g170866;
				float3 In_AlbedoRaw3_g170868 = Out_AlbedoRaw4_g170867;
				float2 In_NormalTS3_g170868 = Out_NormalTS4_g170867;
				float3 In_NormalWS3_g170868 = Out_NormalWS4_g170867;
				float4 In_Shader3_g170868 = Out_Shader4_g170867;
				float4 In_Emissive3_g170868 = Out_Emissive4_g170867;
				float In_Grayscale3_g170868 = Out_Grayscale4_g170867;
				float In_Luminosity3_g170868 = Out_Luminosity4_g170867;
				float In_MultiMask3_g170868 = Out_MultiMask4_g170867;
				float In_AlphaClip3_g170868 = Out_AlphaClip4_g170867;
				float In_AlphaFade3_g170868 = Out_AlphaFade4_g170867;
				float3 In_Translucency3_g170868 = Out_Translucency4_g170867;
				float In_Transmission3_g170868 = Out_Transmission4_g170867;
				float In_Thickness3_g170868 = Out_Thickness4_g170867;
				float In_Diffusion3_g170868 = Out_Diffusion4_g170867;
				{
				Data3_g170868.Dummy = In_Dummy3_g170868;
				Data3_g170868.Albedo = In_Albedo3_g170868;
				Data3_g170868.AlbedoRaw = In_AlbedoRaw3_g170868;
				Data3_g170868.NormalTS = In_NormalTS3_g170868;
				Data3_g170868.NormalWS = In_NormalWS3_g170868;
				Data3_g170868.Shader = In_Shader3_g170868;
				Data3_g170868.Emissive= In_Emissive3_g170868;
				Data3_g170868.MultiMask = In_MultiMask3_g170868;
				Data3_g170868.Grayscale = In_Grayscale3_g170868;
				Data3_g170868.Luminosity = In_Luminosity3_g170868;
				Data3_g170868.AlphaClip = In_AlphaClip3_g170868;
				Data3_g170868.AlphaFade = In_AlphaFade3_g170868;
				Data3_g170868.Translucency = In_Translucency3_g170868;
				Data3_g170868.Transmission = In_Transmission3_g170868;
				Data3_g170868.Thickness = In_Thickness3_g170868;
				Data3_g170868.Diffusion = In_Diffusion3_g170868;
				}
				TVEVisualData Data4_g170870 = Data3_g170868;
				float Out_Dummy4_g170870 = 0;
				float3 Out_Albedo4_g170870 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170870 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170870 = float2( 0,0 );
				float3 Out_NormalWS4_g170870 = float3( 0,0,0 );
				float4 Out_Shader4_g170870 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170870 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170870 = 0;
				float Out_Grayscale4_g170870 = 0;
				float Out_Luminosity4_g170870 = 0;
				float Out_AlphaClip4_g170870 = 0;
				float Out_AlphaFade4_g170870 = 0;
				float3 Out_Translucency4_g170870 = float3( 0,0,0 );
				float Out_Transmission4_g170870 = 0;
				float Out_Thickness4_g170870 = 0;
				float Out_Diffusion4_g170870 = 0;
				{
				Out_Dummy4_g170870 = Data4_g170870.Dummy;
				Out_Albedo4_g170870 = Data4_g170870.Albedo;
				Out_AlbedoRaw4_g170870 = Data4_g170870.AlbedoRaw;
				Out_NormalTS4_g170870 = Data4_g170870.NormalTS;
				Out_NormalWS4_g170870 = Data4_g170870.NormalWS;
				Out_Shader4_g170870 = Data4_g170870.Shader;
				Out_Emissive4_g170870= Data4_g170870.Emissive;
				Out_MultiMask4_g170870 = Data4_g170870.MultiMask;
				Out_Grayscale4_g170870 = Data4_g170870.Grayscale;
				Out_Luminosity4_g170870= Data4_g170870.Luminosity;
				Out_AlphaClip4_g170870 = Data4_g170870.AlphaClip;
				Out_AlphaFade4_g170870 = Data4_g170870.AlphaFade;
				Out_Translucency4_g170870 = Data4_g170870.Translucency;
				Out_Transmission4_g170870 = Data4_g170870.Transmission;
				Out_Thickness4_g170870 = Data4_g170870.Thickness;
				Out_Diffusion4_g170870 = Data4_g170870.Diffusion;
				}
				half3 Visual_Albedo127_g170869 = Out_Albedo4_g170870;
				float3 temp_output_622_0_g170869 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170873) = _OverlayAlbedoTex;
				float localFilterTexture19_g170885 = ( 0.0 );
				SamplerState SS19_g170885 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170885 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170885 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170885 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170885 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170885 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170885 = SamplerDefault19_g170885;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170885 = SamplerDefault19_g170885;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170885 = SamplerPoint19_g170885;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170885 = SamplerLow19_g170885;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170885 = SamplerMedium19_g170885;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170885 = SamplerHigh19_g170885;
				#endif
				}
				SamplerState Sampler238_g170873 = SS19_g170885;
				float4 temp_output_6_0_g170874 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170874 = ( temp_output_6_0_g170874 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170874 = temp_output_6_0_g170874;
				#endif
				half4 Overlay_Coords639_g170869 = staticSwitch14_g170874;
				float4 temp_output_37_0_g170873 = Overlay_Coords639_g170869;
				half4 Coords238_g170873 = temp_output_37_0_g170873;
				TVEModelData Data15_g170887 = Data16_g170483;
				float Out_Dummy15_g170887 = 0;
				float3 Out_PositionWS15_g170887 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170887 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170887 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170887 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170887 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170887 = float3( 0,0,0 );
				float4 Out_VertexData15_g170887 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170887 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170887 = Data15_g170887.Dummy;
				Out_PositionWS15_g170887 = Data15_g170887.PositionWS;
				Out_PositionWO15_g170887 = Data15_g170887.PositionWO;
				Out_PivotWS15_g170887 = Data15_g170887.PivotWS;
				Out_PivotWO15_g170887 = Data15_g170887.PivotWO;
				Out_NormalWS15_g170887 = Data15_g170887.NormalWS;
				Out_ViewDirWS15_g170887 = Data15_g170887.ViewDirWS;
				Out_VertexData15_g170887 = Data15_g170887.VertexData;
				Out_BoundsData15_g170887 = Data15_g170887.BoundsData;
				}
				half3 Model_PositionWO602_g170869 = Out_PositionWO15_g170887;
				float3 temp_output_279_0_g170873 = Model_PositionWO602_g170869;
				half3 WorldPosition238_g170873 = temp_output_279_0_g170873;
				half4 localSamplePlanar2D238_g170873 = SamplePlanar2D( Texture238_g170873 , Sampler238_g170873 , Coords238_g170873 , WorldPosition238_g170873 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170873) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170873 = SS19_g170885;
				half4 Coords246_g170873 = temp_output_37_0_g170873;
				half3 WorldPosition246_g170873 = temp_output_279_0_g170873;
				half3 Model_NormalWS712_g170869 = Out_NormalWS15_g170887;
				float3 temp_output_280_0_g170873 = Model_NormalWS712_g170869;
				half3 WorldNormal246_g170873 = temp_output_280_0_g170873;
				half4 localSamplePlanar3D246_g170873 = SamplePlanar3D( Texture246_g170873 , Sampler246_g170873 , Coords246_g170873 , WorldPosition246_g170873 , WorldNormal246_g170873 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170873) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170873 = SS19_g170885;
				float4 Coords234_g170873 = temp_output_37_0_g170873;
				float3 WorldPosition234_g170873 = temp_output_279_0_g170873;
				float4 localSampleStochastic2D234_g170873 = SampleStochastic2D( Texture234_g170873 , Sampler234_g170873 , Coords234_g170873 , WorldPosition234_g170873 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170873) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170873 = SS19_g170885;
				half4 Coords263_g170873 = temp_output_37_0_g170873;
				half3 WorldPosition263_g170873 = temp_output_279_0_g170873;
				half3 WorldNormal263_g170873 = temp_output_280_0_g170873;
				half4 localSampleStochastic3D263_g170873 = SampleStochastic3D( Texture263_g170873 , Sampler263_g170873 , Coords263_g170873 , WorldPosition263_g170873 , WorldNormal263_g170873 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170869 = localSamplePlanar2D238_g170873;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170869 = localSamplePlanar3D246_g170873;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170869 = localSampleStochastic2D234_g170873;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170869 = localSampleStochastic3D263_g170873;
				#else
				float4 staticSwitch676_g170869 = localSamplePlanar2D238_g170873;
				#endif
				half3 Overlay_Albedo526_g170869 = (staticSwitch676_g170869).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170869 = ( temp_output_622_0_g170869 * Overlay_Albedo526_g170869 );
				#else
				float3 staticSwitch578_g170869 = temp_output_622_0_g170869;
				#endif
				float3 temp_output_6_0_g170888 = staticSwitch578_g170869;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170888 = ( temp_output_6_0_g170888 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170888 = temp_output_6_0_g170888;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170877) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170877 = sampler_Linear_Repeat;
				float4 appendResult863_g170869 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170877 = appendResult863_g170869;
				half4 Coords246_g170877 = temp_output_37_0_g170877;
				float3 temp_output_279_0_g170877 = Model_PositionWO602_g170869;
				half3 WorldPosition246_g170877 = temp_output_279_0_g170877;
				float3 temp_output_280_0_g170877 = Model_NormalWS712_g170869;
				half3 WorldNormal246_g170877 = temp_output_280_0_g170877;
				half4 localSamplePlanar3D246_g170877 = SamplePlanar3D( Texture246_g170877 , Sampler246_g170877 , Coords246_g170877 , WorldPosition246_g170877 , WorldNormal246_g170877 );
				half Overlay_GlitterTex854_g170869 = (localSamplePlanar3D246_g170877).x;
				float lerpResult922_g170869 = lerp( 1.0 , float4(atten,0,0,0) , _OverlayGlitterAttenValue);
				half3 Model_PositionWS879_g170869 = Out_PositionWS15_g170887;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170869 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170869 * lerpResult922_g170869 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170869 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170869 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170869 = staticSwitch868_g170869;
				half Overlay_TexMask908_g170869 = 1.0;
				float3 temp_output_739_21_g170869 = Out_NormalWS4_g170870;
				half3 Visual_NormalWS749_g170869 = temp_output_739_21_g170869;
				float clampResult17_g170894 = clamp( saturate( (Visual_NormalWS749_g170869).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170898 = _OverlayProjRemap.x;
				float temp_output_9_0_g170898 = ( clampResult17_g170894 - temp_output_7_0_g170898 );
				float lerpResult842_g170869 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170898 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170869 = lerpResult842_g170869;
				float temp_output_739_15_g170869 = Out_Luminosity4_g170870;
				half Visual_Luminosity654_g170869 = temp_output_739_15_g170869;
				float clampResult17_g170902 = clamp( Visual_Luminosity654_g170869 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170903 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170903 = ( clampResult17_g170902 - temp_output_7_0_g170903 );
				float lerpResult587_g170869 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170903 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170869 = lerpResult587_g170869;
				half4 Model_VertexMasks791_g170869 = Out_VertexData15_g170887;
				float4 break792_g170869 = Model_VertexMasks791_g170869;
				float4 break33_g170889 = _overlay_vert_mode;
				float temp_output_30_0_g170889 = ( break792_g170869.x * break33_g170889.x );
				float temp_output_29_0_g170889 = ( break792_g170869.y * break33_g170889.y );
				float temp_output_31_0_g170889 = ( break792_g170869.z * break33_g170889.z );
				float temp_output_28_0_g170889 = ( temp_output_30_0_g170889 + temp_output_29_0_g170889 + temp_output_31_0_g170889 + ( break792_g170869.w * break33_g170889.w ) );
				float clampResult17_g170890 = clamp( temp_output_28_0_g170889 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170899 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170899 = ( clampResult17_g170890 - temp_output_7_0_g170899 );
				float lerpResult881_g170869 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170899 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170895 = lerpResult881_g170869;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170895 = ( temp_output_6_0_g170895 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170895 = temp_output_6_0_g170895;
				#endif
				half Overlay_VertMask801_g170869 = staticSwitch14_g170895;
				half Overlay_MaskNoise427_g170869 = 1.0;
				TVEGlobalData Data15_g170871 = Data204_g170496;
				float Out_Dummy15_g170871 = 0;
				float4 Out_CoatParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170871 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170871 = Data15_g170871.Dummy;
				Out_CoatParams15_g170871 = Data15_g170871.CoatParams;
				Out_PaintParams15_g170871 = Data15_g170871.PaintParams;
				Out_GlowParams15_g170871 = Data15_g170871.GlowParams;
				Out_AtmoParams15_g170871= Data15_g170871.AtmoParams;
				Out_FadeParams15_g170871= Data15_g170871.FadeParams;
				Out_FormParams15_g170871 = Data15_g170871.FormParams;
				Out_FlowParams15_g170871 = Data15_g170871.FlowParams;
				}
				half4 Global_AtmoParams516_g170869 = Out_AtmoParams15_g170871;
				float temp_output_6_0_g170904 = (Global_AtmoParams516_g170869).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170904 = ( temp_output_6_0_g170904 + ( _OverlayElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170904 = temp_output_6_0_g170904;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170869 = staticSwitch14_g170904;
				#else
				float staticSwitch705_g170869 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170869 = lerp( 1.0 , ( staticSwitch705_g170869 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170869 = lerpResult937_g170869;
				half Custom_Mask646_g170869 = 1.0;
				float temp_output_7_0_g170901 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170901 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170869 * Overlay_MaskProj457_g170869 * Overlay_MaskLuma438_g170869 * Overlay_VertMask801_g170869 * Overlay_MaskNoise427_g170869 * Overlay_MaskGlobal429_g170869 * Custom_Mask646_g170869 ) - temp_output_7_0_g170901 );
				half Overlay_Mask494_g170869 = saturate( ( ( temp_output_9_0_g170901 / ( _OverlayBlendRemap.y - temp_output_7_0_g170901 ) ) + 0.0001 ) );
				float3 lerpResult467_g170869 = lerp( Visual_Albedo127_g170869 , ( staticSwitch14_g170888 + Overlay_GlitterColor865_g170869 ) , Overlay_Mask494_g170869);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170869 = lerpResult467_g170869;
				#else
				float3 staticSwitch577_g170869 = Visual_Albedo127_g170869;
				#endif
				half3 Final_Albedo493_g170869 = staticSwitch577_g170869;
				float3 In_Albedo3_g170872 = Final_Albedo493_g170869;
				float3 In_AlbedoRaw3_g170872 = Out_AlbedoRaw4_g170870;
				half2 Visual_NormalTS535_g170869 = Out_NormalTS4_g170870;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170875) = _OverlayNormalTex;
				float localFilterTexture29_g170886 = ( 0.0 );
				SamplerState SS29_g170886 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170886 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170886 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170886 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170886 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170886 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170886 = SamplerDefault29_g170886;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170886 = SamplerDefault29_g170886;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170886 = SamplerPoint29_g170886;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170886 = SamplerLow29_g170886;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170886 = SamplerMedium29_g170886;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170886 = SamplerHigh29_g170886;
				#endif
				}
				SamplerState Sampler238_g170875 = SS29_g170886;
				float4 temp_output_37_0_g170875 = Overlay_Coords639_g170869;
				half4 Coords238_g170875 = temp_output_37_0_g170875;
				float3 temp_output_279_0_g170875 = Model_PositionWO602_g170869;
				half3 WorldPosition238_g170875 = temp_output_279_0_g170875;
				half4 localSamplePlanar2D238_g170875 = SamplePlanar2D( Texture238_g170875 , Sampler238_g170875 , Coords238_g170875 , WorldPosition238_g170875 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170875) = _OverlayNormalTex;
				SamplerState Sampler246_g170875 = SS29_g170886;
				half4 Coords246_g170875 = temp_output_37_0_g170875;
				half3 WorldPosition246_g170875 = temp_output_279_0_g170875;
				float3 temp_output_280_0_g170875 = Model_NormalWS712_g170869;
				half3 WorldNormal246_g170875 = temp_output_280_0_g170875;
				half4 localSamplePlanar3D246_g170875 = SamplePlanar3D( Texture246_g170875 , Sampler246_g170875 , Coords246_g170875 , WorldPosition246_g170875 , WorldNormal246_g170875 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170875) = _OverlayNormalTex;
				SamplerState Sampler234_g170875 = SS29_g170886;
				float4 Coords234_g170875 = temp_output_37_0_g170875;
				float3 WorldPosition234_g170875 = temp_output_279_0_g170875;
				float4 localSampleStochastic2D234_g170875 = SampleStochastic2D( Texture234_g170875 , Sampler234_g170875 , Coords234_g170875 , WorldPosition234_g170875 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170875) = _OverlayNormalTex;
				SamplerState Sampler263_g170875 = SS29_g170886;
				half4 Coords263_g170875 = temp_output_37_0_g170875;
				half3 WorldPosition263_g170875 = temp_output_279_0_g170875;
				half3 WorldNormal263_g170875 = temp_output_280_0_g170875;
				half4 localSampleStochastic3D263_g170875 = SampleStochastic3D( Texture263_g170875 , Sampler263_g170875 , Coords263_g170875 , WorldPosition263_g170875 , WorldNormal263_g170875 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170869 = localSamplePlanar2D238_g170875;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170869 = localSamplePlanar3D246_g170875;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170869 = localSampleStochastic2D234_g170875;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170869 = localSampleStochastic3D263_g170875;
				#else
				float4 staticSwitch686_g170869 = localSamplePlanar2D238_g170875;
				#endif
				half4 Normal_Packed45_g170879 = staticSwitch686_g170869;
				float2 appendResult58_g170879 = (float2(( (Normal_Packed45_g170879).x * (Normal_Packed45_g170879).w ) , (Normal_Packed45_g170879).y));
				half2 Normal_Default50_g170879 = appendResult58_g170879;
				half2 Normal_ASTC41_g170879 = (Normal_Packed45_g170879).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170879 = Normal_ASTC41_g170879;
				#else
				float2 staticSwitch38_g170879 = Normal_Default50_g170879;
				#endif
				half2 Normal_NO_DTX544_g170879 = (Normal_Packed45_g170879).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170879 = Normal_NO_DTX544_g170879;
				#else
				float2 staticSwitch37_g170879 = staticSwitch38_g170879;
				#endif
				half2 Normal_Planar45_g170878 = (staticSwitch37_g170879*2.0 + -1.0);
				float2 break71_g170878 = Normal_Planar45_g170878;
				float3 appendResult72_g170878 = (float3(break71_g170878.x , 0.0 , break71_g170878.y));
				half2 Overlay_Normal528_g170869 = (mul( ase_worldToTangent, appendResult72_g170878 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170869 = Overlay_Normal528_g170869;
				#else
				float2 staticSwitch579_g170869 = Visual_NormalTS535_g170869;
				#endif
				float2 lerpResult551_g170869 = lerp( Visual_NormalTS535_g170869 , ( staticSwitch579_g170869 * _OverlayNormalValue ) , Overlay_Mask494_g170869);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170869 = lerpResult551_g170869;
				#else
				float2 staticSwitch583_g170869 = Visual_NormalTS535_g170869;
				#endif
				half2 Final_NormalTS499_g170869 = staticSwitch583_g170869;
				float2 In_NormalTS3_g170872 = Final_NormalTS499_g170869;
				float3 In_NormalWS3_g170872 = temp_output_739_21_g170869;
				half4 Visual_Masks536_g170869 = Out_Shader4_g170870;
				float4 appendResult585_g170869 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170869 = lerp( Visual_Masks536_g170869 , appendResult585_g170869 , Overlay_Mask494_g170869);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170869 = lerpResult584_g170869;
				#else
				float4 staticSwitch586_g170869 = Visual_Masks536_g170869;
				#endif
				half4 Final_Masks482_g170869 = staticSwitch586_g170869;
				float4 In_Shader3_g170872 = Final_Masks482_g170869;
				float4 In_Emissive3_g170872 = Out_Emissive4_g170870;
				float temp_output_739_12_g170869 = Out_Grayscale4_g170870;
				float In_Grayscale3_g170872 = temp_output_739_12_g170869;
				float In_Luminosity3_g170872 = temp_output_739_15_g170869;
				float In_MultiMask3_g170872 = Out_MultiMask4_g170870;
				float In_AlphaClip3_g170872 = Out_AlphaClip4_g170870;
				float In_AlphaFade3_g170872 = Out_AlphaFade4_g170870;
				float3 In_Translucency3_g170872 = Out_Translucency4_g170870;
				half Visual_Transmission699_g170869 = Out_Transmission4_g170870;
				float lerpResult746_g170869 = lerp( Visual_Transmission699_g170869 , ( Visual_Transmission699_g170869 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170869 * Overlay_MaskNoise427_g170869 * Overlay_MaskGlobal429_g170869 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170869 = lerpResult746_g170869;
				#else
				float staticSwitch703_g170869 = Visual_Transmission699_g170869;
				#endif
				half Final_Transmission702_g170869 = staticSwitch703_g170869;
				float In_Transmission3_g170872 = Final_Transmission702_g170869;
				float In_Thickness3_g170872 = Out_Thickness4_g170870;
				float In_Diffusion3_g170872 = Out_Diffusion4_g170870;
				{
				Data3_g170872.Dummy = In_Dummy3_g170872;
				Data3_g170872.Albedo = In_Albedo3_g170872;
				Data3_g170872.AlbedoRaw = In_AlbedoRaw3_g170872;
				Data3_g170872.NormalTS = In_NormalTS3_g170872;
				Data3_g170872.NormalWS = In_NormalWS3_g170872;
				Data3_g170872.Shader = In_Shader3_g170872;
				Data3_g170872.Emissive= In_Emissive3_g170872;
				Data3_g170872.MultiMask = In_MultiMask3_g170872;
				Data3_g170872.Grayscale = In_Grayscale3_g170872;
				Data3_g170872.Luminosity = In_Luminosity3_g170872;
				Data3_g170872.AlphaClip = In_AlphaClip3_g170872;
				Data3_g170872.AlphaFade = In_AlphaFade3_g170872;
				Data3_g170872.Translucency = In_Translucency3_g170872;
				Data3_g170872.Transmission = In_Transmission3_g170872;
				Data3_g170872.Thickness = In_Thickness3_g170872;
				Data3_g170872.Diffusion = In_Diffusion3_g170872;
				}
				TVEVisualData Data4_g170907 = Data3_g170872;
				float Out_Dummy4_g170907 = 0;
				float3 Out_Albedo4_g170907 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170907 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170907 = float2( 0,0 );
				float3 Out_NormalWS4_g170907 = float3( 0,0,0 );
				float4 Out_Shader4_g170907 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170907 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170907 = 0;
				float Out_Grayscale4_g170907 = 0;
				float Out_Luminosity4_g170907 = 0;
				float Out_AlphaClip4_g170907 = 0;
				float Out_AlphaFade4_g170907 = 0;
				float3 Out_Translucency4_g170907 = float3( 0,0,0 );
				float Out_Transmission4_g170907 = 0;
				float Out_Thickness4_g170907 = 0;
				float Out_Diffusion4_g170907 = 0;
				{
				Out_Dummy4_g170907 = Data4_g170907.Dummy;
				Out_Albedo4_g170907 = Data4_g170907.Albedo;
				Out_AlbedoRaw4_g170907 = Data4_g170907.AlbedoRaw;
				Out_NormalTS4_g170907 = Data4_g170907.NormalTS;
				Out_NormalWS4_g170907 = Data4_g170907.NormalWS;
				Out_Shader4_g170907 = Data4_g170907.Shader;
				Out_Emissive4_g170907= Data4_g170907.Emissive;
				Out_MultiMask4_g170907 = Data4_g170907.MultiMask;
				Out_Grayscale4_g170907 = Data4_g170907.Grayscale;
				Out_Luminosity4_g170907= Data4_g170907.Luminosity;
				Out_AlphaClip4_g170907 = Data4_g170907.AlphaClip;
				Out_AlphaFade4_g170907 = Data4_g170907.AlphaFade;
				Out_Translucency4_g170907 = Data4_g170907.Translucency;
				Out_Transmission4_g170907 = Data4_g170907.Transmission;
				Out_Thickness4_g170907 = Data4_g170907.Thickness;
				Out_Diffusion4_g170907 = Data4_g170907.Diffusion;
				}
				half3 Visual_Albedo127_g170906 = Out_Albedo4_g170907;
				TVEGlobalData Data15_g170912 = Data204_g170496;
				float Out_Dummy15_g170912 = 0;
				float4 Out_CoatParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170912 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170912 = Data15_g170912.Dummy;
				Out_CoatParams15_g170912 = Data15_g170912.CoatParams;
				Out_PaintParams15_g170912 = Data15_g170912.PaintParams;
				Out_GlowParams15_g170912 = Data15_g170912.GlowParams;
				Out_AtmoParams15_g170912= Data15_g170912.AtmoParams;
				Out_FadeParams15_g170912= Data15_g170912.FadeParams;
				Out_FormParams15_g170912 = Data15_g170912.FormParams;
				Out_FlowParams15_g170912 = Data15_g170912.FlowParams;
				}
				half4 Global_AtmoParams516_g170906 = Out_AtmoParams15_g170912;
				float4 temp_output_6_0_g170933 = Global_AtmoParams516_g170906;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170933 = ( temp_output_6_0_g170933 + ( _WetnessElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170933 = temp_output_6_0_g170933;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170906 = staticSwitch14_g170933;
				#else
				float4 staticSwitch663_g170906 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170906 = lerp( float2( 1,1 ) , (( staticSwitch663_g170906 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170906 = lerpResult1121_g170906;
				half Global_Wetness429_g170906 = break1123_g170906.x;
				half Wetness_Value1042_g170906 = ( _WetnessIntensityValue * Global_Wetness429_g170906 );
				TVEModelData Data15_g170918 = Data16_g170483;
				float Out_Dummy15_g170918 = 0;
				float3 Out_PositionWS15_g170918 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170918 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170918 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170918 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170918 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170918 = float3( 0,0,0 );
				float4 Out_VertexData15_g170918 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170918 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170918 = Data15_g170918.Dummy;
				Out_PositionWS15_g170918 = Data15_g170918.PositionWS;
				Out_PositionWO15_g170918 = Data15_g170918.PositionWO;
				Out_PivotWS15_g170918 = Data15_g170918.PivotWS;
				Out_PivotWO15_g170918 = Data15_g170918.PivotWO;
				Out_NormalWS15_g170918 = Data15_g170918.NormalWS;
				Out_ViewDirWS15_g170918 = Data15_g170918.ViewDirWS;
				Out_VertexData15_g170918 = Data15_g170918.VertexData;
				Out_BoundsData15_g170918 = Data15_g170918.BoundsData;
				}
				half4 Model_VertexData1030_g170906 = Out_VertexData15_g170918;
				float4 break1019_g170906 = Model_VertexData1030_g170906;
				float4 break33_g170921 = _wetness_vert_mode;
				float temp_output_30_0_g170921 = ( break1019_g170906.x * break33_g170921.x );
				float temp_output_29_0_g170921 = ( break1019_g170906.y * break33_g170921.y );
				float temp_output_31_0_g170921 = ( break1019_g170906.z * break33_g170921.z );
				float temp_output_28_0_g170921 = ( temp_output_30_0_g170921 + temp_output_29_0_g170921 + temp_output_31_0_g170921 + ( break1019_g170906.w * break33_g170921.w ) );
				float clampResult17_g170920 = clamp( temp_output_28_0_g170921 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170929 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170929 = ( clampResult17_g170920 - temp_output_7_0_g170929 );
				float lerpResult1026_g170906 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170929 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170922 = lerpResult1026_g170906;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170922 = ( temp_output_6_0_g170922 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170922 = temp_output_6_0_g170922;
				#endif
				float temp_output_1025_0_g170906 = staticSwitch14_g170922;
				half Wetness_VertMask1024_g170906 = temp_output_1025_0_g170906;
				float temp_output_1043_0_g170906 = ( Wetness_Value1042_g170906 * Wetness_VertMask1024_g170906 );
				half Wetness_Mask866_g170906 = temp_output_1043_0_g170906;
				float4 break1083_g170906 = Model_VertexData1030_g170906;
				float4 break33_g170924 = _wetness_water_vert_mode;
				float temp_output_30_0_g170924 = ( break1083_g170906.x * break33_g170924.x );
				float temp_output_29_0_g170924 = ( break1083_g170906.y * break33_g170924.y );
				float temp_output_31_0_g170924 = ( break1083_g170906.z * break33_g170924.z );
				float temp_output_28_0_g170924 = ( temp_output_30_0_g170924 + temp_output_29_0_g170924 + temp_output_31_0_g170924 + ( break1083_g170906.w * break33_g170924.w ) );
				float clampResult17_g170923 = clamp( temp_output_28_0_g170924 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170930 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170930 = ( clampResult17_g170923 - temp_output_7_0_g170930 );
				float lerpResult1089_g170906 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170930 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170925 = lerpResult1089_g170906;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170925 = ( temp_output_6_0_g170925 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170925 = temp_output_6_0_g170925;
				#endif
				float temp_output_1091_0_g170906 = staticSwitch14_g170925;
				half Water_VertMask1094_g170906 = temp_output_1091_0_g170906;
				half4 Visual_Masks536_g170906 = Out_Shader4_g170907;
				float lerpResult1013_g170906 = lerp( 1.0 , (Visual_Masks536_g170906).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170906 = lerpResult1013_g170906;
				float clampResult17_g170919 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170906 * Water_VertMask1094_g170906 ) - Water_HeightMask782_g170906 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170932 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170932 = ( clampResult17_g170919 - temp_output_7_0_g170932 );
				half3 Model_NormalWS798_g170906 = Out_NormalWS15_g170918;
				float temp_output_786_0_g170906 = saturate( (Model_NormalWS798_g170906).y );
				half Wetness_ProjMask790_g170906 = temp_output_786_0_g170906;
				half Water_Mask760_g170906 = ( saturate( ( ( temp_output_9_0_g170932 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170906 );
				float3 lerpResult918_g170906 = lerp( Visual_Albedo127_g170906 , ( Visual_Albedo127_g170906 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170906);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170906 = lerpResult918_g170906;
				#else
				float3 staticSwitch946_g170906 = Visual_Albedo127_g170906;
				#endif
				float3 lerpResult768_g170906 = lerp( staticSwitch946_g170906 , ( staticSwitch946_g170906 * staticSwitch946_g170906 ) , _WetnessContrastValue);
				float3 lerpResult651_g170906 = lerp( Visual_Albedo127_g170906 , lerpResult768_g170906 , Wetness_Mask866_g170906);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170906 = lerpResult651_g170906;
				#else
				float3 staticSwitch577_g170906 = Visual_Albedo127_g170906;
				#endif
				half3 Final_Albedo493_g170906 = staticSwitch577_g170906;
				float3 In_Albedo3_g170908 = Final_Albedo493_g170906;
				float3 In_AlbedoRaw3_g170908 = Out_AlbedoRaw4_g170907;
				half2 Visual_Normal535_g170906 = Out_NormalTS4_g170907;
				float lerpResult877_g170906 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170906 * Water_Mask760_g170906 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170906 = ( Visual_Normal535_g170906 * lerpResult877_g170906 );
				#else
				float2 staticSwitch957_g170906 = Visual_Normal535_g170906;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170916) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170916 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170906 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170916 = appendResult924_g170906;
				half4 Coords238_g170916 = temp_output_37_0_g170916;
				half3 Model_PositionWO602_g170906 = Out_PositionWO15_g170918;
				float3 temp_output_279_0_g170916 = Model_PositionWO602_g170906;
				half3 WorldPosition238_g170916 = temp_output_279_0_g170916;
				half4 localSamplePlanar2D238_g170916 = SamplePlanar2D( Texture238_g170916 , Sampler238_g170916 , Coords238_g170916 , WorldPosition238_g170916 );
				float4 temp_output_1010_0_g170906 = localSamplePlanar2D238_g170916;
				half2 Rain_DropsNormal919_g170906 = (temp_output_1010_0_g170906).zw;
				float2 temp_output_903_0_g170906 = (Rain_DropsNormal919_g170906*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170906 = (temp_output_1010_0_g170906).xy;
				float2 lerpResult904_g170906 = lerp( temp_output_903_0_g170906 , (Rain_RingsNormal713_g170906*2.0 + -1.0) , ( Water_Mask760_g170906 * Water_Mask760_g170906 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170906 = lerpResult904_g170906;
				#else
				float2 staticSwitch960_g170906 = temp_output_903_0_g170906;
				#endif
				half2 Rain_Drops1002_g170906 = ( staticSwitch960_g170906 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170906 = Out_PositionWS15_g170918;
				half Global_Rain955_g170906 = break1123_g170906.y;
				half Rain_Value1067_g170906 = Global_Rain955_g170906;
				float4 break1097_g170906 = Model_VertexData1030_g170906;
				float4 break33_g170927 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170927 = ( break1097_g170906.x * break33_g170927.x );
				float temp_output_29_0_g170927 = ( break1097_g170906.y * break33_g170927.y );
				float temp_output_31_0_g170927 = ( break1097_g170906.z * break33_g170927.z );
				float temp_output_28_0_g170927 = ( temp_output_30_0_g170927 + temp_output_29_0_g170927 + temp_output_31_0_g170927 + ( break1097_g170906.w * break33_g170927.w ) );
				float clampResult17_g170926 = clamp( temp_output_28_0_g170927 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170931 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170931 = ( clampResult17_g170926 - temp_output_7_0_g170931 );
				float lerpResult1100_g170906 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170931 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170928 = lerpResult1100_g170906;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170928 = ( temp_output_6_0_g170928 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170928 = temp_output_6_0_g170928;
				#endif
				float temp_output_1101_0_g170906 = staticSwitch14_g170928;
				half Rain_VertMask1108_g170906 = temp_output_1101_0_g170906;
				half Rain_Mask999_g170906 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170906 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170906 * Rain_VertMask1108_g170906 );
				half2 Normal_Planar45_g170915 = ( Rain_Drops1002_g170906 * Rain_Mask999_g170906 * Wetness_ProjMask790_g170906 );
				float2 break71_g170915 = Normal_Planar45_g170915;
				float3 appendResult72_g170915 = (float3(break71_g170915.x , 0.0 , break71_g170915.y));
				half2 Wetness_Normal526_g170906 = (mul( ase_worldToTangent, appendResult72_g170915 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170906 = Wetness_Normal526_g170906;
				#else
				float2 staticSwitch583_g170906 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170906 = ( staticSwitch957_g170906 + staticSwitch583_g170906 );
				#else
				float2 staticSwitch774_g170906 = Visual_Normal535_g170906;
				#endif
				half2 Final_Normal499_g170906 = staticSwitch774_g170906;
				float2 In_NormalTS3_g170908 = Final_Normal499_g170906;
				float3 In_NormalWS3_g170908 = Out_NormalWS4_g170907;
				float4 break658_g170906 = Visual_Masks536_g170906;
				float temp_output_935_0_g170906 = ( Wetness_Mask866_g170906 * _WetnessSmoothnessValue );
				float lerpResult941_g170906 = lerp( temp_output_935_0_g170906 , 2.0 , Water_Mask760_g170906);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170906 = lerpResult941_g170906;
				#else
				float staticSwitch959_g170906 = temp_output_935_0_g170906;
				#endif
				float4 appendResult661_g170906 = (float4(break658_g170906.x , break658_g170906.y , break658_g170906.z , saturate( ( break658_g170906.w + staticSwitch959_g170906 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170906 = appendResult661_g170906;
				#else
				float4 staticSwitch586_g170906 = Visual_Masks536_g170906;
				#endif
				half4 Final_Masks482_g170906 = staticSwitch586_g170906;
				float4 In_Shader3_g170908 = Final_Masks482_g170906;
				float4 In_Emissive3_g170908 = Out_Emissive4_g170907;
				float In_Grayscale3_g170908 = Out_Grayscale4_g170907;
				float In_Luminosity3_g170908 = Out_Luminosity4_g170907;
				float In_MultiMask3_g170908 = Out_MultiMask4_g170907;
				float In_AlphaClip3_g170908 = Out_AlphaClip4_g170907;
				float In_AlphaFade3_g170908 = Out_AlphaFade4_g170907;
				float3 In_Translucency3_g170908 = Out_Translucency4_g170907;
				float In_Transmission3_g170908 = Out_Transmission4_g170907;
				float In_Thickness3_g170908 = Out_Thickness4_g170907;
				float In_Diffusion3_g170908 = Out_Diffusion4_g170907;
				{
				Data3_g170908.Dummy = In_Dummy3_g170908;
				Data3_g170908.Albedo = In_Albedo3_g170908;
				Data3_g170908.AlbedoRaw = In_AlbedoRaw3_g170908;
				Data3_g170908.NormalTS = In_NormalTS3_g170908;
				Data3_g170908.NormalWS = In_NormalWS3_g170908;
				Data3_g170908.Shader = In_Shader3_g170908;
				Data3_g170908.Emissive= In_Emissive3_g170908;
				Data3_g170908.MultiMask = In_MultiMask3_g170908;
				Data3_g170908.Grayscale = In_Grayscale3_g170908;
				Data3_g170908.Luminosity = In_Luminosity3_g170908;
				Data3_g170908.AlphaClip = In_AlphaClip3_g170908;
				Data3_g170908.AlphaFade = In_AlphaFade3_g170908;
				Data3_g170908.Translucency = In_Translucency3_g170908;
				Data3_g170908.Transmission = In_Transmission3_g170908;
				Data3_g170908.Thickness = In_Thickness3_g170908;
				Data3_g170908.Diffusion = In_Diffusion3_g170908;
				}
				TVEVisualData Data4_g170938 = Data3_g170908;
				float Out_Dummy4_g170938 = 0;
				float3 Out_Albedo4_g170938 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170938 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170938 = float2( 0,0 );
				float3 Out_NormalWS4_g170938 = float3( 0,0,0 );
				float4 Out_Shader4_g170938 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170938 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170938 = 0;
				float Out_Grayscale4_g170938 = 0;
				float Out_Luminosity4_g170938 = 0;
				float Out_AlphaClip4_g170938 = 0;
				float Out_AlphaFade4_g170938 = 0;
				float3 Out_Translucency4_g170938 = float3( 0,0,0 );
				float Out_Transmission4_g170938 = 0;
				float Out_Thickness4_g170938 = 0;
				float Out_Diffusion4_g170938 = 0;
				{
				Out_Dummy4_g170938 = Data4_g170938.Dummy;
				Out_Albedo4_g170938 = Data4_g170938.Albedo;
				Out_AlbedoRaw4_g170938 = Data4_g170938.AlbedoRaw;
				Out_NormalTS4_g170938 = Data4_g170938.NormalTS;
				Out_NormalWS4_g170938 = Data4_g170938.NormalWS;
				Out_Shader4_g170938 = Data4_g170938.Shader;
				Out_Emissive4_g170938= Data4_g170938.Emissive;
				Out_MultiMask4_g170938 = Data4_g170938.MultiMask;
				Out_Grayscale4_g170938 = Data4_g170938.Grayscale;
				Out_Luminosity4_g170938= Data4_g170938.Luminosity;
				Out_AlphaClip4_g170938 = Data4_g170938.AlphaClip;
				Out_AlphaFade4_g170938 = Data4_g170938.AlphaFade;
				Out_Translucency4_g170938 = Data4_g170938.Translucency;
				Out_Transmission4_g170938 = Data4_g170938.Transmission;
				Out_Thickness4_g170938 = Data4_g170938.Thickness;
				Out_Diffusion4_g170938 = Data4_g170938.Diffusion;
				}
				float3 In_Albedo3_g170936 = Out_Albedo4_g170938;
				float3 In_AlbedoRaw3_g170936 = Out_AlbedoRaw4_g170938;
				float2 In_NormalTS3_g170936 = Out_NormalTS4_g170938;
				float3 In_NormalWS3_g170936 = Out_NormalWS4_g170938;
				float4 In_Shader3_g170936 = Out_Shader4_g170938;
				float4 In_Emissive3_g170936 = Out_Emissive4_g170938;
				float In_Grayscale3_g170936 = Out_Grayscale4_g170938;
				float In_Luminosity3_g170936 = Out_Luminosity4_g170938;
				float temp_output_836_11_g170935 = Out_MultiMask4_g170938;
				float In_MultiMask3_g170936 = temp_output_836_11_g170935;
				half Visual_AlphaClip667_g170935 = Out_AlphaClip4_g170938;
				TVEGlobalData Data15_g170937 = Data204_g170496;
				float Out_Dummy15_g170937 = 0;
				float4 Out_CoatParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170937 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170937 = Data15_g170937.Dummy;
				Out_CoatParams15_g170937 = Data15_g170937.CoatParams;
				Out_PaintParams15_g170937 = Data15_g170937.PaintParams;
				Out_GlowParams15_g170937 = Data15_g170937.GlowParams;
				Out_AtmoParams15_g170937= Data15_g170937.AtmoParams;
				Out_FadeParams15_g170937= Data15_g170937.FadeParams;
				Out_FormParams15_g170937 = Data15_g170937.FormParams;
				Out_FlowParams15_g170937 = Data15_g170937.FlowParams;
				}
				half4 Global_FadeParams516_g170935 = Out_FadeParams15_g170937;
				float temp_output_6_0_g170948 = saturate( (Global_FadeParams516_g170935).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170948 = ( temp_output_6_0_g170948 + ( _CutoutElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170948 = temp_output_6_0_g170948;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170935 = staticSwitch14_g170948;
				#else
				float staticSwitch663_g170935 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170935 = lerp( 1.0 , ( staticSwitch663_g170935 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170935 = lerpResult843_g170935;
				float lerpResult811_g170935 = lerp( 1.0 , Visual_AlphaClip667_g170935 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170935 = lerpResult811_g170935;
				TVEModelData Data15_g170939 = Data16_g170483;
				float Out_Dummy15_g170939 = 0;
				float3 Out_PositionWS15_g170939 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170939 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170939 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170939 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170939 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170939 = float3( 0,0,0 );
				float4 Out_VertexData15_g170939 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170939 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170939 = Data15_g170939.Dummy;
				Out_PositionWS15_g170939 = Data15_g170939.PositionWS;
				Out_PositionWO15_g170939 = Data15_g170939.PositionWO;
				Out_PivotWS15_g170939 = Data15_g170939.PivotWS;
				Out_PivotWO15_g170939 = Data15_g170939.PivotWO;
				Out_NormalWS15_g170939 = Data15_g170939.NormalWS;
				Out_ViewDirWS15_g170939 = Data15_g170939.ViewDirWS;
				Out_VertexData15_g170939 = Data15_g170939.VertexData;
				Out_BoundsData15_g170939 = Data15_g170939.BoundsData;
				}
				half3 Model_PositionWO602_g170935 = Out_PositionWO15_g170939;
				float4 tex3DNode60_g170942 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170935 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170935 = lerp( 1.0 , tex3DNode60_g170942.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170935 = lerpResult673_g170935;
				half4 Model_VertexMasks752_g170935 = Out_VertexData15_g170939;
				float4 break755_g170935 = Model_VertexMasks752_g170935;
				float4 break33_g170940 = _cutout_vert_mode;
				float temp_output_30_0_g170940 = ( break755_g170935.x * break33_g170940.x );
				float temp_output_29_0_g170940 = ( break755_g170935.y * break33_g170940.y );
				float temp_output_31_0_g170940 = ( break755_g170935.z * break33_g170940.z );
				float temp_output_28_0_g170940 = ( temp_output_30_0_g170940 + temp_output_29_0_g170940 + temp_output_31_0_g170940 + ( break755_g170935.w * break33_g170940.w ) );
				float clampResult17_g170941 = clamp( temp_output_28_0_g170940 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170947 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170947 = ( clampResult17_g170941 - temp_output_7_0_g170947 );
				float lerpResult820_g170935 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170947 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170944 = lerpResult820_g170935;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170944 = ( temp_output_6_0_g170944 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170944 = temp_output_6_0_g170944;
				#endif
				float temp_output_801_0_g170935 = staticSwitch14_g170944;
				half Local_VertMask766_g170935 = temp_output_801_0_g170935;
				half Visual_MultiMask671_g170935 = temp_output_836_11_g170935;
				float lerpResult683_g170935 = lerp( 1.0 , Visual_MultiMask671_g170935 , _CutoutMultiValue);
				half Local_MultiMask685_g170935 = lerpResult683_g170935;
				float lerpResult728_g170935 = lerp( Visual_AlphaClip667_g170935 , min( Visual_AlphaClip667_g170935 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170935 ) - ( Local_AlphaMask814_g170935 * Local_NoiseMask678_g170935 * Local_VertMask766_g170935 ) ) ) ) , Local_MultiMask685_g170935);
				half Local_AlphaClip784_g170935 = lerpResult728_g170935;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170935 = Local_AlphaClip784_g170935;
				#else
				float staticSwitch577_g170935 = Visual_AlphaClip667_g170935;
				#endif
				half Final_AlphaClip795_g170935 = staticSwitch577_g170935;
				float In_AlphaClip3_g170936 = Final_AlphaClip795_g170935;
				float In_AlphaFade3_g170936 = Out_AlphaFade4_g170938;
				float3 In_Translucency3_g170936 = Out_Translucency4_g170938;
				float In_Transmission3_g170936 = Out_Transmission4_g170938;
				float In_Thickness3_g170936 = Out_Thickness4_g170938;
				float In_Diffusion3_g170936 = Out_Diffusion4_g170938;
				{
				Data3_g170936.Dummy = In_Dummy3_g170936;
				Data3_g170936.Albedo = In_Albedo3_g170936;
				Data3_g170936.AlbedoRaw = In_AlbedoRaw3_g170936;
				Data3_g170936.NormalTS = In_NormalTS3_g170936;
				Data3_g170936.NormalWS = In_NormalWS3_g170936;
				Data3_g170936.Shader = In_Shader3_g170936;
				Data3_g170936.Emissive= In_Emissive3_g170936;
				Data3_g170936.MultiMask = In_MultiMask3_g170936;
				Data3_g170936.Grayscale = In_Grayscale3_g170936;
				Data3_g170936.Luminosity = In_Luminosity3_g170936;
				Data3_g170936.AlphaClip = In_AlphaClip3_g170936;
				Data3_g170936.AlphaFade = In_AlphaFade3_g170936;
				Data3_g170936.Translucency = In_Translucency3_g170936;
				Data3_g170936.Transmission = In_Transmission3_g170936;
				Data3_g170936.Thickness = In_Thickness3_g170936;
				Data3_g170936.Diffusion = In_Diffusion3_g170936;
				}
				TVEVisualData Data4_g170952 = Data3_g170936;
				float Out_Dummy4_g170952 = 0;
				float3 Out_Albedo4_g170952 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170952 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170952 = float2( 0,0 );
				float3 Out_NormalWS4_g170952 = float3( 0,0,0 );
				float4 Out_Shader4_g170952 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170952 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170952 = 0;
				float Out_Grayscale4_g170952 = 0;
				float Out_Luminosity4_g170952 = 0;
				float Out_AlphaClip4_g170952 = 0;
				float Out_AlphaFade4_g170952 = 0;
				float3 Out_Translucency4_g170952 = float3( 0,0,0 );
				float Out_Transmission4_g170952 = 0;
				float Out_Thickness4_g170952 = 0;
				float Out_Diffusion4_g170952 = 0;
				{
				Out_Dummy4_g170952 = Data4_g170952.Dummy;
				Out_Albedo4_g170952 = Data4_g170952.Albedo;
				Out_AlbedoRaw4_g170952 = Data4_g170952.AlbedoRaw;
				Out_NormalTS4_g170952 = Data4_g170952.NormalTS;
				Out_NormalWS4_g170952 = Data4_g170952.NormalWS;
				Out_Shader4_g170952 = Data4_g170952.Shader;
				Out_Emissive4_g170952= Data4_g170952.Emissive;
				Out_MultiMask4_g170952 = Data4_g170952.MultiMask;
				Out_Grayscale4_g170952 = Data4_g170952.Grayscale;
				Out_Luminosity4_g170952= Data4_g170952.Luminosity;
				Out_AlphaClip4_g170952 = Data4_g170952.AlphaClip;
				Out_AlphaFade4_g170952 = Data4_g170952.AlphaFade;
				Out_Translucency4_g170952 = Data4_g170952.Translucency;
				Out_Transmission4_g170952 = Data4_g170952.Transmission;
				Out_Thickness4_g170952 = Data4_g170952.Thickness;
				Out_Diffusion4_g170952 = Data4_g170952.Diffusion;
				}
				float3 In_Albedo3_g170953 = Out_Albedo4_g170952;
				float3 In_AlbedoRaw3_g170953 = Out_AlbedoRaw4_g170952;
				float2 In_NormalTS3_g170953 = Out_NormalTS4_g170952;
				float3 In_NormalWS3_g170953 = Out_NormalWS4_g170952;
				float4 In_Shader3_g170953 = Out_Shader4_g170952;
				float4 In_Emissive3_g170953 = Out_Emissive4_g170952;
				float In_Grayscale3_g170953 = Out_Grayscale4_g170952;
				float In_Luminosity3_g170953 = Out_Luminosity4_g170952;
				float temp_output_821_11_g170950 = Out_MultiMask4_g170952;
				float In_MultiMask3_g170953 = temp_output_821_11_g170950;
				half Visual_AlphaClip754_g170950 = Out_AlphaClip4_g170952;
				half Dither_Constant768_g170950 = _DitherConstantValue;
				half Dither_BiasProximity881_g170950 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170950 = TVE_DitherParams.w;
				float lerpResult884_g170950 = lerp( 1.0 , Dither_BiasProximity881_g170950 , Dither_BiasEnabled883_g170950);
				float temp_output_7_0_g170961 = _DitherProximityMaxValue;
				float temp_output_9_0_g170961 = ( ( distance( worldPos , _WorldSpaceCameraPos ) * lerpResult884_g170950 ) - temp_output_7_0_g170961 );
				half Dither_Proximity767_g170950 = ( saturate( ( ( temp_output_9_0_g170961 / ( _DitherProximityMinValue - temp_output_7_0_g170961 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170954 = Data16_g170483;
				float Out_Dummy15_g170954 = 0;
				float3 Out_PositionWS15_g170954 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170954 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170954 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170954 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170954 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170954 = float3( 0,0,0 );
				float4 Out_VertexData15_g170954 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170954 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170954 = Data15_g170954.Dummy;
				Out_PositionWS15_g170954 = Data15_g170954.PositionWS;
				Out_PositionWO15_g170954 = Data15_g170954.PositionWO;
				Out_PivotWS15_g170954 = Data15_g170954.PivotWS;
				Out_PivotWO15_g170954 = Data15_g170954.PivotWO;
				Out_NormalWS15_g170954 = Data15_g170954.NormalWS;
				Out_ViewDirWS15_g170954 = Data15_g170954.ViewDirWS;
				Out_VertexData15_g170954 = Data15_g170954.VertexData;
				Out_BoundsData15_g170954 = Data15_g170954.BoundsData;
				}
				half3 Model_PositionWS776_g170950 = Out_PositionWS15_g170954;
				half Dither_BiasDistance882_g170950 = TVE_DitherParams.z;
				float lerpResult888_g170950 = lerp( 1.0 , Dither_BiasDistance882_g170950 , Dither_BiasEnabled883_g170950);
				float temp_output_7_0_g170962 = _DitherDistanceMinValue;
				float temp_output_9_0_g170962 = ( ( distance( Model_PositionWS776_g170950 , _WorldSpaceCameraPos ) * lerpResult888_g170950 ) - temp_output_7_0_g170962 );
				half Dither_Distance856_g170950 = ( saturate( ( ( temp_output_9_0_g170962 / ( _DitherDistanceMaxValue - temp_output_7_0_g170962 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170950 = Out_ViewDirWS15_g170954;
				float3 normalizeResult792_g170950 = normalize( cross( ddy( worldPos ) , ddx( worldPos ) ) );
				float dotResult778_g170950 = dot( Model_ViewDirWS845_g170950 , normalizeResult792_g170950 );
				half Dither_Glancing784_g170950 = ( saturate( ( ( 1.0 - abs( dotResult778_g170950 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170950 = max( max( max( Dither_Constant768_g170950 , Dither_Proximity767_g170950 ) , Dither_Distance856_g170950 ) , Dither_Glancing784_g170950 );
				half3 Model_PositionWO602_g170950 = Out_PositionWO15_g170954;
				float4 tex3DNode60_g170957 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170950 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170950 = tex3DNode60_g170957.r;
				half Local_MaskNoise678_g170950 = temp_output_809_0_g170950;
				half Visual_MultiMask671_g170950 = temp_output_821_11_g170950;
				float lerpResult683_g170950 = lerp( 1.0 , Visual_MultiMask671_g170950 , _DitherMultiValue);
				half Local_MaskMulti685_g170950 = lerpResult683_g170950;
				half Custom_Mask826_g170950 = 1.0;
				float lerpResult728_g170950 = lerp( Visual_AlphaClip754_g170950 , min( Visual_AlphaClip754_g170950 , ( -0.001 - ( Dither_Value429_g170950 - Local_MaskNoise678_g170950 ) ) ) , ( Local_MaskMulti685_g170950 * Custom_Mask826_g170950 ));
				half Local_AlphaClip834_g170950 = lerpResult728_g170950;
				#ifdef TVE_DITHER
				float staticSwitch577_g170950 = Local_AlphaClip834_g170950;
				#else
				float staticSwitch577_g170950 = Visual_AlphaClip754_g170950;
				#endif
				half Final_AlphaClip493_g170950 = staticSwitch577_g170950;
				float In_AlphaClip3_g170953 = Final_AlphaClip493_g170950;
				float In_AlphaFade3_g170953 = Out_AlphaFade4_g170952;
				float3 In_Translucency3_g170953 = Out_Translucency4_g170952;
				float In_Transmission3_g170953 = Out_Transmission4_g170952;
				float In_Thickness3_g170953 = Out_Thickness4_g170952;
				float In_Diffusion3_g170953 = Out_Diffusion4_g170952;
				{
				Data3_g170953.Dummy = In_Dummy3_g170953;
				Data3_g170953.Albedo = In_Albedo3_g170953;
				Data3_g170953.AlbedoRaw = In_AlbedoRaw3_g170953;
				Data3_g170953.NormalTS = In_NormalTS3_g170953;
				Data3_g170953.NormalWS = In_NormalWS3_g170953;
				Data3_g170953.Shader = In_Shader3_g170953;
				Data3_g170953.Emissive= In_Emissive3_g170953;
				Data3_g170953.MultiMask = In_MultiMask3_g170953;
				Data3_g170953.Grayscale = In_Grayscale3_g170953;
				Data3_g170953.Luminosity = In_Luminosity3_g170953;
				Data3_g170953.AlphaClip = In_AlphaClip3_g170953;
				Data3_g170953.AlphaFade = In_AlphaFade3_g170953;
				Data3_g170953.Translucency = In_Translucency3_g170953;
				Data3_g170953.Transmission = In_Transmission3_g170953;
				Data3_g170953.Thickness = In_Thickness3_g170953;
				Data3_g170953.Diffusion = In_Diffusion3_g170953;
				}
				TVEVisualData Data4_g170975 = Data3_g170953;
				float Out_Dummy4_g170975 = 0;
				float3 Out_Albedo4_g170975 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170975 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170975 = float2( 0,0 );
				float3 Out_NormalWS4_g170975 = float3( 0,0,0 );
				float4 Out_Shader4_g170975 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170975 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170975 = 0;
				float Out_Grayscale4_g170975 = 0;
				float Out_Luminosity4_g170975 = 0;
				float Out_AlphaClip4_g170975 = 0;
				float Out_AlphaFade4_g170975 = 0;
				float3 Out_Translucency4_g170975 = float3( 0,0,0 );
				float Out_Transmission4_g170975 = 0;
				float Out_Thickness4_g170975 = 0;
				float Out_Diffusion4_g170975 = 0;
				{
				Out_Dummy4_g170975 = Data4_g170975.Dummy;
				Out_Albedo4_g170975 = Data4_g170975.Albedo;
				Out_AlbedoRaw4_g170975 = Data4_g170975.AlbedoRaw;
				Out_NormalTS4_g170975 = Data4_g170975.NormalTS;
				Out_NormalWS4_g170975 = Data4_g170975.NormalWS;
				Out_Shader4_g170975 = Data4_g170975.Shader;
				Out_Emissive4_g170975= Data4_g170975.Emissive;
				Out_MultiMask4_g170975 = Data4_g170975.MultiMask;
				Out_Grayscale4_g170975 = Data4_g170975.Grayscale;
				Out_Luminosity4_g170975= Data4_g170975.Luminosity;
				Out_AlphaClip4_g170975 = Data4_g170975.AlphaClip;
				Out_AlphaFade4_g170975 = Data4_g170975.AlphaFade;
				Out_Translucency4_g170975 = Data4_g170975.Translucency;
				Out_Transmission4_g170975 = Data4_g170975.Transmission;
				Out_Thickness4_g170975 = Data4_g170975.Thickness;
				Out_Diffusion4_g170975 = Data4_g170975.Diffusion;
				}
				float3 temp_output_297_0_g170971 = Out_Albedo4_g170975;
				float3 In_Albedo3_g170976 = temp_output_297_0_g170971;
				float3 temp_output_297_23_g170971 = Out_AlbedoRaw4_g170975;
				float3 In_AlbedoRaw3_g170976 = temp_output_297_23_g170971;
				float2 In_NormalTS3_g170976 = Out_NormalTS4_g170975;
				float3 In_NormalWS3_g170976 = Out_NormalWS4_g170975;
				float4 In_Shader3_g170976 = Out_Shader4_g170975;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170971 = Out_Emissive4_g170975;
				TVEModelData Data15_g170977 = Data16_g170483;
				float Out_Dummy15_g170977 = 0;
				float3 Out_PositionWS15_g170977 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170977 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170977 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170977 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170977 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170977 = float3( 0,0,0 );
				float4 Out_VertexData15_g170977 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170977 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170977 = Data15_g170977.Dummy;
				Out_PositionWS15_g170977 = Data15_g170977.PositionWS;
				Out_PositionWO15_g170977 = Data15_g170977.PositionWO;
				Out_PivotWS15_g170977 = Data15_g170977.PivotWS;
				Out_PivotWO15_g170977 = Data15_g170977.PivotWO;
				Out_NormalWS15_g170977 = Data15_g170977.NormalWS;
				Out_ViewDirWS15_g170977 = Data15_g170977.ViewDirWS;
				Out_VertexData15_g170977 = Data15_g170977.VertexData;
				Out_BoundsData15_g170977 = Data15_g170977.BoundsData;
				}
				half4 Model_VertexMasks216_g170971 = Out_VertexData15_g170977;
				float4 break251_g170971 = Model_VertexMasks216_g170971;
				float4 break33_g170982 = _emissive_vert_mode;
				float temp_output_30_0_g170982 = ( break251_g170971.x * break33_g170982.x );
				float temp_output_29_0_g170982 = ( break251_g170971.y * break33_g170982.y );
				float temp_output_31_0_g170982 = ( break251_g170971.z * break33_g170982.z );
				float temp_output_28_0_g170982 = ( temp_output_30_0_g170982 + temp_output_29_0_g170982 + temp_output_31_0_g170982 + ( break251_g170971.w * break33_g170982.w ) );
				float clampResult17_g170981 = clamp( temp_output_28_0_g170982 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170985 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170985 = ( clampResult17_g170981 - temp_output_7_0_g170985 );
				float lerpResult303_g170971 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170985 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170984 = lerpResult303_g170971;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170984 = ( temp_output_6_0_g170984 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170984 = temp_output_6_0_g170984;
				#endif
				half Emissive_MeshMask221_g170971 = staticSwitch14_g170984;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170973) = _EmissiveMaskTex;
				SamplerState Sampler276_g170973 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170974 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170974 = ( temp_output_6_0_g170974 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170974 = temp_output_6_0_g170974;
				#endif
				half4 Emissive_Coords167_g170971 = staticSwitch14_g170974;
				float4 temp_output_37_0_g170973 = Emissive_Coords167_g170971;
				half4 Coords276_g170973 = temp_output_37_0_g170973;
				half2 TexCoord276_g170973 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170973 = SampleMain( Texture276_g170973 , Sampler276_g170973 , Coords276_g170973 , TexCoord276_g170973 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170973) = _EmissiveMaskTex;
				SamplerState Sampler275_g170973 = sampler_Linear_Repeat;
				half4 Coords275_g170973 = temp_output_37_0_g170973;
				half2 TexCoord275_g170973 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170973 = SampleExtra( Texture275_g170973 , Sampler275_g170973 , Coords275_g170973 , TexCoord275_g170973 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170971 = localSampleMain276_g170973;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170971 = localSampleExtra275_g170973;
				#else
				float4 staticSwitch176_g170971 = localSampleMain276_g170973;
				#endif
				half4 Emissive_MaskTex201_g170971 = staticSwitch176_g170971;
				float clampResult17_g170983 = clamp( (Emissive_MaskTex201_g170971).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170986 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170986 = ( clampResult17_g170983 - temp_output_7_0_g170986 );
				float lerpResult302_g170971 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170986 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170971 = lerpResult302_g170971;
				float temp_output_279_0_g170971 = ( Emissive_MeshMask221_g170971 * Emissive_Mask103_g170971 );
				float3 appendResult293_g170971 = (float3(temp_output_279_0_g170971 , temp_output_279_0_g170971 , temp_output_279_0_g170971));
				half3 Local_EmissiveColor278_g170971 = appendResult293_g170971;
				float3 temp_output_316_0_g170971 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170972 = Data204_g170496;
				float Out_Dummy15_g170972 = 0;
				float4 Out_CoatParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170972 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170972 = Data15_g170972.Dummy;
				Out_CoatParams15_g170972 = Data15_g170972.CoatParams;
				Out_PaintParams15_g170972 = Data15_g170972.PaintParams;
				Out_GlowParams15_g170972 = Data15_g170972.GlowParams;
				Out_AtmoParams15_g170972= Data15_g170972.AtmoParams;
				Out_FadeParams15_g170972= Data15_g170972.FadeParams;
				Out_FormParams15_g170972 = Data15_g170972.FormParams;
				Out_FlowParams15_g170972 = Data15_g170972.FlowParams;
				}
				half4 Global_GlowParams179_g170971 = Out_GlowParams15_g170972;
				float3 temp_output_6_0_g170979 = (Global_GlowParams179_g170971).xyz;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170979 = ( temp_output_6_0_g170979 + ( _EmissiveElementMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170979 = temp_output_6_0_g170979;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170971 = staticSwitch14_g170979;
				#else
				float3 staticSwitch228_g170971 = temp_output_316_0_g170971;
				#endif
				float3 lerpResult299_g170971 = lerp( float3( 1,1,1 ) , staticSwitch228_g170971 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170971 = lerpResult299_g170971;
				half3 Visual_AlbedoRaw306_g170971 = temp_output_297_23_g170971;
				float3 lerpResult307_g170971 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170971 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170971 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170971 * lerpResult307_g170971 );
				half3 Emissive_Blend260_g170971 = ( ( (Visual_Emissive255_g170971).xyz * Local_EmissiveColor278_g170971 ) * Local_EmissiveValue88_g170971 );
				float3 temp_output_3_0_g170978 = Emissive_Blend260_g170971;
				float temp_output_15_0_g170978 = _emissive_power_value;
				float3 temp_output_23_0_g170978 = ( temp_output_3_0_g170978 * temp_output_15_0_g170978 );
				half Local_EmissiveMask294_g170971 = temp_output_279_0_g170971;
				float4 appendResult295_g170971 = (float4(temp_output_23_0_g170978 , Local_EmissiveMask294_g170971));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170971 = appendResult295_g170971;
				#else
				float4 staticSwitch129_g170971 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170971 = staticSwitch129_g170971;
				float4 In_Emissive3_g170976 = Final_Emissive184_g170971;
				float In_Grayscale3_g170976 = Out_Grayscale4_g170975;
				float In_Luminosity3_g170976 = Out_Luminosity4_g170975;
				float temp_output_297_11_g170971 = Out_MultiMask4_g170975;
				float In_MultiMask3_g170976 = temp_output_297_11_g170971;
				float In_AlphaClip3_g170976 = Out_AlphaClip4_g170975;
				float In_AlphaFade3_g170976 = Out_AlphaFade4_g170975;
				float3 In_Translucency3_g170976 = Out_Translucency4_g170975;
				float In_Transmission3_g170976 = Out_Transmission4_g170975;
				float In_Thickness3_g170976 = Out_Thickness4_g170975;
				float In_Diffusion3_g170976 = Out_Diffusion4_g170975;
				{
				Data3_g170976.Dummy = In_Dummy3_g170976;
				Data3_g170976.Albedo = In_Albedo3_g170976;
				Data3_g170976.AlbedoRaw = In_AlbedoRaw3_g170976;
				Data3_g170976.NormalTS = In_NormalTS3_g170976;
				Data3_g170976.NormalWS = In_NormalWS3_g170976;
				Data3_g170976.Shader = In_Shader3_g170976;
				Data3_g170976.Emissive= In_Emissive3_g170976;
				Data3_g170976.MultiMask = In_MultiMask3_g170976;
				Data3_g170976.Grayscale = In_Grayscale3_g170976;
				Data3_g170976.Luminosity = In_Luminosity3_g170976;
				Data3_g170976.AlphaClip = In_AlphaClip3_g170976;
				Data3_g170976.AlphaFade = In_AlphaFade3_g170976;
				Data3_g170976.Translucency = In_Translucency3_g170976;
				Data3_g170976.Transmission = In_Transmission3_g170976;
				Data3_g170976.Thickness = In_Thickness3_g170976;
				Data3_g170976.Diffusion = In_Diffusion3_g170976;
				}
				TVEVisualData Data4_g171004 = Data3_g170976;
				float Out_Dummy4_g171004 = 0;
				float3 Out_Albedo4_g171004 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g171004 = float3( 0,0,0 );
				float2 Out_NormalTS4_g171004 = float2( 0,0 );
				float3 Out_NormalWS4_g171004 = float3( 0,0,0 );
				float4 Out_Shader4_g171004 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g171004 = float4( 0,0,0,0 );
				float Out_MultiMask4_g171004 = 0;
				float Out_Grayscale4_g171004 = 0;
				float Out_Luminosity4_g171004 = 0;
				float Out_AlphaClip4_g171004 = 0;
				float Out_AlphaFade4_g171004 = 0;
				float3 Out_Translucency4_g171004 = float3( 0,0,0 );
				float Out_Transmission4_g171004 = 0;
				float Out_Thickness4_g171004 = 0;
				float Out_Diffusion4_g171004 = 0;
				{
				Out_Dummy4_g171004 = Data4_g171004.Dummy;
				Out_Albedo4_g171004 = Data4_g171004.Albedo;
				Out_AlbedoRaw4_g171004 = Data4_g171004.AlbedoRaw;
				Out_NormalTS4_g171004 = Data4_g171004.NormalTS;
				Out_NormalWS4_g171004 = Data4_g171004.NormalWS;
				Out_Shader4_g171004 = Data4_g171004.Shader;
				Out_Emissive4_g171004= Data4_g171004.Emissive;
				Out_MultiMask4_g171004 = Data4_g171004.MultiMask;
				Out_Grayscale4_g171004 = Data4_g171004.Grayscale;
				Out_Luminosity4_g171004= Data4_g171004.Luminosity;
				Out_AlphaClip4_g171004 = Data4_g171004.AlphaClip;
				Out_AlphaFade4_g171004 = Data4_g171004.AlphaFade;
				Out_Translucency4_g171004 = Data4_g171004.Translucency;
				Out_Transmission4_g171004 = Data4_g171004.Transmission;
				Out_Thickness4_g171004 = Data4_g171004.Thickness;
				Out_Diffusion4_g171004 = Data4_g171004.Diffusion;
				}
				half3 Visual_Albedo199_g171003 = Out_Albedo4_g171004;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g171003 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g171003 );
				half Visual_Transmission138_g171003 = Out_Transmission4_g171004;
				half Subsurface_Value268_g171003 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g171006 = Data204_g170496;
				float Out_Dummy15_g171006 = 0;
				float4 Out_CoatParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g171006 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g171006 = Data15_g171006.Dummy;
				Out_CoatParams15_g171006 = Data15_g171006.CoatParams;
				Out_PaintParams15_g171006 = Data15_g171006.PaintParams;
				Out_GlowParams15_g171006 = Data15_g171006.GlowParams;
				Out_AtmoParams15_g171006= Data15_g171006.AtmoParams;
				Out_FadeParams15_g171006= Data15_g171006.FadeParams;
				Out_FormParams15_g171006 = Data15_g171006.FormParams;
				Out_FlowParams15_g171006 = Data15_g171006.FlowParams;
				}
				half4 Global_GlowParams373_g171003 = Out_GlowParams15_g171006;
				float temp_output_6_0_g171009 = saturate( (Global_GlowParams373_g171003).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g171009 = ( temp_output_6_0_g171009 + ( _SubsurfaceElementMode * 0.0 ) );
				#else
				float staticSwitch14_g171009 = temp_output_6_0_g171009;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g171003 = staticSwitch14_g171009;
				#else
				float staticSwitch367_g171003 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g171003 = lerp( 1.0 , staticSwitch367_g171003 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g171003 = lerpResult403_g171003;
				float temp_output_301_11_g171003 = Out_MultiMask4_g171004;
				half Visual_MultiMask292_g171003 = temp_output_301_11_g171003;
				float lerpResult293_g171003 = lerp( 1.0 , Visual_MultiMask292_g171003 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g171003 = lerpResult293_g171003;
				half Custom_Mask363_g171003 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g171003 = ( Visual_Transmission138_g171003 * Subsurface_Value268_g171003 * Subsurface_GlobalMask369_g171003 * Subsurface_MultiMask296_g171003 * Custom_Mask363_g171003 );
				#else
				float staticSwitch345_g171003 = 0.0;
				#endif
				half Final_Transmission269_g171003 = staticSwitch345_g171003;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g171003 = ( Subsurface_Color264_g171003 * Final_Transmission269_g171003 * 10.0 );
				#else
				float3 staticSwitch348_g171003 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g171003 = staticSwitch348_g171003;
				TVEModelData Data15_g171007 = Data16_g170483;
				float Out_Dummy15_g171007 = 0;
				float3 Out_PositionWS15_g171007 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171007 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171007 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171007 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171007 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g171007 = float3( 0,0,0 );
				float4 Out_VertexData15_g171007 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171007 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g171007 = Data15_g171007.Dummy;
				Out_PositionWS15_g171007 = Data15_g171007.PositionWS;
				Out_PositionWO15_g171007 = Data15_g171007.PositionWO;
				Out_PivotWS15_g171007 = Data15_g171007.PivotWS;
				Out_PivotWO15_g171007 = Data15_g171007.PivotWO;
				Out_NormalWS15_g171007 = Data15_g171007.NormalWS;
				Out_ViewDirWS15_g171007 = Data15_g171007.ViewDirWS;
				Out_VertexData15_g171007 = Data15_g171007.VertexData;
				Out_BoundsData15_g171007 = Data15_g171007.BoundsData;
				}
				half3 Model_ViewDirWS392_g171003 = Out_ViewDirWS15_g171007;
				float dotResult324_g171003 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g171003 );
				float saferPower323_g171003 = abs( saturate( dotResult324_g171003 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g171003 = 0.0;
				#else
				float staticSwitch330_g171003 = ( pow( saferPower323_g171003 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g171003 = staticSwitch330_g171003;
				float3 temp_output_6_0_g171008 = ( Final_Translucency254_g171003 * Mask_Subsurface_View320_g171003 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g171008 = ( temp_output_6_0_g171008 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g171008 = temp_output_6_0_g171008;
				#endif
				half3 Subsurface_Approximation333_g171003 = staticSwitch14_g171008;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g171003 = ( Visual_Albedo199_g171003 + Subsurface_Approximation333_g171003 );
				#else
				float3 staticSwitch353_g171003 = Visual_Albedo199_g171003;
				#endif
				half3 Final_Albedo312_g171003 = staticSwitch353_g171003;
				float3 In_Albedo3_g171005 = Final_Albedo312_g171003;
				float3 In_AlbedoRaw3_g171005 = Out_AlbedoRaw4_g171004;
				float2 In_NormalTS3_g171005 = Out_NormalTS4_g171004;
				float3 In_NormalWS3_g171005 = Out_NormalWS4_g171004;
				float4 In_Shader3_g171005 = Out_Shader4_g171004;
				float4 In_Emissive3_g171005 = Out_Emissive4_g171004;
				float In_Grayscale3_g171005 = Out_Grayscale4_g171004;
				float In_Luminosity3_g171005 = Out_Luminosity4_g171004;
				float In_MultiMask3_g171005 = temp_output_301_11_g171003;
				float In_AlphaClip3_g171005 = Out_AlphaClip4_g171004;
				float In_AlphaFade3_g171005 = Out_AlphaFade4_g171004;
				float3 In_Translucency3_g171005 = Final_Translucency254_g171003;
				float In_Transmission3_g171005 = Final_Transmission269_g171003;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g171003 = 0.0;
				#else
				float staticSwitch351_g171003 = 1.0;
				#endif
				half Final_Thickness275_g171003 = staticSwitch351_g171003;
				float In_Thickness3_g171005 = Final_Thickness275_g171003;
				float Final_Diffusion340_g171003 = _SubsurfaceDiffusion;
				float In_Diffusion3_g171005 = Final_Diffusion340_g171003;
				{
				Data3_g171005.Dummy = In_Dummy3_g171005;
				Data3_g171005.Albedo = In_Albedo3_g171005;
				Data3_g171005.AlbedoRaw = In_AlbedoRaw3_g171005;
				Data3_g171005.NormalTS = In_NormalTS3_g171005;
				Data3_g171005.NormalWS = In_NormalWS3_g171005;
				Data3_g171005.Shader = In_Shader3_g171005;
				Data3_g171005.Emissive= In_Emissive3_g171005;
				Data3_g171005.MultiMask = In_MultiMask3_g171005;
				Data3_g171005.Grayscale = In_Grayscale3_g171005;
				Data3_g171005.Luminosity = In_Luminosity3_g171005;
				Data3_g171005.AlphaClip = In_AlphaClip3_g171005;
				Data3_g171005.AlphaFade = In_AlphaFade3_g171005;
				Data3_g171005.Translucency = In_Translucency3_g171005;
				Data3_g171005.Transmission = In_Transmission3_g171005;
				Data3_g171005.Thickness = In_Thickness3_g171005;
				Data3_g171005.Diffusion = In_Diffusion3_g171005;
				}
				TVEVisualData Data4_g171021 = Data3_g171005;
				float Out_Dummy4_g171021 = 0;
				float3 Out_Albedo4_g171021 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g171021 = float3( 0,0,0 );
				float2 Out_NormalTS4_g171021 = float2( 0,0 );
				float3 Out_NormalWS4_g171021 = float3( 0,0,0 );
				float4 Out_Shader4_g171021 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g171021 = float4( 0,0,0,0 );
				float Out_MultiMask4_g171021 = 0;
				float Out_Grayscale4_g171021 = 0;
				float Out_Luminosity4_g171021 = 0;
				float Out_AlphaClip4_g171021 = 0;
				float Out_AlphaFade4_g171021 = 0;
				float3 Out_Translucency4_g171021 = float3( 0,0,0 );
				float Out_Transmission4_g171021 = 0;
				float Out_Thickness4_g171021 = 0;
				float Out_Diffusion4_g171021 = 0;
				{
				Out_Dummy4_g171021 = Data4_g171021.Dummy;
				Out_Albedo4_g171021 = Data4_g171021.Albedo;
				Out_AlbedoRaw4_g171021 = Data4_g171021.AlbedoRaw;
				Out_NormalTS4_g171021 = Data4_g171021.NormalTS;
				Out_NormalWS4_g171021 = Data4_g171021.NormalWS;
				Out_Shader4_g171021 = Data4_g171021.Shader;
				Out_Emissive4_g171021= Data4_g171021.Emissive;
				Out_MultiMask4_g171021 = Data4_g171021.MultiMask;
				Out_Grayscale4_g171021 = Data4_g171021.Grayscale;
				Out_Luminosity4_g171021= Data4_g171021.Luminosity;
				Out_AlphaClip4_g171021 = Data4_g171021.AlphaClip;
				Out_AlphaFade4_g171021 = Data4_g171021.AlphaFade;
				Out_Translucency4_g171021 = Data4_g171021.Translucency;
				Out_Transmission4_g171021 = Data4_g171021.Transmission;
				Out_Thickness4_g171021 = Data4_g171021.Thickness;
				Out_Diffusion4_g171021 = Data4_g171021.Diffusion;
				}
				half3 Input_Albedo24_g171020 = Out_Albedo4_g171021;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g171020 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g171020 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g171020 = staticSwitch22_g171020;
				float4 break24_g171015 = Out_Shader4_g171021;
				half Metallic95_g171015 = break24_g171015.x;
				half Input_Metallic25_g171020 = Metallic95_g171015;
				half OneMinusReflectivity31_g171020 = ( (ColorSpaceDielectricSpec23_g171020).w - ( (ColorSpaceDielectricSpec23_g171020).w * Input_Metallic25_g171020 ) );
				
				float3 appendResult23_g171015 = (float3(Out_NormalTS4_g171021 , 1.0));
				float3 temp_output_13_0_g171019 = appendResult23_g171015;
				float3 temp_output_33_0_g171019 = ( temp_output_13_0_g171019 * _render_normal );
				float3 switchResult12_g171019 = (((ase_vface>0)?(temp_output_13_0_g171019):(temp_output_33_0_g171019)));
				
				half Smoothness105_g171015 = break24_g171015.w;
				half Input_Smoothness43_g171023 = Smoothness105_g171015;
				half Input_True57_g171025 = Input_Smoothness43_g171023;
				half True33_g171025 = Input_True57_g171025;
				half RenderSpec102_g171015 = _RenderSpecular;
				half Input_RenderSpec58_g171023 = RenderSpec102_g171015;
				float temp_output_46_0_g171023 = max( ( Input_Smoothness43_g171023 * Input_RenderSpec58_g171023 ) , 0.001 );
				float temp_output_6_0_g171024 = temp_output_46_0_g171023;
				#ifdef TVE_REGISTER
				float staticSwitch14_g171024 = ( temp_output_6_0_g171024 + ( _SpecColor.r * 0.0 ) );
				#else
				float staticSwitch14_g171024 = temp_output_6_0_g171024;
				#endif
				float temp_output_61_0_g171023 = staticSwitch14_g171024;
				half Input_False58_g171025 = temp_output_61_0_g171023;
				half False33_g171025 = Input_False58_g171025;
				half localShadowPassCheck33_g171025 = ShadowPassCheck33_g171025( True33_g171025 , False33_g171025 );
				
				half Input_True57_g171026 = 0.04;
				half True33_g171026 = Input_True57_g171026;
				half Input_False58_g171026 = temp_output_46_0_g171023;
				half False33_g171026 = Input_False58_g171026;
				half localShadowPassCheck33_g171026 = ShadowPassCheck33_g171026( True33_g171026 , False33_g171026 );
				
				float localCustomAlphaClip20_g171028 = ( 0.0 );
				float temp_output_3_0_g171028 = Out_AlphaClip4_g171021;
				float Alpha20_g171028 = temp_output_3_0_g171028;
				float temp_output_15_0_g171028 = 0.0;
				float Treshold20_g171028 = temp_output_15_0_g171028;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				clip(Alpha20_g171028 - Treshold20_g171028);
				#endif
				}
				
				o.Albedo = ( Input_Albedo24_g171020 * OneMinusReflectivity31_g171020 );
				o.Normal = switchResult12_g171019;
				o.Emission = (Out_Emissive4_g171021).xyz;

				#if defined(ASE_LIGHTING_SIMPLE)
					o.Specular = localShadowPassCheck33_g171025;
					o.Gloss = localShadowPassCheck33_g171026;
				#else
					#if defined(_SPECULAR_SETUP)
						o.Specular = fixed3( 0, 0, 0 );
					#else
						o.Metallic = 0;
					#endif
					o.Occlusion = 1;
					o.Smoothness = 0;
				#endif

				o.Alpha = saturate( ( Alpha20_g171028 * Out_AlphaFade4_g171021 ) );
				float AlphaClipThreshold = 0.5;
				float3 Transmission = 1;
				float3 Translucency = 1;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				#ifndef USING_DIRECTIONAL_LIGHT
					fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
				#else
					fixed3 lightDir = _WorldSpaceLightPos0.xyz;
				#endif

				fixed4 c = 0;
				float3 worldN;
				worldN.x = dot(IN.tSpace0.xyz, o.Normal);
				worldN.y = dot(IN.tSpace1.xyz, o.Normal);
				worldN.z = dot(IN.tSpace2.xyz, o.Normal);
				worldN = normalize(worldN);
				o.Normal = worldN;

				UnityGI gi;
				UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
				gi.indirect.diffuse = 0;
				gi.indirect.specular = 0;
				gi.light.color = _LightColor0.rgb;
				gi.light.dir = lightDir;
				gi.light.color *= atten;

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						c += LightingBlinnPhong (o, worldViewDir, gi);
					#else
						c += LightingLambert( o, gi );
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						c += LightingStandardSpecular (o, worldViewDir, gi);
					#else
						c += LightingStandard( o, worldViewDir, gi );
					#endif
				#endif

				#ifdef ASE_TRANSMISSION
				{
					float shadow = _TransmissionShadow;
					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 transmission = max(0 , -dot(o.Normal, gi.light.dir)) * lightAtten * Transmission;
					c.rgb += o.Albedo * transmission;
				}
				#endif

				#ifdef ASE_TRANSLUCENCY
				{
					float shadow = _TransShadow;
					float normal = _TransNormal;
					float scattering = _TransScattering;
					float direct = _TransDirect;
					float ambient = _TransAmbient;
					float strength = _TransStrength;

					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 lightDir = gi.light.dir + o.Normal * normal;
					half transVdotL = pow( saturate( dot( worldViewDir, -lightDir ) ), scattering );
					half3 translucency = lightAtten * (transVdotL * direct + gi.indirect.diffuse * ambient) * Translucency;
					c.rgb += o.Albedo * translucency * strength;
				}
				#endif

				//#ifdef ASE_REFRACTION
				//	float4 projScreenPos = ScreenPos / ScreenPos.w;
				//	float3 refractionOffset = ( RefractionIndex - 1.0 ) * mul( UNITY_MATRIX_V, WorldNormal ).xyz * ( 1.0 - dot( WorldNormal, WorldViewDirection ) );
				//	projScreenPos.xy += refractionOffset.xy;
				//	float3 refraction = UNITY_SAMPLE_SCREENSPACE_TEXTURE( _GrabTexture, projScreenPos ) * RefractionColor;
				//	color.rgb = lerp( refraction, color.rgb, color.a );
				//	color.a = 1;
				//#endif

				#ifdef ASE_FOG
					UNITY_APPLY_FOG(IN.fogCoord, c);
				#endif
				return c;
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "Meta"
			Tags { "LightMode"="Meta" }
			Cull Off

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define _SPECULAR_SETUP 1
			#define ASE_LIGHTING_SIMPLE 1
			#define _ENVIRONMENTREFLECTIONS_OFF 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_VERSION 19800
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
			#pragma shader_feature EDITOR_VISUALIZATION
			#ifndef UNITY_PASS_META
				#define UNITY_PASS_META
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "UnityMetaPass.cginc"

			#include "UnityStandardBRDF.cginc"
			#include "AutoLight.cginc"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_SHADOWS 1
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 FlowParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex3D(tex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};
			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#ifdef EDITOR_VISUALIZATION
					float2 vizUV : TEXCOORD1;
					float4 lightCoord : TEXCOORD2;
				#endif
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_color : COLOR;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				UNITY_SHADOW_COORDS(11)
				float4 ase_texcoord12 : TEXCOORD12;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceSpace;
			uniform half _SubsurfaceScatteringValue;
			uniform half _render_cull;
			uniform half _render_src;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsGeneralShader;
			uniform half _IsSimpleShader;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			uniform half _RenderBakeGI;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderPriority;
			uniform half _RenderQueue;
			uniform half _RenderMotion;
			uniform half _RenderClip;
			uniform half _RenderShadow;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderFilter;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NoiseTexSS);
			SamplerState sampler_NoiseTexSS;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _NormalSpace;
			uniform half _MotionCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionElementMode;
			uniform half _MotionPushInfo;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform half _ObjectBoundsInfo;
			uniform float3 TVE_WorldOrigin;
			uniform half4 TVE_TimeParams;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half4 TVE_SizeFadeParams;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeScaleValue;
			uniform half4 TVE_FormParams;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half _GlobalPivotInfo;
			uniform half _GlobalCoatLayerValue;
			uniform float TVE_CoatLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			uniform half _GlobalCoatPivotValue;
			SamplerState sampler_Linear_Clamp;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatNearTex);
			uniform half4 TVE_RenderNearCoords;
			SamplerState sampler_Linear_Repeat;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_CoatParams;
			uniform half _GlobalPaintLayerValue;
			uniform float TVE_PaintLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintBaseTex);
			uniform half _GlobalPaintPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintNearTex);
			uniform half4 TVE_PaintParams;
			uniform half _GlobalGlowLayerValue;
			uniform float TVE_GlowLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowBaseTex);
			uniform half _GlobalGlowPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowNearTex);
			uniform half4 TVE_GlowParams;
			uniform half _GlobalAtmoLayerValue;
			uniform float TVE_AtmoLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoBaseTex);
			uniform half _GlobalAtmoPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoNearTex);
			uniform half4 TVE_AtmoParams;
			uniform half _GlobalFadeLayerValue;
			uniform float TVE_FadeLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeBaseTex);
			uniform half _GlobalFadePivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeNearTex);
			uniform half4 TVE_FadeParams;
			uniform half _GlobalFormLayerValue;
			uniform float TVE_FormLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormBaseTex);
			uniform half _GlobalFormPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormNearTex);
			uniform half _GlobalFlowLayerValue;
			uniform float TVE_FlowLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FlowBaseTex);
			uniform half _GlobalFlowPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FlowNearTex);
			uniform half4 TVE_FlowParams;
			uniform half _SizeFadeElementMode;
			uniform half _SizeFadeGlobalValue;
			uniform half TVE_IsEnabled;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half _motion_small_mask_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			uniform half4 TVE_MotionParams;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionSmallTillingValue;
			uniform half _MotionSmallSpeedValue;
			uniform half _MotionSmallNoiseValue;
			uniform half4 TVE_MotionParamsEditor;
			uniform half _MotionIntensityValue;
			uniform half _MotionSmallDelayValue;
			uniform half _MotionSmallPushValue;
			uniform half _MotionTinyIntensityValue;
			uniform half _MotionDistValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half _motion_tiny_mask_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionTinyNoiseValue;
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionBaseTillingValue;
			uniform half _MotionBaseSpeedValue;
			uniform half _MotionBasePushValue;
			uniform half _motion_small_mode;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half _motion_base_mask_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionBaseNoiseValue;
			uniform half _MotionBaseDelayValue;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half4 _normal_vert_mode;
			uniform half4 _NormalMeshRemap;
			uniform half _NormalMeshValue;
			uniform half _NormalMeshMode;
			uniform half _DisableSRPBatcher;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveFlagMode;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutBakeMode;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessBakeMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayBakeMode;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessBakeMode;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			uniform half _MainMultiMaskInfo;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			SamplerState sampler_Point_Repeat;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondLumaRemap;
			uniform half _SecondLumaValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half _SecondElementMode;
			uniform half _SecondGlobalValue;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _ThirdLumaRemap;
			uniform half _ThirdLumaValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdGlobalValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThirdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThirdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half _GradientMultiValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationNoisePivotValue;
			uniform half _VariationNoiseTillingValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationIntensityValue;
			uniform half _VariationMultiValue;
			uniform half _TintingElementMode;
			uniform half _TintingGlobalValue;
			uniform half _TintingGrayValue;
			uniform float4 _TintingColor;
			uniform half _TintingIntensityValue;
			uniform half _TintingMultiValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingLumaValue;
			uniform half4 _tinting_vert_mode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _TintingMeshMode;
			uniform half4 _TintingBlendRemap;
			uniform half4 TVE_AtmoData;
			uniform half _DrynessElementMode;
			uniform half _DrynessGlobalValue;
			uniform half _DrynessGrayValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessIntensityValue;
			uniform half _DrynessMultiValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessLumaValue;
			uniform half4 _dryness_vert_mode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessBlendRemap;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half3 _motion_highlight_color;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayGlitterIntensityValue;
			uniform half4 _OverlayGlitterColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTexRT);
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterAttenValue;
			uniform half _OverlayGlitterDistValue;
			uniform half _OverlayIntensityValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			uniform half _OverlayElementMode;
			uniform half _OverlayGlobalValue;
			uniform half4 _OverlayBlendRemap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _WetnessWaterColor;
			uniform half _WetnessWaterIntensityValue;
			uniform half _WetnessIntensityValue;
			uniform half _WetnessElementMode;
			uniform half _WetnessGlobalValue;
			uniform half4 _wetness_vert_mode;
			uniform half4 _WetnessMeshRemap;
			uniform half _WetnessMeshValue;
			uniform half _WetnessMeshMode;
			uniform half4 _wetness_water_vert_mode;
			uniform half4 _WetnessWaterMeshRemap;
			uniform half _WetnessWaterMeshValue;
			uniform half _WetnessWaterMeshMode;
			uniform half _WetnessWaterBaseValue;
			uniform half4 _WetnessWaterBlendRemap;
			uniform half _WetnessContrastValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTexRT);
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsDistValue;
			uniform half4 _wetness_drops_vert_mode;
			uniform half4 _WetnessDropsMeshRemap;
			uniform half _WetnessDropsMeshValue;
			uniform half _WetnessDropsMeshMode;
			uniform half _WetnessSmoothnessValue;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutElementMode;
			uniform half _CutoutGlobalValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutNoiseValue;
			uniform half4 _cutout_vert_mode;
			uniform half4 _CutoutMeshRemap;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half _CutoutMultiValue;
			uniform half _DitherConstantValue;
			uniform half4 TVE_DitherParams;
			uniform half _DitherProximityMaxValue;
			uniform half _DitherProximityMinValue;
			uniform half _DitherProximityValue;
			uniform half _DitherDistanceMinValue;
			uniform half _DitherDistanceMaxValue;
			uniform half _DitherDistanceValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _DitherMultiValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveGlobalValue;
			uniform half _EmissiveColorMode;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceElementMode;
			uniform half _SubsurfaceGlobalValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 TVE_MainLightDirection;
			uniform half _SubsurfaceAproxInfo;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g171013 = (TVEModelData)0;
				float In_Dummy16_g171013 = 0.0;
				TVEModelData Data16_g170989 = (TVEModelData)0;
				half Dummy1575_g170987 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170989 = Dummy1575_g170987;
				TVEModelData Data16_g170965 = (TVEModelData)0;
				float In_Dummy16_g170965 = 0.0;
				TVEModelData Data16_g170731 = (TVEModelData)0;
				half Dummy181_g170714 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170731 = Dummy181_g170714;
				TVEModelData Data16_g170673 = (TVEModelData)0;
				half Dummy181_g170671 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170673 = Dummy181_g170671;
				TVEModelData Data16_g170585 = (TVEModelData)0;
				half Dummy181_g170582 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170585 = Dummy181_g170582;
				TVEModelData Data16_g170580 = (TVEModelData)0;
				float In_Dummy16_g170580 = 0.0;
				TVEModelData Data16_g170482 = (TVEModelData)0;
				half Dummy207_g170478 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170482 = Dummy207_g170478;
				half3 PositionOS131_g170478 = v.vertex.xyz;
				float3 In_PositionOS16_g170482 = PositionOS131_g170478;
				float3 ase_positionWS = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g170478 = ase_positionWS;
				half3 PositionWS122_g170478 = vertexToFrag73_g170478;
				float3 In_PositionWS16_g170482 = PositionWS122_g170478;
				float4x4 break19_g170488 = unity_ObjectToWorld;
				float3 appendResult20_g170488 = (float3(break19_g170488[ 0 ][ 3 ] , break19_g170488[ 1 ][ 3 ] , break19_g170488[ 2 ][ 3 ]));
				float3 temp_output_340_7_g170478 = appendResult20_g170488;
				float4x4 break19_g170490 = unity_ObjectToWorld;
				float3 appendResult20_g170490 = (float3(break19_g170490[ 0 ][ 3 ] , break19_g170490[ 1 ][ 3 ] , break19_g170490[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170486 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g170478 = PositionOS131_g170478;
				float3 appendResult234_g170478 = (float3(break233_g170478.x , 0.0 , break233_g170478.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170478 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170478 = appendResult60_g170486;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170478 = appendResult234_g170478;
				#else
				float3 staticSwitch229_g170478 = _Vector0;
				#endif
				half3 PivotOS149_g170478 = staticSwitch229_g170478;
				float3 temp_output_122_0_g170490 = PivotOS149_g170478;
				float3 PivotsOnlyWS105_g170490 = mul( unity_ObjectToWorld, float4( temp_output_122_0_g170490 , 0.0 ) ).xyz;
				float3 temp_output_341_7_g170478 = ( appendResult20_g170490 + PivotsOnlyWS105_g170490 );
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170478 = temp_output_340_7_g170478;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170478 = temp_output_341_7_g170478;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170478 = temp_output_341_7_g170478;
				#else
				float3 staticSwitch236_g170478 = temp_output_340_7_g170478;
				#endif
				float3 vertexToFrag76_g170478 = staticSwitch236_g170478;
				half3 PivotWS121_g170478 = vertexToFrag76_g170478;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
				#else
				float3 staticSwitch204_g170478 = PositionWS122_g170478;
				#endif
				half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170482 = PositionWO132_g170478;
				float3 In_PositionRawOS16_g170482 = PositionOS131_g170478;
				float3 In_PositionAddOS16_g170482 = float3( 0,0,0 );
				float3 In_PivotOS16_g170482 = PivotOS149_g170478;
				float3 In_PivotWS16_g170482 = PivotWS121_g170478;
				half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170482 = PivotWO133_g170478;
				half3 NormalOS134_g170478 = v.normal;
				float3 In_NormalOS16_g170482 = NormalOS134_g170478;
				float3 ase_normalWS = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170478 = normalizedWorldNormal;
				float3 In_NormalWS16_g170482 = Normal_WS95_g170478;
				float3 In_NormalRawOS16_g170482 = NormalOS134_g170478;
				float3 objToWorldDir298_g170478 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g170478 = objToWorldDir298_g170478;
				float3 In_NormalRawWS16_g170482 = Normal_RawWS136_g170478;
				half4 TangentlOS153_g170478 = v.tangent;
				float4 In_TangentOS16_g170482 = TangentlOS153_g170478;
				float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
				half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
				float3 In_ViewDirWS16_g170482 = ViewDirWS169_g170478;
				half4 VertexMasks171_g170478 = v.ase_color;
				float4 In_VertexData16_g170482 = VertexMasks171_g170478;
				float mulTime113_g170485 = _Time.y * 0.52;
				float lerpResult128_g170485 = lerp( mulTime113_g170485 , ( ( mulTime113_g170485 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170478 = PivotWO133_g170478;
				half Pivot_Position322_g170478 = ( break319_g170478.x + break319_g170478.z );
				float mulTime113_g170484 = _Time.y * 0.27;
				float lerpResult128_g170484 = lerp( mulTime113_g170484 , ( ( mulTime113_g170484 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170487 = _object_phase_mode;
				float temp_output_30_0_g170487 = ( v.ase_color.r * break33_g170487.x );
				float temp_output_29_0_g170487 = ( v.ase_color.g * break33_g170487.y );
				float temp_output_31_0_g170487 = ( v.ase_color.b * break33_g170487.z );
				float temp_output_28_0_g170487 = ( temp_output_30_0_g170487 + temp_output_29_0_g170487 + temp_output_31_0_g170487 + ( v.ase_color.a * break33_g170487.w ) );
				float temp_output_315_0_g170478 = (frac( ( temp_output_28_0_g170487 + Pivot_Position322_g170478 ) )*2.0 + -1.0);
				float4 appendResult177_g170478 = (float4(sin( ( lerpResult128_g170485 + Pivot_Position322_g170478 ) ) , sin( ( lerpResult128_g170484 + Pivot_Position322_g170478 ) ) , temp_output_315_0_g170478 , 1.0));
				half4 MotionMasks176_g170478 = appendResult177_g170478;
				float4 In_PhaseData16_g170482 = MotionMasks176_g170478;
				half Object_HeightValue267_g170478 = _ObjectHeightValue;
				half Object_RadiusValue268_g170478 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170478 = saturate( ( (PositionOS131_g170478).y / Object_HeightValue267_g170478 ) );
				half Bounds_SphereMask282_g170478 = saturate( ( length( PositionOS131_g170478 ) / max( Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 ) ) );
				float4 appendResult253_g170478 = (float4(Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 , Bounds_HeightMask274_g170478 , Bounds_SphereMask282_g170478));
				half4 BoundsData254_g170478 = appendResult253_g170478;
				float4 In_BoundsData16_g170482 = BoundsData254_g170478;
				float4 In_RotationData16_g170482 = float4( 0,0,0,0 );
				{
				Data16_g170482.Dummy = In_Dummy16_g170482;
				Data16_g170482.PositionOS = In_PositionOS16_g170482;
				Data16_g170482.PositionWS = In_PositionWS16_g170482;
				Data16_g170482.PositionWO = In_PositionWO16_g170482;
				Data16_g170482.PositionRawOS = In_PositionRawOS16_g170482;
				Data16_g170482.PositionAddOS = In_PositionAddOS16_g170482;
				Data16_g170482.PivotOS = In_PivotOS16_g170482;
				Data16_g170482.PivotWS = In_PivotWS16_g170482;
				Data16_g170482.PivotWO = In_PivotWO16_g170482;
				Data16_g170482.NormalOS = In_NormalOS16_g170482;
				Data16_g170482.NormalWS = In_NormalWS16_g170482;
				Data16_g170482.NormalRawOS = In_NormalRawOS16_g170482;
				Data16_g170482.NormalRawWS = In_NormalRawWS16_g170482;
				Data16_g170482.TangentOS = In_TangentOS16_g170482;
				Data16_g170482.ViewDirWS = In_ViewDirWS16_g170482;
				Data16_g170482.VertexData = In_VertexData16_g170482;
				Data16_g170482.PhaseData = In_PhaseData16_g170482;
				Data16_g170482.BoundsData = In_BoundsData16_g170482;
				Data16_g170482.RotationData = In_RotationData16_g170482;
				}
				TVEModelData Data15_g170581 = Data16_g170482;
				float Out_Dummy15_g170581 = 0;
				float3 Out_PositionOS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170581 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170581 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
				float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170581 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170581 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170581 = Data15_g170581.Dummy;
				Out_PositionOS15_g170581 = Data15_g170581.PositionOS;
				Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
				Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
				Out_PositionRawOS15_g170581 = Data15_g170581.PositionRawOS;
				Out_PositionAddOS15_g170581 = Data15_g170581.PositionAddOS;
				Out_PivotOS15_g170581 = Data15_g170581.PivotOS;
				Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
				Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
				Out_NormalOS15_g170581 = Data15_g170581.NormalOS;
				Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
				Out_NormalRawOS15_g170581 = Data15_g170581.NormalRawOS;
				Out_NormalRawWS15_g170581 = Data15_g170581.NormalRawWS;
				Out_TangentOS15_g170581 = Data15_g170581.TangentOS;
				Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
				Out_VertexData15_g170581 = Data15_g170581.VertexData;
				Out_PhaseData15_g170581 = Data15_g170581.PhaseData;
				Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
				Out_RotationData15_g170581 = Data15_g170581.RotationData;
				}
				float3 temp_output_218_24_g170579 = Out_PivotOS15_g170581;
				float3 In_PositionOS16_g170580 = ( Out_PositionOS15_g170581 - temp_output_218_24_g170579 );
				float3 In_PositionWS16_g170580 = Out_PositionWS15_g170581;
				float3 In_PositionWO16_g170580 = Out_PositionWO15_g170581;
				float3 In_PositionRawOS16_g170580 = Out_PositionRawOS15_g170581;
				float3 In_PositionAddOS16_g170580 = Out_PositionAddOS15_g170581;
				float3 In_PivotOS16_g170580 = temp_output_218_24_g170579;
				float3 In_PivotWS16_g170580 = Out_PivotWS15_g170581;
				float3 In_PivotWO16_g170580 = Out_PivotWO15_g170581;
				float3 In_NormalOS16_g170580 = Out_NormalOS15_g170581;
				float3 In_NormalWS16_g170580 = Out_NormalWS15_g170581;
				float3 In_NormalRawOS16_g170580 = Out_NormalRawOS15_g170581;
				float3 In_NormalRawWS16_g170580 = Out_NormalRawWS15_g170581;
				float4 In_TangentOS16_g170580 = Out_TangentOS15_g170581;
				float3 In_ViewDirWS16_g170580 = Out_ViewDirWS15_g170581;
				float4 In_VertexData16_g170580 = Out_VertexData15_g170581;
				float4 In_PhaseData16_g170580 = Out_PhaseData15_g170581;
				float4 In_BoundsData16_g170580 = Out_BoundsData15_g170581;
				float4 In_RotationData16_g170580 = Out_RotationData15_g170581;
				{
				Data16_g170580.Dummy = In_Dummy16_g170580;
				Data16_g170580.PositionOS = In_PositionOS16_g170580;
				Data16_g170580.PositionWS = In_PositionWS16_g170580;
				Data16_g170580.PositionWO = In_PositionWO16_g170580;
				Data16_g170580.PositionRawOS = In_PositionRawOS16_g170580;
				Data16_g170580.PositionAddOS = In_PositionAddOS16_g170580;
				Data16_g170580.PivotOS = In_PivotOS16_g170580;
				Data16_g170580.PivotWS = In_PivotWS16_g170580;
				Data16_g170580.PivotWO = In_PivotWO16_g170580;
				Data16_g170580.NormalOS = In_NormalOS16_g170580;
				Data16_g170580.NormalWS = In_NormalWS16_g170580;
				Data16_g170580.NormalRawOS = In_NormalRawOS16_g170580;
				Data16_g170580.NormalRawWS = In_NormalRawWS16_g170580;
				Data16_g170580.TangentOS = In_TangentOS16_g170580;
				Data16_g170580.ViewDirWS = In_ViewDirWS16_g170580;
				Data16_g170580.VertexData = In_VertexData16_g170580;
				Data16_g170580.PhaseData = In_PhaseData16_g170580;
				Data16_g170580.BoundsData = In_BoundsData16_g170580;
				Data16_g170580.RotationData = In_RotationData16_g170580;
				}
				TVEModelData Data15_g170583 = Data16_g170580;
				float Out_Dummy15_g170583 = 0;
				float3 Out_PositionOS15_g170583 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170583 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170583 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170583 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170583 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170583 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170583 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170583 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170583 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170583 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170583 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170583 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170583 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170583 = float3( 0,0,0 );
				float4 Out_VertexData15_g170583 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170583 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170583 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170583 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170583 = Data15_g170583.Dummy;
				Out_PositionOS15_g170583 = Data15_g170583.PositionOS;
				Out_PositionWS15_g170583 = Data15_g170583.PositionWS;
				Out_PositionWO15_g170583 = Data15_g170583.PositionWO;
				Out_PositionRawOS15_g170583 = Data15_g170583.PositionRawOS;
				Out_PositionAddOS15_g170583 = Data15_g170583.PositionAddOS;
				Out_PivotOS15_g170583 = Data15_g170583.PivotOS;
				Out_PivotWS15_g170583 = Data15_g170583.PivotWS;
				Out_PivotWO15_g170583 = Data15_g170583.PivotWO;
				Out_NormalOS15_g170583 = Data15_g170583.NormalOS;
				Out_NormalWS15_g170583 = Data15_g170583.NormalWS;
				Out_NormalRawOS15_g170583 = Data15_g170583.NormalRawOS;
				Out_NormalRawWS15_g170583 = Data15_g170583.NormalRawWS;
				Out_TangentOS15_g170583 = Data15_g170583.TangentOS;
				Out_ViewDirWS15_g170583 = Data15_g170583.ViewDirWS;
				Out_VertexData15_g170583 = Data15_g170583.VertexData;
				Out_PhaseData15_g170583 = Data15_g170583.PhaseData;
				Out_BoundsData15_g170583 = Data15_g170583.BoundsData;
				Out_RotationData15_g170583 = Data15_g170583.RotationData;
				}
				half3 Model_PositionOS147_g170582 = Out_PositionOS15_g170583;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = Unity_SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170584 = unity_CameraToWorld;
				float3 appendResult118_g170584 = (float3(break117_g170584[ 0 ][ 2 ] , break117_g170584[ 1 ][ 2 ] , break117_g170584[ 2 ][ 2 ]));
				float3 lerpResult209_g170582 = lerp( ase_viewDirSafeWS , -appendResult118_g170584 , unity_OrthoParams.w);
				float3 break201_g170582 = cross( lerpResult209_g170582 , half3(0,1,0) );
				float3 appendResult196_g170582 = (float3(-break201_g170582.z , 0.0 , break201_g170582.x));
				float dotResult189_g170582 = dot( ase_viewDirSafeWS , float3(0,1,0) );
				float saferPower192_g170582 = abs( dotResult189_g170582 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170582 = ( Model_PositionOS147_g170582 + ( mul( unity_WorldToObject, float4( appendResult196_g170582 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170582 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170582).y ) ) );
				#else
				float3 staticSwitch211_g170582 = Model_PositionOS147_g170582;
				#endif
				half3 Final_Position178_g170582 = staticSwitch211_g170582;
				float3 In_PositionOS16_g170585 = Final_Position178_g170582;
				float3 In_PositionWS16_g170585 = Out_PositionWS15_g170583;
				float3 In_PositionWO16_g170585 = Out_PositionWO15_g170583;
				float3 In_PositionRawOS16_g170585 = Out_PositionRawOS15_g170583;
				float3 In_PositionAddOS16_g170585 = Out_PositionAddOS15_g170583;
				float3 In_PivotOS16_g170585 = Out_PivotOS15_g170583;
				float3 In_PivotWS16_g170585 = Out_PivotWS15_g170583;
				float3 In_PivotWO16_g170585 = Out_PivotWO15_g170583;
				float3 In_NormalOS16_g170585 = Out_NormalOS15_g170583;
				float3 In_NormalWS16_g170585 = Out_NormalWS15_g170583;
				float3 In_NormalRawOS16_g170585 = Out_NormalRawOS15_g170583;
				float3 In_NormalRawWS16_g170585 = Out_NormalRawWS15_g170583;
				float4 In_TangentOS16_g170585 = Out_TangentOS15_g170583;
				float3 In_ViewDirWS16_g170585 = Out_ViewDirWS15_g170583;
				float4 In_VertexData16_g170585 = Out_VertexData15_g170583;
				float4 In_PhaseData16_g170585 = Out_PhaseData15_g170583;
				float4 In_BoundsData16_g170585 = Out_BoundsData15_g170583;
				float4 In_RotationData16_g170585 = Out_RotationData15_g170583;
				{
				Data16_g170585.Dummy = In_Dummy16_g170585;
				Data16_g170585.PositionOS = In_PositionOS16_g170585;
				Data16_g170585.PositionWS = In_PositionWS16_g170585;
				Data16_g170585.PositionWO = In_PositionWO16_g170585;
				Data16_g170585.PositionRawOS = In_PositionRawOS16_g170585;
				Data16_g170585.PositionAddOS = In_PositionAddOS16_g170585;
				Data16_g170585.PivotOS = In_PivotOS16_g170585;
				Data16_g170585.PivotWS = In_PivotWS16_g170585;
				Data16_g170585.PivotWO = In_PivotWO16_g170585;
				Data16_g170585.NormalOS = In_NormalOS16_g170585;
				Data16_g170585.NormalWS = In_NormalWS16_g170585;
				Data16_g170585.NormalRawOS = In_NormalRawOS16_g170585;
				Data16_g170585.NormalRawWS = In_NormalRawWS16_g170585;
				Data16_g170585.TangentOS = In_TangentOS16_g170585;
				Data16_g170585.ViewDirWS = In_ViewDirWS16_g170585;
				Data16_g170585.VertexData = In_VertexData16_g170585;
				Data16_g170585.PhaseData = In_PhaseData16_g170585;
				Data16_g170585.BoundsData = In_BoundsData16_g170585;
				Data16_g170585.RotationData = In_RotationData16_g170585;
				}
				TVEModelData Data15_g170672 = Data16_g170585;
				float Out_Dummy15_g170672 = 0;
				float3 Out_PositionOS15_g170672 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170672 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170672 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170672 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170672 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170672 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170672 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170672 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170672 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170672 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170672 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170672 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170672 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170672 = float3( 0,0,0 );
				float4 Out_VertexData15_g170672 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170672 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170672 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170672 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170672 = Data15_g170672.Dummy;
				Out_PositionOS15_g170672 = Data15_g170672.PositionOS;
				Out_PositionWS15_g170672 = Data15_g170672.PositionWS;
				Out_PositionWO15_g170672 = Data15_g170672.PositionWO;
				Out_PositionRawOS15_g170672 = Data15_g170672.PositionRawOS;
				Out_PositionAddOS15_g170672 = Data15_g170672.PositionAddOS;
				Out_PivotOS15_g170672 = Data15_g170672.PivotOS;
				Out_PivotWS15_g170672 = Data15_g170672.PivotWS;
				Out_PivotWO15_g170672 = Data15_g170672.PivotWO;
				Out_NormalOS15_g170672 = Data15_g170672.NormalOS;
				Out_NormalWS15_g170672 = Data15_g170672.NormalWS;
				Out_NormalRawOS15_g170672 = Data15_g170672.NormalRawOS;
				Out_NormalRawWS15_g170672 = Data15_g170672.NormalRawWS;
				Out_TangentOS15_g170672 = Data15_g170672.TangentOS;
				Out_ViewDirWS15_g170672 = Data15_g170672.ViewDirWS;
				Out_VertexData15_g170672 = Data15_g170672.VertexData;
				Out_PhaseData15_g170672 = Data15_g170672.PhaseData;
				Out_BoundsData15_g170672 = Data15_g170672.BoundsData;
				Out_RotationData15_g170672 = Data15_g170672.RotationData;
				}
				half3 Model_PositionOS147_g170671 = Out_PositionOS15_g170672;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170671 = Out_PivotWO15_g170672;
				half3 Model_PivotWO162_g170671 = temp_output_210_19_g170671;
				float lerpResult216_g170671 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170675 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170675 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170671 ) * lerpResult216_g170671 ) - temp_output_7_0_g170675 );
				float localBuildGlobalData204_g170496 = ( 0.0 );
				TVEGlobalData Data204_g170496 = (TVEGlobalData)0;
				half Dummy211_g170496 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170496 = Dummy211_g170496;
				float temp_output_82_0_g170506 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170508 = TVE_CoatLayers[(int)temp_output_82_0_g170506];
				TVEModelData Data16_g170483 = (TVEModelData)0;
				float In_Dummy16_g170483 = 0.0;
				float3 In_PositionWS16_g170483 = PositionWS122_g170478;
				float3 In_PositionWO16_g170483 = PositionWO132_g170478;
				float3 In_PivotWS16_g170483 = PivotWS121_g170478;
				float3 In_PivotWO16_g170483 = PivotWO133_g170478;
				float3 In_NormalWS16_g170483 = Normal_WS95_g170478;
				float3 In_ViewDirWS16_g170483 = ViewDirWS169_g170478;
				float4 In_VertexData16_g170483 = VertexMasks171_g170478;
				float4 In_BoundsData16_g170483 = float4( 1,1,1,1 );
				{
				Data16_g170483.Dummy = In_Dummy16_g170483;
				Data16_g170483.PositionWS = In_PositionWS16_g170483;
				Data16_g170483.PositionWO = In_PositionWO16_g170483;
				Data16_g170483.PivotWS = In_PivotWS16_g170483;
				Data16_g170483.PivotWO = In_PivotWO16_g170483;
				Data16_g170483.NormalWS = In_NormalWS16_g170483;
				Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
				Data16_g170483.VertexData = In_VertexData16_g170483;
				Data16_g170483.BoundsData = In_BoundsData16_g170483;
				}
				TVEModelData Data15_g170542 = Data16_g170483;
				float Out_Dummy15_g170542 = 0;
				float3 Out_PositionWS15_g170542 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170542 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170542 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170542 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170542 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170542 = float3( 0,0,0 );
				float4 Out_VertexData15_g170542 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170542 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170542 = Data15_g170542.Dummy;
				Out_PositionWS15_g170542 = Data15_g170542.PositionWS;
				Out_PositionWO15_g170542 = Data15_g170542.PositionWO;
				Out_PivotWS15_g170542 = Data15_g170542.PivotWS;
				Out_PivotWO15_g170542 = Data15_g170542.PivotWO;
				Out_NormalWS15_g170542 = Data15_g170542.NormalWS;
				Out_ViewDirWS15_g170542 = Data15_g170542.ViewDirWS;
				Out_VertexData15_g170542 = Data15_g170542.VertexData;
				Out_BoundsData15_g170542 = Data15_g170542.BoundsData;
				}
				half3 Model_PositionWS143_g170496 = Out_PositionWS15_g170542;
				half3 Model_PivotWS145_g170496 = Out_PivotWS15_g170542;
				float3 lerpResult300_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170509 = lerpResult300_g170496;
				float2 temp_output_75_0_g170509 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170509).xz ) );
				float temp_output_82_0_g170509 = temp_output_82_0_g170506;
				float2 temp_output_119_0_g170509 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170509).xz ) );
				float temp_output_7_0_g170514 = 1.0;
				float temp_output_9_0_g170514 = ( saturate( ( distance( Input_Position180_g170509 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170514 );
				float4 lerpResult131_g170509 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170509,temp_output_82_0_g170509), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170509,temp_output_82_0_g170509), 0.0 ) , saturate( ( temp_output_9_0_g170514 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170514 ) ) ));
				float4 temp_output_17_0_g170508 = lerpResult131_g170509;
				float4 temp_output_3_0_g170508 = TVE_CoatParams;
				float4 ifLocalVar18_g170508 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170508 >= 0.5 )
				ifLocalVar18_g170508 = temp_output_17_0_g170508;
				else
				ifLocalVar18_g170508 = temp_output_3_0_g170508;
				float4 lerpResult22_g170508 = lerp( temp_output_3_0_g170508 , temp_output_17_0_g170508 , temp_output_19_0_g170508);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170508 = lerpResult22_g170508;
				#else
				float4 staticSwitch24_g170508 = ifLocalVar18_g170508;
				#endif
				half4 Coat_Params302_g170496 = staticSwitch24_g170508;
				float4 In_CoatParams204_g170496 = Coat_Params302_g170496;
				float temp_output_82_0_g170497 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170499 = TVE_PaintLayers[(int)temp_output_82_0_g170497];
				float3 lerpResult85_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170500 = lerpResult85_g170496;
				float2 temp_output_75_0_g170500 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170500).xz ) );
				float temp_output_82_0_g170500 = temp_output_82_0_g170497;
				float2 temp_output_119_0_g170500 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170500).xz ) );
				float temp_output_7_0_g170505 = 1.0;
				float temp_output_9_0_g170505 = ( saturate( ( distance( Input_Position180_g170500 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170505 );
				float4 lerpResult131_g170500 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170500,temp_output_82_0_g170500), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170500,temp_output_82_0_g170500), 0.0 ) , saturate( ( temp_output_9_0_g170505 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170505 ) ) ));
				float4 temp_output_17_0_g170499 = lerpResult131_g170500;
				float4 temp_output_3_0_g170499 = TVE_PaintParams;
				float4 ifLocalVar18_g170499 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170499 >= 0.5 )
				ifLocalVar18_g170499 = temp_output_17_0_g170499;
				else
				ifLocalVar18_g170499 = temp_output_3_0_g170499;
				float4 lerpResult22_g170499 = lerp( temp_output_3_0_g170499 , temp_output_17_0_g170499 , temp_output_19_0_g170499);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170499 = lerpResult22_g170499;
				#else
				float4 staticSwitch24_g170499 = ifLocalVar18_g170499;
				#endif
				half4 Paint_Params71_g170496 = staticSwitch24_g170499;
				float4 In_PaintParams204_g170496 = Paint_Params71_g170496;
				float temp_output_82_0_g170543 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170545 = TVE_GlowLayers[(int)temp_output_82_0_g170543];
				float3 lerpResult247_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170546 = lerpResult247_g170496;
				float2 temp_output_75_0_g170546 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170546).xz ) );
				float temp_output_82_0_g170546 = temp_output_82_0_g170543;
				float2 temp_output_119_0_g170546 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170546).xz ) );
				float temp_output_7_0_g170551 = 1.0;
				float temp_output_9_0_g170551 = ( saturate( ( distance( Input_Position180_g170546 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170551 );
				float4 lerpResult131_g170546 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170546,temp_output_82_0_g170546), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170546,temp_output_82_0_g170546), 0.0 ) , saturate( ( temp_output_9_0_g170551 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170551 ) ) ));
				float4 temp_output_17_0_g170545 = lerpResult131_g170546;
				float4 temp_output_3_0_g170545 = TVE_GlowParams;
				float4 ifLocalVar18_g170545 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170545 >= 0.5 )
				ifLocalVar18_g170545 = temp_output_17_0_g170545;
				else
				ifLocalVar18_g170545 = temp_output_3_0_g170545;
				float4 lerpResult22_g170545 = lerp( temp_output_3_0_g170545 , temp_output_17_0_g170545 , temp_output_19_0_g170545);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170545 = lerpResult22_g170545;
				#else
				float4 staticSwitch24_g170545 = ifLocalVar18_g170545;
				#endif
				half4 Glow_Params248_g170496 = staticSwitch24_g170545;
				float4 In_GlowParams204_g170496 = Glow_Params248_g170496;
				float temp_output_132_0_g170524 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170526 = TVE_AtmoLayers[(int)temp_output_132_0_g170524];
				float3 lerpResult104_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170527 = lerpResult104_g170496;
				float2 temp_output_75_0_g170527 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170527).xz ) );
				float temp_output_82_0_g170527 = temp_output_132_0_g170524;
				float2 temp_output_119_0_g170527 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170527).xz ) );
				float temp_output_7_0_g170532 = 1.0;
				float temp_output_9_0_g170532 = ( saturate( ( distance( Input_Position180_g170527 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170532 );
				float4 lerpResult131_g170527 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170527,temp_output_82_0_g170527), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170527,temp_output_82_0_g170527), 0.0 ) , saturate( ( temp_output_9_0_g170532 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170532 ) ) ));
				float4 temp_output_17_0_g170526 = lerpResult131_g170527;
				float4 temp_output_3_0_g170526 = TVE_AtmoParams;
				float4 ifLocalVar18_g170526 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170526 >= 0.5 )
				ifLocalVar18_g170526 = temp_output_17_0_g170526;
				else
				ifLocalVar18_g170526 = temp_output_3_0_g170526;
				float4 lerpResult22_g170526 = lerp( temp_output_3_0_g170526 , temp_output_17_0_g170526 , temp_output_19_0_g170526);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170526 = lerpResult22_g170526;
				#else
				float4 staticSwitch24_g170526 = ifLocalVar18_g170526;
				#endif
				half4 Atmo_Params80_g170496 = staticSwitch24_g170526;
				float4 In_AtmoParams204_g170496 = Atmo_Params80_g170496;
				float temp_output_132_0_g170533 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170535 = TVE_FadeLayers[(int)temp_output_132_0_g170533];
				float3 lerpResult382_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFadePivotValue);
				half3 Input_Position180_g170536 = lerpResult382_g170496;
				float2 temp_output_75_0_g170536 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170536).xz ) );
				float temp_output_82_0_g170536 = temp_output_132_0_g170533;
				float2 temp_output_119_0_g170536 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170536).xz ) );
				float temp_output_7_0_g170541 = 1.0;
				float temp_output_9_0_g170541 = ( saturate( ( distance( Input_Position180_g170536 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170541 );
				float4 lerpResult131_g170536 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170536,temp_output_82_0_g170536), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170536,temp_output_82_0_g170536), 0.0 ) , saturate( ( temp_output_9_0_g170541 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170541 ) ) ));
				float4 temp_output_17_0_g170535 = lerpResult131_g170536;
				float4 temp_output_3_0_g170535 = TVE_FadeParams;
				float4 ifLocalVar18_g170535 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170535 >= 0.5 )
				ifLocalVar18_g170535 = temp_output_17_0_g170535;
				else
				ifLocalVar18_g170535 = temp_output_3_0_g170535;
				float4 lerpResult22_g170535 = lerp( temp_output_3_0_g170535 , temp_output_17_0_g170535 , temp_output_19_0_g170535);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170535 = lerpResult22_g170535;
				#else
				float4 staticSwitch24_g170535 = ifLocalVar18_g170535;
				#endif
				half4 Fade_Params387_g170496 = staticSwitch24_g170535;
				float4 In_FadeParams204_g170496 = Fade_Params387_g170496;
				float temp_output_130_0_g170515 = _GlobalFormLayerValue;
				float temp_output_19_0_g170517 = TVE_FormLayers[(int)temp_output_130_0_g170515];
				float3 lerpResult168_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFormPivotValue);
				half3 Input_Position180_g170518 = lerpResult168_g170496;
				float2 temp_output_75_0_g170518 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170518).xz ) );
				float temp_output_82_0_g170518 = temp_output_130_0_g170515;
				float2 temp_output_119_0_g170518 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170518).xz ) );
				float temp_output_7_0_g170523 = 1.0;
				float temp_output_9_0_g170523 = ( saturate( ( distance( Input_Position180_g170518 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170523 );
				float4 lerpResult131_g170518 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170518,temp_output_82_0_g170518), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170518,temp_output_82_0_g170518), 0.0 ) , saturate( ( temp_output_9_0_g170523 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170523 ) ) ));
				float4 temp_output_17_0_g170517 = lerpResult131_g170518;
				float4 temp_output_3_0_g170517 = TVE_FormParams;
				float4 ifLocalVar18_g170517 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170517 >= 0.5 )
				ifLocalVar18_g170517 = temp_output_17_0_g170517;
				else
				ifLocalVar18_g170517 = temp_output_3_0_g170517;
				float4 lerpResult22_g170517 = lerp( temp_output_3_0_g170517 , temp_output_17_0_g170517 , temp_output_19_0_g170517);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170517 = lerpResult22_g170517;
				#else
				float4 staticSwitch24_g170517 = ifLocalVar18_g170517;
				#endif
				half4 Form_Params112_g170496 = staticSwitch24_g170517;
				float4 In_FormParams204_g170496 = Form_Params112_g170496;
				float temp_output_136_0_g170561 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170563 = TVE_FlowLayers[(int)temp_output_136_0_g170561];
				float3 lerpResult400_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170564 = lerpResult400_g170496;
				float2 temp_output_75_0_g170564 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170564).xz ) );
				float temp_output_82_0_g170564 = temp_output_136_0_g170561;
				float2 temp_output_119_0_g170564 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170564).xz ) );
				float temp_output_7_0_g170569 = 1.0;
				float temp_output_9_0_g170569 = ( saturate( ( distance( Input_Position180_g170564 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170569 );
				float4 lerpResult131_g170564 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170564,temp_output_82_0_g170564), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170564,temp_output_82_0_g170564), 0.0 ) , saturate( ( temp_output_9_0_g170569 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170569 ) ) ));
				float4 temp_output_17_0_g170563 = lerpResult131_g170564;
				float4 temp_output_3_0_g170563 = TVE_FlowParams;
				float4 ifLocalVar18_g170563 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170563 >= 0.5 )
				ifLocalVar18_g170563 = temp_output_17_0_g170563;
				else
				ifLocalVar18_g170563 = temp_output_3_0_g170563;
				float4 lerpResult22_g170563 = lerp( temp_output_3_0_g170563 , temp_output_17_0_g170563 , temp_output_19_0_g170563);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170563 = lerpResult22_g170563;
				#else
				float4 staticSwitch24_g170563 = ifLocalVar18_g170563;
				#endif
				half4 Flow_Params405_g170496 = staticSwitch24_g170563;
				float4 In_FlowParams204_g170496 = Flow_Params405_g170496;
				{
				Data204_g170496.Dummy = In_Dummy204_g170496;
				Data204_g170496.CoatParams = In_CoatParams204_g170496;
				Data204_g170496.PaintParams = In_PaintParams204_g170496;
				Data204_g170496.GlowParams = In_GlowParams204_g170496;
				Data204_g170496.AtmoParams = In_AtmoParams204_g170496;
				Data204_g170496.FadeParams = In_FadeParams204_g170496;
				Data204_g170496.FormParams= In_FormParams204_g170496;
				Data204_g170496.FlowParams = In_FlowParams204_g170496;
				}
				TVEGlobalData Data15_g170674 = Data204_g170496;
				float Out_Dummy15_g170674 = 0;
				float4 Out_CoatParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_CoatParams15_g170674 = Data15_g170674.CoatParams;
				Out_PaintParams15_g170674 = Data15_g170674.PaintParams;
				Out_GlowParams15_g170674 = Data15_g170674.GlowParams;
				Out_AtmoParams15_g170674= Data15_g170674.AtmoParams;
				Out_FadeParams15_g170674= Data15_g170674.FadeParams;
				Out_FormParams15_g170674 = Data15_g170674.FormParams;
				Out_FlowParams15_g170674 = Data15_g170674.FlowParams;
				}
				half4 Input_FormParams188_g170671 = Out_FormParams15_g170674;
				float temp_output_6_0_g170676 = saturate( (Input_FormParams188_g170671).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170676 = ( temp_output_6_0_g170676 + ( _SizeFadeElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170676 = temp_output_6_0_g170676;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170671 = staticSwitch14_g170676;
				#else
				float staticSwitch194_g170671 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170671 = lerp( 1.0 , staticSwitch194_g170671 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170671 = lerpResult213_g170671;
				float temp_output_189_0_g170671 = ( saturate( ( ( temp_output_9_0_g170675 / ( _SizeFadeDistMinValue - temp_output_7_0_g170675 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170671 );
				float3 appendResult200_g170671 = (float3(temp_output_189_0_g170671 , temp_output_189_0_g170671 , temp_output_189_0_g170671));
				float3 appendResult201_g170671 = (float3(1.0 , temp_output_189_0_g170671 , 1.0));
				float3 lerpResult202_g170671 = lerp( appendResult200_g170671 , appendResult201_g170671 , _SizeFadeScaleMode);
				float3 lerpResult184_g170671 = lerp( temp_cast_5 , lerpResult202_g170671 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170671 = ( lerpResult184_g170671 * Model_PositionOS147_g170671 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170671 = temp_output_167_0_g170671;
				#else
				float3 staticSwitch199_g170671 = Model_PositionOS147_g170671;
				#endif
				half3 Final_Position178_g170671 = staticSwitch199_g170671;
				float3 In_PositionOS16_g170673 = Final_Position178_g170671;
				float3 In_PositionWS16_g170673 = Out_PositionWS15_g170672;
				float3 In_PositionWO16_g170673 = Out_PositionWO15_g170672;
				float3 In_PositionRawOS16_g170673 = Out_PositionRawOS15_g170672;
				float3 In_PositionAddOS16_g170673 = Out_PositionAddOS15_g170672;
				float3 temp_output_210_24_g170671 = Out_PivotOS15_g170672;
				float3 In_PivotOS16_g170673 = temp_output_210_24_g170671;
				float3 In_PivotWS16_g170673 = Out_PivotWS15_g170672;
				float3 In_PivotWO16_g170673 = temp_output_210_19_g170671;
				float3 In_NormalOS16_g170673 = Out_NormalOS15_g170672;
				float3 In_NormalWS16_g170673 = Out_NormalWS15_g170672;
				float3 In_NormalRawOS16_g170673 = Out_NormalRawOS15_g170672;
				float3 In_NormalRawWS16_g170673 = Out_NormalRawWS15_g170672;
				float4 In_TangentOS16_g170673 = Out_TangentOS15_g170672;
				float3 In_ViewDirWS16_g170673 = Out_ViewDirWS15_g170672;
				float4 In_VertexData16_g170673 = Out_VertexData15_g170672;
				float4 In_PhaseData16_g170673 = Out_PhaseData15_g170672;
				float4 In_BoundsData16_g170673 = Out_BoundsData15_g170672;
				float4 In_RotationData16_g170673 = Out_RotationData15_g170672;
				{
				Data16_g170673.Dummy = In_Dummy16_g170673;
				Data16_g170673.PositionOS = In_PositionOS16_g170673;
				Data16_g170673.PositionWS = In_PositionWS16_g170673;
				Data16_g170673.PositionWO = In_PositionWO16_g170673;
				Data16_g170673.PositionRawOS = In_PositionRawOS16_g170673;
				Data16_g170673.PositionAddOS = In_PositionAddOS16_g170673;
				Data16_g170673.PivotOS = In_PivotOS16_g170673;
				Data16_g170673.PivotWS = In_PivotWS16_g170673;
				Data16_g170673.PivotWO = In_PivotWO16_g170673;
				Data16_g170673.NormalOS = In_NormalOS16_g170673;
				Data16_g170673.NormalWS = In_NormalWS16_g170673;
				Data16_g170673.NormalRawOS = In_NormalRawOS16_g170673;
				Data16_g170673.NormalRawWS = In_NormalRawWS16_g170673;
				Data16_g170673.TangentOS = In_TangentOS16_g170673;
				Data16_g170673.ViewDirWS = In_ViewDirWS16_g170673;
				Data16_g170673.VertexData = In_VertexData16_g170673;
				Data16_g170673.PhaseData = In_PhaseData16_g170673;
				Data16_g170673.BoundsData = In_BoundsData16_g170673;
				Data16_g170673.RotationData = In_RotationData16_g170673;
				}
				TVEModelData Data15_g170730 = Data16_g170673;
				float Out_Dummy15_g170730 = 0;
				float3 Out_PositionOS15_g170730 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170730 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170730 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170730 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170730 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170730 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170730 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170730 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170730 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170730 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170730 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170730 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170730 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170730 = float3( 0,0,0 );
				float4 Out_VertexData15_g170730 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170730 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170730 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170730 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170730 = Data15_g170730.Dummy;
				Out_PositionOS15_g170730 = Data15_g170730.PositionOS;
				Out_PositionWS15_g170730 = Data15_g170730.PositionWS;
				Out_PositionWO15_g170730 = Data15_g170730.PositionWO;
				Out_PositionRawOS15_g170730 = Data15_g170730.PositionRawOS;
				Out_PositionAddOS15_g170730 = Data15_g170730.PositionAddOS;
				Out_PivotOS15_g170730 = Data15_g170730.PivotOS;
				Out_PivotWS15_g170730 = Data15_g170730.PivotWS;
				Out_PivotWO15_g170730 = Data15_g170730.PivotWO;
				Out_NormalOS15_g170730 = Data15_g170730.NormalOS;
				Out_NormalWS15_g170730 = Data15_g170730.NormalWS;
				Out_NormalRawOS15_g170730 = Data15_g170730.NormalRawOS;
				Out_NormalRawWS15_g170730 = Data15_g170730.NormalRawWS;
				Out_TangentOS15_g170730 = Data15_g170730.TangentOS;
				Out_ViewDirWS15_g170730 = Data15_g170730.ViewDirWS;
				Out_VertexData15_g170730 = Data15_g170730.VertexData;
				Out_PhaseData15_g170730 = Data15_g170730.PhaseData;
				Out_BoundsData15_g170730 = Data15_g170730.BoundsData;
				Out_RotationData15_g170730 = Data15_g170730.RotationData;
				}
				float3 temp_output_2503_0_g170714 = Out_PositionOS15_g170730;
				float3 In_PositionOS16_g170731 = temp_output_2503_0_g170714;
				float3 temp_output_2503_16_g170714 = Out_PositionWS15_g170730;
				float3 In_PositionWS16_g170731 = temp_output_2503_16_g170714;
				float3 temp_output_2503_17_g170714 = Out_PositionWO15_g170730;
				float3 In_PositionWO16_g170731 = temp_output_2503_17_g170714;
				float3 In_PositionRawOS16_g170731 = Out_PositionRawOS15_g170730;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170714 = Out_VertexData15_g170730;
				half4 Model_VertexMasks518_g170714 = temp_output_2503_29_g170714;
				float4 break1689_g170714 = Model_VertexMasks518_g170714;
				float4 break33_g170715 = _motion_small_vert_mode;
				float temp_output_30_0_g170715 = ( break1689_g170714.x * break33_g170715.x );
				float temp_output_29_0_g170715 = ( break1689_g170714.y * break33_g170715.y );
				float temp_output_31_0_g170715 = ( break1689_g170714.z * break33_g170715.z );
				float temp_output_28_0_g170715 = ( temp_output_30_0_g170715 + temp_output_29_0_g170715 + temp_output_31_0_g170715 + ( break1689_g170714.w * break33_g170715.w ) );
				float temp_output_1727_0_g170714 = temp_output_28_0_g170715;
				float4 temp_output_2503_30_g170714 = Out_BoundsData15_g170730;
				half4 Model_BoundsData1322_g170714 = temp_output_2503_30_g170714;
				float4 break33_g170717 = _motion_small_proc_mode;
				float temp_output_30_0_g170717 = ( (Model_BoundsData1322_g170714).z * break33_g170717.x );
				float temp_output_29_0_g170717 = ( (Model_BoundsData1322_g170714).w * break33_g170717.y );
				float temp_output_1734_0_g170714 = ( temp_output_30_0_g170717 + temp_output_29_0_g170717 );
				float lerpResult1906_g170714 = lerp( temp_output_1727_0_g170714 , temp_output_1734_0_g170714 , _motion_small_mask_mode);
				float enc1805_g170714 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170714 = DecodeFloatToVector2( enc1805_g170714 );
				float2 break1804_g170714 = localDecodeFloatToVector21805_g170714;
				half Small_Mask_Legacy1806_g170714 = break1804_g170714.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170714 = Small_Mask_Legacy1806_g170714;
				#else
				float staticSwitch1800_g170714 = lerpResult1906_g170714;
				#endif
				float clampResult17_g170719 = clamp( staticSwitch1800_g170714 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170728 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170728 = ( clampResult17_g170719 - temp_output_7_0_g170728 );
				float temp_output_6_0_g170726 = saturate( ( ( temp_output_9_0_g170728 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170726 = ( temp_output_6_0_g170726 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170726 = temp_output_6_0_g170726;
				#endif
				half Small_Mask640_g170714 = staticSwitch14_g170726;
				float4 lerpResult836_g170750 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_MotionParams.w);
				half2 Global_WindDirWS2542_g170714 = ((lerpResult836_g170750).xy*2.0 + -1.0);
				half2 Input_WindDirWS803_g170745 = Global_WindDirWS2542_g170714;
				half3 Model_PositionWO162_g170714 = temp_output_2503_17_g170714;
				half3 Input_ModelPositionWO761_g170732 = Model_PositionWO162_g170714;
				float3 temp_output_2503_19_g170714 = Out_PivotWO15_g170730;
				half3 Model_PivotWO402_g170714 = temp_output_2503_19_g170714;
				half3 Input_ModelPivotsWO419_g170732 = Model_PivotWO402_g170714;
				half Input_MotionPivots629_g170732 = _MotionSmallPivotValue;
				float3 lerpResult771_g170732 = lerp( Input_ModelPositionWO761_g170732 , Input_ModelPivotsWO419_g170732 , Input_MotionPivots629_g170732);
				float4 temp_output_2503_27_g170714 = Out_PhaseData15_g170730;
				half4 Model_PhaseData489_g170714 = temp_output_2503_27_g170714;
				half4 Input_ModelMotionData763_g170732 = Model_PhaseData489_g170714;
				half Input_MotionPhase764_g170732 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170714 = ( lerpResult771_g170732 + ( (Input_ModelMotionData763_g170732).z * Input_MotionPhase764_g170732 * 5.0 ) );
				half3 Input_PositionWO419_g170745 = Small_Position1421_g170714;
				half Input_MotionTilling321_g170745 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170745 = ( -(Input_PositionWO419_g170745).xz * Input_MotionTilling321_g170745 * 0.005 );
				float2 temp_output_3_0_g170747 = Noise_Coord515_g170745;
				float2 temp_output_21_0_g170747 = Input_WindDirWS803_g170745;
				float lerpResult128_g170746 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170745 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170745 = ( lerpResult128_g170746 * 0.02 * Input_MotionSpeed62_g170745 );
				float temp_output_15_0_g170747 = Noise_Speed516_g170745;
				float temp_output_23_0_g170747 = frac( temp_output_15_0_g170747 );
				float4 lerpResult39_g170747 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170747 + ( temp_output_21_0_g170747 * temp_output_23_0_g170747 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170747 + ( temp_output_21_0_g170747 * frac( ( temp_output_15_0_g170747 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170747 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170745 = lerpResult39_g170747;
				half2 Noise_DirWS858_g170745 = ((temp_output_635_0_g170745).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170745 = _MotionSmallNoiseValue;
				half Global_WInd769_g170750 = (lerpResult836_g170750).z;
				TVEGlobalData Data15_g170738 = Data204_g170496;
				float Out_Dummy15_g170738 = 0;
				float4 Out_CoatParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170738 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170738 = Data15_g170738.Dummy;
				Out_CoatParams15_g170738 = Data15_g170738.CoatParams;
				Out_PaintParams15_g170738 = Data15_g170738.PaintParams;
				Out_GlowParams15_g170738 = Data15_g170738.GlowParams;
				Out_AtmoParams15_g170738= Data15_g170738.AtmoParams;
				Out_FadeParams15_g170738= Data15_g170738.FadeParams;
				Out_FormParams15_g170738 = Data15_g170738.FormParams;
				Out_FlowParams15_g170738 = Data15_g170738.FlowParams;
				}
				half4 Global_FlowParams2668_g170714 = Out_FlowParams15_g170738;
				half4 Input_GlobalFlow826_g170750 = Global_FlowParams2668_g170714;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170750 = saturate( (Input_GlobalFlow826_g170750).w );
				#else
				float staticSwitch612_g170750 = Global_WInd769_g170750;
				#endif
				float lerpResult853_g170750 = lerp( staticSwitch612_g170750 , saturate( (staticSwitch612_g170750*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170750 = _MotionIntensityValue;
				half Global_WindValue1855_g170714 = ( lerpResult853_g170750 * Input_MotionValue629_g170750 );
				half Input_WindValue881_g170745 = Global_WindValue1855_g170714;
				float lerpResult701_g170745 = lerp( 1.0 , Input_MotionNoise552_g170745 , Input_WindValue881_g170745);
				float2 lerpResult646_g170745 = lerp( Input_WindDirWS803_g170745 , Noise_DirWS858_g170745 , lerpResult701_g170745);
				half2 Small_DirWS817_g170745 = lerpResult646_g170745;
				float2 break823_g170745 = Small_DirWS817_g170745;
				half4 Noise_Params685_g170745 = temp_output_635_0_g170745;
				half Wind_Sinus820_g170745 = ( ((Noise_Params685_g170745).b*2.0 + -1.0) * Input_MotionNoise552_g170745 * 0.6 );
				float3 appendResult824_g170745 = (float3(break823_g170745.x , Wind_Sinus820_g170745 , break823_g170745.y));
				half Input_MotionDelay753_g170745 = _MotionSmallDelayValue;
				float lerpResult756_g170745 = lerp( 1.0 , ( Input_WindValue881_g170745 * Input_WindValue881_g170745 ) , Input_MotionDelay753_g170745);
				half Wind_Delay815_g170745 = lerpResult756_g170745;
				float3 appendResult825_g170745 = (float3(Wind_Delay815_g170745 , 1.0 , Wind_Delay815_g170745));
				float3 temp_output_827_0_g170745 = ( ( appendResult824_g170745 * Input_WindValue881_g170745 ) * appendResult825_g170745 );
				float2 break857_g170745 = Noise_DirWS858_g170745;
				float3 appendResult833_g170745 = (float3(break857_g170745.x , Wind_Sinus820_g170745 , break857_g170745.y));
				half Global_PushWave2675_g170714 = (Input_GlobalFlow826_g170750).z;
				half Input_PushWave890_g170745 = Global_PushWave2675_g170714;
				float2 temp_output_791_0_g170750 = ((Input_GlobalFlow826_g170750).xy*2.0 + -1.0);
				float temp_output_849_0_g170750 = saturate( length( temp_output_791_0_g170750 ) );
				half Global_PushAlpha1504_g170714 = temp_output_849_0_g170750;
				half Input_PushAlpha806_g170745 = ( Global_PushAlpha1504_g170714 * _MotionSmallPushValue );
				float3 lerpResult840_g170745 = lerp( temp_output_827_0_g170745 , ( appendResult833_g170745 * Input_PushWave890_g170745 ) , Input_PushAlpha806_g170745);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170745 = lerpResult840_g170745;
				#else
				float3 staticSwitch829_g170745 = temp_output_827_0_g170745;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half3 Small_Squash1489_g170714 = ( mul( unity_WorldToObject, float4( staticSwitch829_g170745 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Motion789_g170714 = ( _MotionSmallIntensityValue * Small_Mask640_g170714 * Small_Squash1489_g170714 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170714 = Small_Motion789_g170714;
				#else
				float3 staticSwitch495_g170714 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170714 = temp_output_2503_16_g170714;
				half Global_DistMask1820_g170714 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170714 ) / _MotionDistValue ) ) );
				float4 break1710_g170714 = Model_VertexMasks518_g170714;
				float4 break33_g170716 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170716 = ( break1710_g170714.x * break33_g170716.x );
				float temp_output_29_0_g170716 = ( break1710_g170714.y * break33_g170716.y );
				float temp_output_31_0_g170716 = ( break1710_g170714.z * break33_g170716.z );
				float temp_output_28_0_g170716 = ( temp_output_30_0_g170716 + temp_output_29_0_g170716 + temp_output_31_0_g170716 + ( break1710_g170714.w * break33_g170716.w ) );
				float temp_output_1729_0_g170714 = temp_output_28_0_g170716;
				float4 break33_g170718 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170718 = ( (Model_BoundsData1322_g170714).z * break33_g170718.x );
				float temp_output_29_0_g170718 = ( (Model_BoundsData1322_g170714).w * break33_g170718.y );
				float temp_output_1735_0_g170714 = ( temp_output_30_0_g170718 + temp_output_29_0_g170718 );
				float lerpResult1908_g170714 = lerp( temp_output_1729_0_g170714 , temp_output_1735_0_g170714 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170714 = break1804_g170714.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170714 = Tiny_Mask_Legacy1807_g170714;
				#else
				float staticSwitch1810_g170714 = lerpResult1908_g170714;
				#endif
				float clampResult17_g170720 = clamp( staticSwitch1810_g170714 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170729 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170729 = ( clampResult17_g170720 - temp_output_7_0_g170729 );
				float temp_output_6_0_g170721 = saturate( ( ( temp_output_9_0_g170729 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170721 = ( temp_output_6_0_g170721 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170721 = temp_output_6_0_g170721;
				#endif
				half Tiny_Mask218_g170714 = staticSwitch14_g170721;
				float3 temp_output_2503_20_g170714 = Out_NormalOS15_g170730;
				half3 Model_NormalOS554_g170714 = temp_output_2503_20_g170714;
				half3 Input_NormalOS533_g170734 = Model_NormalOS554_g170714;
				half3 Tiny_Position2469_g170714 = Model_PositionWO162_g170714;
				half3 Input_PositionWO500_g170734 = Tiny_Position2469_g170714;
				half Input_MotionTilling321_g170734 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170736 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170734 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170734 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170734).xz * Input_MotionTilling321_g170734 * 0.005 ) + ( lerpResult128_g170736 * Input_MotionSpeed62_g170734 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170734 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170734 = lerp( ( Input_NormalOS533_g170734 * Flutter_Noise535_g170734 ) , Flutter_Noise535_g170734 , Input_MotionNoise542_g170734);
				half3 Input_ModelPositionWO761_g170733 = Model_PositionWO162_g170714;
				half3 Input_ModelPivotsWO419_g170733 = Model_PivotWO402_g170714;
				half Input_MotionPivots629_g170733 = _MotionBasePivotValue;
				float3 lerpResult771_g170733 = lerp( Input_ModelPositionWO761_g170733 , Input_ModelPivotsWO419_g170733 , Input_MotionPivots629_g170733);
				half4 Input_ModelMotionData763_g170733 = Model_PhaseData489_g170714;
				half Input_MotionPhase764_g170733 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170714 = ( lerpResult771_g170733 + ( (Input_ModelMotionData763_g170733).z * Input_MotionPhase764_g170733 * 5.0 ) );
				half3 Input_PositionWO419_g170739 = Base_Position1394_g170714;
				half Input_MotionTilling321_g170739 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170739 = ( -(Input_PositionWO419_g170739).xz * Input_MotionTilling321_g170739 * 0.005 );
				float2 temp_output_3_0_g170741 = Noise_Coord515_g170739;
				half2 Input_WindDirWS803_g170739 = Global_WindDirWS2542_g170714;
				float2 temp_output_21_0_g170741 = Input_WindDirWS803_g170739;
				float lerpResult128_g170740 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170739 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170739 = ( lerpResult128_g170740 * 0.02 * Input_MotionSpeed62_g170739 );
				float temp_output_15_0_g170741 = Noise_Speed516_g170739;
				float temp_output_23_0_g170741 = frac( temp_output_15_0_g170741 );
				float4 lerpResult39_g170741 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170741 + ( temp_output_21_0_g170741 * temp_output_23_0_g170741 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170741 + ( temp_output_21_0_g170741 * frac( ( temp_output_15_0_g170741 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170741 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170739 = lerpResult39_g170741;
				half4 Noise_Params685_g170739 = temp_output_635_0_g170739;
				half Input_WindValue853_g170739 = Global_WindValue1855_g170714;
				float temp_output_855_0_g170739 = ( (Noise_Params685_g170739).a * Input_WindValue853_g170739 );
				half Input_PushWave858_g170739 = Global_PushWave2675_g170714;
				half Input_PushAlpha806_g170739 = ( Global_PushAlpha1504_g170714 * _MotionBasePushValue );
				float lerpResult831_g170739 = lerp( temp_output_855_0_g170739 , Input_PushWave858_g170739 , Input_PushAlpha806_g170739);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170739 = lerpResult831_g170739;
				#else
				float staticSwitch828_g170739 = temp_output_855_0_g170739;
				#endif
				half Base_Wave1159_g170714 = staticSwitch828_g170739;
				float temp_output_888_0_g170745 = ( (Noise_Params685_g170745).b * Input_WindValue881_g170745 );
				float lerpResult867_g170745 = lerp( temp_output_888_0_g170745 , ( (Noise_Params685_g170745).b * Input_PushWave890_g170745 ) , Input_PushAlpha806_g170745);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170745 = lerpResult867_g170745;
				#else
				float staticSwitch886_g170745 = temp_output_888_0_g170745;
				#endif
				half Small_Wave1427_g170714 = staticSwitch886_g170745;
				float lerpResult2422_g170714 = lerp( Base_Wave1159_g170714 , Small_Wave1427_g170714 , _motion_small_mode);
				half Global_Wave1475_g170714 = lerpResult2422_g170714;
				half Input_GlobalWave546_g170734 = Global_Wave1475_g170714;
				float temp_output_548_0_g170734 = ( Input_GlobalWave546_g170734 * Input_GlobalWave546_g170734 );
				half Flutter_Wave556_g170734 = temp_output_548_0_g170734;
				half3 Tiny_Noise859_g170714 = ( lerpResult537_g170734 * Flutter_Wave556_g170734 );
				half3 Tiny_Flutter1451_g170714 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170714 * Tiny_Mask218_g170714 * Tiny_Noise859_g170714 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170714 = Tiny_Flutter1451_g170714;
				#else
				float3 staticSwitch414_g170714 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170714 = ( staticSwitch495_g170714 + staticSwitch414_g170714 );
				float3 In_PositionAddOS16_g170731 = Final_PositionADD1569_g170714;
				float3 temp_output_2503_24_g170714 = Out_PivotOS15_g170730;
				float3 In_PivotOS16_g170731 = temp_output_2503_24_g170714;
				float3 In_PivotWS16_g170731 = Out_PivotWS15_g170730;
				float3 In_PivotWO16_g170731 = temp_output_2503_19_g170714;
				float3 In_NormalOS16_g170731 = temp_output_2503_20_g170714;
				float3 In_NormalWS16_g170731 = Out_NormalWS15_g170730;
				float3 In_NormalRawOS16_g170731 = Out_NormalRawOS15_g170730;
				float3 In_NormalRawWS16_g170731 = Out_NormalRawWS15_g170730;
				float4 In_TangentOS16_g170731 = Out_TangentOS15_g170730;
				float3 In_ViewDirWS16_g170731 = Out_ViewDirWS15_g170730;
				float4 In_VertexData16_g170731 = temp_output_2503_29_g170714;
				float4 In_PhaseData16_g170731 = temp_output_2503_27_g170714;
				float4 In_BoundsData16_g170731 = temp_output_2503_30_g170714;
				float4 break748_g170714 = Model_VertexMasks518_g170714;
				float4 break33_g170723 = _motion_base_vert_mode;
				float temp_output_30_0_g170723 = ( break748_g170714.x * break33_g170723.x );
				float temp_output_29_0_g170723 = ( break748_g170714.y * break33_g170723.y );
				float temp_output_31_0_g170723 = ( break748_g170714.z * break33_g170723.z );
				float temp_output_28_0_g170723 = ( temp_output_30_0_g170723 + temp_output_29_0_g170723 + temp_output_31_0_g170723 + ( break748_g170714.w * break33_g170723.w ) );
				float temp_output_1731_0_g170714 = temp_output_28_0_g170723;
				float4 break33_g170724 = _motion_base_proc_mode;
				float temp_output_30_0_g170724 = ( (Model_BoundsData1322_g170714).z * break33_g170724.x );
				float temp_output_29_0_g170724 = ( (Model_BoundsData1322_g170714).w * break33_g170724.y );
				float temp_output_1733_0_g170714 = ( temp_output_30_0_g170724 + temp_output_29_0_g170724 );
				float lerpResult1904_g170714 = lerp( temp_output_1731_0_g170714 , temp_output_1733_0_g170714 , _motion_base_mask_mode);
				float clampResult17_g170722 = clamp( lerpResult1904_g170714 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170727 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170727 = ( clampResult17_g170722 - temp_output_7_0_g170727 );
				float temp_output_6_0_g170725 = saturate( ( ( temp_output_9_0_g170727 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170725 = ( temp_output_6_0_g170725 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170725 = temp_output_6_0_g170725;
				#endif
				half Base_Mask217_g170714 = staticSwitch14_g170725;
				half2 Noise_DirWS825_g170739 = ((temp_output_635_0_g170739).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170739 = _MotionBaseNoiseValue;
				float lerpResult701_g170739 = lerp( 1.0 , Input_MotionNoise552_g170739 , Input_WindValue853_g170739);
				float2 lerpResult646_g170739 = lerp( Input_WindDirWS803_g170739 , Noise_DirWS825_g170739 , lerpResult701_g170739);
				half Input_MotionDelay753_g170739 = _MotionBaseDelayValue;
				float lerpResult756_g170739 = lerp( 1.0 , ( Input_WindValue853_g170739 * Input_WindValue853_g170739 ) , Input_MotionDelay753_g170739);
				half Wind_Delay815_g170739 = lerpResult756_g170739;
				float2 temp_output_809_0_g170739 = ( lerpResult646_g170739 * Input_WindValue853_g170739 * Wind_Delay815_g170739 );
				half2 Global_PushDirWS1972_g170714 = temp_output_791_0_g170750;
				half2 Input_PushDirWS807_g170739 = Global_PushDirWS1972_g170714;
				float2 lerpResult811_g170739 = lerp( temp_output_809_0_g170739 , Input_PushDirWS807_g170739 , Input_PushAlpha806_g170739);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170739 = lerpResult811_g170739;
				#else
				float2 staticSwitch808_g170739 = temp_output_809_0_g170739;
				#endif
				float2 break83_g170744 = staticSwitch808_g170739;
				float3 appendResult79_g170744 = (float3(break83_g170744.x , 0.0 , break83_g170744.y));
				half2 Base_Bending893_g170714 = (( mul( unity_WorldToObject, float4( appendResult79_g170744 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170714 = ( _MotionBaseIntensityValue * Base_Mask217_g170714 * Base_Bending893_g170714 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170714 = Base_Motion1440_g170714;
				#else
				float2 staticSwitch2384_g170714 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170714 = (float4(staticSwitch2384_g170714 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170714 = appendResult2023_g170714;
				float4 In_RotationData16_g170731 = Final_RotationData1570_g170714;
				{
				Data16_g170731.Dummy = In_Dummy16_g170731;
				Data16_g170731.PositionOS = In_PositionOS16_g170731;
				Data16_g170731.PositionWS = In_PositionWS16_g170731;
				Data16_g170731.PositionWO = In_PositionWO16_g170731;
				Data16_g170731.PositionRawOS = In_PositionRawOS16_g170731;
				Data16_g170731.PositionAddOS = In_PositionAddOS16_g170731;
				Data16_g170731.PivotOS = In_PivotOS16_g170731;
				Data16_g170731.PivotWS = In_PivotWS16_g170731;
				Data16_g170731.PivotWO = In_PivotWO16_g170731;
				Data16_g170731.NormalOS = In_NormalOS16_g170731;
				Data16_g170731.NormalWS = In_NormalWS16_g170731;
				Data16_g170731.NormalRawOS = In_NormalRawOS16_g170731;
				Data16_g170731.NormalRawWS = In_NormalRawWS16_g170731;
				Data16_g170731.TangentOS = In_TangentOS16_g170731;
				Data16_g170731.ViewDirWS = In_ViewDirWS16_g170731;
				Data16_g170731.VertexData = In_VertexData16_g170731;
				Data16_g170731.PhaseData = In_PhaseData16_g170731;
				Data16_g170731.BoundsData = In_BoundsData16_g170731;
				Data16_g170731.RotationData = In_RotationData16_g170731;
				}
				TVEModelData Data15_g170964 = Data16_g170731;
				float Out_Dummy15_g170964 = 0;
				float3 Out_PositionOS15_g170964 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170964 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170964 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170964 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170964 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170964 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170964 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170964 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170964 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170964 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170964 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170964 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170964 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170964 = float3( 0,0,0 );
				float4 Out_VertexData15_g170964 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170964 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170964 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170964 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170964 = Data15_g170964.Dummy;
				Out_PositionOS15_g170964 = Data15_g170964.PositionOS;
				Out_PositionWS15_g170964 = Data15_g170964.PositionWS;
				Out_PositionWO15_g170964 = Data15_g170964.PositionWO;
				Out_PositionRawOS15_g170964 = Data15_g170964.PositionRawOS;
				Out_PositionAddOS15_g170964 = Data15_g170964.PositionAddOS;
				Out_PivotOS15_g170964 = Data15_g170964.PivotOS;
				Out_PivotWS15_g170964 = Data15_g170964.PivotWS;
				Out_PivotWO15_g170964 = Data15_g170964.PivotWO;
				Out_NormalOS15_g170964 = Data15_g170964.NormalOS;
				Out_NormalWS15_g170964 = Data15_g170964.NormalWS;
				Out_NormalRawOS15_g170964 = Data15_g170964.NormalRawOS;
				Out_NormalRawWS15_g170964 = Data15_g170964.NormalRawWS;
				Out_TangentOS15_g170964 = Data15_g170964.TangentOS;
				Out_ViewDirWS15_g170964 = Data15_g170964.ViewDirWS;
				Out_VertexData15_g170964 = Data15_g170964.VertexData;
				Out_PhaseData15_g170964 = Data15_g170964.PhaseData;
				Out_BoundsData15_g170964 = Data15_g170964.BoundsData;
				Out_RotationData15_g170964 = Data15_g170964.RotationData;
				}
				half3 Model_PositionOS147_g170963 = Out_PositionOS15_g170964;
				half3 Input_False58_g170966 = Model_PositionOS147_g170963;
				half3 VertexPos40_g170967 = Model_PositionOS147_g170963;
				half3 VertexPos40_g170968 = VertexPos40_g170967;
				float3 appendResult74_g170968 = (float3(VertexPos40_g170968.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170968 = appendResult74_g170968;
				float3 break84_g170968 = VertexPos40_g170968;
				float3 appendResult81_g170968 = (float3(0.0 , break84_g170968.y , break84_g170968.z));
				half3 VertexPosOtherAxis82_g170968 = appendResult81_g170968;
				float4 temp_output_1567_33_g170963 = Out_RotationData15_g170964;
				half4 Model_VertexBend1569_g170963 = temp_output_1567_33_g170963;
				half2 Angle44_g170967 = (Model_VertexBend1569_g170963).xy;
				half Angle44_g170968 = (Angle44_g170967).y;
				half3 VertexPos40_g170969 = ( VertexPosRotationAxis50_g170968 + ( VertexPosOtherAxis82_g170968 * cos( Angle44_g170968 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170968 ) * sin( Angle44_g170968 ) ) );
				float3 appendResult74_g170969 = (float3(0.0 , 0.0 , VertexPos40_g170969.z));
				half3 VertexPosRotationAxis50_g170969 = appendResult74_g170969;
				float3 break84_g170969 = VertexPos40_g170969;
				float3 appendResult81_g170969 = (float3(break84_g170969.x , break84_g170969.y , 0.0));
				half3 VertexPosOtherAxis82_g170969 = appendResult81_g170969;
				half Angle44_g170969 = -(Angle44_g170967).x;
				half3 Input_True57_g170966 = ( VertexPosRotationAxis50_g170969 + ( VertexPosOtherAxis82_g170969 * cos( Angle44_g170969 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170969 ) * sin( Angle44_g170969 ) ) );
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170966 = Input_True57_g170966;
				#else
				float3 staticSwitch65_g170966 = Input_False58_g170966;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170966 = Input_True57_g170966;
				#else
				float3 staticSwitch69_g170966 = staticSwitch65_g170966;
				#endif
				float3 temp_output_1578_0_g170963 = staticSwitch69_g170966;
				float3 temp_output_1567_31_g170963 = Out_PositionAddOS15_g170964;
				half3 Model_PositionADD1568_g170963 = temp_output_1567_31_g170963;
				half3 Final_PositionOS178_g170963 = ( temp_output_1578_0_g170963 + Model_PositionADD1568_g170963 );
				float3 In_PositionOS16_g170965 = Final_PositionOS178_g170963;
				float3 In_PositionWS16_g170965 = Out_PositionWS15_g170964;
				float3 In_PositionWO16_g170965 = Out_PositionWO15_g170964;
				float3 In_PositionRawOS16_g170965 = Out_PositionRawOS15_g170964;
				float3 In_PositionAddOS16_g170965 = temp_output_1567_31_g170963;
				float3 In_PivotOS16_g170965 = Out_PivotOS15_g170964;
				float3 In_PivotWS16_g170965 = Out_PivotWS15_g170964;
				float3 In_PivotWO16_g170965 = Out_PivotWO15_g170964;
				float3 In_NormalOS16_g170965 = Out_NormalOS15_g170964;
				float3 In_NormalWS16_g170965 = Out_NormalWS15_g170964;
				float3 In_NormalRawOS16_g170965 = Out_NormalRawOS15_g170964;
				float3 In_NormalRawWS16_g170965 = Out_NormalRawWS15_g170964;
				float4 In_TangentOS16_g170965 = Out_TangentOS15_g170964;
				float3 In_ViewDirWS16_g170965 = Out_ViewDirWS15_g170964;
				float4 In_VertexData16_g170965 = Out_VertexData15_g170964;
				float4 In_PhaseData16_g170965 = Out_PhaseData15_g170964;
				float4 In_BoundsData16_g170965 = Out_BoundsData15_g170964;
				float4 In_RotationData16_g170965 = temp_output_1567_33_g170963;
				{
				Data16_g170965.Dummy = In_Dummy16_g170965;
				Data16_g170965.PositionOS = In_PositionOS16_g170965;
				Data16_g170965.PositionWS = In_PositionWS16_g170965;
				Data16_g170965.PositionWO = In_PositionWO16_g170965;
				Data16_g170965.PositionRawOS = In_PositionRawOS16_g170965;
				Data16_g170965.PositionAddOS = In_PositionAddOS16_g170965;
				Data16_g170965.PivotOS = In_PivotOS16_g170965;
				Data16_g170965.PivotWS = In_PivotWS16_g170965;
				Data16_g170965.PivotWO = In_PivotWO16_g170965;
				Data16_g170965.NormalOS = In_NormalOS16_g170965;
				Data16_g170965.NormalWS = In_NormalWS16_g170965;
				Data16_g170965.NormalRawOS = In_NormalRawOS16_g170965;
				Data16_g170965.NormalRawWS = In_NormalRawWS16_g170965;
				Data16_g170965.TangentOS = In_TangentOS16_g170965;
				Data16_g170965.ViewDirWS = In_ViewDirWS16_g170965;
				Data16_g170965.VertexData = In_VertexData16_g170965;
				Data16_g170965.PhaseData = In_PhaseData16_g170965;
				Data16_g170965.BoundsData = In_BoundsData16_g170965;
				Data16_g170965.RotationData = In_RotationData16_g170965;
				}
				TVEModelData Data15_g170988 = Data16_g170965;
				float Out_Dummy15_g170988 = 0;
				float3 Out_PositionOS15_g170988 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170988 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170988 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170988 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170988 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170988 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170988 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170988 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170988 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170988 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170988 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170988 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170988 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170988 = float3( 0,0,0 );
				float4 Out_VertexData15_g170988 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170988 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170988 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170988 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170988 = Data15_g170988.Dummy;
				Out_PositionOS15_g170988 = Data15_g170988.PositionOS;
				Out_PositionWS15_g170988 = Data15_g170988.PositionWS;
				Out_PositionWO15_g170988 = Data15_g170988.PositionWO;
				Out_PositionRawOS15_g170988 = Data15_g170988.PositionRawOS;
				Out_PositionAddOS15_g170988 = Data15_g170988.PositionAddOS;
				Out_PivotOS15_g170988 = Data15_g170988.PivotOS;
				Out_PivotWS15_g170988 = Data15_g170988.PivotWS;
				Out_PivotWO15_g170988 = Data15_g170988.PivotWO;
				Out_NormalOS15_g170988 = Data15_g170988.NormalOS;
				Out_NormalWS15_g170988 = Data15_g170988.NormalWS;
				Out_NormalRawOS15_g170988 = Data15_g170988.NormalRawOS;
				Out_NormalRawWS15_g170988 = Data15_g170988.NormalRawWS;
				Out_TangentOS15_g170988 = Data15_g170988.TangentOS;
				Out_ViewDirWS15_g170988 = Data15_g170988.ViewDirWS;
				Out_VertexData15_g170988 = Data15_g170988.VertexData;
				Out_PhaseData15_g170988 = Data15_g170988.PhaseData;
				Out_BoundsData15_g170988 = Data15_g170988.BoundsData;
				Out_RotationData15_g170988 = Data15_g170988.RotationData;
				}
				float3 In_PositionOS16_g170989 = Out_PositionOS15_g170988;
				float3 In_PositionWS16_g170989 = Out_PositionWS15_g170988;
				float3 temp_output_1567_17_g170987 = Out_PositionWO15_g170988;
				float3 In_PositionWO16_g170989 = temp_output_1567_17_g170987;
				float3 temp_output_1567_26_g170987 = Out_PositionRawOS15_g170988;
				float3 In_PositionRawOS16_g170989 = temp_output_1567_26_g170987;
				float3 In_PositionAddOS16_g170989 = Out_PositionAddOS15_g170988;
				float3 In_PivotOS16_g170989 = Out_PivotOS15_g170988;
				float3 In_PivotWS16_g170989 = Out_PivotWS15_g170988;
				float3 In_PivotWO16_g170989 = Out_PivotWO15_g170988;
				half3 Model_NormalOS1568_g170987 = Out_NormalOS15_g170988;
				float3 lerpResult1589_g170987 = lerp( Model_NormalOS1568_g170987 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170987 = temp_output_1567_26_g170987;
				float3 normalizeResult1594_g170987 = ASESafeNormalize( ( Model_PositionRAW1592_g170987 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170987 = lerp( lerpResult1589_g170987 , normalizeResult1594_g170987 , _NormalSphereValue);
				half3 Input_False58_g171002 = lerpResult1585_g170987;
				half3 VertexPos40_g170991 = lerpResult1585_g170987;
				half3 VertexPos40_g170992 = VertexPos40_g170991;
				float3 appendResult74_g170992 = (float3(VertexPos40_g170992.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170992 = appendResult74_g170992;
				float3 break84_g170992 = VertexPos40_g170992;
				float3 appendResult81_g170992 = (float3(0.0 , break84_g170992.y , break84_g170992.z));
				half3 VertexPosOtherAxis82_g170992 = appendResult81_g170992;
				float4 temp_output_1567_33_g170987 = Out_RotationData15_g170988;
				half4 Model_RotationData1583_g170987 = temp_output_1567_33_g170987;
				half2 Angle44_g170991 = Model_RotationData1583_g170987.xy;
				half Angle44_g170992 = (Angle44_g170991).y;
				half3 VertexPos40_g170993 = ( VertexPosRotationAxis50_g170992 + ( VertexPosOtherAxis82_g170992 * cos( Angle44_g170992 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170992 ) * sin( Angle44_g170992 ) ) );
				float3 appendResult74_g170993 = (float3(0.0 , 0.0 , VertexPos40_g170993.z));
				half3 VertexPosRotationAxis50_g170993 = appendResult74_g170993;
				float3 break84_g170993 = VertexPos40_g170993;
				float3 appendResult81_g170993 = (float3(break84_g170993.x , break84_g170993.y , 0.0));
				half3 VertexPosOtherAxis82_g170993 = appendResult81_g170993;
				half Angle44_g170993 = -(Angle44_g170991).x;
				float3 lerpResult1591_g170987 = lerp( lerpResult1585_g170987 , ( VertexPosRotationAxis50_g170993 + ( VertexPosOtherAxis82_g170993 * cos( Angle44_g170993 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170993 ) * sin( Angle44_g170993 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g171002 = lerpResult1591_g170987;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g171002 = Input_True57_g171002;
				#else
				float3 staticSwitch65_g171002 = Input_False58_g171002;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g171002 = Input_True57_g171002;
				#else
				float3 staticSwitch69_g171002 = staticSwitch65_g171002;
				#endif
				float3 temp_output_1715_0_g170987 = staticSwitch69_g171002;
				float4 temp_output_1567_29_g170987 = Out_VertexData15_g170988;
				half4 Model_VertexData1608_g170987 = temp_output_1567_29_g170987;
				float4 break1683_g170987 = Model_VertexData1608_g170987;
				float4 break33_g170994 = _normal_vert_mode;
				float temp_output_30_0_g170994 = ( break1683_g170987.x * break33_g170994.x );
				float temp_output_29_0_g170994 = ( break1683_g170987.y * break33_g170994.y );
				float temp_output_31_0_g170994 = ( break1683_g170987.z * break33_g170994.z );
				float temp_output_28_0_g170994 = ( temp_output_30_0_g170994 + temp_output_29_0_g170994 + temp_output_31_0_g170994 + ( break1683_g170987.w * break33_g170994.w ) );
				float clampResult17_g170995 = clamp( temp_output_28_0_g170994 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170999 = _NormalMeshRemap.x;
				float temp_output_9_0_g170999 = ( clampResult17_g170995 - temp_output_7_0_g170999 );
				float lerpResult1695_g170987 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170999 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170996 = lerpResult1695_g170987;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170996 = ( temp_output_6_0_g170996 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170996 = temp_output_6_0_g170996;
				#endif
				float temp_output_1690_0_g170987 = staticSwitch14_g170996;
				half Normal_MeskMask1691_g170987 = temp_output_1690_0_g170987;
				half Normal_Proj_Mask1647_g170987 = 1.0;
				float temp_output_1699_0_g170987 = ( Normal_MeskMask1691_g170987 * Normal_Proj_Mask1647_g170987 );
				float3 lerpResult1670_g170987 = lerp( Model_NormalOS1568_g170987 , temp_output_1715_0_g170987 , temp_output_1699_0_g170987);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170987 = lerpResult1670_g170987;
				#else
				float3 staticSwitch1716_g170987 = Model_NormalOS1568_g170987;
				#endif
				half3 Final_NormalOS178_g170987 = staticSwitch1716_g170987;
				float3 In_NormalOS16_g170989 = Final_NormalOS178_g170987;
				float3 temp_output_1567_21_g170987 = Out_NormalWS15_g170988;
				float3 In_NormalWS16_g170989 = temp_output_1567_21_g170987;
				float3 In_NormalRawOS16_g170989 = Out_NormalRawOS15_g170988;
				float3 In_NormalRawWS16_g170989 = Out_NormalRawWS15_g170988;
				float4 In_TangentOS16_g170989 = Out_TangentOS15_g170988;
				float3 In_ViewDirWS16_g170989 = Out_ViewDirWS15_g170988;
				float4 In_VertexData16_g170989 = temp_output_1567_29_g170987;
				float4 In_PhaseData16_g170989 = Out_PhaseData15_g170988;
				float4 In_BoundsData16_g170989 = Out_BoundsData15_g170988;
				float4 In_RotationData16_g170989 = temp_output_1567_33_g170987;
				{
				Data16_g170989.Dummy = In_Dummy16_g170989;
				Data16_g170989.PositionOS = In_PositionOS16_g170989;
				Data16_g170989.PositionWS = In_PositionWS16_g170989;
				Data16_g170989.PositionWO = In_PositionWO16_g170989;
				Data16_g170989.PositionRawOS = In_PositionRawOS16_g170989;
				Data16_g170989.PositionAddOS = In_PositionAddOS16_g170989;
				Data16_g170989.PivotOS = In_PivotOS16_g170989;
				Data16_g170989.PivotWS = In_PivotWS16_g170989;
				Data16_g170989.PivotWO = In_PivotWO16_g170989;
				Data16_g170989.NormalOS = In_NormalOS16_g170989;
				Data16_g170989.NormalWS = In_NormalWS16_g170989;
				Data16_g170989.NormalRawOS = In_NormalRawOS16_g170989;
				Data16_g170989.NormalRawWS = In_NormalRawWS16_g170989;
				Data16_g170989.TangentOS = In_TangentOS16_g170989;
				Data16_g170989.ViewDirWS = In_ViewDirWS16_g170989;
				Data16_g170989.VertexData = In_VertexData16_g170989;
				Data16_g170989.PhaseData = In_PhaseData16_g170989;
				Data16_g170989.BoundsData = In_BoundsData16_g170989;
				Data16_g170989.RotationData = In_RotationData16_g170989;
				}
				TVEModelData Data15_g171012 = Data16_g170989;
				float Out_Dummy15_g171012 = 0;
				float3 Out_PositionOS15_g171012 = float3( 0,0,0 );
				float3 Out_PositionWS15_g171012 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171012 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g171012 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g171012 = float3( 0,0,0 );
				float3 Out_PivotOS15_g171012 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171012 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171012 = float3( 0,0,0 );
				float3 Out_NormalOS15_g171012 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171012 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g171012 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g171012 = float3( 0,0,0 );
				float4 Out_TangentOS15_g171012 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g171012 = float3( 0,0,0 );
				float4 Out_VertexData15_g171012 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g171012 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171012 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g171012 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g171012 = Data15_g171012.Dummy;
				Out_PositionOS15_g171012 = Data15_g171012.PositionOS;
				Out_PositionWS15_g171012 = Data15_g171012.PositionWS;
				Out_PositionWO15_g171012 = Data15_g171012.PositionWO;
				Out_PositionRawOS15_g171012 = Data15_g171012.PositionRawOS;
				Out_PositionAddOS15_g171012 = Data15_g171012.PositionAddOS;
				Out_PivotOS15_g171012 = Data15_g171012.PivotOS;
				Out_PivotWS15_g171012 = Data15_g171012.PivotWS;
				Out_PivotWO15_g171012 = Data15_g171012.PivotWO;
				Out_NormalOS15_g171012 = Data15_g171012.NormalOS;
				Out_NormalWS15_g171012 = Data15_g171012.NormalWS;
				Out_NormalRawOS15_g171012 = Data15_g171012.NormalRawOS;
				Out_NormalRawWS15_g171012 = Data15_g171012.NormalRawWS;
				Out_TangentOS15_g171012 = Data15_g171012.TangentOS;
				Out_ViewDirWS15_g171012 = Data15_g171012.ViewDirWS;
				Out_VertexData15_g171012 = Data15_g171012.VertexData;
				Out_PhaseData15_g171012 = Data15_g171012.PhaseData;
				Out_BoundsData15_g171012 = Data15_g171012.BoundsData;
				Out_RotationData15_g171012 = Data15_g171012.RotationData;
				}
				float3 temp_output_217_24_g171011 = Out_PivotOS15_g171012;
				float3 In_PositionOS16_g171013 = ( Out_PositionOS15_g171012 + temp_output_217_24_g171011 );
				float3 In_PositionWS16_g171013 = Out_PositionWS15_g171012;
				float3 In_PositionWO16_g171013 = Out_PositionWO15_g171012;
				float3 In_PositionRawOS16_g171013 = Out_PositionRawOS15_g171012;
				float3 In_PositionAddOS16_g171013 = Out_PositionAddOS15_g171012;
				float3 In_PivotOS16_g171013 = temp_output_217_24_g171011;
				float3 In_PivotWS16_g171013 = Out_PivotWS15_g171012;
				float3 In_PivotWO16_g171013 = Out_PivotWO15_g171012;
				float3 In_NormalOS16_g171013 = Out_NormalOS15_g171012;
				float3 In_NormalWS16_g171013 = Out_NormalWS15_g171012;
				float3 In_NormalRawOS16_g171013 = Out_NormalRawOS15_g171012;
				float3 In_NormalRawWS16_g171013 = Out_NormalRawWS15_g171012;
				float4 In_TangentOS16_g171013 = Out_TangentOS15_g171012;
				float3 In_ViewDirWS16_g171013 = Out_ViewDirWS15_g171012;
				float4 In_VertexData16_g171013 = Out_VertexData15_g171012;
				float4 In_PhaseData16_g171013 = Out_PhaseData15_g171012;
				float4 In_BoundsData16_g171013 = Out_BoundsData15_g171012;
				float4 In_RotationData16_g171013 = Out_RotationData15_g171012;
				{
				Data16_g171013.Dummy = In_Dummy16_g171013;
				Data16_g171013.PositionOS = In_PositionOS16_g171013;
				Data16_g171013.PositionWS = In_PositionWS16_g171013;
				Data16_g171013.PositionWO = In_PositionWO16_g171013;
				Data16_g171013.PositionRawOS = In_PositionRawOS16_g171013;
				Data16_g171013.PositionAddOS = In_PositionAddOS16_g171013;
				Data16_g171013.PivotOS = In_PivotOS16_g171013;
				Data16_g171013.PivotWS = In_PivotWS16_g171013;
				Data16_g171013.PivotWO = In_PivotWO16_g171013;
				Data16_g171013.NormalOS = In_NormalOS16_g171013;
				Data16_g171013.NormalWS = In_NormalWS16_g171013;
				Data16_g171013.NormalRawOS = In_NormalRawOS16_g171013;
				Data16_g171013.NormalRawWS = In_NormalRawWS16_g171013;
				Data16_g171013.TangentOS = In_TangentOS16_g171013;
				Data16_g171013.ViewDirWS = In_ViewDirWS16_g171013;
				Data16_g171013.VertexData = In_VertexData16_g171013;
				Data16_g171013.PhaseData = In_PhaseData16_g171013;
				Data16_g171013.BoundsData = In_BoundsData16_g171013;
				Data16_g171013.RotationData = In_RotationData16_g171013;
				}
				TVEModelData Data15_g171018 = Data16_g171013;
				float Out_Dummy15_g171018 = 0;
				float3 Out_PositionOS15_g171018 = float3( 0,0,0 );
				float3 Out_PositionWS15_g171018 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171018 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g171018 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g171018 = float3( 0,0,0 );
				float3 Out_PivotOS15_g171018 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171018 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171018 = float3( 0,0,0 );
				float3 Out_NormalOS15_g171018 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171018 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g171018 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g171018 = float3( 0,0,0 );
				float4 Out_TangentOS15_g171018 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g171018 = float3( 0,0,0 );
				float4 Out_VertexData15_g171018 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g171018 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171018 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g171018 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g171018 = Data15_g171018.Dummy;
				Out_PositionOS15_g171018 = Data15_g171018.PositionOS;
				Out_PositionWS15_g171018 = Data15_g171018.PositionWS;
				Out_PositionWO15_g171018 = Data15_g171018.PositionWO;
				Out_PositionRawOS15_g171018 = Data15_g171018.PositionRawOS;
				Out_PositionAddOS15_g171018 = Data15_g171018.PositionAddOS;
				Out_PivotOS15_g171018 = Data15_g171018.PivotOS;
				Out_PivotWS15_g171018 = Data15_g171018.PivotWS;
				Out_PivotWO15_g171018 = Data15_g171018.PivotWO;
				Out_NormalOS15_g171018 = Data15_g171018.NormalOS;
				Out_NormalWS15_g171018 = Data15_g171018.NormalWS;
				Out_NormalRawOS15_g171018 = Data15_g171018.NormalRawOS;
				Out_NormalRawWS15_g171018 = Data15_g171018.NormalRawWS;
				Out_TangentOS15_g171018 = Data15_g171018.TangentOS;
				Out_ViewDirWS15_g171018 = Data15_g171018.ViewDirWS;
				Out_VertexData15_g171018 = Data15_g171018.VertexData;
				Out_PhaseData15_g171018 = Data15_g171018.PhaseData;
				Out_BoundsData15_g171018 = Data15_g171018.BoundsData;
				Out_RotationData15_g171018 = Data15_g171018.RotationData;
				}
				float3 temp_output_31_0_g171015 = Out_PositionOS15_g171018;
				float3 temp_output_6_0_g171029 = ( temp_output_31_0_g171015 + _DisableSRPBatcher );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g171029 = ( temp_output_6_0_g171029 + ( 0.0 * 0.0 ) );
				#else
				float3 staticSwitch14_g171029 = temp_output_6_0_g171029;
				#endif
				
				o.ase_texcoord5.xyz = vertexToFrag73_g170478;
				o.ase_texcoord6.xyz = vertexToFrag76_g170478;
				o.ase_texcoord7.xyz = ase_normalWS;
				float3 ase_tangentWS = UnityObjectToWorldDir(v.tangent);
				o.ase_texcoord8.xyz = ase_tangentWS;
				float ase_tangentSign = v.tangent.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_bitangentWS = cross( ase_normalWS, ase_tangentWS ) * ase_tangentSign;
				o.ase_texcoord9.xyz = ase_bitangentWS;
				float temp_output_6_0_g170737 = ( _MotionHighlightValue * Global_DistMask1820_g170714 * ( Tiny_Mask218_g170714 * Tiny_Mask218_g170714 ) * ( Global_Wave1475_g170714 * Global_Wave1475_g170714 * Global_Wave1475_g170714 * Global_Wave1475_g170714 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170737 = ( temp_output_6_0_g170737 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170737 = temp_output_6_0_g170737;
				#endif
				half Wave_Mask1263 = staticSwitch14_g170737;
				float4 appendResult23_g170817 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1263));
				float4 vertexToFrag24_g170817 = appendResult23_g170817;
				o.ase_texcoord10 = vertexToFrag24_g170817;
				o.ase_texcoord12.xyz = ase_positionWS;
				
				o.ase_texcoord3 = v.ase_texcoord;
				o.ase_texcoord4.xy = v.texcoord2.xyzw.xy;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord4.zw = 0;
				o.ase_texcoord5.w = 0;
				o.ase_texcoord6.w = 0;
				o.ase_texcoord7.w = 0;
				o.ase_texcoord8.w = 0;
				o.ase_texcoord9.w = 0;
				o.ase_texcoord12.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = staticSwitch14_g171029;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g171018;
				v.tangent = Out_TangentOS15_g171018;

				#ifdef EDITOR_VISUALIZATION
					o.vizUV = 0;
					o.lightCoord = 0;
					if (unity_VisualizationMode == EDITORVIZ_TEXTURE)
						o.vizUV = UnityMetaVizUV(unity_EditorViz_UVIndex, v.texcoord.xy, v.texcoord1.xy, v.texcoord2.xy, unity_EditorViz_Texture_ST);
					else if (unity_VisualizationMode == EDITORVIZ_SHOWLIGHTMASK)
					{
						o.vizUV = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
						o.lightCoord = mul(unity_EditorViz_WorldToLight, mul(unity_ObjectToWorld, float4(v.vertex.xyz, 1)));
					}
				#endif

				o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy, unity_LightmapST, unity_DynamicLightmapST);

				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN 
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float localBreakData4_g171021 = ( 0.0 );
				float localCompData3_g171005 = ( 0.0 );
				TVEVisualData Data3_g171005 = (TVEVisualData)0;
				half Dummy145_g171003 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g171005 = Dummy145_g171003;
				float localBreakData4_g171004 = ( 0.0 );
				float localCompData3_g170976 = ( 0.0 );
				TVEVisualData Data3_g170976 = (TVEVisualData)0;
				half Dummy145_g170971 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170976 = Dummy145_g170971;
				float localBreakData4_g170975 = ( 0.0 );
				float localCompData3_g170953 = ( 0.0 );
				TVEVisualData Data3_g170953 = (TVEVisualData)0;
				half Dummy594_g170950 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170953 = Dummy594_g170950;
				float localBreakData4_g170952 = ( 0.0 );
				float localCompData3_g170936 = ( 0.0 );
				TVEVisualData Data3_g170936 = (TVEVisualData)0;
				half Dummy594_g170935 = ( _CutoutCategory + _CutoutEnd + _CutoutBakeMode );
				float In_Dummy3_g170936 = Dummy594_g170935;
				float localBreakData4_g170938 = ( 0.0 );
				float localCompData3_g170908 = ( 0.0 );
				TVEVisualData Data3_g170908 = (TVEVisualData)0;
				half Dummy594_g170906 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170908 = Dummy594_g170906;
				float localBreakData4_g170907 = ( 0.0 );
				float localCompData3_g170872 = ( 0.0 );
				TVEVisualData Data3_g170872 = (TVEVisualData)0;
				half Dummy594_g170869 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170872 = Dummy594_g170869;
				float localBreakData4_g170870 = ( 0.0 );
				float localCompData3_g170868 = ( 0.0 );
				TVEVisualData Data3_g170868 = (TVEVisualData)0;
				float In_Dummy3_g170868 = 0.0;
				float localBreakData4_g170867 = ( 0.0 );
				float localCompData3_g170845 = ( 0.0 );
				TVEVisualData Data3_g170845 = (TVEVisualData)0;
				half Dummy205_g170842 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170845 = Dummy205_g170842;
				float localBreakData4_g170844 = ( 0.0 );
				float localCompData3_g170822 = ( 0.0 );
				TVEVisualData Data3_g170822 = (TVEVisualData)0;
				half Dummy205_g170818 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170822 = Dummy205_g170818;
				float localBreakData4_g170823 = ( 0.0 );
				float localCompData3_g170811 = ( 0.0 );
				TVEVisualData Data3_g170811 = (TVEVisualData)0;
				half Dummy220_g170808 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170811 = Dummy220_g170808;
				float localBreakData4_g170810 = ( 0.0 );
				float localCompData3_g170801 = ( 0.0 );
				TVEVisualData Data3_g170801 = (TVEVisualData)0;
				half Dummy220_g170798 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170801 = Dummy220_g170798;
				float localBreakData4_g170800 = ( 0.0 );
				float localCompData3_g170790 = ( 0.0 );
				TVEVisualData Data3_g170790 = (TVEVisualData)0;
				half Dummy202_g170788 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170790 = Dummy202_g170788;
				float localBreakData4_g170789 = ( 0.0 );
				float localCompData3_g170687 = ( 0.0 );
				TVEVisualData Data3_g170687 = (TVEVisualData)0;
				half4 Dummy944_g170678 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170687 = Dummy944_g170678.x;
				float localBreakData4_g170686 = ( 0.0 );
				float localCompData3_g170655 = ( 0.0 );
				TVEVisualData Data3_g170655 = (TVEVisualData)0;
				half4 Dummy946_g170634 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170655 = Dummy946_g170634.x;
				float localBreakData4_g170645 = ( 0.0 );
				float localCompData3_g170632 = ( 0.0 );
				TVEVisualData Data3_g170632 = (TVEVisualData)0;
				half4 Dummy130_g170617 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170632 = Dummy130_g170617.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170625) = _MainAlbedoTex;
				float localFilterTexture19_g170628 = ( 0.0 );
				SamplerState SS19_g170628 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170628 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170628 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170628 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170628 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170628 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170628 = SamplerDefault19_g170628;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170628 = SamplerDefault19_g170628;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170628 = SamplerPoint19_g170628;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170628 = SamplerLow19_g170628;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170628 = SamplerMedium19_g170628;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170628 = SamplerHigh19_g170628;
				#endif
				}
				SamplerState Sampler276_g170625 = SS19_g170628;
				half4 Local_Coords180_g170617 = _main_coord_value;
				float4 temp_output_37_0_g170625 = Local_Coords180_g170617;
				half4 Coords276_g170625 = temp_output_37_0_g170625;
				half2 TexCoord276_g170625 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170625 = SampleMain( Texture276_g170625 , Sampler276_g170625 , Coords276_g170625 , TexCoord276_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170625) = _MainAlbedoTex;
				SamplerState Sampler275_g170625 = SS19_g170628;
				half4 Coords275_g170625 = temp_output_37_0_g170625;
				half2 TexCoord275_g170625 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170625 = SampleExtra( Texture275_g170625 , Sampler275_g170625 , Coords275_g170625 , TexCoord275_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170625) = _MainAlbedoTex;
				SamplerState Sampler238_g170625 = SS19_g170628;
				half4 Coords238_g170625 = temp_output_37_0_g170625;
				TVEModelData Data16_g170483 = (TVEModelData)0;
				float In_Dummy16_g170483 = 0.0;
				float3 vertexToFrag73_g170478 = IN.ase_texcoord5.xyz;
				half3 PositionWS122_g170478 = vertexToFrag73_g170478;
				float3 In_PositionWS16_g170483 = PositionWS122_g170478;
				float3 vertexToFrag76_g170478 = IN.ase_texcoord6.xyz;
				half3 PivotWS121_g170478 = vertexToFrag76_g170478;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
				#else
				float3 staticSwitch204_g170478 = PositionWS122_g170478;
				#endif
				half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170483 = PositionWO132_g170478;
				float3 In_PivotWS16_g170483 = PivotWS121_g170478;
				half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170483 = PivotWO133_g170478;
				float3 ase_normalWS = IN.ase_texcoord7.xyz;
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170478 = normalizedWorldNormal;
				float3 In_NormalWS16_g170483 = Normal_WS95_g170478;
				float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
				half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
				float3 In_ViewDirWS16_g170483 = ViewDirWS169_g170478;
				half4 VertexMasks171_g170478 = IN.ase_color;
				float4 In_VertexData16_g170483 = VertexMasks171_g170478;
				float4 In_BoundsData16_g170483 = float4( 1,1,1,1 );
				{
				Data16_g170483.Dummy = In_Dummy16_g170483;
				Data16_g170483.PositionWS = In_PositionWS16_g170483;
				Data16_g170483.PositionWO = In_PositionWO16_g170483;
				Data16_g170483.PivotWS = In_PivotWS16_g170483;
				Data16_g170483.PivotWO = In_PivotWO16_g170483;
				Data16_g170483.NormalWS = In_NormalWS16_g170483;
				Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
				Data16_g170483.VertexData = In_VertexData16_g170483;
				Data16_g170483.BoundsData = In_BoundsData16_g170483;
				}
				TVEModelData Data15_g170631 = Data16_g170483;
				float Out_Dummy15_g170631 = 0;
				float3 Out_PositionWS15_g170631 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170631 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170631 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170631 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170631 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170631 = float3( 0,0,0 );
				float4 Out_VertexData15_g170631 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170631 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170631 = Data15_g170631.Dummy;
				Out_PositionWS15_g170631 = Data15_g170631.PositionWS;
				Out_PositionWO15_g170631 = Data15_g170631.PositionWO;
				Out_PivotWS15_g170631 = Data15_g170631.PivotWS;
				Out_PivotWO15_g170631 = Data15_g170631.PivotWO;
				Out_NormalWS15_g170631 = Data15_g170631.NormalWS;
				Out_ViewDirWS15_g170631 = Data15_g170631.ViewDirWS;
				Out_VertexData15_g170631 = Data15_g170631.VertexData;
				Out_BoundsData15_g170631 = Data15_g170631.BoundsData;
				}
				half3 Model_PositionWO222_g170617 = Out_PositionWO15_g170631;
				float3 temp_output_279_0_g170625 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170625 = temp_output_279_0_g170625;
				half4 localSamplePlanar2D238_g170625 = SamplePlanar2D( Texture238_g170625 , Sampler238_g170625 , Coords238_g170625 , WorldPosition238_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170625) = _MainAlbedoTex;
				SamplerState Sampler246_g170625 = SS19_g170628;
				half4 Coords246_g170625 = temp_output_37_0_g170625;
				half3 WorldPosition246_g170625 = temp_output_279_0_g170625;
				half3 Model_NormalWS226_g170617 = Out_NormalWS15_g170631;
				float3 temp_output_280_0_g170625 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170625 = temp_output_280_0_g170625;
				half4 localSamplePlanar3D246_g170625 = SamplePlanar3D( Texture246_g170625 , Sampler246_g170625 , Coords246_g170625 , WorldPosition246_g170625 , WorldNormal246_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170625) = _MainAlbedoTex;
				SamplerState Sampler234_g170625 = SS19_g170628;
				float4 Coords234_g170625 = temp_output_37_0_g170625;
				float3 WorldPosition234_g170625 = temp_output_279_0_g170625;
				float4 localSampleStochastic2D234_g170625 = SampleStochastic2D( Texture234_g170625 , Sampler234_g170625 , Coords234_g170625 , WorldPosition234_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170625) = _MainAlbedoTex;
				SamplerState Sampler263_g170625 = SS19_g170628;
				half4 Coords263_g170625 = temp_output_37_0_g170625;
				half3 WorldPosition263_g170625 = temp_output_279_0_g170625;
				half3 WorldNormal263_g170625 = temp_output_280_0_g170625;
				half4 localSampleStochastic3D263_g170625 = SampleStochastic3D( Texture263_g170625 , Sampler263_g170625 , Coords263_g170625 , WorldPosition263_g170625 , WorldNormal263_g170625 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170617 = localSampleMain276_g170625;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170617 = localSampleExtra275_g170625;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170617 = localSamplePlanar2D238_g170625;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170617 = localSamplePlanar3D246_g170625;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170617 = localSampleStochastic2D234_g170625;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170617 = localSampleStochastic3D263_g170625;
				#else
				float4 staticSwitch184_g170617 = localSampleMain276_g170625;
				#endif
				half4 Local_AlbedoTex185_g170617 = staticSwitch184_g170617;
				float3 lerpResult53_g170617 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170617).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170617 = lerpResult53_g170617;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170627) = _MainShaderTex;
				float localFilterTexture30_g170630 = ( 0.0 );
				SamplerState SS30_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170630 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170630 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170630 = SamplerDefault30_g170630;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170630 = SamplerDefault30_g170630;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170630 = SamplerPoint30_g170630;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170630 = SamplerLow30_g170630;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170630 = SamplerMedium30_g170630;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170630 = SamplerHigh30_g170630;
				#endif
				}
				SamplerState Sampler276_g170627 = SS30_g170630;
				float4 temp_output_37_0_g170627 = Local_Coords180_g170617;
				half4 Coords276_g170627 = temp_output_37_0_g170627;
				half2 TexCoord276_g170627 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170627 = SampleMain( Texture276_g170627 , Sampler276_g170627 , Coords276_g170627 , TexCoord276_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170627) = _MainShaderTex;
				SamplerState Sampler275_g170627 = SS30_g170630;
				half4 Coords275_g170627 = temp_output_37_0_g170627;
				half2 TexCoord275_g170627 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170627 = SampleExtra( Texture275_g170627 , Sampler275_g170627 , Coords275_g170627 , TexCoord275_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170627) = _MainShaderTex;
				SamplerState Sampler238_g170627 = SS30_g170630;
				half4 Coords238_g170627 = temp_output_37_0_g170627;
				float3 temp_output_279_0_g170627 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170627 = temp_output_279_0_g170627;
				half4 localSamplePlanar2D238_g170627 = SamplePlanar2D( Texture238_g170627 , Sampler238_g170627 , Coords238_g170627 , WorldPosition238_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170627) = _MainShaderTex;
				SamplerState Sampler246_g170627 = SS30_g170630;
				half4 Coords246_g170627 = temp_output_37_0_g170627;
				half3 WorldPosition246_g170627 = temp_output_279_0_g170627;
				float3 temp_output_280_0_g170627 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170627 = temp_output_280_0_g170627;
				half4 localSamplePlanar3D246_g170627 = SamplePlanar3D( Texture246_g170627 , Sampler246_g170627 , Coords246_g170627 , WorldPosition246_g170627 , WorldNormal246_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170627) = _MainShaderTex;
				SamplerState Sampler234_g170627 = SS30_g170630;
				float4 Coords234_g170627 = temp_output_37_0_g170627;
				float3 WorldPosition234_g170627 = temp_output_279_0_g170627;
				float4 localSampleStochastic2D234_g170627 = SampleStochastic2D( Texture234_g170627 , Sampler234_g170627 , Coords234_g170627 , WorldPosition234_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170627) = _MainShaderTex;
				SamplerState Sampler263_g170627 = SS30_g170630;
				half4 Coords263_g170627 = temp_output_37_0_g170627;
				half3 WorldPosition263_g170627 = temp_output_279_0_g170627;
				half3 WorldNormal263_g170627 = temp_output_280_0_g170627;
				half4 localSampleStochastic3D263_g170627 = SampleStochastic3D( Texture263_g170627 , Sampler263_g170627 , Coords263_g170627 , WorldPosition263_g170627 , WorldNormal263_g170627 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170617 = localSampleMain276_g170627;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170617 = localSampleExtra275_g170627;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170617 = localSamplePlanar2D238_g170627;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170617 = localSamplePlanar3D246_g170627;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170617 = localSampleStochastic2D234_g170627;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170617 = localSampleStochastic3D263_g170627;
				#else
				float4 staticSwitch198_g170617 = localSampleMain276_g170627;
				#endif
				half4 Local_MasksTex199_g170617 = staticSwitch198_g170617;
				float lerpResult23_g170617 = lerp( 1.0 , (Local_MasksTex199_g170617).y , _MainOcclusionValue);
				float4 appendResult73_g170617 = (float4(( (Local_MasksTex199_g170617).x * _MainMetallicValue ) , lerpResult23_g170617 , (Local_MasksTex199_g170617).z , ( (Local_MasksTex199_g170617).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170617 = appendResult73_g170617;
				float clampResult17_g170622 = clamp( (Local_Masks109_g170617).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170633 = _MainMultiRemap.x;
				float temp_output_9_0_g170633 = ( clampResult17_g170622 - temp_output_7_0_g170633 );
				half Local_MultiMask78_g170617 = saturate( ( ( temp_output_9_0_g170633 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170617 = lerp( 1.0 , Local_MultiMask78_g170617 , _MainColorMode);
				float4 lerpResult62_g170617 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170617);
				half3 Local_ColorRGB93_g170617 = (lerpResult62_g170617).rgb;
				half3 Local_Albedo139_g170617 = ( Local_AlbedoRGB107_g170617 * Local_ColorRGB93_g170617 );
				float3 In_Albedo3_g170632 = Local_Albedo139_g170617;
				float3 In_AlbedoRaw3_g170632 = Local_Albedo139_g170617;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170626) = _MainNormalTex;
				float localFilterTexture29_g170629 = ( 0.0 );
				SamplerState SS29_g170629 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170629 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170629 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170629 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170629 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170629 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170629 = SamplerDefault29_g170629;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170629 = SamplerDefault29_g170629;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170629 = SamplerPoint29_g170629;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170629 = SamplerLow29_g170629;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170629 = SamplerMedium29_g170629;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170629 = SamplerHigh29_g170629;
				#endif
				}
				SamplerState Sampler276_g170626 = SS29_g170629;
				float4 temp_output_37_0_g170626 = Local_Coords180_g170617;
				half4 Coords276_g170626 = temp_output_37_0_g170626;
				half2 TexCoord276_g170626 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170626 = SampleMain( Texture276_g170626 , Sampler276_g170626 , Coords276_g170626 , TexCoord276_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170626) = _MainNormalTex;
				SamplerState Sampler275_g170626 = SS29_g170629;
				half4 Coords275_g170626 = temp_output_37_0_g170626;
				half2 TexCoord275_g170626 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170626 = SampleExtra( Texture275_g170626 , Sampler275_g170626 , Coords275_g170626 , TexCoord275_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170626) = _MainNormalTex;
				SamplerState Sampler238_g170626 = SS29_g170629;
				half4 Coords238_g170626 = temp_output_37_0_g170626;
				float3 temp_output_279_0_g170626 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170626 = temp_output_279_0_g170626;
				half4 localSamplePlanar2D238_g170626 = SamplePlanar2D( Texture238_g170626 , Sampler238_g170626 , Coords238_g170626 , WorldPosition238_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170626) = _MainNormalTex;
				SamplerState Sampler246_g170626 = SS29_g170629;
				half4 Coords246_g170626 = temp_output_37_0_g170626;
				half3 WorldPosition246_g170626 = temp_output_279_0_g170626;
				float3 temp_output_280_0_g170626 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170626 = temp_output_280_0_g170626;
				half4 localSamplePlanar3D246_g170626 = SamplePlanar3D( Texture246_g170626 , Sampler246_g170626 , Coords246_g170626 , WorldPosition246_g170626 , WorldNormal246_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170626) = _MainNormalTex;
				SamplerState Sampler234_g170626 = SS29_g170629;
				float4 Coords234_g170626 = temp_output_37_0_g170626;
				float3 WorldPosition234_g170626 = temp_output_279_0_g170626;
				float4 localSampleStochastic2D234_g170626 = SampleStochastic2D( Texture234_g170626 , Sampler234_g170626 , Coords234_g170626 , WorldPosition234_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170626) = _MainNormalTex;
				SamplerState Sampler263_g170626 = SS29_g170629;
				half4 Coords263_g170626 = temp_output_37_0_g170626;
				half3 WorldPosition263_g170626 = temp_output_279_0_g170626;
				half3 WorldNormal263_g170626 = temp_output_280_0_g170626;
				half4 localSampleStochastic3D263_g170626 = SampleStochastic3D( Texture263_g170626 , Sampler263_g170626 , Coords263_g170626 , WorldPosition263_g170626 , WorldNormal263_g170626 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170617 = localSampleMain276_g170626;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170617 = localSampleExtra275_g170626;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170617 = localSamplePlanar2D238_g170626;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170617 = localSamplePlanar3D246_g170626;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170617 = localSampleStochastic2D234_g170626;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170617 = localSampleStochastic3D263_g170626;
				#else
				float4 staticSwitch193_g170617 = localSampleMain276_g170626;
				#endif
				half4 Local_NormaTex191_g170617 = staticSwitch193_g170617;
				half4 Normal_Packed45_g170618 = Local_NormaTex191_g170617;
				float2 appendResult58_g170618 = (float2(( (Normal_Packed45_g170618).x * (Normal_Packed45_g170618).w ) , (Normal_Packed45_g170618).y));
				half2 Normal_Default50_g170618 = appendResult58_g170618;
				half2 Normal_ASTC41_g170618 = (Normal_Packed45_g170618).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170618 = Normal_ASTC41_g170618;
				#else
				float2 staticSwitch38_g170618 = Normal_Default50_g170618;
				#endif
				half2 Normal_NO_DTX544_g170618 = (Normal_Packed45_g170618).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170618 = Normal_NO_DTX544_g170618;
				#else
				float2 staticSwitch37_g170618 = staticSwitch38_g170618;
				#endif
				float2 temp_output_26_0_g170617 = ( (staticSwitch37_g170618*2.0 + -1.0) * _MainNormalValue );
				float3 ase_tangentWS = IN.ase_texcoord8.xyz;
				float3 ase_bitangentWS = IN.ase_texcoord9.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_tangentWS,ase_bitangentWS,ase_normalWS);
				half2 Normal_Planar45_g170619 = temp_output_26_0_g170617;
				float2 break71_g170619 = Normal_Planar45_g170619;
				float3 appendResult72_g170619 = (float3(break71_g170619.x , 0.0 , break71_g170619.y));
				float2 temp_output_205_0_g170617 = (mul( ase_worldToTangent, appendResult72_g170619 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#else
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#endif
				half2 Local_NormalTS108_g170617 = staticSwitch204_g170617;
				float2 In_NormalTS3_g170632 = Local_NormalTS108_g170617;
				float3 appendResult68_g170620 = (float3(Local_NormalTS108_g170617 , 1.0));
				float3 tanToWorld0 = float3( ase_tangentWS.x, ase_bitangentWS.x, ase_normalWS.x );
				float3 tanToWorld1 = float3( ase_tangentWS.y, ase_bitangentWS.y, ase_normalWS.y );
				float3 tanToWorld2 = float3( ase_tangentWS.z, ase_bitangentWS.z, ase_normalWS.z );
				float3 tanNormal74_g170620 = appendResult68_g170620;
				float3 worldNormal74_g170620 = normalize( float3(dot(tanToWorld0,tanNormal74_g170620), dot(tanToWorld1,tanNormal74_g170620), dot(tanToWorld2,tanNormal74_g170620)) );
				half3 Local_NormalWS250_g170617 = worldNormal74_g170620;
				float3 In_NormalWS3_g170632 = Local_NormalWS250_g170617;
				float4 In_Shader3_g170632 = Local_Masks109_g170617;
				float4 In_Emissive3_g170632 = half4(1,1,1,1);
				float3 temp_output_3_0_g170621 = Local_Albedo139_g170617;
				float dotResult20_g170621 = dot( temp_output_3_0_g170621 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170617 = dotResult20_g170621;
				float In_Grayscale3_g170632 = Local_Grayscale110_g170617;
				float clampResult144_g170617 = clamp( saturate( ( Local_Grayscale110_g170617 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170617 = clampResult144_g170617;
				float In_Luminosity3_g170632 = Local_Luminosity145_g170617;
				float In_MultiMask3_g170632 = Local_MultiMask78_g170617;
				float temp_output_187_0_g170617 = (Local_AlbedoTex185_g170617).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170617 = ( temp_output_187_0_g170617 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170617 = temp_output_187_0_g170617;
				#endif
				half Local_AlphaClip111_g170617 = staticSwitch236_g170617;
				float In_AlphaClip3_g170632 = Local_AlphaClip111_g170617;
				half Local_AlphaFade246_g170617 = (lerpResult62_g170617).a;
				float In_AlphaFade3_g170632 = Local_AlphaFade246_g170617;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170632 = temp_cast_4;
				float In_Transmission3_g170632 = 1.0;
				float In_Thickness3_g170632 = 0.0;
				float In_Diffusion3_g170632 = 0.0;
				{
				Data3_g170632.Dummy = In_Dummy3_g170632;
				Data3_g170632.Albedo = In_Albedo3_g170632;
				Data3_g170632.AlbedoRaw = In_AlbedoRaw3_g170632;
				Data3_g170632.NormalTS = In_NormalTS3_g170632;
				Data3_g170632.NormalWS = In_NormalWS3_g170632;
				Data3_g170632.Shader = In_Shader3_g170632;
				Data3_g170632.Emissive= In_Emissive3_g170632;
				Data3_g170632.MultiMask = In_MultiMask3_g170632;
				Data3_g170632.Grayscale = In_Grayscale3_g170632;
				Data3_g170632.Luminosity = In_Luminosity3_g170632;
				Data3_g170632.AlphaClip = In_AlphaClip3_g170632;
				Data3_g170632.AlphaFade = In_AlphaFade3_g170632;
				Data3_g170632.Translucency = In_Translucency3_g170632;
				Data3_g170632.Transmission = In_Transmission3_g170632;
				Data3_g170632.Thickness = In_Thickness3_g170632;
				Data3_g170632.Diffusion = In_Diffusion3_g170632;
				}
				TVEVisualData Data4_g170645 = Data3_g170632;
				float Out_Dummy4_g170645 = 0;
				float3 Out_Albedo4_g170645 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170645 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170645 = float2( 0,0 );
				float3 Out_NormalWS4_g170645 = float3( 0,0,0 );
				float4 Out_Shader4_g170645 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170645 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170645 = 0;
				float Out_Grayscale4_g170645 = 0;
				float Out_Luminosity4_g170645 = 0;
				float Out_AlphaClip4_g170645 = 0;
				float Out_AlphaFade4_g170645 = 0;
				float3 Out_Translucency4_g170645 = float3( 0,0,0 );
				float Out_Transmission4_g170645 = 0;
				float Out_Thickness4_g170645 = 0;
				float Out_Diffusion4_g170645 = 0;
				{
				Out_Dummy4_g170645 = Data4_g170645.Dummy;
				Out_Albedo4_g170645 = Data4_g170645.Albedo;
				Out_AlbedoRaw4_g170645 = Data4_g170645.AlbedoRaw;
				Out_NormalTS4_g170645 = Data4_g170645.NormalTS;
				Out_NormalWS4_g170645 = Data4_g170645.NormalWS;
				Out_Shader4_g170645 = Data4_g170645.Shader;
				Out_Emissive4_g170645= Data4_g170645.Emissive;
				Out_MultiMask4_g170645 = Data4_g170645.MultiMask;
				Out_Grayscale4_g170645 = Data4_g170645.Grayscale;
				Out_Luminosity4_g170645= Data4_g170645.Luminosity;
				Out_AlphaClip4_g170645 = Data4_g170645.AlphaClip;
				Out_AlphaFade4_g170645 = Data4_g170645.AlphaFade;
				Out_Translucency4_g170645 = Data4_g170645.Translucency;
				Out_Transmission4_g170645 = Data4_g170645.Transmission;
				Out_Thickness4_g170645 = Data4_g170645.Thickness;
				Out_Diffusion4_g170645 = Data4_g170645.Diffusion;
				}
				half3 Visual_Albedo527_g170634 = Out_Albedo4_g170645;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170635) = _SecondAlbedoTex;
				float localFilterTexture19_g170651 = ( 0.0 );
				SamplerState SS19_g170651 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170651 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170651 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170651 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170651 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170651 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170651 = SamplerDefault19_g170651;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170651 = SamplerDefault19_g170651;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170651 = SamplerPoint19_g170651;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170651 = SamplerLow19_g170651;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170651 = SamplerMedium19_g170651;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170651 = SamplerHigh19_g170651;
				#endif
				}
				SamplerState Sampler276_g170635 = SS19_g170651;
				half4 Local_LayerCoords790_g170634 = _second_coord_value;
				float4 temp_output_37_0_g170635 = Local_LayerCoords790_g170634;
				half4 Coords276_g170635 = temp_output_37_0_g170635;
				half2 TexCoord276_g170635 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170635 = SampleMain( Texture276_g170635 , Sampler276_g170635 , Coords276_g170635 , TexCoord276_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170635) = _SecondAlbedoTex;
				SamplerState Sampler275_g170635 = SS19_g170651;
				half4 Coords275_g170635 = temp_output_37_0_g170635;
				half2 TexCoord275_g170635 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170635 = SampleExtra( Texture275_g170635 , Sampler275_g170635 , Coords275_g170635 , TexCoord275_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170635) = _SecondAlbedoTex;
				SamplerState Sampler238_g170635 = SS19_g170651;
				half4 Coords238_g170635 = temp_output_37_0_g170635;
				TVEModelData Data15_g170654 = Data16_g170483;
				float Out_Dummy15_g170654 = 0;
				float3 Out_PositionWS15_g170654 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170654 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170654 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170654 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170654 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170654 = float3( 0,0,0 );
				float4 Out_VertexData15_g170654 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170654 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170654 = Data15_g170654.Dummy;
				Out_PositionWS15_g170654 = Data15_g170654.PositionWS;
				Out_PositionWO15_g170654 = Data15_g170654.PositionWO;
				Out_PivotWS15_g170654 = Data15_g170654.PivotWS;
				Out_PivotWO15_g170654 = Data15_g170654.PivotWO;
				Out_NormalWS15_g170654 = Data15_g170654.NormalWS;
				Out_ViewDirWS15_g170654 = Data15_g170654.ViewDirWS;
				Out_VertexData15_g170654 = Data15_g170654.VertexData;
				Out_BoundsData15_g170654 = Data15_g170654.BoundsData;
				}
				half3 Model_PositionWO636_g170634 = Out_PositionWO15_g170654;
				float3 temp_output_279_0_g170635 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170635 = temp_output_279_0_g170635;
				half4 localSamplePlanar2D238_g170635 = SamplePlanar2D( Texture238_g170635 , Sampler238_g170635 , Coords238_g170635 , WorldPosition238_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170635) = _SecondAlbedoTex;
				SamplerState Sampler246_g170635 = SS19_g170651;
				half4 Coords246_g170635 = temp_output_37_0_g170635;
				half3 WorldPosition246_g170635 = temp_output_279_0_g170635;
				half3 Model_NormalWS869_g170634 = Out_NormalWS15_g170654;
				float3 temp_output_280_0_g170635 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170635 = temp_output_280_0_g170635;
				half4 localSamplePlanar3D246_g170635 = SamplePlanar3D( Texture246_g170635 , Sampler246_g170635 , Coords246_g170635 , WorldPosition246_g170635 , WorldNormal246_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170635) = _SecondAlbedoTex;
				SamplerState Sampler234_g170635 = SS19_g170651;
				float4 Coords234_g170635 = temp_output_37_0_g170635;
				float3 WorldPosition234_g170635 = temp_output_279_0_g170635;
				float4 localSampleStochastic2D234_g170635 = SampleStochastic2D( Texture234_g170635 , Sampler234_g170635 , Coords234_g170635 , WorldPosition234_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170635) = _SecondAlbedoTex;
				SamplerState Sampler263_g170635 = SS19_g170651;
				half4 Coords263_g170635 = temp_output_37_0_g170635;
				half3 WorldPosition263_g170635 = temp_output_279_0_g170635;
				half3 WorldNormal263_g170635 = temp_output_280_0_g170635;
				half4 localSampleStochastic3D263_g170635 = SampleStochastic3D( Texture263_g170635 , Sampler263_g170635 , Coords263_g170635 , WorldPosition263_g170635 , WorldNormal263_g170635 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170634 = localSampleMain276_g170635;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170634 = localSampleExtra275_g170635;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170634 = localSamplePlanar2D238_g170635;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170634 = localSamplePlanar3D246_g170635;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170634 = localSampleStochastic2D234_g170635;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170634 = localSampleStochastic3D263_g170635;
				#else
				float4 staticSwitch693_g170634 = localSampleMain276_g170635;
				#endif
				half4 Local_AlbedoTex777_g170634 = staticSwitch693_g170634;
				float3 lerpResult716_g170634 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170634).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170634 = lerpResult716_g170634;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170637) = _SecondShaderTex;
				float localFilterTexture30_g170653 = ( 0.0 );
				SamplerState SS30_g170653 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170653 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170653 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170653 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170653 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170653 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170653 = SamplerDefault30_g170653;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170653 = SamplerDefault30_g170653;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170653 = SamplerPoint30_g170653;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170653 = SamplerLow30_g170653;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170653 = SamplerMedium30_g170653;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170653 = SamplerHigh30_g170653;
				#endif
				}
				SamplerState Sampler276_g170637 = SS30_g170653;
				float4 temp_output_37_0_g170637 = Local_LayerCoords790_g170634;
				half4 Coords276_g170637 = temp_output_37_0_g170637;
				half2 TexCoord276_g170637 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170637 = SampleMain( Texture276_g170637 , Sampler276_g170637 , Coords276_g170637 , TexCoord276_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170637) = _SecondShaderTex;
				SamplerState Sampler275_g170637 = SS30_g170653;
				half4 Coords275_g170637 = temp_output_37_0_g170637;
				half2 TexCoord275_g170637 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170637 = SampleExtra( Texture275_g170637 , Sampler275_g170637 , Coords275_g170637 , TexCoord275_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170637) = _SecondShaderTex;
				SamplerState Sampler238_g170637 = SS30_g170653;
				half4 Coords238_g170637 = temp_output_37_0_g170637;
				float3 temp_output_279_0_g170637 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170637 = temp_output_279_0_g170637;
				half4 localSamplePlanar2D238_g170637 = SamplePlanar2D( Texture238_g170637 , Sampler238_g170637 , Coords238_g170637 , WorldPosition238_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170637) = _SecondShaderTex;
				SamplerState Sampler246_g170637 = SS30_g170653;
				half4 Coords246_g170637 = temp_output_37_0_g170637;
				half3 WorldPosition246_g170637 = temp_output_279_0_g170637;
				float3 temp_output_280_0_g170637 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170637 = temp_output_280_0_g170637;
				half4 localSamplePlanar3D246_g170637 = SamplePlanar3D( Texture246_g170637 , Sampler246_g170637 , Coords246_g170637 , WorldPosition246_g170637 , WorldNormal246_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170637) = _SecondShaderTex;
				SamplerState Sampler234_g170637 = SS30_g170653;
				float4 Coords234_g170637 = temp_output_37_0_g170637;
				float3 WorldPosition234_g170637 = temp_output_279_0_g170637;
				float4 localSampleStochastic2D234_g170637 = SampleStochastic2D( Texture234_g170637 , Sampler234_g170637 , Coords234_g170637 , WorldPosition234_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170637) = _SecondShaderTex;
				SamplerState Sampler263_g170637 = SS30_g170653;
				half4 Coords263_g170637 = temp_output_37_0_g170637;
				half3 WorldPosition263_g170637 = temp_output_279_0_g170637;
				half3 WorldNormal263_g170637 = temp_output_280_0_g170637;
				half4 localSampleStochastic3D263_g170637 = SampleStochastic3D( Texture263_g170637 , Sampler263_g170637 , Coords263_g170637 , WorldPosition263_g170637 , WorldNormal263_g170637 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170634 = localSampleMain276_g170637;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170634 = localSampleExtra275_g170637;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170634 = localSamplePlanar2D238_g170637;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170634 = localSamplePlanar3D246_g170637;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170634 = localSampleStochastic2D234_g170637;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170634 = localSampleStochastic3D263_g170637;
				#else
				float4 staticSwitch722_g170634 = localSampleMain276_g170637;
				#endif
				half4 Local_ShaderTex775_g170634 = staticSwitch722_g170634;
				float lerpResult739_g170634 = lerp( 1.0 , (Local_ShaderTex775_g170634).y , _SecondOcclusionValue);
				float4 appendResult749_g170634 = (float4(( (Local_ShaderTex775_g170634).x * _SecondMetallicValue ) , lerpResult739_g170634 , (Local_ShaderTex775_g170634).z , ( (Local_ShaderTex775_g170634).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170634 = appendResult749_g170634;
				float clampResult17_g170641 = clamp( (Local_Masks750_g170634).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170656 = _SecondMultiRemap.x;
				float temp_output_9_0_g170656 = ( clampResult17_g170641 - temp_output_7_0_g170656 );
				float temp_output_765_0_g170634 = saturate( ( ( temp_output_9_0_g170656 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170634 = temp_output_765_0_g170634;
				float lerpResult705_g170634 = lerp( 1.0 , Local_MultiMask767_g170634 , _SecondColorMode);
				float4 lerpResult706_g170634 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170634);
				half3 Local_ColorRGB774_g170634 = (lerpResult706_g170634).rgb;
				half3 Local_Albedo768_g170634 = ( Local_AlbedoRGB771_g170634 * Local_ColorRGB774_g170634 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170648 = 2.0;
				#else
				float staticSwitch1_g170648 = 4.594794;
				#endif
				float3 lerpResult985_g170634 = lerp( Local_Albedo768_g170634 , ( Visual_Albedo527_g170634 * Local_Albedo768_g170634 * staticSwitch1_g170648 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170638) = _SecondMaskTex;
				SamplerState Sampler276_g170638 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170634 = _second_mask_coord_value;
				float4 temp_output_37_0_g170638 = Local_BlendCoords813_g170634;
				half4 Coords276_g170638 = temp_output_37_0_g170638;
				half2 TexCoord276_g170638 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170638 = SampleMain( Texture276_g170638 , Sampler276_g170638 , Coords276_g170638 , TexCoord276_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170638) = _SecondMaskTex;
				SamplerState Sampler275_g170638 = sampler_Linear_Repeat;
				half4 Coords275_g170638 = temp_output_37_0_g170638;
				half2 TexCoord275_g170638 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170638 = SampleExtra( Texture275_g170638 , Sampler275_g170638 , Coords275_g170638 , TexCoord275_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170638) = _SecondMaskTex;
				SamplerState Sampler238_g170638 = sampler_Linear_Repeat;
				half4 Coords238_g170638 = temp_output_37_0_g170638;
				float3 temp_output_279_0_g170638 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170638 = temp_output_279_0_g170638;
				half4 localSamplePlanar2D238_g170638 = SamplePlanar2D( Texture238_g170638 , Sampler238_g170638 , Coords238_g170638 , WorldPosition238_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170638) = _SecondMaskTex;
				SamplerState Sampler246_g170638 = sampler_Linear_Repeat;
				half4 Coords246_g170638 = temp_output_37_0_g170638;
				half3 WorldPosition246_g170638 = temp_output_279_0_g170638;
				float3 temp_output_280_0_g170638 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170638 = temp_output_280_0_g170638;
				half4 localSamplePlanar3D246_g170638 = SamplePlanar3D( Texture246_g170638 , Sampler246_g170638 , Coords246_g170638 , WorldPosition246_g170638 , WorldNormal246_g170638 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170634 = localSampleMain276_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170634 = localSampleExtra275_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170634 = localSamplePlanar2D238_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170634 = localSamplePlanar3D246_g170638;
				#else
				float4 staticSwitch817_g170634 = localSampleMain276_g170638;
				#endif
				half4 Local_MaskTex861_g170634 = staticSwitch817_g170634;
				float clampResult17_g170658 = clamp( (Local_MaskTex861_g170634).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170662 = _SecondMaskRemap.x;
				float temp_output_9_0_g170662 = ( clampResult17_g170658 - temp_output_7_0_g170662 );
				float lerpResult1015_g170634 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170662 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170634 = lerpResult1015_g170634;
				half Visual_Luminosity1041_g170634 = Out_Luminosity4_g170645;
				float clampResult17_g170667 = clamp( Visual_Luminosity1041_g170634 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170668 = _SecondLumaRemap.x;
				float temp_output_9_0_g170668 = ( clampResult17_g170667 - temp_output_7_0_g170668 );
				float lerpResult1036_g170634 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170668 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170634 = lerpResult1036_g170634;
				half3 Visual_NormalWS951_g170634 = Out_NormalWS4_g170645;
				float clampResult17_g170663 = clamp( saturate( (Visual_NormalWS951_g170634).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170665 = _SecondProjRemap.x;
				float temp_output_9_0_g170665 = ( clampResult17_g170663 - temp_output_7_0_g170665 );
				float lerpResult996_g170634 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170665 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170634 = lerpResult996_g170634;
				half4 Model_VertexMasks964_g170634 = Out_VertexData15_g170654;
				float4 break965_g170634 = Model_VertexMasks964_g170634;
				float4 break33_g170659 = _second_vert_mode;
				float temp_output_30_0_g170659 = ( break965_g170634.x * break33_g170659.x );
				float temp_output_29_0_g170659 = ( break965_g170634.y * break33_g170659.y );
				float temp_output_31_0_g170659 = ( break965_g170634.z * break33_g170659.z );
				float temp_output_28_0_g170659 = ( temp_output_30_0_g170659 + temp_output_29_0_g170659 + temp_output_31_0_g170659 + ( break965_g170634.w * break33_g170659.w ) );
				float clampResult17_g170657 = clamp( temp_output_28_0_g170659 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170661 = _SecondMeshRemap.x;
				float temp_output_9_0_g170661 = ( clampResult17_g170657 - temp_output_7_0_g170661 );
				float lerpResult1017_g170634 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170661 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170660 = lerpResult1017_g170634;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170660 = ( temp_output_6_0_g170660 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170660 = temp_output_6_0_g170660;
				#endif
				half Blend_VertMask918_g170634 = staticSwitch14_g170660;
				float localBuildGlobalData204_g170496 = ( 0.0 );
				TVEGlobalData Data204_g170496 = (TVEGlobalData)0;
				half Dummy211_g170496 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170496 = Dummy211_g170496;
				float temp_output_82_0_g170506 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170508 = TVE_CoatLayers[(int)temp_output_82_0_g170506];
				TVEModelData Data15_g170542 = Data16_g170483;
				float Out_Dummy15_g170542 = 0;
				float3 Out_PositionWS15_g170542 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170542 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170542 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170542 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170542 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170542 = float3( 0,0,0 );
				float4 Out_VertexData15_g170542 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170542 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170542 = Data15_g170542.Dummy;
				Out_PositionWS15_g170542 = Data15_g170542.PositionWS;
				Out_PositionWO15_g170542 = Data15_g170542.PositionWO;
				Out_PivotWS15_g170542 = Data15_g170542.PivotWS;
				Out_PivotWO15_g170542 = Data15_g170542.PivotWO;
				Out_NormalWS15_g170542 = Data15_g170542.NormalWS;
				Out_ViewDirWS15_g170542 = Data15_g170542.ViewDirWS;
				Out_VertexData15_g170542 = Data15_g170542.VertexData;
				Out_BoundsData15_g170542 = Data15_g170542.BoundsData;
				}
				half3 Model_PositionWS143_g170496 = Out_PositionWS15_g170542;
				half3 Model_PivotWS145_g170496 = Out_PivotWS15_g170542;
				float3 lerpResult300_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170509 = lerpResult300_g170496;
				float2 temp_output_75_0_g170509 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170509).xz ) );
				float temp_output_82_0_g170509 = temp_output_82_0_g170506;
				float2 temp_output_119_0_g170509 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170509).xz ) );
				float temp_output_7_0_g170514 = 1.0;
				float temp_output_9_0_g170514 = ( saturate( ( distance( Input_Position180_g170509 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170514 );
				float4 lerpResult131_g170509 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170509,temp_output_82_0_g170509), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170509,temp_output_82_0_g170509), 0.0 ) , saturate( ( temp_output_9_0_g170514 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170514 ) ) ));
				float4 temp_output_17_0_g170508 = lerpResult131_g170509;
				float4 temp_output_3_0_g170508 = TVE_CoatParams;
				float4 ifLocalVar18_g170508 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170508 >= 0.5 )
				ifLocalVar18_g170508 = temp_output_17_0_g170508;
				else
				ifLocalVar18_g170508 = temp_output_3_0_g170508;
				float4 lerpResult22_g170508 = lerp( temp_output_3_0_g170508 , temp_output_17_0_g170508 , temp_output_19_0_g170508);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170508 = lerpResult22_g170508;
				#else
				float4 staticSwitch24_g170508 = ifLocalVar18_g170508;
				#endif
				half4 Coat_Params302_g170496 = staticSwitch24_g170508;
				float4 In_CoatParams204_g170496 = Coat_Params302_g170496;
				float temp_output_82_0_g170497 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170499 = TVE_PaintLayers[(int)temp_output_82_0_g170497];
				float3 lerpResult85_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170500 = lerpResult85_g170496;
				float2 temp_output_75_0_g170500 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170500).xz ) );
				float temp_output_82_0_g170500 = temp_output_82_0_g170497;
				float2 temp_output_119_0_g170500 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170500).xz ) );
				float temp_output_7_0_g170505 = 1.0;
				float temp_output_9_0_g170505 = ( saturate( ( distance( Input_Position180_g170500 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170505 );
				float4 lerpResult131_g170500 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170500,temp_output_82_0_g170500), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170500,temp_output_82_0_g170500), 0.0 ) , saturate( ( temp_output_9_0_g170505 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170505 ) ) ));
				float4 temp_output_17_0_g170499 = lerpResult131_g170500;
				float4 temp_output_3_0_g170499 = TVE_PaintParams;
				float4 ifLocalVar18_g170499 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170499 >= 0.5 )
				ifLocalVar18_g170499 = temp_output_17_0_g170499;
				else
				ifLocalVar18_g170499 = temp_output_3_0_g170499;
				float4 lerpResult22_g170499 = lerp( temp_output_3_0_g170499 , temp_output_17_0_g170499 , temp_output_19_0_g170499);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170499 = lerpResult22_g170499;
				#else
				float4 staticSwitch24_g170499 = ifLocalVar18_g170499;
				#endif
				half4 Paint_Params71_g170496 = staticSwitch24_g170499;
				float4 In_PaintParams204_g170496 = Paint_Params71_g170496;
				float temp_output_82_0_g170543 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170545 = TVE_GlowLayers[(int)temp_output_82_0_g170543];
				float3 lerpResult247_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170546 = lerpResult247_g170496;
				float2 temp_output_75_0_g170546 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170546).xz ) );
				float temp_output_82_0_g170546 = temp_output_82_0_g170543;
				float2 temp_output_119_0_g170546 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170546).xz ) );
				float temp_output_7_0_g170551 = 1.0;
				float temp_output_9_0_g170551 = ( saturate( ( distance( Input_Position180_g170546 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170551 );
				float4 lerpResult131_g170546 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170546,temp_output_82_0_g170546), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170546,temp_output_82_0_g170546), 0.0 ) , saturate( ( temp_output_9_0_g170551 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170551 ) ) ));
				float4 temp_output_17_0_g170545 = lerpResult131_g170546;
				float4 temp_output_3_0_g170545 = TVE_GlowParams;
				float4 ifLocalVar18_g170545 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170545 >= 0.5 )
				ifLocalVar18_g170545 = temp_output_17_0_g170545;
				else
				ifLocalVar18_g170545 = temp_output_3_0_g170545;
				float4 lerpResult22_g170545 = lerp( temp_output_3_0_g170545 , temp_output_17_0_g170545 , temp_output_19_0_g170545);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170545 = lerpResult22_g170545;
				#else
				float4 staticSwitch24_g170545 = ifLocalVar18_g170545;
				#endif
				half4 Glow_Params248_g170496 = staticSwitch24_g170545;
				float4 In_GlowParams204_g170496 = Glow_Params248_g170496;
				float temp_output_132_0_g170524 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170526 = TVE_AtmoLayers[(int)temp_output_132_0_g170524];
				float3 lerpResult104_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170527 = lerpResult104_g170496;
				float2 temp_output_75_0_g170527 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170527).xz ) );
				float temp_output_82_0_g170527 = temp_output_132_0_g170524;
				float2 temp_output_119_0_g170527 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170527).xz ) );
				float temp_output_7_0_g170532 = 1.0;
				float temp_output_9_0_g170532 = ( saturate( ( distance( Input_Position180_g170527 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170532 );
				float4 lerpResult131_g170527 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170527,temp_output_82_0_g170527), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170527,temp_output_82_0_g170527), 0.0 ) , saturate( ( temp_output_9_0_g170532 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170532 ) ) ));
				float4 temp_output_17_0_g170526 = lerpResult131_g170527;
				float4 temp_output_3_0_g170526 = TVE_AtmoParams;
				float4 ifLocalVar18_g170526 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170526 >= 0.5 )
				ifLocalVar18_g170526 = temp_output_17_0_g170526;
				else
				ifLocalVar18_g170526 = temp_output_3_0_g170526;
				float4 lerpResult22_g170526 = lerp( temp_output_3_0_g170526 , temp_output_17_0_g170526 , temp_output_19_0_g170526);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170526 = lerpResult22_g170526;
				#else
				float4 staticSwitch24_g170526 = ifLocalVar18_g170526;
				#endif
				half4 Atmo_Params80_g170496 = staticSwitch24_g170526;
				float4 In_AtmoParams204_g170496 = Atmo_Params80_g170496;
				float temp_output_132_0_g170533 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170535 = TVE_FadeLayers[(int)temp_output_132_0_g170533];
				float3 lerpResult382_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFadePivotValue);
				half3 Input_Position180_g170536 = lerpResult382_g170496;
				float2 temp_output_75_0_g170536 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170536).xz ) );
				float temp_output_82_0_g170536 = temp_output_132_0_g170533;
				float2 temp_output_119_0_g170536 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170536).xz ) );
				float temp_output_7_0_g170541 = 1.0;
				float temp_output_9_0_g170541 = ( saturate( ( distance( Input_Position180_g170536 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170541 );
				float4 lerpResult131_g170536 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170536,temp_output_82_0_g170536), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170536,temp_output_82_0_g170536), 0.0 ) , saturate( ( temp_output_9_0_g170541 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170541 ) ) ));
				float4 temp_output_17_0_g170535 = lerpResult131_g170536;
				float4 temp_output_3_0_g170535 = TVE_FadeParams;
				float4 ifLocalVar18_g170535 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170535 >= 0.5 )
				ifLocalVar18_g170535 = temp_output_17_0_g170535;
				else
				ifLocalVar18_g170535 = temp_output_3_0_g170535;
				float4 lerpResult22_g170535 = lerp( temp_output_3_0_g170535 , temp_output_17_0_g170535 , temp_output_19_0_g170535);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170535 = lerpResult22_g170535;
				#else
				float4 staticSwitch24_g170535 = ifLocalVar18_g170535;
				#endif
				half4 Fade_Params387_g170496 = staticSwitch24_g170535;
				float4 In_FadeParams204_g170496 = Fade_Params387_g170496;
				float temp_output_130_0_g170515 = _GlobalFormLayerValue;
				float temp_output_19_0_g170517 = TVE_FormLayers[(int)temp_output_130_0_g170515];
				float3 lerpResult168_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFormPivotValue);
				half3 Input_Position180_g170518 = lerpResult168_g170496;
				float2 temp_output_75_0_g170518 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170518).xz ) );
				float temp_output_82_0_g170518 = temp_output_130_0_g170515;
				float2 temp_output_119_0_g170518 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170518).xz ) );
				float temp_output_7_0_g170523 = 1.0;
				float temp_output_9_0_g170523 = ( saturate( ( distance( Input_Position180_g170518 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170523 );
				float4 lerpResult131_g170518 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170518,temp_output_82_0_g170518), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170518,temp_output_82_0_g170518), 0.0 ) , saturate( ( temp_output_9_0_g170523 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170523 ) ) ));
				float4 temp_output_17_0_g170517 = lerpResult131_g170518;
				float4 temp_output_3_0_g170517 = TVE_FormParams;
				float4 ifLocalVar18_g170517 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170517 >= 0.5 )
				ifLocalVar18_g170517 = temp_output_17_0_g170517;
				else
				ifLocalVar18_g170517 = temp_output_3_0_g170517;
				float4 lerpResult22_g170517 = lerp( temp_output_3_0_g170517 , temp_output_17_0_g170517 , temp_output_19_0_g170517);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170517 = lerpResult22_g170517;
				#else
				float4 staticSwitch24_g170517 = ifLocalVar18_g170517;
				#endif
				half4 Form_Params112_g170496 = staticSwitch24_g170517;
				float4 In_FormParams204_g170496 = Form_Params112_g170496;
				float temp_output_136_0_g170561 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170563 = TVE_FlowLayers[(int)temp_output_136_0_g170561];
				float3 lerpResult400_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170564 = lerpResult400_g170496;
				float2 temp_output_75_0_g170564 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170564).xz ) );
				float temp_output_82_0_g170564 = temp_output_136_0_g170561;
				float2 temp_output_119_0_g170564 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170564).xz ) );
				float temp_output_7_0_g170569 = 1.0;
				float temp_output_9_0_g170569 = ( saturate( ( distance( Input_Position180_g170564 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170569 );
				float4 lerpResult131_g170564 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170564,temp_output_82_0_g170564), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170564,temp_output_82_0_g170564), 0.0 ) , saturate( ( temp_output_9_0_g170569 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170569 ) ) ));
				float4 temp_output_17_0_g170563 = lerpResult131_g170564;
				float4 temp_output_3_0_g170563 = TVE_FlowParams;
				float4 ifLocalVar18_g170563 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170563 >= 0.5 )
				ifLocalVar18_g170563 = temp_output_17_0_g170563;
				else
				ifLocalVar18_g170563 = temp_output_3_0_g170563;
				float4 lerpResult22_g170563 = lerp( temp_output_3_0_g170563 , temp_output_17_0_g170563 , temp_output_19_0_g170563);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170563 = lerpResult22_g170563;
				#else
				float4 staticSwitch24_g170563 = ifLocalVar18_g170563;
				#endif
				half4 Flow_Params405_g170496 = staticSwitch24_g170563;
				float4 In_FlowParams204_g170496 = Flow_Params405_g170496;
				{
				Data204_g170496.Dummy = In_Dummy204_g170496;
				Data204_g170496.CoatParams = In_CoatParams204_g170496;
				Data204_g170496.PaintParams = In_PaintParams204_g170496;
				Data204_g170496.GlowParams = In_GlowParams204_g170496;
				Data204_g170496.AtmoParams = In_AtmoParams204_g170496;
				Data204_g170496.FadeParams = In_FadeParams204_g170496;
				Data204_g170496.FormParams= In_FormParams204_g170496;
				Data204_g170496.FlowParams = In_FlowParams204_g170496;
				}
				TVEGlobalData Data15_g170644 = Data204_g170496;
				float Out_Dummy15_g170644 = 0;
				float4 Out_CoatParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170644 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170644 = Data15_g170644.Dummy;
				Out_CoatParams15_g170644 = Data15_g170644.CoatParams;
				Out_PaintParams15_g170644 = Data15_g170644.PaintParams;
				Out_GlowParams15_g170644 = Data15_g170644.GlowParams;
				Out_AtmoParams15_g170644= Data15_g170644.AtmoParams;
				Out_FadeParams15_g170644= Data15_g170644.FadeParams;
				Out_FormParams15_g170644 = Data15_g170644.FormParams;
				Out_FlowParams15_g170644 = Data15_g170644.FlowParams;
				}
				half4 Global_CoatParams975_g170634 = Out_CoatParams15_g170644;
				float temp_output_6_0_g170669 = (Global_CoatParams975_g170634).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170669 = ( temp_output_6_0_g170669 + ( _SecondElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170669 = temp_output_6_0_g170669;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170634 = staticSwitch14_g170669;
				#else
				float staticSwitch971_g170634 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170634 = lerp( 1.0 , staticSwitch971_g170634 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170634 = lerpResult1013_g170634;
				float clampResult17_g170664 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170634 * Blend_LumaMask1033_g170634 * Blend_ProjMask434_g170634 * Blend_VertMask918_g170634 * Blend_GlobalMask972_g170634 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170666 = _SecondBlendRemap.x;
				float temp_output_9_0_g170666 = ( clampResult17_g170664 - temp_output_7_0_g170666 );
				half Blend_Mask412_g170634 = ( saturate( ( ( temp_output_9_0_g170666 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170634 = lerp( Visual_Albedo527_g170634 , lerpResult985_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170634 = lerpResult403_g170634;
				#else
				float3 staticSwitch415_g170634 = Visual_Albedo527_g170634;
				#endif
				half3 Final_Albedo601_g170634 = staticSwitch415_g170634;
				float3 In_Albedo3_g170655 = Final_Albedo601_g170634;
				float3 In_AlbedoRaw3_g170655 = Final_Albedo601_g170634;
				half2 Visual_NormalTS529_g170634 = Out_NormalTS4_g170645;
				float2 lerpResult40_g170646 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170634 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170636) = _SecondNormalTex;
				float localFilterTexture29_g170652 = ( 0.0 );
				SamplerState SS29_g170652 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170652 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170652 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170652 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170652 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170652 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170652 = SamplerDefault29_g170652;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170652 = SamplerDefault29_g170652;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170652 = SamplerPoint29_g170652;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170652 = SamplerLow29_g170652;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170652 = SamplerMedium29_g170652;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170652 = SamplerHigh29_g170652;
				#endif
				}
				SamplerState Sampler276_g170636 = SS29_g170652;
				float4 temp_output_37_0_g170636 = Local_LayerCoords790_g170634;
				half4 Coords276_g170636 = temp_output_37_0_g170636;
				half2 TexCoord276_g170636 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170636 = SampleMain( Texture276_g170636 , Sampler276_g170636 , Coords276_g170636 , TexCoord276_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170636) = _SecondNormalTex;
				SamplerState Sampler275_g170636 = SS29_g170652;
				half4 Coords275_g170636 = temp_output_37_0_g170636;
				half2 TexCoord275_g170636 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170636 = SampleExtra( Texture275_g170636 , Sampler275_g170636 , Coords275_g170636 , TexCoord275_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170636) = _SecondNormalTex;
				SamplerState Sampler238_g170636 = SS29_g170652;
				half4 Coords238_g170636 = temp_output_37_0_g170636;
				float3 temp_output_279_0_g170636 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170636 = temp_output_279_0_g170636;
				half4 localSamplePlanar2D238_g170636 = SamplePlanar2D( Texture238_g170636 , Sampler238_g170636 , Coords238_g170636 , WorldPosition238_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170636) = _SecondNormalTex;
				SamplerState Sampler246_g170636 = SS29_g170652;
				half4 Coords246_g170636 = temp_output_37_0_g170636;
				half3 WorldPosition246_g170636 = temp_output_279_0_g170636;
				float3 temp_output_280_0_g170636 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170636 = temp_output_280_0_g170636;
				half4 localSamplePlanar3D246_g170636 = SamplePlanar3D( Texture246_g170636 , Sampler246_g170636 , Coords246_g170636 , WorldPosition246_g170636 , WorldNormal246_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170636) = _SecondNormalTex;
				SamplerState Sampler234_g170636 = SS29_g170652;
				float4 Coords234_g170636 = temp_output_37_0_g170636;
				float3 WorldPosition234_g170636 = temp_output_279_0_g170636;
				float4 localSampleStochastic2D234_g170636 = SampleStochastic2D( Texture234_g170636 , Sampler234_g170636 , Coords234_g170636 , WorldPosition234_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170636) = _SecondNormalTex;
				SamplerState Sampler263_g170636 = SS29_g170652;
				half4 Coords263_g170636 = temp_output_37_0_g170636;
				half3 WorldPosition263_g170636 = temp_output_279_0_g170636;
				half3 WorldNormal263_g170636 = temp_output_280_0_g170636;
				half4 localSampleStochastic3D263_g170636 = SampleStochastic3D( Texture263_g170636 , Sampler263_g170636 , Coords263_g170636 , WorldPosition263_g170636 , WorldNormal263_g170636 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170634 = localSampleMain276_g170636;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170634 = localSampleExtra275_g170636;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170634 = localSamplePlanar2D238_g170636;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170634 = localSamplePlanar3D246_g170636;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170634 = localSampleStochastic2D234_g170636;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170634 = localSampleStochastic3D263_g170636;
				#else
				float4 staticSwitch698_g170634 = localSampleMain276_g170636;
				#endif
				half4 Local_NormalTex776_g170634 = staticSwitch698_g170634;
				half4 Normal_Packed45_g170639 = Local_NormalTex776_g170634;
				float2 appendResult58_g170639 = (float2(( (Normal_Packed45_g170639).x * (Normal_Packed45_g170639).w ) , (Normal_Packed45_g170639).y));
				half2 Normal_Default50_g170639 = appendResult58_g170639;
				half2 Normal_ASTC41_g170639 = (Normal_Packed45_g170639).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170639 = Normal_ASTC41_g170639;
				#else
				float2 staticSwitch38_g170639 = Normal_Default50_g170639;
				#endif
				half2 Normal_NO_DTX544_g170639 = (Normal_Packed45_g170639).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170639 = Normal_NO_DTX544_g170639;
				#else
				float2 staticSwitch37_g170639 = staticSwitch38_g170639;
				#endif
				float2 temp_output_724_0_g170634 = ( (staticSwitch37_g170639*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170640 = temp_output_724_0_g170634;
				float2 break71_g170640 = Normal_Planar45_g170640;
				float3 appendResult72_g170640 = (float3(break71_g170640.x , 0.0 , break71_g170640.y));
				float2 temp_output_858_0_g170634 = (mul( ase_worldToTangent, appendResult72_g170640 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#else
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#endif
				half2 Local_NormalTS729_g170634 = staticSwitch727_g170634;
				float2 temp_output_36_0_g170646 = ( lerpResult40_g170646 + Local_NormalTS729_g170634 );
				float2 lerpResult405_g170634 = lerp( Visual_NormalTS529_g170634 , temp_output_36_0_g170646 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170634 = lerpResult405_g170634;
				#else
				float2 staticSwitch418_g170634 = Visual_NormalTS529_g170634;
				#endif
				half2 Final_NormalTS612_g170634 = staticSwitch418_g170634;
				float2 In_NormalTS3_g170655 = Final_NormalTS612_g170634;
				float3 appendResult68_g170647 = (float3(Final_NormalTS612_g170634 , 1.0));
				float3 tanNormal74_g170647 = appendResult68_g170647;
				float3 worldNormal74_g170647 = normalize( float3(dot(tanToWorld0,tanNormal74_g170647), dot(tanToWorld1,tanNormal74_g170647), dot(tanToWorld2,tanNormal74_g170647)) );
				half3 Final_NormalWS950_g170634 = worldNormal74_g170647;
				float3 In_NormalWS3_g170655 = Final_NormalWS950_g170634;
				half4 Visual_Shader531_g170634 = Out_Shader4_g170645;
				float4 lerpResult994_g170634 = lerp( Local_Masks750_g170634 , ( Visual_Shader531_g170634 * Local_Masks750_g170634 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170634 = lerp( Visual_Shader531_g170634 , lerpResult994_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170634 = lerpResult440_g170634;
				#else
				float4 staticSwitch451_g170634 = Visual_Shader531_g170634;
				#endif
				half4 Final_Masks613_g170634 = staticSwitch451_g170634;
				float4 In_Shader3_g170655 = Final_Masks613_g170634;
				float4 In_Emissive3_g170655 = Out_Emissive4_g170645;
				float3 temp_output_3_0_g170649 = Final_Albedo601_g170634;
				float dotResult20_g170649 = dot( temp_output_3_0_g170649 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170634 = dotResult20_g170649;
				float In_Grayscale3_g170655 = Final_Grayscale615_g170634;
				float clampResult651_g170634 = clamp( saturate( ( Final_Grayscale615_g170634 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170634 = clampResult651_g170634;
				float In_Luminosity3_g170655 = Final_Luminosity652_g170634;
				half Visual_MultiMask547_g170634 = Out_MultiMask4_g170645;
				float lerpResult477_g170634 = lerp( Visual_MultiMask547_g170634 , Local_MultiMask767_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch482_g170634 = lerpResult477_g170634;
				#else
				float staticSwitch482_g170634 = Visual_MultiMask547_g170634;
				#endif
				half Final_MultiMask572_g170634 = staticSwitch482_g170634;
				float In_MultiMask3_g170655 = Final_MultiMask572_g170634;
				half Visual_AlphaClip559_g170634 = Out_AlphaClip4_g170645;
				float temp_output_718_0_g170634 = (Local_AlbedoTex777_g170634).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170634 = ( temp_output_718_0_g170634 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170634 = temp_output_718_0_g170634;
				#endif
				half Local_AlphaClip772_g170634 = staticSwitch932_g170634;
				float lerpResult448_g170634 = lerp( Visual_AlphaClip559_g170634 , Local_AlphaClip772_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch564_g170634 = lerpResult448_g170634;
				#else
				float staticSwitch564_g170634 = Visual_AlphaClip559_g170634;
				#endif
				half Final_AlphaClip602_g170634 = staticSwitch564_g170634;
				float In_AlphaClip3_g170655 = Final_AlphaClip602_g170634;
				half Visual_AlphaFade588_g170634 = Out_AlphaFade4_g170645;
				half Local_AlphaFade773_g170634 = (lerpResult706_g170634).a;
				float lerpResult604_g170634 = lerp( Visual_AlphaFade588_g170634 , Local_AlphaFade773_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch608_g170634 = lerpResult604_g170634;
				#else
				float staticSwitch608_g170634 = Visual_AlphaFade588_g170634;
				#endif
				half Final_AlphaFade611_g170634 = staticSwitch608_g170634;
				float In_AlphaFade3_g170655 = Final_AlphaFade611_g170634;
				float3 In_Translucency3_g170655 = Out_Translucency4_g170645;
				float In_Transmission3_g170655 = Out_Transmission4_g170645;
				float In_Thickness3_g170655 = Out_Thickness4_g170645;
				float In_Diffusion3_g170655 = Out_Diffusion4_g170645;
				{
				Data3_g170655.Dummy = In_Dummy3_g170655;
				Data3_g170655.Albedo = In_Albedo3_g170655;
				Data3_g170655.AlbedoRaw = In_AlbedoRaw3_g170655;
				Data3_g170655.NormalTS = In_NormalTS3_g170655;
				Data3_g170655.NormalWS = In_NormalWS3_g170655;
				Data3_g170655.Shader = In_Shader3_g170655;
				Data3_g170655.Emissive= In_Emissive3_g170655;
				Data3_g170655.MultiMask = In_MultiMask3_g170655;
				Data3_g170655.Grayscale = In_Grayscale3_g170655;
				Data3_g170655.Luminosity = In_Luminosity3_g170655;
				Data3_g170655.AlphaClip = In_AlphaClip3_g170655;
				Data3_g170655.AlphaFade = In_AlphaFade3_g170655;
				Data3_g170655.Translucency = In_Translucency3_g170655;
				Data3_g170655.Transmission = In_Transmission3_g170655;
				Data3_g170655.Thickness = In_Thickness3_g170655;
				Data3_g170655.Diffusion = In_Diffusion3_g170655;
				}
				TVEVisualData Data4_g170686 = Data3_g170655;
				float Out_Dummy4_g170686 = 0;
				float3 Out_Albedo4_g170686 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170686 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170686 = float2( 0,0 );
				float3 Out_NormalWS4_g170686 = float3( 0,0,0 );
				float4 Out_Shader4_g170686 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170686 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170686 = 0;
				float Out_Grayscale4_g170686 = 0;
				float Out_Luminosity4_g170686 = 0;
				float Out_AlphaClip4_g170686 = 0;
				float Out_AlphaFade4_g170686 = 0;
				float3 Out_Translucency4_g170686 = float3( 0,0,0 );
				float Out_Transmission4_g170686 = 0;
				float Out_Thickness4_g170686 = 0;
				float Out_Diffusion4_g170686 = 0;
				{
				Out_Dummy4_g170686 = Data4_g170686.Dummy;
				Out_Albedo4_g170686 = Data4_g170686.Albedo;
				Out_AlbedoRaw4_g170686 = Data4_g170686.AlbedoRaw;
				Out_NormalTS4_g170686 = Data4_g170686.NormalTS;
				Out_NormalWS4_g170686 = Data4_g170686.NormalWS;
				Out_Shader4_g170686 = Data4_g170686.Shader;
				Out_Emissive4_g170686= Data4_g170686.Emissive;
				Out_MultiMask4_g170686 = Data4_g170686.MultiMask;
				Out_Grayscale4_g170686 = Data4_g170686.Grayscale;
				Out_Luminosity4_g170686= Data4_g170686.Luminosity;
				Out_AlphaClip4_g170686 = Data4_g170686.AlphaClip;
				Out_AlphaFade4_g170686 = Data4_g170686.AlphaFade;
				Out_Translucency4_g170686 = Data4_g170686.Translucency;
				Out_Transmission4_g170686 = Data4_g170686.Transmission;
				Out_Thickness4_g170686 = Data4_g170686.Thickness;
				Out_Diffusion4_g170686 = Data4_g170686.Diffusion;
				}
				half3 Visual_Albedo527_g170678 = Out_Albedo4_g170686;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170679) = _ThirdAlbedoTex;
				float localFilterTexture19_g170695 = ( 0.0 );
				SamplerState SS19_g170695 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170695 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170695 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170695 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170695 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170695 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170695 = SamplerDefault19_g170695;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170695 = SamplerDefault19_g170695;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170695 = SamplerPoint19_g170695;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170695 = SamplerLow19_g170695;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170695 = SamplerMedium19_g170695;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170695 = SamplerHigh19_g170695;
				#endif
				}
				SamplerState Sampler276_g170679 = SS19_g170695;
				half4 Local_LayerCoords790_g170678 = _third_coord_value;
				float4 temp_output_37_0_g170679 = Local_LayerCoords790_g170678;
				half4 Coords276_g170679 = temp_output_37_0_g170679;
				half2 TexCoord276_g170679 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170679 = SampleMain( Texture276_g170679 , Sampler276_g170679 , Coords276_g170679 , TexCoord276_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170679 = SS19_g170695;
				half4 Coords275_g170679 = temp_output_37_0_g170679;
				half2 TexCoord275_g170679 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170679 = SampleExtra( Texture275_g170679 , Sampler275_g170679 , Coords275_g170679 , TexCoord275_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170679 = SS19_g170695;
				half4 Coords238_g170679 = temp_output_37_0_g170679;
				TVEModelData Data15_g170698 = Data16_g170483;
				float Out_Dummy15_g170698 = 0;
				float3 Out_PositionWS15_g170698 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170698 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170698 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170698 = float3( 0,0,0 );
				float4 Out_VertexData15_g170698 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170698 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170698 = Data15_g170698.Dummy;
				Out_PositionWS15_g170698 = Data15_g170698.PositionWS;
				Out_PositionWO15_g170698 = Data15_g170698.PositionWO;
				Out_PivotWS15_g170698 = Data15_g170698.PivotWS;
				Out_PivotWO15_g170698 = Data15_g170698.PivotWO;
				Out_NormalWS15_g170698 = Data15_g170698.NormalWS;
				Out_ViewDirWS15_g170698 = Data15_g170698.ViewDirWS;
				Out_VertexData15_g170698 = Data15_g170698.VertexData;
				Out_BoundsData15_g170698 = Data15_g170698.BoundsData;
				}
				half3 Model_PositionWO636_g170678 = Out_PositionWO15_g170698;
				float3 temp_output_279_0_g170679 = Model_PositionWO636_g170678;
				half3 WorldPosition238_g170679 = temp_output_279_0_g170679;
				half4 localSamplePlanar2D238_g170679 = SamplePlanar2D( Texture238_g170679 , Sampler238_g170679 , Coords238_g170679 , WorldPosition238_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170679 = SS19_g170695;
				half4 Coords246_g170679 = temp_output_37_0_g170679;
				half3 WorldPosition246_g170679 = temp_output_279_0_g170679;
				half3 Model_NormalWS869_g170678 = Out_NormalWS15_g170698;
				float3 temp_output_280_0_g170679 = Model_NormalWS869_g170678;
				half3 WorldNormal246_g170679 = temp_output_280_0_g170679;
				half4 localSamplePlanar3D246_g170679 = SamplePlanar3D( Texture246_g170679 , Sampler246_g170679 , Coords246_g170679 , WorldPosition246_g170679 , WorldNormal246_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170679 = SS19_g170695;
				float4 Coords234_g170679 = temp_output_37_0_g170679;
				float3 WorldPosition234_g170679 = temp_output_279_0_g170679;
				float4 localSampleStochastic2D234_g170679 = SampleStochastic2D( Texture234_g170679 , Sampler234_g170679 , Coords234_g170679 , WorldPosition234_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170679 = SS19_g170695;
				half4 Coords263_g170679 = temp_output_37_0_g170679;
				half3 WorldPosition263_g170679 = temp_output_279_0_g170679;
				half3 WorldNormal263_g170679 = temp_output_280_0_g170679;
				half4 localSampleStochastic3D263_g170679 = SampleStochastic3D( Texture263_g170679 , Sampler263_g170679 , Coords263_g170679 , WorldPosition263_g170679 , WorldNormal263_g170679 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170678 = localSampleMain276_g170679;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170678 = localSampleExtra275_g170679;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170678 = localSamplePlanar2D238_g170679;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170678 = localSamplePlanar3D246_g170679;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170678 = localSampleStochastic2D234_g170679;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170678 = localSampleStochastic3D263_g170679;
				#else
				float4 staticSwitch693_g170678 = localSampleMain276_g170679;
				#endif
				half4 Local_AlbedoTex777_g170678 = staticSwitch693_g170678;
				float3 lerpResult716_g170678 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170678).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170678 = lerpResult716_g170678;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170681) = _ThirdShaderTex;
				float localFilterTexture30_g170697 = ( 0.0 );
				SamplerState SS30_g170697 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170697 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170697 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170697 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170697 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170697 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170697 = SamplerDefault30_g170697;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170697 = SamplerDefault30_g170697;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170697 = SamplerPoint30_g170697;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170697 = SamplerLow30_g170697;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170697 = SamplerMedium30_g170697;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170697 = SamplerHigh30_g170697;
				#endif
				}
				SamplerState Sampler276_g170681 = SS30_g170697;
				float4 temp_output_37_0_g170681 = Local_LayerCoords790_g170678;
				half4 Coords276_g170681 = temp_output_37_0_g170681;
				half2 TexCoord276_g170681 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170681 = SampleMain( Texture276_g170681 , Sampler276_g170681 , Coords276_g170681 , TexCoord276_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170681) = _ThirdShaderTex;
				SamplerState Sampler275_g170681 = SS30_g170697;
				half4 Coords275_g170681 = temp_output_37_0_g170681;
				half2 TexCoord275_g170681 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170681 = SampleExtra( Texture275_g170681 , Sampler275_g170681 , Coords275_g170681 , TexCoord275_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170681) = _ThirdShaderTex;
				SamplerState Sampler238_g170681 = SS30_g170697;
				half4 Coords238_g170681 = temp_output_37_0_g170681;
				float3 temp_output_279_0_g170681 = Model_PositionWO636_g170678;
				half3 WorldPosition238_g170681 = temp_output_279_0_g170681;
				half4 localSamplePlanar2D238_g170681 = SamplePlanar2D( Texture238_g170681 , Sampler238_g170681 , Coords238_g170681 , WorldPosition238_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170681) = _ThirdShaderTex;
				SamplerState Sampler246_g170681 = SS30_g170697;
				half4 Coords246_g170681 = temp_output_37_0_g170681;
				half3 WorldPosition246_g170681 = temp_output_279_0_g170681;
				float3 temp_output_280_0_g170681 = Model_NormalWS869_g170678;
				half3 WorldNormal246_g170681 = temp_output_280_0_g170681;
				half4 localSamplePlanar3D246_g170681 = SamplePlanar3D( Texture246_g170681 , Sampler246_g170681 , Coords246_g170681 , WorldPosition246_g170681 , WorldNormal246_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170681) = _ThirdShaderTex;
				SamplerState Sampler234_g170681 = SS30_g170697;
				float4 Coords234_g170681 = temp_output_37_0_g170681;
				float3 WorldPosition234_g170681 = temp_output_279_0_g170681;
				float4 localSampleStochastic2D234_g170681 = SampleStochastic2D( Texture234_g170681 , Sampler234_g170681 , Coords234_g170681 , WorldPosition234_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170681) = _ThirdShaderTex;
				SamplerState Sampler263_g170681 = SS30_g170697;
				half4 Coords263_g170681 = temp_output_37_0_g170681;
				half3 WorldPosition263_g170681 = temp_output_279_0_g170681;
				half3 WorldNormal263_g170681 = temp_output_280_0_g170681;
				half4 localSampleStochastic3D263_g170681 = SampleStochastic3D( Texture263_g170681 , Sampler263_g170681 , Coords263_g170681 , WorldPosition263_g170681 , WorldNormal263_g170681 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170678 = localSampleMain276_g170681;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170678 = localSampleExtra275_g170681;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170678 = localSamplePlanar2D238_g170681;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170678 = localSamplePlanar3D246_g170681;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170678 = localSampleStochastic2D234_g170681;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170678 = localSampleStochastic3D263_g170681;
				#else
				float4 staticSwitch722_g170678 = localSampleMain276_g170681;
				#endif
				half4 Local_ShaderTex775_g170678 = staticSwitch722_g170678;
				float lerpResult739_g170678 = lerp( 1.0 , (Local_ShaderTex775_g170678).y , _ThirdOcclusionValue);
				float4 appendResult749_g170678 = (float4(( (Local_ShaderTex775_g170678).x * _ThirdMetallicValue ) , lerpResult739_g170678 , (Local_ShaderTex775_g170678).z , ( (Local_ShaderTex775_g170678).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170678 = appendResult749_g170678;
				float clampResult17_g170684 = clamp( (Local_Masks750_g170678).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170699 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170699 = ( clampResult17_g170684 - temp_output_7_0_g170699 );
				float temp_output_765_0_g170678 = saturate( ( ( temp_output_9_0_g170699 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170678 = temp_output_765_0_g170678;
				float lerpResult705_g170678 = lerp( 1.0 , Local_MultiMask767_g170678 , _ThirdColorMode);
				float4 lerpResult706_g170678 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170678);
				half3 Local_ColorRGB774_g170678 = (lerpResult706_g170678).rgb;
				half3 Local_Albedo768_g170678 = ( Local_AlbedoRGB771_g170678 * Local_ColorRGB774_g170678 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170691 = 2.0;
				#else
				float staticSwitch1_g170691 = 4.594794;
				#endif
				float3 lerpResult985_g170678 = lerp( Local_Albedo768_g170678 , ( Visual_Albedo527_g170678 * Local_Albedo768_g170678 * staticSwitch1_g170691 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170693) = _ThirdMaskTex;
				SamplerState Sampler276_g170693 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170678 = _third_mask_coord_value;
				float4 temp_output_37_0_g170693 = Local_MaskCoords813_g170678;
				half4 Coords276_g170693 = temp_output_37_0_g170693;
				half2 TexCoord276_g170693 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170693 = SampleMain( Texture276_g170693 , Sampler276_g170693 , Coords276_g170693 , TexCoord276_g170693 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170693) = _ThirdMaskTex;
				SamplerState Sampler275_g170693 = sampler_Linear_Repeat;
				half4 Coords275_g170693 = temp_output_37_0_g170693;
				half2 TexCoord275_g170693 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170693 = SampleExtra( Texture275_g170693 , Sampler275_g170693 , Coords275_g170693 , TexCoord275_g170693 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170693) = _ThirdMaskTex;
				SamplerState Sampler238_g170693 = sampler_Linear_Repeat;
				half4 Coords238_g170693 = temp_output_37_0_g170693;
				float3 temp_output_279_0_g170693 = Model_PositionWO636_g170678;
				half3 WorldPosition238_g170693 = temp_output_279_0_g170693;
				half4 localSamplePlanar2D238_g170693 = SamplePlanar2D( Texture238_g170693 , Sampler238_g170693 , Coords238_g170693 , WorldPosition238_g170693 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170693) = _ThirdMaskTex;
				SamplerState Sampler246_g170693 = sampler_Linear_Repeat;
				half4 Coords246_g170693 = temp_output_37_0_g170693;
				half3 WorldPosition246_g170693 = temp_output_279_0_g170693;
				float3 temp_output_280_0_g170693 = Model_NormalWS869_g170678;
				half3 WorldNormal246_g170693 = temp_output_280_0_g170693;
				half4 localSamplePlanar3D246_g170693 = SamplePlanar3D( Texture246_g170693 , Sampler246_g170693 , Coords246_g170693 , WorldPosition246_g170693 , WorldNormal246_g170693 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170678 = localSampleMain276_g170693;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170678 = localSampleExtra275_g170693;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170678 = localSamplePlanar2D238_g170693;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170678 = localSamplePlanar3D246_g170693;
				#else
				float4 staticSwitch817_g170678 = localSampleMain276_g170693;
				#endif
				half4 Local_MaskTex861_g170678 = staticSwitch817_g170678;
				float clampResult17_g170701 = clamp( (Local_MaskTex861_g170678).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170705 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170705 = ( clampResult17_g170701 - temp_output_7_0_g170705 );
				float lerpResult1028_g170678 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170705 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170678 = lerpResult1028_g170678;
				half Visual_Luminosity1049_g170678 = Out_Luminosity4_g170686;
				float clampResult17_g170710 = clamp( Visual_Luminosity1049_g170678 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170711 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170711 = ( clampResult17_g170710 - temp_output_7_0_g170711 );
				float lerpResult1040_g170678 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170711 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170678 = lerpResult1040_g170678;
				half4 Model_VertexMasks960_g170678 = Out_VertexData15_g170698;
				float4 break961_g170678 = Model_VertexMasks960_g170678;
				float4 break33_g170702 = _third_vert_mode;
				float temp_output_30_0_g170702 = ( break961_g170678.x * break33_g170702.x );
				float temp_output_29_0_g170702 = ( break961_g170678.y * break33_g170702.y );
				float temp_output_31_0_g170702 = ( break961_g170678.z * break33_g170702.z );
				float temp_output_28_0_g170702 = ( temp_output_30_0_g170702 + temp_output_29_0_g170702 + temp_output_31_0_g170702 + ( break961_g170678.w * break33_g170702.w ) );
				float clampResult17_g170700 = clamp( temp_output_28_0_g170702 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170704 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170704 = ( clampResult17_g170700 - temp_output_7_0_g170704 );
				float lerpResult1026_g170678 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170704 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170703 = lerpResult1026_g170678;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170703 = ( temp_output_6_0_g170703 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170703 = temp_output_6_0_g170703;
				#endif
				half Blend_VertMask913_g170678 = staticSwitch14_g170703;
				half3 Visual_NormalWS953_g170678 = Out_NormalWS4_g170686;
				float clampResult17_g170706 = clamp( saturate( (Visual_NormalWS953_g170678).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170708 = _ThirdProjRemap.x;
				float temp_output_9_0_g170708 = ( clampResult17_g170706 - temp_output_7_0_g170708 );
				float lerpResult1004_g170678 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170708 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170678 = lerpResult1004_g170678;
				TVEGlobalData Data15_g170688 = Data204_g170496;
				float Out_Dummy15_g170688 = 0;
				float4 Out_CoatParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170688 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170688 = Data15_g170688.Dummy;
				Out_CoatParams15_g170688 = Data15_g170688.CoatParams;
				Out_PaintParams15_g170688 = Data15_g170688.PaintParams;
				Out_GlowParams15_g170688 = Data15_g170688.GlowParams;
				Out_AtmoParams15_g170688= Data15_g170688.AtmoParams;
				Out_FadeParams15_g170688= Data15_g170688.FadeParams;
				Out_FormParams15_g170688 = Data15_g170688.FormParams;
				Out_FlowParams15_g170688 = Data15_g170688.FlowParams;
				}
				half4 Global_CoatParams972_g170678 = Out_CoatParams15_g170688;
				float temp_output_6_0_g170712 = (Global_CoatParams972_g170678).y;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170712 = ( temp_output_6_0_g170712 + ( _ThirdElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170712 = temp_output_6_0_g170712;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170678 = staticSwitch14_g170712;
				#else
				float staticSwitch1056_g170678 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170678 = lerp( 1.0 , staticSwitch1056_g170678 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170678 = lerpResult1060_g170678;
				float clampResult17_g170707 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170678 * Blend_LumaMask1046_g170678 * Blend_VertMask913_g170678 * Blend_ProjMask912_g170678 * Blend_GlobalMask968_g170678 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170709 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170709 = ( clampResult17_g170707 - temp_output_7_0_g170709 );
				half Detail_Mask412_g170678 = ( saturate( ( ( temp_output_9_0_g170709 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170678 = lerp( Visual_Albedo527_g170678 , lerpResult985_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170678 = lerpResult989_g170678;
				#else
				float3 staticSwitch415_g170678 = Visual_Albedo527_g170678;
				#endif
				half3 Final_Albedo601_g170678 = staticSwitch415_g170678;
				float3 In_Albedo3_g170687 = Final_Albedo601_g170678;
				float3 In_AlbedoRaw3_g170687 = Final_Albedo601_g170678;
				half2 Visual_NormalTS529_g170678 = Out_NormalTS4_g170686;
				float2 lerpResult40_g170689 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170678 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170680) = _ThirdNormalTex;
				float localFilterTexture29_g170696 = ( 0.0 );
				SamplerState SS29_g170696 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170696 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170696 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170696 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170696 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170696 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170696 = SamplerDefault29_g170696;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170696 = SamplerDefault29_g170696;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170696 = SamplerPoint29_g170696;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170696 = SamplerLow29_g170696;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170696 = SamplerMedium29_g170696;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170696 = SamplerHigh29_g170696;
				#endif
				}
				SamplerState Sampler276_g170680 = SS29_g170696;
				float4 temp_output_37_0_g170680 = Local_LayerCoords790_g170678;
				half4 Coords276_g170680 = temp_output_37_0_g170680;
				half2 TexCoord276_g170680 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170680 = SampleMain( Texture276_g170680 , Sampler276_g170680 , Coords276_g170680 , TexCoord276_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170680) = _ThirdNormalTex;
				SamplerState Sampler275_g170680 = SS29_g170696;
				half4 Coords275_g170680 = temp_output_37_0_g170680;
				half2 TexCoord275_g170680 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170680 = SampleExtra( Texture275_g170680 , Sampler275_g170680 , Coords275_g170680 , TexCoord275_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170680) = _ThirdNormalTex;
				SamplerState Sampler238_g170680 = SS29_g170696;
				half4 Coords238_g170680 = temp_output_37_0_g170680;
				float3 temp_output_279_0_g170680 = Model_PositionWO636_g170678;
				half3 WorldPosition238_g170680 = temp_output_279_0_g170680;
				half4 localSamplePlanar2D238_g170680 = SamplePlanar2D( Texture238_g170680 , Sampler238_g170680 , Coords238_g170680 , WorldPosition238_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170680) = _ThirdNormalTex;
				SamplerState Sampler246_g170680 = SS29_g170696;
				half4 Coords246_g170680 = temp_output_37_0_g170680;
				half3 WorldPosition246_g170680 = temp_output_279_0_g170680;
				float3 temp_output_280_0_g170680 = Model_NormalWS869_g170678;
				half3 WorldNormal246_g170680 = temp_output_280_0_g170680;
				half4 localSamplePlanar3D246_g170680 = SamplePlanar3D( Texture246_g170680 , Sampler246_g170680 , Coords246_g170680 , WorldPosition246_g170680 , WorldNormal246_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170680) = _ThirdNormalTex;
				SamplerState Sampler234_g170680 = SS29_g170696;
				float4 Coords234_g170680 = temp_output_37_0_g170680;
				float3 WorldPosition234_g170680 = temp_output_279_0_g170680;
				float4 localSampleStochastic2D234_g170680 = SampleStochastic2D( Texture234_g170680 , Sampler234_g170680 , Coords234_g170680 , WorldPosition234_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170680) = _ThirdNormalTex;
				SamplerState Sampler263_g170680 = SS29_g170696;
				half4 Coords263_g170680 = temp_output_37_0_g170680;
				half3 WorldPosition263_g170680 = temp_output_279_0_g170680;
				half3 WorldNormal263_g170680 = temp_output_280_0_g170680;
				half4 localSampleStochastic3D263_g170680 = SampleStochastic3D( Texture263_g170680 , Sampler263_g170680 , Coords263_g170680 , WorldPosition263_g170680 , WorldNormal263_g170680 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170678 = localSampleMain276_g170680;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170678 = localSampleExtra275_g170680;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170678 = localSamplePlanar2D238_g170680;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170678 = localSamplePlanar3D246_g170680;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170678 = localSampleStochastic2D234_g170680;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170678 = localSampleStochastic3D263_g170680;
				#else
				float4 staticSwitch698_g170678 = localSampleMain276_g170680;
				#endif
				half4 Local_NormalTex776_g170678 = staticSwitch698_g170678;
				half4 Normal_Packed45_g170682 = Local_NormalTex776_g170678;
				float2 appendResult58_g170682 = (float2(( (Normal_Packed45_g170682).x * (Normal_Packed45_g170682).w ) , (Normal_Packed45_g170682).y));
				half2 Normal_Default50_g170682 = appendResult58_g170682;
				half2 Normal_ASTC41_g170682 = (Normal_Packed45_g170682).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170682 = Normal_ASTC41_g170682;
				#else
				float2 staticSwitch38_g170682 = Normal_Default50_g170682;
				#endif
				half2 Normal_NO_DTX544_g170682 = (Normal_Packed45_g170682).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170682 = Normal_NO_DTX544_g170682;
				#else
				float2 staticSwitch37_g170682 = staticSwitch38_g170682;
				#endif
				float2 temp_output_724_0_g170678 = ( (staticSwitch37_g170682*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170683 = temp_output_724_0_g170678;
				float2 break71_g170683 = Normal_Planar45_g170683;
				float3 appendResult72_g170683 = (float3(break71_g170683.x , 0.0 , break71_g170683.y));
				float2 temp_output_858_0_g170678 = (mul( ase_worldToTangent, appendResult72_g170683 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170678 = temp_output_724_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170678 = temp_output_724_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170678 = temp_output_858_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170678 = temp_output_858_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170678 = temp_output_858_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170678 = temp_output_858_0_g170678;
				#else
				float2 staticSwitch727_g170678 = temp_output_724_0_g170678;
				#endif
				half2 Local_NormalTS729_g170678 = staticSwitch727_g170678;
				float2 temp_output_36_0_g170689 = ( lerpResult40_g170689 + Local_NormalTS729_g170678 );
				float2 lerpResult405_g170678 = lerp( Visual_NormalTS529_g170678 , temp_output_36_0_g170689 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170678 = lerpResult405_g170678;
				#else
				float2 staticSwitch418_g170678 = Visual_NormalTS529_g170678;
				#endif
				half2 Final_NormalTS612_g170678 = staticSwitch418_g170678;
				float2 In_NormalTS3_g170687 = Final_NormalTS612_g170678;
				float3 appendResult68_g170690 = (float3(Final_NormalTS612_g170678 , 1.0));
				float3 tanNormal74_g170690 = appendResult68_g170690;
				float3 worldNormal74_g170690 = normalize( float3(dot(tanToWorld0,tanNormal74_g170690), dot(tanToWorld1,tanNormal74_g170690), dot(tanToWorld2,tanNormal74_g170690)) );
				half3 Final_NormalWS956_g170678 = worldNormal74_g170690;
				float3 In_NormalWS3_g170687 = Final_NormalWS956_g170678;
				half4 Visual_Shader531_g170678 = Out_Shader4_g170686;
				float4 lerpResult1000_g170678 = lerp( Local_Masks750_g170678 , ( Visual_Shader531_g170678 * Local_Masks750_g170678 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170678 = lerp( Visual_Shader531_g170678 , lerpResult1000_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170678 = lerpResult998_g170678;
				#else
				float4 staticSwitch451_g170678 = Visual_Shader531_g170678;
				#endif
				half4 Final_Masks613_g170678 = staticSwitch451_g170678;
				float4 In_Shader3_g170687 = Final_Masks613_g170678;
				float4 In_Emissive3_g170687 = Out_Emissive4_g170686;
				float3 temp_output_3_0_g170692 = Final_Albedo601_g170678;
				float dotResult20_g170692 = dot( temp_output_3_0_g170692 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170678 = dotResult20_g170692;
				float In_Grayscale3_g170687 = Final_Grayscale615_g170678;
				float clampResult651_g170678 = clamp( saturate( ( Final_Grayscale615_g170678 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170678 = clampResult651_g170678;
				float In_Luminosity3_g170687 = Final_Luminosity652_g170678;
				half Visual_MultiMask547_g170678 = Out_MultiMask4_g170686;
				float lerpResult477_g170678 = lerp( Visual_MultiMask547_g170678 , Local_MultiMask767_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float staticSwitch482_g170678 = lerpResult477_g170678;
				#else
				float staticSwitch482_g170678 = Visual_MultiMask547_g170678;
				#endif
				half Final_MultiMask572_g170678 = staticSwitch482_g170678;
				float In_MultiMask3_g170687 = Final_MultiMask572_g170678;
				half Visual_AlphaClip559_g170678 = Out_AlphaClip4_g170686;
				float temp_output_718_0_g170678 = (Local_AlbedoTex777_g170678).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170678 = ( temp_output_718_0_g170678 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170678 = temp_output_718_0_g170678;
				#endif
				half Local_AlphaClip772_g170678 = staticSwitch924_g170678;
				float lerpResult448_g170678 = lerp( Visual_AlphaClip559_g170678 , Local_AlphaClip772_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float staticSwitch564_g170678 = lerpResult448_g170678;
				#else
				float staticSwitch564_g170678 = Visual_AlphaClip559_g170678;
				#endif
				half Final_AlphaClip602_g170678 = staticSwitch564_g170678;
				float In_AlphaClip3_g170687 = Final_AlphaClip602_g170678;
				half Visual_AlphaFade588_g170678 = Out_AlphaFade4_g170686;
				half Local_AlphaFade773_g170678 = (lerpResult706_g170678).a;
				float lerpResult604_g170678 = lerp( Visual_AlphaFade588_g170678 , Local_AlphaFade773_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float staticSwitch608_g170678 = lerpResult604_g170678;
				#else
				float staticSwitch608_g170678 = Visual_AlphaFade588_g170678;
				#endif
				half Final_AlphaFade611_g170678 = staticSwitch608_g170678;
				float In_AlphaFade3_g170687 = Final_AlphaFade611_g170678;
				float3 In_Translucency3_g170687 = Out_Translucency4_g170686;
				float In_Transmission3_g170687 = Out_Transmission4_g170686;
				float In_Thickness3_g170687 = Out_Thickness4_g170686;
				float In_Diffusion3_g170687 = Out_Diffusion4_g170686;
				{
				Data3_g170687.Dummy = In_Dummy3_g170687;
				Data3_g170687.Albedo = In_Albedo3_g170687;
				Data3_g170687.AlbedoRaw = In_AlbedoRaw3_g170687;
				Data3_g170687.NormalTS = In_NormalTS3_g170687;
				Data3_g170687.NormalWS = In_NormalWS3_g170687;
				Data3_g170687.Shader = In_Shader3_g170687;
				Data3_g170687.Emissive= In_Emissive3_g170687;
				Data3_g170687.MultiMask = In_MultiMask3_g170687;
				Data3_g170687.Grayscale = In_Grayscale3_g170687;
				Data3_g170687.Luminosity = In_Luminosity3_g170687;
				Data3_g170687.AlphaClip = In_AlphaClip3_g170687;
				Data3_g170687.AlphaFade = In_AlphaFade3_g170687;
				Data3_g170687.Translucency = In_Translucency3_g170687;
				Data3_g170687.Transmission = In_Transmission3_g170687;
				Data3_g170687.Thickness = In_Thickness3_g170687;
				Data3_g170687.Diffusion = In_Diffusion3_g170687;
				}
				TVEVisualData Data4_g170789 = Data3_g170687;
				float Out_Dummy4_g170789 = 0;
				float3 Out_Albedo4_g170789 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170789 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170789 = float2( 0,0 );
				float3 Out_NormalWS4_g170789 = float3( 0,0,0 );
				float4 Out_Shader4_g170789 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170789 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170789 = 0;
				float Out_Grayscale4_g170789 = 0;
				float Out_Luminosity4_g170789 = 0;
				float Out_AlphaClip4_g170789 = 0;
				float Out_AlphaFade4_g170789 = 0;
				float3 Out_Translucency4_g170789 = float3( 0,0,0 );
				float Out_Transmission4_g170789 = 0;
				float Out_Thickness4_g170789 = 0;
				float Out_Diffusion4_g170789 = 0;
				{
				Out_Dummy4_g170789 = Data4_g170789.Dummy;
				Out_Albedo4_g170789 = Data4_g170789.Albedo;
				Out_AlbedoRaw4_g170789 = Data4_g170789.AlbedoRaw;
				Out_NormalTS4_g170789 = Data4_g170789.NormalTS;
				Out_NormalWS4_g170789 = Data4_g170789.NormalWS;
				Out_Shader4_g170789 = Data4_g170789.Shader;
				Out_Emissive4_g170789= Data4_g170789.Emissive;
				Out_MultiMask4_g170789 = Data4_g170789.MultiMask;
				Out_Grayscale4_g170789 = Data4_g170789.Grayscale;
				Out_Luminosity4_g170789= Data4_g170789.Luminosity;
				Out_AlphaClip4_g170789 = Data4_g170789.AlphaClip;
				Out_AlphaFade4_g170789 = Data4_g170789.AlphaFade;
				Out_Translucency4_g170789 = Data4_g170789.Translucency;
				Out_Transmission4_g170789 = Data4_g170789.Transmission;
				Out_Thickness4_g170789 = Data4_g170789.Thickness;
				Out_Diffusion4_g170789 = Data4_g170789.Diffusion;
				}
				half3 Visual_Albedo127_g170788 = Out_Albedo4_g170789;
				TVEModelData Data15_g170796 = Data16_g170483;
				float Out_Dummy15_g170796 = 0;
				float3 Out_PositionWS15_g170796 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170796 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170796 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170796 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170796 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170796 = float3( 0,0,0 );
				float4 Out_VertexData15_g170796 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170796 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170796 = Data15_g170796.Dummy;
				Out_PositionWS15_g170796 = Data15_g170796.PositionWS;
				Out_PositionWO15_g170796 = Data15_g170796.PositionWO;
				Out_PivotWS15_g170796 = Data15_g170796.PivotWS;
				Out_PivotWO15_g170796 = Data15_g170796.PivotWO;
				Out_NormalWS15_g170796 = Data15_g170796.NormalWS;
				Out_ViewDirWS15_g170796 = Data15_g170796.ViewDirWS;
				Out_VertexData15_g170796 = Data15_g170796.VertexData;
				Out_BoundsData15_g170796 = Data15_g170796.BoundsData;
				}
				half4 Model_VertexData206_g170788 = Out_VertexData15_g170796;
				float4 break208_g170788 = Model_VertexData206_g170788;
				float4 break33_g170794 = _occlusion_vert_mode;
				float temp_output_30_0_g170794 = ( break208_g170788.x * break33_g170794.x );
				float temp_output_29_0_g170794 = ( break208_g170788.y * break33_g170794.y );
				float temp_output_31_0_g170794 = ( break208_g170788.z * break33_g170794.z );
				float temp_output_28_0_g170794 = ( temp_output_30_0_g170794 + temp_output_29_0_g170794 + temp_output_31_0_g170794 + ( break208_g170788.w * break33_g170794.w ) );
				float temp_output_194_0_g170788 = temp_output_28_0_g170794;
				float clampResult17_g170792 = clamp( temp_output_194_0_g170788 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170797 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170797 = ( clampResult17_g170792 - temp_output_7_0_g170797 );
				float temp_output_6_0_g170793 = saturate( ( ( temp_output_9_0_g170797 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170793 = ( temp_output_6_0_g170793 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170793 = temp_output_6_0_g170793;
				#endif
				half Occlusion_Mask82_g170788 = staticSwitch14_g170793;
				float3 lerpResult75_g170788 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170788);
				float3 lerpResult186_g170788 = lerp( Visual_Albedo127_g170788 , ( Visual_Albedo127_g170788 * lerpResult75_g170788 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170788 = lerpResult186_g170788;
				#else
				float3 staticSwitch171_g170788 = Visual_Albedo127_g170788;
				#endif
				half3 Final_Albedo160_g170788 = staticSwitch171_g170788;
				float3 In_Albedo3_g170790 = Final_Albedo160_g170788;
				float3 In_AlbedoRaw3_g170790 = Final_Albedo160_g170788;
				float2 In_NormalTS3_g170790 = Out_NormalTS4_g170789;
				float3 In_NormalWS3_g170790 = Out_NormalWS4_g170789;
				float4 In_Shader3_g170790 = Out_Shader4_g170789;
				float4 In_Emissive3_g170790 = Out_Emissive4_g170789;
				float3 temp_output_3_0_g170791 = Final_Albedo160_g170788;
				float dotResult20_g170791 = dot( temp_output_3_0_g170791 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170788 = dotResult20_g170791;
				float In_Grayscale3_g170790 = Final_Grayscale164_g170788;
				float clampResult180_g170788 = clamp( saturate( ( Final_Grayscale164_g170788 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170788 = clampResult180_g170788;
				float In_Luminosity3_g170790 = Final_Shading181_g170788;
				float In_MultiMask3_g170790 = Out_MultiMask4_g170789;
				float In_AlphaClip3_g170790 = Out_AlphaClip4_g170789;
				float In_AlphaFade3_g170790 = Out_AlphaFade4_g170789;
				float3 In_Translucency3_g170790 = Out_Translucency4_g170789;
				float In_Transmission3_g170790 = Out_Transmission4_g170789;
				float In_Thickness3_g170790 = Out_Thickness4_g170789;
				float In_Diffusion3_g170790 = Out_Diffusion4_g170789;
				{
				Data3_g170790.Dummy = In_Dummy3_g170790;
				Data3_g170790.Albedo = In_Albedo3_g170790;
				Data3_g170790.AlbedoRaw = In_AlbedoRaw3_g170790;
				Data3_g170790.NormalTS = In_NormalTS3_g170790;
				Data3_g170790.NormalWS = In_NormalWS3_g170790;
				Data3_g170790.Shader = In_Shader3_g170790;
				Data3_g170790.Emissive= In_Emissive3_g170790;
				Data3_g170790.MultiMask = In_MultiMask3_g170790;
				Data3_g170790.Grayscale = In_Grayscale3_g170790;
				Data3_g170790.Luminosity = In_Luminosity3_g170790;
				Data3_g170790.AlphaClip = In_AlphaClip3_g170790;
				Data3_g170790.AlphaFade = In_AlphaFade3_g170790;
				Data3_g170790.Translucency = In_Translucency3_g170790;
				Data3_g170790.Transmission = In_Transmission3_g170790;
				Data3_g170790.Thickness = In_Thickness3_g170790;
				Data3_g170790.Diffusion = In_Diffusion3_g170790;
				}
				TVEVisualData Data4_g170800 = Data3_g170790;
				float Out_Dummy4_g170800 = 0;
				float3 Out_Albedo4_g170800 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170800 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170800 = float2( 0,0 );
				float3 Out_NormalWS4_g170800 = float3( 0,0,0 );
				float4 Out_Shader4_g170800 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170800 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170800 = 0;
				float Out_Grayscale4_g170800 = 0;
				float Out_Luminosity4_g170800 = 0;
				float Out_AlphaClip4_g170800 = 0;
				float Out_AlphaFade4_g170800 = 0;
				float3 Out_Translucency4_g170800 = float3( 0,0,0 );
				float Out_Transmission4_g170800 = 0;
				float Out_Thickness4_g170800 = 0;
				float Out_Diffusion4_g170800 = 0;
				{
				Out_Dummy4_g170800 = Data4_g170800.Dummy;
				Out_Albedo4_g170800 = Data4_g170800.Albedo;
				Out_AlbedoRaw4_g170800 = Data4_g170800.AlbedoRaw;
				Out_NormalTS4_g170800 = Data4_g170800.NormalTS;
				Out_NormalWS4_g170800 = Data4_g170800.NormalWS;
				Out_Shader4_g170800 = Data4_g170800.Shader;
				Out_Emissive4_g170800= Data4_g170800.Emissive;
				Out_MultiMask4_g170800 = Data4_g170800.MultiMask;
				Out_Grayscale4_g170800 = Data4_g170800.Grayscale;
				Out_Luminosity4_g170800= Data4_g170800.Luminosity;
				Out_AlphaClip4_g170800 = Data4_g170800.AlphaClip;
				Out_AlphaFade4_g170800 = Data4_g170800.AlphaFade;
				Out_Translucency4_g170800 = Data4_g170800.Translucency;
				Out_Transmission4_g170800 = Data4_g170800.Transmission;
				Out_Thickness4_g170800 = Data4_g170800.Thickness;
				Out_Diffusion4_g170800 = Data4_g170800.Diffusion;
				}
				half3 Visual_Albedo127_g170798 = Out_Albedo4_g170800;
				TVEModelData Data15_g170806 = Data16_g170483;
				float Out_Dummy15_g170806 = 0;
				float3 Out_PositionWS15_g170806 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170806 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170806 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170806 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170806 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170806 = float3( 0,0,0 );
				float4 Out_VertexData15_g170806 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170806 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170806 = Data15_g170806.Dummy;
				Out_PositionWS15_g170806 = Data15_g170806.PositionWS;
				Out_PositionWO15_g170806 = Data15_g170806.PositionWO;
				Out_PivotWS15_g170806 = Data15_g170806.PivotWS;
				Out_PivotWO15_g170806 = Data15_g170806.PivotWO;
				Out_NormalWS15_g170806 = Data15_g170806.NormalWS;
				Out_ViewDirWS15_g170806 = Data15_g170806.ViewDirWS;
				Out_VertexData15_g170806 = Data15_g170806.VertexData;
				Out_BoundsData15_g170806 = Data15_g170806.BoundsData;
				}
				half4 Model_VertexData224_g170798 = Out_VertexData15_g170806;
				float4 break226_g170798 = Model_VertexData224_g170798;
				float4 break33_g170799 = _gradient_vert_mode;
				float temp_output_30_0_g170799 = ( break226_g170798.x * break33_g170799.x );
				float temp_output_29_0_g170799 = ( break226_g170798.y * break33_g170799.y );
				float temp_output_31_0_g170799 = ( break226_g170798.z * break33_g170799.z );
				float temp_output_28_0_g170799 = ( temp_output_30_0_g170799 + temp_output_29_0_g170799 + temp_output_31_0_g170799 + ( break226_g170798.w * break33_g170799.w ) );
				float temp_output_211_0_g170798 = temp_output_28_0_g170799;
				float clampResult17_g170804 = clamp( temp_output_211_0_g170798 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170807 = _GradientMeshRemap.x;
				float temp_output_9_0_g170807 = ( clampResult17_g170804 - temp_output_7_0_g170807 );
				float temp_output_6_0_g170805 = saturate( ( ( temp_output_9_0_g170807 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170805 = ( temp_output_6_0_g170805 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170805 = temp_output_6_0_g170805;
				#endif
				half Gradient_VertMask82_g170798 = staticSwitch14_g170805;
				half Gradient_Mask200_g170798 = Gradient_VertMask82_g170798;
				float3 lerpResult75_g170798 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170798);
				float temp_output_162_11_g170798 = Out_MultiMask4_g170800;
				half Visual_MultiMask196_g170798 = temp_output_162_11_g170798;
				float lerpResult190_g170798 = lerp( 1.0 , Visual_MultiMask196_g170798 , _GradientMultiValue);
				half Gradient_MultiMask194_g170798 = lerpResult190_g170798;
				float3 lerpResult186_g170798 = lerp( Visual_Albedo127_g170798 , ( Visual_Albedo127_g170798 * lerpResult75_g170798 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170798 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170798 = lerpResult186_g170798;
				#else
				float3 staticSwitch171_g170798 = Visual_Albedo127_g170798;
				#endif
				half3 Final_Albedo160_g170798 = staticSwitch171_g170798;
				float3 In_Albedo3_g170801 = Final_Albedo160_g170798;
				float3 In_AlbedoRaw3_g170801 = Final_Albedo160_g170798;
				float2 In_NormalTS3_g170801 = Out_NormalTS4_g170800;
				float3 In_NormalWS3_g170801 = Out_NormalWS4_g170800;
				float4 In_Shader3_g170801 = Out_Shader4_g170800;
				float4 In_Emissive3_g170801 = Out_Emissive4_g170800;
				float3 temp_output_3_0_g170802 = Final_Albedo160_g170798;
				float dotResult20_g170802 = dot( temp_output_3_0_g170802 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170798 = dotResult20_g170802;
				float In_Grayscale3_g170801 = Final_Grayscale164_g170798;
				float clampResult180_g170798 = clamp( saturate( ( Final_Grayscale164_g170798 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170798 = clampResult180_g170798;
				float In_Luminosity3_g170801 = Final_Luminosity181_g170798;
				float In_MultiMask3_g170801 = temp_output_162_11_g170798;
				float In_AlphaClip3_g170801 = Out_AlphaClip4_g170800;
				float In_AlphaFade3_g170801 = Out_AlphaFade4_g170800;
				float3 In_Translucency3_g170801 = Out_Translucency4_g170800;
				float In_Transmission3_g170801 = Out_Transmission4_g170800;
				float In_Thickness3_g170801 = Out_Thickness4_g170800;
				float In_Diffusion3_g170801 = Out_Diffusion4_g170800;
				{
				Data3_g170801.Dummy = In_Dummy3_g170801;
				Data3_g170801.Albedo = In_Albedo3_g170801;
				Data3_g170801.AlbedoRaw = In_AlbedoRaw3_g170801;
				Data3_g170801.NormalTS = In_NormalTS3_g170801;
				Data3_g170801.NormalWS = In_NormalWS3_g170801;
				Data3_g170801.Shader = In_Shader3_g170801;
				Data3_g170801.Emissive= In_Emissive3_g170801;
				Data3_g170801.MultiMask = In_MultiMask3_g170801;
				Data3_g170801.Grayscale = In_Grayscale3_g170801;
				Data3_g170801.Luminosity = In_Luminosity3_g170801;
				Data3_g170801.AlphaClip = In_AlphaClip3_g170801;
				Data3_g170801.AlphaFade = In_AlphaFade3_g170801;
				Data3_g170801.Translucency = In_Translucency3_g170801;
				Data3_g170801.Transmission = In_Transmission3_g170801;
				Data3_g170801.Thickness = In_Thickness3_g170801;
				Data3_g170801.Diffusion = In_Diffusion3_g170801;
				}
				TVEVisualData Data4_g170810 = Data3_g170801;
				float Out_Dummy4_g170810 = 0;
				float3 Out_Albedo4_g170810 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170810 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170810 = float2( 0,0 );
				float3 Out_NormalWS4_g170810 = float3( 0,0,0 );
				float4 Out_Shader4_g170810 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170810 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170810 = 0;
				float Out_Grayscale4_g170810 = 0;
				float Out_Luminosity4_g170810 = 0;
				float Out_AlphaClip4_g170810 = 0;
				float Out_AlphaFade4_g170810 = 0;
				float3 Out_Translucency4_g170810 = float3( 0,0,0 );
				float Out_Transmission4_g170810 = 0;
				float Out_Thickness4_g170810 = 0;
				float Out_Diffusion4_g170810 = 0;
				{
				Out_Dummy4_g170810 = Data4_g170810.Dummy;
				Out_Albedo4_g170810 = Data4_g170810.Albedo;
				Out_AlbedoRaw4_g170810 = Data4_g170810.AlbedoRaw;
				Out_NormalTS4_g170810 = Data4_g170810.NormalTS;
				Out_NormalWS4_g170810 = Data4_g170810.NormalWS;
				Out_Shader4_g170810 = Data4_g170810.Shader;
				Out_Emissive4_g170810= Data4_g170810.Emissive;
				Out_MultiMask4_g170810 = Data4_g170810.MultiMask;
				Out_Grayscale4_g170810 = Data4_g170810.Grayscale;
				Out_Luminosity4_g170810= Data4_g170810.Luminosity;
				Out_AlphaClip4_g170810 = Data4_g170810.AlphaClip;
				Out_AlphaFade4_g170810 = Data4_g170810.AlphaFade;
				Out_Translucency4_g170810 = Data4_g170810.Translucency;
				Out_Transmission4_g170810 = Data4_g170810.Transmission;
				Out_Thickness4_g170810 = Data4_g170810.Thickness;
				Out_Diffusion4_g170810 = Data4_g170810.Diffusion;
				}
				half3 Visual_Albedo127_g170808 = Out_Albedo4_g170810;
				TVEModelData Data15_g170815 = Data16_g170483;
				float Out_Dummy15_g170815 = 0;
				float3 Out_PositionWS15_g170815 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170815 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170815 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170815 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170815 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170815 = float3( 0,0,0 );
				float4 Out_VertexData15_g170815 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170815 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170815 = Data15_g170815.Dummy;
				Out_PositionWS15_g170815 = Data15_g170815.PositionWS;
				Out_PositionWO15_g170815 = Data15_g170815.PositionWO;
				Out_PivotWS15_g170815 = Data15_g170815.PivotWS;
				Out_PivotWO15_g170815 = Data15_g170815.PivotWO;
				Out_NormalWS15_g170815 = Data15_g170815.NormalWS;
				Out_ViewDirWS15_g170815 = Data15_g170815.ViewDirWS;
				Out_VertexData15_g170815 = Data15_g170815.VertexData;
				Out_BoundsData15_g170815 = Data15_g170815.BoundsData;
				}
				half3 Model_PositionWO224_g170808 = Out_PositionWO15_g170815;
				half3 Model_PivotWO239_g170808 = Out_PivotWO15_g170815;
				float3 lerpResult242_g170808 = lerp( Model_PositionWO224_g170808 , Model_PivotWO239_g170808 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170812 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170808 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170814 = clamp( tex3DNode60_g170812.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170816 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170816 = ( clampResult17_g170814 - temp_output_7_0_g170816 );
				float temp_output_238_0_g170808 = saturate( ( ( temp_output_9_0_g170816 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170808 = temp_output_238_0_g170808;
				half Variaton_Mask200_g170808 = Variaton_NoiseMask82_g170808;
				float3 lerpResult75_g170808 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170808);
				float temp_output_162_11_g170808 = Out_MultiMask4_g170810;
				half Visual_MultiMask196_g170808 = temp_output_162_11_g170808;
				float lerpResult190_g170808 = lerp( 1.0 , Visual_MultiMask196_g170808 , _VariationMultiValue);
				half Variaton_MultiMask194_g170808 = lerpResult190_g170808;
				float3 lerpResult186_g170808 = lerp( Visual_Albedo127_g170808 , ( Visual_Albedo127_g170808 * lerpResult75_g170808 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170808 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170808 = lerpResult186_g170808;
				#else
				float3 staticSwitch171_g170808 = Visual_Albedo127_g170808;
				#endif
				half3 Final_Albedo160_g170808 = staticSwitch171_g170808;
				float3 In_Albedo3_g170811 = Final_Albedo160_g170808;
				float3 In_AlbedoRaw3_g170811 = Final_Albedo160_g170808;
				float2 In_NormalTS3_g170811 = Out_NormalTS4_g170810;
				float3 In_NormalWS3_g170811 = Out_NormalWS4_g170810;
				float4 In_Shader3_g170811 = Out_Shader4_g170810;
				float4 In_Emissive3_g170811 = Out_Emissive4_g170810;
				float3 temp_output_3_0_g170809 = Final_Albedo160_g170808;
				float dotResult20_g170809 = dot( temp_output_3_0_g170809 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170808 = dotResult20_g170809;
				float In_Grayscale3_g170811 = Final_Grayscale164_g170808;
				float clampResult180_g170808 = clamp( saturate( ( Final_Grayscale164_g170808 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170808 = clampResult180_g170808;
				float In_Luminosity3_g170811 = Final_Luminosity181_g170808;
				float In_MultiMask3_g170811 = temp_output_162_11_g170808;
				float In_AlphaClip3_g170811 = Out_AlphaClip4_g170810;
				float In_AlphaFade3_g170811 = Out_AlphaFade4_g170810;
				float3 In_Translucency3_g170811 = Out_Translucency4_g170810;
				float In_Transmission3_g170811 = Out_Transmission4_g170810;
				float In_Thickness3_g170811 = Out_Thickness4_g170810;
				float In_Diffusion3_g170811 = Out_Diffusion4_g170810;
				{
				Data3_g170811.Dummy = In_Dummy3_g170811;
				Data3_g170811.Albedo = In_Albedo3_g170811;
				Data3_g170811.AlbedoRaw = In_AlbedoRaw3_g170811;
				Data3_g170811.NormalTS = In_NormalTS3_g170811;
				Data3_g170811.NormalWS = In_NormalWS3_g170811;
				Data3_g170811.Shader = In_Shader3_g170811;
				Data3_g170811.Emissive= In_Emissive3_g170811;
				Data3_g170811.MultiMask = In_MultiMask3_g170811;
				Data3_g170811.Grayscale = In_Grayscale3_g170811;
				Data3_g170811.Luminosity = In_Luminosity3_g170811;
				Data3_g170811.AlphaClip = In_AlphaClip3_g170811;
				Data3_g170811.AlphaFade = In_AlphaFade3_g170811;
				Data3_g170811.Translucency = In_Translucency3_g170811;
				Data3_g170811.Transmission = In_Transmission3_g170811;
				Data3_g170811.Thickness = In_Thickness3_g170811;
				Data3_g170811.Diffusion = In_Diffusion3_g170811;
				}
				TVEVisualData Data4_g170823 = Data3_g170811;
				float Out_Dummy4_g170823 = 0;
				float3 Out_Albedo4_g170823 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170823 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170823 = float2( 0,0 );
				float3 Out_NormalWS4_g170823 = float3( 0,0,0 );
				float4 Out_Shader4_g170823 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170823 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170823 = 0;
				float Out_Grayscale4_g170823 = 0;
				float Out_Luminosity4_g170823 = 0;
				float Out_AlphaClip4_g170823 = 0;
				float Out_AlphaFade4_g170823 = 0;
				float3 Out_Translucency4_g170823 = float3( 0,0,0 );
				float Out_Transmission4_g170823 = 0;
				float Out_Thickness4_g170823 = 0;
				float Out_Diffusion4_g170823 = 0;
				{
				Out_Dummy4_g170823 = Data4_g170823.Dummy;
				Out_Albedo4_g170823 = Data4_g170823.Albedo;
				Out_AlbedoRaw4_g170823 = Data4_g170823.AlbedoRaw;
				Out_NormalTS4_g170823 = Data4_g170823.NormalTS;
				Out_NormalWS4_g170823 = Data4_g170823.NormalWS;
				Out_Shader4_g170823 = Data4_g170823.Shader;
				Out_Emissive4_g170823= Data4_g170823.Emissive;
				Out_MultiMask4_g170823 = Data4_g170823.MultiMask;
				Out_Grayscale4_g170823 = Data4_g170823.Grayscale;
				Out_Luminosity4_g170823= Data4_g170823.Luminosity;
				Out_AlphaClip4_g170823 = Data4_g170823.AlphaClip;
				Out_AlphaFade4_g170823 = Data4_g170823.AlphaFade;
				Out_Translucency4_g170823 = Data4_g170823.Translucency;
				Out_Transmission4_g170823 = Data4_g170823.Transmission;
				Out_Thickness4_g170823 = Data4_g170823.Thickness;
				Out_Diffusion4_g170823 = Data4_g170823.Diffusion;
				}
				half3 Visual_Albedo139_g170818 = Out_Albedo4_g170823;
				float temp_output_200_12_g170818 = Out_Grayscale4_g170823;
				half Visual_Grayscale150_g170818 = temp_output_200_12_g170818;
				float3 temp_cast_33 = (Visual_Grayscale150_g170818).xxx;
				TVEGlobalData Data15_g170819 = Data204_g170496;
				float Out_Dummy15_g170819 = 0;
				float4 Out_CoatParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170819 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170819 = Data15_g170819.Dummy;
				Out_CoatParams15_g170819 = Data15_g170819.CoatParams;
				Out_PaintParams15_g170819 = Data15_g170819.PaintParams;
				Out_GlowParams15_g170819 = Data15_g170819.GlowParams;
				Out_AtmoParams15_g170819= Data15_g170819.AtmoParams;
				Out_FadeParams15_g170819= Data15_g170819.FadeParams;
				Out_FormParams15_g170819 = Data15_g170819.FormParams;
				Out_FlowParams15_g170819 = Data15_g170819.FlowParams;
				}
				half4 Global_PaintParams209_g170818 = Out_PaintParams15_g170819;
				float4 temp_output_6_0_g170840 = Global_PaintParams209_g170818;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170840 = ( temp_output_6_0_g170840 + ( _TintingElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170840 = temp_output_6_0_g170840;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170818 = staticSwitch14_g170840;
				#else
				float4 staticSwitch283_g170818 = TVE_PaintParams;
				#endif
				float lerpResult412_g170818 = lerp( 1.0 , ( saturate( (staticSwitch283_g170818).w ) * TVE_IsEnabled ) , _TintingGlobalValue);
				half Tinting_GlobalValue285_g170818 = lerpResult412_g170818;
				float3 lerpResult368_g170818 = lerp( Visual_Albedo139_g170818 , temp_cast_33 , ( Tinting_GlobalValue285_g170818 * _TintingGrayValue ));
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170833 = 2.0;
				#else
				float staticSwitch1_g170833 = 4.594794;
				#endif
				half3 Tinting_GlobalColor290_g170818 = (staticSwitch283_g170818).xyz;
				float temp_output_200_11_g170818 = Out_MultiMask4_g170823;
				half Visual_MultiMask181_g170818 = temp_output_200_11_g170818;
				float lerpResult147_g170818 = lerp( 1.0 , Visual_MultiMask181_g170818 , _TintingMultiValue);
				half Tinting_MutiMask121_g170818 = lerpResult147_g170818;
				half Tinting_TexMask385_g170818 = 1.0;
				float temp_output_200_15_g170818 = Out_Luminosity4_g170823;
				half Visual_Luminosity257_g170818 = temp_output_200_15_g170818;
				float clampResult17_g170830 = clamp( Visual_Luminosity257_g170818 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170835 = _TintingLumaRemap.x;
				float temp_output_9_0_g170835 = ( clampResult17_g170830 - temp_output_7_0_g170835 );
				float lerpResult228_g170818 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170835 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170818 = lerpResult228_g170818;
				TVEModelData Data15_g170824 = Data16_g170483;
				float Out_Dummy15_g170824 = 0;
				float3 Out_PositionWS15_g170824 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170824 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170824 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170824 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170824 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170824 = float3( 0,0,0 );
				float4 Out_VertexData15_g170824 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170824 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170824 = Data15_g170824.Dummy;
				Out_PositionWS15_g170824 = Data15_g170824.PositionWS;
				Out_PositionWO15_g170824 = Data15_g170824.PositionWO;
				Out_PivotWS15_g170824 = Data15_g170824.PivotWS;
				Out_PivotWO15_g170824 = Data15_g170824.PivotWO;
				Out_NormalWS15_g170824 = Data15_g170824.NormalWS;
				Out_ViewDirWS15_g170824 = Data15_g170824.ViewDirWS;
				Out_VertexData15_g170824 = Data15_g170824.VertexData;
				Out_BoundsData15_g170824 = Data15_g170824.BoundsData;
				}
				half4 Model_VertexMasks307_g170818 = Out_VertexData15_g170824;
				float4 break311_g170818 = Model_VertexMasks307_g170818;
				float4 break33_g170827 = _tinting_vert_mode;
				float temp_output_30_0_g170827 = ( break311_g170818.x * break33_g170827.x );
				float temp_output_29_0_g170827 = ( break311_g170818.y * break33_g170827.y );
				float temp_output_31_0_g170827 = ( break311_g170818.z * break33_g170827.z );
				float temp_output_28_0_g170827 = ( temp_output_30_0_g170827 + temp_output_29_0_g170827 + temp_output_31_0_g170827 + ( break311_g170818.w * break33_g170827.w ) );
				float clampResult17_g170829 = clamp( temp_output_28_0_g170827 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170836 = _TintingMeshRemap.x;
				float temp_output_9_0_g170836 = ( clampResult17_g170829 - temp_output_7_0_g170836 );
				float lerpResult370_g170818 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170836 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170831 = lerpResult370_g170818;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170831 = ( temp_output_6_0_g170831 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170831 = temp_output_6_0_g170831;
				#endif
				half Tinting_VertMask309_g170818 = staticSwitch14_g170831;
				half Tinting_NoiseMask213_g170818 = 1.0;
				half Custom_Mask345_g170818 = 1.0;
				float temp_output_7_0_g170839 = _TintingBlendRemap.x;
				float temp_output_9_0_g170839 = ( ( _TintingIntensityValue * Tinting_MutiMask121_g170818 * Tinting_TexMask385_g170818 * Tinting_LumaMask153_g170818 * Tinting_VertMask309_g170818 * Tinting_NoiseMask213_g170818 * Tinting_GlobalValue285_g170818 * Custom_Mask345_g170818 ) - temp_output_7_0_g170839 );
				half Tinting_Mask242_g170818 = ( saturate( ( ( temp_output_9_0_g170839 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170818 = lerp( Visual_Albedo139_g170818 , ( lerpResult368_g170818 * staticSwitch1_g170833 * Tinting_GlobalColor290_g170818 * (_TintingColor).rgb ) , Tinting_Mask242_g170818);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170818 = lerpResult90_g170818;
				#else
				float3 staticSwitch286_g170818 = Visual_Albedo139_g170818;
				#endif
				half3 Final_Albedo97_g170818 = staticSwitch286_g170818;
				float3 In_Albedo3_g170822 = Final_Albedo97_g170818;
				float3 In_AlbedoRaw3_g170822 = Out_AlbedoRaw4_g170823;
				float2 In_NormalTS3_g170822 = Out_NormalTS4_g170823;
				float3 In_NormalWS3_g170822 = Out_NormalWS4_g170823;
				float4 In_Shader3_g170822 = Out_Shader4_g170823;
				float4 In_Emissive3_g170822 = Out_Emissive4_g170823;
				float In_Grayscale3_g170822 = temp_output_200_12_g170818;
				float In_Luminosity3_g170822 = temp_output_200_15_g170818;
				float In_MultiMask3_g170822 = temp_output_200_11_g170818;
				float In_AlphaClip3_g170822 = Out_AlphaClip4_g170823;
				float In_AlphaFade3_g170822 = Out_AlphaFade4_g170823;
				float3 In_Translucency3_g170822 = Out_Translucency4_g170823;
				float In_Transmission3_g170822 = Out_Transmission4_g170823;
				float In_Thickness3_g170822 = Out_Thickness4_g170823;
				float In_Diffusion3_g170822 = Out_Diffusion4_g170823;
				{
				Data3_g170822.Dummy = In_Dummy3_g170822;
				Data3_g170822.Albedo = In_Albedo3_g170822;
				Data3_g170822.AlbedoRaw = In_AlbedoRaw3_g170822;
				Data3_g170822.NormalTS = In_NormalTS3_g170822;
				Data3_g170822.NormalWS = In_NormalWS3_g170822;
				Data3_g170822.Shader = In_Shader3_g170822;
				Data3_g170822.Emissive= In_Emissive3_g170822;
				Data3_g170822.MultiMask = In_MultiMask3_g170822;
				Data3_g170822.Grayscale = In_Grayscale3_g170822;
				Data3_g170822.Luminosity = In_Luminosity3_g170822;
				Data3_g170822.AlphaClip = In_AlphaClip3_g170822;
				Data3_g170822.AlphaFade = In_AlphaFade3_g170822;
				Data3_g170822.Translucency = In_Translucency3_g170822;
				Data3_g170822.Transmission = In_Transmission3_g170822;
				Data3_g170822.Thickness = In_Thickness3_g170822;
				Data3_g170822.Diffusion = In_Diffusion3_g170822;
				}
				TVEVisualData Data4_g170844 = Data3_g170822;
				float Out_Dummy4_g170844 = 0;
				float3 Out_Albedo4_g170844 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170844 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170844 = float2( 0,0 );
				float3 Out_NormalWS4_g170844 = float3( 0,0,0 );
				float4 Out_Shader4_g170844 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170844 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170844 = 0;
				float Out_Grayscale4_g170844 = 0;
				float Out_Luminosity4_g170844 = 0;
				float Out_AlphaClip4_g170844 = 0;
				float Out_AlphaFade4_g170844 = 0;
				float3 Out_Translucency4_g170844 = float3( 0,0,0 );
				float Out_Transmission4_g170844 = 0;
				float Out_Thickness4_g170844 = 0;
				float Out_Diffusion4_g170844 = 0;
				{
				Out_Dummy4_g170844 = Data4_g170844.Dummy;
				Out_Albedo4_g170844 = Data4_g170844.Albedo;
				Out_AlbedoRaw4_g170844 = Data4_g170844.AlbedoRaw;
				Out_NormalTS4_g170844 = Data4_g170844.NormalTS;
				Out_NormalWS4_g170844 = Data4_g170844.NormalWS;
				Out_Shader4_g170844 = Data4_g170844.Shader;
				Out_Emissive4_g170844= Data4_g170844.Emissive;
				Out_MultiMask4_g170844 = Data4_g170844.MultiMask;
				Out_Grayscale4_g170844 = Data4_g170844.Grayscale;
				Out_Luminosity4_g170844= Data4_g170844.Luminosity;
				Out_AlphaClip4_g170844 = Data4_g170844.AlphaClip;
				Out_AlphaFade4_g170844 = Data4_g170844.AlphaFade;
				Out_Translucency4_g170844 = Data4_g170844.Translucency;
				Out_Transmission4_g170844 = Data4_g170844.Transmission;
				Out_Thickness4_g170844 = Data4_g170844.Thickness;
				Out_Diffusion4_g170844 = Data4_g170844.Diffusion;
				}
				half3 Visual_Albedo292_g170842 = Out_Albedo4_g170844;
				float temp_output_280_12_g170842 = Out_Grayscale4_g170844;
				half Visual_Grayscale308_g170842 = temp_output_280_12_g170842;
				float3 temp_cast_34 = (Visual_Grayscale308_g170842).xxx;
				TVEGlobalData Data15_g170843 = Data204_g170496;
				float Out_Dummy15_g170843 = 0;
				float4 Out_CoatParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170843 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170843 = Data15_g170843.Dummy;
				Out_CoatParams15_g170843 = Data15_g170843.CoatParams;
				Out_PaintParams15_g170843 = Data15_g170843.PaintParams;
				Out_GlowParams15_g170843 = Data15_g170843.GlowParams;
				Out_AtmoParams15_g170843= Data15_g170843.AtmoParams;
				Out_FadeParams15_g170843= Data15_g170843.FadeParams;
				Out_FormParams15_g170843 = Data15_g170843.FormParams;
				Out_FlowParams15_g170843 = Data15_g170843.FlowParams;
				}
				half4 Global_AtmoParams314_g170842 = Out_AtmoParams15_g170843;
				float temp_output_6_0_g170863 = (Global_AtmoParams314_g170842).x;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170863 = ( temp_output_6_0_g170863 + ( _DrynessElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170863 = temp_output_6_0_g170863;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170842 = staticSwitch14_g170863;
				#else
				float staticSwitch351_g170842 = TVE_AtmoData.x;
				#endif
				float lerpResult505_g170842 = lerp( 1.0 , ( staticSwitch351_g170842 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalMask352_g170842 = lerpResult505_g170842;
				float3 lerpResult485_g170842 = lerp( Visual_Albedo292_g170842 , temp_cast_34 , ( Dryness_GlobalMask352_g170842 * _DrynessGrayValue ));
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170857 = 2.0;
				#else
				float staticSwitch1_g170857 = 4.594794;
				#endif
				half Dryness_TexMask478_g170842 = 1.0;
				float temp_output_280_11_g170842 = Out_MultiMask4_g170844;
				half Visual_MultiMask310_g170842 = temp_output_280_11_g170842;
				float lerpResult283_g170842 = lerp( 1.0 , Visual_MultiMask310_g170842 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170842 = lerpResult283_g170842;
				float temp_output_280_15_g170842 = Out_Luminosity4_g170844;
				half Visual_Luminosity309_g170842 = temp_output_280_15_g170842;
				float clampResult17_g170854 = clamp( Visual_Luminosity309_g170842 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170859 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170859 = ( clampResult17_g170854 - temp_output_7_0_g170859 );
				float lerpResult295_g170842 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170859 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170842 = lerpResult295_g170842;
				TVEModelData Data15_g170848 = Data16_g170483;
				float Out_Dummy15_g170848 = 0;
				float3 Out_PositionWS15_g170848 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170848 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170848 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170848 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170848 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170848 = float3( 0,0,0 );
				float4 Out_VertexData15_g170848 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170848 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170848 = Data15_g170848.Dummy;
				Out_PositionWS15_g170848 = Data15_g170848.PositionWS;
				Out_PositionWO15_g170848 = Data15_g170848.PositionWO;
				Out_PivotWS15_g170848 = Data15_g170848.PivotWS;
				Out_PivotWO15_g170848 = Data15_g170848.PivotWO;
				Out_NormalWS15_g170848 = Data15_g170848.NormalWS;
				Out_ViewDirWS15_g170848 = Data15_g170848.ViewDirWS;
				Out_VertexData15_g170848 = Data15_g170848.VertexData;
				Out_BoundsData15_g170848 = Data15_g170848.BoundsData;
				}
				half4 Model_VertexMasks386_g170842 = Out_VertexData15_g170848;
				float4 break375_g170842 = Model_VertexMasks386_g170842;
				float4 break33_g170851 = _dryness_vert_mode;
				float temp_output_30_0_g170851 = ( break375_g170842.x * break33_g170851.x );
				float temp_output_29_0_g170851 = ( break375_g170842.y * break33_g170851.y );
				float temp_output_31_0_g170851 = ( break375_g170842.z * break33_g170851.z );
				float temp_output_28_0_g170851 = ( temp_output_30_0_g170851 + temp_output_29_0_g170851 + temp_output_31_0_g170851 + ( break375_g170842.w * break33_g170851.w ) );
				float clampResult17_g170852 = clamp( temp_output_28_0_g170851 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170860 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170860 = ( clampResult17_g170852 - temp_output_7_0_g170860 );
				float lerpResult452_g170842 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170860 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170855 = lerpResult452_g170842;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170855 = ( temp_output_6_0_g170855 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170855 = temp_output_6_0_g170855;
				#endif
				half Dryness_VertMask378_g170842 = staticSwitch14_g170855;
				half Dryness_MaskNoise291_g170842 = 1.0;
				half Custom_Mask411_g170842 = 1.0;
				float temp_output_7_0_g170862 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170862 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170842 * Dryness_MultiMask302_g170842 * Dryness_LumaMask301_g170842 * Dryness_VertMask378_g170842 * Dryness_MaskNoise291_g170842 * Dryness_GlobalMask352_g170842 * Custom_Mask411_g170842 ) - temp_output_7_0_g170862 );
				half Dryness_Mask329_g170842 = saturate( ( ( temp_output_9_0_g170862 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170842 = lerp( Visual_Albedo292_g170842 , ( lerpResult485_g170842 * staticSwitch1_g170857 * (_DrynessColor).rgb ) , Dryness_Mask329_g170842);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170842 = lerpResult336_g170842;
				#else
				float3 staticSwitch356_g170842 = Visual_Albedo292_g170842;
				#endif
				half3 Final_Albedo331_g170842 = staticSwitch356_g170842;
				float3 In_Albedo3_g170845 = Final_Albedo331_g170842;
				float3 In_AlbedoRaw3_g170845 = Out_AlbedoRaw4_g170844;
				float2 In_NormalTS3_g170845 = Out_NormalTS4_g170844;
				float3 In_NormalWS3_g170845 = Out_NormalWS4_g170844;
				half4 Visual_Shader415_g170842 = Out_Shader4_g170844;
				float4 break438_g170842 = Visual_Shader415_g170842;
				float4 appendResult439_g170842 = (float4(break438_g170842.x , break438_g170842.y , break438_g170842.z , ( break438_g170842.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170842 = lerp( Visual_Shader415_g170842 , appendResult439_g170842 , Dryness_Mask329_g170842);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170842 = lerpResult427_g170842;
				#else
				float4 staticSwitch426_g170842 = Visual_Shader415_g170842;
				#endif
				half4 Final_Shader433_g170842 = staticSwitch426_g170842;
				float4 In_Shader3_g170845 = Final_Shader433_g170842;
				float4 In_Emissive3_g170845 = Out_Emissive4_g170844;
				float In_Grayscale3_g170845 = temp_output_280_12_g170842;
				float In_Luminosity3_g170845 = temp_output_280_15_g170842;
				float In_MultiMask3_g170845 = temp_output_280_11_g170842;
				float In_AlphaClip3_g170845 = Out_AlphaClip4_g170844;
				float In_AlphaFade3_g170845 = Out_AlphaFade4_g170844;
				float3 In_Translucency3_g170845 = Out_Translucency4_g170844;
				half Visual_Transmission416_g170842 = Out_Transmission4_g170844;
				float lerpResult421_g170842 = lerp( Visual_Transmission416_g170842 , ( Visual_Transmission416_g170842 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170842);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170842 = lerpResult421_g170842;
				#else
				float staticSwitch418_g170842 = Visual_Transmission416_g170842;
				#endif
				half Final_Transmission425_g170842 = staticSwitch418_g170842;
				float In_Transmission3_g170845 = Final_Transmission425_g170842;
				float In_Thickness3_g170845 = Out_Thickness4_g170844;
				float In_Diffusion3_g170845 = Out_Diffusion4_g170844;
				{
				Data3_g170845.Dummy = In_Dummy3_g170845;
				Data3_g170845.Albedo = In_Albedo3_g170845;
				Data3_g170845.AlbedoRaw = In_AlbedoRaw3_g170845;
				Data3_g170845.NormalTS = In_NormalTS3_g170845;
				Data3_g170845.NormalWS = In_NormalWS3_g170845;
				Data3_g170845.Shader = In_Shader3_g170845;
				Data3_g170845.Emissive= In_Emissive3_g170845;
				Data3_g170845.MultiMask = In_MultiMask3_g170845;
				Data3_g170845.Grayscale = In_Grayscale3_g170845;
				Data3_g170845.Luminosity = In_Luminosity3_g170845;
				Data3_g170845.AlphaClip = In_AlphaClip3_g170845;
				Data3_g170845.AlphaFade = In_AlphaFade3_g170845;
				Data3_g170845.Translucency = In_Translucency3_g170845;
				Data3_g170845.Transmission = In_Transmission3_g170845;
				Data3_g170845.Thickness = In_Thickness3_g170845;
				Data3_g170845.Diffusion = In_Diffusion3_g170845;
				}
				TVEVisualData Data4_g170867 = Data3_g170845;
				float Out_Dummy4_g170867 = 0;
				float3 Out_Albedo4_g170867 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170867 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170867 = float2( 0,0 );
				float3 Out_NormalWS4_g170867 = float3( 0,0,0 );
				float4 Out_Shader4_g170867 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170867 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170867 = 0;
				float Out_Grayscale4_g170867 = 0;
				float Out_Luminosity4_g170867 = 0;
				float Out_AlphaClip4_g170867 = 0;
				float Out_AlphaFade4_g170867 = 0;
				float3 Out_Translucency4_g170867 = float3( 0,0,0 );
				float Out_Transmission4_g170867 = 0;
				float Out_Thickness4_g170867 = 0;
				float Out_Diffusion4_g170867 = 0;
				{
				Out_Dummy4_g170867 = Data4_g170867.Dummy;
				Out_Albedo4_g170867 = Data4_g170867.Albedo;
				Out_AlbedoRaw4_g170867 = Data4_g170867.AlbedoRaw;
				Out_NormalTS4_g170867 = Data4_g170867.NormalTS;
				Out_NormalWS4_g170867 = Data4_g170867.NormalWS;
				Out_Shader4_g170867 = Data4_g170867.Shader;
				Out_Emissive4_g170867= Data4_g170867.Emissive;
				Out_MultiMask4_g170867 = Data4_g170867.MultiMask;
				Out_Grayscale4_g170867 = Data4_g170867.Grayscale;
				Out_Luminosity4_g170867= Data4_g170867.Luminosity;
				Out_AlphaClip4_g170867 = Data4_g170867.AlphaClip;
				Out_AlphaFade4_g170867 = Data4_g170867.AlphaFade;
				Out_Translucency4_g170867 = Data4_g170867.Translucency;
				Out_Transmission4_g170867 = Data4_g170867.Transmission;
				Out_Thickness4_g170867 = Data4_g170867.Thickness;
				Out_Diffusion4_g170867 = Data4_g170867.Diffusion;
				}
				half3 Visual_Albedo127_g170866 = Out_Albedo4_g170867;
				float4 vertexToFrag24_g170817 = IN.ase_texcoord10;
				half4 Interp_Data1269 = vertexToFrag24_g170817;
				float clampResult208_g170866 = clamp( (Interp_Data1269).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170866 = ( Visual_Albedo127_g170866 + ( ( Visual_Albedo127_g170866 * Visual_Albedo127_g170866 * 200.0 * _motion_highlight_color ) * clampResult208_g170866 ) );
				#else
				float3 staticSwitch214_g170866 = Visual_Albedo127_g170866;
				#endif
				half3 Final_Albedo160_g170866 = staticSwitch214_g170866;
				float3 In_Albedo3_g170868 = Final_Albedo160_g170866;
				float3 In_AlbedoRaw3_g170868 = Out_AlbedoRaw4_g170867;
				float2 In_NormalTS3_g170868 = Out_NormalTS4_g170867;
				float3 In_NormalWS3_g170868 = Out_NormalWS4_g170867;
				float4 In_Shader3_g170868 = Out_Shader4_g170867;
				float4 In_Emissive3_g170868 = Out_Emissive4_g170867;
				float In_Grayscale3_g170868 = Out_Grayscale4_g170867;
				float In_Luminosity3_g170868 = Out_Luminosity4_g170867;
				float In_MultiMask3_g170868 = Out_MultiMask4_g170867;
				float In_AlphaClip3_g170868 = Out_AlphaClip4_g170867;
				float In_AlphaFade3_g170868 = Out_AlphaFade4_g170867;
				float3 In_Translucency3_g170868 = Out_Translucency4_g170867;
				float In_Transmission3_g170868 = Out_Transmission4_g170867;
				float In_Thickness3_g170868 = Out_Thickness4_g170867;
				float In_Diffusion3_g170868 = Out_Diffusion4_g170867;
				{
				Data3_g170868.Dummy = In_Dummy3_g170868;
				Data3_g170868.Albedo = In_Albedo3_g170868;
				Data3_g170868.AlbedoRaw = In_AlbedoRaw3_g170868;
				Data3_g170868.NormalTS = In_NormalTS3_g170868;
				Data3_g170868.NormalWS = In_NormalWS3_g170868;
				Data3_g170868.Shader = In_Shader3_g170868;
				Data3_g170868.Emissive= In_Emissive3_g170868;
				Data3_g170868.MultiMask = In_MultiMask3_g170868;
				Data3_g170868.Grayscale = In_Grayscale3_g170868;
				Data3_g170868.Luminosity = In_Luminosity3_g170868;
				Data3_g170868.AlphaClip = In_AlphaClip3_g170868;
				Data3_g170868.AlphaFade = In_AlphaFade3_g170868;
				Data3_g170868.Translucency = In_Translucency3_g170868;
				Data3_g170868.Transmission = In_Transmission3_g170868;
				Data3_g170868.Thickness = In_Thickness3_g170868;
				Data3_g170868.Diffusion = In_Diffusion3_g170868;
				}
				TVEVisualData Data4_g170870 = Data3_g170868;
				float Out_Dummy4_g170870 = 0;
				float3 Out_Albedo4_g170870 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170870 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170870 = float2( 0,0 );
				float3 Out_NormalWS4_g170870 = float3( 0,0,0 );
				float4 Out_Shader4_g170870 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170870 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170870 = 0;
				float Out_Grayscale4_g170870 = 0;
				float Out_Luminosity4_g170870 = 0;
				float Out_AlphaClip4_g170870 = 0;
				float Out_AlphaFade4_g170870 = 0;
				float3 Out_Translucency4_g170870 = float3( 0,0,0 );
				float Out_Transmission4_g170870 = 0;
				float Out_Thickness4_g170870 = 0;
				float Out_Diffusion4_g170870 = 0;
				{
				Out_Dummy4_g170870 = Data4_g170870.Dummy;
				Out_Albedo4_g170870 = Data4_g170870.Albedo;
				Out_AlbedoRaw4_g170870 = Data4_g170870.AlbedoRaw;
				Out_NormalTS4_g170870 = Data4_g170870.NormalTS;
				Out_NormalWS4_g170870 = Data4_g170870.NormalWS;
				Out_Shader4_g170870 = Data4_g170870.Shader;
				Out_Emissive4_g170870= Data4_g170870.Emissive;
				Out_MultiMask4_g170870 = Data4_g170870.MultiMask;
				Out_Grayscale4_g170870 = Data4_g170870.Grayscale;
				Out_Luminosity4_g170870= Data4_g170870.Luminosity;
				Out_AlphaClip4_g170870 = Data4_g170870.AlphaClip;
				Out_AlphaFade4_g170870 = Data4_g170870.AlphaFade;
				Out_Translucency4_g170870 = Data4_g170870.Translucency;
				Out_Transmission4_g170870 = Data4_g170870.Transmission;
				Out_Thickness4_g170870 = Data4_g170870.Thickness;
				Out_Diffusion4_g170870 = Data4_g170870.Diffusion;
				}
				half3 Visual_Albedo127_g170869 = Out_Albedo4_g170870;
				float3 temp_output_622_0_g170869 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170873) = _OverlayAlbedoTex;
				float localFilterTexture19_g170885 = ( 0.0 );
				SamplerState SS19_g170885 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170885 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170885 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170885 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170885 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170885 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170885 = SamplerDefault19_g170885;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170885 = SamplerDefault19_g170885;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170885 = SamplerPoint19_g170885;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170885 = SamplerLow19_g170885;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170885 = SamplerMedium19_g170885;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170885 = SamplerHigh19_g170885;
				#endif
				}
				SamplerState Sampler238_g170873 = SS19_g170885;
				float4 temp_output_6_0_g170874 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170874 = ( temp_output_6_0_g170874 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170874 = temp_output_6_0_g170874;
				#endif
				half4 Overlay_Coords639_g170869 = staticSwitch14_g170874;
				float4 temp_output_37_0_g170873 = Overlay_Coords639_g170869;
				half4 Coords238_g170873 = temp_output_37_0_g170873;
				TVEModelData Data15_g170887 = Data16_g170483;
				float Out_Dummy15_g170887 = 0;
				float3 Out_PositionWS15_g170887 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170887 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170887 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170887 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170887 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170887 = float3( 0,0,0 );
				float4 Out_VertexData15_g170887 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170887 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170887 = Data15_g170887.Dummy;
				Out_PositionWS15_g170887 = Data15_g170887.PositionWS;
				Out_PositionWO15_g170887 = Data15_g170887.PositionWO;
				Out_PivotWS15_g170887 = Data15_g170887.PivotWS;
				Out_PivotWO15_g170887 = Data15_g170887.PivotWO;
				Out_NormalWS15_g170887 = Data15_g170887.NormalWS;
				Out_ViewDirWS15_g170887 = Data15_g170887.ViewDirWS;
				Out_VertexData15_g170887 = Data15_g170887.VertexData;
				Out_BoundsData15_g170887 = Data15_g170887.BoundsData;
				}
				half3 Model_PositionWO602_g170869 = Out_PositionWO15_g170887;
				float3 temp_output_279_0_g170873 = Model_PositionWO602_g170869;
				half3 WorldPosition238_g170873 = temp_output_279_0_g170873;
				half4 localSamplePlanar2D238_g170873 = SamplePlanar2D( Texture238_g170873 , Sampler238_g170873 , Coords238_g170873 , WorldPosition238_g170873 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170873) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170873 = SS19_g170885;
				half4 Coords246_g170873 = temp_output_37_0_g170873;
				half3 WorldPosition246_g170873 = temp_output_279_0_g170873;
				half3 Model_NormalWS712_g170869 = Out_NormalWS15_g170887;
				float3 temp_output_280_0_g170873 = Model_NormalWS712_g170869;
				half3 WorldNormal246_g170873 = temp_output_280_0_g170873;
				half4 localSamplePlanar3D246_g170873 = SamplePlanar3D( Texture246_g170873 , Sampler246_g170873 , Coords246_g170873 , WorldPosition246_g170873 , WorldNormal246_g170873 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170873) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170873 = SS19_g170885;
				float4 Coords234_g170873 = temp_output_37_0_g170873;
				float3 WorldPosition234_g170873 = temp_output_279_0_g170873;
				float4 localSampleStochastic2D234_g170873 = SampleStochastic2D( Texture234_g170873 , Sampler234_g170873 , Coords234_g170873 , WorldPosition234_g170873 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170873) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170873 = SS19_g170885;
				half4 Coords263_g170873 = temp_output_37_0_g170873;
				half3 WorldPosition263_g170873 = temp_output_279_0_g170873;
				half3 WorldNormal263_g170873 = temp_output_280_0_g170873;
				half4 localSampleStochastic3D263_g170873 = SampleStochastic3D( Texture263_g170873 , Sampler263_g170873 , Coords263_g170873 , WorldPosition263_g170873 , WorldNormal263_g170873 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170869 = localSamplePlanar2D238_g170873;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170869 = localSamplePlanar3D246_g170873;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170869 = localSampleStochastic2D234_g170873;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170869 = localSampleStochastic3D263_g170873;
				#else
				float4 staticSwitch676_g170869 = localSamplePlanar2D238_g170873;
				#endif
				half3 Overlay_Albedo526_g170869 = (staticSwitch676_g170869).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170869 = ( temp_output_622_0_g170869 * Overlay_Albedo526_g170869 );
				#else
				float3 staticSwitch578_g170869 = temp_output_622_0_g170869;
				#endif
				float3 temp_output_6_0_g170888 = staticSwitch578_g170869;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170888 = ( temp_output_6_0_g170888 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170888 = temp_output_6_0_g170888;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170877) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170877 = sampler_Linear_Repeat;
				float4 appendResult863_g170869 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170877 = appendResult863_g170869;
				half4 Coords246_g170877 = temp_output_37_0_g170877;
				float3 temp_output_279_0_g170877 = Model_PositionWO602_g170869;
				half3 WorldPosition246_g170877 = temp_output_279_0_g170877;
				float3 temp_output_280_0_g170877 = Model_NormalWS712_g170869;
				half3 WorldNormal246_g170877 = temp_output_280_0_g170877;
				half4 localSamplePlanar3D246_g170877 = SamplePlanar3D( Texture246_g170877 , Sampler246_g170877 , Coords246_g170877 , WorldPosition246_g170877 , WorldNormal246_g170877 );
				half Overlay_GlitterTex854_g170869 = (localSamplePlanar3D246_g170877).x;
				float3 ase_positionWS = IN.ase_texcoord12.xyz;
				UNITY_LIGHT_ATTENUATION(ase_atten, IN, ase_positionWS)
				float lerpResult922_g170869 = lerp( 1.0 , ase_atten , _OverlayGlitterAttenValue);
				half3 Model_PositionWS879_g170869 = Out_PositionWS15_g170887;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170869 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170869 * lerpResult922_g170869 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170869 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170869 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170869 = staticSwitch868_g170869;
				half Overlay_TexMask908_g170869 = 1.0;
				float3 temp_output_739_21_g170869 = Out_NormalWS4_g170870;
				half3 Visual_NormalWS749_g170869 = temp_output_739_21_g170869;
				float clampResult17_g170894 = clamp( saturate( (Visual_NormalWS749_g170869).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170898 = _OverlayProjRemap.x;
				float temp_output_9_0_g170898 = ( clampResult17_g170894 - temp_output_7_0_g170898 );
				float lerpResult842_g170869 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170898 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170869 = lerpResult842_g170869;
				float temp_output_739_15_g170869 = Out_Luminosity4_g170870;
				half Visual_Luminosity654_g170869 = temp_output_739_15_g170869;
				float clampResult17_g170902 = clamp( Visual_Luminosity654_g170869 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170903 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170903 = ( clampResult17_g170902 - temp_output_7_0_g170903 );
				float lerpResult587_g170869 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170903 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170869 = lerpResult587_g170869;
				half4 Model_VertexMasks791_g170869 = Out_VertexData15_g170887;
				float4 break792_g170869 = Model_VertexMasks791_g170869;
				float4 break33_g170889 = _overlay_vert_mode;
				float temp_output_30_0_g170889 = ( break792_g170869.x * break33_g170889.x );
				float temp_output_29_0_g170889 = ( break792_g170869.y * break33_g170889.y );
				float temp_output_31_0_g170889 = ( break792_g170869.z * break33_g170889.z );
				float temp_output_28_0_g170889 = ( temp_output_30_0_g170889 + temp_output_29_0_g170889 + temp_output_31_0_g170889 + ( break792_g170869.w * break33_g170889.w ) );
				float clampResult17_g170890 = clamp( temp_output_28_0_g170889 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170899 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170899 = ( clampResult17_g170890 - temp_output_7_0_g170899 );
				float lerpResult881_g170869 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170899 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170895 = lerpResult881_g170869;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170895 = ( temp_output_6_0_g170895 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170895 = temp_output_6_0_g170895;
				#endif
				half Overlay_VertMask801_g170869 = staticSwitch14_g170895;
				half Overlay_MaskNoise427_g170869 = 1.0;
				TVEGlobalData Data15_g170871 = Data204_g170496;
				float Out_Dummy15_g170871 = 0;
				float4 Out_CoatParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170871 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170871 = Data15_g170871.Dummy;
				Out_CoatParams15_g170871 = Data15_g170871.CoatParams;
				Out_PaintParams15_g170871 = Data15_g170871.PaintParams;
				Out_GlowParams15_g170871 = Data15_g170871.GlowParams;
				Out_AtmoParams15_g170871= Data15_g170871.AtmoParams;
				Out_FadeParams15_g170871= Data15_g170871.FadeParams;
				Out_FormParams15_g170871 = Data15_g170871.FormParams;
				Out_FlowParams15_g170871 = Data15_g170871.FlowParams;
				}
				half4 Global_AtmoParams516_g170869 = Out_AtmoParams15_g170871;
				float temp_output_6_0_g170904 = (Global_AtmoParams516_g170869).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170904 = ( temp_output_6_0_g170904 + ( _OverlayElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170904 = temp_output_6_0_g170904;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170869 = staticSwitch14_g170904;
				#else
				float staticSwitch705_g170869 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170869 = lerp( 1.0 , ( staticSwitch705_g170869 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170869 = lerpResult937_g170869;
				half Custom_Mask646_g170869 = 1.0;
				float temp_output_7_0_g170901 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170901 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170869 * Overlay_MaskProj457_g170869 * Overlay_MaskLuma438_g170869 * Overlay_VertMask801_g170869 * Overlay_MaskNoise427_g170869 * Overlay_MaskGlobal429_g170869 * Custom_Mask646_g170869 ) - temp_output_7_0_g170901 );
				half Overlay_Mask494_g170869 = saturate( ( ( temp_output_9_0_g170901 / ( _OverlayBlendRemap.y - temp_output_7_0_g170901 ) ) + 0.0001 ) );
				float3 lerpResult467_g170869 = lerp( Visual_Albedo127_g170869 , ( staticSwitch14_g170888 + Overlay_GlitterColor865_g170869 ) , Overlay_Mask494_g170869);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170869 = lerpResult467_g170869;
				#else
				float3 staticSwitch577_g170869 = Visual_Albedo127_g170869;
				#endif
				half3 Final_Albedo493_g170869 = staticSwitch577_g170869;
				float3 In_Albedo3_g170872 = Final_Albedo493_g170869;
				float3 In_AlbedoRaw3_g170872 = Out_AlbedoRaw4_g170870;
				half2 Visual_NormalTS535_g170869 = Out_NormalTS4_g170870;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170875) = _OverlayNormalTex;
				float localFilterTexture29_g170886 = ( 0.0 );
				SamplerState SS29_g170886 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170886 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170886 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170886 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170886 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170886 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170886 = SamplerDefault29_g170886;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170886 = SamplerDefault29_g170886;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170886 = SamplerPoint29_g170886;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170886 = SamplerLow29_g170886;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170886 = SamplerMedium29_g170886;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170886 = SamplerHigh29_g170886;
				#endif
				}
				SamplerState Sampler238_g170875 = SS29_g170886;
				float4 temp_output_37_0_g170875 = Overlay_Coords639_g170869;
				half4 Coords238_g170875 = temp_output_37_0_g170875;
				float3 temp_output_279_0_g170875 = Model_PositionWO602_g170869;
				half3 WorldPosition238_g170875 = temp_output_279_0_g170875;
				half4 localSamplePlanar2D238_g170875 = SamplePlanar2D( Texture238_g170875 , Sampler238_g170875 , Coords238_g170875 , WorldPosition238_g170875 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170875) = _OverlayNormalTex;
				SamplerState Sampler246_g170875 = SS29_g170886;
				half4 Coords246_g170875 = temp_output_37_0_g170875;
				half3 WorldPosition246_g170875 = temp_output_279_0_g170875;
				float3 temp_output_280_0_g170875 = Model_NormalWS712_g170869;
				half3 WorldNormal246_g170875 = temp_output_280_0_g170875;
				half4 localSamplePlanar3D246_g170875 = SamplePlanar3D( Texture246_g170875 , Sampler246_g170875 , Coords246_g170875 , WorldPosition246_g170875 , WorldNormal246_g170875 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170875) = _OverlayNormalTex;
				SamplerState Sampler234_g170875 = SS29_g170886;
				float4 Coords234_g170875 = temp_output_37_0_g170875;
				float3 WorldPosition234_g170875 = temp_output_279_0_g170875;
				float4 localSampleStochastic2D234_g170875 = SampleStochastic2D( Texture234_g170875 , Sampler234_g170875 , Coords234_g170875 , WorldPosition234_g170875 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170875) = _OverlayNormalTex;
				SamplerState Sampler263_g170875 = SS29_g170886;
				half4 Coords263_g170875 = temp_output_37_0_g170875;
				half3 WorldPosition263_g170875 = temp_output_279_0_g170875;
				half3 WorldNormal263_g170875 = temp_output_280_0_g170875;
				half4 localSampleStochastic3D263_g170875 = SampleStochastic3D( Texture263_g170875 , Sampler263_g170875 , Coords263_g170875 , WorldPosition263_g170875 , WorldNormal263_g170875 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170869 = localSamplePlanar2D238_g170875;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170869 = localSamplePlanar3D246_g170875;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170869 = localSampleStochastic2D234_g170875;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170869 = localSampleStochastic3D263_g170875;
				#else
				float4 staticSwitch686_g170869 = localSamplePlanar2D238_g170875;
				#endif
				half4 Normal_Packed45_g170879 = staticSwitch686_g170869;
				float2 appendResult58_g170879 = (float2(( (Normal_Packed45_g170879).x * (Normal_Packed45_g170879).w ) , (Normal_Packed45_g170879).y));
				half2 Normal_Default50_g170879 = appendResult58_g170879;
				half2 Normal_ASTC41_g170879 = (Normal_Packed45_g170879).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170879 = Normal_ASTC41_g170879;
				#else
				float2 staticSwitch38_g170879 = Normal_Default50_g170879;
				#endif
				half2 Normal_NO_DTX544_g170879 = (Normal_Packed45_g170879).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170879 = Normal_NO_DTX544_g170879;
				#else
				float2 staticSwitch37_g170879 = staticSwitch38_g170879;
				#endif
				half2 Normal_Planar45_g170878 = (staticSwitch37_g170879*2.0 + -1.0);
				float2 break71_g170878 = Normal_Planar45_g170878;
				float3 appendResult72_g170878 = (float3(break71_g170878.x , 0.0 , break71_g170878.y));
				half2 Overlay_Normal528_g170869 = (mul( ase_worldToTangent, appendResult72_g170878 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170869 = Overlay_Normal528_g170869;
				#else
				float2 staticSwitch579_g170869 = Visual_NormalTS535_g170869;
				#endif
				float2 lerpResult551_g170869 = lerp( Visual_NormalTS535_g170869 , ( staticSwitch579_g170869 * _OverlayNormalValue ) , Overlay_Mask494_g170869);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170869 = lerpResult551_g170869;
				#else
				float2 staticSwitch583_g170869 = Visual_NormalTS535_g170869;
				#endif
				half2 Final_NormalTS499_g170869 = staticSwitch583_g170869;
				float2 In_NormalTS3_g170872 = Final_NormalTS499_g170869;
				float3 In_NormalWS3_g170872 = temp_output_739_21_g170869;
				half4 Visual_Masks536_g170869 = Out_Shader4_g170870;
				float4 appendResult585_g170869 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170869 = lerp( Visual_Masks536_g170869 , appendResult585_g170869 , Overlay_Mask494_g170869);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170869 = lerpResult584_g170869;
				#else
				float4 staticSwitch586_g170869 = Visual_Masks536_g170869;
				#endif
				half4 Final_Masks482_g170869 = staticSwitch586_g170869;
				float4 In_Shader3_g170872 = Final_Masks482_g170869;
				float4 In_Emissive3_g170872 = Out_Emissive4_g170870;
				float temp_output_739_12_g170869 = Out_Grayscale4_g170870;
				float In_Grayscale3_g170872 = temp_output_739_12_g170869;
				float In_Luminosity3_g170872 = temp_output_739_15_g170869;
				float In_MultiMask3_g170872 = Out_MultiMask4_g170870;
				float In_AlphaClip3_g170872 = Out_AlphaClip4_g170870;
				float In_AlphaFade3_g170872 = Out_AlphaFade4_g170870;
				float3 In_Translucency3_g170872 = Out_Translucency4_g170870;
				half Visual_Transmission699_g170869 = Out_Transmission4_g170870;
				float lerpResult746_g170869 = lerp( Visual_Transmission699_g170869 , ( Visual_Transmission699_g170869 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170869 * Overlay_MaskNoise427_g170869 * Overlay_MaskGlobal429_g170869 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170869 = lerpResult746_g170869;
				#else
				float staticSwitch703_g170869 = Visual_Transmission699_g170869;
				#endif
				half Final_Transmission702_g170869 = staticSwitch703_g170869;
				float In_Transmission3_g170872 = Final_Transmission702_g170869;
				float In_Thickness3_g170872 = Out_Thickness4_g170870;
				float In_Diffusion3_g170872 = Out_Diffusion4_g170870;
				{
				Data3_g170872.Dummy = In_Dummy3_g170872;
				Data3_g170872.Albedo = In_Albedo3_g170872;
				Data3_g170872.AlbedoRaw = In_AlbedoRaw3_g170872;
				Data3_g170872.NormalTS = In_NormalTS3_g170872;
				Data3_g170872.NormalWS = In_NormalWS3_g170872;
				Data3_g170872.Shader = In_Shader3_g170872;
				Data3_g170872.Emissive= In_Emissive3_g170872;
				Data3_g170872.MultiMask = In_MultiMask3_g170872;
				Data3_g170872.Grayscale = In_Grayscale3_g170872;
				Data3_g170872.Luminosity = In_Luminosity3_g170872;
				Data3_g170872.AlphaClip = In_AlphaClip3_g170872;
				Data3_g170872.AlphaFade = In_AlphaFade3_g170872;
				Data3_g170872.Translucency = In_Translucency3_g170872;
				Data3_g170872.Transmission = In_Transmission3_g170872;
				Data3_g170872.Thickness = In_Thickness3_g170872;
				Data3_g170872.Diffusion = In_Diffusion3_g170872;
				}
				TVEVisualData Data4_g170907 = Data3_g170872;
				float Out_Dummy4_g170907 = 0;
				float3 Out_Albedo4_g170907 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170907 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170907 = float2( 0,0 );
				float3 Out_NormalWS4_g170907 = float3( 0,0,0 );
				float4 Out_Shader4_g170907 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170907 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170907 = 0;
				float Out_Grayscale4_g170907 = 0;
				float Out_Luminosity4_g170907 = 0;
				float Out_AlphaClip4_g170907 = 0;
				float Out_AlphaFade4_g170907 = 0;
				float3 Out_Translucency4_g170907 = float3( 0,0,0 );
				float Out_Transmission4_g170907 = 0;
				float Out_Thickness4_g170907 = 0;
				float Out_Diffusion4_g170907 = 0;
				{
				Out_Dummy4_g170907 = Data4_g170907.Dummy;
				Out_Albedo4_g170907 = Data4_g170907.Albedo;
				Out_AlbedoRaw4_g170907 = Data4_g170907.AlbedoRaw;
				Out_NormalTS4_g170907 = Data4_g170907.NormalTS;
				Out_NormalWS4_g170907 = Data4_g170907.NormalWS;
				Out_Shader4_g170907 = Data4_g170907.Shader;
				Out_Emissive4_g170907= Data4_g170907.Emissive;
				Out_MultiMask4_g170907 = Data4_g170907.MultiMask;
				Out_Grayscale4_g170907 = Data4_g170907.Grayscale;
				Out_Luminosity4_g170907= Data4_g170907.Luminosity;
				Out_AlphaClip4_g170907 = Data4_g170907.AlphaClip;
				Out_AlphaFade4_g170907 = Data4_g170907.AlphaFade;
				Out_Translucency4_g170907 = Data4_g170907.Translucency;
				Out_Transmission4_g170907 = Data4_g170907.Transmission;
				Out_Thickness4_g170907 = Data4_g170907.Thickness;
				Out_Diffusion4_g170907 = Data4_g170907.Diffusion;
				}
				half3 Visual_Albedo127_g170906 = Out_Albedo4_g170907;
				TVEGlobalData Data15_g170912 = Data204_g170496;
				float Out_Dummy15_g170912 = 0;
				float4 Out_CoatParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170912 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170912 = Data15_g170912.Dummy;
				Out_CoatParams15_g170912 = Data15_g170912.CoatParams;
				Out_PaintParams15_g170912 = Data15_g170912.PaintParams;
				Out_GlowParams15_g170912 = Data15_g170912.GlowParams;
				Out_AtmoParams15_g170912= Data15_g170912.AtmoParams;
				Out_FadeParams15_g170912= Data15_g170912.FadeParams;
				Out_FormParams15_g170912 = Data15_g170912.FormParams;
				Out_FlowParams15_g170912 = Data15_g170912.FlowParams;
				}
				half4 Global_AtmoParams516_g170906 = Out_AtmoParams15_g170912;
				float4 temp_output_6_0_g170933 = Global_AtmoParams516_g170906;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170933 = ( temp_output_6_0_g170933 + ( _WetnessElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170933 = temp_output_6_0_g170933;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170906 = staticSwitch14_g170933;
				#else
				float4 staticSwitch663_g170906 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170906 = lerp( float2( 1,1 ) , (( staticSwitch663_g170906 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170906 = lerpResult1121_g170906;
				half Global_Wetness429_g170906 = break1123_g170906.x;
				half Wetness_Value1042_g170906 = ( _WetnessIntensityValue * Global_Wetness429_g170906 );
				TVEModelData Data15_g170918 = Data16_g170483;
				float Out_Dummy15_g170918 = 0;
				float3 Out_PositionWS15_g170918 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170918 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170918 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170918 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170918 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170918 = float3( 0,0,0 );
				float4 Out_VertexData15_g170918 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170918 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170918 = Data15_g170918.Dummy;
				Out_PositionWS15_g170918 = Data15_g170918.PositionWS;
				Out_PositionWO15_g170918 = Data15_g170918.PositionWO;
				Out_PivotWS15_g170918 = Data15_g170918.PivotWS;
				Out_PivotWO15_g170918 = Data15_g170918.PivotWO;
				Out_NormalWS15_g170918 = Data15_g170918.NormalWS;
				Out_ViewDirWS15_g170918 = Data15_g170918.ViewDirWS;
				Out_VertexData15_g170918 = Data15_g170918.VertexData;
				Out_BoundsData15_g170918 = Data15_g170918.BoundsData;
				}
				half4 Model_VertexData1030_g170906 = Out_VertexData15_g170918;
				float4 break1019_g170906 = Model_VertexData1030_g170906;
				float4 break33_g170921 = _wetness_vert_mode;
				float temp_output_30_0_g170921 = ( break1019_g170906.x * break33_g170921.x );
				float temp_output_29_0_g170921 = ( break1019_g170906.y * break33_g170921.y );
				float temp_output_31_0_g170921 = ( break1019_g170906.z * break33_g170921.z );
				float temp_output_28_0_g170921 = ( temp_output_30_0_g170921 + temp_output_29_0_g170921 + temp_output_31_0_g170921 + ( break1019_g170906.w * break33_g170921.w ) );
				float clampResult17_g170920 = clamp( temp_output_28_0_g170921 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170929 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170929 = ( clampResult17_g170920 - temp_output_7_0_g170929 );
				float lerpResult1026_g170906 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170929 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170922 = lerpResult1026_g170906;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170922 = ( temp_output_6_0_g170922 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170922 = temp_output_6_0_g170922;
				#endif
				float temp_output_1025_0_g170906 = staticSwitch14_g170922;
				half Wetness_VertMask1024_g170906 = temp_output_1025_0_g170906;
				float temp_output_1043_0_g170906 = ( Wetness_Value1042_g170906 * Wetness_VertMask1024_g170906 );
				half Wetness_Mask866_g170906 = temp_output_1043_0_g170906;
				float4 break1083_g170906 = Model_VertexData1030_g170906;
				float4 break33_g170924 = _wetness_water_vert_mode;
				float temp_output_30_0_g170924 = ( break1083_g170906.x * break33_g170924.x );
				float temp_output_29_0_g170924 = ( break1083_g170906.y * break33_g170924.y );
				float temp_output_31_0_g170924 = ( break1083_g170906.z * break33_g170924.z );
				float temp_output_28_0_g170924 = ( temp_output_30_0_g170924 + temp_output_29_0_g170924 + temp_output_31_0_g170924 + ( break1083_g170906.w * break33_g170924.w ) );
				float clampResult17_g170923 = clamp( temp_output_28_0_g170924 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170930 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170930 = ( clampResult17_g170923 - temp_output_7_0_g170930 );
				float lerpResult1089_g170906 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170930 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170925 = lerpResult1089_g170906;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170925 = ( temp_output_6_0_g170925 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170925 = temp_output_6_0_g170925;
				#endif
				float temp_output_1091_0_g170906 = staticSwitch14_g170925;
				half Water_VertMask1094_g170906 = temp_output_1091_0_g170906;
				half4 Visual_Masks536_g170906 = Out_Shader4_g170907;
				float lerpResult1013_g170906 = lerp( 1.0 , (Visual_Masks536_g170906).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170906 = lerpResult1013_g170906;
				float clampResult17_g170919 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170906 * Water_VertMask1094_g170906 ) - Water_HeightMask782_g170906 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170932 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170932 = ( clampResult17_g170919 - temp_output_7_0_g170932 );
				half3 Model_NormalWS798_g170906 = Out_NormalWS15_g170918;
				float temp_output_786_0_g170906 = saturate( (Model_NormalWS798_g170906).y );
				half Wetness_ProjMask790_g170906 = temp_output_786_0_g170906;
				half Water_Mask760_g170906 = ( saturate( ( ( temp_output_9_0_g170932 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170906 );
				float3 lerpResult918_g170906 = lerp( Visual_Albedo127_g170906 , ( Visual_Albedo127_g170906 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170906);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170906 = lerpResult918_g170906;
				#else
				float3 staticSwitch946_g170906 = Visual_Albedo127_g170906;
				#endif
				float3 lerpResult768_g170906 = lerp( staticSwitch946_g170906 , ( staticSwitch946_g170906 * staticSwitch946_g170906 ) , _WetnessContrastValue);
				float3 lerpResult651_g170906 = lerp( Visual_Albedo127_g170906 , lerpResult768_g170906 , Wetness_Mask866_g170906);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170906 = lerpResult651_g170906;
				#else
				float3 staticSwitch577_g170906 = Visual_Albedo127_g170906;
				#endif
				half3 Final_Albedo493_g170906 = staticSwitch577_g170906;
				float3 In_Albedo3_g170908 = Final_Albedo493_g170906;
				float3 In_AlbedoRaw3_g170908 = Out_AlbedoRaw4_g170907;
				half2 Visual_Normal535_g170906 = Out_NormalTS4_g170907;
				float lerpResult877_g170906 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170906 * Water_Mask760_g170906 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170906 = ( Visual_Normal535_g170906 * lerpResult877_g170906 );
				#else
				float2 staticSwitch957_g170906 = Visual_Normal535_g170906;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170916) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170916 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170906 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170916 = appendResult924_g170906;
				half4 Coords238_g170916 = temp_output_37_0_g170916;
				half3 Model_PositionWO602_g170906 = Out_PositionWO15_g170918;
				float3 temp_output_279_0_g170916 = Model_PositionWO602_g170906;
				half3 WorldPosition238_g170916 = temp_output_279_0_g170916;
				half4 localSamplePlanar2D238_g170916 = SamplePlanar2D( Texture238_g170916 , Sampler238_g170916 , Coords238_g170916 , WorldPosition238_g170916 );
				float4 temp_output_1010_0_g170906 = localSamplePlanar2D238_g170916;
				half2 Rain_DropsNormal919_g170906 = (temp_output_1010_0_g170906).zw;
				float2 temp_output_903_0_g170906 = (Rain_DropsNormal919_g170906*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170906 = (temp_output_1010_0_g170906).xy;
				float2 lerpResult904_g170906 = lerp( temp_output_903_0_g170906 , (Rain_RingsNormal713_g170906*2.0 + -1.0) , ( Water_Mask760_g170906 * Water_Mask760_g170906 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170906 = lerpResult904_g170906;
				#else
				float2 staticSwitch960_g170906 = temp_output_903_0_g170906;
				#endif
				half2 Rain_Drops1002_g170906 = ( staticSwitch960_g170906 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170906 = Out_PositionWS15_g170918;
				half Global_Rain955_g170906 = break1123_g170906.y;
				half Rain_Value1067_g170906 = Global_Rain955_g170906;
				float4 break1097_g170906 = Model_VertexData1030_g170906;
				float4 break33_g170927 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170927 = ( break1097_g170906.x * break33_g170927.x );
				float temp_output_29_0_g170927 = ( break1097_g170906.y * break33_g170927.y );
				float temp_output_31_0_g170927 = ( break1097_g170906.z * break33_g170927.z );
				float temp_output_28_0_g170927 = ( temp_output_30_0_g170927 + temp_output_29_0_g170927 + temp_output_31_0_g170927 + ( break1097_g170906.w * break33_g170927.w ) );
				float clampResult17_g170926 = clamp( temp_output_28_0_g170927 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170931 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170931 = ( clampResult17_g170926 - temp_output_7_0_g170931 );
				float lerpResult1100_g170906 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170931 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170928 = lerpResult1100_g170906;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170928 = ( temp_output_6_0_g170928 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170928 = temp_output_6_0_g170928;
				#endif
				float temp_output_1101_0_g170906 = staticSwitch14_g170928;
				half Rain_VertMask1108_g170906 = temp_output_1101_0_g170906;
				half Rain_Mask999_g170906 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170906 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170906 * Rain_VertMask1108_g170906 );
				half2 Normal_Planar45_g170915 = ( Rain_Drops1002_g170906 * Rain_Mask999_g170906 * Wetness_ProjMask790_g170906 );
				float2 break71_g170915 = Normal_Planar45_g170915;
				float3 appendResult72_g170915 = (float3(break71_g170915.x , 0.0 , break71_g170915.y));
				half2 Wetness_Normal526_g170906 = (mul( ase_worldToTangent, appendResult72_g170915 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170906 = Wetness_Normal526_g170906;
				#else
				float2 staticSwitch583_g170906 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170906 = ( staticSwitch957_g170906 + staticSwitch583_g170906 );
				#else
				float2 staticSwitch774_g170906 = Visual_Normal535_g170906;
				#endif
				half2 Final_Normal499_g170906 = staticSwitch774_g170906;
				float2 In_NormalTS3_g170908 = Final_Normal499_g170906;
				float3 In_NormalWS3_g170908 = Out_NormalWS4_g170907;
				float4 break658_g170906 = Visual_Masks536_g170906;
				float temp_output_935_0_g170906 = ( Wetness_Mask866_g170906 * _WetnessSmoothnessValue );
				float lerpResult941_g170906 = lerp( temp_output_935_0_g170906 , 2.0 , Water_Mask760_g170906);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170906 = lerpResult941_g170906;
				#else
				float staticSwitch959_g170906 = temp_output_935_0_g170906;
				#endif
				float4 appendResult661_g170906 = (float4(break658_g170906.x , break658_g170906.y , break658_g170906.z , saturate( ( break658_g170906.w + staticSwitch959_g170906 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170906 = appendResult661_g170906;
				#else
				float4 staticSwitch586_g170906 = Visual_Masks536_g170906;
				#endif
				half4 Final_Masks482_g170906 = staticSwitch586_g170906;
				float4 In_Shader3_g170908 = Final_Masks482_g170906;
				float4 In_Emissive3_g170908 = Out_Emissive4_g170907;
				float In_Grayscale3_g170908 = Out_Grayscale4_g170907;
				float In_Luminosity3_g170908 = Out_Luminosity4_g170907;
				float In_MultiMask3_g170908 = Out_MultiMask4_g170907;
				float In_AlphaClip3_g170908 = Out_AlphaClip4_g170907;
				float In_AlphaFade3_g170908 = Out_AlphaFade4_g170907;
				float3 In_Translucency3_g170908 = Out_Translucency4_g170907;
				float In_Transmission3_g170908 = Out_Transmission4_g170907;
				float In_Thickness3_g170908 = Out_Thickness4_g170907;
				float In_Diffusion3_g170908 = Out_Diffusion4_g170907;
				{
				Data3_g170908.Dummy = In_Dummy3_g170908;
				Data3_g170908.Albedo = In_Albedo3_g170908;
				Data3_g170908.AlbedoRaw = In_AlbedoRaw3_g170908;
				Data3_g170908.NormalTS = In_NormalTS3_g170908;
				Data3_g170908.NormalWS = In_NormalWS3_g170908;
				Data3_g170908.Shader = In_Shader3_g170908;
				Data3_g170908.Emissive= In_Emissive3_g170908;
				Data3_g170908.MultiMask = In_MultiMask3_g170908;
				Data3_g170908.Grayscale = In_Grayscale3_g170908;
				Data3_g170908.Luminosity = In_Luminosity3_g170908;
				Data3_g170908.AlphaClip = In_AlphaClip3_g170908;
				Data3_g170908.AlphaFade = In_AlphaFade3_g170908;
				Data3_g170908.Translucency = In_Translucency3_g170908;
				Data3_g170908.Transmission = In_Transmission3_g170908;
				Data3_g170908.Thickness = In_Thickness3_g170908;
				Data3_g170908.Diffusion = In_Diffusion3_g170908;
				}
				TVEVisualData Data4_g170938 = Data3_g170908;
				float Out_Dummy4_g170938 = 0;
				float3 Out_Albedo4_g170938 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170938 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170938 = float2( 0,0 );
				float3 Out_NormalWS4_g170938 = float3( 0,0,0 );
				float4 Out_Shader4_g170938 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170938 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170938 = 0;
				float Out_Grayscale4_g170938 = 0;
				float Out_Luminosity4_g170938 = 0;
				float Out_AlphaClip4_g170938 = 0;
				float Out_AlphaFade4_g170938 = 0;
				float3 Out_Translucency4_g170938 = float3( 0,0,0 );
				float Out_Transmission4_g170938 = 0;
				float Out_Thickness4_g170938 = 0;
				float Out_Diffusion4_g170938 = 0;
				{
				Out_Dummy4_g170938 = Data4_g170938.Dummy;
				Out_Albedo4_g170938 = Data4_g170938.Albedo;
				Out_AlbedoRaw4_g170938 = Data4_g170938.AlbedoRaw;
				Out_NormalTS4_g170938 = Data4_g170938.NormalTS;
				Out_NormalWS4_g170938 = Data4_g170938.NormalWS;
				Out_Shader4_g170938 = Data4_g170938.Shader;
				Out_Emissive4_g170938= Data4_g170938.Emissive;
				Out_MultiMask4_g170938 = Data4_g170938.MultiMask;
				Out_Grayscale4_g170938 = Data4_g170938.Grayscale;
				Out_Luminosity4_g170938= Data4_g170938.Luminosity;
				Out_AlphaClip4_g170938 = Data4_g170938.AlphaClip;
				Out_AlphaFade4_g170938 = Data4_g170938.AlphaFade;
				Out_Translucency4_g170938 = Data4_g170938.Translucency;
				Out_Transmission4_g170938 = Data4_g170938.Transmission;
				Out_Thickness4_g170938 = Data4_g170938.Thickness;
				Out_Diffusion4_g170938 = Data4_g170938.Diffusion;
				}
				float3 In_Albedo3_g170936 = Out_Albedo4_g170938;
				float3 In_AlbedoRaw3_g170936 = Out_AlbedoRaw4_g170938;
				float2 In_NormalTS3_g170936 = Out_NormalTS4_g170938;
				float3 In_NormalWS3_g170936 = Out_NormalWS4_g170938;
				float4 In_Shader3_g170936 = Out_Shader4_g170938;
				float4 In_Emissive3_g170936 = Out_Emissive4_g170938;
				float In_Grayscale3_g170936 = Out_Grayscale4_g170938;
				float In_Luminosity3_g170936 = Out_Luminosity4_g170938;
				float temp_output_836_11_g170935 = Out_MultiMask4_g170938;
				float In_MultiMask3_g170936 = temp_output_836_11_g170935;
				half Visual_AlphaClip667_g170935 = Out_AlphaClip4_g170938;
				TVEGlobalData Data15_g170937 = Data204_g170496;
				float Out_Dummy15_g170937 = 0;
				float4 Out_CoatParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170937 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170937 = Data15_g170937.Dummy;
				Out_CoatParams15_g170937 = Data15_g170937.CoatParams;
				Out_PaintParams15_g170937 = Data15_g170937.PaintParams;
				Out_GlowParams15_g170937 = Data15_g170937.GlowParams;
				Out_AtmoParams15_g170937= Data15_g170937.AtmoParams;
				Out_FadeParams15_g170937= Data15_g170937.FadeParams;
				Out_FormParams15_g170937 = Data15_g170937.FormParams;
				Out_FlowParams15_g170937 = Data15_g170937.FlowParams;
				}
				half4 Global_FadeParams516_g170935 = Out_FadeParams15_g170937;
				float temp_output_6_0_g170948 = saturate( (Global_FadeParams516_g170935).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170948 = ( temp_output_6_0_g170948 + ( _CutoutElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170948 = temp_output_6_0_g170948;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170935 = staticSwitch14_g170948;
				#else
				float staticSwitch663_g170935 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170935 = lerp( 1.0 , ( staticSwitch663_g170935 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170935 = lerpResult843_g170935;
				float lerpResult811_g170935 = lerp( 1.0 , Visual_AlphaClip667_g170935 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170935 = lerpResult811_g170935;
				TVEModelData Data15_g170939 = Data16_g170483;
				float Out_Dummy15_g170939 = 0;
				float3 Out_PositionWS15_g170939 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170939 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170939 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170939 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170939 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170939 = float3( 0,0,0 );
				float4 Out_VertexData15_g170939 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170939 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170939 = Data15_g170939.Dummy;
				Out_PositionWS15_g170939 = Data15_g170939.PositionWS;
				Out_PositionWO15_g170939 = Data15_g170939.PositionWO;
				Out_PivotWS15_g170939 = Data15_g170939.PivotWS;
				Out_PivotWO15_g170939 = Data15_g170939.PivotWO;
				Out_NormalWS15_g170939 = Data15_g170939.NormalWS;
				Out_ViewDirWS15_g170939 = Data15_g170939.ViewDirWS;
				Out_VertexData15_g170939 = Data15_g170939.VertexData;
				Out_BoundsData15_g170939 = Data15_g170939.BoundsData;
				}
				half3 Model_PositionWO602_g170935 = Out_PositionWO15_g170939;
				float4 tex3DNode60_g170942 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170935 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170935 = lerp( 1.0 , tex3DNode60_g170942.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170935 = lerpResult673_g170935;
				half4 Model_VertexMasks752_g170935 = Out_VertexData15_g170939;
				float4 break755_g170935 = Model_VertexMasks752_g170935;
				float4 break33_g170940 = _cutout_vert_mode;
				float temp_output_30_0_g170940 = ( break755_g170935.x * break33_g170940.x );
				float temp_output_29_0_g170940 = ( break755_g170935.y * break33_g170940.y );
				float temp_output_31_0_g170940 = ( break755_g170935.z * break33_g170940.z );
				float temp_output_28_0_g170940 = ( temp_output_30_0_g170940 + temp_output_29_0_g170940 + temp_output_31_0_g170940 + ( break755_g170935.w * break33_g170940.w ) );
				float clampResult17_g170941 = clamp( temp_output_28_0_g170940 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170947 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170947 = ( clampResult17_g170941 - temp_output_7_0_g170947 );
				float lerpResult820_g170935 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170947 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170944 = lerpResult820_g170935;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170944 = ( temp_output_6_0_g170944 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170944 = temp_output_6_0_g170944;
				#endif
				float temp_output_801_0_g170935 = staticSwitch14_g170944;
				half Local_VertMask766_g170935 = temp_output_801_0_g170935;
				half Visual_MultiMask671_g170935 = temp_output_836_11_g170935;
				float lerpResult683_g170935 = lerp( 1.0 , Visual_MultiMask671_g170935 , _CutoutMultiValue);
				half Local_MultiMask685_g170935 = lerpResult683_g170935;
				float lerpResult728_g170935 = lerp( Visual_AlphaClip667_g170935 , min( Visual_AlphaClip667_g170935 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170935 ) - ( Local_AlphaMask814_g170935 * Local_NoiseMask678_g170935 * Local_VertMask766_g170935 ) ) ) ) , Local_MultiMask685_g170935);
				half Local_AlphaClip784_g170935 = lerpResult728_g170935;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170935 = Local_AlphaClip784_g170935;
				#else
				float staticSwitch577_g170935 = Visual_AlphaClip667_g170935;
				#endif
				half Final_AlphaClip795_g170935 = staticSwitch577_g170935;
				float In_AlphaClip3_g170936 = Final_AlphaClip795_g170935;
				float In_AlphaFade3_g170936 = Out_AlphaFade4_g170938;
				float3 In_Translucency3_g170936 = Out_Translucency4_g170938;
				float In_Transmission3_g170936 = Out_Transmission4_g170938;
				float In_Thickness3_g170936 = Out_Thickness4_g170938;
				float In_Diffusion3_g170936 = Out_Diffusion4_g170938;
				{
				Data3_g170936.Dummy = In_Dummy3_g170936;
				Data3_g170936.Albedo = In_Albedo3_g170936;
				Data3_g170936.AlbedoRaw = In_AlbedoRaw3_g170936;
				Data3_g170936.NormalTS = In_NormalTS3_g170936;
				Data3_g170936.NormalWS = In_NormalWS3_g170936;
				Data3_g170936.Shader = In_Shader3_g170936;
				Data3_g170936.Emissive= In_Emissive3_g170936;
				Data3_g170936.MultiMask = In_MultiMask3_g170936;
				Data3_g170936.Grayscale = In_Grayscale3_g170936;
				Data3_g170936.Luminosity = In_Luminosity3_g170936;
				Data3_g170936.AlphaClip = In_AlphaClip3_g170936;
				Data3_g170936.AlphaFade = In_AlphaFade3_g170936;
				Data3_g170936.Translucency = In_Translucency3_g170936;
				Data3_g170936.Transmission = In_Transmission3_g170936;
				Data3_g170936.Thickness = In_Thickness3_g170936;
				Data3_g170936.Diffusion = In_Diffusion3_g170936;
				}
				TVEVisualData Data4_g170952 = Data3_g170936;
				float Out_Dummy4_g170952 = 0;
				float3 Out_Albedo4_g170952 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170952 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170952 = float2( 0,0 );
				float3 Out_NormalWS4_g170952 = float3( 0,0,0 );
				float4 Out_Shader4_g170952 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170952 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170952 = 0;
				float Out_Grayscale4_g170952 = 0;
				float Out_Luminosity4_g170952 = 0;
				float Out_AlphaClip4_g170952 = 0;
				float Out_AlphaFade4_g170952 = 0;
				float3 Out_Translucency4_g170952 = float3( 0,0,0 );
				float Out_Transmission4_g170952 = 0;
				float Out_Thickness4_g170952 = 0;
				float Out_Diffusion4_g170952 = 0;
				{
				Out_Dummy4_g170952 = Data4_g170952.Dummy;
				Out_Albedo4_g170952 = Data4_g170952.Albedo;
				Out_AlbedoRaw4_g170952 = Data4_g170952.AlbedoRaw;
				Out_NormalTS4_g170952 = Data4_g170952.NormalTS;
				Out_NormalWS4_g170952 = Data4_g170952.NormalWS;
				Out_Shader4_g170952 = Data4_g170952.Shader;
				Out_Emissive4_g170952= Data4_g170952.Emissive;
				Out_MultiMask4_g170952 = Data4_g170952.MultiMask;
				Out_Grayscale4_g170952 = Data4_g170952.Grayscale;
				Out_Luminosity4_g170952= Data4_g170952.Luminosity;
				Out_AlphaClip4_g170952 = Data4_g170952.AlphaClip;
				Out_AlphaFade4_g170952 = Data4_g170952.AlphaFade;
				Out_Translucency4_g170952 = Data4_g170952.Translucency;
				Out_Transmission4_g170952 = Data4_g170952.Transmission;
				Out_Thickness4_g170952 = Data4_g170952.Thickness;
				Out_Diffusion4_g170952 = Data4_g170952.Diffusion;
				}
				float3 In_Albedo3_g170953 = Out_Albedo4_g170952;
				float3 In_AlbedoRaw3_g170953 = Out_AlbedoRaw4_g170952;
				float2 In_NormalTS3_g170953 = Out_NormalTS4_g170952;
				float3 In_NormalWS3_g170953 = Out_NormalWS4_g170952;
				float4 In_Shader3_g170953 = Out_Shader4_g170952;
				float4 In_Emissive3_g170953 = Out_Emissive4_g170952;
				float In_Grayscale3_g170953 = Out_Grayscale4_g170952;
				float In_Luminosity3_g170953 = Out_Luminosity4_g170952;
				float temp_output_821_11_g170950 = Out_MultiMask4_g170952;
				float In_MultiMask3_g170953 = temp_output_821_11_g170950;
				half Visual_AlphaClip754_g170950 = Out_AlphaClip4_g170952;
				half Dither_Constant768_g170950 = _DitherConstantValue;
				half Dither_BiasProximity881_g170950 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170950 = TVE_DitherParams.w;
				float lerpResult884_g170950 = lerp( 1.0 , Dither_BiasProximity881_g170950 , Dither_BiasEnabled883_g170950);
				float temp_output_7_0_g170961 = _DitherProximityMaxValue;
				float temp_output_9_0_g170961 = ( ( distance( ase_positionWS , _WorldSpaceCameraPos ) * lerpResult884_g170950 ) - temp_output_7_0_g170961 );
				half Dither_Proximity767_g170950 = ( saturate( ( ( temp_output_9_0_g170961 / ( _DitherProximityMinValue - temp_output_7_0_g170961 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170954 = Data16_g170483;
				float Out_Dummy15_g170954 = 0;
				float3 Out_PositionWS15_g170954 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170954 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170954 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170954 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170954 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170954 = float3( 0,0,0 );
				float4 Out_VertexData15_g170954 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170954 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170954 = Data15_g170954.Dummy;
				Out_PositionWS15_g170954 = Data15_g170954.PositionWS;
				Out_PositionWO15_g170954 = Data15_g170954.PositionWO;
				Out_PivotWS15_g170954 = Data15_g170954.PivotWS;
				Out_PivotWO15_g170954 = Data15_g170954.PivotWO;
				Out_NormalWS15_g170954 = Data15_g170954.NormalWS;
				Out_ViewDirWS15_g170954 = Data15_g170954.ViewDirWS;
				Out_VertexData15_g170954 = Data15_g170954.VertexData;
				Out_BoundsData15_g170954 = Data15_g170954.BoundsData;
				}
				half3 Model_PositionWS776_g170950 = Out_PositionWS15_g170954;
				half Dither_BiasDistance882_g170950 = TVE_DitherParams.z;
				float lerpResult888_g170950 = lerp( 1.0 , Dither_BiasDistance882_g170950 , Dither_BiasEnabled883_g170950);
				float temp_output_7_0_g170962 = _DitherDistanceMinValue;
				float temp_output_9_0_g170962 = ( ( distance( Model_PositionWS776_g170950 , _WorldSpaceCameraPos ) * lerpResult888_g170950 ) - temp_output_7_0_g170962 );
				half Dither_Distance856_g170950 = ( saturate( ( ( temp_output_9_0_g170962 / ( _DitherDistanceMaxValue - temp_output_7_0_g170962 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170950 = Out_ViewDirWS15_g170954;
				float3 normalizeResult792_g170950 = normalize( cross( ddy( ase_positionWS ) , ddx( ase_positionWS ) ) );
				float dotResult778_g170950 = dot( Model_ViewDirWS845_g170950 , normalizeResult792_g170950 );
				half Dither_Glancing784_g170950 = ( saturate( ( ( 1.0 - abs( dotResult778_g170950 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170950 = max( max( max( Dither_Constant768_g170950 , Dither_Proximity767_g170950 ) , Dither_Distance856_g170950 ) , Dither_Glancing784_g170950 );
				half3 Model_PositionWO602_g170950 = Out_PositionWO15_g170954;
				float4 tex3DNode60_g170957 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170950 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170950 = tex3DNode60_g170957.r;
				half Local_MaskNoise678_g170950 = temp_output_809_0_g170950;
				half Visual_MultiMask671_g170950 = temp_output_821_11_g170950;
				float lerpResult683_g170950 = lerp( 1.0 , Visual_MultiMask671_g170950 , _DitherMultiValue);
				half Local_MaskMulti685_g170950 = lerpResult683_g170950;
				half Custom_Mask826_g170950 = 1.0;
				float lerpResult728_g170950 = lerp( Visual_AlphaClip754_g170950 , min( Visual_AlphaClip754_g170950 , ( -0.001 - ( Dither_Value429_g170950 - Local_MaskNoise678_g170950 ) ) ) , ( Local_MaskMulti685_g170950 * Custom_Mask826_g170950 ));
				half Local_AlphaClip834_g170950 = lerpResult728_g170950;
				#ifdef TVE_DITHER
				float staticSwitch577_g170950 = Local_AlphaClip834_g170950;
				#else
				float staticSwitch577_g170950 = Visual_AlphaClip754_g170950;
				#endif
				half Final_AlphaClip493_g170950 = staticSwitch577_g170950;
				float In_AlphaClip3_g170953 = Final_AlphaClip493_g170950;
				float In_AlphaFade3_g170953 = Out_AlphaFade4_g170952;
				float3 In_Translucency3_g170953 = Out_Translucency4_g170952;
				float In_Transmission3_g170953 = Out_Transmission4_g170952;
				float In_Thickness3_g170953 = Out_Thickness4_g170952;
				float In_Diffusion3_g170953 = Out_Diffusion4_g170952;
				{
				Data3_g170953.Dummy = In_Dummy3_g170953;
				Data3_g170953.Albedo = In_Albedo3_g170953;
				Data3_g170953.AlbedoRaw = In_AlbedoRaw3_g170953;
				Data3_g170953.NormalTS = In_NormalTS3_g170953;
				Data3_g170953.NormalWS = In_NormalWS3_g170953;
				Data3_g170953.Shader = In_Shader3_g170953;
				Data3_g170953.Emissive= In_Emissive3_g170953;
				Data3_g170953.MultiMask = In_MultiMask3_g170953;
				Data3_g170953.Grayscale = In_Grayscale3_g170953;
				Data3_g170953.Luminosity = In_Luminosity3_g170953;
				Data3_g170953.AlphaClip = In_AlphaClip3_g170953;
				Data3_g170953.AlphaFade = In_AlphaFade3_g170953;
				Data3_g170953.Translucency = In_Translucency3_g170953;
				Data3_g170953.Transmission = In_Transmission3_g170953;
				Data3_g170953.Thickness = In_Thickness3_g170953;
				Data3_g170953.Diffusion = In_Diffusion3_g170953;
				}
				TVEVisualData Data4_g170975 = Data3_g170953;
				float Out_Dummy4_g170975 = 0;
				float3 Out_Albedo4_g170975 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170975 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170975 = float2( 0,0 );
				float3 Out_NormalWS4_g170975 = float3( 0,0,0 );
				float4 Out_Shader4_g170975 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170975 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170975 = 0;
				float Out_Grayscale4_g170975 = 0;
				float Out_Luminosity4_g170975 = 0;
				float Out_AlphaClip4_g170975 = 0;
				float Out_AlphaFade4_g170975 = 0;
				float3 Out_Translucency4_g170975 = float3( 0,0,0 );
				float Out_Transmission4_g170975 = 0;
				float Out_Thickness4_g170975 = 0;
				float Out_Diffusion4_g170975 = 0;
				{
				Out_Dummy4_g170975 = Data4_g170975.Dummy;
				Out_Albedo4_g170975 = Data4_g170975.Albedo;
				Out_AlbedoRaw4_g170975 = Data4_g170975.AlbedoRaw;
				Out_NormalTS4_g170975 = Data4_g170975.NormalTS;
				Out_NormalWS4_g170975 = Data4_g170975.NormalWS;
				Out_Shader4_g170975 = Data4_g170975.Shader;
				Out_Emissive4_g170975= Data4_g170975.Emissive;
				Out_MultiMask4_g170975 = Data4_g170975.MultiMask;
				Out_Grayscale4_g170975 = Data4_g170975.Grayscale;
				Out_Luminosity4_g170975= Data4_g170975.Luminosity;
				Out_AlphaClip4_g170975 = Data4_g170975.AlphaClip;
				Out_AlphaFade4_g170975 = Data4_g170975.AlphaFade;
				Out_Translucency4_g170975 = Data4_g170975.Translucency;
				Out_Transmission4_g170975 = Data4_g170975.Transmission;
				Out_Thickness4_g170975 = Data4_g170975.Thickness;
				Out_Diffusion4_g170975 = Data4_g170975.Diffusion;
				}
				float3 temp_output_297_0_g170971 = Out_Albedo4_g170975;
				float3 In_Albedo3_g170976 = temp_output_297_0_g170971;
				float3 temp_output_297_23_g170971 = Out_AlbedoRaw4_g170975;
				float3 In_AlbedoRaw3_g170976 = temp_output_297_23_g170971;
				float2 In_NormalTS3_g170976 = Out_NormalTS4_g170975;
				float3 In_NormalWS3_g170976 = Out_NormalWS4_g170975;
				float4 In_Shader3_g170976 = Out_Shader4_g170975;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170971 = Out_Emissive4_g170975;
				TVEModelData Data15_g170977 = Data16_g170483;
				float Out_Dummy15_g170977 = 0;
				float3 Out_PositionWS15_g170977 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170977 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170977 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170977 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170977 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170977 = float3( 0,0,0 );
				float4 Out_VertexData15_g170977 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170977 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170977 = Data15_g170977.Dummy;
				Out_PositionWS15_g170977 = Data15_g170977.PositionWS;
				Out_PositionWO15_g170977 = Data15_g170977.PositionWO;
				Out_PivotWS15_g170977 = Data15_g170977.PivotWS;
				Out_PivotWO15_g170977 = Data15_g170977.PivotWO;
				Out_NormalWS15_g170977 = Data15_g170977.NormalWS;
				Out_ViewDirWS15_g170977 = Data15_g170977.ViewDirWS;
				Out_VertexData15_g170977 = Data15_g170977.VertexData;
				Out_BoundsData15_g170977 = Data15_g170977.BoundsData;
				}
				half4 Model_VertexMasks216_g170971 = Out_VertexData15_g170977;
				float4 break251_g170971 = Model_VertexMasks216_g170971;
				float4 break33_g170982 = _emissive_vert_mode;
				float temp_output_30_0_g170982 = ( break251_g170971.x * break33_g170982.x );
				float temp_output_29_0_g170982 = ( break251_g170971.y * break33_g170982.y );
				float temp_output_31_0_g170982 = ( break251_g170971.z * break33_g170982.z );
				float temp_output_28_0_g170982 = ( temp_output_30_0_g170982 + temp_output_29_0_g170982 + temp_output_31_0_g170982 + ( break251_g170971.w * break33_g170982.w ) );
				float clampResult17_g170981 = clamp( temp_output_28_0_g170982 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170985 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170985 = ( clampResult17_g170981 - temp_output_7_0_g170985 );
				float lerpResult303_g170971 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170985 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170984 = lerpResult303_g170971;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170984 = ( temp_output_6_0_g170984 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170984 = temp_output_6_0_g170984;
				#endif
				half Emissive_MeshMask221_g170971 = staticSwitch14_g170984;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170973) = _EmissiveMaskTex;
				SamplerState Sampler276_g170973 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170974 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170974 = ( temp_output_6_0_g170974 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170974 = temp_output_6_0_g170974;
				#endif
				half4 Emissive_Coords167_g170971 = staticSwitch14_g170974;
				float4 temp_output_37_0_g170973 = Emissive_Coords167_g170971;
				half4 Coords276_g170973 = temp_output_37_0_g170973;
				half2 TexCoord276_g170973 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170973 = SampleMain( Texture276_g170973 , Sampler276_g170973 , Coords276_g170973 , TexCoord276_g170973 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170973) = _EmissiveMaskTex;
				SamplerState Sampler275_g170973 = sampler_Linear_Repeat;
				half4 Coords275_g170973 = temp_output_37_0_g170973;
				half2 TexCoord275_g170973 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170973 = SampleExtra( Texture275_g170973 , Sampler275_g170973 , Coords275_g170973 , TexCoord275_g170973 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170971 = localSampleMain276_g170973;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170971 = localSampleExtra275_g170973;
				#else
				float4 staticSwitch176_g170971 = localSampleMain276_g170973;
				#endif
				half4 Emissive_MaskTex201_g170971 = staticSwitch176_g170971;
				float clampResult17_g170983 = clamp( (Emissive_MaskTex201_g170971).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170986 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170986 = ( clampResult17_g170983 - temp_output_7_0_g170986 );
				float lerpResult302_g170971 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170986 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170971 = lerpResult302_g170971;
				float temp_output_279_0_g170971 = ( Emissive_MeshMask221_g170971 * Emissive_Mask103_g170971 );
				float3 appendResult293_g170971 = (float3(temp_output_279_0_g170971 , temp_output_279_0_g170971 , temp_output_279_0_g170971));
				half3 Local_EmissiveColor278_g170971 = appendResult293_g170971;
				float3 temp_output_316_0_g170971 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170972 = Data204_g170496;
				float Out_Dummy15_g170972 = 0;
				float4 Out_CoatParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170972 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170972 = Data15_g170972.Dummy;
				Out_CoatParams15_g170972 = Data15_g170972.CoatParams;
				Out_PaintParams15_g170972 = Data15_g170972.PaintParams;
				Out_GlowParams15_g170972 = Data15_g170972.GlowParams;
				Out_AtmoParams15_g170972= Data15_g170972.AtmoParams;
				Out_FadeParams15_g170972= Data15_g170972.FadeParams;
				Out_FormParams15_g170972 = Data15_g170972.FormParams;
				Out_FlowParams15_g170972 = Data15_g170972.FlowParams;
				}
				half4 Global_GlowParams179_g170971 = Out_GlowParams15_g170972;
				float3 temp_output_6_0_g170979 = (Global_GlowParams179_g170971).xyz;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170979 = ( temp_output_6_0_g170979 + ( _EmissiveElementMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170979 = temp_output_6_0_g170979;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170971 = staticSwitch14_g170979;
				#else
				float3 staticSwitch228_g170971 = temp_output_316_0_g170971;
				#endif
				float3 lerpResult299_g170971 = lerp( float3( 1,1,1 ) , staticSwitch228_g170971 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170971 = lerpResult299_g170971;
				half3 Visual_AlbedoRaw306_g170971 = temp_output_297_23_g170971;
				float3 lerpResult307_g170971 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170971 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170971 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170971 * lerpResult307_g170971 );
				half3 Emissive_Blend260_g170971 = ( ( (Visual_Emissive255_g170971).xyz * Local_EmissiveColor278_g170971 ) * Local_EmissiveValue88_g170971 );
				float3 temp_output_3_0_g170978 = Emissive_Blend260_g170971;
				float temp_output_15_0_g170978 = _emissive_power_value;
				float3 temp_output_23_0_g170978 = ( temp_output_3_0_g170978 * temp_output_15_0_g170978 );
				half Local_EmissiveMask294_g170971 = temp_output_279_0_g170971;
				float4 appendResult295_g170971 = (float4(temp_output_23_0_g170978 , Local_EmissiveMask294_g170971));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170971 = appendResult295_g170971;
				#else
				float4 staticSwitch129_g170971 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170971 = staticSwitch129_g170971;
				float4 In_Emissive3_g170976 = Final_Emissive184_g170971;
				float In_Grayscale3_g170976 = Out_Grayscale4_g170975;
				float In_Luminosity3_g170976 = Out_Luminosity4_g170975;
				float temp_output_297_11_g170971 = Out_MultiMask4_g170975;
				float In_MultiMask3_g170976 = temp_output_297_11_g170971;
				float In_AlphaClip3_g170976 = Out_AlphaClip4_g170975;
				float In_AlphaFade3_g170976 = Out_AlphaFade4_g170975;
				float3 In_Translucency3_g170976 = Out_Translucency4_g170975;
				float In_Transmission3_g170976 = Out_Transmission4_g170975;
				float In_Thickness3_g170976 = Out_Thickness4_g170975;
				float In_Diffusion3_g170976 = Out_Diffusion4_g170975;
				{
				Data3_g170976.Dummy = In_Dummy3_g170976;
				Data3_g170976.Albedo = In_Albedo3_g170976;
				Data3_g170976.AlbedoRaw = In_AlbedoRaw3_g170976;
				Data3_g170976.NormalTS = In_NormalTS3_g170976;
				Data3_g170976.NormalWS = In_NormalWS3_g170976;
				Data3_g170976.Shader = In_Shader3_g170976;
				Data3_g170976.Emissive= In_Emissive3_g170976;
				Data3_g170976.MultiMask = In_MultiMask3_g170976;
				Data3_g170976.Grayscale = In_Grayscale3_g170976;
				Data3_g170976.Luminosity = In_Luminosity3_g170976;
				Data3_g170976.AlphaClip = In_AlphaClip3_g170976;
				Data3_g170976.AlphaFade = In_AlphaFade3_g170976;
				Data3_g170976.Translucency = In_Translucency3_g170976;
				Data3_g170976.Transmission = In_Transmission3_g170976;
				Data3_g170976.Thickness = In_Thickness3_g170976;
				Data3_g170976.Diffusion = In_Diffusion3_g170976;
				}
				TVEVisualData Data4_g171004 = Data3_g170976;
				float Out_Dummy4_g171004 = 0;
				float3 Out_Albedo4_g171004 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g171004 = float3( 0,0,0 );
				float2 Out_NormalTS4_g171004 = float2( 0,0 );
				float3 Out_NormalWS4_g171004 = float3( 0,0,0 );
				float4 Out_Shader4_g171004 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g171004 = float4( 0,0,0,0 );
				float Out_MultiMask4_g171004 = 0;
				float Out_Grayscale4_g171004 = 0;
				float Out_Luminosity4_g171004 = 0;
				float Out_AlphaClip4_g171004 = 0;
				float Out_AlphaFade4_g171004 = 0;
				float3 Out_Translucency4_g171004 = float3( 0,0,0 );
				float Out_Transmission4_g171004 = 0;
				float Out_Thickness4_g171004 = 0;
				float Out_Diffusion4_g171004 = 0;
				{
				Out_Dummy4_g171004 = Data4_g171004.Dummy;
				Out_Albedo4_g171004 = Data4_g171004.Albedo;
				Out_AlbedoRaw4_g171004 = Data4_g171004.AlbedoRaw;
				Out_NormalTS4_g171004 = Data4_g171004.NormalTS;
				Out_NormalWS4_g171004 = Data4_g171004.NormalWS;
				Out_Shader4_g171004 = Data4_g171004.Shader;
				Out_Emissive4_g171004= Data4_g171004.Emissive;
				Out_MultiMask4_g171004 = Data4_g171004.MultiMask;
				Out_Grayscale4_g171004 = Data4_g171004.Grayscale;
				Out_Luminosity4_g171004= Data4_g171004.Luminosity;
				Out_AlphaClip4_g171004 = Data4_g171004.AlphaClip;
				Out_AlphaFade4_g171004 = Data4_g171004.AlphaFade;
				Out_Translucency4_g171004 = Data4_g171004.Translucency;
				Out_Transmission4_g171004 = Data4_g171004.Transmission;
				Out_Thickness4_g171004 = Data4_g171004.Thickness;
				Out_Diffusion4_g171004 = Data4_g171004.Diffusion;
				}
				half3 Visual_Albedo199_g171003 = Out_Albedo4_g171004;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g171003 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g171003 );
				half Visual_Transmission138_g171003 = Out_Transmission4_g171004;
				half Subsurface_Value268_g171003 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g171006 = Data204_g170496;
				float Out_Dummy15_g171006 = 0;
				float4 Out_CoatParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g171006 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g171006 = Data15_g171006.Dummy;
				Out_CoatParams15_g171006 = Data15_g171006.CoatParams;
				Out_PaintParams15_g171006 = Data15_g171006.PaintParams;
				Out_GlowParams15_g171006 = Data15_g171006.GlowParams;
				Out_AtmoParams15_g171006= Data15_g171006.AtmoParams;
				Out_FadeParams15_g171006= Data15_g171006.FadeParams;
				Out_FormParams15_g171006 = Data15_g171006.FormParams;
				Out_FlowParams15_g171006 = Data15_g171006.FlowParams;
				}
				half4 Global_GlowParams373_g171003 = Out_GlowParams15_g171006;
				float temp_output_6_0_g171009 = saturate( (Global_GlowParams373_g171003).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g171009 = ( temp_output_6_0_g171009 + ( _SubsurfaceElementMode * 0.0 ) );
				#else
				float staticSwitch14_g171009 = temp_output_6_0_g171009;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g171003 = staticSwitch14_g171009;
				#else
				float staticSwitch367_g171003 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g171003 = lerp( 1.0 , staticSwitch367_g171003 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g171003 = lerpResult403_g171003;
				float temp_output_301_11_g171003 = Out_MultiMask4_g171004;
				half Visual_MultiMask292_g171003 = temp_output_301_11_g171003;
				float lerpResult293_g171003 = lerp( 1.0 , Visual_MultiMask292_g171003 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g171003 = lerpResult293_g171003;
				half Custom_Mask363_g171003 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g171003 = ( Visual_Transmission138_g171003 * Subsurface_Value268_g171003 * Subsurface_GlobalMask369_g171003 * Subsurface_MultiMask296_g171003 * Custom_Mask363_g171003 );
				#else
				float staticSwitch345_g171003 = 0.0;
				#endif
				half Final_Transmission269_g171003 = staticSwitch345_g171003;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g171003 = ( Subsurface_Color264_g171003 * Final_Transmission269_g171003 * 10.0 );
				#else
				float3 staticSwitch348_g171003 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g171003 = staticSwitch348_g171003;
				TVEModelData Data15_g171007 = Data16_g170483;
				float Out_Dummy15_g171007 = 0;
				float3 Out_PositionWS15_g171007 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171007 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171007 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171007 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171007 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g171007 = float3( 0,0,0 );
				float4 Out_VertexData15_g171007 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171007 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g171007 = Data15_g171007.Dummy;
				Out_PositionWS15_g171007 = Data15_g171007.PositionWS;
				Out_PositionWO15_g171007 = Data15_g171007.PositionWO;
				Out_PivotWS15_g171007 = Data15_g171007.PivotWS;
				Out_PivotWO15_g171007 = Data15_g171007.PivotWO;
				Out_NormalWS15_g171007 = Data15_g171007.NormalWS;
				Out_ViewDirWS15_g171007 = Data15_g171007.ViewDirWS;
				Out_VertexData15_g171007 = Data15_g171007.VertexData;
				Out_BoundsData15_g171007 = Data15_g171007.BoundsData;
				}
				half3 Model_ViewDirWS392_g171003 = Out_ViewDirWS15_g171007;
				float dotResult324_g171003 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g171003 );
				float saferPower323_g171003 = abs( saturate( dotResult324_g171003 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g171003 = 0.0;
				#else
				float staticSwitch330_g171003 = ( pow( saferPower323_g171003 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g171003 = staticSwitch330_g171003;
				float3 temp_output_6_0_g171008 = ( Final_Translucency254_g171003 * Mask_Subsurface_View320_g171003 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g171008 = ( temp_output_6_0_g171008 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g171008 = temp_output_6_0_g171008;
				#endif
				half3 Subsurface_Approximation333_g171003 = staticSwitch14_g171008;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g171003 = ( Visual_Albedo199_g171003 + Subsurface_Approximation333_g171003 );
				#else
				float3 staticSwitch353_g171003 = Visual_Albedo199_g171003;
				#endif
				half3 Final_Albedo312_g171003 = staticSwitch353_g171003;
				float3 In_Albedo3_g171005 = Final_Albedo312_g171003;
				float3 In_AlbedoRaw3_g171005 = Out_AlbedoRaw4_g171004;
				float2 In_NormalTS3_g171005 = Out_NormalTS4_g171004;
				float3 In_NormalWS3_g171005 = Out_NormalWS4_g171004;
				float4 In_Shader3_g171005 = Out_Shader4_g171004;
				float4 In_Emissive3_g171005 = Out_Emissive4_g171004;
				float In_Grayscale3_g171005 = Out_Grayscale4_g171004;
				float In_Luminosity3_g171005 = Out_Luminosity4_g171004;
				float In_MultiMask3_g171005 = temp_output_301_11_g171003;
				float In_AlphaClip3_g171005 = Out_AlphaClip4_g171004;
				float In_AlphaFade3_g171005 = Out_AlphaFade4_g171004;
				float3 In_Translucency3_g171005 = Final_Translucency254_g171003;
				float In_Transmission3_g171005 = Final_Transmission269_g171003;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g171003 = 0.0;
				#else
				float staticSwitch351_g171003 = 1.0;
				#endif
				half Final_Thickness275_g171003 = staticSwitch351_g171003;
				float In_Thickness3_g171005 = Final_Thickness275_g171003;
				float Final_Diffusion340_g171003 = _SubsurfaceDiffusion;
				float In_Diffusion3_g171005 = Final_Diffusion340_g171003;
				{
				Data3_g171005.Dummy = In_Dummy3_g171005;
				Data3_g171005.Albedo = In_Albedo3_g171005;
				Data3_g171005.AlbedoRaw = In_AlbedoRaw3_g171005;
				Data3_g171005.NormalTS = In_NormalTS3_g171005;
				Data3_g171005.NormalWS = In_NormalWS3_g171005;
				Data3_g171005.Shader = In_Shader3_g171005;
				Data3_g171005.Emissive= In_Emissive3_g171005;
				Data3_g171005.MultiMask = In_MultiMask3_g171005;
				Data3_g171005.Grayscale = In_Grayscale3_g171005;
				Data3_g171005.Luminosity = In_Luminosity3_g171005;
				Data3_g171005.AlphaClip = In_AlphaClip3_g171005;
				Data3_g171005.AlphaFade = In_AlphaFade3_g171005;
				Data3_g171005.Translucency = In_Translucency3_g171005;
				Data3_g171005.Transmission = In_Transmission3_g171005;
				Data3_g171005.Thickness = In_Thickness3_g171005;
				Data3_g171005.Diffusion = In_Diffusion3_g171005;
				}
				TVEVisualData Data4_g171021 = Data3_g171005;
				float Out_Dummy4_g171021 = 0;
				float3 Out_Albedo4_g171021 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g171021 = float3( 0,0,0 );
				float2 Out_NormalTS4_g171021 = float2( 0,0 );
				float3 Out_NormalWS4_g171021 = float3( 0,0,0 );
				float4 Out_Shader4_g171021 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g171021 = float4( 0,0,0,0 );
				float Out_MultiMask4_g171021 = 0;
				float Out_Grayscale4_g171021 = 0;
				float Out_Luminosity4_g171021 = 0;
				float Out_AlphaClip4_g171021 = 0;
				float Out_AlphaFade4_g171021 = 0;
				float3 Out_Translucency4_g171021 = float3( 0,0,0 );
				float Out_Transmission4_g171021 = 0;
				float Out_Thickness4_g171021 = 0;
				float Out_Diffusion4_g171021 = 0;
				{
				Out_Dummy4_g171021 = Data4_g171021.Dummy;
				Out_Albedo4_g171021 = Data4_g171021.Albedo;
				Out_AlbedoRaw4_g171021 = Data4_g171021.AlbedoRaw;
				Out_NormalTS4_g171021 = Data4_g171021.NormalTS;
				Out_NormalWS4_g171021 = Data4_g171021.NormalWS;
				Out_Shader4_g171021 = Data4_g171021.Shader;
				Out_Emissive4_g171021= Data4_g171021.Emissive;
				Out_MultiMask4_g171021 = Data4_g171021.MultiMask;
				Out_Grayscale4_g171021 = Data4_g171021.Grayscale;
				Out_Luminosity4_g171021= Data4_g171021.Luminosity;
				Out_AlphaClip4_g171021 = Data4_g171021.AlphaClip;
				Out_AlphaFade4_g171021 = Data4_g171021.AlphaFade;
				Out_Translucency4_g171021 = Data4_g171021.Translucency;
				Out_Transmission4_g171021 = Data4_g171021.Transmission;
				Out_Thickness4_g171021 = Data4_g171021.Thickness;
				Out_Diffusion4_g171021 = Data4_g171021.Diffusion;
				}
				half3 Input_Albedo24_g171020 = Out_Albedo4_g171021;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g171020 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g171020 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g171020 = staticSwitch22_g171020;
				float4 break24_g171015 = Out_Shader4_g171021;
				half Metallic95_g171015 = break24_g171015.x;
				half Input_Metallic25_g171020 = Metallic95_g171015;
				half OneMinusReflectivity31_g171020 = ( (ColorSpaceDielectricSpec23_g171020).w - ( (ColorSpaceDielectricSpec23_g171020).w * Input_Metallic25_g171020 ) );
				
				float localCustomAlphaClip20_g171028 = ( 0.0 );
				float temp_output_3_0_g171028 = Out_AlphaClip4_g171021;
				float Alpha20_g171028 = temp_output_3_0_g171028;
				float temp_output_15_0_g171028 = 0.0;
				float Treshold20_g171028 = temp_output_15_0_g171028;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				clip(Alpha20_g171028 - Treshold20_g171028);
				#endif
				}
				
				o.Albedo = ( Input_Albedo24_g171020 * OneMinusReflectivity31_g171020 );
				o.Normal = fixed3( 0, 0, 1 );
				o.Emission = (Out_Emissive4_g171021).xyz;
				o.Alpha = saturate( ( Alpha20_g171028 * Out_AlphaFade4_g171021 ) );
				float AlphaClipThreshold = 0.5;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				UnityMetaInput metaIN;
				UNITY_INITIALIZE_OUTPUT(UnityMetaInput, metaIN);
				metaIN.Albedo = o.Albedo;
				metaIN.Emission = o.Emission;
				#ifdef EDITOR_VISUALIZATION
					metaIN.VizUV = IN.vizUV;
					metaIN.LightCoord = IN.lightCoord;
				#endif
				return UnityMetaFragment(metaIN);
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "ShadowCaster"
			Tags { "LightMode"="ShadowCaster" }
			ZWrite On
			ZTest LEqual
			AlphaToMask Off

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define _SPECULAR_SETUP 1
			#define ASE_LIGHTING_SIMPLE 1
			#define _ENVIRONMENTREFLECTIONS_OFF 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_VERSION 19800
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
			#pragma multi_compile_shadowcaster
			#ifndef UNITY_PASS_SHADOWCASTER
				#define UNITY_PASS_SHADOWCASTER
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#if ( SHADER_API_D3D11 || SHADER_API_GLCORE || SHADER_API_GLES || SHADER_API_GLES3 || SHADER_API_METAL || SHADER_API_VULKAN )
				#define CAN_SKIP_VPOS
			#endif
			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"

			#include "UnityStandardBRDF.cginc"
			#include "AutoLight.cginc"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_SHADOWS 1
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 FlowParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex3D(tex,coord)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct v2f {
				V2F_SHADOW_CASTER;
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				UNITY_SHADOW_COORDS(10)
				float4 ase_texcoord11 : TEXCOORD11;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef UNITY_STANDARD_USE_DITHER_MASK
				sampler3D _DitherMaskLOD;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceSpace;
			uniform half _SubsurfaceScatteringValue;
			uniform half _render_cull;
			uniform half _render_src;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsGeneralShader;
			uniform half _IsSimpleShader;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			uniform half _RenderBakeGI;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderPriority;
			uniform half _RenderQueue;
			uniform half _RenderMotion;
			uniform half _RenderClip;
			uniform half _RenderShadow;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderFilter;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NoiseTexSS);
			SamplerState sampler_NoiseTexSS;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _NormalSpace;
			uniform half _MotionCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionElementMode;
			uniform half _MotionPushInfo;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform half _ObjectBoundsInfo;
			uniform float3 TVE_WorldOrigin;
			uniform half4 TVE_TimeParams;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half4 TVE_SizeFadeParams;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeScaleValue;
			uniform half4 TVE_FormParams;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half _GlobalPivotInfo;
			uniform half _GlobalCoatLayerValue;
			uniform float TVE_CoatLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			uniform half _GlobalCoatPivotValue;
			SamplerState sampler_Linear_Clamp;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatNearTex);
			uniform half4 TVE_RenderNearCoords;
			SamplerState sampler_Linear_Repeat;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_CoatParams;
			uniform half _GlobalPaintLayerValue;
			uniform float TVE_PaintLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintBaseTex);
			uniform half _GlobalPaintPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintNearTex);
			uniform half4 TVE_PaintParams;
			uniform half _GlobalGlowLayerValue;
			uniform float TVE_GlowLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowBaseTex);
			uniform half _GlobalGlowPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowNearTex);
			uniform half4 TVE_GlowParams;
			uniform half _GlobalAtmoLayerValue;
			uniform float TVE_AtmoLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoBaseTex);
			uniform half _GlobalAtmoPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoNearTex);
			uniform half4 TVE_AtmoParams;
			uniform half _GlobalFadeLayerValue;
			uniform float TVE_FadeLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeBaseTex);
			uniform half _GlobalFadePivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeNearTex);
			uniform half4 TVE_FadeParams;
			uniform half _GlobalFormLayerValue;
			uniform float TVE_FormLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormBaseTex);
			uniform half _GlobalFormPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormNearTex);
			uniform half _GlobalFlowLayerValue;
			uniform float TVE_FlowLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FlowBaseTex);
			uniform half _GlobalFlowPivotValue;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FlowNearTex);
			uniform half4 TVE_FlowParams;
			uniform half _SizeFadeElementMode;
			uniform half _SizeFadeGlobalValue;
			uniform half TVE_IsEnabled;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half _motion_small_mask_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			uniform half4 TVE_MotionParams;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionSmallTillingValue;
			uniform half _MotionSmallSpeedValue;
			uniform half _MotionSmallNoiseValue;
			uniform half4 TVE_MotionParamsEditor;
			uniform half _MotionIntensityValue;
			uniform half _MotionSmallDelayValue;
			uniform half _MotionSmallPushValue;
			uniform half _MotionTinyIntensityValue;
			uniform half _MotionDistValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half _motion_tiny_mask_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionTinyTillingValue;
			uniform half _MotionTinySpeedValue;
			uniform half _MotionTinyNoiseValue;
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionBaseTillingValue;
			uniform half _MotionBaseSpeedValue;
			uniform half _MotionBasePushValue;
			uniform half _motion_small_mode;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half _motion_base_mask_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionBaseNoiseValue;
			uniform half _MotionBaseDelayValue;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half _NormalComputeValue;
			uniform half4 _normal_vert_mode;
			uniform half4 _NormalMeshRemap;
			uniform half _NormalMeshValue;
			uniform half _NormalMeshMode;
			uniform half _DisableSRPBatcher;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveFlagMode;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutBakeMode;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessBakeMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayBakeMode;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessBakeMode;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			uniform half _MainMultiMaskInfo;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			SamplerState sampler_Point_Repeat;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondLumaRemap;
			uniform half _SecondLumaValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half _SecondElementMode;
			uniform half _SecondGlobalValue;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _ThirdLumaRemap;
			uniform half _ThirdLumaValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdGlobalValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThirdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThirdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half _GradientMultiValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationNoisePivotValue;
			uniform half _VariationNoiseTillingValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationIntensityValue;
			uniform half _VariationMultiValue;
			uniform half _TintingElementMode;
			uniform half _TintingGlobalValue;
			uniform half _TintingGrayValue;
			uniform float4 _TintingColor;
			uniform half _TintingIntensityValue;
			uniform half _TintingMultiValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingLumaValue;
			uniform half4 _tinting_vert_mode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half _TintingMeshMode;
			uniform half4 _TintingBlendRemap;
			uniform half4 TVE_AtmoData;
			uniform half _DrynessElementMode;
			uniform half _DrynessGlobalValue;
			uniform half _DrynessGrayValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessIntensityValue;
			uniform half _DrynessMultiValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessLumaValue;
			uniform half4 _dryness_vert_mode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessBlendRemap;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half3 _motion_highlight_color;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayGlitterIntensityValue;
			uniform half4 _OverlayGlitterColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTexRT);
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterAttenValue;
			uniform half _OverlayGlitterDistValue;
			uniform half _OverlayIntensityValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			uniform half _OverlayElementMode;
			uniform half _OverlayGlobalValue;
			uniform half4 _OverlayBlendRemap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _WetnessWaterColor;
			uniform half _WetnessWaterIntensityValue;
			uniform half _WetnessIntensityValue;
			uniform half _WetnessElementMode;
			uniform half _WetnessGlobalValue;
			uniform half4 _wetness_vert_mode;
			uniform half4 _WetnessMeshRemap;
			uniform half _WetnessMeshValue;
			uniform half _WetnessMeshMode;
			uniform half4 _wetness_water_vert_mode;
			uniform half4 _WetnessWaterMeshRemap;
			uniform half _WetnessWaterMeshValue;
			uniform half _WetnessWaterMeshMode;
			uniform half _WetnessWaterBaseValue;
			uniform half4 _WetnessWaterBlendRemap;
			uniform half _WetnessContrastValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTexRT);
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsDistValue;
			uniform half4 _wetness_drops_vert_mode;
			uniform half4 _WetnessDropsMeshRemap;
			uniform half _WetnessDropsMeshValue;
			uniform half _WetnessDropsMeshMode;
			uniform half _WetnessSmoothnessValue;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutElementMode;
			uniform half _CutoutGlobalValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutNoiseValue;
			uniform half4 _cutout_vert_mode;
			uniform half4 _CutoutMeshRemap;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half _CutoutMultiValue;
			uniform half _DitherConstantValue;
			uniform half4 TVE_DitherParams;
			uniform half _DitherProximityMaxValue;
			uniform half _DitherProximityMinValue;
			uniform half _DitherProximityValue;
			uniform half _DitherDistanceMinValue;
			uniform half _DitherDistanceMaxValue;
			uniform half _DitherDistanceValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _DitherMultiValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveGlobalValue;
			uniform half _EmissiveColorMode;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceElementMode;
			uniform half _SubsurfaceGlobalValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 TVE_MainLightDirection;
			uniform half _SubsurfaceAproxInfo;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g171013 = (TVEModelData)0;
				float In_Dummy16_g171013 = 0.0;
				TVEModelData Data16_g170989 = (TVEModelData)0;
				half Dummy1575_g170987 = ( _NormalCategory + _NormalEnd + _NormalSpace );
				float In_Dummy16_g170989 = Dummy1575_g170987;
				TVEModelData Data16_g170965 = (TVEModelData)0;
				float In_Dummy16_g170965 = 0.0;
				TVEModelData Data16_g170731 = (TVEModelData)0;
				half Dummy181_g170714 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170731 = Dummy181_g170714;
				TVEModelData Data16_g170673 = (TVEModelData)0;
				half Dummy181_g170671 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170673 = Dummy181_g170671;
				TVEModelData Data16_g170585 = (TVEModelData)0;
				half Dummy181_g170582 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170585 = Dummy181_g170582;
				TVEModelData Data16_g170580 = (TVEModelData)0;
				float In_Dummy16_g170580 = 0.0;
				TVEModelData Data16_g170482 = (TVEModelData)0;
				half Dummy207_g170478 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170482 = Dummy207_g170478;
				half3 PositionOS131_g170478 = v.vertex.xyz;
				float3 In_PositionOS16_g170482 = PositionOS131_g170478;
				float3 ase_positionWS = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g170478 = ase_positionWS;
				half3 PositionWS122_g170478 = vertexToFrag73_g170478;
				float3 In_PositionWS16_g170482 = PositionWS122_g170478;
				float4x4 break19_g170488 = unity_ObjectToWorld;
				float3 appendResult20_g170488 = (float3(break19_g170488[ 0 ][ 3 ] , break19_g170488[ 1 ][ 3 ] , break19_g170488[ 2 ][ 3 ]));
				float3 temp_output_340_7_g170478 = appendResult20_g170488;
				float4x4 break19_g170490 = unity_ObjectToWorld;
				float3 appendResult20_g170490 = (float3(break19_g170490[ 0 ][ 3 ] , break19_g170490[ 1 ][ 3 ] , break19_g170490[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170486 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g170478 = PositionOS131_g170478;
				float3 appendResult234_g170478 = (float3(break233_g170478.x , 0.0 , break233_g170478.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170478 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170478 = appendResult60_g170486;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170478 = appendResult234_g170478;
				#else
				float3 staticSwitch229_g170478 = _Vector0;
				#endif
				half3 PivotOS149_g170478 = staticSwitch229_g170478;
				float3 temp_output_122_0_g170490 = PivotOS149_g170478;
				float3 PivotsOnlyWS105_g170490 = mul( unity_ObjectToWorld, float4( temp_output_122_0_g170490 , 0.0 ) ).xyz;
				float3 temp_output_341_7_g170478 = ( appendResult20_g170490 + PivotsOnlyWS105_g170490 );
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170478 = temp_output_340_7_g170478;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170478 = temp_output_341_7_g170478;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170478 = temp_output_341_7_g170478;
				#else
				float3 staticSwitch236_g170478 = temp_output_340_7_g170478;
				#endif
				float3 vertexToFrag76_g170478 = staticSwitch236_g170478;
				half3 PivotWS121_g170478 = vertexToFrag76_g170478;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
				#else
				float3 staticSwitch204_g170478 = PositionWS122_g170478;
				#endif
				half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170482 = PositionWO132_g170478;
				float3 In_PositionRawOS16_g170482 = PositionOS131_g170478;
				float3 In_PositionAddOS16_g170482 = float3( 0,0,0 );
				float3 In_PivotOS16_g170482 = PivotOS149_g170478;
				float3 In_PivotWS16_g170482 = PivotWS121_g170478;
				half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170482 = PivotWO133_g170478;
				half3 NormalOS134_g170478 = v.normal;
				float3 In_NormalOS16_g170482 = NormalOS134_g170478;
				float3 ase_normalWS = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170478 = normalizedWorldNormal;
				float3 In_NormalWS16_g170482 = Normal_WS95_g170478;
				float3 In_NormalRawOS16_g170482 = NormalOS134_g170478;
				float3 objToWorldDir298_g170478 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g170478 = objToWorldDir298_g170478;
				float3 In_NormalRawWS16_g170482 = Normal_RawWS136_g170478;
				half4 TangentlOS153_g170478 = v.tangent;
				float4 In_TangentOS16_g170482 = TangentlOS153_g170478;
				float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
				half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
				float3 In_ViewDirWS16_g170482 = ViewDirWS169_g170478;
				half4 VertexMasks171_g170478 = v.ase_color;
				float4 In_VertexData16_g170482 = VertexMasks171_g170478;
				float mulTime113_g170485 = _Time.y * 0.52;
				float lerpResult128_g170485 = lerp( mulTime113_g170485 , ( ( mulTime113_g170485 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170478 = PivotWO133_g170478;
				half Pivot_Position322_g170478 = ( break319_g170478.x + break319_g170478.z );
				float mulTime113_g170484 = _Time.y * 0.27;
				float lerpResult128_g170484 = lerp( mulTime113_g170484 , ( ( mulTime113_g170484 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170487 = _object_phase_mode;
				float temp_output_30_0_g170487 = ( v.ase_color.r * break33_g170487.x );
				float temp_output_29_0_g170487 = ( v.ase_color.g * break33_g170487.y );
				float temp_output_31_0_g170487 = ( v.ase_color.b * break33_g170487.z );
				float temp_output_28_0_g170487 = ( temp_output_30_0_g170487 + temp_output_29_0_g170487 + temp_output_31_0_g170487 + ( v.ase_color.a * break33_g170487.w ) );
				float temp_output_315_0_g170478 = (frac( ( temp_output_28_0_g170487 + Pivot_Position322_g170478 ) )*2.0 + -1.0);
				float4 appendResult177_g170478 = (float4(sin( ( lerpResult128_g170485 + Pivot_Position322_g170478 ) ) , sin( ( lerpResult128_g170484 + Pivot_Position322_g170478 ) ) , temp_output_315_0_g170478 , 1.0));
				half4 MotionMasks176_g170478 = appendResult177_g170478;
				float4 In_PhaseData16_g170482 = MotionMasks176_g170478;
				half Object_HeightValue267_g170478 = _ObjectHeightValue;
				half Object_RadiusValue268_g170478 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170478 = saturate( ( (PositionOS131_g170478).y / Object_HeightValue267_g170478 ) );
				half Bounds_SphereMask282_g170478 = saturate( ( length( PositionOS131_g170478 ) / max( Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 ) ) );
				float4 appendResult253_g170478 = (float4(Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 , Bounds_HeightMask274_g170478 , Bounds_SphereMask282_g170478));
				half4 BoundsData254_g170478 = appendResult253_g170478;
				float4 In_BoundsData16_g170482 = BoundsData254_g170478;
				float4 In_RotationData16_g170482 = float4( 0,0,0,0 );
				{
				Data16_g170482.Dummy = In_Dummy16_g170482;
				Data16_g170482.PositionOS = In_PositionOS16_g170482;
				Data16_g170482.PositionWS = In_PositionWS16_g170482;
				Data16_g170482.PositionWO = In_PositionWO16_g170482;
				Data16_g170482.PositionRawOS = In_PositionRawOS16_g170482;
				Data16_g170482.PositionAddOS = In_PositionAddOS16_g170482;
				Data16_g170482.PivotOS = In_PivotOS16_g170482;
				Data16_g170482.PivotWS = In_PivotWS16_g170482;
				Data16_g170482.PivotWO = In_PivotWO16_g170482;
				Data16_g170482.NormalOS = In_NormalOS16_g170482;
				Data16_g170482.NormalWS = In_NormalWS16_g170482;
				Data16_g170482.NormalRawOS = In_NormalRawOS16_g170482;
				Data16_g170482.NormalRawWS = In_NormalRawWS16_g170482;
				Data16_g170482.TangentOS = In_TangentOS16_g170482;
				Data16_g170482.ViewDirWS = In_ViewDirWS16_g170482;
				Data16_g170482.VertexData = In_VertexData16_g170482;
				Data16_g170482.PhaseData = In_PhaseData16_g170482;
				Data16_g170482.BoundsData = In_BoundsData16_g170482;
				Data16_g170482.RotationData = In_RotationData16_g170482;
				}
				TVEModelData Data15_g170581 = Data16_g170482;
				float Out_Dummy15_g170581 = 0;
				float3 Out_PositionOS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170581 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170581 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170581 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
				float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170581 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170581 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170581 = Data15_g170581.Dummy;
				Out_PositionOS15_g170581 = Data15_g170581.PositionOS;
				Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
				Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
				Out_PositionRawOS15_g170581 = Data15_g170581.PositionRawOS;
				Out_PositionAddOS15_g170581 = Data15_g170581.PositionAddOS;
				Out_PivotOS15_g170581 = Data15_g170581.PivotOS;
				Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
				Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
				Out_NormalOS15_g170581 = Data15_g170581.NormalOS;
				Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
				Out_NormalRawOS15_g170581 = Data15_g170581.NormalRawOS;
				Out_NormalRawWS15_g170581 = Data15_g170581.NormalRawWS;
				Out_TangentOS15_g170581 = Data15_g170581.TangentOS;
				Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
				Out_VertexData15_g170581 = Data15_g170581.VertexData;
				Out_PhaseData15_g170581 = Data15_g170581.PhaseData;
				Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
				Out_RotationData15_g170581 = Data15_g170581.RotationData;
				}
				float3 temp_output_218_24_g170579 = Out_PivotOS15_g170581;
				float3 In_PositionOS16_g170580 = ( Out_PositionOS15_g170581 - temp_output_218_24_g170579 );
				float3 In_PositionWS16_g170580 = Out_PositionWS15_g170581;
				float3 In_PositionWO16_g170580 = Out_PositionWO15_g170581;
				float3 In_PositionRawOS16_g170580 = Out_PositionRawOS15_g170581;
				float3 In_PositionAddOS16_g170580 = Out_PositionAddOS15_g170581;
				float3 In_PivotOS16_g170580 = temp_output_218_24_g170579;
				float3 In_PivotWS16_g170580 = Out_PivotWS15_g170581;
				float3 In_PivotWO16_g170580 = Out_PivotWO15_g170581;
				float3 In_NormalOS16_g170580 = Out_NormalOS15_g170581;
				float3 In_NormalWS16_g170580 = Out_NormalWS15_g170581;
				float3 In_NormalRawOS16_g170580 = Out_NormalRawOS15_g170581;
				float3 In_NormalRawWS16_g170580 = Out_NormalRawWS15_g170581;
				float4 In_TangentOS16_g170580 = Out_TangentOS15_g170581;
				float3 In_ViewDirWS16_g170580 = Out_ViewDirWS15_g170581;
				float4 In_VertexData16_g170580 = Out_VertexData15_g170581;
				float4 In_PhaseData16_g170580 = Out_PhaseData15_g170581;
				float4 In_BoundsData16_g170580 = Out_BoundsData15_g170581;
				float4 In_RotationData16_g170580 = Out_RotationData15_g170581;
				{
				Data16_g170580.Dummy = In_Dummy16_g170580;
				Data16_g170580.PositionOS = In_PositionOS16_g170580;
				Data16_g170580.PositionWS = In_PositionWS16_g170580;
				Data16_g170580.PositionWO = In_PositionWO16_g170580;
				Data16_g170580.PositionRawOS = In_PositionRawOS16_g170580;
				Data16_g170580.PositionAddOS = In_PositionAddOS16_g170580;
				Data16_g170580.PivotOS = In_PivotOS16_g170580;
				Data16_g170580.PivotWS = In_PivotWS16_g170580;
				Data16_g170580.PivotWO = In_PivotWO16_g170580;
				Data16_g170580.NormalOS = In_NormalOS16_g170580;
				Data16_g170580.NormalWS = In_NormalWS16_g170580;
				Data16_g170580.NormalRawOS = In_NormalRawOS16_g170580;
				Data16_g170580.NormalRawWS = In_NormalRawWS16_g170580;
				Data16_g170580.TangentOS = In_TangentOS16_g170580;
				Data16_g170580.ViewDirWS = In_ViewDirWS16_g170580;
				Data16_g170580.VertexData = In_VertexData16_g170580;
				Data16_g170580.PhaseData = In_PhaseData16_g170580;
				Data16_g170580.BoundsData = In_BoundsData16_g170580;
				Data16_g170580.RotationData = In_RotationData16_g170580;
				}
				TVEModelData Data15_g170583 = Data16_g170580;
				float Out_Dummy15_g170583 = 0;
				float3 Out_PositionOS15_g170583 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170583 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170583 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170583 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170583 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170583 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170583 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170583 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170583 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170583 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170583 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170583 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170583 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170583 = float3( 0,0,0 );
				float4 Out_VertexData15_g170583 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170583 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170583 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170583 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170583 = Data15_g170583.Dummy;
				Out_PositionOS15_g170583 = Data15_g170583.PositionOS;
				Out_PositionWS15_g170583 = Data15_g170583.PositionWS;
				Out_PositionWO15_g170583 = Data15_g170583.PositionWO;
				Out_PositionRawOS15_g170583 = Data15_g170583.PositionRawOS;
				Out_PositionAddOS15_g170583 = Data15_g170583.PositionAddOS;
				Out_PivotOS15_g170583 = Data15_g170583.PivotOS;
				Out_PivotWS15_g170583 = Data15_g170583.PivotWS;
				Out_PivotWO15_g170583 = Data15_g170583.PivotWO;
				Out_NormalOS15_g170583 = Data15_g170583.NormalOS;
				Out_NormalWS15_g170583 = Data15_g170583.NormalWS;
				Out_NormalRawOS15_g170583 = Data15_g170583.NormalRawOS;
				Out_NormalRawWS15_g170583 = Data15_g170583.NormalRawWS;
				Out_TangentOS15_g170583 = Data15_g170583.TangentOS;
				Out_ViewDirWS15_g170583 = Data15_g170583.ViewDirWS;
				Out_VertexData15_g170583 = Data15_g170583.VertexData;
				Out_PhaseData15_g170583 = Data15_g170583.PhaseData;
				Out_BoundsData15_g170583 = Data15_g170583.BoundsData;
				Out_RotationData15_g170583 = Data15_g170583.RotationData;
				}
				half3 Model_PositionOS147_g170582 = Out_PositionOS15_g170583;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = Unity_SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170584 = unity_CameraToWorld;
				float3 appendResult118_g170584 = (float3(break117_g170584[ 0 ][ 2 ] , break117_g170584[ 1 ][ 2 ] , break117_g170584[ 2 ][ 2 ]));
				float3 lerpResult209_g170582 = lerp( ase_viewDirSafeWS , -appendResult118_g170584 , unity_OrthoParams.w);
				float3 break201_g170582 = cross( lerpResult209_g170582 , half3(0,1,0) );
				float3 appendResult196_g170582 = (float3(-break201_g170582.z , 0.0 , break201_g170582.x));
				float dotResult189_g170582 = dot( ase_viewDirSafeWS , float3(0,1,0) );
				float saferPower192_g170582 = abs( dotResult189_g170582 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170582 = ( Model_PositionOS147_g170582 + ( mul( unity_WorldToObject, float4( appendResult196_g170582 , 0.0 ) ).xyz * _PerspectiveIntensityValue * pow( saferPower192_g170582 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170582).y ) ) );
				#else
				float3 staticSwitch211_g170582 = Model_PositionOS147_g170582;
				#endif
				half3 Final_Position178_g170582 = staticSwitch211_g170582;
				float3 In_PositionOS16_g170585 = Final_Position178_g170582;
				float3 In_PositionWS16_g170585 = Out_PositionWS15_g170583;
				float3 In_PositionWO16_g170585 = Out_PositionWO15_g170583;
				float3 In_PositionRawOS16_g170585 = Out_PositionRawOS15_g170583;
				float3 In_PositionAddOS16_g170585 = Out_PositionAddOS15_g170583;
				float3 In_PivotOS16_g170585 = Out_PivotOS15_g170583;
				float3 In_PivotWS16_g170585 = Out_PivotWS15_g170583;
				float3 In_PivotWO16_g170585 = Out_PivotWO15_g170583;
				float3 In_NormalOS16_g170585 = Out_NormalOS15_g170583;
				float3 In_NormalWS16_g170585 = Out_NormalWS15_g170583;
				float3 In_NormalRawOS16_g170585 = Out_NormalRawOS15_g170583;
				float3 In_NormalRawWS16_g170585 = Out_NormalRawWS15_g170583;
				float4 In_TangentOS16_g170585 = Out_TangentOS15_g170583;
				float3 In_ViewDirWS16_g170585 = Out_ViewDirWS15_g170583;
				float4 In_VertexData16_g170585 = Out_VertexData15_g170583;
				float4 In_PhaseData16_g170585 = Out_PhaseData15_g170583;
				float4 In_BoundsData16_g170585 = Out_BoundsData15_g170583;
				float4 In_RotationData16_g170585 = Out_RotationData15_g170583;
				{
				Data16_g170585.Dummy = In_Dummy16_g170585;
				Data16_g170585.PositionOS = In_PositionOS16_g170585;
				Data16_g170585.PositionWS = In_PositionWS16_g170585;
				Data16_g170585.PositionWO = In_PositionWO16_g170585;
				Data16_g170585.PositionRawOS = In_PositionRawOS16_g170585;
				Data16_g170585.PositionAddOS = In_PositionAddOS16_g170585;
				Data16_g170585.PivotOS = In_PivotOS16_g170585;
				Data16_g170585.PivotWS = In_PivotWS16_g170585;
				Data16_g170585.PivotWO = In_PivotWO16_g170585;
				Data16_g170585.NormalOS = In_NormalOS16_g170585;
				Data16_g170585.NormalWS = In_NormalWS16_g170585;
				Data16_g170585.NormalRawOS = In_NormalRawOS16_g170585;
				Data16_g170585.NormalRawWS = In_NormalRawWS16_g170585;
				Data16_g170585.TangentOS = In_TangentOS16_g170585;
				Data16_g170585.ViewDirWS = In_ViewDirWS16_g170585;
				Data16_g170585.VertexData = In_VertexData16_g170585;
				Data16_g170585.PhaseData = In_PhaseData16_g170585;
				Data16_g170585.BoundsData = In_BoundsData16_g170585;
				Data16_g170585.RotationData = In_RotationData16_g170585;
				}
				TVEModelData Data15_g170672 = Data16_g170585;
				float Out_Dummy15_g170672 = 0;
				float3 Out_PositionOS15_g170672 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170672 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170672 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170672 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170672 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170672 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170672 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170672 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170672 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170672 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170672 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170672 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170672 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170672 = float3( 0,0,0 );
				float4 Out_VertexData15_g170672 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170672 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170672 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170672 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170672 = Data15_g170672.Dummy;
				Out_PositionOS15_g170672 = Data15_g170672.PositionOS;
				Out_PositionWS15_g170672 = Data15_g170672.PositionWS;
				Out_PositionWO15_g170672 = Data15_g170672.PositionWO;
				Out_PositionRawOS15_g170672 = Data15_g170672.PositionRawOS;
				Out_PositionAddOS15_g170672 = Data15_g170672.PositionAddOS;
				Out_PivotOS15_g170672 = Data15_g170672.PivotOS;
				Out_PivotWS15_g170672 = Data15_g170672.PivotWS;
				Out_PivotWO15_g170672 = Data15_g170672.PivotWO;
				Out_NormalOS15_g170672 = Data15_g170672.NormalOS;
				Out_NormalWS15_g170672 = Data15_g170672.NormalWS;
				Out_NormalRawOS15_g170672 = Data15_g170672.NormalRawOS;
				Out_NormalRawWS15_g170672 = Data15_g170672.NormalRawWS;
				Out_TangentOS15_g170672 = Data15_g170672.TangentOS;
				Out_ViewDirWS15_g170672 = Data15_g170672.ViewDirWS;
				Out_VertexData15_g170672 = Data15_g170672.VertexData;
				Out_PhaseData15_g170672 = Data15_g170672.PhaseData;
				Out_BoundsData15_g170672 = Data15_g170672.BoundsData;
				Out_RotationData15_g170672 = Data15_g170672.RotationData;
				}
				half3 Model_PositionOS147_g170671 = Out_PositionOS15_g170672;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170671 = Out_PivotWO15_g170672;
				half3 Model_PivotWO162_g170671 = temp_output_210_19_g170671;
				float lerpResult216_g170671 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170675 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170675 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170671 ) * lerpResult216_g170671 ) - temp_output_7_0_g170675 );
				float localBuildGlobalData204_g170496 = ( 0.0 );
				TVEGlobalData Data204_g170496 = (TVEGlobalData)0;
				half Dummy211_g170496 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170496 = Dummy211_g170496;
				float temp_output_82_0_g170506 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170508 = TVE_CoatLayers[(int)temp_output_82_0_g170506];
				TVEModelData Data16_g170483 = (TVEModelData)0;
				float In_Dummy16_g170483 = 0.0;
				float3 In_PositionWS16_g170483 = PositionWS122_g170478;
				float3 In_PositionWO16_g170483 = PositionWO132_g170478;
				float3 In_PivotWS16_g170483 = PivotWS121_g170478;
				float3 In_PivotWO16_g170483 = PivotWO133_g170478;
				float3 In_NormalWS16_g170483 = Normal_WS95_g170478;
				float3 In_ViewDirWS16_g170483 = ViewDirWS169_g170478;
				float4 In_VertexData16_g170483 = VertexMasks171_g170478;
				float4 In_BoundsData16_g170483 = float4( 1,1,1,1 );
				{
				Data16_g170483.Dummy = In_Dummy16_g170483;
				Data16_g170483.PositionWS = In_PositionWS16_g170483;
				Data16_g170483.PositionWO = In_PositionWO16_g170483;
				Data16_g170483.PivotWS = In_PivotWS16_g170483;
				Data16_g170483.PivotWO = In_PivotWO16_g170483;
				Data16_g170483.NormalWS = In_NormalWS16_g170483;
				Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
				Data16_g170483.VertexData = In_VertexData16_g170483;
				Data16_g170483.BoundsData = In_BoundsData16_g170483;
				}
				TVEModelData Data15_g170542 = Data16_g170483;
				float Out_Dummy15_g170542 = 0;
				float3 Out_PositionWS15_g170542 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170542 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170542 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170542 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170542 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170542 = float3( 0,0,0 );
				float4 Out_VertexData15_g170542 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170542 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170542 = Data15_g170542.Dummy;
				Out_PositionWS15_g170542 = Data15_g170542.PositionWS;
				Out_PositionWO15_g170542 = Data15_g170542.PositionWO;
				Out_PivotWS15_g170542 = Data15_g170542.PivotWS;
				Out_PivotWO15_g170542 = Data15_g170542.PivotWO;
				Out_NormalWS15_g170542 = Data15_g170542.NormalWS;
				Out_ViewDirWS15_g170542 = Data15_g170542.ViewDirWS;
				Out_VertexData15_g170542 = Data15_g170542.VertexData;
				Out_BoundsData15_g170542 = Data15_g170542.BoundsData;
				}
				half3 Model_PositionWS143_g170496 = Out_PositionWS15_g170542;
				half3 Model_PivotWS145_g170496 = Out_PivotWS15_g170542;
				float3 lerpResult300_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170509 = lerpResult300_g170496;
				float2 temp_output_75_0_g170509 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170509).xz ) );
				float temp_output_82_0_g170509 = temp_output_82_0_g170506;
				float2 temp_output_119_0_g170509 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170509).xz ) );
				float temp_output_7_0_g170514 = 1.0;
				float temp_output_9_0_g170514 = ( saturate( ( distance( Input_Position180_g170509 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170514 );
				float4 lerpResult131_g170509 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170509,temp_output_82_0_g170509), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170509,temp_output_82_0_g170509), 0.0 ) , saturate( ( temp_output_9_0_g170514 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170514 ) ) ));
				float4 temp_output_17_0_g170508 = lerpResult131_g170509;
				float4 temp_output_3_0_g170508 = TVE_CoatParams;
				float4 ifLocalVar18_g170508 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170508 >= 0.5 )
				ifLocalVar18_g170508 = temp_output_17_0_g170508;
				else
				ifLocalVar18_g170508 = temp_output_3_0_g170508;
				float4 lerpResult22_g170508 = lerp( temp_output_3_0_g170508 , temp_output_17_0_g170508 , temp_output_19_0_g170508);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170508 = lerpResult22_g170508;
				#else
				float4 staticSwitch24_g170508 = ifLocalVar18_g170508;
				#endif
				half4 Coat_Params302_g170496 = staticSwitch24_g170508;
				float4 In_CoatParams204_g170496 = Coat_Params302_g170496;
				float temp_output_82_0_g170497 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170499 = TVE_PaintLayers[(int)temp_output_82_0_g170497];
				float3 lerpResult85_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170500 = lerpResult85_g170496;
				float2 temp_output_75_0_g170500 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170500).xz ) );
				float temp_output_82_0_g170500 = temp_output_82_0_g170497;
				float2 temp_output_119_0_g170500 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170500).xz ) );
				float temp_output_7_0_g170505 = 1.0;
				float temp_output_9_0_g170505 = ( saturate( ( distance( Input_Position180_g170500 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170505 );
				float4 lerpResult131_g170500 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170500,temp_output_82_0_g170500), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170500,temp_output_82_0_g170500), 0.0 ) , saturate( ( temp_output_9_0_g170505 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170505 ) ) ));
				float4 temp_output_17_0_g170499 = lerpResult131_g170500;
				float4 temp_output_3_0_g170499 = TVE_PaintParams;
				float4 ifLocalVar18_g170499 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170499 >= 0.5 )
				ifLocalVar18_g170499 = temp_output_17_0_g170499;
				else
				ifLocalVar18_g170499 = temp_output_3_0_g170499;
				float4 lerpResult22_g170499 = lerp( temp_output_3_0_g170499 , temp_output_17_0_g170499 , temp_output_19_0_g170499);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170499 = lerpResult22_g170499;
				#else
				float4 staticSwitch24_g170499 = ifLocalVar18_g170499;
				#endif
				half4 Paint_Params71_g170496 = staticSwitch24_g170499;
				float4 In_PaintParams204_g170496 = Paint_Params71_g170496;
				float temp_output_82_0_g170543 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170545 = TVE_GlowLayers[(int)temp_output_82_0_g170543];
				float3 lerpResult247_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170546 = lerpResult247_g170496;
				float2 temp_output_75_0_g170546 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170546).xz ) );
				float temp_output_82_0_g170546 = temp_output_82_0_g170543;
				float2 temp_output_119_0_g170546 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170546).xz ) );
				float temp_output_7_0_g170551 = 1.0;
				float temp_output_9_0_g170551 = ( saturate( ( distance( Input_Position180_g170546 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170551 );
				float4 lerpResult131_g170546 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170546,temp_output_82_0_g170546), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170546,temp_output_82_0_g170546), 0.0 ) , saturate( ( temp_output_9_0_g170551 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170551 ) ) ));
				float4 temp_output_17_0_g170545 = lerpResult131_g170546;
				float4 temp_output_3_0_g170545 = TVE_GlowParams;
				float4 ifLocalVar18_g170545 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170545 >= 0.5 )
				ifLocalVar18_g170545 = temp_output_17_0_g170545;
				else
				ifLocalVar18_g170545 = temp_output_3_0_g170545;
				float4 lerpResult22_g170545 = lerp( temp_output_3_0_g170545 , temp_output_17_0_g170545 , temp_output_19_0_g170545);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170545 = lerpResult22_g170545;
				#else
				float4 staticSwitch24_g170545 = ifLocalVar18_g170545;
				#endif
				half4 Glow_Params248_g170496 = staticSwitch24_g170545;
				float4 In_GlowParams204_g170496 = Glow_Params248_g170496;
				float temp_output_132_0_g170524 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170526 = TVE_AtmoLayers[(int)temp_output_132_0_g170524];
				float3 lerpResult104_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170527 = lerpResult104_g170496;
				float2 temp_output_75_0_g170527 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170527).xz ) );
				float temp_output_82_0_g170527 = temp_output_132_0_g170524;
				float2 temp_output_119_0_g170527 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170527).xz ) );
				float temp_output_7_0_g170532 = 1.0;
				float temp_output_9_0_g170532 = ( saturate( ( distance( Input_Position180_g170527 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170532 );
				float4 lerpResult131_g170527 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170527,temp_output_82_0_g170527), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170527,temp_output_82_0_g170527), 0.0 ) , saturate( ( temp_output_9_0_g170532 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170532 ) ) ));
				float4 temp_output_17_0_g170526 = lerpResult131_g170527;
				float4 temp_output_3_0_g170526 = TVE_AtmoParams;
				float4 ifLocalVar18_g170526 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170526 >= 0.5 )
				ifLocalVar18_g170526 = temp_output_17_0_g170526;
				else
				ifLocalVar18_g170526 = temp_output_3_0_g170526;
				float4 lerpResult22_g170526 = lerp( temp_output_3_0_g170526 , temp_output_17_0_g170526 , temp_output_19_0_g170526);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170526 = lerpResult22_g170526;
				#else
				float4 staticSwitch24_g170526 = ifLocalVar18_g170526;
				#endif
				half4 Atmo_Params80_g170496 = staticSwitch24_g170526;
				float4 In_AtmoParams204_g170496 = Atmo_Params80_g170496;
				float temp_output_132_0_g170533 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170535 = TVE_FadeLayers[(int)temp_output_132_0_g170533];
				float3 lerpResult382_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFadePivotValue);
				half3 Input_Position180_g170536 = lerpResult382_g170496;
				float2 temp_output_75_0_g170536 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170536).xz ) );
				float temp_output_82_0_g170536 = temp_output_132_0_g170533;
				float2 temp_output_119_0_g170536 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170536).xz ) );
				float temp_output_7_0_g170541 = 1.0;
				float temp_output_9_0_g170541 = ( saturate( ( distance( Input_Position180_g170536 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170541 );
				float4 lerpResult131_g170536 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170536,temp_output_82_0_g170536), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170536,temp_output_82_0_g170536), 0.0 ) , saturate( ( temp_output_9_0_g170541 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170541 ) ) ));
				float4 temp_output_17_0_g170535 = lerpResult131_g170536;
				float4 temp_output_3_0_g170535 = TVE_FadeParams;
				float4 ifLocalVar18_g170535 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170535 >= 0.5 )
				ifLocalVar18_g170535 = temp_output_17_0_g170535;
				else
				ifLocalVar18_g170535 = temp_output_3_0_g170535;
				float4 lerpResult22_g170535 = lerp( temp_output_3_0_g170535 , temp_output_17_0_g170535 , temp_output_19_0_g170535);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170535 = lerpResult22_g170535;
				#else
				float4 staticSwitch24_g170535 = ifLocalVar18_g170535;
				#endif
				half4 Fade_Params387_g170496 = staticSwitch24_g170535;
				float4 In_FadeParams204_g170496 = Fade_Params387_g170496;
				float temp_output_130_0_g170515 = _GlobalFormLayerValue;
				float temp_output_19_0_g170517 = TVE_FormLayers[(int)temp_output_130_0_g170515];
				float3 lerpResult168_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFormPivotValue);
				half3 Input_Position180_g170518 = lerpResult168_g170496;
				float2 temp_output_75_0_g170518 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170518).xz ) );
				float temp_output_82_0_g170518 = temp_output_130_0_g170515;
				float2 temp_output_119_0_g170518 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170518).xz ) );
				float temp_output_7_0_g170523 = 1.0;
				float temp_output_9_0_g170523 = ( saturate( ( distance( Input_Position180_g170518 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170523 );
				float4 lerpResult131_g170518 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170518,temp_output_82_0_g170518), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170518,temp_output_82_0_g170518), 0.0 ) , saturate( ( temp_output_9_0_g170523 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170523 ) ) ));
				float4 temp_output_17_0_g170517 = lerpResult131_g170518;
				float4 temp_output_3_0_g170517 = TVE_FormParams;
				float4 ifLocalVar18_g170517 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170517 >= 0.5 )
				ifLocalVar18_g170517 = temp_output_17_0_g170517;
				else
				ifLocalVar18_g170517 = temp_output_3_0_g170517;
				float4 lerpResult22_g170517 = lerp( temp_output_3_0_g170517 , temp_output_17_0_g170517 , temp_output_19_0_g170517);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170517 = lerpResult22_g170517;
				#else
				float4 staticSwitch24_g170517 = ifLocalVar18_g170517;
				#endif
				half4 Form_Params112_g170496 = staticSwitch24_g170517;
				float4 In_FormParams204_g170496 = Form_Params112_g170496;
				float temp_output_136_0_g170561 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170563 = TVE_FlowLayers[(int)temp_output_136_0_g170561];
				float3 lerpResult400_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170564 = lerpResult400_g170496;
				float2 temp_output_75_0_g170564 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170564).xz ) );
				float temp_output_82_0_g170564 = temp_output_136_0_g170561;
				float2 temp_output_119_0_g170564 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170564).xz ) );
				float temp_output_7_0_g170569 = 1.0;
				float temp_output_9_0_g170569 = ( saturate( ( distance( Input_Position180_g170564 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170569 );
				float4 lerpResult131_g170564 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170564,temp_output_82_0_g170564), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170564,temp_output_82_0_g170564), 0.0 ) , saturate( ( temp_output_9_0_g170569 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170569 ) ) ));
				float4 temp_output_17_0_g170563 = lerpResult131_g170564;
				float4 temp_output_3_0_g170563 = TVE_FlowParams;
				float4 ifLocalVar18_g170563 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170563 >= 0.5 )
				ifLocalVar18_g170563 = temp_output_17_0_g170563;
				else
				ifLocalVar18_g170563 = temp_output_3_0_g170563;
				float4 lerpResult22_g170563 = lerp( temp_output_3_0_g170563 , temp_output_17_0_g170563 , temp_output_19_0_g170563);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170563 = lerpResult22_g170563;
				#else
				float4 staticSwitch24_g170563 = ifLocalVar18_g170563;
				#endif
				half4 Flow_Params405_g170496 = staticSwitch24_g170563;
				float4 In_FlowParams204_g170496 = Flow_Params405_g170496;
				{
				Data204_g170496.Dummy = In_Dummy204_g170496;
				Data204_g170496.CoatParams = In_CoatParams204_g170496;
				Data204_g170496.PaintParams = In_PaintParams204_g170496;
				Data204_g170496.GlowParams = In_GlowParams204_g170496;
				Data204_g170496.AtmoParams = In_AtmoParams204_g170496;
				Data204_g170496.FadeParams = In_FadeParams204_g170496;
				Data204_g170496.FormParams= In_FormParams204_g170496;
				Data204_g170496.FlowParams = In_FlowParams204_g170496;
				}
				TVEGlobalData Data15_g170674 = Data204_g170496;
				float Out_Dummy15_g170674 = 0;
				float4 Out_CoatParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170674 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170674 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170674 = Data15_g170674.Dummy;
				Out_CoatParams15_g170674 = Data15_g170674.CoatParams;
				Out_PaintParams15_g170674 = Data15_g170674.PaintParams;
				Out_GlowParams15_g170674 = Data15_g170674.GlowParams;
				Out_AtmoParams15_g170674= Data15_g170674.AtmoParams;
				Out_FadeParams15_g170674= Data15_g170674.FadeParams;
				Out_FormParams15_g170674 = Data15_g170674.FormParams;
				Out_FlowParams15_g170674 = Data15_g170674.FlowParams;
				}
				half4 Input_FormParams188_g170671 = Out_FormParams15_g170674;
				float temp_output_6_0_g170676 = saturate( (Input_FormParams188_g170671).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170676 = ( temp_output_6_0_g170676 + ( _SizeFadeElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170676 = temp_output_6_0_g170676;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170671 = staticSwitch14_g170676;
				#else
				float staticSwitch194_g170671 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170671 = lerp( 1.0 , staticSwitch194_g170671 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170671 = lerpResult213_g170671;
				float temp_output_189_0_g170671 = ( saturate( ( ( temp_output_9_0_g170675 / ( _SizeFadeDistMinValue - temp_output_7_0_g170675 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170671 );
				float3 appendResult200_g170671 = (float3(temp_output_189_0_g170671 , temp_output_189_0_g170671 , temp_output_189_0_g170671));
				float3 appendResult201_g170671 = (float3(1.0 , temp_output_189_0_g170671 , 1.0));
				float3 lerpResult202_g170671 = lerp( appendResult200_g170671 , appendResult201_g170671 , _SizeFadeScaleMode);
				float3 lerpResult184_g170671 = lerp( temp_cast_5 , lerpResult202_g170671 , _SizeFadeIntensityValue);
				float3 temp_output_167_0_g170671 = ( lerpResult184_g170671 * Model_PositionOS147_g170671 );
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170671 = temp_output_167_0_g170671;
				#else
				float3 staticSwitch199_g170671 = Model_PositionOS147_g170671;
				#endif
				half3 Final_Position178_g170671 = staticSwitch199_g170671;
				float3 In_PositionOS16_g170673 = Final_Position178_g170671;
				float3 In_PositionWS16_g170673 = Out_PositionWS15_g170672;
				float3 In_PositionWO16_g170673 = Out_PositionWO15_g170672;
				float3 In_PositionRawOS16_g170673 = Out_PositionRawOS15_g170672;
				float3 In_PositionAddOS16_g170673 = Out_PositionAddOS15_g170672;
				float3 temp_output_210_24_g170671 = Out_PivotOS15_g170672;
				float3 In_PivotOS16_g170673 = temp_output_210_24_g170671;
				float3 In_PivotWS16_g170673 = Out_PivotWS15_g170672;
				float3 In_PivotWO16_g170673 = temp_output_210_19_g170671;
				float3 In_NormalOS16_g170673 = Out_NormalOS15_g170672;
				float3 In_NormalWS16_g170673 = Out_NormalWS15_g170672;
				float3 In_NormalRawOS16_g170673 = Out_NormalRawOS15_g170672;
				float3 In_NormalRawWS16_g170673 = Out_NormalRawWS15_g170672;
				float4 In_TangentOS16_g170673 = Out_TangentOS15_g170672;
				float3 In_ViewDirWS16_g170673 = Out_ViewDirWS15_g170672;
				float4 In_VertexData16_g170673 = Out_VertexData15_g170672;
				float4 In_PhaseData16_g170673 = Out_PhaseData15_g170672;
				float4 In_BoundsData16_g170673 = Out_BoundsData15_g170672;
				float4 In_RotationData16_g170673 = Out_RotationData15_g170672;
				{
				Data16_g170673.Dummy = In_Dummy16_g170673;
				Data16_g170673.PositionOS = In_PositionOS16_g170673;
				Data16_g170673.PositionWS = In_PositionWS16_g170673;
				Data16_g170673.PositionWO = In_PositionWO16_g170673;
				Data16_g170673.PositionRawOS = In_PositionRawOS16_g170673;
				Data16_g170673.PositionAddOS = In_PositionAddOS16_g170673;
				Data16_g170673.PivotOS = In_PivotOS16_g170673;
				Data16_g170673.PivotWS = In_PivotWS16_g170673;
				Data16_g170673.PivotWO = In_PivotWO16_g170673;
				Data16_g170673.NormalOS = In_NormalOS16_g170673;
				Data16_g170673.NormalWS = In_NormalWS16_g170673;
				Data16_g170673.NormalRawOS = In_NormalRawOS16_g170673;
				Data16_g170673.NormalRawWS = In_NormalRawWS16_g170673;
				Data16_g170673.TangentOS = In_TangentOS16_g170673;
				Data16_g170673.ViewDirWS = In_ViewDirWS16_g170673;
				Data16_g170673.VertexData = In_VertexData16_g170673;
				Data16_g170673.PhaseData = In_PhaseData16_g170673;
				Data16_g170673.BoundsData = In_BoundsData16_g170673;
				Data16_g170673.RotationData = In_RotationData16_g170673;
				}
				TVEModelData Data15_g170730 = Data16_g170673;
				float Out_Dummy15_g170730 = 0;
				float3 Out_PositionOS15_g170730 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170730 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170730 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170730 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170730 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170730 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170730 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170730 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170730 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170730 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170730 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170730 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170730 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170730 = float3( 0,0,0 );
				float4 Out_VertexData15_g170730 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170730 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170730 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170730 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170730 = Data15_g170730.Dummy;
				Out_PositionOS15_g170730 = Data15_g170730.PositionOS;
				Out_PositionWS15_g170730 = Data15_g170730.PositionWS;
				Out_PositionWO15_g170730 = Data15_g170730.PositionWO;
				Out_PositionRawOS15_g170730 = Data15_g170730.PositionRawOS;
				Out_PositionAddOS15_g170730 = Data15_g170730.PositionAddOS;
				Out_PivotOS15_g170730 = Data15_g170730.PivotOS;
				Out_PivotWS15_g170730 = Data15_g170730.PivotWS;
				Out_PivotWO15_g170730 = Data15_g170730.PivotWO;
				Out_NormalOS15_g170730 = Data15_g170730.NormalOS;
				Out_NormalWS15_g170730 = Data15_g170730.NormalWS;
				Out_NormalRawOS15_g170730 = Data15_g170730.NormalRawOS;
				Out_NormalRawWS15_g170730 = Data15_g170730.NormalRawWS;
				Out_TangentOS15_g170730 = Data15_g170730.TangentOS;
				Out_ViewDirWS15_g170730 = Data15_g170730.ViewDirWS;
				Out_VertexData15_g170730 = Data15_g170730.VertexData;
				Out_PhaseData15_g170730 = Data15_g170730.PhaseData;
				Out_BoundsData15_g170730 = Data15_g170730.BoundsData;
				Out_RotationData15_g170730 = Data15_g170730.RotationData;
				}
				float3 temp_output_2503_0_g170714 = Out_PositionOS15_g170730;
				float3 In_PositionOS16_g170731 = temp_output_2503_0_g170714;
				float3 temp_output_2503_16_g170714 = Out_PositionWS15_g170730;
				float3 In_PositionWS16_g170731 = temp_output_2503_16_g170714;
				float3 temp_output_2503_17_g170714 = Out_PositionWO15_g170730;
				float3 In_PositionWO16_g170731 = temp_output_2503_17_g170714;
				float3 In_PositionRawOS16_g170731 = Out_PositionRawOS15_g170730;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170714 = Out_VertexData15_g170730;
				half4 Model_VertexMasks518_g170714 = temp_output_2503_29_g170714;
				float4 break1689_g170714 = Model_VertexMasks518_g170714;
				float4 break33_g170715 = _motion_small_vert_mode;
				float temp_output_30_0_g170715 = ( break1689_g170714.x * break33_g170715.x );
				float temp_output_29_0_g170715 = ( break1689_g170714.y * break33_g170715.y );
				float temp_output_31_0_g170715 = ( break1689_g170714.z * break33_g170715.z );
				float temp_output_28_0_g170715 = ( temp_output_30_0_g170715 + temp_output_29_0_g170715 + temp_output_31_0_g170715 + ( break1689_g170714.w * break33_g170715.w ) );
				float temp_output_1727_0_g170714 = temp_output_28_0_g170715;
				float4 temp_output_2503_30_g170714 = Out_BoundsData15_g170730;
				half4 Model_BoundsData1322_g170714 = temp_output_2503_30_g170714;
				float4 break33_g170717 = _motion_small_proc_mode;
				float temp_output_30_0_g170717 = ( (Model_BoundsData1322_g170714).z * break33_g170717.x );
				float temp_output_29_0_g170717 = ( (Model_BoundsData1322_g170714).w * break33_g170717.y );
				float temp_output_1734_0_g170714 = ( temp_output_30_0_g170717 + temp_output_29_0_g170717 );
				float lerpResult1906_g170714 = lerp( temp_output_1727_0_g170714 , temp_output_1734_0_g170714 , _motion_small_mask_mode);
				float enc1805_g170714 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170714 = DecodeFloatToVector2( enc1805_g170714 );
				float2 break1804_g170714 = localDecodeFloatToVector21805_g170714;
				half Small_Mask_Legacy1806_g170714 = break1804_g170714.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170714 = Small_Mask_Legacy1806_g170714;
				#else
				float staticSwitch1800_g170714 = lerpResult1906_g170714;
				#endif
				float clampResult17_g170719 = clamp( staticSwitch1800_g170714 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170728 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170728 = ( clampResult17_g170719 - temp_output_7_0_g170728 );
				float temp_output_6_0_g170726 = saturate( ( ( temp_output_9_0_g170728 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170726 = ( temp_output_6_0_g170726 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170726 = temp_output_6_0_g170726;
				#endif
				half Small_Mask640_g170714 = staticSwitch14_g170726;
				float4 lerpResult836_g170750 = lerp( half4(0,1,1,0) , TVE_MotionParams , TVE_MotionParams.w);
				half2 Global_WindDirWS2542_g170714 = ((lerpResult836_g170750).xy*2.0 + -1.0);
				half2 Input_WindDirWS803_g170745 = Global_WindDirWS2542_g170714;
				half3 Model_PositionWO162_g170714 = temp_output_2503_17_g170714;
				half3 Input_ModelPositionWO761_g170732 = Model_PositionWO162_g170714;
				float3 temp_output_2503_19_g170714 = Out_PivotWO15_g170730;
				half3 Model_PivotWO402_g170714 = temp_output_2503_19_g170714;
				half3 Input_ModelPivotsWO419_g170732 = Model_PivotWO402_g170714;
				half Input_MotionPivots629_g170732 = _MotionSmallPivotValue;
				float3 lerpResult771_g170732 = lerp( Input_ModelPositionWO761_g170732 , Input_ModelPivotsWO419_g170732 , Input_MotionPivots629_g170732);
				float4 temp_output_2503_27_g170714 = Out_PhaseData15_g170730;
				half4 Model_PhaseData489_g170714 = temp_output_2503_27_g170714;
				half4 Input_ModelMotionData763_g170732 = Model_PhaseData489_g170714;
				half Input_MotionPhase764_g170732 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170714 = ( lerpResult771_g170732 + ( (Input_ModelMotionData763_g170732).z * Input_MotionPhase764_g170732 * 5.0 ) );
				half3 Input_PositionWO419_g170745 = Small_Position1421_g170714;
				half Input_MotionTilling321_g170745 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170745 = ( -(Input_PositionWO419_g170745).xz * Input_MotionTilling321_g170745 * 0.005 );
				float2 temp_output_3_0_g170747 = Noise_Coord515_g170745;
				float2 temp_output_21_0_g170747 = Input_WindDirWS803_g170745;
				float lerpResult128_g170746 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170745 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170745 = ( lerpResult128_g170746 * 0.02 * Input_MotionSpeed62_g170745 );
				float temp_output_15_0_g170747 = Noise_Speed516_g170745;
				float temp_output_23_0_g170747 = frac( temp_output_15_0_g170747 );
				float4 lerpResult39_g170747 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170747 + ( temp_output_21_0_g170747 * temp_output_23_0_g170747 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170747 + ( temp_output_21_0_g170747 * frac( ( temp_output_15_0_g170747 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170747 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170745 = lerpResult39_g170747;
				half2 Noise_DirWS858_g170745 = ((temp_output_635_0_g170745).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170745 = _MotionSmallNoiseValue;
				half Global_WInd769_g170750 = (lerpResult836_g170750).z;
				TVEGlobalData Data15_g170738 = Data204_g170496;
				float Out_Dummy15_g170738 = 0;
				float4 Out_CoatParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170738 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170738 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170738 = Data15_g170738.Dummy;
				Out_CoatParams15_g170738 = Data15_g170738.CoatParams;
				Out_PaintParams15_g170738 = Data15_g170738.PaintParams;
				Out_GlowParams15_g170738 = Data15_g170738.GlowParams;
				Out_AtmoParams15_g170738= Data15_g170738.AtmoParams;
				Out_FadeParams15_g170738= Data15_g170738.FadeParams;
				Out_FormParams15_g170738 = Data15_g170738.FormParams;
				Out_FlowParams15_g170738 = Data15_g170738.FlowParams;
				}
				half4 Global_FlowParams2668_g170714 = Out_FlowParams15_g170738;
				half4 Input_GlobalFlow826_g170750 = Global_FlowParams2668_g170714;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170750 = saturate( (Input_GlobalFlow826_g170750).w );
				#else
				float staticSwitch612_g170750 = Global_WInd769_g170750;
				#endif
				float lerpResult853_g170750 = lerp( staticSwitch612_g170750 , saturate( (staticSwitch612_g170750*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170750 = _MotionIntensityValue;
				half Global_WindValue1855_g170714 = ( lerpResult853_g170750 * Input_MotionValue629_g170750 );
				half Input_WindValue881_g170745 = Global_WindValue1855_g170714;
				float lerpResult701_g170745 = lerp( 1.0 , Input_MotionNoise552_g170745 , Input_WindValue881_g170745);
				float2 lerpResult646_g170745 = lerp( Input_WindDirWS803_g170745 , Noise_DirWS858_g170745 , lerpResult701_g170745);
				half2 Small_DirWS817_g170745 = lerpResult646_g170745;
				float2 break823_g170745 = Small_DirWS817_g170745;
				half4 Noise_Params685_g170745 = temp_output_635_0_g170745;
				half Wind_Sinus820_g170745 = ( ((Noise_Params685_g170745).b*2.0 + -1.0) * Input_MotionNoise552_g170745 * 0.6 );
				float3 appendResult824_g170745 = (float3(break823_g170745.x , Wind_Sinus820_g170745 , break823_g170745.y));
				half Input_MotionDelay753_g170745 = _MotionSmallDelayValue;
				float lerpResult756_g170745 = lerp( 1.0 , ( Input_WindValue881_g170745 * Input_WindValue881_g170745 ) , Input_MotionDelay753_g170745);
				half Wind_Delay815_g170745 = lerpResult756_g170745;
				float3 appendResult825_g170745 = (float3(Wind_Delay815_g170745 , 1.0 , Wind_Delay815_g170745));
				float3 temp_output_827_0_g170745 = ( ( appendResult824_g170745 * Input_WindValue881_g170745 ) * appendResult825_g170745 );
				float2 break857_g170745 = Noise_DirWS858_g170745;
				float3 appendResult833_g170745 = (float3(break857_g170745.x , Wind_Sinus820_g170745 , break857_g170745.y));
				half Global_PushWave2675_g170714 = (Input_GlobalFlow826_g170750).z;
				half Input_PushWave890_g170745 = Global_PushWave2675_g170714;
				float2 temp_output_791_0_g170750 = ((Input_GlobalFlow826_g170750).xy*2.0 + -1.0);
				float temp_output_849_0_g170750 = saturate( length( temp_output_791_0_g170750 ) );
				half Global_PushAlpha1504_g170714 = temp_output_849_0_g170750;
				half Input_PushAlpha806_g170745 = ( Global_PushAlpha1504_g170714 * _MotionSmallPushValue );
				float3 lerpResult840_g170745 = lerp( temp_output_827_0_g170745 , ( appendResult833_g170745 * Input_PushWave890_g170745 ) , Input_PushAlpha806_g170745);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170745 = lerpResult840_g170745;
				#else
				float3 staticSwitch829_g170745 = temp_output_827_0_g170745;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half3 Small_Squash1489_g170714 = ( mul( unity_WorldToObject, float4( staticSwitch829_g170745 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Motion789_g170714 = ( _MotionSmallIntensityValue * Small_Mask640_g170714 * Small_Squash1489_g170714 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170714 = Small_Motion789_g170714;
				#else
				float3 staticSwitch495_g170714 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170714 = temp_output_2503_16_g170714;
				half Global_DistMask1820_g170714 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170714 ) / _MotionDistValue ) ) );
				float4 break1710_g170714 = Model_VertexMasks518_g170714;
				float4 break33_g170716 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170716 = ( break1710_g170714.x * break33_g170716.x );
				float temp_output_29_0_g170716 = ( break1710_g170714.y * break33_g170716.y );
				float temp_output_31_0_g170716 = ( break1710_g170714.z * break33_g170716.z );
				float temp_output_28_0_g170716 = ( temp_output_30_0_g170716 + temp_output_29_0_g170716 + temp_output_31_0_g170716 + ( break1710_g170714.w * break33_g170716.w ) );
				float temp_output_1729_0_g170714 = temp_output_28_0_g170716;
				float4 break33_g170718 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170718 = ( (Model_BoundsData1322_g170714).z * break33_g170718.x );
				float temp_output_29_0_g170718 = ( (Model_BoundsData1322_g170714).w * break33_g170718.y );
				float temp_output_1735_0_g170714 = ( temp_output_30_0_g170718 + temp_output_29_0_g170718 );
				float lerpResult1908_g170714 = lerp( temp_output_1729_0_g170714 , temp_output_1735_0_g170714 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170714 = break1804_g170714.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170714 = Tiny_Mask_Legacy1807_g170714;
				#else
				float staticSwitch1810_g170714 = lerpResult1908_g170714;
				#endif
				float clampResult17_g170720 = clamp( staticSwitch1810_g170714 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170729 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170729 = ( clampResult17_g170720 - temp_output_7_0_g170729 );
				float temp_output_6_0_g170721 = saturate( ( ( temp_output_9_0_g170729 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170721 = ( temp_output_6_0_g170721 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170721 = temp_output_6_0_g170721;
				#endif
				half Tiny_Mask218_g170714 = staticSwitch14_g170721;
				float3 temp_output_2503_20_g170714 = Out_NormalOS15_g170730;
				half3 Model_NormalOS554_g170714 = temp_output_2503_20_g170714;
				half3 Input_NormalOS533_g170734 = Model_NormalOS554_g170714;
				half3 Tiny_Position2469_g170714 = Model_PositionWO162_g170714;
				half3 Input_PositionWO500_g170734 = Tiny_Position2469_g170714;
				half Input_MotionTilling321_g170734 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170736 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170734 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170734 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170734).xz * Input_MotionTilling321_g170734 * 0.005 ) + ( lerpResult128_g170736 * Input_MotionSpeed62_g170734 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170734 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170734 = lerp( ( Input_NormalOS533_g170734 * Flutter_Noise535_g170734 ) , Flutter_Noise535_g170734 , Input_MotionNoise542_g170734);
				half3 Input_ModelPositionWO761_g170733 = Model_PositionWO162_g170714;
				half3 Input_ModelPivotsWO419_g170733 = Model_PivotWO402_g170714;
				half Input_MotionPivots629_g170733 = _MotionBasePivotValue;
				float3 lerpResult771_g170733 = lerp( Input_ModelPositionWO761_g170733 , Input_ModelPivotsWO419_g170733 , Input_MotionPivots629_g170733);
				half4 Input_ModelMotionData763_g170733 = Model_PhaseData489_g170714;
				half Input_MotionPhase764_g170733 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170714 = ( lerpResult771_g170733 + ( (Input_ModelMotionData763_g170733).z * Input_MotionPhase764_g170733 * 5.0 ) );
				half3 Input_PositionWO419_g170739 = Base_Position1394_g170714;
				half Input_MotionTilling321_g170739 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170739 = ( -(Input_PositionWO419_g170739).xz * Input_MotionTilling321_g170739 * 0.005 );
				float2 temp_output_3_0_g170741 = Noise_Coord515_g170739;
				half2 Input_WindDirWS803_g170739 = Global_WindDirWS2542_g170714;
				float2 temp_output_21_0_g170741 = Input_WindDirWS803_g170739;
				float lerpResult128_g170740 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170739 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170739 = ( lerpResult128_g170740 * 0.02 * Input_MotionSpeed62_g170739 );
				float temp_output_15_0_g170741 = Noise_Speed516_g170739;
				float temp_output_23_0_g170741 = frac( temp_output_15_0_g170741 );
				float4 lerpResult39_g170741 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170741 + ( temp_output_21_0_g170741 * temp_output_23_0_g170741 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170741 + ( temp_output_21_0_g170741 * frac( ( temp_output_15_0_g170741 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170741 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170739 = lerpResult39_g170741;
				half4 Noise_Params685_g170739 = temp_output_635_0_g170739;
				half Input_WindValue853_g170739 = Global_WindValue1855_g170714;
				float temp_output_855_0_g170739 = ( (Noise_Params685_g170739).a * Input_WindValue853_g170739 );
				half Input_PushWave858_g170739 = Global_PushWave2675_g170714;
				half Input_PushAlpha806_g170739 = ( Global_PushAlpha1504_g170714 * _MotionBasePushValue );
				float lerpResult831_g170739 = lerp( temp_output_855_0_g170739 , Input_PushWave858_g170739 , Input_PushAlpha806_g170739);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170739 = lerpResult831_g170739;
				#else
				float staticSwitch828_g170739 = temp_output_855_0_g170739;
				#endif
				half Base_Wave1159_g170714 = staticSwitch828_g170739;
				float temp_output_888_0_g170745 = ( (Noise_Params685_g170745).b * Input_WindValue881_g170745 );
				float lerpResult867_g170745 = lerp( temp_output_888_0_g170745 , ( (Noise_Params685_g170745).b * Input_PushWave890_g170745 ) , Input_PushAlpha806_g170745);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170745 = lerpResult867_g170745;
				#else
				float staticSwitch886_g170745 = temp_output_888_0_g170745;
				#endif
				half Small_Wave1427_g170714 = staticSwitch886_g170745;
				float lerpResult2422_g170714 = lerp( Base_Wave1159_g170714 , Small_Wave1427_g170714 , _motion_small_mode);
				half Global_Wave1475_g170714 = lerpResult2422_g170714;
				half Input_GlobalWave546_g170734 = Global_Wave1475_g170714;
				float temp_output_548_0_g170734 = ( Input_GlobalWave546_g170734 * Input_GlobalWave546_g170734 );
				half Flutter_Wave556_g170734 = temp_output_548_0_g170734;
				half3 Tiny_Noise859_g170714 = ( lerpResult537_g170734 * Flutter_Wave556_g170734 );
				half3 Tiny_Flutter1451_g170714 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170714 * Tiny_Mask218_g170714 * Tiny_Noise859_g170714 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170714 = Tiny_Flutter1451_g170714;
				#else
				float3 staticSwitch414_g170714 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170714 = ( staticSwitch495_g170714 + staticSwitch414_g170714 );
				float3 In_PositionAddOS16_g170731 = Final_PositionADD1569_g170714;
				float3 temp_output_2503_24_g170714 = Out_PivotOS15_g170730;
				float3 In_PivotOS16_g170731 = temp_output_2503_24_g170714;
				float3 In_PivotWS16_g170731 = Out_PivotWS15_g170730;
				float3 In_PivotWO16_g170731 = temp_output_2503_19_g170714;
				float3 In_NormalOS16_g170731 = temp_output_2503_20_g170714;
				float3 In_NormalWS16_g170731 = Out_NormalWS15_g170730;
				float3 In_NormalRawOS16_g170731 = Out_NormalRawOS15_g170730;
				float3 In_NormalRawWS16_g170731 = Out_NormalRawWS15_g170730;
				float4 In_TangentOS16_g170731 = Out_TangentOS15_g170730;
				float3 In_ViewDirWS16_g170731 = Out_ViewDirWS15_g170730;
				float4 In_VertexData16_g170731 = temp_output_2503_29_g170714;
				float4 In_PhaseData16_g170731 = temp_output_2503_27_g170714;
				float4 In_BoundsData16_g170731 = temp_output_2503_30_g170714;
				float4 break748_g170714 = Model_VertexMasks518_g170714;
				float4 break33_g170723 = _motion_base_vert_mode;
				float temp_output_30_0_g170723 = ( break748_g170714.x * break33_g170723.x );
				float temp_output_29_0_g170723 = ( break748_g170714.y * break33_g170723.y );
				float temp_output_31_0_g170723 = ( break748_g170714.z * break33_g170723.z );
				float temp_output_28_0_g170723 = ( temp_output_30_0_g170723 + temp_output_29_0_g170723 + temp_output_31_0_g170723 + ( break748_g170714.w * break33_g170723.w ) );
				float temp_output_1731_0_g170714 = temp_output_28_0_g170723;
				float4 break33_g170724 = _motion_base_proc_mode;
				float temp_output_30_0_g170724 = ( (Model_BoundsData1322_g170714).z * break33_g170724.x );
				float temp_output_29_0_g170724 = ( (Model_BoundsData1322_g170714).w * break33_g170724.y );
				float temp_output_1733_0_g170714 = ( temp_output_30_0_g170724 + temp_output_29_0_g170724 );
				float lerpResult1904_g170714 = lerp( temp_output_1731_0_g170714 , temp_output_1733_0_g170714 , _motion_base_mask_mode);
				float clampResult17_g170722 = clamp( lerpResult1904_g170714 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170727 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170727 = ( clampResult17_g170722 - temp_output_7_0_g170727 );
				float temp_output_6_0_g170725 = saturate( ( ( temp_output_9_0_g170727 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170725 = ( temp_output_6_0_g170725 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170725 = temp_output_6_0_g170725;
				#endif
				half Base_Mask217_g170714 = staticSwitch14_g170725;
				half2 Noise_DirWS825_g170739 = ((temp_output_635_0_g170739).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170739 = _MotionBaseNoiseValue;
				float lerpResult701_g170739 = lerp( 1.0 , Input_MotionNoise552_g170739 , Input_WindValue853_g170739);
				float2 lerpResult646_g170739 = lerp( Input_WindDirWS803_g170739 , Noise_DirWS825_g170739 , lerpResult701_g170739);
				half Input_MotionDelay753_g170739 = _MotionBaseDelayValue;
				float lerpResult756_g170739 = lerp( 1.0 , ( Input_WindValue853_g170739 * Input_WindValue853_g170739 ) , Input_MotionDelay753_g170739);
				half Wind_Delay815_g170739 = lerpResult756_g170739;
				float2 temp_output_809_0_g170739 = ( lerpResult646_g170739 * Input_WindValue853_g170739 * Wind_Delay815_g170739 );
				half2 Global_PushDirWS1972_g170714 = temp_output_791_0_g170750;
				half2 Input_PushDirWS807_g170739 = Global_PushDirWS1972_g170714;
				float2 lerpResult811_g170739 = lerp( temp_output_809_0_g170739 , Input_PushDirWS807_g170739 , Input_PushAlpha806_g170739);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170739 = lerpResult811_g170739;
				#else
				float2 staticSwitch808_g170739 = temp_output_809_0_g170739;
				#endif
				float2 break83_g170744 = staticSwitch808_g170739;
				float3 appendResult79_g170744 = (float3(break83_g170744.x , 0.0 , break83_g170744.y));
				half2 Base_Bending893_g170714 = (( mul( unity_WorldToObject, float4( appendResult79_g170744 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170714 = ( _MotionBaseIntensityValue * Base_Mask217_g170714 * Base_Bending893_g170714 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170714 = Base_Motion1440_g170714;
				#else
				float2 staticSwitch2384_g170714 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170714 = (float4(staticSwitch2384_g170714 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170714 = appendResult2023_g170714;
				float4 In_RotationData16_g170731 = Final_RotationData1570_g170714;
				{
				Data16_g170731.Dummy = In_Dummy16_g170731;
				Data16_g170731.PositionOS = In_PositionOS16_g170731;
				Data16_g170731.PositionWS = In_PositionWS16_g170731;
				Data16_g170731.PositionWO = In_PositionWO16_g170731;
				Data16_g170731.PositionRawOS = In_PositionRawOS16_g170731;
				Data16_g170731.PositionAddOS = In_PositionAddOS16_g170731;
				Data16_g170731.PivotOS = In_PivotOS16_g170731;
				Data16_g170731.PivotWS = In_PivotWS16_g170731;
				Data16_g170731.PivotWO = In_PivotWO16_g170731;
				Data16_g170731.NormalOS = In_NormalOS16_g170731;
				Data16_g170731.NormalWS = In_NormalWS16_g170731;
				Data16_g170731.NormalRawOS = In_NormalRawOS16_g170731;
				Data16_g170731.NormalRawWS = In_NormalRawWS16_g170731;
				Data16_g170731.TangentOS = In_TangentOS16_g170731;
				Data16_g170731.ViewDirWS = In_ViewDirWS16_g170731;
				Data16_g170731.VertexData = In_VertexData16_g170731;
				Data16_g170731.PhaseData = In_PhaseData16_g170731;
				Data16_g170731.BoundsData = In_BoundsData16_g170731;
				Data16_g170731.RotationData = In_RotationData16_g170731;
				}
				TVEModelData Data15_g170964 = Data16_g170731;
				float Out_Dummy15_g170964 = 0;
				float3 Out_PositionOS15_g170964 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170964 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170964 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170964 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170964 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170964 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170964 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170964 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170964 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170964 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170964 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170964 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170964 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170964 = float3( 0,0,0 );
				float4 Out_VertexData15_g170964 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170964 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170964 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170964 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170964 = Data15_g170964.Dummy;
				Out_PositionOS15_g170964 = Data15_g170964.PositionOS;
				Out_PositionWS15_g170964 = Data15_g170964.PositionWS;
				Out_PositionWO15_g170964 = Data15_g170964.PositionWO;
				Out_PositionRawOS15_g170964 = Data15_g170964.PositionRawOS;
				Out_PositionAddOS15_g170964 = Data15_g170964.PositionAddOS;
				Out_PivotOS15_g170964 = Data15_g170964.PivotOS;
				Out_PivotWS15_g170964 = Data15_g170964.PivotWS;
				Out_PivotWO15_g170964 = Data15_g170964.PivotWO;
				Out_NormalOS15_g170964 = Data15_g170964.NormalOS;
				Out_NormalWS15_g170964 = Data15_g170964.NormalWS;
				Out_NormalRawOS15_g170964 = Data15_g170964.NormalRawOS;
				Out_NormalRawWS15_g170964 = Data15_g170964.NormalRawWS;
				Out_TangentOS15_g170964 = Data15_g170964.TangentOS;
				Out_ViewDirWS15_g170964 = Data15_g170964.ViewDirWS;
				Out_VertexData15_g170964 = Data15_g170964.VertexData;
				Out_PhaseData15_g170964 = Data15_g170964.PhaseData;
				Out_BoundsData15_g170964 = Data15_g170964.BoundsData;
				Out_RotationData15_g170964 = Data15_g170964.RotationData;
				}
				half3 Model_PositionOS147_g170963 = Out_PositionOS15_g170964;
				half3 Input_False58_g170966 = Model_PositionOS147_g170963;
				half3 VertexPos40_g170967 = Model_PositionOS147_g170963;
				half3 VertexPos40_g170968 = VertexPos40_g170967;
				float3 appendResult74_g170968 = (float3(VertexPos40_g170968.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170968 = appendResult74_g170968;
				float3 break84_g170968 = VertexPos40_g170968;
				float3 appendResult81_g170968 = (float3(0.0 , break84_g170968.y , break84_g170968.z));
				half3 VertexPosOtherAxis82_g170968 = appendResult81_g170968;
				float4 temp_output_1567_33_g170963 = Out_RotationData15_g170964;
				half4 Model_VertexBend1569_g170963 = temp_output_1567_33_g170963;
				half2 Angle44_g170967 = (Model_VertexBend1569_g170963).xy;
				half Angle44_g170968 = (Angle44_g170967).y;
				half3 VertexPos40_g170969 = ( VertexPosRotationAxis50_g170968 + ( VertexPosOtherAxis82_g170968 * cos( Angle44_g170968 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170968 ) * sin( Angle44_g170968 ) ) );
				float3 appendResult74_g170969 = (float3(0.0 , 0.0 , VertexPos40_g170969.z));
				half3 VertexPosRotationAxis50_g170969 = appendResult74_g170969;
				float3 break84_g170969 = VertexPos40_g170969;
				float3 appendResult81_g170969 = (float3(break84_g170969.x , break84_g170969.y , 0.0));
				half3 VertexPosOtherAxis82_g170969 = appendResult81_g170969;
				half Angle44_g170969 = -(Angle44_g170967).x;
				half3 Input_True57_g170966 = ( VertexPosRotationAxis50_g170969 + ( VertexPosOtherAxis82_g170969 * cos( Angle44_g170969 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170969 ) * sin( Angle44_g170969 ) ) );
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170966 = Input_True57_g170966;
				#else
				float3 staticSwitch65_g170966 = Input_False58_g170966;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170966 = Input_True57_g170966;
				#else
				float3 staticSwitch69_g170966 = staticSwitch65_g170966;
				#endif
				float3 temp_output_1578_0_g170963 = staticSwitch69_g170966;
				float3 temp_output_1567_31_g170963 = Out_PositionAddOS15_g170964;
				half3 Model_PositionADD1568_g170963 = temp_output_1567_31_g170963;
				half3 Final_PositionOS178_g170963 = ( temp_output_1578_0_g170963 + Model_PositionADD1568_g170963 );
				float3 In_PositionOS16_g170965 = Final_PositionOS178_g170963;
				float3 In_PositionWS16_g170965 = Out_PositionWS15_g170964;
				float3 In_PositionWO16_g170965 = Out_PositionWO15_g170964;
				float3 In_PositionRawOS16_g170965 = Out_PositionRawOS15_g170964;
				float3 In_PositionAddOS16_g170965 = temp_output_1567_31_g170963;
				float3 In_PivotOS16_g170965 = Out_PivotOS15_g170964;
				float3 In_PivotWS16_g170965 = Out_PivotWS15_g170964;
				float3 In_PivotWO16_g170965 = Out_PivotWO15_g170964;
				float3 In_NormalOS16_g170965 = Out_NormalOS15_g170964;
				float3 In_NormalWS16_g170965 = Out_NormalWS15_g170964;
				float3 In_NormalRawOS16_g170965 = Out_NormalRawOS15_g170964;
				float3 In_NormalRawWS16_g170965 = Out_NormalRawWS15_g170964;
				float4 In_TangentOS16_g170965 = Out_TangentOS15_g170964;
				float3 In_ViewDirWS16_g170965 = Out_ViewDirWS15_g170964;
				float4 In_VertexData16_g170965 = Out_VertexData15_g170964;
				float4 In_PhaseData16_g170965 = Out_PhaseData15_g170964;
				float4 In_BoundsData16_g170965 = Out_BoundsData15_g170964;
				float4 In_RotationData16_g170965 = temp_output_1567_33_g170963;
				{
				Data16_g170965.Dummy = In_Dummy16_g170965;
				Data16_g170965.PositionOS = In_PositionOS16_g170965;
				Data16_g170965.PositionWS = In_PositionWS16_g170965;
				Data16_g170965.PositionWO = In_PositionWO16_g170965;
				Data16_g170965.PositionRawOS = In_PositionRawOS16_g170965;
				Data16_g170965.PositionAddOS = In_PositionAddOS16_g170965;
				Data16_g170965.PivotOS = In_PivotOS16_g170965;
				Data16_g170965.PivotWS = In_PivotWS16_g170965;
				Data16_g170965.PivotWO = In_PivotWO16_g170965;
				Data16_g170965.NormalOS = In_NormalOS16_g170965;
				Data16_g170965.NormalWS = In_NormalWS16_g170965;
				Data16_g170965.NormalRawOS = In_NormalRawOS16_g170965;
				Data16_g170965.NormalRawWS = In_NormalRawWS16_g170965;
				Data16_g170965.TangentOS = In_TangentOS16_g170965;
				Data16_g170965.ViewDirWS = In_ViewDirWS16_g170965;
				Data16_g170965.VertexData = In_VertexData16_g170965;
				Data16_g170965.PhaseData = In_PhaseData16_g170965;
				Data16_g170965.BoundsData = In_BoundsData16_g170965;
				Data16_g170965.RotationData = In_RotationData16_g170965;
				}
				TVEModelData Data15_g170988 = Data16_g170965;
				float Out_Dummy15_g170988 = 0;
				float3 Out_PositionOS15_g170988 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170988 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170988 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170988 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170988 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170988 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170988 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170988 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170988 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170988 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170988 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170988 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170988 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170988 = float3( 0,0,0 );
				float4 Out_VertexData15_g170988 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170988 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170988 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170988 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170988 = Data15_g170988.Dummy;
				Out_PositionOS15_g170988 = Data15_g170988.PositionOS;
				Out_PositionWS15_g170988 = Data15_g170988.PositionWS;
				Out_PositionWO15_g170988 = Data15_g170988.PositionWO;
				Out_PositionRawOS15_g170988 = Data15_g170988.PositionRawOS;
				Out_PositionAddOS15_g170988 = Data15_g170988.PositionAddOS;
				Out_PivotOS15_g170988 = Data15_g170988.PivotOS;
				Out_PivotWS15_g170988 = Data15_g170988.PivotWS;
				Out_PivotWO15_g170988 = Data15_g170988.PivotWO;
				Out_NormalOS15_g170988 = Data15_g170988.NormalOS;
				Out_NormalWS15_g170988 = Data15_g170988.NormalWS;
				Out_NormalRawOS15_g170988 = Data15_g170988.NormalRawOS;
				Out_NormalRawWS15_g170988 = Data15_g170988.NormalRawWS;
				Out_TangentOS15_g170988 = Data15_g170988.TangentOS;
				Out_ViewDirWS15_g170988 = Data15_g170988.ViewDirWS;
				Out_VertexData15_g170988 = Data15_g170988.VertexData;
				Out_PhaseData15_g170988 = Data15_g170988.PhaseData;
				Out_BoundsData15_g170988 = Data15_g170988.BoundsData;
				Out_RotationData15_g170988 = Data15_g170988.RotationData;
				}
				float3 In_PositionOS16_g170989 = Out_PositionOS15_g170988;
				float3 In_PositionWS16_g170989 = Out_PositionWS15_g170988;
				float3 temp_output_1567_17_g170987 = Out_PositionWO15_g170988;
				float3 In_PositionWO16_g170989 = temp_output_1567_17_g170987;
				float3 temp_output_1567_26_g170987 = Out_PositionRawOS15_g170988;
				float3 In_PositionRawOS16_g170989 = temp_output_1567_26_g170987;
				float3 In_PositionAddOS16_g170989 = Out_PositionAddOS15_g170988;
				float3 In_PivotOS16_g170989 = Out_PivotOS15_g170988;
				float3 In_PivotWS16_g170989 = Out_PivotWS15_g170988;
				float3 In_PivotWO16_g170989 = Out_PivotWO15_g170988;
				half3 Model_NormalOS1568_g170987 = Out_NormalOS15_g170988;
				float3 lerpResult1589_g170987 = lerp( Model_NormalOS1568_g170987 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170987 = temp_output_1567_26_g170987;
				float3 normalizeResult1594_g170987 = ASESafeNormalize( ( Model_PositionRAW1592_g170987 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170987 = lerp( lerpResult1589_g170987 , normalizeResult1594_g170987 , _NormalSphereValue);
				half3 Input_False58_g171002 = lerpResult1585_g170987;
				half3 VertexPos40_g170991 = lerpResult1585_g170987;
				half3 VertexPos40_g170992 = VertexPos40_g170991;
				float3 appendResult74_g170992 = (float3(VertexPos40_g170992.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170992 = appendResult74_g170992;
				float3 break84_g170992 = VertexPos40_g170992;
				float3 appendResult81_g170992 = (float3(0.0 , break84_g170992.y , break84_g170992.z));
				half3 VertexPosOtherAxis82_g170992 = appendResult81_g170992;
				float4 temp_output_1567_33_g170987 = Out_RotationData15_g170988;
				half4 Model_RotationData1583_g170987 = temp_output_1567_33_g170987;
				half2 Angle44_g170991 = Model_RotationData1583_g170987.xy;
				half Angle44_g170992 = (Angle44_g170991).y;
				half3 VertexPos40_g170993 = ( VertexPosRotationAxis50_g170992 + ( VertexPosOtherAxis82_g170992 * cos( Angle44_g170992 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170992 ) * sin( Angle44_g170992 ) ) );
				float3 appendResult74_g170993 = (float3(0.0 , 0.0 , VertexPos40_g170993.z));
				half3 VertexPosRotationAxis50_g170993 = appendResult74_g170993;
				float3 break84_g170993 = VertexPos40_g170993;
				float3 appendResult81_g170993 = (float3(break84_g170993.x , break84_g170993.y , 0.0));
				half3 VertexPosOtherAxis82_g170993 = appendResult81_g170993;
				half Angle44_g170993 = -(Angle44_g170991).x;
				float3 lerpResult1591_g170987 = lerp( lerpResult1585_g170987 , ( VertexPosRotationAxis50_g170993 + ( VertexPosOtherAxis82_g170993 * cos( Angle44_g170993 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170993 ) * sin( Angle44_g170993 ) ) ) , _NormalComputeValue);
				half3 Input_True57_g171002 = lerpResult1591_g170987;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g171002 = Input_True57_g171002;
				#else
				float3 staticSwitch65_g171002 = Input_False58_g171002;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g171002 = Input_True57_g171002;
				#else
				float3 staticSwitch69_g171002 = staticSwitch65_g171002;
				#endif
				float3 temp_output_1715_0_g170987 = staticSwitch69_g171002;
				float4 temp_output_1567_29_g170987 = Out_VertexData15_g170988;
				half4 Model_VertexData1608_g170987 = temp_output_1567_29_g170987;
				float4 break1683_g170987 = Model_VertexData1608_g170987;
				float4 break33_g170994 = _normal_vert_mode;
				float temp_output_30_0_g170994 = ( break1683_g170987.x * break33_g170994.x );
				float temp_output_29_0_g170994 = ( break1683_g170987.y * break33_g170994.y );
				float temp_output_31_0_g170994 = ( break1683_g170987.z * break33_g170994.z );
				float temp_output_28_0_g170994 = ( temp_output_30_0_g170994 + temp_output_29_0_g170994 + temp_output_31_0_g170994 + ( break1683_g170987.w * break33_g170994.w ) );
				float clampResult17_g170995 = clamp( temp_output_28_0_g170994 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170999 = _NormalMeshRemap.x;
				float temp_output_9_0_g170999 = ( clampResult17_g170995 - temp_output_7_0_g170999 );
				float lerpResult1695_g170987 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170999 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170996 = lerpResult1695_g170987;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170996 = ( temp_output_6_0_g170996 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170996 = temp_output_6_0_g170996;
				#endif
				float temp_output_1690_0_g170987 = staticSwitch14_g170996;
				half Normal_MeskMask1691_g170987 = temp_output_1690_0_g170987;
				half Normal_Proj_Mask1647_g170987 = 1.0;
				float temp_output_1699_0_g170987 = ( Normal_MeskMask1691_g170987 * Normal_Proj_Mask1647_g170987 );
				float3 lerpResult1670_g170987 = lerp( Model_NormalOS1568_g170987 , temp_output_1715_0_g170987 , temp_output_1699_0_g170987);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170987 = lerpResult1670_g170987;
				#else
				float3 staticSwitch1716_g170987 = Model_NormalOS1568_g170987;
				#endif
				half3 Final_NormalOS178_g170987 = staticSwitch1716_g170987;
				float3 In_NormalOS16_g170989 = Final_NormalOS178_g170987;
				float3 temp_output_1567_21_g170987 = Out_NormalWS15_g170988;
				float3 In_NormalWS16_g170989 = temp_output_1567_21_g170987;
				float3 In_NormalRawOS16_g170989 = Out_NormalRawOS15_g170988;
				float3 In_NormalRawWS16_g170989 = Out_NormalRawWS15_g170988;
				float4 In_TangentOS16_g170989 = Out_TangentOS15_g170988;
				float3 In_ViewDirWS16_g170989 = Out_ViewDirWS15_g170988;
				float4 In_VertexData16_g170989 = temp_output_1567_29_g170987;
				float4 In_PhaseData16_g170989 = Out_PhaseData15_g170988;
				float4 In_BoundsData16_g170989 = Out_BoundsData15_g170988;
				float4 In_RotationData16_g170989 = temp_output_1567_33_g170987;
				{
				Data16_g170989.Dummy = In_Dummy16_g170989;
				Data16_g170989.PositionOS = In_PositionOS16_g170989;
				Data16_g170989.PositionWS = In_PositionWS16_g170989;
				Data16_g170989.PositionWO = In_PositionWO16_g170989;
				Data16_g170989.PositionRawOS = In_PositionRawOS16_g170989;
				Data16_g170989.PositionAddOS = In_PositionAddOS16_g170989;
				Data16_g170989.PivotOS = In_PivotOS16_g170989;
				Data16_g170989.PivotWS = In_PivotWS16_g170989;
				Data16_g170989.PivotWO = In_PivotWO16_g170989;
				Data16_g170989.NormalOS = In_NormalOS16_g170989;
				Data16_g170989.NormalWS = In_NormalWS16_g170989;
				Data16_g170989.NormalRawOS = In_NormalRawOS16_g170989;
				Data16_g170989.NormalRawWS = In_NormalRawWS16_g170989;
				Data16_g170989.TangentOS = In_TangentOS16_g170989;
				Data16_g170989.ViewDirWS = In_ViewDirWS16_g170989;
				Data16_g170989.VertexData = In_VertexData16_g170989;
				Data16_g170989.PhaseData = In_PhaseData16_g170989;
				Data16_g170989.BoundsData = In_BoundsData16_g170989;
				Data16_g170989.RotationData = In_RotationData16_g170989;
				}
				TVEModelData Data15_g171012 = Data16_g170989;
				float Out_Dummy15_g171012 = 0;
				float3 Out_PositionOS15_g171012 = float3( 0,0,0 );
				float3 Out_PositionWS15_g171012 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171012 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g171012 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g171012 = float3( 0,0,0 );
				float3 Out_PivotOS15_g171012 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171012 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171012 = float3( 0,0,0 );
				float3 Out_NormalOS15_g171012 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171012 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g171012 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g171012 = float3( 0,0,0 );
				float4 Out_TangentOS15_g171012 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g171012 = float3( 0,0,0 );
				float4 Out_VertexData15_g171012 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g171012 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171012 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g171012 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g171012 = Data15_g171012.Dummy;
				Out_PositionOS15_g171012 = Data15_g171012.PositionOS;
				Out_PositionWS15_g171012 = Data15_g171012.PositionWS;
				Out_PositionWO15_g171012 = Data15_g171012.PositionWO;
				Out_PositionRawOS15_g171012 = Data15_g171012.PositionRawOS;
				Out_PositionAddOS15_g171012 = Data15_g171012.PositionAddOS;
				Out_PivotOS15_g171012 = Data15_g171012.PivotOS;
				Out_PivotWS15_g171012 = Data15_g171012.PivotWS;
				Out_PivotWO15_g171012 = Data15_g171012.PivotWO;
				Out_NormalOS15_g171012 = Data15_g171012.NormalOS;
				Out_NormalWS15_g171012 = Data15_g171012.NormalWS;
				Out_NormalRawOS15_g171012 = Data15_g171012.NormalRawOS;
				Out_NormalRawWS15_g171012 = Data15_g171012.NormalRawWS;
				Out_TangentOS15_g171012 = Data15_g171012.TangentOS;
				Out_ViewDirWS15_g171012 = Data15_g171012.ViewDirWS;
				Out_VertexData15_g171012 = Data15_g171012.VertexData;
				Out_PhaseData15_g171012 = Data15_g171012.PhaseData;
				Out_BoundsData15_g171012 = Data15_g171012.BoundsData;
				Out_RotationData15_g171012 = Data15_g171012.RotationData;
				}
				float3 temp_output_217_24_g171011 = Out_PivotOS15_g171012;
				float3 In_PositionOS16_g171013 = ( Out_PositionOS15_g171012 + temp_output_217_24_g171011 );
				float3 In_PositionWS16_g171013 = Out_PositionWS15_g171012;
				float3 In_PositionWO16_g171013 = Out_PositionWO15_g171012;
				float3 In_PositionRawOS16_g171013 = Out_PositionRawOS15_g171012;
				float3 In_PositionAddOS16_g171013 = Out_PositionAddOS15_g171012;
				float3 In_PivotOS16_g171013 = temp_output_217_24_g171011;
				float3 In_PivotWS16_g171013 = Out_PivotWS15_g171012;
				float3 In_PivotWO16_g171013 = Out_PivotWO15_g171012;
				float3 In_NormalOS16_g171013 = Out_NormalOS15_g171012;
				float3 In_NormalWS16_g171013 = Out_NormalWS15_g171012;
				float3 In_NormalRawOS16_g171013 = Out_NormalRawOS15_g171012;
				float3 In_NormalRawWS16_g171013 = Out_NormalRawWS15_g171012;
				float4 In_TangentOS16_g171013 = Out_TangentOS15_g171012;
				float3 In_ViewDirWS16_g171013 = Out_ViewDirWS15_g171012;
				float4 In_VertexData16_g171013 = Out_VertexData15_g171012;
				float4 In_PhaseData16_g171013 = Out_PhaseData15_g171012;
				float4 In_BoundsData16_g171013 = Out_BoundsData15_g171012;
				float4 In_RotationData16_g171013 = Out_RotationData15_g171012;
				{
				Data16_g171013.Dummy = In_Dummy16_g171013;
				Data16_g171013.PositionOS = In_PositionOS16_g171013;
				Data16_g171013.PositionWS = In_PositionWS16_g171013;
				Data16_g171013.PositionWO = In_PositionWO16_g171013;
				Data16_g171013.PositionRawOS = In_PositionRawOS16_g171013;
				Data16_g171013.PositionAddOS = In_PositionAddOS16_g171013;
				Data16_g171013.PivotOS = In_PivotOS16_g171013;
				Data16_g171013.PivotWS = In_PivotWS16_g171013;
				Data16_g171013.PivotWO = In_PivotWO16_g171013;
				Data16_g171013.NormalOS = In_NormalOS16_g171013;
				Data16_g171013.NormalWS = In_NormalWS16_g171013;
				Data16_g171013.NormalRawOS = In_NormalRawOS16_g171013;
				Data16_g171013.NormalRawWS = In_NormalRawWS16_g171013;
				Data16_g171013.TangentOS = In_TangentOS16_g171013;
				Data16_g171013.ViewDirWS = In_ViewDirWS16_g171013;
				Data16_g171013.VertexData = In_VertexData16_g171013;
				Data16_g171013.PhaseData = In_PhaseData16_g171013;
				Data16_g171013.BoundsData = In_BoundsData16_g171013;
				Data16_g171013.RotationData = In_RotationData16_g171013;
				}
				TVEModelData Data15_g171018 = Data16_g171013;
				float Out_Dummy15_g171018 = 0;
				float3 Out_PositionOS15_g171018 = float3( 0,0,0 );
				float3 Out_PositionWS15_g171018 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171018 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g171018 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g171018 = float3( 0,0,0 );
				float3 Out_PivotOS15_g171018 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171018 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171018 = float3( 0,0,0 );
				float3 Out_NormalOS15_g171018 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171018 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g171018 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g171018 = float3( 0,0,0 );
				float4 Out_TangentOS15_g171018 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g171018 = float3( 0,0,0 );
				float4 Out_VertexData15_g171018 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g171018 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171018 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g171018 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g171018 = Data15_g171018.Dummy;
				Out_PositionOS15_g171018 = Data15_g171018.PositionOS;
				Out_PositionWS15_g171018 = Data15_g171018.PositionWS;
				Out_PositionWO15_g171018 = Data15_g171018.PositionWO;
				Out_PositionRawOS15_g171018 = Data15_g171018.PositionRawOS;
				Out_PositionAddOS15_g171018 = Data15_g171018.PositionAddOS;
				Out_PivotOS15_g171018 = Data15_g171018.PivotOS;
				Out_PivotWS15_g171018 = Data15_g171018.PivotWS;
				Out_PivotWO15_g171018 = Data15_g171018.PivotWO;
				Out_NormalOS15_g171018 = Data15_g171018.NormalOS;
				Out_NormalWS15_g171018 = Data15_g171018.NormalWS;
				Out_NormalRawOS15_g171018 = Data15_g171018.NormalRawOS;
				Out_NormalRawWS15_g171018 = Data15_g171018.NormalRawWS;
				Out_TangentOS15_g171018 = Data15_g171018.TangentOS;
				Out_ViewDirWS15_g171018 = Data15_g171018.ViewDirWS;
				Out_VertexData15_g171018 = Data15_g171018.VertexData;
				Out_PhaseData15_g171018 = Data15_g171018.PhaseData;
				Out_BoundsData15_g171018 = Data15_g171018.BoundsData;
				Out_RotationData15_g171018 = Data15_g171018.RotationData;
				}
				float3 temp_output_31_0_g171015 = Out_PositionOS15_g171018;
				float3 temp_output_6_0_g171029 = ( temp_output_31_0_g171015 + _DisableSRPBatcher );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g171029 = ( temp_output_6_0_g171029 + ( 0.0 * 0.0 ) );
				#else
				float3 staticSwitch14_g171029 = temp_output_6_0_g171029;
				#endif
				
				o.ase_texcoord4.xyz = vertexToFrag73_g170478;
				o.ase_texcoord5.xyz = vertexToFrag76_g170478;
				o.ase_texcoord6.xyz = ase_normalWS;
				float3 ase_tangentWS = UnityObjectToWorldDir(v.tangent);
				o.ase_texcoord7.xyz = ase_tangentWS;
				float ase_tangentSign = v.tangent.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_bitangentWS = cross( ase_normalWS, ase_tangentWS ) * ase_tangentSign;
				o.ase_texcoord8.xyz = ase_bitangentWS;
				float temp_output_6_0_g170737 = ( _MotionHighlightValue * Global_DistMask1820_g170714 * ( Tiny_Mask218_g170714 * Tiny_Mask218_g170714 ) * ( Global_Wave1475_g170714 * Global_Wave1475_g170714 * Global_Wave1475_g170714 * Global_Wave1475_g170714 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170737 = ( temp_output_6_0_g170737 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170737 = temp_output_6_0_g170737;
				#endif
				half Wave_Mask1263 = staticSwitch14_g170737;
				float4 appendResult23_g170817 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1263));
				float4 vertexToFrag24_g170817 = appendResult23_g170817;
				o.ase_texcoord9 = vertexToFrag24_g170817;
				o.ase_texcoord11.xyz = ase_positionWS;
				
				o.ase_texcoord2 = v.ase_texcoord;
				o.ase_texcoord3.xy = v.texcoord2.xyzw.xy;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord3.zw = 0;
				o.ase_texcoord4.w = 0;
				o.ase_texcoord5.w = 0;
				o.ase_texcoord6.w = 0;
				o.ase_texcoord7.w = 0;
				o.ase_texcoord8.w = 0;
				o.ase_texcoord11.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = staticSwitch14_g171029;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g171018;
				v.tangent = Out_TangentOS15_g171018;

				TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN 
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				#if !defined( CAN_SKIP_VPOS )
				, UNITY_VPOS_TYPE vpos : VPOS
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float localCustomAlphaClip20_g171028 = ( 0.0 );
				float localBreakData4_g171021 = ( 0.0 );
				float localCompData3_g171005 = ( 0.0 );
				TVEVisualData Data3_g171005 = (TVEVisualData)0;
				half Dummy145_g171003 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g171005 = Dummy145_g171003;
				float localBreakData4_g171004 = ( 0.0 );
				float localCompData3_g170976 = ( 0.0 );
				TVEVisualData Data3_g170976 = (TVEVisualData)0;
				half Dummy145_g170971 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170976 = Dummy145_g170971;
				float localBreakData4_g170975 = ( 0.0 );
				float localCompData3_g170953 = ( 0.0 );
				TVEVisualData Data3_g170953 = (TVEVisualData)0;
				half Dummy594_g170950 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170953 = Dummy594_g170950;
				float localBreakData4_g170952 = ( 0.0 );
				float localCompData3_g170936 = ( 0.0 );
				TVEVisualData Data3_g170936 = (TVEVisualData)0;
				half Dummy594_g170935 = ( _CutoutCategory + _CutoutEnd + _CutoutBakeMode );
				float In_Dummy3_g170936 = Dummy594_g170935;
				float localBreakData4_g170938 = ( 0.0 );
				float localCompData3_g170908 = ( 0.0 );
				TVEVisualData Data3_g170908 = (TVEVisualData)0;
				half Dummy594_g170906 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170908 = Dummy594_g170906;
				float localBreakData4_g170907 = ( 0.0 );
				float localCompData3_g170872 = ( 0.0 );
				TVEVisualData Data3_g170872 = (TVEVisualData)0;
				half Dummy594_g170869 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170872 = Dummy594_g170869;
				float localBreakData4_g170870 = ( 0.0 );
				float localCompData3_g170868 = ( 0.0 );
				TVEVisualData Data3_g170868 = (TVEVisualData)0;
				float In_Dummy3_g170868 = 0.0;
				float localBreakData4_g170867 = ( 0.0 );
				float localCompData3_g170845 = ( 0.0 );
				TVEVisualData Data3_g170845 = (TVEVisualData)0;
				half Dummy205_g170842 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170845 = Dummy205_g170842;
				float localBreakData4_g170844 = ( 0.0 );
				float localCompData3_g170822 = ( 0.0 );
				TVEVisualData Data3_g170822 = (TVEVisualData)0;
				half Dummy205_g170818 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170822 = Dummy205_g170818;
				float localBreakData4_g170823 = ( 0.0 );
				float localCompData3_g170811 = ( 0.0 );
				TVEVisualData Data3_g170811 = (TVEVisualData)0;
				half Dummy220_g170808 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170811 = Dummy220_g170808;
				float localBreakData4_g170810 = ( 0.0 );
				float localCompData3_g170801 = ( 0.0 );
				TVEVisualData Data3_g170801 = (TVEVisualData)0;
				half Dummy220_g170798 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170801 = Dummy220_g170798;
				float localBreakData4_g170800 = ( 0.0 );
				float localCompData3_g170790 = ( 0.0 );
				TVEVisualData Data3_g170790 = (TVEVisualData)0;
				half Dummy202_g170788 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170790 = Dummy202_g170788;
				float localBreakData4_g170789 = ( 0.0 );
				float localCompData3_g170687 = ( 0.0 );
				TVEVisualData Data3_g170687 = (TVEVisualData)0;
				half4 Dummy944_g170678 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170687 = Dummy944_g170678.x;
				float localBreakData4_g170686 = ( 0.0 );
				float localCompData3_g170655 = ( 0.0 );
				TVEVisualData Data3_g170655 = (TVEVisualData)0;
				half4 Dummy946_g170634 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170655 = Dummy946_g170634.x;
				float localBreakData4_g170645 = ( 0.0 );
				float localCompData3_g170632 = ( 0.0 );
				TVEVisualData Data3_g170632 = (TVEVisualData)0;
				half4 Dummy130_g170617 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170632 = Dummy130_g170617.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170625) = _MainAlbedoTex;
				float localFilterTexture19_g170628 = ( 0.0 );
				SamplerState SS19_g170628 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170628 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170628 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170628 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170628 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170628 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170628 = SamplerDefault19_g170628;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170628 = SamplerDefault19_g170628;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170628 = SamplerPoint19_g170628;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170628 = SamplerLow19_g170628;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170628 = SamplerMedium19_g170628;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170628 = SamplerHigh19_g170628;
				#endif
				}
				SamplerState Sampler276_g170625 = SS19_g170628;
				half4 Local_Coords180_g170617 = _main_coord_value;
				float4 temp_output_37_0_g170625 = Local_Coords180_g170617;
				half4 Coords276_g170625 = temp_output_37_0_g170625;
				half2 TexCoord276_g170625 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170625 = SampleMain( Texture276_g170625 , Sampler276_g170625 , Coords276_g170625 , TexCoord276_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170625) = _MainAlbedoTex;
				SamplerState Sampler275_g170625 = SS19_g170628;
				half4 Coords275_g170625 = temp_output_37_0_g170625;
				half2 TexCoord275_g170625 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170625 = SampleExtra( Texture275_g170625 , Sampler275_g170625 , Coords275_g170625 , TexCoord275_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170625) = _MainAlbedoTex;
				SamplerState Sampler238_g170625 = SS19_g170628;
				half4 Coords238_g170625 = temp_output_37_0_g170625;
				TVEModelData Data16_g170483 = (TVEModelData)0;
				float In_Dummy16_g170483 = 0.0;
				float3 vertexToFrag73_g170478 = IN.ase_texcoord4.xyz;
				half3 PositionWS122_g170478 = vertexToFrag73_g170478;
				float3 In_PositionWS16_g170483 = PositionWS122_g170478;
				float3 vertexToFrag76_g170478 = IN.ase_texcoord5.xyz;
				half3 PivotWS121_g170478 = vertexToFrag76_g170478;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
				#else
				float3 staticSwitch204_g170478 = PositionWS122_g170478;
				#endif
				half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170483 = PositionWO132_g170478;
				float3 In_PivotWS16_g170483 = PivotWS121_g170478;
				half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170483 = PivotWO133_g170478;
				float3 ase_normalWS = IN.ase_texcoord6.xyz;
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170478 = normalizedWorldNormal;
				float3 In_NormalWS16_g170483 = Normal_WS95_g170478;
				float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
				half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
				float3 In_ViewDirWS16_g170483 = ViewDirWS169_g170478;
				half4 VertexMasks171_g170478 = IN.ase_color;
				float4 In_VertexData16_g170483 = VertexMasks171_g170478;
				float4 In_BoundsData16_g170483 = float4( 1,1,1,1 );
				{
				Data16_g170483.Dummy = In_Dummy16_g170483;
				Data16_g170483.PositionWS = In_PositionWS16_g170483;
				Data16_g170483.PositionWO = In_PositionWO16_g170483;
				Data16_g170483.PivotWS = In_PivotWS16_g170483;
				Data16_g170483.PivotWO = In_PivotWO16_g170483;
				Data16_g170483.NormalWS = In_NormalWS16_g170483;
				Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
				Data16_g170483.VertexData = In_VertexData16_g170483;
				Data16_g170483.BoundsData = In_BoundsData16_g170483;
				}
				TVEModelData Data15_g170631 = Data16_g170483;
				float Out_Dummy15_g170631 = 0;
				float3 Out_PositionWS15_g170631 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170631 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170631 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170631 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170631 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170631 = float3( 0,0,0 );
				float4 Out_VertexData15_g170631 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170631 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170631 = Data15_g170631.Dummy;
				Out_PositionWS15_g170631 = Data15_g170631.PositionWS;
				Out_PositionWO15_g170631 = Data15_g170631.PositionWO;
				Out_PivotWS15_g170631 = Data15_g170631.PivotWS;
				Out_PivotWO15_g170631 = Data15_g170631.PivotWO;
				Out_NormalWS15_g170631 = Data15_g170631.NormalWS;
				Out_ViewDirWS15_g170631 = Data15_g170631.ViewDirWS;
				Out_VertexData15_g170631 = Data15_g170631.VertexData;
				Out_BoundsData15_g170631 = Data15_g170631.BoundsData;
				}
				half3 Model_PositionWO222_g170617 = Out_PositionWO15_g170631;
				float3 temp_output_279_0_g170625 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170625 = temp_output_279_0_g170625;
				half4 localSamplePlanar2D238_g170625 = SamplePlanar2D( Texture238_g170625 , Sampler238_g170625 , Coords238_g170625 , WorldPosition238_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170625) = _MainAlbedoTex;
				SamplerState Sampler246_g170625 = SS19_g170628;
				half4 Coords246_g170625 = temp_output_37_0_g170625;
				half3 WorldPosition246_g170625 = temp_output_279_0_g170625;
				half3 Model_NormalWS226_g170617 = Out_NormalWS15_g170631;
				float3 temp_output_280_0_g170625 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170625 = temp_output_280_0_g170625;
				half4 localSamplePlanar3D246_g170625 = SamplePlanar3D( Texture246_g170625 , Sampler246_g170625 , Coords246_g170625 , WorldPosition246_g170625 , WorldNormal246_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170625) = _MainAlbedoTex;
				SamplerState Sampler234_g170625 = SS19_g170628;
				float4 Coords234_g170625 = temp_output_37_0_g170625;
				float3 WorldPosition234_g170625 = temp_output_279_0_g170625;
				float4 localSampleStochastic2D234_g170625 = SampleStochastic2D( Texture234_g170625 , Sampler234_g170625 , Coords234_g170625 , WorldPosition234_g170625 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170625) = _MainAlbedoTex;
				SamplerState Sampler263_g170625 = SS19_g170628;
				half4 Coords263_g170625 = temp_output_37_0_g170625;
				half3 WorldPosition263_g170625 = temp_output_279_0_g170625;
				half3 WorldNormal263_g170625 = temp_output_280_0_g170625;
				half4 localSampleStochastic3D263_g170625 = SampleStochastic3D( Texture263_g170625 , Sampler263_g170625 , Coords263_g170625 , WorldPosition263_g170625 , WorldNormal263_g170625 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170617 = localSampleMain276_g170625;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170617 = localSampleExtra275_g170625;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170617 = localSamplePlanar2D238_g170625;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170617 = localSamplePlanar3D246_g170625;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170617 = localSampleStochastic2D234_g170625;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170617 = localSampleStochastic3D263_g170625;
				#else
				float4 staticSwitch184_g170617 = localSampleMain276_g170625;
				#endif
				half4 Local_AlbedoTex185_g170617 = staticSwitch184_g170617;
				float3 lerpResult53_g170617 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170617).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170617 = lerpResult53_g170617;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170627) = _MainShaderTex;
				float localFilterTexture30_g170630 = ( 0.0 );
				SamplerState SS30_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170630 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170630 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170630 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170630 = SamplerDefault30_g170630;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170630 = SamplerDefault30_g170630;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170630 = SamplerPoint30_g170630;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170630 = SamplerLow30_g170630;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170630 = SamplerMedium30_g170630;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170630 = SamplerHigh30_g170630;
				#endif
				}
				SamplerState Sampler276_g170627 = SS30_g170630;
				float4 temp_output_37_0_g170627 = Local_Coords180_g170617;
				half4 Coords276_g170627 = temp_output_37_0_g170627;
				half2 TexCoord276_g170627 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170627 = SampleMain( Texture276_g170627 , Sampler276_g170627 , Coords276_g170627 , TexCoord276_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170627) = _MainShaderTex;
				SamplerState Sampler275_g170627 = SS30_g170630;
				half4 Coords275_g170627 = temp_output_37_0_g170627;
				half2 TexCoord275_g170627 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170627 = SampleExtra( Texture275_g170627 , Sampler275_g170627 , Coords275_g170627 , TexCoord275_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170627) = _MainShaderTex;
				SamplerState Sampler238_g170627 = SS30_g170630;
				half4 Coords238_g170627 = temp_output_37_0_g170627;
				float3 temp_output_279_0_g170627 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170627 = temp_output_279_0_g170627;
				half4 localSamplePlanar2D238_g170627 = SamplePlanar2D( Texture238_g170627 , Sampler238_g170627 , Coords238_g170627 , WorldPosition238_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170627) = _MainShaderTex;
				SamplerState Sampler246_g170627 = SS30_g170630;
				half4 Coords246_g170627 = temp_output_37_0_g170627;
				half3 WorldPosition246_g170627 = temp_output_279_0_g170627;
				float3 temp_output_280_0_g170627 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170627 = temp_output_280_0_g170627;
				half4 localSamplePlanar3D246_g170627 = SamplePlanar3D( Texture246_g170627 , Sampler246_g170627 , Coords246_g170627 , WorldPosition246_g170627 , WorldNormal246_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170627) = _MainShaderTex;
				SamplerState Sampler234_g170627 = SS30_g170630;
				float4 Coords234_g170627 = temp_output_37_0_g170627;
				float3 WorldPosition234_g170627 = temp_output_279_0_g170627;
				float4 localSampleStochastic2D234_g170627 = SampleStochastic2D( Texture234_g170627 , Sampler234_g170627 , Coords234_g170627 , WorldPosition234_g170627 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170627) = _MainShaderTex;
				SamplerState Sampler263_g170627 = SS30_g170630;
				half4 Coords263_g170627 = temp_output_37_0_g170627;
				half3 WorldPosition263_g170627 = temp_output_279_0_g170627;
				half3 WorldNormal263_g170627 = temp_output_280_0_g170627;
				half4 localSampleStochastic3D263_g170627 = SampleStochastic3D( Texture263_g170627 , Sampler263_g170627 , Coords263_g170627 , WorldPosition263_g170627 , WorldNormal263_g170627 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170617 = localSampleMain276_g170627;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170617 = localSampleExtra275_g170627;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170617 = localSamplePlanar2D238_g170627;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170617 = localSamplePlanar3D246_g170627;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170617 = localSampleStochastic2D234_g170627;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170617 = localSampleStochastic3D263_g170627;
				#else
				float4 staticSwitch198_g170617 = localSampleMain276_g170627;
				#endif
				half4 Local_MasksTex199_g170617 = staticSwitch198_g170617;
				float lerpResult23_g170617 = lerp( 1.0 , (Local_MasksTex199_g170617).y , _MainOcclusionValue);
				float4 appendResult73_g170617 = (float4(( (Local_MasksTex199_g170617).x * _MainMetallicValue ) , lerpResult23_g170617 , (Local_MasksTex199_g170617).z , ( (Local_MasksTex199_g170617).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170617 = appendResult73_g170617;
				float clampResult17_g170622 = clamp( (Local_Masks109_g170617).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170633 = _MainMultiRemap.x;
				float temp_output_9_0_g170633 = ( clampResult17_g170622 - temp_output_7_0_g170633 );
				half Local_MultiMask78_g170617 = saturate( ( ( temp_output_9_0_g170633 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170617 = lerp( 1.0 , Local_MultiMask78_g170617 , _MainColorMode);
				float4 lerpResult62_g170617 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170617);
				half3 Local_ColorRGB93_g170617 = (lerpResult62_g170617).rgb;
				half3 Local_Albedo139_g170617 = ( Local_AlbedoRGB107_g170617 * Local_ColorRGB93_g170617 );
				float3 In_Albedo3_g170632 = Local_Albedo139_g170617;
				float3 In_AlbedoRaw3_g170632 = Local_Albedo139_g170617;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170626) = _MainNormalTex;
				float localFilterTexture29_g170629 = ( 0.0 );
				SamplerState SS29_g170629 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170629 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170629 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170629 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170629 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170629 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170629 = SamplerDefault29_g170629;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170629 = SamplerDefault29_g170629;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170629 = SamplerPoint29_g170629;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170629 = SamplerLow29_g170629;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170629 = SamplerMedium29_g170629;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170629 = SamplerHigh29_g170629;
				#endif
				}
				SamplerState Sampler276_g170626 = SS29_g170629;
				float4 temp_output_37_0_g170626 = Local_Coords180_g170617;
				half4 Coords276_g170626 = temp_output_37_0_g170626;
				half2 TexCoord276_g170626 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170626 = SampleMain( Texture276_g170626 , Sampler276_g170626 , Coords276_g170626 , TexCoord276_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170626) = _MainNormalTex;
				SamplerState Sampler275_g170626 = SS29_g170629;
				half4 Coords275_g170626 = temp_output_37_0_g170626;
				half2 TexCoord275_g170626 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170626 = SampleExtra( Texture275_g170626 , Sampler275_g170626 , Coords275_g170626 , TexCoord275_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170626) = _MainNormalTex;
				SamplerState Sampler238_g170626 = SS29_g170629;
				half4 Coords238_g170626 = temp_output_37_0_g170626;
				float3 temp_output_279_0_g170626 = Model_PositionWO222_g170617;
				half3 WorldPosition238_g170626 = temp_output_279_0_g170626;
				half4 localSamplePlanar2D238_g170626 = SamplePlanar2D( Texture238_g170626 , Sampler238_g170626 , Coords238_g170626 , WorldPosition238_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170626) = _MainNormalTex;
				SamplerState Sampler246_g170626 = SS29_g170629;
				half4 Coords246_g170626 = temp_output_37_0_g170626;
				half3 WorldPosition246_g170626 = temp_output_279_0_g170626;
				float3 temp_output_280_0_g170626 = Model_NormalWS226_g170617;
				half3 WorldNormal246_g170626 = temp_output_280_0_g170626;
				half4 localSamplePlanar3D246_g170626 = SamplePlanar3D( Texture246_g170626 , Sampler246_g170626 , Coords246_g170626 , WorldPosition246_g170626 , WorldNormal246_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170626) = _MainNormalTex;
				SamplerState Sampler234_g170626 = SS29_g170629;
				float4 Coords234_g170626 = temp_output_37_0_g170626;
				float3 WorldPosition234_g170626 = temp_output_279_0_g170626;
				float4 localSampleStochastic2D234_g170626 = SampleStochastic2D( Texture234_g170626 , Sampler234_g170626 , Coords234_g170626 , WorldPosition234_g170626 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170626) = _MainNormalTex;
				SamplerState Sampler263_g170626 = SS29_g170629;
				half4 Coords263_g170626 = temp_output_37_0_g170626;
				half3 WorldPosition263_g170626 = temp_output_279_0_g170626;
				half3 WorldNormal263_g170626 = temp_output_280_0_g170626;
				half4 localSampleStochastic3D263_g170626 = SampleStochastic3D( Texture263_g170626 , Sampler263_g170626 , Coords263_g170626 , WorldPosition263_g170626 , WorldNormal263_g170626 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170617 = localSampleMain276_g170626;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170617 = localSampleExtra275_g170626;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170617 = localSamplePlanar2D238_g170626;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170617 = localSamplePlanar3D246_g170626;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170617 = localSampleStochastic2D234_g170626;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170617 = localSampleStochastic3D263_g170626;
				#else
				float4 staticSwitch193_g170617 = localSampleMain276_g170626;
				#endif
				half4 Local_NormaTex191_g170617 = staticSwitch193_g170617;
				half4 Normal_Packed45_g170618 = Local_NormaTex191_g170617;
				float2 appendResult58_g170618 = (float2(( (Normal_Packed45_g170618).x * (Normal_Packed45_g170618).w ) , (Normal_Packed45_g170618).y));
				half2 Normal_Default50_g170618 = appendResult58_g170618;
				half2 Normal_ASTC41_g170618 = (Normal_Packed45_g170618).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170618 = Normal_ASTC41_g170618;
				#else
				float2 staticSwitch38_g170618 = Normal_Default50_g170618;
				#endif
				half2 Normal_NO_DTX544_g170618 = (Normal_Packed45_g170618).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170618 = Normal_NO_DTX544_g170618;
				#else
				float2 staticSwitch37_g170618 = staticSwitch38_g170618;
				#endif
				float2 temp_output_26_0_g170617 = ( (staticSwitch37_g170618*2.0 + -1.0) * _MainNormalValue );
				float3 ase_tangentWS = IN.ase_texcoord7.xyz;
				float3 ase_bitangentWS = IN.ase_texcoord8.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_tangentWS,ase_bitangentWS,ase_normalWS);
				half2 Normal_Planar45_g170619 = temp_output_26_0_g170617;
				float2 break71_g170619 = Normal_Planar45_g170619;
				float3 appendResult72_g170619 = (float3(break71_g170619.x , 0.0 , break71_g170619.y));
				float2 temp_output_205_0_g170617 = (mul( ase_worldToTangent, appendResult72_g170619 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
				#else
				float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
				#endif
				half2 Local_NormalTS108_g170617 = staticSwitch204_g170617;
				float2 In_NormalTS3_g170632 = Local_NormalTS108_g170617;
				float3 appendResult68_g170620 = (float3(Local_NormalTS108_g170617 , 1.0));
				float3 tanToWorld0 = float3( ase_tangentWS.x, ase_bitangentWS.x, ase_normalWS.x );
				float3 tanToWorld1 = float3( ase_tangentWS.y, ase_bitangentWS.y, ase_normalWS.y );
				float3 tanToWorld2 = float3( ase_tangentWS.z, ase_bitangentWS.z, ase_normalWS.z );
				float3 tanNormal74_g170620 = appendResult68_g170620;
				float3 worldNormal74_g170620 = normalize( float3(dot(tanToWorld0,tanNormal74_g170620), dot(tanToWorld1,tanNormal74_g170620), dot(tanToWorld2,tanNormal74_g170620)) );
				half3 Local_NormalWS250_g170617 = worldNormal74_g170620;
				float3 In_NormalWS3_g170632 = Local_NormalWS250_g170617;
				float4 In_Shader3_g170632 = Local_Masks109_g170617;
				float4 In_Emissive3_g170632 = half4(1,1,1,1);
				float3 temp_output_3_0_g170621 = Local_Albedo139_g170617;
				float dotResult20_g170621 = dot( temp_output_3_0_g170621 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170617 = dotResult20_g170621;
				float In_Grayscale3_g170632 = Local_Grayscale110_g170617;
				float clampResult144_g170617 = clamp( saturate( ( Local_Grayscale110_g170617 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170617 = clampResult144_g170617;
				float In_Luminosity3_g170632 = Local_Luminosity145_g170617;
				float In_MultiMask3_g170632 = Local_MultiMask78_g170617;
				float temp_output_187_0_g170617 = (Local_AlbedoTex185_g170617).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170617 = ( temp_output_187_0_g170617 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170617 = temp_output_187_0_g170617;
				#endif
				half Local_AlphaClip111_g170617 = staticSwitch236_g170617;
				float In_AlphaClip3_g170632 = Local_AlphaClip111_g170617;
				half Local_AlphaFade246_g170617 = (lerpResult62_g170617).a;
				float In_AlphaFade3_g170632 = Local_AlphaFade246_g170617;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170632 = temp_cast_4;
				float In_Transmission3_g170632 = 1.0;
				float In_Thickness3_g170632 = 0.0;
				float In_Diffusion3_g170632 = 0.0;
				{
				Data3_g170632.Dummy = In_Dummy3_g170632;
				Data3_g170632.Albedo = In_Albedo3_g170632;
				Data3_g170632.AlbedoRaw = In_AlbedoRaw3_g170632;
				Data3_g170632.NormalTS = In_NormalTS3_g170632;
				Data3_g170632.NormalWS = In_NormalWS3_g170632;
				Data3_g170632.Shader = In_Shader3_g170632;
				Data3_g170632.Emissive= In_Emissive3_g170632;
				Data3_g170632.MultiMask = In_MultiMask3_g170632;
				Data3_g170632.Grayscale = In_Grayscale3_g170632;
				Data3_g170632.Luminosity = In_Luminosity3_g170632;
				Data3_g170632.AlphaClip = In_AlphaClip3_g170632;
				Data3_g170632.AlphaFade = In_AlphaFade3_g170632;
				Data3_g170632.Translucency = In_Translucency3_g170632;
				Data3_g170632.Transmission = In_Transmission3_g170632;
				Data3_g170632.Thickness = In_Thickness3_g170632;
				Data3_g170632.Diffusion = In_Diffusion3_g170632;
				}
				TVEVisualData Data4_g170645 = Data3_g170632;
				float Out_Dummy4_g170645 = 0;
				float3 Out_Albedo4_g170645 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170645 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170645 = float2( 0,0 );
				float3 Out_NormalWS4_g170645 = float3( 0,0,0 );
				float4 Out_Shader4_g170645 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170645 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170645 = 0;
				float Out_Grayscale4_g170645 = 0;
				float Out_Luminosity4_g170645 = 0;
				float Out_AlphaClip4_g170645 = 0;
				float Out_AlphaFade4_g170645 = 0;
				float3 Out_Translucency4_g170645 = float3( 0,0,0 );
				float Out_Transmission4_g170645 = 0;
				float Out_Thickness4_g170645 = 0;
				float Out_Diffusion4_g170645 = 0;
				{
				Out_Dummy4_g170645 = Data4_g170645.Dummy;
				Out_Albedo4_g170645 = Data4_g170645.Albedo;
				Out_AlbedoRaw4_g170645 = Data4_g170645.AlbedoRaw;
				Out_NormalTS4_g170645 = Data4_g170645.NormalTS;
				Out_NormalWS4_g170645 = Data4_g170645.NormalWS;
				Out_Shader4_g170645 = Data4_g170645.Shader;
				Out_Emissive4_g170645= Data4_g170645.Emissive;
				Out_MultiMask4_g170645 = Data4_g170645.MultiMask;
				Out_Grayscale4_g170645 = Data4_g170645.Grayscale;
				Out_Luminosity4_g170645= Data4_g170645.Luminosity;
				Out_AlphaClip4_g170645 = Data4_g170645.AlphaClip;
				Out_AlphaFade4_g170645 = Data4_g170645.AlphaFade;
				Out_Translucency4_g170645 = Data4_g170645.Translucency;
				Out_Transmission4_g170645 = Data4_g170645.Transmission;
				Out_Thickness4_g170645 = Data4_g170645.Thickness;
				Out_Diffusion4_g170645 = Data4_g170645.Diffusion;
				}
				half3 Visual_Albedo527_g170634 = Out_Albedo4_g170645;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170635) = _SecondAlbedoTex;
				float localFilterTexture19_g170651 = ( 0.0 );
				SamplerState SS19_g170651 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170651 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170651 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170651 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170651 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170651 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170651 = SamplerDefault19_g170651;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170651 = SamplerDefault19_g170651;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170651 = SamplerPoint19_g170651;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170651 = SamplerLow19_g170651;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170651 = SamplerMedium19_g170651;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170651 = SamplerHigh19_g170651;
				#endif
				}
				SamplerState Sampler276_g170635 = SS19_g170651;
				half4 Local_LayerCoords790_g170634 = _second_coord_value;
				float4 temp_output_37_0_g170635 = Local_LayerCoords790_g170634;
				half4 Coords276_g170635 = temp_output_37_0_g170635;
				half2 TexCoord276_g170635 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170635 = SampleMain( Texture276_g170635 , Sampler276_g170635 , Coords276_g170635 , TexCoord276_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170635) = _SecondAlbedoTex;
				SamplerState Sampler275_g170635 = SS19_g170651;
				half4 Coords275_g170635 = temp_output_37_0_g170635;
				half2 TexCoord275_g170635 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170635 = SampleExtra( Texture275_g170635 , Sampler275_g170635 , Coords275_g170635 , TexCoord275_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170635) = _SecondAlbedoTex;
				SamplerState Sampler238_g170635 = SS19_g170651;
				half4 Coords238_g170635 = temp_output_37_0_g170635;
				TVEModelData Data15_g170654 = Data16_g170483;
				float Out_Dummy15_g170654 = 0;
				float3 Out_PositionWS15_g170654 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170654 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170654 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170654 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170654 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170654 = float3( 0,0,0 );
				float4 Out_VertexData15_g170654 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170654 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170654 = Data15_g170654.Dummy;
				Out_PositionWS15_g170654 = Data15_g170654.PositionWS;
				Out_PositionWO15_g170654 = Data15_g170654.PositionWO;
				Out_PivotWS15_g170654 = Data15_g170654.PivotWS;
				Out_PivotWO15_g170654 = Data15_g170654.PivotWO;
				Out_NormalWS15_g170654 = Data15_g170654.NormalWS;
				Out_ViewDirWS15_g170654 = Data15_g170654.ViewDirWS;
				Out_VertexData15_g170654 = Data15_g170654.VertexData;
				Out_BoundsData15_g170654 = Data15_g170654.BoundsData;
				}
				half3 Model_PositionWO636_g170634 = Out_PositionWO15_g170654;
				float3 temp_output_279_0_g170635 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170635 = temp_output_279_0_g170635;
				half4 localSamplePlanar2D238_g170635 = SamplePlanar2D( Texture238_g170635 , Sampler238_g170635 , Coords238_g170635 , WorldPosition238_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170635) = _SecondAlbedoTex;
				SamplerState Sampler246_g170635 = SS19_g170651;
				half4 Coords246_g170635 = temp_output_37_0_g170635;
				half3 WorldPosition246_g170635 = temp_output_279_0_g170635;
				half3 Model_NormalWS869_g170634 = Out_NormalWS15_g170654;
				float3 temp_output_280_0_g170635 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170635 = temp_output_280_0_g170635;
				half4 localSamplePlanar3D246_g170635 = SamplePlanar3D( Texture246_g170635 , Sampler246_g170635 , Coords246_g170635 , WorldPosition246_g170635 , WorldNormal246_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170635) = _SecondAlbedoTex;
				SamplerState Sampler234_g170635 = SS19_g170651;
				float4 Coords234_g170635 = temp_output_37_0_g170635;
				float3 WorldPosition234_g170635 = temp_output_279_0_g170635;
				float4 localSampleStochastic2D234_g170635 = SampleStochastic2D( Texture234_g170635 , Sampler234_g170635 , Coords234_g170635 , WorldPosition234_g170635 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170635) = _SecondAlbedoTex;
				SamplerState Sampler263_g170635 = SS19_g170651;
				half4 Coords263_g170635 = temp_output_37_0_g170635;
				half3 WorldPosition263_g170635 = temp_output_279_0_g170635;
				half3 WorldNormal263_g170635 = temp_output_280_0_g170635;
				half4 localSampleStochastic3D263_g170635 = SampleStochastic3D( Texture263_g170635 , Sampler263_g170635 , Coords263_g170635 , WorldPosition263_g170635 , WorldNormal263_g170635 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170634 = localSampleMain276_g170635;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170634 = localSampleExtra275_g170635;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170634 = localSamplePlanar2D238_g170635;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170634 = localSamplePlanar3D246_g170635;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170634 = localSampleStochastic2D234_g170635;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170634 = localSampleStochastic3D263_g170635;
				#else
				float4 staticSwitch693_g170634 = localSampleMain276_g170635;
				#endif
				half4 Local_AlbedoTex777_g170634 = staticSwitch693_g170634;
				float3 lerpResult716_g170634 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170634).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170634 = lerpResult716_g170634;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170637) = _SecondShaderTex;
				float localFilterTexture30_g170653 = ( 0.0 );
				SamplerState SS30_g170653 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170653 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170653 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170653 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170653 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170653 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170653 = SamplerDefault30_g170653;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170653 = SamplerDefault30_g170653;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170653 = SamplerPoint30_g170653;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170653 = SamplerLow30_g170653;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170653 = SamplerMedium30_g170653;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170653 = SamplerHigh30_g170653;
				#endif
				}
				SamplerState Sampler276_g170637 = SS30_g170653;
				float4 temp_output_37_0_g170637 = Local_LayerCoords790_g170634;
				half4 Coords276_g170637 = temp_output_37_0_g170637;
				half2 TexCoord276_g170637 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170637 = SampleMain( Texture276_g170637 , Sampler276_g170637 , Coords276_g170637 , TexCoord276_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170637) = _SecondShaderTex;
				SamplerState Sampler275_g170637 = SS30_g170653;
				half4 Coords275_g170637 = temp_output_37_0_g170637;
				half2 TexCoord275_g170637 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170637 = SampleExtra( Texture275_g170637 , Sampler275_g170637 , Coords275_g170637 , TexCoord275_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170637) = _SecondShaderTex;
				SamplerState Sampler238_g170637 = SS30_g170653;
				half4 Coords238_g170637 = temp_output_37_0_g170637;
				float3 temp_output_279_0_g170637 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170637 = temp_output_279_0_g170637;
				half4 localSamplePlanar2D238_g170637 = SamplePlanar2D( Texture238_g170637 , Sampler238_g170637 , Coords238_g170637 , WorldPosition238_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170637) = _SecondShaderTex;
				SamplerState Sampler246_g170637 = SS30_g170653;
				half4 Coords246_g170637 = temp_output_37_0_g170637;
				half3 WorldPosition246_g170637 = temp_output_279_0_g170637;
				float3 temp_output_280_0_g170637 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170637 = temp_output_280_0_g170637;
				half4 localSamplePlanar3D246_g170637 = SamplePlanar3D( Texture246_g170637 , Sampler246_g170637 , Coords246_g170637 , WorldPosition246_g170637 , WorldNormal246_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170637) = _SecondShaderTex;
				SamplerState Sampler234_g170637 = SS30_g170653;
				float4 Coords234_g170637 = temp_output_37_0_g170637;
				float3 WorldPosition234_g170637 = temp_output_279_0_g170637;
				float4 localSampleStochastic2D234_g170637 = SampleStochastic2D( Texture234_g170637 , Sampler234_g170637 , Coords234_g170637 , WorldPosition234_g170637 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170637) = _SecondShaderTex;
				SamplerState Sampler263_g170637 = SS30_g170653;
				half4 Coords263_g170637 = temp_output_37_0_g170637;
				half3 WorldPosition263_g170637 = temp_output_279_0_g170637;
				half3 WorldNormal263_g170637 = temp_output_280_0_g170637;
				half4 localSampleStochastic3D263_g170637 = SampleStochastic3D( Texture263_g170637 , Sampler263_g170637 , Coords263_g170637 , WorldPosition263_g170637 , WorldNormal263_g170637 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170634 = localSampleMain276_g170637;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170634 = localSampleExtra275_g170637;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170634 = localSamplePlanar2D238_g170637;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170634 = localSamplePlanar3D246_g170637;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170634 = localSampleStochastic2D234_g170637;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170634 = localSampleStochastic3D263_g170637;
				#else
				float4 staticSwitch722_g170634 = localSampleMain276_g170637;
				#endif
				half4 Local_ShaderTex775_g170634 = staticSwitch722_g170634;
				float lerpResult739_g170634 = lerp( 1.0 , (Local_ShaderTex775_g170634).y , _SecondOcclusionValue);
				float4 appendResult749_g170634 = (float4(( (Local_ShaderTex775_g170634).x * _SecondMetallicValue ) , lerpResult739_g170634 , (Local_ShaderTex775_g170634).z , ( (Local_ShaderTex775_g170634).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170634 = appendResult749_g170634;
				float clampResult17_g170641 = clamp( (Local_Masks750_g170634).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170656 = _SecondMultiRemap.x;
				float temp_output_9_0_g170656 = ( clampResult17_g170641 - temp_output_7_0_g170656 );
				float temp_output_765_0_g170634 = saturate( ( ( temp_output_9_0_g170656 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170634 = temp_output_765_0_g170634;
				float lerpResult705_g170634 = lerp( 1.0 , Local_MultiMask767_g170634 , _SecondColorMode);
				float4 lerpResult706_g170634 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170634);
				half3 Local_ColorRGB774_g170634 = (lerpResult706_g170634).rgb;
				half3 Local_Albedo768_g170634 = ( Local_AlbedoRGB771_g170634 * Local_ColorRGB774_g170634 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170648 = 2.0;
				#else
				float staticSwitch1_g170648 = 4.594794;
				#endif
				float3 lerpResult985_g170634 = lerp( Local_Albedo768_g170634 , ( Visual_Albedo527_g170634 * Local_Albedo768_g170634 * staticSwitch1_g170648 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170638) = _SecondMaskTex;
				SamplerState Sampler276_g170638 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170634 = _second_mask_coord_value;
				float4 temp_output_37_0_g170638 = Local_BlendCoords813_g170634;
				half4 Coords276_g170638 = temp_output_37_0_g170638;
				half2 TexCoord276_g170638 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170638 = SampleMain( Texture276_g170638 , Sampler276_g170638 , Coords276_g170638 , TexCoord276_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170638) = _SecondMaskTex;
				SamplerState Sampler275_g170638 = sampler_Linear_Repeat;
				half4 Coords275_g170638 = temp_output_37_0_g170638;
				half2 TexCoord275_g170638 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170638 = SampleExtra( Texture275_g170638 , Sampler275_g170638 , Coords275_g170638 , TexCoord275_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170638) = _SecondMaskTex;
				SamplerState Sampler238_g170638 = sampler_Linear_Repeat;
				half4 Coords238_g170638 = temp_output_37_0_g170638;
				float3 temp_output_279_0_g170638 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170638 = temp_output_279_0_g170638;
				half4 localSamplePlanar2D238_g170638 = SamplePlanar2D( Texture238_g170638 , Sampler238_g170638 , Coords238_g170638 , WorldPosition238_g170638 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170638) = _SecondMaskTex;
				SamplerState Sampler246_g170638 = sampler_Linear_Repeat;
				half4 Coords246_g170638 = temp_output_37_0_g170638;
				half3 WorldPosition246_g170638 = temp_output_279_0_g170638;
				float3 temp_output_280_0_g170638 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170638 = temp_output_280_0_g170638;
				half4 localSamplePlanar3D246_g170638 = SamplePlanar3D( Texture246_g170638 , Sampler246_g170638 , Coords246_g170638 , WorldPosition246_g170638 , WorldNormal246_g170638 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170634 = localSampleMain276_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170634 = localSampleExtra275_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170634 = localSamplePlanar2D238_g170638;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170634 = localSamplePlanar3D246_g170638;
				#else
				float4 staticSwitch817_g170634 = localSampleMain276_g170638;
				#endif
				half4 Local_MaskTex861_g170634 = staticSwitch817_g170634;
				float clampResult17_g170658 = clamp( (Local_MaskTex861_g170634).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170662 = _SecondMaskRemap.x;
				float temp_output_9_0_g170662 = ( clampResult17_g170658 - temp_output_7_0_g170662 );
				float lerpResult1015_g170634 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170662 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170634 = lerpResult1015_g170634;
				half Visual_Luminosity1041_g170634 = Out_Luminosity4_g170645;
				float clampResult17_g170667 = clamp( Visual_Luminosity1041_g170634 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170668 = _SecondLumaRemap.x;
				float temp_output_9_0_g170668 = ( clampResult17_g170667 - temp_output_7_0_g170668 );
				float lerpResult1036_g170634 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170668 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170634 = lerpResult1036_g170634;
				half3 Visual_NormalWS951_g170634 = Out_NormalWS4_g170645;
				float clampResult17_g170663 = clamp( saturate( (Visual_NormalWS951_g170634).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170665 = _SecondProjRemap.x;
				float temp_output_9_0_g170665 = ( clampResult17_g170663 - temp_output_7_0_g170665 );
				float lerpResult996_g170634 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170665 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170634 = lerpResult996_g170634;
				half4 Model_VertexMasks964_g170634 = Out_VertexData15_g170654;
				float4 break965_g170634 = Model_VertexMasks964_g170634;
				float4 break33_g170659 = _second_vert_mode;
				float temp_output_30_0_g170659 = ( break965_g170634.x * break33_g170659.x );
				float temp_output_29_0_g170659 = ( break965_g170634.y * break33_g170659.y );
				float temp_output_31_0_g170659 = ( break965_g170634.z * break33_g170659.z );
				float temp_output_28_0_g170659 = ( temp_output_30_0_g170659 + temp_output_29_0_g170659 + temp_output_31_0_g170659 + ( break965_g170634.w * break33_g170659.w ) );
				float clampResult17_g170657 = clamp( temp_output_28_0_g170659 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170661 = _SecondMeshRemap.x;
				float temp_output_9_0_g170661 = ( clampResult17_g170657 - temp_output_7_0_g170661 );
				float lerpResult1017_g170634 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170661 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170660 = lerpResult1017_g170634;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170660 = ( temp_output_6_0_g170660 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170660 = temp_output_6_0_g170660;
				#endif
				half Blend_VertMask918_g170634 = staticSwitch14_g170660;
				float localBuildGlobalData204_g170496 = ( 0.0 );
				TVEGlobalData Data204_g170496 = (TVEGlobalData)0;
				half Dummy211_g170496 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170496 = Dummy211_g170496;
				float temp_output_82_0_g170506 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170508 = TVE_CoatLayers[(int)temp_output_82_0_g170506];
				TVEModelData Data15_g170542 = Data16_g170483;
				float Out_Dummy15_g170542 = 0;
				float3 Out_PositionWS15_g170542 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170542 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170542 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170542 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170542 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170542 = float3( 0,0,0 );
				float4 Out_VertexData15_g170542 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170542 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170542 = Data15_g170542.Dummy;
				Out_PositionWS15_g170542 = Data15_g170542.PositionWS;
				Out_PositionWO15_g170542 = Data15_g170542.PositionWO;
				Out_PivotWS15_g170542 = Data15_g170542.PivotWS;
				Out_PivotWO15_g170542 = Data15_g170542.PivotWO;
				Out_NormalWS15_g170542 = Data15_g170542.NormalWS;
				Out_ViewDirWS15_g170542 = Data15_g170542.ViewDirWS;
				Out_VertexData15_g170542 = Data15_g170542.VertexData;
				Out_BoundsData15_g170542 = Data15_g170542.BoundsData;
				}
				half3 Model_PositionWS143_g170496 = Out_PositionWS15_g170542;
				half3 Model_PivotWS145_g170496 = Out_PivotWS15_g170542;
				float3 lerpResult300_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170509 = lerpResult300_g170496;
				float2 temp_output_75_0_g170509 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170509).xz ) );
				float temp_output_82_0_g170509 = temp_output_82_0_g170506;
				float2 temp_output_119_0_g170509 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170509).xz ) );
				float temp_output_7_0_g170514 = 1.0;
				float temp_output_9_0_g170514 = ( saturate( ( distance( Input_Position180_g170509 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170514 );
				float4 lerpResult131_g170509 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170509,temp_output_82_0_g170509), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170509,temp_output_82_0_g170509), 0.0 ) , saturate( ( temp_output_9_0_g170514 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170514 ) ) ));
				float4 temp_output_17_0_g170508 = lerpResult131_g170509;
				float4 temp_output_3_0_g170508 = TVE_CoatParams;
				float4 ifLocalVar18_g170508 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170508 >= 0.5 )
				ifLocalVar18_g170508 = temp_output_17_0_g170508;
				else
				ifLocalVar18_g170508 = temp_output_3_0_g170508;
				float4 lerpResult22_g170508 = lerp( temp_output_3_0_g170508 , temp_output_17_0_g170508 , temp_output_19_0_g170508);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170508 = lerpResult22_g170508;
				#else
				float4 staticSwitch24_g170508 = ifLocalVar18_g170508;
				#endif
				half4 Coat_Params302_g170496 = staticSwitch24_g170508;
				float4 In_CoatParams204_g170496 = Coat_Params302_g170496;
				float temp_output_82_0_g170497 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170499 = TVE_PaintLayers[(int)temp_output_82_0_g170497];
				float3 lerpResult85_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170500 = lerpResult85_g170496;
				float2 temp_output_75_0_g170500 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170500).xz ) );
				float temp_output_82_0_g170500 = temp_output_82_0_g170497;
				float2 temp_output_119_0_g170500 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170500).xz ) );
				float temp_output_7_0_g170505 = 1.0;
				float temp_output_9_0_g170505 = ( saturate( ( distance( Input_Position180_g170500 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170505 );
				float4 lerpResult131_g170500 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170500,temp_output_82_0_g170500), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170500,temp_output_82_0_g170500), 0.0 ) , saturate( ( temp_output_9_0_g170505 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170505 ) ) ));
				float4 temp_output_17_0_g170499 = lerpResult131_g170500;
				float4 temp_output_3_0_g170499 = TVE_PaintParams;
				float4 ifLocalVar18_g170499 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170499 >= 0.5 )
				ifLocalVar18_g170499 = temp_output_17_0_g170499;
				else
				ifLocalVar18_g170499 = temp_output_3_0_g170499;
				float4 lerpResult22_g170499 = lerp( temp_output_3_0_g170499 , temp_output_17_0_g170499 , temp_output_19_0_g170499);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170499 = lerpResult22_g170499;
				#else
				float4 staticSwitch24_g170499 = ifLocalVar18_g170499;
				#endif
				half4 Paint_Params71_g170496 = staticSwitch24_g170499;
				float4 In_PaintParams204_g170496 = Paint_Params71_g170496;
				float temp_output_82_0_g170543 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170545 = TVE_GlowLayers[(int)temp_output_82_0_g170543];
				float3 lerpResult247_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170546 = lerpResult247_g170496;
				float2 temp_output_75_0_g170546 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170546).xz ) );
				float temp_output_82_0_g170546 = temp_output_82_0_g170543;
				float2 temp_output_119_0_g170546 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170546).xz ) );
				float temp_output_7_0_g170551 = 1.0;
				float temp_output_9_0_g170551 = ( saturate( ( distance( Input_Position180_g170546 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170551 );
				float4 lerpResult131_g170546 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170546,temp_output_82_0_g170546), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170546,temp_output_82_0_g170546), 0.0 ) , saturate( ( temp_output_9_0_g170551 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170551 ) ) ));
				float4 temp_output_17_0_g170545 = lerpResult131_g170546;
				float4 temp_output_3_0_g170545 = TVE_GlowParams;
				float4 ifLocalVar18_g170545 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170545 >= 0.5 )
				ifLocalVar18_g170545 = temp_output_17_0_g170545;
				else
				ifLocalVar18_g170545 = temp_output_3_0_g170545;
				float4 lerpResult22_g170545 = lerp( temp_output_3_0_g170545 , temp_output_17_0_g170545 , temp_output_19_0_g170545);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170545 = lerpResult22_g170545;
				#else
				float4 staticSwitch24_g170545 = ifLocalVar18_g170545;
				#endif
				half4 Glow_Params248_g170496 = staticSwitch24_g170545;
				float4 In_GlowParams204_g170496 = Glow_Params248_g170496;
				float temp_output_132_0_g170524 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170526 = TVE_AtmoLayers[(int)temp_output_132_0_g170524];
				float3 lerpResult104_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170527 = lerpResult104_g170496;
				float2 temp_output_75_0_g170527 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170527).xz ) );
				float temp_output_82_0_g170527 = temp_output_132_0_g170524;
				float2 temp_output_119_0_g170527 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170527).xz ) );
				float temp_output_7_0_g170532 = 1.0;
				float temp_output_9_0_g170532 = ( saturate( ( distance( Input_Position180_g170527 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170532 );
				float4 lerpResult131_g170527 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170527,temp_output_82_0_g170527), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170527,temp_output_82_0_g170527), 0.0 ) , saturate( ( temp_output_9_0_g170532 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170532 ) ) ));
				float4 temp_output_17_0_g170526 = lerpResult131_g170527;
				float4 temp_output_3_0_g170526 = TVE_AtmoParams;
				float4 ifLocalVar18_g170526 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170526 >= 0.5 )
				ifLocalVar18_g170526 = temp_output_17_0_g170526;
				else
				ifLocalVar18_g170526 = temp_output_3_0_g170526;
				float4 lerpResult22_g170526 = lerp( temp_output_3_0_g170526 , temp_output_17_0_g170526 , temp_output_19_0_g170526);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170526 = lerpResult22_g170526;
				#else
				float4 staticSwitch24_g170526 = ifLocalVar18_g170526;
				#endif
				half4 Atmo_Params80_g170496 = staticSwitch24_g170526;
				float4 In_AtmoParams204_g170496 = Atmo_Params80_g170496;
				float temp_output_132_0_g170533 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170535 = TVE_FadeLayers[(int)temp_output_132_0_g170533];
				float3 lerpResult382_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFadePivotValue);
				half3 Input_Position180_g170536 = lerpResult382_g170496;
				float2 temp_output_75_0_g170536 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170536).xz ) );
				float temp_output_82_0_g170536 = temp_output_132_0_g170533;
				float2 temp_output_119_0_g170536 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170536).xz ) );
				float temp_output_7_0_g170541 = 1.0;
				float temp_output_9_0_g170541 = ( saturate( ( distance( Input_Position180_g170536 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170541 );
				float4 lerpResult131_g170536 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170536,temp_output_82_0_g170536), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170536,temp_output_82_0_g170536), 0.0 ) , saturate( ( temp_output_9_0_g170541 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170541 ) ) ));
				float4 temp_output_17_0_g170535 = lerpResult131_g170536;
				float4 temp_output_3_0_g170535 = TVE_FadeParams;
				float4 ifLocalVar18_g170535 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170535 >= 0.5 )
				ifLocalVar18_g170535 = temp_output_17_0_g170535;
				else
				ifLocalVar18_g170535 = temp_output_3_0_g170535;
				float4 lerpResult22_g170535 = lerp( temp_output_3_0_g170535 , temp_output_17_0_g170535 , temp_output_19_0_g170535);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170535 = lerpResult22_g170535;
				#else
				float4 staticSwitch24_g170535 = ifLocalVar18_g170535;
				#endif
				half4 Fade_Params387_g170496 = staticSwitch24_g170535;
				float4 In_FadeParams204_g170496 = Fade_Params387_g170496;
				float temp_output_130_0_g170515 = _GlobalFormLayerValue;
				float temp_output_19_0_g170517 = TVE_FormLayers[(int)temp_output_130_0_g170515];
				float3 lerpResult168_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFormPivotValue);
				half3 Input_Position180_g170518 = lerpResult168_g170496;
				float2 temp_output_75_0_g170518 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170518).xz ) );
				float temp_output_82_0_g170518 = temp_output_130_0_g170515;
				float2 temp_output_119_0_g170518 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170518).xz ) );
				float temp_output_7_0_g170523 = 1.0;
				float temp_output_9_0_g170523 = ( saturate( ( distance( Input_Position180_g170518 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170523 );
				float4 lerpResult131_g170518 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170518,temp_output_82_0_g170518), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170518,temp_output_82_0_g170518), 0.0 ) , saturate( ( temp_output_9_0_g170523 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170523 ) ) ));
				float4 temp_output_17_0_g170517 = lerpResult131_g170518;
				float4 temp_output_3_0_g170517 = TVE_FormParams;
				float4 ifLocalVar18_g170517 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170517 >= 0.5 )
				ifLocalVar18_g170517 = temp_output_17_0_g170517;
				else
				ifLocalVar18_g170517 = temp_output_3_0_g170517;
				float4 lerpResult22_g170517 = lerp( temp_output_3_0_g170517 , temp_output_17_0_g170517 , temp_output_19_0_g170517);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170517 = lerpResult22_g170517;
				#else
				float4 staticSwitch24_g170517 = ifLocalVar18_g170517;
				#endif
				half4 Form_Params112_g170496 = staticSwitch24_g170517;
				float4 In_FormParams204_g170496 = Form_Params112_g170496;
				float temp_output_136_0_g170561 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170563 = TVE_FlowLayers[(int)temp_output_136_0_g170561];
				float3 lerpResult400_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170564 = lerpResult400_g170496;
				float2 temp_output_75_0_g170564 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170564).xz ) );
				float temp_output_82_0_g170564 = temp_output_136_0_g170561;
				float2 temp_output_119_0_g170564 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170564).xz ) );
				float temp_output_7_0_g170569 = 1.0;
				float temp_output_9_0_g170569 = ( saturate( ( distance( Input_Position180_g170564 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170569 );
				float4 lerpResult131_g170564 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170564,temp_output_82_0_g170564), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170564,temp_output_82_0_g170564), 0.0 ) , saturate( ( temp_output_9_0_g170569 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170569 ) ) ));
				float4 temp_output_17_0_g170563 = lerpResult131_g170564;
				float4 temp_output_3_0_g170563 = TVE_FlowParams;
				float4 ifLocalVar18_g170563 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170563 >= 0.5 )
				ifLocalVar18_g170563 = temp_output_17_0_g170563;
				else
				ifLocalVar18_g170563 = temp_output_3_0_g170563;
				float4 lerpResult22_g170563 = lerp( temp_output_3_0_g170563 , temp_output_17_0_g170563 , temp_output_19_0_g170563);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170563 = lerpResult22_g170563;
				#else
				float4 staticSwitch24_g170563 = ifLocalVar18_g170563;
				#endif
				half4 Flow_Params405_g170496 = staticSwitch24_g170563;
				float4 In_FlowParams204_g170496 = Flow_Params405_g170496;
				{
				Data204_g170496.Dummy = In_Dummy204_g170496;
				Data204_g170496.CoatParams = In_CoatParams204_g170496;
				Data204_g170496.PaintParams = In_PaintParams204_g170496;
				Data204_g170496.GlowParams = In_GlowParams204_g170496;
				Data204_g170496.AtmoParams = In_AtmoParams204_g170496;
				Data204_g170496.FadeParams = In_FadeParams204_g170496;
				Data204_g170496.FormParams= In_FormParams204_g170496;
				Data204_g170496.FlowParams = In_FlowParams204_g170496;
				}
				TVEGlobalData Data15_g170644 = Data204_g170496;
				float Out_Dummy15_g170644 = 0;
				float4 Out_CoatParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170644 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170644 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170644 = Data15_g170644.Dummy;
				Out_CoatParams15_g170644 = Data15_g170644.CoatParams;
				Out_PaintParams15_g170644 = Data15_g170644.PaintParams;
				Out_GlowParams15_g170644 = Data15_g170644.GlowParams;
				Out_AtmoParams15_g170644= Data15_g170644.AtmoParams;
				Out_FadeParams15_g170644= Data15_g170644.FadeParams;
				Out_FormParams15_g170644 = Data15_g170644.FormParams;
				Out_FlowParams15_g170644 = Data15_g170644.FlowParams;
				}
				half4 Global_CoatParams975_g170634 = Out_CoatParams15_g170644;
				float temp_output_6_0_g170669 = (Global_CoatParams975_g170634).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170669 = ( temp_output_6_0_g170669 + ( _SecondElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170669 = temp_output_6_0_g170669;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170634 = staticSwitch14_g170669;
				#else
				float staticSwitch971_g170634 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170634 = lerp( 1.0 , staticSwitch971_g170634 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170634 = lerpResult1013_g170634;
				float clampResult17_g170664 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170634 * Blend_LumaMask1033_g170634 * Blend_ProjMask434_g170634 * Blend_VertMask918_g170634 * Blend_GlobalMask972_g170634 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170666 = _SecondBlendRemap.x;
				float temp_output_9_0_g170666 = ( clampResult17_g170664 - temp_output_7_0_g170666 );
				half Blend_Mask412_g170634 = ( saturate( ( ( temp_output_9_0_g170666 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170634 = lerp( Visual_Albedo527_g170634 , lerpResult985_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170634 = lerpResult403_g170634;
				#else
				float3 staticSwitch415_g170634 = Visual_Albedo527_g170634;
				#endif
				half3 Final_Albedo601_g170634 = staticSwitch415_g170634;
				float3 In_Albedo3_g170655 = Final_Albedo601_g170634;
				float3 In_AlbedoRaw3_g170655 = Final_Albedo601_g170634;
				half2 Visual_NormalTS529_g170634 = Out_NormalTS4_g170645;
				float2 lerpResult40_g170646 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170634 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170636) = _SecondNormalTex;
				float localFilterTexture29_g170652 = ( 0.0 );
				SamplerState SS29_g170652 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170652 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170652 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170652 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170652 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170652 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170652 = SamplerDefault29_g170652;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170652 = SamplerDefault29_g170652;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170652 = SamplerPoint29_g170652;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170652 = SamplerLow29_g170652;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170652 = SamplerMedium29_g170652;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170652 = SamplerHigh29_g170652;
				#endif
				}
				SamplerState Sampler276_g170636 = SS29_g170652;
				float4 temp_output_37_0_g170636 = Local_LayerCoords790_g170634;
				half4 Coords276_g170636 = temp_output_37_0_g170636;
				half2 TexCoord276_g170636 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170636 = SampleMain( Texture276_g170636 , Sampler276_g170636 , Coords276_g170636 , TexCoord276_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170636) = _SecondNormalTex;
				SamplerState Sampler275_g170636 = SS29_g170652;
				half4 Coords275_g170636 = temp_output_37_0_g170636;
				half2 TexCoord275_g170636 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170636 = SampleExtra( Texture275_g170636 , Sampler275_g170636 , Coords275_g170636 , TexCoord275_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170636) = _SecondNormalTex;
				SamplerState Sampler238_g170636 = SS29_g170652;
				half4 Coords238_g170636 = temp_output_37_0_g170636;
				float3 temp_output_279_0_g170636 = Model_PositionWO636_g170634;
				half3 WorldPosition238_g170636 = temp_output_279_0_g170636;
				half4 localSamplePlanar2D238_g170636 = SamplePlanar2D( Texture238_g170636 , Sampler238_g170636 , Coords238_g170636 , WorldPosition238_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170636) = _SecondNormalTex;
				SamplerState Sampler246_g170636 = SS29_g170652;
				half4 Coords246_g170636 = temp_output_37_0_g170636;
				half3 WorldPosition246_g170636 = temp_output_279_0_g170636;
				float3 temp_output_280_0_g170636 = Model_NormalWS869_g170634;
				half3 WorldNormal246_g170636 = temp_output_280_0_g170636;
				half4 localSamplePlanar3D246_g170636 = SamplePlanar3D( Texture246_g170636 , Sampler246_g170636 , Coords246_g170636 , WorldPosition246_g170636 , WorldNormal246_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170636) = _SecondNormalTex;
				SamplerState Sampler234_g170636 = SS29_g170652;
				float4 Coords234_g170636 = temp_output_37_0_g170636;
				float3 WorldPosition234_g170636 = temp_output_279_0_g170636;
				float4 localSampleStochastic2D234_g170636 = SampleStochastic2D( Texture234_g170636 , Sampler234_g170636 , Coords234_g170636 , WorldPosition234_g170636 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170636) = _SecondNormalTex;
				SamplerState Sampler263_g170636 = SS29_g170652;
				half4 Coords263_g170636 = temp_output_37_0_g170636;
				half3 WorldPosition263_g170636 = temp_output_279_0_g170636;
				half3 WorldNormal263_g170636 = temp_output_280_0_g170636;
				half4 localSampleStochastic3D263_g170636 = SampleStochastic3D( Texture263_g170636 , Sampler263_g170636 , Coords263_g170636 , WorldPosition263_g170636 , WorldNormal263_g170636 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170634 = localSampleMain276_g170636;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170634 = localSampleExtra275_g170636;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170634 = localSamplePlanar2D238_g170636;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170634 = localSamplePlanar3D246_g170636;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170634 = localSampleStochastic2D234_g170636;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170634 = localSampleStochastic3D263_g170636;
				#else
				float4 staticSwitch698_g170634 = localSampleMain276_g170636;
				#endif
				half4 Local_NormalTex776_g170634 = staticSwitch698_g170634;
				half4 Normal_Packed45_g170639 = Local_NormalTex776_g170634;
				float2 appendResult58_g170639 = (float2(( (Normal_Packed45_g170639).x * (Normal_Packed45_g170639).w ) , (Normal_Packed45_g170639).y));
				half2 Normal_Default50_g170639 = appendResult58_g170639;
				half2 Normal_ASTC41_g170639 = (Normal_Packed45_g170639).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170639 = Normal_ASTC41_g170639;
				#else
				float2 staticSwitch38_g170639 = Normal_Default50_g170639;
				#endif
				half2 Normal_NO_DTX544_g170639 = (Normal_Packed45_g170639).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170639 = Normal_NO_DTX544_g170639;
				#else
				float2 staticSwitch37_g170639 = staticSwitch38_g170639;
				#endif
				float2 temp_output_724_0_g170634 = ( (staticSwitch37_g170639*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170640 = temp_output_724_0_g170634;
				float2 break71_g170640 = Normal_Planar45_g170640;
				float3 appendResult72_g170640 = (float3(break71_g170640.x , 0.0 , break71_g170640.y));
				float2 temp_output_858_0_g170634 = (mul( ase_worldToTangent, appendResult72_g170640 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170634 = temp_output_858_0_g170634;
				#else
				float2 staticSwitch727_g170634 = temp_output_724_0_g170634;
				#endif
				half2 Local_NormalTS729_g170634 = staticSwitch727_g170634;
				float2 temp_output_36_0_g170646 = ( lerpResult40_g170646 + Local_NormalTS729_g170634 );
				float2 lerpResult405_g170634 = lerp( Visual_NormalTS529_g170634 , temp_output_36_0_g170646 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170634 = lerpResult405_g170634;
				#else
				float2 staticSwitch418_g170634 = Visual_NormalTS529_g170634;
				#endif
				half2 Final_NormalTS612_g170634 = staticSwitch418_g170634;
				float2 In_NormalTS3_g170655 = Final_NormalTS612_g170634;
				float3 appendResult68_g170647 = (float3(Final_NormalTS612_g170634 , 1.0));
				float3 tanNormal74_g170647 = appendResult68_g170647;
				float3 worldNormal74_g170647 = normalize( float3(dot(tanToWorld0,tanNormal74_g170647), dot(tanToWorld1,tanNormal74_g170647), dot(tanToWorld2,tanNormal74_g170647)) );
				half3 Final_NormalWS950_g170634 = worldNormal74_g170647;
				float3 In_NormalWS3_g170655 = Final_NormalWS950_g170634;
				half4 Visual_Shader531_g170634 = Out_Shader4_g170645;
				float4 lerpResult994_g170634 = lerp( Local_Masks750_g170634 , ( Visual_Shader531_g170634 * Local_Masks750_g170634 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170634 = lerp( Visual_Shader531_g170634 , lerpResult994_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170634 = lerpResult440_g170634;
				#else
				float4 staticSwitch451_g170634 = Visual_Shader531_g170634;
				#endif
				half4 Final_Masks613_g170634 = staticSwitch451_g170634;
				float4 In_Shader3_g170655 = Final_Masks613_g170634;
				float4 In_Emissive3_g170655 = Out_Emissive4_g170645;
				float3 temp_output_3_0_g170649 = Final_Albedo601_g170634;
				float dotResult20_g170649 = dot( temp_output_3_0_g170649 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170634 = dotResult20_g170649;
				float In_Grayscale3_g170655 = Final_Grayscale615_g170634;
				float clampResult651_g170634 = clamp( saturate( ( Final_Grayscale615_g170634 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170634 = clampResult651_g170634;
				float In_Luminosity3_g170655 = Final_Luminosity652_g170634;
				half Visual_MultiMask547_g170634 = Out_MultiMask4_g170645;
				float lerpResult477_g170634 = lerp( Visual_MultiMask547_g170634 , Local_MultiMask767_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch482_g170634 = lerpResult477_g170634;
				#else
				float staticSwitch482_g170634 = Visual_MultiMask547_g170634;
				#endif
				half Final_MultiMask572_g170634 = staticSwitch482_g170634;
				float In_MultiMask3_g170655 = Final_MultiMask572_g170634;
				half Visual_AlphaClip559_g170634 = Out_AlphaClip4_g170645;
				float temp_output_718_0_g170634 = (Local_AlbedoTex777_g170634).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170634 = ( temp_output_718_0_g170634 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170634 = temp_output_718_0_g170634;
				#endif
				half Local_AlphaClip772_g170634 = staticSwitch932_g170634;
				float lerpResult448_g170634 = lerp( Visual_AlphaClip559_g170634 , Local_AlphaClip772_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch564_g170634 = lerpResult448_g170634;
				#else
				float staticSwitch564_g170634 = Visual_AlphaClip559_g170634;
				#endif
				half Final_AlphaClip602_g170634 = staticSwitch564_g170634;
				float In_AlphaClip3_g170655 = Final_AlphaClip602_g170634;
				half Visual_AlphaFade588_g170634 = Out_AlphaFade4_g170645;
				half Local_AlphaFade773_g170634 = (lerpResult706_g170634).a;
				float lerpResult604_g170634 = lerp( Visual_AlphaFade588_g170634 , Local_AlphaFade773_g170634 , Blend_Mask412_g170634);
				#ifdef TVE_SECOND
				float staticSwitch608_g170634 = lerpResult604_g170634;
				#else
				float staticSwitch608_g170634 = Visual_AlphaFade588_g170634;
				#endif
				half Final_AlphaFade611_g170634 = staticSwitch608_g170634;
				float In_AlphaFade3_g170655 = Final_AlphaFade611_g170634;
				float3 In_Translucency3_g170655 = Out_Translucency4_g170645;
				float In_Transmission3_g170655 = Out_Transmission4_g170645;
				float In_Thickness3_g170655 = Out_Thickness4_g170645;
				float In_Diffusion3_g170655 = Out_Diffusion4_g170645;
				{
				Data3_g170655.Dummy = In_Dummy3_g170655;
				Data3_g170655.Albedo = In_Albedo3_g170655;
				Data3_g170655.AlbedoRaw = In_AlbedoRaw3_g170655;
				Data3_g170655.NormalTS = In_NormalTS3_g170655;
				Data3_g170655.NormalWS = In_NormalWS3_g170655;
				Data3_g170655.Shader = In_Shader3_g170655;
				Data3_g170655.Emissive= In_Emissive3_g170655;
				Data3_g170655.MultiMask = In_MultiMask3_g170655;
				Data3_g170655.Grayscale = In_Grayscale3_g170655;
				Data3_g170655.Luminosity = In_Luminosity3_g170655;
				Data3_g170655.AlphaClip = In_AlphaClip3_g170655;
				Data3_g170655.AlphaFade = In_AlphaFade3_g170655;
				Data3_g170655.Translucency = In_Translucency3_g170655;
				Data3_g170655.Transmission = In_Transmission3_g170655;
				Data3_g170655.Thickness = In_Thickness3_g170655;
				Data3_g170655.Diffusion = In_Diffusion3_g170655;
				}
				TVEVisualData Data4_g170686 = Data3_g170655;
				float Out_Dummy4_g170686 = 0;
				float3 Out_Albedo4_g170686 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170686 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170686 = float2( 0,0 );
				float3 Out_NormalWS4_g170686 = float3( 0,0,0 );
				float4 Out_Shader4_g170686 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170686 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170686 = 0;
				float Out_Grayscale4_g170686 = 0;
				float Out_Luminosity4_g170686 = 0;
				float Out_AlphaClip4_g170686 = 0;
				float Out_AlphaFade4_g170686 = 0;
				float3 Out_Translucency4_g170686 = float3( 0,0,0 );
				float Out_Transmission4_g170686 = 0;
				float Out_Thickness4_g170686 = 0;
				float Out_Diffusion4_g170686 = 0;
				{
				Out_Dummy4_g170686 = Data4_g170686.Dummy;
				Out_Albedo4_g170686 = Data4_g170686.Albedo;
				Out_AlbedoRaw4_g170686 = Data4_g170686.AlbedoRaw;
				Out_NormalTS4_g170686 = Data4_g170686.NormalTS;
				Out_NormalWS4_g170686 = Data4_g170686.NormalWS;
				Out_Shader4_g170686 = Data4_g170686.Shader;
				Out_Emissive4_g170686= Data4_g170686.Emissive;
				Out_MultiMask4_g170686 = Data4_g170686.MultiMask;
				Out_Grayscale4_g170686 = Data4_g170686.Grayscale;
				Out_Luminosity4_g170686= Data4_g170686.Luminosity;
				Out_AlphaClip4_g170686 = Data4_g170686.AlphaClip;
				Out_AlphaFade4_g170686 = Data4_g170686.AlphaFade;
				Out_Translucency4_g170686 = Data4_g170686.Translucency;
				Out_Transmission4_g170686 = Data4_g170686.Transmission;
				Out_Thickness4_g170686 = Data4_g170686.Thickness;
				Out_Diffusion4_g170686 = Data4_g170686.Diffusion;
				}
				half3 Visual_Albedo527_g170678 = Out_Albedo4_g170686;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170679) = _ThirdAlbedoTex;
				float localFilterTexture19_g170695 = ( 0.0 );
				SamplerState SS19_g170695 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170695 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170695 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170695 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170695 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170695 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170695 = SamplerDefault19_g170695;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170695 = SamplerDefault19_g170695;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170695 = SamplerPoint19_g170695;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170695 = SamplerLow19_g170695;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170695 = SamplerMedium19_g170695;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170695 = SamplerHigh19_g170695;
				#endif
				}
				SamplerState Sampler276_g170679 = SS19_g170695;
				half4 Local_LayerCoords790_g170678 = _third_coord_value;
				float4 temp_output_37_0_g170679 = Local_LayerCoords790_g170678;
				half4 Coords276_g170679 = temp_output_37_0_g170679;
				half2 TexCoord276_g170679 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170679 = SampleMain( Texture276_g170679 , Sampler276_g170679 , Coords276_g170679 , TexCoord276_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170679 = SS19_g170695;
				half4 Coords275_g170679 = temp_output_37_0_g170679;
				half2 TexCoord275_g170679 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170679 = SampleExtra( Texture275_g170679 , Sampler275_g170679 , Coords275_g170679 , TexCoord275_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170679 = SS19_g170695;
				half4 Coords238_g170679 = temp_output_37_0_g170679;
				TVEModelData Data15_g170698 = Data16_g170483;
				float Out_Dummy15_g170698 = 0;
				float3 Out_PositionWS15_g170698 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170698 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170698 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170698 = float3( 0,0,0 );
				float4 Out_VertexData15_g170698 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170698 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170698 = Data15_g170698.Dummy;
				Out_PositionWS15_g170698 = Data15_g170698.PositionWS;
				Out_PositionWO15_g170698 = Data15_g170698.PositionWO;
				Out_PivotWS15_g170698 = Data15_g170698.PivotWS;
				Out_PivotWO15_g170698 = Data15_g170698.PivotWO;
				Out_NormalWS15_g170698 = Data15_g170698.NormalWS;
				Out_ViewDirWS15_g170698 = Data15_g170698.ViewDirWS;
				Out_VertexData15_g170698 = Data15_g170698.VertexData;
				Out_BoundsData15_g170698 = Data15_g170698.BoundsData;
				}
				half3 Model_PositionWO636_g170678 = Out_PositionWO15_g170698;
				float3 temp_output_279_0_g170679 = Model_PositionWO636_g170678;
				half3 WorldPosition238_g170679 = temp_output_279_0_g170679;
				half4 localSamplePlanar2D238_g170679 = SamplePlanar2D( Texture238_g170679 , Sampler238_g170679 , Coords238_g170679 , WorldPosition238_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170679 = SS19_g170695;
				half4 Coords246_g170679 = temp_output_37_0_g170679;
				half3 WorldPosition246_g170679 = temp_output_279_0_g170679;
				half3 Model_NormalWS869_g170678 = Out_NormalWS15_g170698;
				float3 temp_output_280_0_g170679 = Model_NormalWS869_g170678;
				half3 WorldNormal246_g170679 = temp_output_280_0_g170679;
				half4 localSamplePlanar3D246_g170679 = SamplePlanar3D( Texture246_g170679 , Sampler246_g170679 , Coords246_g170679 , WorldPosition246_g170679 , WorldNormal246_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170679 = SS19_g170695;
				float4 Coords234_g170679 = temp_output_37_0_g170679;
				float3 WorldPosition234_g170679 = temp_output_279_0_g170679;
				float4 localSampleStochastic2D234_g170679 = SampleStochastic2D( Texture234_g170679 , Sampler234_g170679 , Coords234_g170679 , WorldPosition234_g170679 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170679) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170679 = SS19_g170695;
				half4 Coords263_g170679 = temp_output_37_0_g170679;
				half3 WorldPosition263_g170679 = temp_output_279_0_g170679;
				half3 WorldNormal263_g170679 = temp_output_280_0_g170679;
				half4 localSampleStochastic3D263_g170679 = SampleStochastic3D( Texture263_g170679 , Sampler263_g170679 , Coords263_g170679 , WorldPosition263_g170679 , WorldNormal263_g170679 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170678 = localSampleMain276_g170679;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170678 = localSampleExtra275_g170679;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170678 = localSamplePlanar2D238_g170679;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170678 = localSamplePlanar3D246_g170679;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170678 = localSampleStochastic2D234_g170679;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170678 = localSampleStochastic3D263_g170679;
				#else
				float4 staticSwitch693_g170678 = localSampleMain276_g170679;
				#endif
				half4 Local_AlbedoTex777_g170678 = staticSwitch693_g170678;
				float3 lerpResult716_g170678 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170678).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170678 = lerpResult716_g170678;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170681) = _ThirdShaderTex;
				float localFilterTexture30_g170697 = ( 0.0 );
				SamplerState SS30_g170697 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170697 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170697 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170697 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170697 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170697 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170697 = SamplerDefault30_g170697;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170697 = SamplerDefault30_g170697;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170697 = SamplerPoint30_g170697;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170697 = SamplerLow30_g170697;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170697 = SamplerMedium30_g170697;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170697 = SamplerHigh30_g170697;
				#endif
				}
				SamplerState Sampler276_g170681 = SS30_g170697;
				float4 temp_output_37_0_g170681 = Local_LayerCoords790_g170678;
				half4 Coords276_g170681 = temp_output_37_0_g170681;
				half2 TexCoord276_g170681 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170681 = SampleMain( Texture276_g170681 , Sampler276_g170681 , Coords276_g170681 , TexCoord276_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170681) = _ThirdShaderTex;
				SamplerState Sampler275_g170681 = SS30_g170697;
				half4 Coords275_g170681 = temp_output_37_0_g170681;
				half2 TexCoord275_g170681 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170681 = SampleExtra( Texture275_g170681 , Sampler275_g170681 , Coords275_g170681 , TexCoord275_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170681) = _ThirdShaderTex;
				SamplerState Sampler238_g170681 = SS30_g170697;
				half4 Coords238_g170681 = temp_output_37_0_g170681;
				float3 temp_output_279_0_g170681 = Model_PositionWO636_g170678;
				half3 WorldPosition238_g170681 = temp_output_279_0_g170681;
				half4 localSamplePlanar2D238_g170681 = SamplePlanar2D( Texture238_g170681 , Sampler238_g170681 , Coords238_g170681 , WorldPosition238_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170681) = _ThirdShaderTex;
				SamplerState Sampler246_g170681 = SS30_g170697;
				half4 Coords246_g170681 = temp_output_37_0_g170681;
				half3 WorldPosition246_g170681 = temp_output_279_0_g170681;
				float3 temp_output_280_0_g170681 = Model_NormalWS869_g170678;
				half3 WorldNormal246_g170681 = temp_output_280_0_g170681;
				half4 localSamplePlanar3D246_g170681 = SamplePlanar3D( Texture246_g170681 , Sampler246_g170681 , Coords246_g170681 , WorldPosition246_g170681 , WorldNormal246_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170681) = _ThirdShaderTex;
				SamplerState Sampler234_g170681 = SS30_g170697;
				float4 Coords234_g170681 = temp_output_37_0_g170681;
				float3 WorldPosition234_g170681 = temp_output_279_0_g170681;
				float4 localSampleStochastic2D234_g170681 = SampleStochastic2D( Texture234_g170681 , Sampler234_g170681 , Coords234_g170681 , WorldPosition234_g170681 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170681) = _ThirdShaderTex;
				SamplerState Sampler263_g170681 = SS30_g170697;
				half4 Coords263_g170681 = temp_output_37_0_g170681;
				half3 WorldPosition263_g170681 = temp_output_279_0_g170681;
				half3 WorldNormal263_g170681 = temp_output_280_0_g170681;
				half4 localSampleStochastic3D263_g170681 = SampleStochastic3D( Texture263_g170681 , Sampler263_g170681 , Coords263_g170681 , WorldPosition263_g170681 , WorldNormal263_g170681 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170678 = localSampleMain276_g170681;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170678 = localSampleExtra275_g170681;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170678 = localSamplePlanar2D238_g170681;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170678 = localSamplePlanar3D246_g170681;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170678 = localSampleStochastic2D234_g170681;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170678 = localSampleStochastic3D263_g170681;
				#else
				float4 staticSwitch722_g170678 = localSampleMain276_g170681;
				#endif
				half4 Local_ShaderTex775_g170678 = staticSwitch722_g170678;
				float lerpResult739_g170678 = lerp( 1.0 , (Local_ShaderTex775_g170678).y , _ThirdOcclusionValue);
				float4 appendResult749_g170678 = (float4(( (Local_ShaderTex775_g170678).x * _ThirdMetallicValue ) , lerpResult739_g170678 , (Local_ShaderTex775_g170678).z , ( (Local_ShaderTex775_g170678).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170678 = appendResult749_g170678;
				float clampResult17_g170684 = clamp( (Local_Masks750_g170678).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170699 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170699 = ( clampResult17_g170684 - temp_output_7_0_g170699 );
				float temp_output_765_0_g170678 = saturate( ( ( temp_output_9_0_g170699 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170678 = temp_output_765_0_g170678;
				float lerpResult705_g170678 = lerp( 1.0 , Local_MultiMask767_g170678 , _ThirdColorMode);
				float4 lerpResult706_g170678 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170678);
				half3 Local_ColorRGB774_g170678 = (lerpResult706_g170678).rgb;
				half3 Local_Albedo768_g170678 = ( Local_AlbedoRGB771_g170678 * Local_ColorRGB774_g170678 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170691 = 2.0;
				#else
				float staticSwitch1_g170691 = 4.594794;
				#endif
				float3 lerpResult985_g170678 = lerp( Local_Albedo768_g170678 , ( Visual_Albedo527_g170678 * Local_Albedo768_g170678 * staticSwitch1_g170691 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170693) = _ThirdMaskTex;
				SamplerState Sampler276_g170693 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170678 = _third_mask_coord_value;
				float4 temp_output_37_0_g170693 = Local_MaskCoords813_g170678;
				half4 Coords276_g170693 = temp_output_37_0_g170693;
				half2 TexCoord276_g170693 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170693 = SampleMain( Texture276_g170693 , Sampler276_g170693 , Coords276_g170693 , TexCoord276_g170693 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170693) = _ThirdMaskTex;
				SamplerState Sampler275_g170693 = sampler_Linear_Repeat;
				half4 Coords275_g170693 = temp_output_37_0_g170693;
				half2 TexCoord275_g170693 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170693 = SampleExtra( Texture275_g170693 , Sampler275_g170693 , Coords275_g170693 , TexCoord275_g170693 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170693) = _ThirdMaskTex;
				SamplerState Sampler238_g170693 = sampler_Linear_Repeat;
				half4 Coords238_g170693 = temp_output_37_0_g170693;
				float3 temp_output_279_0_g170693 = Model_PositionWO636_g170678;
				half3 WorldPosition238_g170693 = temp_output_279_0_g170693;
				half4 localSamplePlanar2D238_g170693 = SamplePlanar2D( Texture238_g170693 , Sampler238_g170693 , Coords238_g170693 , WorldPosition238_g170693 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170693) = _ThirdMaskTex;
				SamplerState Sampler246_g170693 = sampler_Linear_Repeat;
				half4 Coords246_g170693 = temp_output_37_0_g170693;
				half3 WorldPosition246_g170693 = temp_output_279_0_g170693;
				float3 temp_output_280_0_g170693 = Model_NormalWS869_g170678;
				half3 WorldNormal246_g170693 = temp_output_280_0_g170693;
				half4 localSamplePlanar3D246_g170693 = SamplePlanar3D( Texture246_g170693 , Sampler246_g170693 , Coords246_g170693 , WorldPosition246_g170693 , WorldNormal246_g170693 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170678 = localSampleMain276_g170693;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170678 = localSampleExtra275_g170693;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170678 = localSamplePlanar2D238_g170693;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170678 = localSamplePlanar3D246_g170693;
				#else
				float4 staticSwitch817_g170678 = localSampleMain276_g170693;
				#endif
				half4 Local_MaskTex861_g170678 = staticSwitch817_g170678;
				float clampResult17_g170701 = clamp( (Local_MaskTex861_g170678).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170705 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170705 = ( clampResult17_g170701 - temp_output_7_0_g170705 );
				float lerpResult1028_g170678 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170705 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170678 = lerpResult1028_g170678;
				half Visual_Luminosity1049_g170678 = Out_Luminosity4_g170686;
				float clampResult17_g170710 = clamp( Visual_Luminosity1049_g170678 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170711 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170711 = ( clampResult17_g170710 - temp_output_7_0_g170711 );
				float lerpResult1040_g170678 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170711 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170678 = lerpResult1040_g170678;
				half4 Model_VertexMasks960_g170678 = Out_VertexData15_g170698;
				float4 break961_g170678 = Model_VertexMasks960_g170678;
				float4 break33_g170702 = _third_vert_mode;
				float temp_output_30_0_g170702 = ( break961_g170678.x * break33_g170702.x );
				float temp_output_29_0_g170702 = ( break961_g170678.y * break33_g170702.y );
				float temp_output_31_0_g170702 = ( break961_g170678.z * break33_g170702.z );
				float temp_output_28_0_g170702 = ( temp_output_30_0_g170702 + temp_output_29_0_g170702 + temp_output_31_0_g170702 + ( break961_g170678.w * break33_g170702.w ) );
				float clampResult17_g170700 = clamp( temp_output_28_0_g170702 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170704 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170704 = ( clampResult17_g170700 - temp_output_7_0_g170704 );
				float lerpResult1026_g170678 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170704 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170703 = lerpResult1026_g170678;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170703 = ( temp_output_6_0_g170703 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170703 = temp_output_6_0_g170703;
				#endif
				half Blend_VertMask913_g170678 = staticSwitch14_g170703;
				half3 Visual_NormalWS953_g170678 = Out_NormalWS4_g170686;
				float clampResult17_g170706 = clamp( saturate( (Visual_NormalWS953_g170678).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170708 = _ThirdProjRemap.x;
				float temp_output_9_0_g170708 = ( clampResult17_g170706 - temp_output_7_0_g170708 );
				float lerpResult1004_g170678 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170708 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170678 = lerpResult1004_g170678;
				TVEGlobalData Data15_g170688 = Data204_g170496;
				float Out_Dummy15_g170688 = 0;
				float4 Out_CoatParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170688 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170688 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170688 = Data15_g170688.Dummy;
				Out_CoatParams15_g170688 = Data15_g170688.CoatParams;
				Out_PaintParams15_g170688 = Data15_g170688.PaintParams;
				Out_GlowParams15_g170688 = Data15_g170688.GlowParams;
				Out_AtmoParams15_g170688= Data15_g170688.AtmoParams;
				Out_FadeParams15_g170688= Data15_g170688.FadeParams;
				Out_FormParams15_g170688 = Data15_g170688.FormParams;
				Out_FlowParams15_g170688 = Data15_g170688.FlowParams;
				}
				half4 Global_CoatParams972_g170678 = Out_CoatParams15_g170688;
				float temp_output_6_0_g170712 = (Global_CoatParams972_g170678).y;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170712 = ( temp_output_6_0_g170712 + ( _ThirdElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170712 = temp_output_6_0_g170712;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170678 = staticSwitch14_g170712;
				#else
				float staticSwitch1056_g170678 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170678 = lerp( 1.0 , staticSwitch1056_g170678 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170678 = lerpResult1060_g170678;
				float clampResult17_g170707 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170678 * Blend_LumaMask1046_g170678 * Blend_VertMask913_g170678 * Blend_ProjMask912_g170678 * Blend_GlobalMask968_g170678 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170709 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170709 = ( clampResult17_g170707 - temp_output_7_0_g170709 );
				half Detail_Mask412_g170678 = ( saturate( ( ( temp_output_9_0_g170709 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170678 = lerp( Visual_Albedo527_g170678 , lerpResult985_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170678 = lerpResult989_g170678;
				#else
				float3 staticSwitch415_g170678 = Visual_Albedo527_g170678;
				#endif
				half3 Final_Albedo601_g170678 = staticSwitch415_g170678;
				float3 In_Albedo3_g170687 = Final_Albedo601_g170678;
				float3 In_AlbedoRaw3_g170687 = Final_Albedo601_g170678;
				half2 Visual_NormalTS529_g170678 = Out_NormalTS4_g170686;
				float2 lerpResult40_g170689 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170678 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170680) = _ThirdNormalTex;
				float localFilterTexture29_g170696 = ( 0.0 );
				SamplerState SS29_g170696 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170696 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170696 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170696 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170696 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170696 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170696 = SamplerDefault29_g170696;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170696 = SamplerDefault29_g170696;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170696 = SamplerPoint29_g170696;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170696 = SamplerLow29_g170696;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170696 = SamplerMedium29_g170696;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170696 = SamplerHigh29_g170696;
				#endif
				}
				SamplerState Sampler276_g170680 = SS29_g170696;
				float4 temp_output_37_0_g170680 = Local_LayerCoords790_g170678;
				half4 Coords276_g170680 = temp_output_37_0_g170680;
				half2 TexCoord276_g170680 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170680 = SampleMain( Texture276_g170680 , Sampler276_g170680 , Coords276_g170680 , TexCoord276_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170680) = _ThirdNormalTex;
				SamplerState Sampler275_g170680 = SS29_g170696;
				half4 Coords275_g170680 = temp_output_37_0_g170680;
				half2 TexCoord275_g170680 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170680 = SampleExtra( Texture275_g170680 , Sampler275_g170680 , Coords275_g170680 , TexCoord275_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170680) = _ThirdNormalTex;
				SamplerState Sampler238_g170680 = SS29_g170696;
				half4 Coords238_g170680 = temp_output_37_0_g170680;
				float3 temp_output_279_0_g170680 = Model_PositionWO636_g170678;
				half3 WorldPosition238_g170680 = temp_output_279_0_g170680;
				half4 localSamplePlanar2D238_g170680 = SamplePlanar2D( Texture238_g170680 , Sampler238_g170680 , Coords238_g170680 , WorldPosition238_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170680) = _ThirdNormalTex;
				SamplerState Sampler246_g170680 = SS29_g170696;
				half4 Coords246_g170680 = temp_output_37_0_g170680;
				half3 WorldPosition246_g170680 = temp_output_279_0_g170680;
				float3 temp_output_280_0_g170680 = Model_NormalWS869_g170678;
				half3 WorldNormal246_g170680 = temp_output_280_0_g170680;
				half4 localSamplePlanar3D246_g170680 = SamplePlanar3D( Texture246_g170680 , Sampler246_g170680 , Coords246_g170680 , WorldPosition246_g170680 , WorldNormal246_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170680) = _ThirdNormalTex;
				SamplerState Sampler234_g170680 = SS29_g170696;
				float4 Coords234_g170680 = temp_output_37_0_g170680;
				float3 WorldPosition234_g170680 = temp_output_279_0_g170680;
				float4 localSampleStochastic2D234_g170680 = SampleStochastic2D( Texture234_g170680 , Sampler234_g170680 , Coords234_g170680 , WorldPosition234_g170680 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170680) = _ThirdNormalTex;
				SamplerState Sampler263_g170680 = SS29_g170696;
				half4 Coords263_g170680 = temp_output_37_0_g170680;
				half3 WorldPosition263_g170680 = temp_output_279_0_g170680;
				half3 WorldNormal263_g170680 = temp_output_280_0_g170680;
				half4 localSampleStochastic3D263_g170680 = SampleStochastic3D( Texture263_g170680 , Sampler263_g170680 , Coords263_g170680 , WorldPosition263_g170680 , WorldNormal263_g170680 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170678 = localSampleMain276_g170680;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170678 = localSampleExtra275_g170680;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170678 = localSamplePlanar2D238_g170680;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170678 = localSamplePlanar3D246_g170680;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170678 = localSampleStochastic2D234_g170680;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170678 = localSampleStochastic3D263_g170680;
				#else
				float4 staticSwitch698_g170678 = localSampleMain276_g170680;
				#endif
				half4 Local_NormalTex776_g170678 = staticSwitch698_g170678;
				half4 Normal_Packed45_g170682 = Local_NormalTex776_g170678;
				float2 appendResult58_g170682 = (float2(( (Normal_Packed45_g170682).x * (Normal_Packed45_g170682).w ) , (Normal_Packed45_g170682).y));
				half2 Normal_Default50_g170682 = appendResult58_g170682;
				half2 Normal_ASTC41_g170682 = (Normal_Packed45_g170682).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170682 = Normal_ASTC41_g170682;
				#else
				float2 staticSwitch38_g170682 = Normal_Default50_g170682;
				#endif
				half2 Normal_NO_DTX544_g170682 = (Normal_Packed45_g170682).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170682 = Normal_NO_DTX544_g170682;
				#else
				float2 staticSwitch37_g170682 = staticSwitch38_g170682;
				#endif
				float2 temp_output_724_0_g170678 = ( (staticSwitch37_g170682*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170683 = temp_output_724_0_g170678;
				float2 break71_g170683 = Normal_Planar45_g170683;
				float3 appendResult72_g170683 = (float3(break71_g170683.x , 0.0 , break71_g170683.y));
				float2 temp_output_858_0_g170678 = (mul( ase_worldToTangent, appendResult72_g170683 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170678 = temp_output_724_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170678 = temp_output_724_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170678 = temp_output_858_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170678 = temp_output_858_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170678 = temp_output_858_0_g170678;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170678 = temp_output_858_0_g170678;
				#else
				float2 staticSwitch727_g170678 = temp_output_724_0_g170678;
				#endif
				half2 Local_NormalTS729_g170678 = staticSwitch727_g170678;
				float2 temp_output_36_0_g170689 = ( lerpResult40_g170689 + Local_NormalTS729_g170678 );
				float2 lerpResult405_g170678 = lerp( Visual_NormalTS529_g170678 , temp_output_36_0_g170689 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170678 = lerpResult405_g170678;
				#else
				float2 staticSwitch418_g170678 = Visual_NormalTS529_g170678;
				#endif
				half2 Final_NormalTS612_g170678 = staticSwitch418_g170678;
				float2 In_NormalTS3_g170687 = Final_NormalTS612_g170678;
				float3 appendResult68_g170690 = (float3(Final_NormalTS612_g170678 , 1.0));
				float3 tanNormal74_g170690 = appendResult68_g170690;
				float3 worldNormal74_g170690 = normalize( float3(dot(tanToWorld0,tanNormal74_g170690), dot(tanToWorld1,tanNormal74_g170690), dot(tanToWorld2,tanNormal74_g170690)) );
				half3 Final_NormalWS956_g170678 = worldNormal74_g170690;
				float3 In_NormalWS3_g170687 = Final_NormalWS956_g170678;
				half4 Visual_Shader531_g170678 = Out_Shader4_g170686;
				float4 lerpResult1000_g170678 = lerp( Local_Masks750_g170678 , ( Visual_Shader531_g170678 * Local_Masks750_g170678 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170678 = lerp( Visual_Shader531_g170678 , lerpResult1000_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170678 = lerpResult998_g170678;
				#else
				float4 staticSwitch451_g170678 = Visual_Shader531_g170678;
				#endif
				half4 Final_Masks613_g170678 = staticSwitch451_g170678;
				float4 In_Shader3_g170687 = Final_Masks613_g170678;
				float4 In_Emissive3_g170687 = Out_Emissive4_g170686;
				float3 temp_output_3_0_g170692 = Final_Albedo601_g170678;
				float dotResult20_g170692 = dot( temp_output_3_0_g170692 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170678 = dotResult20_g170692;
				float In_Grayscale3_g170687 = Final_Grayscale615_g170678;
				float clampResult651_g170678 = clamp( saturate( ( Final_Grayscale615_g170678 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170678 = clampResult651_g170678;
				float In_Luminosity3_g170687 = Final_Luminosity652_g170678;
				half Visual_MultiMask547_g170678 = Out_MultiMask4_g170686;
				float lerpResult477_g170678 = lerp( Visual_MultiMask547_g170678 , Local_MultiMask767_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float staticSwitch482_g170678 = lerpResult477_g170678;
				#else
				float staticSwitch482_g170678 = Visual_MultiMask547_g170678;
				#endif
				half Final_MultiMask572_g170678 = staticSwitch482_g170678;
				float In_MultiMask3_g170687 = Final_MultiMask572_g170678;
				half Visual_AlphaClip559_g170678 = Out_AlphaClip4_g170686;
				float temp_output_718_0_g170678 = (Local_AlbedoTex777_g170678).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170678 = ( temp_output_718_0_g170678 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170678 = temp_output_718_0_g170678;
				#endif
				half Local_AlphaClip772_g170678 = staticSwitch924_g170678;
				float lerpResult448_g170678 = lerp( Visual_AlphaClip559_g170678 , Local_AlphaClip772_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float staticSwitch564_g170678 = lerpResult448_g170678;
				#else
				float staticSwitch564_g170678 = Visual_AlphaClip559_g170678;
				#endif
				half Final_AlphaClip602_g170678 = staticSwitch564_g170678;
				float In_AlphaClip3_g170687 = Final_AlphaClip602_g170678;
				half Visual_AlphaFade588_g170678 = Out_AlphaFade4_g170686;
				half Local_AlphaFade773_g170678 = (lerpResult706_g170678).a;
				float lerpResult604_g170678 = lerp( Visual_AlphaFade588_g170678 , Local_AlphaFade773_g170678 , Detail_Mask412_g170678);
				#ifdef TVE_THIRD
				float staticSwitch608_g170678 = lerpResult604_g170678;
				#else
				float staticSwitch608_g170678 = Visual_AlphaFade588_g170678;
				#endif
				half Final_AlphaFade611_g170678 = staticSwitch608_g170678;
				float In_AlphaFade3_g170687 = Final_AlphaFade611_g170678;
				float3 In_Translucency3_g170687 = Out_Translucency4_g170686;
				float In_Transmission3_g170687 = Out_Transmission4_g170686;
				float In_Thickness3_g170687 = Out_Thickness4_g170686;
				float In_Diffusion3_g170687 = Out_Diffusion4_g170686;
				{
				Data3_g170687.Dummy = In_Dummy3_g170687;
				Data3_g170687.Albedo = In_Albedo3_g170687;
				Data3_g170687.AlbedoRaw = In_AlbedoRaw3_g170687;
				Data3_g170687.NormalTS = In_NormalTS3_g170687;
				Data3_g170687.NormalWS = In_NormalWS3_g170687;
				Data3_g170687.Shader = In_Shader3_g170687;
				Data3_g170687.Emissive= In_Emissive3_g170687;
				Data3_g170687.MultiMask = In_MultiMask3_g170687;
				Data3_g170687.Grayscale = In_Grayscale3_g170687;
				Data3_g170687.Luminosity = In_Luminosity3_g170687;
				Data3_g170687.AlphaClip = In_AlphaClip3_g170687;
				Data3_g170687.AlphaFade = In_AlphaFade3_g170687;
				Data3_g170687.Translucency = In_Translucency3_g170687;
				Data3_g170687.Transmission = In_Transmission3_g170687;
				Data3_g170687.Thickness = In_Thickness3_g170687;
				Data3_g170687.Diffusion = In_Diffusion3_g170687;
				}
				TVEVisualData Data4_g170789 = Data3_g170687;
				float Out_Dummy4_g170789 = 0;
				float3 Out_Albedo4_g170789 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170789 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170789 = float2( 0,0 );
				float3 Out_NormalWS4_g170789 = float3( 0,0,0 );
				float4 Out_Shader4_g170789 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170789 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170789 = 0;
				float Out_Grayscale4_g170789 = 0;
				float Out_Luminosity4_g170789 = 0;
				float Out_AlphaClip4_g170789 = 0;
				float Out_AlphaFade4_g170789 = 0;
				float3 Out_Translucency4_g170789 = float3( 0,0,0 );
				float Out_Transmission4_g170789 = 0;
				float Out_Thickness4_g170789 = 0;
				float Out_Diffusion4_g170789 = 0;
				{
				Out_Dummy4_g170789 = Data4_g170789.Dummy;
				Out_Albedo4_g170789 = Data4_g170789.Albedo;
				Out_AlbedoRaw4_g170789 = Data4_g170789.AlbedoRaw;
				Out_NormalTS4_g170789 = Data4_g170789.NormalTS;
				Out_NormalWS4_g170789 = Data4_g170789.NormalWS;
				Out_Shader4_g170789 = Data4_g170789.Shader;
				Out_Emissive4_g170789= Data4_g170789.Emissive;
				Out_MultiMask4_g170789 = Data4_g170789.MultiMask;
				Out_Grayscale4_g170789 = Data4_g170789.Grayscale;
				Out_Luminosity4_g170789= Data4_g170789.Luminosity;
				Out_AlphaClip4_g170789 = Data4_g170789.AlphaClip;
				Out_AlphaFade4_g170789 = Data4_g170789.AlphaFade;
				Out_Translucency4_g170789 = Data4_g170789.Translucency;
				Out_Transmission4_g170789 = Data4_g170789.Transmission;
				Out_Thickness4_g170789 = Data4_g170789.Thickness;
				Out_Diffusion4_g170789 = Data4_g170789.Diffusion;
				}
				half3 Visual_Albedo127_g170788 = Out_Albedo4_g170789;
				TVEModelData Data15_g170796 = Data16_g170483;
				float Out_Dummy15_g170796 = 0;
				float3 Out_PositionWS15_g170796 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170796 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170796 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170796 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170796 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170796 = float3( 0,0,0 );
				float4 Out_VertexData15_g170796 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170796 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170796 = Data15_g170796.Dummy;
				Out_PositionWS15_g170796 = Data15_g170796.PositionWS;
				Out_PositionWO15_g170796 = Data15_g170796.PositionWO;
				Out_PivotWS15_g170796 = Data15_g170796.PivotWS;
				Out_PivotWO15_g170796 = Data15_g170796.PivotWO;
				Out_NormalWS15_g170796 = Data15_g170796.NormalWS;
				Out_ViewDirWS15_g170796 = Data15_g170796.ViewDirWS;
				Out_VertexData15_g170796 = Data15_g170796.VertexData;
				Out_BoundsData15_g170796 = Data15_g170796.BoundsData;
				}
				half4 Model_VertexData206_g170788 = Out_VertexData15_g170796;
				float4 break208_g170788 = Model_VertexData206_g170788;
				float4 break33_g170794 = _occlusion_vert_mode;
				float temp_output_30_0_g170794 = ( break208_g170788.x * break33_g170794.x );
				float temp_output_29_0_g170794 = ( break208_g170788.y * break33_g170794.y );
				float temp_output_31_0_g170794 = ( break208_g170788.z * break33_g170794.z );
				float temp_output_28_0_g170794 = ( temp_output_30_0_g170794 + temp_output_29_0_g170794 + temp_output_31_0_g170794 + ( break208_g170788.w * break33_g170794.w ) );
				float temp_output_194_0_g170788 = temp_output_28_0_g170794;
				float clampResult17_g170792 = clamp( temp_output_194_0_g170788 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170797 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170797 = ( clampResult17_g170792 - temp_output_7_0_g170797 );
				float temp_output_6_0_g170793 = saturate( ( ( temp_output_9_0_g170797 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170793 = ( temp_output_6_0_g170793 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170793 = temp_output_6_0_g170793;
				#endif
				half Occlusion_Mask82_g170788 = staticSwitch14_g170793;
				float3 lerpResult75_g170788 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170788);
				float3 lerpResult186_g170788 = lerp( Visual_Albedo127_g170788 , ( Visual_Albedo127_g170788 * lerpResult75_g170788 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170788 = lerpResult186_g170788;
				#else
				float3 staticSwitch171_g170788 = Visual_Albedo127_g170788;
				#endif
				half3 Final_Albedo160_g170788 = staticSwitch171_g170788;
				float3 In_Albedo3_g170790 = Final_Albedo160_g170788;
				float3 In_AlbedoRaw3_g170790 = Final_Albedo160_g170788;
				float2 In_NormalTS3_g170790 = Out_NormalTS4_g170789;
				float3 In_NormalWS3_g170790 = Out_NormalWS4_g170789;
				float4 In_Shader3_g170790 = Out_Shader4_g170789;
				float4 In_Emissive3_g170790 = Out_Emissive4_g170789;
				float3 temp_output_3_0_g170791 = Final_Albedo160_g170788;
				float dotResult20_g170791 = dot( temp_output_3_0_g170791 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170788 = dotResult20_g170791;
				float In_Grayscale3_g170790 = Final_Grayscale164_g170788;
				float clampResult180_g170788 = clamp( saturate( ( Final_Grayscale164_g170788 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170788 = clampResult180_g170788;
				float In_Luminosity3_g170790 = Final_Shading181_g170788;
				float In_MultiMask3_g170790 = Out_MultiMask4_g170789;
				float In_AlphaClip3_g170790 = Out_AlphaClip4_g170789;
				float In_AlphaFade3_g170790 = Out_AlphaFade4_g170789;
				float3 In_Translucency3_g170790 = Out_Translucency4_g170789;
				float In_Transmission3_g170790 = Out_Transmission4_g170789;
				float In_Thickness3_g170790 = Out_Thickness4_g170789;
				float In_Diffusion3_g170790 = Out_Diffusion4_g170789;
				{
				Data3_g170790.Dummy = In_Dummy3_g170790;
				Data3_g170790.Albedo = In_Albedo3_g170790;
				Data3_g170790.AlbedoRaw = In_AlbedoRaw3_g170790;
				Data3_g170790.NormalTS = In_NormalTS3_g170790;
				Data3_g170790.NormalWS = In_NormalWS3_g170790;
				Data3_g170790.Shader = In_Shader3_g170790;
				Data3_g170790.Emissive= In_Emissive3_g170790;
				Data3_g170790.MultiMask = In_MultiMask3_g170790;
				Data3_g170790.Grayscale = In_Grayscale3_g170790;
				Data3_g170790.Luminosity = In_Luminosity3_g170790;
				Data3_g170790.AlphaClip = In_AlphaClip3_g170790;
				Data3_g170790.AlphaFade = In_AlphaFade3_g170790;
				Data3_g170790.Translucency = In_Translucency3_g170790;
				Data3_g170790.Transmission = In_Transmission3_g170790;
				Data3_g170790.Thickness = In_Thickness3_g170790;
				Data3_g170790.Diffusion = In_Diffusion3_g170790;
				}
				TVEVisualData Data4_g170800 = Data3_g170790;
				float Out_Dummy4_g170800 = 0;
				float3 Out_Albedo4_g170800 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170800 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170800 = float2( 0,0 );
				float3 Out_NormalWS4_g170800 = float3( 0,0,0 );
				float4 Out_Shader4_g170800 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170800 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170800 = 0;
				float Out_Grayscale4_g170800 = 0;
				float Out_Luminosity4_g170800 = 0;
				float Out_AlphaClip4_g170800 = 0;
				float Out_AlphaFade4_g170800 = 0;
				float3 Out_Translucency4_g170800 = float3( 0,0,0 );
				float Out_Transmission4_g170800 = 0;
				float Out_Thickness4_g170800 = 0;
				float Out_Diffusion4_g170800 = 0;
				{
				Out_Dummy4_g170800 = Data4_g170800.Dummy;
				Out_Albedo4_g170800 = Data4_g170800.Albedo;
				Out_AlbedoRaw4_g170800 = Data4_g170800.AlbedoRaw;
				Out_NormalTS4_g170800 = Data4_g170800.NormalTS;
				Out_NormalWS4_g170800 = Data4_g170800.NormalWS;
				Out_Shader4_g170800 = Data4_g170800.Shader;
				Out_Emissive4_g170800= Data4_g170800.Emissive;
				Out_MultiMask4_g170800 = Data4_g170800.MultiMask;
				Out_Grayscale4_g170800 = Data4_g170800.Grayscale;
				Out_Luminosity4_g170800= Data4_g170800.Luminosity;
				Out_AlphaClip4_g170800 = Data4_g170800.AlphaClip;
				Out_AlphaFade4_g170800 = Data4_g170800.AlphaFade;
				Out_Translucency4_g170800 = Data4_g170800.Translucency;
				Out_Transmission4_g170800 = Data4_g170800.Transmission;
				Out_Thickness4_g170800 = Data4_g170800.Thickness;
				Out_Diffusion4_g170800 = Data4_g170800.Diffusion;
				}
				half3 Visual_Albedo127_g170798 = Out_Albedo4_g170800;
				TVEModelData Data15_g170806 = Data16_g170483;
				float Out_Dummy15_g170806 = 0;
				float3 Out_PositionWS15_g170806 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170806 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170806 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170806 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170806 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170806 = float3( 0,0,0 );
				float4 Out_VertexData15_g170806 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170806 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170806 = Data15_g170806.Dummy;
				Out_PositionWS15_g170806 = Data15_g170806.PositionWS;
				Out_PositionWO15_g170806 = Data15_g170806.PositionWO;
				Out_PivotWS15_g170806 = Data15_g170806.PivotWS;
				Out_PivotWO15_g170806 = Data15_g170806.PivotWO;
				Out_NormalWS15_g170806 = Data15_g170806.NormalWS;
				Out_ViewDirWS15_g170806 = Data15_g170806.ViewDirWS;
				Out_VertexData15_g170806 = Data15_g170806.VertexData;
				Out_BoundsData15_g170806 = Data15_g170806.BoundsData;
				}
				half4 Model_VertexData224_g170798 = Out_VertexData15_g170806;
				float4 break226_g170798 = Model_VertexData224_g170798;
				float4 break33_g170799 = _gradient_vert_mode;
				float temp_output_30_0_g170799 = ( break226_g170798.x * break33_g170799.x );
				float temp_output_29_0_g170799 = ( break226_g170798.y * break33_g170799.y );
				float temp_output_31_0_g170799 = ( break226_g170798.z * break33_g170799.z );
				float temp_output_28_0_g170799 = ( temp_output_30_0_g170799 + temp_output_29_0_g170799 + temp_output_31_0_g170799 + ( break226_g170798.w * break33_g170799.w ) );
				float temp_output_211_0_g170798 = temp_output_28_0_g170799;
				float clampResult17_g170804 = clamp( temp_output_211_0_g170798 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170807 = _GradientMeshRemap.x;
				float temp_output_9_0_g170807 = ( clampResult17_g170804 - temp_output_7_0_g170807 );
				float temp_output_6_0_g170805 = saturate( ( ( temp_output_9_0_g170807 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170805 = ( temp_output_6_0_g170805 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170805 = temp_output_6_0_g170805;
				#endif
				half Gradient_VertMask82_g170798 = staticSwitch14_g170805;
				half Gradient_Mask200_g170798 = Gradient_VertMask82_g170798;
				float3 lerpResult75_g170798 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170798);
				float temp_output_162_11_g170798 = Out_MultiMask4_g170800;
				half Visual_MultiMask196_g170798 = temp_output_162_11_g170798;
				float lerpResult190_g170798 = lerp( 1.0 , Visual_MultiMask196_g170798 , _GradientMultiValue);
				half Gradient_MultiMask194_g170798 = lerpResult190_g170798;
				float3 lerpResult186_g170798 = lerp( Visual_Albedo127_g170798 , ( Visual_Albedo127_g170798 * lerpResult75_g170798 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170798 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170798 = lerpResult186_g170798;
				#else
				float3 staticSwitch171_g170798 = Visual_Albedo127_g170798;
				#endif
				half3 Final_Albedo160_g170798 = staticSwitch171_g170798;
				float3 In_Albedo3_g170801 = Final_Albedo160_g170798;
				float3 In_AlbedoRaw3_g170801 = Final_Albedo160_g170798;
				float2 In_NormalTS3_g170801 = Out_NormalTS4_g170800;
				float3 In_NormalWS3_g170801 = Out_NormalWS4_g170800;
				float4 In_Shader3_g170801 = Out_Shader4_g170800;
				float4 In_Emissive3_g170801 = Out_Emissive4_g170800;
				float3 temp_output_3_0_g170802 = Final_Albedo160_g170798;
				float dotResult20_g170802 = dot( temp_output_3_0_g170802 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170798 = dotResult20_g170802;
				float In_Grayscale3_g170801 = Final_Grayscale164_g170798;
				float clampResult180_g170798 = clamp( saturate( ( Final_Grayscale164_g170798 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170798 = clampResult180_g170798;
				float In_Luminosity3_g170801 = Final_Luminosity181_g170798;
				float In_MultiMask3_g170801 = temp_output_162_11_g170798;
				float In_AlphaClip3_g170801 = Out_AlphaClip4_g170800;
				float In_AlphaFade3_g170801 = Out_AlphaFade4_g170800;
				float3 In_Translucency3_g170801 = Out_Translucency4_g170800;
				float In_Transmission3_g170801 = Out_Transmission4_g170800;
				float In_Thickness3_g170801 = Out_Thickness4_g170800;
				float In_Diffusion3_g170801 = Out_Diffusion4_g170800;
				{
				Data3_g170801.Dummy = In_Dummy3_g170801;
				Data3_g170801.Albedo = In_Albedo3_g170801;
				Data3_g170801.AlbedoRaw = In_AlbedoRaw3_g170801;
				Data3_g170801.NormalTS = In_NormalTS3_g170801;
				Data3_g170801.NormalWS = In_NormalWS3_g170801;
				Data3_g170801.Shader = In_Shader3_g170801;
				Data3_g170801.Emissive= In_Emissive3_g170801;
				Data3_g170801.MultiMask = In_MultiMask3_g170801;
				Data3_g170801.Grayscale = In_Grayscale3_g170801;
				Data3_g170801.Luminosity = In_Luminosity3_g170801;
				Data3_g170801.AlphaClip = In_AlphaClip3_g170801;
				Data3_g170801.AlphaFade = In_AlphaFade3_g170801;
				Data3_g170801.Translucency = In_Translucency3_g170801;
				Data3_g170801.Transmission = In_Transmission3_g170801;
				Data3_g170801.Thickness = In_Thickness3_g170801;
				Data3_g170801.Diffusion = In_Diffusion3_g170801;
				}
				TVEVisualData Data4_g170810 = Data3_g170801;
				float Out_Dummy4_g170810 = 0;
				float3 Out_Albedo4_g170810 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170810 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170810 = float2( 0,0 );
				float3 Out_NormalWS4_g170810 = float3( 0,0,0 );
				float4 Out_Shader4_g170810 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170810 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170810 = 0;
				float Out_Grayscale4_g170810 = 0;
				float Out_Luminosity4_g170810 = 0;
				float Out_AlphaClip4_g170810 = 0;
				float Out_AlphaFade4_g170810 = 0;
				float3 Out_Translucency4_g170810 = float3( 0,0,0 );
				float Out_Transmission4_g170810 = 0;
				float Out_Thickness4_g170810 = 0;
				float Out_Diffusion4_g170810 = 0;
				{
				Out_Dummy4_g170810 = Data4_g170810.Dummy;
				Out_Albedo4_g170810 = Data4_g170810.Albedo;
				Out_AlbedoRaw4_g170810 = Data4_g170810.AlbedoRaw;
				Out_NormalTS4_g170810 = Data4_g170810.NormalTS;
				Out_NormalWS4_g170810 = Data4_g170810.NormalWS;
				Out_Shader4_g170810 = Data4_g170810.Shader;
				Out_Emissive4_g170810= Data4_g170810.Emissive;
				Out_MultiMask4_g170810 = Data4_g170810.MultiMask;
				Out_Grayscale4_g170810 = Data4_g170810.Grayscale;
				Out_Luminosity4_g170810= Data4_g170810.Luminosity;
				Out_AlphaClip4_g170810 = Data4_g170810.AlphaClip;
				Out_AlphaFade4_g170810 = Data4_g170810.AlphaFade;
				Out_Translucency4_g170810 = Data4_g170810.Translucency;
				Out_Transmission4_g170810 = Data4_g170810.Transmission;
				Out_Thickness4_g170810 = Data4_g170810.Thickness;
				Out_Diffusion4_g170810 = Data4_g170810.Diffusion;
				}
				half3 Visual_Albedo127_g170808 = Out_Albedo4_g170810;
				TVEModelData Data15_g170815 = Data16_g170483;
				float Out_Dummy15_g170815 = 0;
				float3 Out_PositionWS15_g170815 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170815 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170815 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170815 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170815 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170815 = float3( 0,0,0 );
				float4 Out_VertexData15_g170815 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170815 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170815 = Data15_g170815.Dummy;
				Out_PositionWS15_g170815 = Data15_g170815.PositionWS;
				Out_PositionWO15_g170815 = Data15_g170815.PositionWO;
				Out_PivotWS15_g170815 = Data15_g170815.PivotWS;
				Out_PivotWO15_g170815 = Data15_g170815.PivotWO;
				Out_NormalWS15_g170815 = Data15_g170815.NormalWS;
				Out_ViewDirWS15_g170815 = Data15_g170815.ViewDirWS;
				Out_VertexData15_g170815 = Data15_g170815.VertexData;
				Out_BoundsData15_g170815 = Data15_g170815.BoundsData;
				}
				half3 Model_PositionWO224_g170808 = Out_PositionWO15_g170815;
				half3 Model_PivotWO239_g170808 = Out_PivotWO15_g170815;
				float3 lerpResult242_g170808 = lerp( Model_PositionWO224_g170808 , Model_PivotWO239_g170808 , _VariationNoisePivotValue);
				float4 tex3DNode60_g170812 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170808 * ( _VariationNoiseTillingValue * 0.01 ) ) );
				float clampResult17_g170814 = clamp( tex3DNode60_g170812.r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170816 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170816 = ( clampResult17_g170814 - temp_output_7_0_g170816 );
				float temp_output_238_0_g170808 = saturate( ( ( temp_output_9_0_g170816 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170808 = temp_output_238_0_g170808;
				half Variaton_Mask200_g170808 = Variaton_NoiseMask82_g170808;
				float3 lerpResult75_g170808 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170808);
				float temp_output_162_11_g170808 = Out_MultiMask4_g170810;
				half Visual_MultiMask196_g170808 = temp_output_162_11_g170808;
				float lerpResult190_g170808 = lerp( 1.0 , Visual_MultiMask196_g170808 , _VariationMultiValue);
				half Variaton_MultiMask194_g170808 = lerpResult190_g170808;
				float3 lerpResult186_g170808 = lerp( Visual_Albedo127_g170808 , ( Visual_Albedo127_g170808 * lerpResult75_g170808 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170808 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170808 = lerpResult186_g170808;
				#else
				float3 staticSwitch171_g170808 = Visual_Albedo127_g170808;
				#endif
				half3 Final_Albedo160_g170808 = staticSwitch171_g170808;
				float3 In_Albedo3_g170811 = Final_Albedo160_g170808;
				float3 In_AlbedoRaw3_g170811 = Final_Albedo160_g170808;
				float2 In_NormalTS3_g170811 = Out_NormalTS4_g170810;
				float3 In_NormalWS3_g170811 = Out_NormalWS4_g170810;
				float4 In_Shader3_g170811 = Out_Shader4_g170810;
				float4 In_Emissive3_g170811 = Out_Emissive4_g170810;
				float3 temp_output_3_0_g170809 = Final_Albedo160_g170808;
				float dotResult20_g170809 = dot( temp_output_3_0_g170809 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170808 = dotResult20_g170809;
				float In_Grayscale3_g170811 = Final_Grayscale164_g170808;
				float clampResult180_g170808 = clamp( saturate( ( Final_Grayscale164_g170808 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170808 = clampResult180_g170808;
				float In_Luminosity3_g170811 = Final_Luminosity181_g170808;
				float In_MultiMask3_g170811 = temp_output_162_11_g170808;
				float In_AlphaClip3_g170811 = Out_AlphaClip4_g170810;
				float In_AlphaFade3_g170811 = Out_AlphaFade4_g170810;
				float3 In_Translucency3_g170811 = Out_Translucency4_g170810;
				float In_Transmission3_g170811 = Out_Transmission4_g170810;
				float In_Thickness3_g170811 = Out_Thickness4_g170810;
				float In_Diffusion3_g170811 = Out_Diffusion4_g170810;
				{
				Data3_g170811.Dummy = In_Dummy3_g170811;
				Data3_g170811.Albedo = In_Albedo3_g170811;
				Data3_g170811.AlbedoRaw = In_AlbedoRaw3_g170811;
				Data3_g170811.NormalTS = In_NormalTS3_g170811;
				Data3_g170811.NormalWS = In_NormalWS3_g170811;
				Data3_g170811.Shader = In_Shader3_g170811;
				Data3_g170811.Emissive= In_Emissive3_g170811;
				Data3_g170811.MultiMask = In_MultiMask3_g170811;
				Data3_g170811.Grayscale = In_Grayscale3_g170811;
				Data3_g170811.Luminosity = In_Luminosity3_g170811;
				Data3_g170811.AlphaClip = In_AlphaClip3_g170811;
				Data3_g170811.AlphaFade = In_AlphaFade3_g170811;
				Data3_g170811.Translucency = In_Translucency3_g170811;
				Data3_g170811.Transmission = In_Transmission3_g170811;
				Data3_g170811.Thickness = In_Thickness3_g170811;
				Data3_g170811.Diffusion = In_Diffusion3_g170811;
				}
				TVEVisualData Data4_g170823 = Data3_g170811;
				float Out_Dummy4_g170823 = 0;
				float3 Out_Albedo4_g170823 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170823 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170823 = float2( 0,0 );
				float3 Out_NormalWS4_g170823 = float3( 0,0,0 );
				float4 Out_Shader4_g170823 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170823 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170823 = 0;
				float Out_Grayscale4_g170823 = 0;
				float Out_Luminosity4_g170823 = 0;
				float Out_AlphaClip4_g170823 = 0;
				float Out_AlphaFade4_g170823 = 0;
				float3 Out_Translucency4_g170823 = float3( 0,0,0 );
				float Out_Transmission4_g170823 = 0;
				float Out_Thickness4_g170823 = 0;
				float Out_Diffusion4_g170823 = 0;
				{
				Out_Dummy4_g170823 = Data4_g170823.Dummy;
				Out_Albedo4_g170823 = Data4_g170823.Albedo;
				Out_AlbedoRaw4_g170823 = Data4_g170823.AlbedoRaw;
				Out_NormalTS4_g170823 = Data4_g170823.NormalTS;
				Out_NormalWS4_g170823 = Data4_g170823.NormalWS;
				Out_Shader4_g170823 = Data4_g170823.Shader;
				Out_Emissive4_g170823= Data4_g170823.Emissive;
				Out_MultiMask4_g170823 = Data4_g170823.MultiMask;
				Out_Grayscale4_g170823 = Data4_g170823.Grayscale;
				Out_Luminosity4_g170823= Data4_g170823.Luminosity;
				Out_AlphaClip4_g170823 = Data4_g170823.AlphaClip;
				Out_AlphaFade4_g170823 = Data4_g170823.AlphaFade;
				Out_Translucency4_g170823 = Data4_g170823.Translucency;
				Out_Transmission4_g170823 = Data4_g170823.Transmission;
				Out_Thickness4_g170823 = Data4_g170823.Thickness;
				Out_Diffusion4_g170823 = Data4_g170823.Diffusion;
				}
				half3 Visual_Albedo139_g170818 = Out_Albedo4_g170823;
				float temp_output_200_12_g170818 = Out_Grayscale4_g170823;
				half Visual_Grayscale150_g170818 = temp_output_200_12_g170818;
				float3 temp_cast_33 = (Visual_Grayscale150_g170818).xxx;
				TVEGlobalData Data15_g170819 = Data204_g170496;
				float Out_Dummy15_g170819 = 0;
				float4 Out_CoatParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170819 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170819 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170819 = Data15_g170819.Dummy;
				Out_CoatParams15_g170819 = Data15_g170819.CoatParams;
				Out_PaintParams15_g170819 = Data15_g170819.PaintParams;
				Out_GlowParams15_g170819 = Data15_g170819.GlowParams;
				Out_AtmoParams15_g170819= Data15_g170819.AtmoParams;
				Out_FadeParams15_g170819= Data15_g170819.FadeParams;
				Out_FormParams15_g170819 = Data15_g170819.FormParams;
				Out_FlowParams15_g170819 = Data15_g170819.FlowParams;
				}
				half4 Global_PaintParams209_g170818 = Out_PaintParams15_g170819;
				float4 temp_output_6_0_g170840 = Global_PaintParams209_g170818;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170840 = ( temp_output_6_0_g170840 + ( _TintingElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170840 = temp_output_6_0_g170840;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170818 = staticSwitch14_g170840;
				#else
				float4 staticSwitch283_g170818 = TVE_PaintParams;
				#endif
				float lerpResult412_g170818 = lerp( 1.0 , ( saturate( (staticSwitch283_g170818).w ) * TVE_IsEnabled ) , _TintingGlobalValue);
				half Tinting_GlobalValue285_g170818 = lerpResult412_g170818;
				float3 lerpResult368_g170818 = lerp( Visual_Albedo139_g170818 , temp_cast_33 , ( Tinting_GlobalValue285_g170818 * _TintingGrayValue ));
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170833 = 2.0;
				#else
				float staticSwitch1_g170833 = 4.594794;
				#endif
				half3 Tinting_GlobalColor290_g170818 = (staticSwitch283_g170818).xyz;
				float temp_output_200_11_g170818 = Out_MultiMask4_g170823;
				half Visual_MultiMask181_g170818 = temp_output_200_11_g170818;
				float lerpResult147_g170818 = lerp( 1.0 , Visual_MultiMask181_g170818 , _TintingMultiValue);
				half Tinting_MutiMask121_g170818 = lerpResult147_g170818;
				half Tinting_TexMask385_g170818 = 1.0;
				float temp_output_200_15_g170818 = Out_Luminosity4_g170823;
				half Visual_Luminosity257_g170818 = temp_output_200_15_g170818;
				float clampResult17_g170830 = clamp( Visual_Luminosity257_g170818 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170835 = _TintingLumaRemap.x;
				float temp_output_9_0_g170835 = ( clampResult17_g170830 - temp_output_7_0_g170835 );
				float lerpResult228_g170818 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170835 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170818 = lerpResult228_g170818;
				TVEModelData Data15_g170824 = Data16_g170483;
				float Out_Dummy15_g170824 = 0;
				float3 Out_PositionWS15_g170824 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170824 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170824 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170824 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170824 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170824 = float3( 0,0,0 );
				float4 Out_VertexData15_g170824 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170824 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170824 = Data15_g170824.Dummy;
				Out_PositionWS15_g170824 = Data15_g170824.PositionWS;
				Out_PositionWO15_g170824 = Data15_g170824.PositionWO;
				Out_PivotWS15_g170824 = Data15_g170824.PivotWS;
				Out_PivotWO15_g170824 = Data15_g170824.PivotWO;
				Out_NormalWS15_g170824 = Data15_g170824.NormalWS;
				Out_ViewDirWS15_g170824 = Data15_g170824.ViewDirWS;
				Out_VertexData15_g170824 = Data15_g170824.VertexData;
				Out_BoundsData15_g170824 = Data15_g170824.BoundsData;
				}
				half4 Model_VertexMasks307_g170818 = Out_VertexData15_g170824;
				float4 break311_g170818 = Model_VertexMasks307_g170818;
				float4 break33_g170827 = _tinting_vert_mode;
				float temp_output_30_0_g170827 = ( break311_g170818.x * break33_g170827.x );
				float temp_output_29_0_g170827 = ( break311_g170818.y * break33_g170827.y );
				float temp_output_31_0_g170827 = ( break311_g170818.z * break33_g170827.z );
				float temp_output_28_0_g170827 = ( temp_output_30_0_g170827 + temp_output_29_0_g170827 + temp_output_31_0_g170827 + ( break311_g170818.w * break33_g170827.w ) );
				float clampResult17_g170829 = clamp( temp_output_28_0_g170827 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170836 = _TintingMeshRemap.x;
				float temp_output_9_0_g170836 = ( clampResult17_g170829 - temp_output_7_0_g170836 );
				float lerpResult370_g170818 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170836 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170831 = lerpResult370_g170818;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170831 = ( temp_output_6_0_g170831 + ( _TintingMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170831 = temp_output_6_0_g170831;
				#endif
				half Tinting_VertMask309_g170818 = staticSwitch14_g170831;
				half Tinting_NoiseMask213_g170818 = 1.0;
				half Custom_Mask345_g170818 = 1.0;
				float temp_output_7_0_g170839 = _TintingBlendRemap.x;
				float temp_output_9_0_g170839 = ( ( _TintingIntensityValue * Tinting_MutiMask121_g170818 * Tinting_TexMask385_g170818 * Tinting_LumaMask153_g170818 * Tinting_VertMask309_g170818 * Tinting_NoiseMask213_g170818 * Tinting_GlobalValue285_g170818 * Custom_Mask345_g170818 ) - temp_output_7_0_g170839 );
				half Tinting_Mask242_g170818 = ( saturate( ( ( temp_output_9_0_g170839 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170818 = lerp( Visual_Albedo139_g170818 , ( lerpResult368_g170818 * staticSwitch1_g170833 * Tinting_GlobalColor290_g170818 * (_TintingColor).rgb ) , Tinting_Mask242_g170818);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170818 = lerpResult90_g170818;
				#else
				float3 staticSwitch286_g170818 = Visual_Albedo139_g170818;
				#endif
				half3 Final_Albedo97_g170818 = staticSwitch286_g170818;
				float3 In_Albedo3_g170822 = Final_Albedo97_g170818;
				float3 In_AlbedoRaw3_g170822 = Out_AlbedoRaw4_g170823;
				float2 In_NormalTS3_g170822 = Out_NormalTS4_g170823;
				float3 In_NormalWS3_g170822 = Out_NormalWS4_g170823;
				float4 In_Shader3_g170822 = Out_Shader4_g170823;
				float4 In_Emissive3_g170822 = Out_Emissive4_g170823;
				float In_Grayscale3_g170822 = temp_output_200_12_g170818;
				float In_Luminosity3_g170822 = temp_output_200_15_g170818;
				float In_MultiMask3_g170822 = temp_output_200_11_g170818;
				float In_AlphaClip3_g170822 = Out_AlphaClip4_g170823;
				float In_AlphaFade3_g170822 = Out_AlphaFade4_g170823;
				float3 In_Translucency3_g170822 = Out_Translucency4_g170823;
				float In_Transmission3_g170822 = Out_Transmission4_g170823;
				float In_Thickness3_g170822 = Out_Thickness4_g170823;
				float In_Diffusion3_g170822 = Out_Diffusion4_g170823;
				{
				Data3_g170822.Dummy = In_Dummy3_g170822;
				Data3_g170822.Albedo = In_Albedo3_g170822;
				Data3_g170822.AlbedoRaw = In_AlbedoRaw3_g170822;
				Data3_g170822.NormalTS = In_NormalTS3_g170822;
				Data3_g170822.NormalWS = In_NormalWS3_g170822;
				Data3_g170822.Shader = In_Shader3_g170822;
				Data3_g170822.Emissive= In_Emissive3_g170822;
				Data3_g170822.MultiMask = In_MultiMask3_g170822;
				Data3_g170822.Grayscale = In_Grayscale3_g170822;
				Data3_g170822.Luminosity = In_Luminosity3_g170822;
				Data3_g170822.AlphaClip = In_AlphaClip3_g170822;
				Data3_g170822.AlphaFade = In_AlphaFade3_g170822;
				Data3_g170822.Translucency = In_Translucency3_g170822;
				Data3_g170822.Transmission = In_Transmission3_g170822;
				Data3_g170822.Thickness = In_Thickness3_g170822;
				Data3_g170822.Diffusion = In_Diffusion3_g170822;
				}
				TVEVisualData Data4_g170844 = Data3_g170822;
				float Out_Dummy4_g170844 = 0;
				float3 Out_Albedo4_g170844 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170844 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170844 = float2( 0,0 );
				float3 Out_NormalWS4_g170844 = float3( 0,0,0 );
				float4 Out_Shader4_g170844 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170844 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170844 = 0;
				float Out_Grayscale4_g170844 = 0;
				float Out_Luminosity4_g170844 = 0;
				float Out_AlphaClip4_g170844 = 0;
				float Out_AlphaFade4_g170844 = 0;
				float3 Out_Translucency4_g170844 = float3( 0,0,0 );
				float Out_Transmission4_g170844 = 0;
				float Out_Thickness4_g170844 = 0;
				float Out_Diffusion4_g170844 = 0;
				{
				Out_Dummy4_g170844 = Data4_g170844.Dummy;
				Out_Albedo4_g170844 = Data4_g170844.Albedo;
				Out_AlbedoRaw4_g170844 = Data4_g170844.AlbedoRaw;
				Out_NormalTS4_g170844 = Data4_g170844.NormalTS;
				Out_NormalWS4_g170844 = Data4_g170844.NormalWS;
				Out_Shader4_g170844 = Data4_g170844.Shader;
				Out_Emissive4_g170844= Data4_g170844.Emissive;
				Out_MultiMask4_g170844 = Data4_g170844.MultiMask;
				Out_Grayscale4_g170844 = Data4_g170844.Grayscale;
				Out_Luminosity4_g170844= Data4_g170844.Luminosity;
				Out_AlphaClip4_g170844 = Data4_g170844.AlphaClip;
				Out_AlphaFade4_g170844 = Data4_g170844.AlphaFade;
				Out_Translucency4_g170844 = Data4_g170844.Translucency;
				Out_Transmission4_g170844 = Data4_g170844.Transmission;
				Out_Thickness4_g170844 = Data4_g170844.Thickness;
				Out_Diffusion4_g170844 = Data4_g170844.Diffusion;
				}
				half3 Visual_Albedo292_g170842 = Out_Albedo4_g170844;
				float temp_output_280_12_g170842 = Out_Grayscale4_g170844;
				half Visual_Grayscale308_g170842 = temp_output_280_12_g170842;
				float3 temp_cast_34 = (Visual_Grayscale308_g170842).xxx;
				TVEGlobalData Data15_g170843 = Data204_g170496;
				float Out_Dummy15_g170843 = 0;
				float4 Out_CoatParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170843 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170843 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170843 = Data15_g170843.Dummy;
				Out_CoatParams15_g170843 = Data15_g170843.CoatParams;
				Out_PaintParams15_g170843 = Data15_g170843.PaintParams;
				Out_GlowParams15_g170843 = Data15_g170843.GlowParams;
				Out_AtmoParams15_g170843= Data15_g170843.AtmoParams;
				Out_FadeParams15_g170843= Data15_g170843.FadeParams;
				Out_FormParams15_g170843 = Data15_g170843.FormParams;
				Out_FlowParams15_g170843 = Data15_g170843.FlowParams;
				}
				half4 Global_AtmoParams314_g170842 = Out_AtmoParams15_g170843;
				float temp_output_6_0_g170863 = (Global_AtmoParams314_g170842).x;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170863 = ( temp_output_6_0_g170863 + ( _DrynessElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170863 = temp_output_6_0_g170863;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170842 = staticSwitch14_g170863;
				#else
				float staticSwitch351_g170842 = TVE_AtmoData.x;
				#endif
				float lerpResult505_g170842 = lerp( 1.0 , ( staticSwitch351_g170842 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalMask352_g170842 = lerpResult505_g170842;
				float3 lerpResult485_g170842 = lerp( Visual_Albedo292_g170842 , temp_cast_34 , ( Dryness_GlobalMask352_g170842 * _DrynessGrayValue ));
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170857 = 2.0;
				#else
				float staticSwitch1_g170857 = 4.594794;
				#endif
				half Dryness_TexMask478_g170842 = 1.0;
				float temp_output_280_11_g170842 = Out_MultiMask4_g170844;
				half Visual_MultiMask310_g170842 = temp_output_280_11_g170842;
				float lerpResult283_g170842 = lerp( 1.0 , Visual_MultiMask310_g170842 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170842 = lerpResult283_g170842;
				float temp_output_280_15_g170842 = Out_Luminosity4_g170844;
				half Visual_Luminosity309_g170842 = temp_output_280_15_g170842;
				float clampResult17_g170854 = clamp( Visual_Luminosity309_g170842 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170859 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170859 = ( clampResult17_g170854 - temp_output_7_0_g170859 );
				float lerpResult295_g170842 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170859 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170842 = lerpResult295_g170842;
				TVEModelData Data15_g170848 = Data16_g170483;
				float Out_Dummy15_g170848 = 0;
				float3 Out_PositionWS15_g170848 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170848 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170848 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170848 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170848 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170848 = float3( 0,0,0 );
				float4 Out_VertexData15_g170848 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170848 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170848 = Data15_g170848.Dummy;
				Out_PositionWS15_g170848 = Data15_g170848.PositionWS;
				Out_PositionWO15_g170848 = Data15_g170848.PositionWO;
				Out_PivotWS15_g170848 = Data15_g170848.PivotWS;
				Out_PivotWO15_g170848 = Data15_g170848.PivotWO;
				Out_NormalWS15_g170848 = Data15_g170848.NormalWS;
				Out_ViewDirWS15_g170848 = Data15_g170848.ViewDirWS;
				Out_VertexData15_g170848 = Data15_g170848.VertexData;
				Out_BoundsData15_g170848 = Data15_g170848.BoundsData;
				}
				half4 Model_VertexMasks386_g170842 = Out_VertexData15_g170848;
				float4 break375_g170842 = Model_VertexMasks386_g170842;
				float4 break33_g170851 = _dryness_vert_mode;
				float temp_output_30_0_g170851 = ( break375_g170842.x * break33_g170851.x );
				float temp_output_29_0_g170851 = ( break375_g170842.y * break33_g170851.y );
				float temp_output_31_0_g170851 = ( break375_g170842.z * break33_g170851.z );
				float temp_output_28_0_g170851 = ( temp_output_30_0_g170851 + temp_output_29_0_g170851 + temp_output_31_0_g170851 + ( break375_g170842.w * break33_g170851.w ) );
				float clampResult17_g170852 = clamp( temp_output_28_0_g170851 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170860 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170860 = ( clampResult17_g170852 - temp_output_7_0_g170860 );
				float lerpResult452_g170842 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170860 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170855 = lerpResult452_g170842;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170855 = ( temp_output_6_0_g170855 + ( _DrynessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170855 = temp_output_6_0_g170855;
				#endif
				half Dryness_VertMask378_g170842 = staticSwitch14_g170855;
				half Dryness_MaskNoise291_g170842 = 1.0;
				half Custom_Mask411_g170842 = 1.0;
				float temp_output_7_0_g170862 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170862 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170842 * Dryness_MultiMask302_g170842 * Dryness_LumaMask301_g170842 * Dryness_VertMask378_g170842 * Dryness_MaskNoise291_g170842 * Dryness_GlobalMask352_g170842 * Custom_Mask411_g170842 ) - temp_output_7_0_g170862 );
				half Dryness_Mask329_g170842 = saturate( ( ( temp_output_9_0_g170862 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170842 = lerp( Visual_Albedo292_g170842 , ( lerpResult485_g170842 * staticSwitch1_g170857 * (_DrynessColor).rgb ) , Dryness_Mask329_g170842);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170842 = lerpResult336_g170842;
				#else
				float3 staticSwitch356_g170842 = Visual_Albedo292_g170842;
				#endif
				half3 Final_Albedo331_g170842 = staticSwitch356_g170842;
				float3 In_Albedo3_g170845 = Final_Albedo331_g170842;
				float3 In_AlbedoRaw3_g170845 = Out_AlbedoRaw4_g170844;
				float2 In_NormalTS3_g170845 = Out_NormalTS4_g170844;
				float3 In_NormalWS3_g170845 = Out_NormalWS4_g170844;
				half4 Visual_Shader415_g170842 = Out_Shader4_g170844;
				float4 break438_g170842 = Visual_Shader415_g170842;
				float4 appendResult439_g170842 = (float4(break438_g170842.x , break438_g170842.y , break438_g170842.z , ( break438_g170842.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170842 = lerp( Visual_Shader415_g170842 , appendResult439_g170842 , Dryness_Mask329_g170842);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170842 = lerpResult427_g170842;
				#else
				float4 staticSwitch426_g170842 = Visual_Shader415_g170842;
				#endif
				half4 Final_Shader433_g170842 = staticSwitch426_g170842;
				float4 In_Shader3_g170845 = Final_Shader433_g170842;
				float4 In_Emissive3_g170845 = Out_Emissive4_g170844;
				float In_Grayscale3_g170845 = temp_output_280_12_g170842;
				float In_Luminosity3_g170845 = temp_output_280_15_g170842;
				float In_MultiMask3_g170845 = temp_output_280_11_g170842;
				float In_AlphaClip3_g170845 = Out_AlphaClip4_g170844;
				float In_AlphaFade3_g170845 = Out_AlphaFade4_g170844;
				float3 In_Translucency3_g170845 = Out_Translucency4_g170844;
				half Visual_Transmission416_g170842 = Out_Transmission4_g170844;
				float lerpResult421_g170842 = lerp( Visual_Transmission416_g170842 , ( Visual_Transmission416_g170842 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170842);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170842 = lerpResult421_g170842;
				#else
				float staticSwitch418_g170842 = Visual_Transmission416_g170842;
				#endif
				half Final_Transmission425_g170842 = staticSwitch418_g170842;
				float In_Transmission3_g170845 = Final_Transmission425_g170842;
				float In_Thickness3_g170845 = Out_Thickness4_g170844;
				float In_Diffusion3_g170845 = Out_Diffusion4_g170844;
				{
				Data3_g170845.Dummy = In_Dummy3_g170845;
				Data3_g170845.Albedo = In_Albedo3_g170845;
				Data3_g170845.AlbedoRaw = In_AlbedoRaw3_g170845;
				Data3_g170845.NormalTS = In_NormalTS3_g170845;
				Data3_g170845.NormalWS = In_NormalWS3_g170845;
				Data3_g170845.Shader = In_Shader3_g170845;
				Data3_g170845.Emissive= In_Emissive3_g170845;
				Data3_g170845.MultiMask = In_MultiMask3_g170845;
				Data3_g170845.Grayscale = In_Grayscale3_g170845;
				Data3_g170845.Luminosity = In_Luminosity3_g170845;
				Data3_g170845.AlphaClip = In_AlphaClip3_g170845;
				Data3_g170845.AlphaFade = In_AlphaFade3_g170845;
				Data3_g170845.Translucency = In_Translucency3_g170845;
				Data3_g170845.Transmission = In_Transmission3_g170845;
				Data3_g170845.Thickness = In_Thickness3_g170845;
				Data3_g170845.Diffusion = In_Diffusion3_g170845;
				}
				TVEVisualData Data4_g170867 = Data3_g170845;
				float Out_Dummy4_g170867 = 0;
				float3 Out_Albedo4_g170867 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170867 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170867 = float2( 0,0 );
				float3 Out_NormalWS4_g170867 = float3( 0,0,0 );
				float4 Out_Shader4_g170867 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170867 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170867 = 0;
				float Out_Grayscale4_g170867 = 0;
				float Out_Luminosity4_g170867 = 0;
				float Out_AlphaClip4_g170867 = 0;
				float Out_AlphaFade4_g170867 = 0;
				float3 Out_Translucency4_g170867 = float3( 0,0,0 );
				float Out_Transmission4_g170867 = 0;
				float Out_Thickness4_g170867 = 0;
				float Out_Diffusion4_g170867 = 0;
				{
				Out_Dummy4_g170867 = Data4_g170867.Dummy;
				Out_Albedo4_g170867 = Data4_g170867.Albedo;
				Out_AlbedoRaw4_g170867 = Data4_g170867.AlbedoRaw;
				Out_NormalTS4_g170867 = Data4_g170867.NormalTS;
				Out_NormalWS4_g170867 = Data4_g170867.NormalWS;
				Out_Shader4_g170867 = Data4_g170867.Shader;
				Out_Emissive4_g170867= Data4_g170867.Emissive;
				Out_MultiMask4_g170867 = Data4_g170867.MultiMask;
				Out_Grayscale4_g170867 = Data4_g170867.Grayscale;
				Out_Luminosity4_g170867= Data4_g170867.Luminosity;
				Out_AlphaClip4_g170867 = Data4_g170867.AlphaClip;
				Out_AlphaFade4_g170867 = Data4_g170867.AlphaFade;
				Out_Translucency4_g170867 = Data4_g170867.Translucency;
				Out_Transmission4_g170867 = Data4_g170867.Transmission;
				Out_Thickness4_g170867 = Data4_g170867.Thickness;
				Out_Diffusion4_g170867 = Data4_g170867.Diffusion;
				}
				half3 Visual_Albedo127_g170866 = Out_Albedo4_g170867;
				float4 vertexToFrag24_g170817 = IN.ase_texcoord9;
				half4 Interp_Data1269 = vertexToFrag24_g170817;
				float clampResult208_g170866 = clamp( (Interp_Data1269).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170866 = ( Visual_Albedo127_g170866 + ( ( Visual_Albedo127_g170866 * Visual_Albedo127_g170866 * 200.0 * _motion_highlight_color ) * clampResult208_g170866 ) );
				#else
				float3 staticSwitch214_g170866 = Visual_Albedo127_g170866;
				#endif
				half3 Final_Albedo160_g170866 = staticSwitch214_g170866;
				float3 In_Albedo3_g170868 = Final_Albedo160_g170866;
				float3 In_AlbedoRaw3_g170868 = Out_AlbedoRaw4_g170867;
				float2 In_NormalTS3_g170868 = Out_NormalTS4_g170867;
				float3 In_NormalWS3_g170868 = Out_NormalWS4_g170867;
				float4 In_Shader3_g170868 = Out_Shader4_g170867;
				float4 In_Emissive3_g170868 = Out_Emissive4_g170867;
				float In_Grayscale3_g170868 = Out_Grayscale4_g170867;
				float In_Luminosity3_g170868 = Out_Luminosity4_g170867;
				float In_MultiMask3_g170868 = Out_MultiMask4_g170867;
				float In_AlphaClip3_g170868 = Out_AlphaClip4_g170867;
				float In_AlphaFade3_g170868 = Out_AlphaFade4_g170867;
				float3 In_Translucency3_g170868 = Out_Translucency4_g170867;
				float In_Transmission3_g170868 = Out_Transmission4_g170867;
				float In_Thickness3_g170868 = Out_Thickness4_g170867;
				float In_Diffusion3_g170868 = Out_Diffusion4_g170867;
				{
				Data3_g170868.Dummy = In_Dummy3_g170868;
				Data3_g170868.Albedo = In_Albedo3_g170868;
				Data3_g170868.AlbedoRaw = In_AlbedoRaw3_g170868;
				Data3_g170868.NormalTS = In_NormalTS3_g170868;
				Data3_g170868.NormalWS = In_NormalWS3_g170868;
				Data3_g170868.Shader = In_Shader3_g170868;
				Data3_g170868.Emissive= In_Emissive3_g170868;
				Data3_g170868.MultiMask = In_MultiMask3_g170868;
				Data3_g170868.Grayscale = In_Grayscale3_g170868;
				Data3_g170868.Luminosity = In_Luminosity3_g170868;
				Data3_g170868.AlphaClip = In_AlphaClip3_g170868;
				Data3_g170868.AlphaFade = In_AlphaFade3_g170868;
				Data3_g170868.Translucency = In_Translucency3_g170868;
				Data3_g170868.Transmission = In_Transmission3_g170868;
				Data3_g170868.Thickness = In_Thickness3_g170868;
				Data3_g170868.Diffusion = In_Diffusion3_g170868;
				}
				TVEVisualData Data4_g170870 = Data3_g170868;
				float Out_Dummy4_g170870 = 0;
				float3 Out_Albedo4_g170870 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170870 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170870 = float2( 0,0 );
				float3 Out_NormalWS4_g170870 = float3( 0,0,0 );
				float4 Out_Shader4_g170870 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170870 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170870 = 0;
				float Out_Grayscale4_g170870 = 0;
				float Out_Luminosity4_g170870 = 0;
				float Out_AlphaClip4_g170870 = 0;
				float Out_AlphaFade4_g170870 = 0;
				float3 Out_Translucency4_g170870 = float3( 0,0,0 );
				float Out_Transmission4_g170870 = 0;
				float Out_Thickness4_g170870 = 0;
				float Out_Diffusion4_g170870 = 0;
				{
				Out_Dummy4_g170870 = Data4_g170870.Dummy;
				Out_Albedo4_g170870 = Data4_g170870.Albedo;
				Out_AlbedoRaw4_g170870 = Data4_g170870.AlbedoRaw;
				Out_NormalTS4_g170870 = Data4_g170870.NormalTS;
				Out_NormalWS4_g170870 = Data4_g170870.NormalWS;
				Out_Shader4_g170870 = Data4_g170870.Shader;
				Out_Emissive4_g170870= Data4_g170870.Emissive;
				Out_MultiMask4_g170870 = Data4_g170870.MultiMask;
				Out_Grayscale4_g170870 = Data4_g170870.Grayscale;
				Out_Luminosity4_g170870= Data4_g170870.Luminosity;
				Out_AlphaClip4_g170870 = Data4_g170870.AlphaClip;
				Out_AlphaFade4_g170870 = Data4_g170870.AlphaFade;
				Out_Translucency4_g170870 = Data4_g170870.Translucency;
				Out_Transmission4_g170870 = Data4_g170870.Transmission;
				Out_Thickness4_g170870 = Data4_g170870.Thickness;
				Out_Diffusion4_g170870 = Data4_g170870.Diffusion;
				}
				half3 Visual_Albedo127_g170869 = Out_Albedo4_g170870;
				float3 temp_output_622_0_g170869 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170873) = _OverlayAlbedoTex;
				float localFilterTexture19_g170885 = ( 0.0 );
				SamplerState SS19_g170885 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170885 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170885 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170885 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170885 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170885 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170885 = SamplerDefault19_g170885;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170885 = SamplerDefault19_g170885;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170885 = SamplerPoint19_g170885;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170885 = SamplerLow19_g170885;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170885 = SamplerMedium19_g170885;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170885 = SamplerHigh19_g170885;
				#endif
				}
				SamplerState Sampler238_g170873 = SS19_g170885;
				float4 temp_output_6_0_g170874 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170874 = ( temp_output_6_0_g170874 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170874 = temp_output_6_0_g170874;
				#endif
				half4 Overlay_Coords639_g170869 = staticSwitch14_g170874;
				float4 temp_output_37_0_g170873 = Overlay_Coords639_g170869;
				half4 Coords238_g170873 = temp_output_37_0_g170873;
				TVEModelData Data15_g170887 = Data16_g170483;
				float Out_Dummy15_g170887 = 0;
				float3 Out_PositionWS15_g170887 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170887 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170887 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170887 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170887 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170887 = float3( 0,0,0 );
				float4 Out_VertexData15_g170887 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170887 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170887 = Data15_g170887.Dummy;
				Out_PositionWS15_g170887 = Data15_g170887.PositionWS;
				Out_PositionWO15_g170887 = Data15_g170887.PositionWO;
				Out_PivotWS15_g170887 = Data15_g170887.PivotWS;
				Out_PivotWO15_g170887 = Data15_g170887.PivotWO;
				Out_NormalWS15_g170887 = Data15_g170887.NormalWS;
				Out_ViewDirWS15_g170887 = Data15_g170887.ViewDirWS;
				Out_VertexData15_g170887 = Data15_g170887.VertexData;
				Out_BoundsData15_g170887 = Data15_g170887.BoundsData;
				}
				half3 Model_PositionWO602_g170869 = Out_PositionWO15_g170887;
				float3 temp_output_279_0_g170873 = Model_PositionWO602_g170869;
				half3 WorldPosition238_g170873 = temp_output_279_0_g170873;
				half4 localSamplePlanar2D238_g170873 = SamplePlanar2D( Texture238_g170873 , Sampler238_g170873 , Coords238_g170873 , WorldPosition238_g170873 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170873) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170873 = SS19_g170885;
				half4 Coords246_g170873 = temp_output_37_0_g170873;
				half3 WorldPosition246_g170873 = temp_output_279_0_g170873;
				half3 Model_NormalWS712_g170869 = Out_NormalWS15_g170887;
				float3 temp_output_280_0_g170873 = Model_NormalWS712_g170869;
				half3 WorldNormal246_g170873 = temp_output_280_0_g170873;
				half4 localSamplePlanar3D246_g170873 = SamplePlanar3D( Texture246_g170873 , Sampler246_g170873 , Coords246_g170873 , WorldPosition246_g170873 , WorldNormal246_g170873 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170873) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170873 = SS19_g170885;
				float4 Coords234_g170873 = temp_output_37_0_g170873;
				float3 WorldPosition234_g170873 = temp_output_279_0_g170873;
				float4 localSampleStochastic2D234_g170873 = SampleStochastic2D( Texture234_g170873 , Sampler234_g170873 , Coords234_g170873 , WorldPosition234_g170873 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170873) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170873 = SS19_g170885;
				half4 Coords263_g170873 = temp_output_37_0_g170873;
				half3 WorldPosition263_g170873 = temp_output_279_0_g170873;
				half3 WorldNormal263_g170873 = temp_output_280_0_g170873;
				half4 localSampleStochastic3D263_g170873 = SampleStochastic3D( Texture263_g170873 , Sampler263_g170873 , Coords263_g170873 , WorldPosition263_g170873 , WorldNormal263_g170873 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170869 = localSamplePlanar2D238_g170873;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170869 = localSamplePlanar3D246_g170873;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170869 = localSampleStochastic2D234_g170873;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170869 = localSampleStochastic3D263_g170873;
				#else
				float4 staticSwitch676_g170869 = localSamplePlanar2D238_g170873;
				#endif
				half3 Overlay_Albedo526_g170869 = (staticSwitch676_g170869).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170869 = ( temp_output_622_0_g170869 * Overlay_Albedo526_g170869 );
				#else
				float3 staticSwitch578_g170869 = temp_output_622_0_g170869;
				#endif
				float3 temp_output_6_0_g170888 = staticSwitch578_g170869;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170888 = ( temp_output_6_0_g170888 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170888 = temp_output_6_0_g170888;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170877) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170877 = sampler_Linear_Repeat;
				float4 appendResult863_g170869 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170877 = appendResult863_g170869;
				half4 Coords246_g170877 = temp_output_37_0_g170877;
				float3 temp_output_279_0_g170877 = Model_PositionWO602_g170869;
				half3 WorldPosition246_g170877 = temp_output_279_0_g170877;
				float3 temp_output_280_0_g170877 = Model_NormalWS712_g170869;
				half3 WorldNormal246_g170877 = temp_output_280_0_g170877;
				half4 localSamplePlanar3D246_g170877 = SamplePlanar3D( Texture246_g170877 , Sampler246_g170877 , Coords246_g170877 , WorldPosition246_g170877 , WorldNormal246_g170877 );
				half Overlay_GlitterTex854_g170869 = (localSamplePlanar3D246_g170877).x;
				float3 ase_positionWS = IN.ase_texcoord11.xyz;
				UNITY_LIGHT_ATTENUATION(ase_atten, IN, ase_positionWS)
				float lerpResult922_g170869 = lerp( 1.0 , ase_atten , _OverlayGlitterAttenValue);
				half3 Model_PositionWS879_g170869 = Out_PositionWS15_g170887;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170869 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170869 * lerpResult922_g170869 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170869 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170869 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170869 = staticSwitch868_g170869;
				half Overlay_TexMask908_g170869 = 1.0;
				float3 temp_output_739_21_g170869 = Out_NormalWS4_g170870;
				half3 Visual_NormalWS749_g170869 = temp_output_739_21_g170869;
				float clampResult17_g170894 = clamp( saturate( (Visual_NormalWS749_g170869).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170898 = _OverlayProjRemap.x;
				float temp_output_9_0_g170898 = ( clampResult17_g170894 - temp_output_7_0_g170898 );
				float lerpResult842_g170869 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170898 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170869 = lerpResult842_g170869;
				float temp_output_739_15_g170869 = Out_Luminosity4_g170870;
				half Visual_Luminosity654_g170869 = temp_output_739_15_g170869;
				float clampResult17_g170902 = clamp( Visual_Luminosity654_g170869 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170903 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170903 = ( clampResult17_g170902 - temp_output_7_0_g170903 );
				float lerpResult587_g170869 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170903 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170869 = lerpResult587_g170869;
				half4 Model_VertexMasks791_g170869 = Out_VertexData15_g170887;
				float4 break792_g170869 = Model_VertexMasks791_g170869;
				float4 break33_g170889 = _overlay_vert_mode;
				float temp_output_30_0_g170889 = ( break792_g170869.x * break33_g170889.x );
				float temp_output_29_0_g170889 = ( break792_g170869.y * break33_g170889.y );
				float temp_output_31_0_g170889 = ( break792_g170869.z * break33_g170889.z );
				float temp_output_28_0_g170889 = ( temp_output_30_0_g170889 + temp_output_29_0_g170889 + temp_output_31_0_g170889 + ( break792_g170869.w * break33_g170889.w ) );
				float clampResult17_g170890 = clamp( temp_output_28_0_g170889 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170899 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170899 = ( clampResult17_g170890 - temp_output_7_0_g170899 );
				float lerpResult881_g170869 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170899 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170895 = lerpResult881_g170869;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170895 = ( temp_output_6_0_g170895 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170895 = temp_output_6_0_g170895;
				#endif
				half Overlay_VertMask801_g170869 = staticSwitch14_g170895;
				half Overlay_MaskNoise427_g170869 = 1.0;
				TVEGlobalData Data15_g170871 = Data204_g170496;
				float Out_Dummy15_g170871 = 0;
				float4 Out_CoatParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170871 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170871 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170871 = Data15_g170871.Dummy;
				Out_CoatParams15_g170871 = Data15_g170871.CoatParams;
				Out_PaintParams15_g170871 = Data15_g170871.PaintParams;
				Out_GlowParams15_g170871 = Data15_g170871.GlowParams;
				Out_AtmoParams15_g170871= Data15_g170871.AtmoParams;
				Out_FadeParams15_g170871= Data15_g170871.FadeParams;
				Out_FormParams15_g170871 = Data15_g170871.FormParams;
				Out_FlowParams15_g170871 = Data15_g170871.FlowParams;
				}
				half4 Global_AtmoParams516_g170869 = Out_AtmoParams15_g170871;
				float temp_output_6_0_g170904 = (Global_AtmoParams516_g170869).z;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170904 = ( temp_output_6_0_g170904 + ( _OverlayElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170904 = temp_output_6_0_g170904;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170869 = staticSwitch14_g170904;
				#else
				float staticSwitch705_g170869 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170869 = lerp( 1.0 , ( staticSwitch705_g170869 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170869 = lerpResult937_g170869;
				half Custom_Mask646_g170869 = 1.0;
				float temp_output_7_0_g170901 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170901 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170869 * Overlay_MaskProj457_g170869 * Overlay_MaskLuma438_g170869 * Overlay_VertMask801_g170869 * Overlay_MaskNoise427_g170869 * Overlay_MaskGlobal429_g170869 * Custom_Mask646_g170869 ) - temp_output_7_0_g170901 );
				half Overlay_Mask494_g170869 = saturate( ( ( temp_output_9_0_g170901 / ( _OverlayBlendRemap.y - temp_output_7_0_g170901 ) ) + 0.0001 ) );
				float3 lerpResult467_g170869 = lerp( Visual_Albedo127_g170869 , ( staticSwitch14_g170888 + Overlay_GlitterColor865_g170869 ) , Overlay_Mask494_g170869);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170869 = lerpResult467_g170869;
				#else
				float3 staticSwitch577_g170869 = Visual_Albedo127_g170869;
				#endif
				half3 Final_Albedo493_g170869 = staticSwitch577_g170869;
				float3 In_Albedo3_g170872 = Final_Albedo493_g170869;
				float3 In_AlbedoRaw3_g170872 = Out_AlbedoRaw4_g170870;
				half2 Visual_NormalTS535_g170869 = Out_NormalTS4_g170870;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170875) = _OverlayNormalTex;
				float localFilterTexture29_g170886 = ( 0.0 );
				SamplerState SS29_g170886 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170886 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170886 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170886 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170886 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170886 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170886 = SamplerDefault29_g170886;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170886 = SamplerDefault29_g170886;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170886 = SamplerPoint29_g170886;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170886 = SamplerLow29_g170886;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170886 = SamplerMedium29_g170886;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170886 = SamplerHigh29_g170886;
				#endif
				}
				SamplerState Sampler238_g170875 = SS29_g170886;
				float4 temp_output_37_0_g170875 = Overlay_Coords639_g170869;
				half4 Coords238_g170875 = temp_output_37_0_g170875;
				float3 temp_output_279_0_g170875 = Model_PositionWO602_g170869;
				half3 WorldPosition238_g170875 = temp_output_279_0_g170875;
				half4 localSamplePlanar2D238_g170875 = SamplePlanar2D( Texture238_g170875 , Sampler238_g170875 , Coords238_g170875 , WorldPosition238_g170875 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170875) = _OverlayNormalTex;
				SamplerState Sampler246_g170875 = SS29_g170886;
				half4 Coords246_g170875 = temp_output_37_0_g170875;
				half3 WorldPosition246_g170875 = temp_output_279_0_g170875;
				float3 temp_output_280_0_g170875 = Model_NormalWS712_g170869;
				half3 WorldNormal246_g170875 = temp_output_280_0_g170875;
				half4 localSamplePlanar3D246_g170875 = SamplePlanar3D( Texture246_g170875 , Sampler246_g170875 , Coords246_g170875 , WorldPosition246_g170875 , WorldNormal246_g170875 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170875) = _OverlayNormalTex;
				SamplerState Sampler234_g170875 = SS29_g170886;
				float4 Coords234_g170875 = temp_output_37_0_g170875;
				float3 WorldPosition234_g170875 = temp_output_279_0_g170875;
				float4 localSampleStochastic2D234_g170875 = SampleStochastic2D( Texture234_g170875 , Sampler234_g170875 , Coords234_g170875 , WorldPosition234_g170875 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170875) = _OverlayNormalTex;
				SamplerState Sampler263_g170875 = SS29_g170886;
				half4 Coords263_g170875 = temp_output_37_0_g170875;
				half3 WorldPosition263_g170875 = temp_output_279_0_g170875;
				half3 WorldNormal263_g170875 = temp_output_280_0_g170875;
				half4 localSampleStochastic3D263_g170875 = SampleStochastic3D( Texture263_g170875 , Sampler263_g170875 , Coords263_g170875 , WorldPosition263_g170875 , WorldNormal263_g170875 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170869 = localSamplePlanar2D238_g170875;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170869 = localSamplePlanar3D246_g170875;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170869 = localSampleStochastic2D234_g170875;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170869 = localSampleStochastic3D263_g170875;
				#else
				float4 staticSwitch686_g170869 = localSamplePlanar2D238_g170875;
				#endif
				half4 Normal_Packed45_g170879 = staticSwitch686_g170869;
				float2 appendResult58_g170879 = (float2(( (Normal_Packed45_g170879).x * (Normal_Packed45_g170879).w ) , (Normal_Packed45_g170879).y));
				half2 Normal_Default50_g170879 = appendResult58_g170879;
				half2 Normal_ASTC41_g170879 = (Normal_Packed45_g170879).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170879 = Normal_ASTC41_g170879;
				#else
				float2 staticSwitch38_g170879 = Normal_Default50_g170879;
				#endif
				half2 Normal_NO_DTX544_g170879 = (Normal_Packed45_g170879).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170879 = Normal_NO_DTX544_g170879;
				#else
				float2 staticSwitch37_g170879 = staticSwitch38_g170879;
				#endif
				half2 Normal_Planar45_g170878 = (staticSwitch37_g170879*2.0 + -1.0);
				float2 break71_g170878 = Normal_Planar45_g170878;
				float3 appendResult72_g170878 = (float3(break71_g170878.x , 0.0 , break71_g170878.y));
				half2 Overlay_Normal528_g170869 = (mul( ase_worldToTangent, appendResult72_g170878 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170869 = Overlay_Normal528_g170869;
				#else
				float2 staticSwitch579_g170869 = Visual_NormalTS535_g170869;
				#endif
				float2 lerpResult551_g170869 = lerp( Visual_NormalTS535_g170869 , ( staticSwitch579_g170869 * _OverlayNormalValue ) , Overlay_Mask494_g170869);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170869 = lerpResult551_g170869;
				#else
				float2 staticSwitch583_g170869 = Visual_NormalTS535_g170869;
				#endif
				half2 Final_NormalTS499_g170869 = staticSwitch583_g170869;
				float2 In_NormalTS3_g170872 = Final_NormalTS499_g170869;
				float3 In_NormalWS3_g170872 = temp_output_739_21_g170869;
				half4 Visual_Masks536_g170869 = Out_Shader4_g170870;
				float4 appendResult585_g170869 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170869 = lerp( Visual_Masks536_g170869 , appendResult585_g170869 , Overlay_Mask494_g170869);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170869 = lerpResult584_g170869;
				#else
				float4 staticSwitch586_g170869 = Visual_Masks536_g170869;
				#endif
				half4 Final_Masks482_g170869 = staticSwitch586_g170869;
				float4 In_Shader3_g170872 = Final_Masks482_g170869;
				float4 In_Emissive3_g170872 = Out_Emissive4_g170870;
				float temp_output_739_12_g170869 = Out_Grayscale4_g170870;
				float In_Grayscale3_g170872 = temp_output_739_12_g170869;
				float In_Luminosity3_g170872 = temp_output_739_15_g170869;
				float In_MultiMask3_g170872 = Out_MultiMask4_g170870;
				float In_AlphaClip3_g170872 = Out_AlphaClip4_g170870;
				float In_AlphaFade3_g170872 = Out_AlphaFade4_g170870;
				float3 In_Translucency3_g170872 = Out_Translucency4_g170870;
				half Visual_Transmission699_g170869 = Out_Transmission4_g170870;
				float lerpResult746_g170869 = lerp( Visual_Transmission699_g170869 , ( Visual_Transmission699_g170869 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170869 * Overlay_MaskNoise427_g170869 * Overlay_MaskGlobal429_g170869 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170869 = lerpResult746_g170869;
				#else
				float staticSwitch703_g170869 = Visual_Transmission699_g170869;
				#endif
				half Final_Transmission702_g170869 = staticSwitch703_g170869;
				float In_Transmission3_g170872 = Final_Transmission702_g170869;
				float In_Thickness3_g170872 = Out_Thickness4_g170870;
				float In_Diffusion3_g170872 = Out_Diffusion4_g170870;
				{
				Data3_g170872.Dummy = In_Dummy3_g170872;
				Data3_g170872.Albedo = In_Albedo3_g170872;
				Data3_g170872.AlbedoRaw = In_AlbedoRaw3_g170872;
				Data3_g170872.NormalTS = In_NormalTS3_g170872;
				Data3_g170872.NormalWS = In_NormalWS3_g170872;
				Data3_g170872.Shader = In_Shader3_g170872;
				Data3_g170872.Emissive= In_Emissive3_g170872;
				Data3_g170872.MultiMask = In_MultiMask3_g170872;
				Data3_g170872.Grayscale = In_Grayscale3_g170872;
				Data3_g170872.Luminosity = In_Luminosity3_g170872;
				Data3_g170872.AlphaClip = In_AlphaClip3_g170872;
				Data3_g170872.AlphaFade = In_AlphaFade3_g170872;
				Data3_g170872.Translucency = In_Translucency3_g170872;
				Data3_g170872.Transmission = In_Transmission3_g170872;
				Data3_g170872.Thickness = In_Thickness3_g170872;
				Data3_g170872.Diffusion = In_Diffusion3_g170872;
				}
				TVEVisualData Data4_g170907 = Data3_g170872;
				float Out_Dummy4_g170907 = 0;
				float3 Out_Albedo4_g170907 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170907 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170907 = float2( 0,0 );
				float3 Out_NormalWS4_g170907 = float3( 0,0,0 );
				float4 Out_Shader4_g170907 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170907 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170907 = 0;
				float Out_Grayscale4_g170907 = 0;
				float Out_Luminosity4_g170907 = 0;
				float Out_AlphaClip4_g170907 = 0;
				float Out_AlphaFade4_g170907 = 0;
				float3 Out_Translucency4_g170907 = float3( 0,0,0 );
				float Out_Transmission4_g170907 = 0;
				float Out_Thickness4_g170907 = 0;
				float Out_Diffusion4_g170907 = 0;
				{
				Out_Dummy4_g170907 = Data4_g170907.Dummy;
				Out_Albedo4_g170907 = Data4_g170907.Albedo;
				Out_AlbedoRaw4_g170907 = Data4_g170907.AlbedoRaw;
				Out_NormalTS4_g170907 = Data4_g170907.NormalTS;
				Out_NormalWS4_g170907 = Data4_g170907.NormalWS;
				Out_Shader4_g170907 = Data4_g170907.Shader;
				Out_Emissive4_g170907= Data4_g170907.Emissive;
				Out_MultiMask4_g170907 = Data4_g170907.MultiMask;
				Out_Grayscale4_g170907 = Data4_g170907.Grayscale;
				Out_Luminosity4_g170907= Data4_g170907.Luminosity;
				Out_AlphaClip4_g170907 = Data4_g170907.AlphaClip;
				Out_AlphaFade4_g170907 = Data4_g170907.AlphaFade;
				Out_Translucency4_g170907 = Data4_g170907.Translucency;
				Out_Transmission4_g170907 = Data4_g170907.Transmission;
				Out_Thickness4_g170907 = Data4_g170907.Thickness;
				Out_Diffusion4_g170907 = Data4_g170907.Diffusion;
				}
				half3 Visual_Albedo127_g170906 = Out_Albedo4_g170907;
				TVEGlobalData Data15_g170912 = Data204_g170496;
				float Out_Dummy15_g170912 = 0;
				float4 Out_CoatParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170912 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170912 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170912 = Data15_g170912.Dummy;
				Out_CoatParams15_g170912 = Data15_g170912.CoatParams;
				Out_PaintParams15_g170912 = Data15_g170912.PaintParams;
				Out_GlowParams15_g170912 = Data15_g170912.GlowParams;
				Out_AtmoParams15_g170912= Data15_g170912.AtmoParams;
				Out_FadeParams15_g170912= Data15_g170912.FadeParams;
				Out_FormParams15_g170912 = Data15_g170912.FormParams;
				Out_FlowParams15_g170912 = Data15_g170912.FlowParams;
				}
				half4 Global_AtmoParams516_g170906 = Out_AtmoParams15_g170912;
				float4 temp_output_6_0_g170933 = Global_AtmoParams516_g170906;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170933 = ( temp_output_6_0_g170933 + ( _WetnessElementMode * 0.0 ) );
				#else
				float4 staticSwitch14_g170933 = temp_output_6_0_g170933;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170906 = staticSwitch14_g170933;
				#else
				float4 staticSwitch663_g170906 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170906 = lerp( float2( 1,1 ) , (( staticSwitch663_g170906 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170906 = lerpResult1121_g170906;
				half Global_Wetness429_g170906 = break1123_g170906.x;
				half Wetness_Value1042_g170906 = ( _WetnessIntensityValue * Global_Wetness429_g170906 );
				TVEModelData Data15_g170918 = Data16_g170483;
				float Out_Dummy15_g170918 = 0;
				float3 Out_PositionWS15_g170918 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170918 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170918 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170918 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170918 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170918 = float3( 0,0,0 );
				float4 Out_VertexData15_g170918 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170918 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170918 = Data15_g170918.Dummy;
				Out_PositionWS15_g170918 = Data15_g170918.PositionWS;
				Out_PositionWO15_g170918 = Data15_g170918.PositionWO;
				Out_PivotWS15_g170918 = Data15_g170918.PivotWS;
				Out_PivotWO15_g170918 = Data15_g170918.PivotWO;
				Out_NormalWS15_g170918 = Data15_g170918.NormalWS;
				Out_ViewDirWS15_g170918 = Data15_g170918.ViewDirWS;
				Out_VertexData15_g170918 = Data15_g170918.VertexData;
				Out_BoundsData15_g170918 = Data15_g170918.BoundsData;
				}
				half4 Model_VertexData1030_g170906 = Out_VertexData15_g170918;
				float4 break1019_g170906 = Model_VertexData1030_g170906;
				float4 break33_g170921 = _wetness_vert_mode;
				float temp_output_30_0_g170921 = ( break1019_g170906.x * break33_g170921.x );
				float temp_output_29_0_g170921 = ( break1019_g170906.y * break33_g170921.y );
				float temp_output_31_0_g170921 = ( break1019_g170906.z * break33_g170921.z );
				float temp_output_28_0_g170921 = ( temp_output_30_0_g170921 + temp_output_29_0_g170921 + temp_output_31_0_g170921 + ( break1019_g170906.w * break33_g170921.w ) );
				float clampResult17_g170920 = clamp( temp_output_28_0_g170921 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170929 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170929 = ( clampResult17_g170920 - temp_output_7_0_g170929 );
				float lerpResult1026_g170906 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170929 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170922 = lerpResult1026_g170906;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170922 = ( temp_output_6_0_g170922 + ( _WetnessMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170922 = temp_output_6_0_g170922;
				#endif
				float temp_output_1025_0_g170906 = staticSwitch14_g170922;
				half Wetness_VertMask1024_g170906 = temp_output_1025_0_g170906;
				float temp_output_1043_0_g170906 = ( Wetness_Value1042_g170906 * Wetness_VertMask1024_g170906 );
				half Wetness_Mask866_g170906 = temp_output_1043_0_g170906;
				float4 break1083_g170906 = Model_VertexData1030_g170906;
				float4 break33_g170924 = _wetness_water_vert_mode;
				float temp_output_30_0_g170924 = ( break1083_g170906.x * break33_g170924.x );
				float temp_output_29_0_g170924 = ( break1083_g170906.y * break33_g170924.y );
				float temp_output_31_0_g170924 = ( break1083_g170906.z * break33_g170924.z );
				float temp_output_28_0_g170924 = ( temp_output_30_0_g170924 + temp_output_29_0_g170924 + temp_output_31_0_g170924 + ( break1083_g170906.w * break33_g170924.w ) );
				float clampResult17_g170923 = clamp( temp_output_28_0_g170924 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170930 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170930 = ( clampResult17_g170923 - temp_output_7_0_g170930 );
				float lerpResult1089_g170906 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170930 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170925 = lerpResult1089_g170906;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170925 = ( temp_output_6_0_g170925 + ( _WetnessWaterMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170925 = temp_output_6_0_g170925;
				#endif
				float temp_output_1091_0_g170906 = staticSwitch14_g170925;
				half Water_VertMask1094_g170906 = temp_output_1091_0_g170906;
				half4 Visual_Masks536_g170906 = Out_Shader4_g170907;
				float lerpResult1013_g170906 = lerp( 1.0 , (Visual_Masks536_g170906).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170906 = lerpResult1013_g170906;
				float clampResult17_g170919 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170906 * Water_VertMask1094_g170906 ) - Water_HeightMask782_g170906 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170932 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170932 = ( clampResult17_g170919 - temp_output_7_0_g170932 );
				half3 Model_NormalWS798_g170906 = Out_NormalWS15_g170918;
				float temp_output_786_0_g170906 = saturate( (Model_NormalWS798_g170906).y );
				half Wetness_ProjMask790_g170906 = temp_output_786_0_g170906;
				half Water_Mask760_g170906 = ( saturate( ( ( temp_output_9_0_g170932 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170906 );
				float3 lerpResult918_g170906 = lerp( Visual_Albedo127_g170906 , ( Visual_Albedo127_g170906 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170906);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170906 = lerpResult918_g170906;
				#else
				float3 staticSwitch946_g170906 = Visual_Albedo127_g170906;
				#endif
				float3 lerpResult768_g170906 = lerp( staticSwitch946_g170906 , ( staticSwitch946_g170906 * staticSwitch946_g170906 ) , _WetnessContrastValue);
				float3 lerpResult651_g170906 = lerp( Visual_Albedo127_g170906 , lerpResult768_g170906 , Wetness_Mask866_g170906);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170906 = lerpResult651_g170906;
				#else
				float3 staticSwitch577_g170906 = Visual_Albedo127_g170906;
				#endif
				half3 Final_Albedo493_g170906 = staticSwitch577_g170906;
				float3 In_Albedo3_g170908 = Final_Albedo493_g170906;
				float3 In_AlbedoRaw3_g170908 = Out_AlbedoRaw4_g170907;
				half2 Visual_Normal535_g170906 = Out_NormalTS4_g170907;
				float lerpResult877_g170906 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170906 * Water_Mask760_g170906 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170906 = ( Visual_Normal535_g170906 * lerpResult877_g170906 );
				#else
				float2 staticSwitch957_g170906 = Visual_Normal535_g170906;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170916) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170916 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170906 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170916 = appendResult924_g170906;
				half4 Coords238_g170916 = temp_output_37_0_g170916;
				half3 Model_PositionWO602_g170906 = Out_PositionWO15_g170918;
				float3 temp_output_279_0_g170916 = Model_PositionWO602_g170906;
				half3 WorldPosition238_g170916 = temp_output_279_0_g170916;
				half4 localSamplePlanar2D238_g170916 = SamplePlanar2D( Texture238_g170916 , Sampler238_g170916 , Coords238_g170916 , WorldPosition238_g170916 );
				float4 temp_output_1010_0_g170906 = localSamplePlanar2D238_g170916;
				half2 Rain_DropsNormal919_g170906 = (temp_output_1010_0_g170906).zw;
				float2 temp_output_903_0_g170906 = (Rain_DropsNormal919_g170906*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170906 = (temp_output_1010_0_g170906).xy;
				float2 lerpResult904_g170906 = lerp( temp_output_903_0_g170906 , (Rain_RingsNormal713_g170906*2.0 + -1.0) , ( Water_Mask760_g170906 * Water_Mask760_g170906 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170906 = lerpResult904_g170906;
				#else
				float2 staticSwitch960_g170906 = temp_output_903_0_g170906;
				#endif
				half2 Rain_Drops1002_g170906 = ( staticSwitch960_g170906 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170906 = Out_PositionWS15_g170918;
				half Global_Rain955_g170906 = break1123_g170906.y;
				half Rain_Value1067_g170906 = Global_Rain955_g170906;
				float4 break1097_g170906 = Model_VertexData1030_g170906;
				float4 break33_g170927 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170927 = ( break1097_g170906.x * break33_g170927.x );
				float temp_output_29_0_g170927 = ( break1097_g170906.y * break33_g170927.y );
				float temp_output_31_0_g170927 = ( break1097_g170906.z * break33_g170927.z );
				float temp_output_28_0_g170927 = ( temp_output_30_0_g170927 + temp_output_29_0_g170927 + temp_output_31_0_g170927 + ( break1097_g170906.w * break33_g170927.w ) );
				float clampResult17_g170926 = clamp( temp_output_28_0_g170927 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170931 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170931 = ( clampResult17_g170926 - temp_output_7_0_g170931 );
				float lerpResult1100_g170906 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170931 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170928 = lerpResult1100_g170906;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170928 = ( temp_output_6_0_g170928 + ( _WetnessDropsMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170928 = temp_output_6_0_g170928;
				#endif
				float temp_output_1101_0_g170906 = staticSwitch14_g170928;
				half Rain_VertMask1108_g170906 = temp_output_1101_0_g170906;
				half Rain_Mask999_g170906 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170906 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170906 * Rain_VertMask1108_g170906 );
				half2 Normal_Planar45_g170915 = ( Rain_Drops1002_g170906 * Rain_Mask999_g170906 * Wetness_ProjMask790_g170906 );
				float2 break71_g170915 = Normal_Planar45_g170915;
				float3 appendResult72_g170915 = (float3(break71_g170915.x , 0.0 , break71_g170915.y));
				half2 Wetness_Normal526_g170906 = (mul( ase_worldToTangent, appendResult72_g170915 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170906 = Wetness_Normal526_g170906;
				#else
				float2 staticSwitch583_g170906 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170906 = ( staticSwitch957_g170906 + staticSwitch583_g170906 );
				#else
				float2 staticSwitch774_g170906 = Visual_Normal535_g170906;
				#endif
				half2 Final_Normal499_g170906 = staticSwitch774_g170906;
				float2 In_NormalTS3_g170908 = Final_Normal499_g170906;
				float3 In_NormalWS3_g170908 = Out_NormalWS4_g170907;
				float4 break658_g170906 = Visual_Masks536_g170906;
				float temp_output_935_0_g170906 = ( Wetness_Mask866_g170906 * _WetnessSmoothnessValue );
				float lerpResult941_g170906 = lerp( temp_output_935_0_g170906 , 2.0 , Water_Mask760_g170906);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170906 = lerpResult941_g170906;
				#else
				float staticSwitch959_g170906 = temp_output_935_0_g170906;
				#endif
				float4 appendResult661_g170906 = (float4(break658_g170906.x , break658_g170906.y , break658_g170906.z , saturate( ( break658_g170906.w + staticSwitch959_g170906 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170906 = appendResult661_g170906;
				#else
				float4 staticSwitch586_g170906 = Visual_Masks536_g170906;
				#endif
				half4 Final_Masks482_g170906 = staticSwitch586_g170906;
				float4 In_Shader3_g170908 = Final_Masks482_g170906;
				float4 In_Emissive3_g170908 = Out_Emissive4_g170907;
				float In_Grayscale3_g170908 = Out_Grayscale4_g170907;
				float In_Luminosity3_g170908 = Out_Luminosity4_g170907;
				float In_MultiMask3_g170908 = Out_MultiMask4_g170907;
				float In_AlphaClip3_g170908 = Out_AlphaClip4_g170907;
				float In_AlphaFade3_g170908 = Out_AlphaFade4_g170907;
				float3 In_Translucency3_g170908 = Out_Translucency4_g170907;
				float In_Transmission3_g170908 = Out_Transmission4_g170907;
				float In_Thickness3_g170908 = Out_Thickness4_g170907;
				float In_Diffusion3_g170908 = Out_Diffusion4_g170907;
				{
				Data3_g170908.Dummy = In_Dummy3_g170908;
				Data3_g170908.Albedo = In_Albedo3_g170908;
				Data3_g170908.AlbedoRaw = In_AlbedoRaw3_g170908;
				Data3_g170908.NormalTS = In_NormalTS3_g170908;
				Data3_g170908.NormalWS = In_NormalWS3_g170908;
				Data3_g170908.Shader = In_Shader3_g170908;
				Data3_g170908.Emissive= In_Emissive3_g170908;
				Data3_g170908.MultiMask = In_MultiMask3_g170908;
				Data3_g170908.Grayscale = In_Grayscale3_g170908;
				Data3_g170908.Luminosity = In_Luminosity3_g170908;
				Data3_g170908.AlphaClip = In_AlphaClip3_g170908;
				Data3_g170908.AlphaFade = In_AlphaFade3_g170908;
				Data3_g170908.Translucency = In_Translucency3_g170908;
				Data3_g170908.Transmission = In_Transmission3_g170908;
				Data3_g170908.Thickness = In_Thickness3_g170908;
				Data3_g170908.Diffusion = In_Diffusion3_g170908;
				}
				TVEVisualData Data4_g170938 = Data3_g170908;
				float Out_Dummy4_g170938 = 0;
				float3 Out_Albedo4_g170938 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170938 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170938 = float2( 0,0 );
				float3 Out_NormalWS4_g170938 = float3( 0,0,0 );
				float4 Out_Shader4_g170938 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170938 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170938 = 0;
				float Out_Grayscale4_g170938 = 0;
				float Out_Luminosity4_g170938 = 0;
				float Out_AlphaClip4_g170938 = 0;
				float Out_AlphaFade4_g170938 = 0;
				float3 Out_Translucency4_g170938 = float3( 0,0,0 );
				float Out_Transmission4_g170938 = 0;
				float Out_Thickness4_g170938 = 0;
				float Out_Diffusion4_g170938 = 0;
				{
				Out_Dummy4_g170938 = Data4_g170938.Dummy;
				Out_Albedo4_g170938 = Data4_g170938.Albedo;
				Out_AlbedoRaw4_g170938 = Data4_g170938.AlbedoRaw;
				Out_NormalTS4_g170938 = Data4_g170938.NormalTS;
				Out_NormalWS4_g170938 = Data4_g170938.NormalWS;
				Out_Shader4_g170938 = Data4_g170938.Shader;
				Out_Emissive4_g170938= Data4_g170938.Emissive;
				Out_MultiMask4_g170938 = Data4_g170938.MultiMask;
				Out_Grayscale4_g170938 = Data4_g170938.Grayscale;
				Out_Luminosity4_g170938= Data4_g170938.Luminosity;
				Out_AlphaClip4_g170938 = Data4_g170938.AlphaClip;
				Out_AlphaFade4_g170938 = Data4_g170938.AlphaFade;
				Out_Translucency4_g170938 = Data4_g170938.Translucency;
				Out_Transmission4_g170938 = Data4_g170938.Transmission;
				Out_Thickness4_g170938 = Data4_g170938.Thickness;
				Out_Diffusion4_g170938 = Data4_g170938.Diffusion;
				}
				float3 In_Albedo3_g170936 = Out_Albedo4_g170938;
				float3 In_AlbedoRaw3_g170936 = Out_AlbedoRaw4_g170938;
				float2 In_NormalTS3_g170936 = Out_NormalTS4_g170938;
				float3 In_NormalWS3_g170936 = Out_NormalWS4_g170938;
				float4 In_Shader3_g170936 = Out_Shader4_g170938;
				float4 In_Emissive3_g170936 = Out_Emissive4_g170938;
				float In_Grayscale3_g170936 = Out_Grayscale4_g170938;
				float In_Luminosity3_g170936 = Out_Luminosity4_g170938;
				float temp_output_836_11_g170935 = Out_MultiMask4_g170938;
				float In_MultiMask3_g170936 = temp_output_836_11_g170935;
				half Visual_AlphaClip667_g170935 = Out_AlphaClip4_g170938;
				TVEGlobalData Data15_g170937 = Data204_g170496;
				float Out_Dummy15_g170937 = 0;
				float4 Out_CoatParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170937 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170937 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170937 = Data15_g170937.Dummy;
				Out_CoatParams15_g170937 = Data15_g170937.CoatParams;
				Out_PaintParams15_g170937 = Data15_g170937.PaintParams;
				Out_GlowParams15_g170937 = Data15_g170937.GlowParams;
				Out_AtmoParams15_g170937= Data15_g170937.AtmoParams;
				Out_FadeParams15_g170937= Data15_g170937.FadeParams;
				Out_FormParams15_g170937 = Data15_g170937.FormParams;
				Out_FlowParams15_g170937 = Data15_g170937.FlowParams;
				}
				half4 Global_FadeParams516_g170935 = Out_FadeParams15_g170937;
				float temp_output_6_0_g170948 = saturate( (Global_FadeParams516_g170935).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170948 = ( temp_output_6_0_g170948 + ( _CutoutElementMode * 0.0 ) );
				#else
				float staticSwitch14_g170948 = temp_output_6_0_g170948;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170935 = staticSwitch14_g170948;
				#else
				float staticSwitch663_g170935 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170935 = lerp( 1.0 , ( staticSwitch663_g170935 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170935 = lerpResult843_g170935;
				float lerpResult811_g170935 = lerp( 1.0 , Visual_AlphaClip667_g170935 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170935 = lerpResult811_g170935;
				TVEModelData Data15_g170939 = Data16_g170483;
				float Out_Dummy15_g170939 = 0;
				float3 Out_PositionWS15_g170939 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170939 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170939 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170939 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170939 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170939 = float3( 0,0,0 );
				float4 Out_VertexData15_g170939 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170939 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170939 = Data15_g170939.Dummy;
				Out_PositionWS15_g170939 = Data15_g170939.PositionWS;
				Out_PositionWO15_g170939 = Data15_g170939.PositionWO;
				Out_PivotWS15_g170939 = Data15_g170939.PivotWS;
				Out_PivotWO15_g170939 = Data15_g170939.PivotWO;
				Out_NormalWS15_g170939 = Data15_g170939.NormalWS;
				Out_ViewDirWS15_g170939 = Data15_g170939.ViewDirWS;
				Out_VertexData15_g170939 = Data15_g170939.VertexData;
				Out_BoundsData15_g170939 = Data15_g170939.BoundsData;
				}
				half3 Model_PositionWO602_g170935 = Out_PositionWO15_g170939;
				float4 tex3DNode60_g170942 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170935 * ( _CutoutNoiseTillingValue * 0.01 ) ) );
				float lerpResult673_g170935 = lerp( 1.0 , tex3DNode60_g170942.r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170935 = lerpResult673_g170935;
				half4 Model_VertexMasks752_g170935 = Out_VertexData15_g170939;
				float4 break755_g170935 = Model_VertexMasks752_g170935;
				float4 break33_g170940 = _cutout_vert_mode;
				float temp_output_30_0_g170940 = ( break755_g170935.x * break33_g170940.x );
				float temp_output_29_0_g170940 = ( break755_g170935.y * break33_g170940.y );
				float temp_output_31_0_g170940 = ( break755_g170935.z * break33_g170940.z );
				float temp_output_28_0_g170940 = ( temp_output_30_0_g170940 + temp_output_29_0_g170940 + temp_output_31_0_g170940 + ( break755_g170935.w * break33_g170940.w ) );
				float clampResult17_g170941 = clamp( temp_output_28_0_g170940 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170947 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170947 = ( clampResult17_g170941 - temp_output_7_0_g170947 );
				float lerpResult820_g170935 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170947 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170944 = lerpResult820_g170935;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170944 = ( temp_output_6_0_g170944 + ( _CutoutMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170944 = temp_output_6_0_g170944;
				#endif
				float temp_output_801_0_g170935 = staticSwitch14_g170944;
				half Local_VertMask766_g170935 = temp_output_801_0_g170935;
				half Visual_MultiMask671_g170935 = temp_output_836_11_g170935;
				float lerpResult683_g170935 = lerp( 1.0 , Visual_MultiMask671_g170935 , _CutoutMultiValue);
				half Local_MultiMask685_g170935 = lerpResult683_g170935;
				float lerpResult728_g170935 = lerp( Visual_AlphaClip667_g170935 , min( Visual_AlphaClip667_g170935 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170935 ) - ( Local_AlphaMask814_g170935 * Local_NoiseMask678_g170935 * Local_VertMask766_g170935 ) ) ) ) , Local_MultiMask685_g170935);
				half Local_AlphaClip784_g170935 = lerpResult728_g170935;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170935 = Local_AlphaClip784_g170935;
				#else
				float staticSwitch577_g170935 = Visual_AlphaClip667_g170935;
				#endif
				half Final_AlphaClip795_g170935 = staticSwitch577_g170935;
				float In_AlphaClip3_g170936 = Final_AlphaClip795_g170935;
				float In_AlphaFade3_g170936 = Out_AlphaFade4_g170938;
				float3 In_Translucency3_g170936 = Out_Translucency4_g170938;
				float In_Transmission3_g170936 = Out_Transmission4_g170938;
				float In_Thickness3_g170936 = Out_Thickness4_g170938;
				float In_Diffusion3_g170936 = Out_Diffusion4_g170938;
				{
				Data3_g170936.Dummy = In_Dummy3_g170936;
				Data3_g170936.Albedo = In_Albedo3_g170936;
				Data3_g170936.AlbedoRaw = In_AlbedoRaw3_g170936;
				Data3_g170936.NormalTS = In_NormalTS3_g170936;
				Data3_g170936.NormalWS = In_NormalWS3_g170936;
				Data3_g170936.Shader = In_Shader3_g170936;
				Data3_g170936.Emissive= In_Emissive3_g170936;
				Data3_g170936.MultiMask = In_MultiMask3_g170936;
				Data3_g170936.Grayscale = In_Grayscale3_g170936;
				Data3_g170936.Luminosity = In_Luminosity3_g170936;
				Data3_g170936.AlphaClip = In_AlphaClip3_g170936;
				Data3_g170936.AlphaFade = In_AlphaFade3_g170936;
				Data3_g170936.Translucency = In_Translucency3_g170936;
				Data3_g170936.Transmission = In_Transmission3_g170936;
				Data3_g170936.Thickness = In_Thickness3_g170936;
				Data3_g170936.Diffusion = In_Diffusion3_g170936;
				}
				TVEVisualData Data4_g170952 = Data3_g170936;
				float Out_Dummy4_g170952 = 0;
				float3 Out_Albedo4_g170952 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170952 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170952 = float2( 0,0 );
				float3 Out_NormalWS4_g170952 = float3( 0,0,0 );
				float4 Out_Shader4_g170952 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170952 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170952 = 0;
				float Out_Grayscale4_g170952 = 0;
				float Out_Luminosity4_g170952 = 0;
				float Out_AlphaClip4_g170952 = 0;
				float Out_AlphaFade4_g170952 = 0;
				float3 Out_Translucency4_g170952 = float3( 0,0,0 );
				float Out_Transmission4_g170952 = 0;
				float Out_Thickness4_g170952 = 0;
				float Out_Diffusion4_g170952 = 0;
				{
				Out_Dummy4_g170952 = Data4_g170952.Dummy;
				Out_Albedo4_g170952 = Data4_g170952.Albedo;
				Out_AlbedoRaw4_g170952 = Data4_g170952.AlbedoRaw;
				Out_NormalTS4_g170952 = Data4_g170952.NormalTS;
				Out_NormalWS4_g170952 = Data4_g170952.NormalWS;
				Out_Shader4_g170952 = Data4_g170952.Shader;
				Out_Emissive4_g170952= Data4_g170952.Emissive;
				Out_MultiMask4_g170952 = Data4_g170952.MultiMask;
				Out_Grayscale4_g170952 = Data4_g170952.Grayscale;
				Out_Luminosity4_g170952= Data4_g170952.Luminosity;
				Out_AlphaClip4_g170952 = Data4_g170952.AlphaClip;
				Out_AlphaFade4_g170952 = Data4_g170952.AlphaFade;
				Out_Translucency4_g170952 = Data4_g170952.Translucency;
				Out_Transmission4_g170952 = Data4_g170952.Transmission;
				Out_Thickness4_g170952 = Data4_g170952.Thickness;
				Out_Diffusion4_g170952 = Data4_g170952.Diffusion;
				}
				float3 In_Albedo3_g170953 = Out_Albedo4_g170952;
				float3 In_AlbedoRaw3_g170953 = Out_AlbedoRaw4_g170952;
				float2 In_NormalTS3_g170953 = Out_NormalTS4_g170952;
				float3 In_NormalWS3_g170953 = Out_NormalWS4_g170952;
				float4 In_Shader3_g170953 = Out_Shader4_g170952;
				float4 In_Emissive3_g170953 = Out_Emissive4_g170952;
				float In_Grayscale3_g170953 = Out_Grayscale4_g170952;
				float In_Luminosity3_g170953 = Out_Luminosity4_g170952;
				float temp_output_821_11_g170950 = Out_MultiMask4_g170952;
				float In_MultiMask3_g170953 = temp_output_821_11_g170950;
				half Visual_AlphaClip754_g170950 = Out_AlphaClip4_g170952;
				half Dither_Constant768_g170950 = _DitherConstantValue;
				half Dither_BiasProximity881_g170950 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170950 = TVE_DitherParams.w;
				float lerpResult884_g170950 = lerp( 1.0 , Dither_BiasProximity881_g170950 , Dither_BiasEnabled883_g170950);
				float temp_output_7_0_g170961 = _DitherProximityMaxValue;
				float temp_output_9_0_g170961 = ( ( distance( ase_positionWS , _WorldSpaceCameraPos ) * lerpResult884_g170950 ) - temp_output_7_0_g170961 );
				half Dither_Proximity767_g170950 = ( saturate( ( ( temp_output_9_0_g170961 / ( _DitherProximityMinValue - temp_output_7_0_g170961 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170954 = Data16_g170483;
				float Out_Dummy15_g170954 = 0;
				float3 Out_PositionWS15_g170954 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170954 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170954 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170954 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170954 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170954 = float3( 0,0,0 );
				float4 Out_VertexData15_g170954 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170954 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170954 = Data15_g170954.Dummy;
				Out_PositionWS15_g170954 = Data15_g170954.PositionWS;
				Out_PositionWO15_g170954 = Data15_g170954.PositionWO;
				Out_PivotWS15_g170954 = Data15_g170954.PivotWS;
				Out_PivotWO15_g170954 = Data15_g170954.PivotWO;
				Out_NormalWS15_g170954 = Data15_g170954.NormalWS;
				Out_ViewDirWS15_g170954 = Data15_g170954.ViewDirWS;
				Out_VertexData15_g170954 = Data15_g170954.VertexData;
				Out_BoundsData15_g170954 = Data15_g170954.BoundsData;
				}
				half3 Model_PositionWS776_g170950 = Out_PositionWS15_g170954;
				half Dither_BiasDistance882_g170950 = TVE_DitherParams.z;
				float lerpResult888_g170950 = lerp( 1.0 , Dither_BiasDistance882_g170950 , Dither_BiasEnabled883_g170950);
				float temp_output_7_0_g170962 = _DitherDistanceMinValue;
				float temp_output_9_0_g170962 = ( ( distance( Model_PositionWS776_g170950 , _WorldSpaceCameraPos ) * lerpResult888_g170950 ) - temp_output_7_0_g170962 );
				half Dither_Distance856_g170950 = ( saturate( ( ( temp_output_9_0_g170962 / ( _DitherDistanceMaxValue - temp_output_7_0_g170962 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170950 = Out_ViewDirWS15_g170954;
				float3 normalizeResult792_g170950 = normalize( cross( ddy( ase_positionWS ) , ddx( ase_positionWS ) ) );
				float dotResult778_g170950 = dot( Model_ViewDirWS845_g170950 , normalizeResult792_g170950 );
				half Dither_Glancing784_g170950 = ( saturate( ( ( 1.0 - abs( dotResult778_g170950 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170950 = max( max( max( Dither_Constant768_g170950 , Dither_Proximity767_g170950 ) , Dither_Distance856_g170950 ) , Dither_Glancing784_g170950 );
				half3 Model_PositionWO602_g170950 = Out_PositionWO15_g170954;
				float4 tex3DNode60_g170957 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( ( Model_PositionWO602_g170950 * 20.0 ) * ( _DitherNoiseTillingValue * 0.01 ) ) );
				float temp_output_809_0_g170950 = tex3DNode60_g170957.r;
				half Local_MaskNoise678_g170950 = temp_output_809_0_g170950;
				half Visual_MultiMask671_g170950 = temp_output_821_11_g170950;
				float lerpResult683_g170950 = lerp( 1.0 , Visual_MultiMask671_g170950 , _DitherMultiValue);
				half Local_MaskMulti685_g170950 = lerpResult683_g170950;
				half Custom_Mask826_g170950 = 1.0;
				float lerpResult728_g170950 = lerp( Visual_AlphaClip754_g170950 , min( Visual_AlphaClip754_g170950 , ( -0.001 - ( Dither_Value429_g170950 - Local_MaskNoise678_g170950 ) ) ) , ( Local_MaskMulti685_g170950 * Custom_Mask826_g170950 ));
				half Local_AlphaClip834_g170950 = lerpResult728_g170950;
				#ifdef TVE_DITHER
				float staticSwitch577_g170950 = Local_AlphaClip834_g170950;
				#else
				float staticSwitch577_g170950 = Visual_AlphaClip754_g170950;
				#endif
				half Final_AlphaClip493_g170950 = staticSwitch577_g170950;
				float In_AlphaClip3_g170953 = Final_AlphaClip493_g170950;
				float In_AlphaFade3_g170953 = Out_AlphaFade4_g170952;
				float3 In_Translucency3_g170953 = Out_Translucency4_g170952;
				float In_Transmission3_g170953 = Out_Transmission4_g170952;
				float In_Thickness3_g170953 = Out_Thickness4_g170952;
				float In_Diffusion3_g170953 = Out_Diffusion4_g170952;
				{
				Data3_g170953.Dummy = In_Dummy3_g170953;
				Data3_g170953.Albedo = In_Albedo3_g170953;
				Data3_g170953.AlbedoRaw = In_AlbedoRaw3_g170953;
				Data3_g170953.NormalTS = In_NormalTS3_g170953;
				Data3_g170953.NormalWS = In_NormalWS3_g170953;
				Data3_g170953.Shader = In_Shader3_g170953;
				Data3_g170953.Emissive= In_Emissive3_g170953;
				Data3_g170953.MultiMask = In_MultiMask3_g170953;
				Data3_g170953.Grayscale = In_Grayscale3_g170953;
				Data3_g170953.Luminosity = In_Luminosity3_g170953;
				Data3_g170953.AlphaClip = In_AlphaClip3_g170953;
				Data3_g170953.AlphaFade = In_AlphaFade3_g170953;
				Data3_g170953.Translucency = In_Translucency3_g170953;
				Data3_g170953.Transmission = In_Transmission3_g170953;
				Data3_g170953.Thickness = In_Thickness3_g170953;
				Data3_g170953.Diffusion = In_Diffusion3_g170953;
				}
				TVEVisualData Data4_g170975 = Data3_g170953;
				float Out_Dummy4_g170975 = 0;
				float3 Out_Albedo4_g170975 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170975 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170975 = float2( 0,0 );
				float3 Out_NormalWS4_g170975 = float3( 0,0,0 );
				float4 Out_Shader4_g170975 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170975 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170975 = 0;
				float Out_Grayscale4_g170975 = 0;
				float Out_Luminosity4_g170975 = 0;
				float Out_AlphaClip4_g170975 = 0;
				float Out_AlphaFade4_g170975 = 0;
				float3 Out_Translucency4_g170975 = float3( 0,0,0 );
				float Out_Transmission4_g170975 = 0;
				float Out_Thickness4_g170975 = 0;
				float Out_Diffusion4_g170975 = 0;
				{
				Out_Dummy4_g170975 = Data4_g170975.Dummy;
				Out_Albedo4_g170975 = Data4_g170975.Albedo;
				Out_AlbedoRaw4_g170975 = Data4_g170975.AlbedoRaw;
				Out_NormalTS4_g170975 = Data4_g170975.NormalTS;
				Out_NormalWS4_g170975 = Data4_g170975.NormalWS;
				Out_Shader4_g170975 = Data4_g170975.Shader;
				Out_Emissive4_g170975= Data4_g170975.Emissive;
				Out_MultiMask4_g170975 = Data4_g170975.MultiMask;
				Out_Grayscale4_g170975 = Data4_g170975.Grayscale;
				Out_Luminosity4_g170975= Data4_g170975.Luminosity;
				Out_AlphaClip4_g170975 = Data4_g170975.AlphaClip;
				Out_AlphaFade4_g170975 = Data4_g170975.AlphaFade;
				Out_Translucency4_g170975 = Data4_g170975.Translucency;
				Out_Transmission4_g170975 = Data4_g170975.Transmission;
				Out_Thickness4_g170975 = Data4_g170975.Thickness;
				Out_Diffusion4_g170975 = Data4_g170975.Diffusion;
				}
				float3 temp_output_297_0_g170971 = Out_Albedo4_g170975;
				float3 In_Albedo3_g170976 = temp_output_297_0_g170971;
				float3 temp_output_297_23_g170971 = Out_AlbedoRaw4_g170975;
				float3 In_AlbedoRaw3_g170976 = temp_output_297_23_g170971;
				float2 In_NormalTS3_g170976 = Out_NormalTS4_g170975;
				float3 In_NormalWS3_g170976 = Out_NormalWS4_g170975;
				float4 In_Shader3_g170976 = Out_Shader4_g170975;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170971 = Out_Emissive4_g170975;
				TVEModelData Data15_g170977 = Data16_g170483;
				float Out_Dummy15_g170977 = 0;
				float3 Out_PositionWS15_g170977 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170977 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170977 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170977 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170977 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170977 = float3( 0,0,0 );
				float4 Out_VertexData15_g170977 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170977 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170977 = Data15_g170977.Dummy;
				Out_PositionWS15_g170977 = Data15_g170977.PositionWS;
				Out_PositionWO15_g170977 = Data15_g170977.PositionWO;
				Out_PivotWS15_g170977 = Data15_g170977.PivotWS;
				Out_PivotWO15_g170977 = Data15_g170977.PivotWO;
				Out_NormalWS15_g170977 = Data15_g170977.NormalWS;
				Out_ViewDirWS15_g170977 = Data15_g170977.ViewDirWS;
				Out_VertexData15_g170977 = Data15_g170977.VertexData;
				Out_BoundsData15_g170977 = Data15_g170977.BoundsData;
				}
				half4 Model_VertexMasks216_g170971 = Out_VertexData15_g170977;
				float4 break251_g170971 = Model_VertexMasks216_g170971;
				float4 break33_g170982 = _emissive_vert_mode;
				float temp_output_30_0_g170982 = ( break251_g170971.x * break33_g170982.x );
				float temp_output_29_0_g170982 = ( break251_g170971.y * break33_g170982.y );
				float temp_output_31_0_g170982 = ( break251_g170971.z * break33_g170982.z );
				float temp_output_28_0_g170982 = ( temp_output_30_0_g170982 + temp_output_29_0_g170982 + temp_output_31_0_g170982 + ( break251_g170971.w * break33_g170982.w ) );
				float clampResult17_g170981 = clamp( temp_output_28_0_g170982 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170985 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170985 = ( clampResult17_g170981 - temp_output_7_0_g170985 );
				float lerpResult303_g170971 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170985 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170984 = lerpResult303_g170971;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170984 = ( temp_output_6_0_g170984 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170984 = temp_output_6_0_g170984;
				#endif
				half Emissive_MeshMask221_g170971 = staticSwitch14_g170984;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170973) = _EmissiveMaskTex;
				SamplerState Sampler276_g170973 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170974 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170974 = ( temp_output_6_0_g170974 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170974 = temp_output_6_0_g170974;
				#endif
				half4 Emissive_Coords167_g170971 = staticSwitch14_g170974;
				float4 temp_output_37_0_g170973 = Emissive_Coords167_g170971;
				half4 Coords276_g170973 = temp_output_37_0_g170973;
				half2 TexCoord276_g170973 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170973 = SampleMain( Texture276_g170973 , Sampler276_g170973 , Coords276_g170973 , TexCoord276_g170973 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170973) = _EmissiveMaskTex;
				SamplerState Sampler275_g170973 = sampler_Linear_Repeat;
				half4 Coords275_g170973 = temp_output_37_0_g170973;
				half2 TexCoord275_g170973 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170973 = SampleExtra( Texture275_g170973 , Sampler275_g170973 , Coords275_g170973 , TexCoord275_g170973 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170971 = localSampleMain276_g170973;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170971 = localSampleExtra275_g170973;
				#else
				float4 staticSwitch176_g170971 = localSampleMain276_g170973;
				#endif
				half4 Emissive_MaskTex201_g170971 = staticSwitch176_g170971;
				float clampResult17_g170983 = clamp( (Emissive_MaskTex201_g170971).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170986 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170986 = ( clampResult17_g170983 - temp_output_7_0_g170986 );
				float lerpResult302_g170971 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170986 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170971 = lerpResult302_g170971;
				float temp_output_279_0_g170971 = ( Emissive_MeshMask221_g170971 * Emissive_Mask103_g170971 );
				float3 appendResult293_g170971 = (float3(temp_output_279_0_g170971 , temp_output_279_0_g170971 , temp_output_279_0_g170971));
				half3 Local_EmissiveColor278_g170971 = appendResult293_g170971;
				float3 temp_output_316_0_g170971 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170972 = Data204_g170496;
				float Out_Dummy15_g170972 = 0;
				float4 Out_CoatParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170972 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g170972 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170972 = Data15_g170972.Dummy;
				Out_CoatParams15_g170972 = Data15_g170972.CoatParams;
				Out_PaintParams15_g170972 = Data15_g170972.PaintParams;
				Out_GlowParams15_g170972 = Data15_g170972.GlowParams;
				Out_AtmoParams15_g170972= Data15_g170972.AtmoParams;
				Out_FadeParams15_g170972= Data15_g170972.FadeParams;
				Out_FormParams15_g170972 = Data15_g170972.FormParams;
				Out_FlowParams15_g170972 = Data15_g170972.FlowParams;
				}
				half4 Global_GlowParams179_g170971 = Out_GlowParams15_g170972;
				float3 temp_output_6_0_g170979 = (Global_GlowParams179_g170971).xyz;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170979 = ( temp_output_6_0_g170979 + ( _EmissiveElementMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170979 = temp_output_6_0_g170979;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170971 = staticSwitch14_g170979;
				#else
				float3 staticSwitch228_g170971 = temp_output_316_0_g170971;
				#endif
				float3 lerpResult299_g170971 = lerp( float3( 1,1,1 ) , staticSwitch228_g170971 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170971 = lerpResult299_g170971;
				half3 Visual_AlbedoRaw306_g170971 = temp_output_297_23_g170971;
				float3 lerpResult307_g170971 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170971 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170971 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170971 * lerpResult307_g170971 );
				half3 Emissive_Blend260_g170971 = ( ( (Visual_Emissive255_g170971).xyz * Local_EmissiveColor278_g170971 ) * Local_EmissiveValue88_g170971 );
				float3 temp_output_3_0_g170978 = Emissive_Blend260_g170971;
				float temp_output_15_0_g170978 = _emissive_power_value;
				float3 temp_output_23_0_g170978 = ( temp_output_3_0_g170978 * temp_output_15_0_g170978 );
				half Local_EmissiveMask294_g170971 = temp_output_279_0_g170971;
				float4 appendResult295_g170971 = (float4(temp_output_23_0_g170978 , Local_EmissiveMask294_g170971));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170971 = appendResult295_g170971;
				#else
				float4 staticSwitch129_g170971 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170971 = staticSwitch129_g170971;
				float4 In_Emissive3_g170976 = Final_Emissive184_g170971;
				float In_Grayscale3_g170976 = Out_Grayscale4_g170975;
				float In_Luminosity3_g170976 = Out_Luminosity4_g170975;
				float temp_output_297_11_g170971 = Out_MultiMask4_g170975;
				float In_MultiMask3_g170976 = temp_output_297_11_g170971;
				float In_AlphaClip3_g170976 = Out_AlphaClip4_g170975;
				float In_AlphaFade3_g170976 = Out_AlphaFade4_g170975;
				float3 In_Translucency3_g170976 = Out_Translucency4_g170975;
				float In_Transmission3_g170976 = Out_Transmission4_g170975;
				float In_Thickness3_g170976 = Out_Thickness4_g170975;
				float In_Diffusion3_g170976 = Out_Diffusion4_g170975;
				{
				Data3_g170976.Dummy = In_Dummy3_g170976;
				Data3_g170976.Albedo = In_Albedo3_g170976;
				Data3_g170976.AlbedoRaw = In_AlbedoRaw3_g170976;
				Data3_g170976.NormalTS = In_NormalTS3_g170976;
				Data3_g170976.NormalWS = In_NormalWS3_g170976;
				Data3_g170976.Shader = In_Shader3_g170976;
				Data3_g170976.Emissive= In_Emissive3_g170976;
				Data3_g170976.MultiMask = In_MultiMask3_g170976;
				Data3_g170976.Grayscale = In_Grayscale3_g170976;
				Data3_g170976.Luminosity = In_Luminosity3_g170976;
				Data3_g170976.AlphaClip = In_AlphaClip3_g170976;
				Data3_g170976.AlphaFade = In_AlphaFade3_g170976;
				Data3_g170976.Translucency = In_Translucency3_g170976;
				Data3_g170976.Transmission = In_Transmission3_g170976;
				Data3_g170976.Thickness = In_Thickness3_g170976;
				Data3_g170976.Diffusion = In_Diffusion3_g170976;
				}
				TVEVisualData Data4_g171004 = Data3_g170976;
				float Out_Dummy4_g171004 = 0;
				float3 Out_Albedo4_g171004 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g171004 = float3( 0,0,0 );
				float2 Out_NormalTS4_g171004 = float2( 0,0 );
				float3 Out_NormalWS4_g171004 = float3( 0,0,0 );
				float4 Out_Shader4_g171004 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g171004 = float4( 0,0,0,0 );
				float Out_MultiMask4_g171004 = 0;
				float Out_Grayscale4_g171004 = 0;
				float Out_Luminosity4_g171004 = 0;
				float Out_AlphaClip4_g171004 = 0;
				float Out_AlphaFade4_g171004 = 0;
				float3 Out_Translucency4_g171004 = float3( 0,0,0 );
				float Out_Transmission4_g171004 = 0;
				float Out_Thickness4_g171004 = 0;
				float Out_Diffusion4_g171004 = 0;
				{
				Out_Dummy4_g171004 = Data4_g171004.Dummy;
				Out_Albedo4_g171004 = Data4_g171004.Albedo;
				Out_AlbedoRaw4_g171004 = Data4_g171004.AlbedoRaw;
				Out_NormalTS4_g171004 = Data4_g171004.NormalTS;
				Out_NormalWS4_g171004 = Data4_g171004.NormalWS;
				Out_Shader4_g171004 = Data4_g171004.Shader;
				Out_Emissive4_g171004= Data4_g171004.Emissive;
				Out_MultiMask4_g171004 = Data4_g171004.MultiMask;
				Out_Grayscale4_g171004 = Data4_g171004.Grayscale;
				Out_Luminosity4_g171004= Data4_g171004.Luminosity;
				Out_AlphaClip4_g171004 = Data4_g171004.AlphaClip;
				Out_AlphaFade4_g171004 = Data4_g171004.AlphaFade;
				Out_Translucency4_g171004 = Data4_g171004.Translucency;
				Out_Transmission4_g171004 = Data4_g171004.Transmission;
				Out_Thickness4_g171004 = Data4_g171004.Thickness;
				Out_Diffusion4_g171004 = Data4_g171004.Diffusion;
				}
				half3 Visual_Albedo199_g171003 = Out_Albedo4_g171004;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g171003 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g171003 );
				half Visual_Transmission138_g171003 = Out_Transmission4_g171004;
				half Subsurface_Value268_g171003 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g171006 = Data204_g170496;
				float Out_Dummy15_g171006 = 0;
				float4 Out_CoatParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g171006 = float4( 0,0,0,0 );
				float4 Out_FlowParams15_g171006 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g171006 = Data15_g171006.Dummy;
				Out_CoatParams15_g171006 = Data15_g171006.CoatParams;
				Out_PaintParams15_g171006 = Data15_g171006.PaintParams;
				Out_GlowParams15_g171006 = Data15_g171006.GlowParams;
				Out_AtmoParams15_g171006= Data15_g171006.AtmoParams;
				Out_FadeParams15_g171006= Data15_g171006.FadeParams;
				Out_FormParams15_g171006 = Data15_g171006.FormParams;
				Out_FlowParams15_g171006 = Data15_g171006.FlowParams;
				}
				half4 Global_GlowParams373_g171003 = Out_GlowParams15_g171006;
				float temp_output_6_0_g171009 = saturate( (Global_GlowParams373_g171003).w );
				#ifdef TVE_REGISTER
				float staticSwitch14_g171009 = ( temp_output_6_0_g171009 + ( _SubsurfaceElementMode * 0.0 ) );
				#else
				float staticSwitch14_g171009 = temp_output_6_0_g171009;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g171003 = staticSwitch14_g171009;
				#else
				float staticSwitch367_g171003 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g171003 = lerp( 1.0 , staticSwitch367_g171003 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g171003 = lerpResult403_g171003;
				float temp_output_301_11_g171003 = Out_MultiMask4_g171004;
				half Visual_MultiMask292_g171003 = temp_output_301_11_g171003;
				float lerpResult293_g171003 = lerp( 1.0 , Visual_MultiMask292_g171003 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g171003 = lerpResult293_g171003;
				half Custom_Mask363_g171003 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g171003 = ( Visual_Transmission138_g171003 * Subsurface_Value268_g171003 * Subsurface_GlobalMask369_g171003 * Subsurface_MultiMask296_g171003 * Custom_Mask363_g171003 );
				#else
				float staticSwitch345_g171003 = 0.0;
				#endif
				half Final_Transmission269_g171003 = staticSwitch345_g171003;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g171003 = ( Subsurface_Color264_g171003 * Final_Transmission269_g171003 * 10.0 );
				#else
				float3 staticSwitch348_g171003 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g171003 = staticSwitch348_g171003;
				TVEModelData Data15_g171007 = Data16_g170483;
				float Out_Dummy15_g171007 = 0;
				float3 Out_PositionWS15_g171007 = float3( 0,0,0 );
				float3 Out_PositionWO15_g171007 = float3( 0,0,0 );
				float3 Out_PivotWS15_g171007 = float3( 0,0,0 );
				float3 Out_PivotWO15_g171007 = float3( 0,0,0 );
				float3 Out_NormalWS15_g171007 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g171007 = float3( 0,0,0 );
				float4 Out_VertexData15_g171007 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g171007 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g171007 = Data15_g171007.Dummy;
				Out_PositionWS15_g171007 = Data15_g171007.PositionWS;
				Out_PositionWO15_g171007 = Data15_g171007.PositionWO;
				Out_PivotWS15_g171007 = Data15_g171007.PivotWS;
				Out_PivotWO15_g171007 = Data15_g171007.PivotWO;
				Out_NormalWS15_g171007 = Data15_g171007.NormalWS;
				Out_ViewDirWS15_g171007 = Data15_g171007.ViewDirWS;
				Out_VertexData15_g171007 = Data15_g171007.VertexData;
				Out_BoundsData15_g171007 = Data15_g171007.BoundsData;
				}
				half3 Model_ViewDirWS392_g171003 = Out_ViewDirWS15_g171007;
				float dotResult324_g171003 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g171003 );
				float saferPower323_g171003 = abs( saturate( dotResult324_g171003 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g171003 = 0.0;
				#else
				float staticSwitch330_g171003 = ( pow( saferPower323_g171003 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g171003 = staticSwitch330_g171003;
				float3 temp_output_6_0_g171008 = ( Final_Translucency254_g171003 * Mask_Subsurface_View320_g171003 );
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g171008 = ( temp_output_6_0_g171008 + ( _SubsurfaceAproxInfo * 0.0 ) );
				#else
				float3 staticSwitch14_g171008 = temp_output_6_0_g171008;
				#endif
				half3 Subsurface_Approximation333_g171003 = staticSwitch14_g171008;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g171003 = ( Visual_Albedo199_g171003 + Subsurface_Approximation333_g171003 );
				#else
				float3 staticSwitch353_g171003 = Visual_Albedo199_g171003;
				#endif
				half3 Final_Albedo312_g171003 = staticSwitch353_g171003;
				float3 In_Albedo3_g171005 = Final_Albedo312_g171003;
				float3 In_AlbedoRaw3_g171005 = Out_AlbedoRaw4_g171004;
				float2 In_NormalTS3_g171005 = Out_NormalTS4_g171004;
				float3 In_NormalWS3_g171005 = Out_NormalWS4_g171004;
				float4 In_Shader3_g171005 = Out_Shader4_g171004;
				float4 In_Emissive3_g171005 = Out_Emissive4_g171004;
				float In_Grayscale3_g171005 = Out_Grayscale4_g171004;
				float In_Luminosity3_g171005 = Out_Luminosity4_g171004;
				float In_MultiMask3_g171005 = temp_output_301_11_g171003;
				float In_AlphaClip3_g171005 = Out_AlphaClip4_g171004;
				float In_AlphaFade3_g171005 = Out_AlphaFade4_g171004;
				float3 In_Translucency3_g171005 = Final_Translucency254_g171003;
				float In_Transmission3_g171005 = Final_Transmission269_g171003;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g171003 = 0.0;
				#else
				float staticSwitch351_g171003 = 1.0;
				#endif
				half Final_Thickness275_g171003 = staticSwitch351_g171003;
				float In_Thickness3_g171005 = Final_Thickness275_g171003;
				float Final_Diffusion340_g171003 = _SubsurfaceDiffusion;
				float In_Diffusion3_g171005 = Final_Diffusion340_g171003;
				{
				Data3_g171005.Dummy = In_Dummy3_g171005;
				Data3_g171005.Albedo = In_Albedo3_g171005;
				Data3_g171005.AlbedoRaw = In_AlbedoRaw3_g171005;
				Data3_g171005.NormalTS = In_NormalTS3_g171005;
				Data3_g171005.NormalWS = In_NormalWS3_g171005;
				Data3_g171005.Shader = In_Shader3_g171005;
				Data3_g171005.Emissive= In_Emissive3_g171005;
				Data3_g171005.MultiMask = In_MultiMask3_g171005;
				Data3_g171005.Grayscale = In_Grayscale3_g171005;
				Data3_g171005.Luminosity = In_Luminosity3_g171005;
				Data3_g171005.AlphaClip = In_AlphaClip3_g171005;
				Data3_g171005.AlphaFade = In_AlphaFade3_g171005;
				Data3_g171005.Translucency = In_Translucency3_g171005;
				Data3_g171005.Transmission = In_Transmission3_g171005;
				Data3_g171005.Thickness = In_Thickness3_g171005;
				Data3_g171005.Diffusion = In_Diffusion3_g171005;
				}
				TVEVisualData Data4_g171021 = Data3_g171005;
				float Out_Dummy4_g171021 = 0;
				float3 Out_Albedo4_g171021 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g171021 = float3( 0,0,0 );
				float2 Out_NormalTS4_g171021 = float2( 0,0 );
				float3 Out_NormalWS4_g171021 = float3( 0,0,0 );
				float4 Out_Shader4_g171021 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g171021 = float4( 0,0,0,0 );
				float Out_MultiMask4_g171021 = 0;
				float Out_Grayscale4_g171021 = 0;
				float Out_Luminosity4_g171021 = 0;
				float Out_AlphaClip4_g171021 = 0;
				float Out_AlphaFade4_g171021 = 0;
				float3 Out_Translucency4_g171021 = float3( 0,0,0 );
				float Out_Transmission4_g171021 = 0;
				float Out_Thickness4_g171021 = 0;
				float Out_Diffusion4_g171021 = 0;
				{
				Out_Dummy4_g171021 = Data4_g171021.Dummy;
				Out_Albedo4_g171021 = Data4_g171021.Albedo;
				Out_AlbedoRaw4_g171021 = Data4_g171021.AlbedoRaw;
				Out_NormalTS4_g171021 = Data4_g171021.NormalTS;
				Out_NormalWS4_g171021 = Data4_g171021.NormalWS;
				Out_Shader4_g171021 = Data4_g171021.Shader;
				Out_Emissive4_g171021= Data4_g171021.Emissive;
				Out_MultiMask4_g171021 = Data4_g171021.MultiMask;
				Out_Grayscale4_g171021 = Data4_g171021.Grayscale;
				Out_Luminosity4_g171021= Data4_g171021.Luminosity;
				Out_AlphaClip4_g171021 = Data4_g171021.AlphaClip;
				Out_AlphaFade4_g171021 = Data4_g171021.AlphaFade;
				Out_Translucency4_g171021 = Data4_g171021.Translucency;
				Out_Transmission4_g171021 = Data4_g171021.Transmission;
				Out_Thickness4_g171021 = Data4_g171021.Thickness;
				Out_Diffusion4_g171021 = Data4_g171021.Diffusion;
				}
				float temp_output_3_0_g171028 = Out_AlphaClip4_g171021;
				float Alpha20_g171028 = temp_output_3_0_g171028;
				float temp_output_15_0_g171028 = 0.0;
				float Treshold20_g171028 = temp_output_15_0_g171028;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				clip(Alpha20_g171028 - Treshold20_g171028);
				#endif
				}
				
				o.Normal = fixed3( 0, 0, 1 );
				#if !defined(ASE_LIGHTING_SIMPLE)
					o.Occlusion = 1;
				#endif
				o.Alpha = saturate( ( Alpha20_g171028 * Out_AlphaFade4_g171021 ) );
				float AlphaClipThreshold = 0.5;
				float AlphaClipThresholdShadow = 0.5;

				#ifdef _ALPHATEST_SHADOW_ON
					if (unity_LightShadowBias.z != 0.0)
						clip(o.Alpha - AlphaClipThresholdShadow);
					#ifdef _ALPHATEST_ON
					else
						clip(o.Alpha - AlphaClipThreshold);
					#endif
				#else
					#ifdef _ALPHATEST_ON
						clip(o.Alpha - AlphaClipThreshold);
					#endif
				#endif

				#if defined( CAN_SKIP_VPOS )
				float2 vpos = IN.pos;
				#endif

				#ifdef UNITY_STANDARD_USE_DITHER_MASK
					half alphaRef = tex3D(_DitherMaskLOD, float3(vpos.xy*0.25,o.Alpha*0.9375)).a;
					clip(alphaRef - 0.01);
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				SHADOW_CASTER_FRAGMENT(IN)
			}
			ENDCG
		}
		
	}
	CustomEditor "TVEShaderGUICore"
	
	Fallback Off
}
/*ASEBEGIN
Version=19800
Node;AmplifyShaderEditor.FunctionNode;1285;-14592,-256;Inherit;False;Block Model;46;;170478;7ad7765e793a6714babedee0033c36e9;14,240,1,290,1,291,1,289,1,181,0,183,0,185,0,188,0,190,0,184,0,192,0,189,0,300,0,193,0;10;102;FLOAT3;0,0,0;False;163;FLOAT3;0,0,0;False;186;FLOAT3;0,0,0;False;187;FLOAT3;0,0,0;False;166;FLOAT3;0,0,0;False;164;FLOAT3;0,0,0;False;301;FLOAT3;0,0,0;False;167;FLOAT4;0,0,0,0;False;172;FLOAT4;0,0,0,0;False;175;FLOAT4;0,0,0,0;False;2;OBJECT;128;OBJECT;314
Node;AmplifyShaderEditor.RegisterLocalVarNode;1209;-14272,-192;Half;False;Model Frag;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1210;-13824,-256;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1265;-14272,-256;Half;False;Model Vert;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1211;-13568,-256;Inherit;False;Block Global;57;;170496;212e17d4006dc88449d56ce0340cb5ff;17,315,1,311,1,317,1,388,1,321,1,398,1,404,1,337,1,282,1,396,1,283,1,285,1,276,1,349,1,402,1,385,1,308,1;1;206;OBJECT;0,0,0,0;False;1;OBJECT;151
Node;AmplifyShaderEditor.GetLocalVarNode;1217;-12800,-256;Inherit;False;1265;Model Vert;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1213;-8576,-256;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1212;-13248,-256;Half;False;Global Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1279;-12544,-256;Inherit;False;Block Pivots Sub;-1;;170579;186f08b1bbe15894d9c677d50398679b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;1214;-8320,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1215;-8320,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1280;-12160,-256;Inherit;False;Block Perspective;494;;170582;df5d9c54e8e4098459ebd6b9eabbd8ca;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;1289;-8320,-256;Inherit;False;Block Main;101;;170617;b04cfed9a7b4c0841afdb49a38c282c5;5,65,1,136,1,41,1,133,1,40,1;1;225;OBJECT;0,0,0,0;False;1;OBJECT;106
Node;AmplifyShaderEditor.GetLocalVarNode;1225;-12160,-128;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1218;-7936,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1219;-7936,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1220;-7936,-256;Inherit;False;Block Layer;123;;170634;5f6a6b9e0b5515744bf8e48a9ccead1b;13,986,1,709,1,726,1,748,1,747,1,746,1,1048,1,1045,1,1053,1,1035,1,1055,1,1051,1,1008,0;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;974;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.FunctionNode;1228;-11776,-256;Inherit;False;Block Size Fade;499;;170671;467c36a7402d0274b9ad844bbc95de33;2,228,1,225,1;2;146;OBJECT;0,0,0,0;False;186;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;1290;-11776,-128;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1222;-7552,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1287;-7552,-256;Inherit;False;Block Detail;173;;170678;a5b52fdec7b855a4fba859a90e837892;13,990,1,709,1,726,1,748,1,747,1,746,1,1062,1,1057,1,1067,1,1048,1,1069,1,1065,1,1013,0;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;971;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.FunctionNode;1288;-11392,-256;Inherit;False;Block Motion;509;;170714;d9ac7ad4f0387004fb72c16019bf8392;0;2;146;OBJECT;0,0,0,0;False;212;OBJECT;0,0,0,0;False;2;OBJECT;128;FLOAT;1903
Node;AmplifyShaderEditor.GetLocalVarNode;1226;-7168,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1227;-7168,-256;Inherit;False;Block Occlusion;220;;170788;ec16733ec52362048954a75640fbe560;1,210,1;2;144;OBJECT;0,0,0,0;False;204;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.RegisterLocalVarNode;1263;-10944,-128;Half;False;Wave Mask;-1;True;1;0;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1229;-6784,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1230;-6784,-256;Inherit;False;Block Gradient;232;;170798;1f0cb348753541648acbe7a6adce694e;1,228,1;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;1274;-9472,-256;Inherit;False;1263;Wave Mask;1;0;OBJECT;;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1231;-6400,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1232;-6400,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1233;-6400,-256;Inherit;False;Block Variation;245;;170808;f25afe21028a28a4e8dee6f6da7bc1a5;0;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.FunctionNode;1282;-9216,-256;Inherit;False;Block Interp;-1;;170817;e2b225f9519c0194eaa2c47b94bb1bbc;0;4;19;FLOAT;0;False;20;FLOAT;0;False;21;FLOAT;0;False;22;FLOAT;0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;1234;-6016,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1235;-6016,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1236;-6016,-256;Inherit;False;Block Tinting;258;;170818;9f39e156ea8d89e4997ea2a1e194137e;10,352,1,416,1,414,1,407,1,400,0,334,1,336,1,339,1,355,0,344,0;4;198;OBJECT;0,0,0,0;False;223;OBJECT;0,0,0,0;False;207;OBJECT;0,0,0,0;False;346;FLOAT;1;False;1;OBJECT;204
Node;AmplifyShaderEditor.RegisterLocalVarNode;1269;-8896,-256;Half;False;Interp Data;-1;True;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.FunctionNode;1237;-5632,-256;Inherit;False;Block Dryness;288;;170842;f05795de23f951c45bb73c8b4321e4b7;10,398,1,510,0,507,1,504,1,482,0,400,1,403,1,405,1,442,0,410,0;4;279;OBJECT;0,0,0,0;False;297;OBJECT;0,0,0,0;False;281;OBJECT;0,0,0,0;False;409;FLOAT;1;False;1;OBJECT;346
Node;AmplifyShaderEditor.GetLocalVarNode;1264;-5632,-128;Inherit;False;1269;Interp Data;1;0;OBJECT;;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;1238;-5248,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1239;-5248,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1284;-5248,-256;Inherit;False;Block Highlight;0;;170866;20f1f2e205564b848b07c7637cbf0686;0;2;144;OBJECT;0,0,0,0;False;212;FLOAT4;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;1241;-4864,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1242;-4864,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1243;-4864,-256;Inherit;False;Block Overlay;321;;170869;8ae9c8285a7817844a51243251284d21;11,813,1,821,1,819,1,942,1,940,1,944,0,826,1,823,1,828,1,844,0,447,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;445;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;1244;-4480,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1245;-4480,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1246;-4480,-256;Inherit;False;Block Wetness;369;;170906;52c5a1f52507fc44e926833b126e7855;10,850,1,1124,1,1120,1,1075,1,945,1,930,1,857,1,1092,1,851,1,1107,1;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;1247;-4096,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1248;-4096,-256;Inherit;False;Block Cutout;411;;170935;866b4a5fe67e7f34085520e1bb5be2b7;7,775,1,846,1,840,1,777,1,815,1,779,1,817,1;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;1251;-3712,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1252;-3712,-256;Inherit;False;Block Dithering;430;;170950;c7e02d28445e979479d493926695e6f3;6,843,1,859,1,844,1,827,1,879,0,825,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;824;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode;1250;-3712,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1249;-11008,-256;Inherit;False;Block Transform;-1;;170963;5ac6202bdddd8b34a85c261af6b8de8b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;1255;-3328,-256;Inherit;False;Block Emissive;450;;170971;64497f287b9096b43b688b52b4a0bf20;6,282,0,273,1,319,1,312,1,264,1,267,1;3;146;OBJECT;0,0,0,0;False;148;OBJECT;0,0,0,0;False;178;OBJECT;0,0,0,0;False;1;OBJECT;183
Node;AmplifyShaderEditor.GetLocalVarNode;1254;-3328,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1267;-3328,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;1253;-10624,-256;Inherit;False;Block Normal;556;;170987;87f7defafe56dbf4b954caf5efc3f5ca;4,1713,0,1693,1,1700,0,1638,0;2;146;OBJECT;0,0,0,0;False;1631;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;1257;-2944,-256;Inherit;False;Block Subsurface;474;;171003;d738d295ada6b1f409db6776b5efe789;5,315,1,413,1,411,1,359,1,362,0;4;146;OBJECT;0,0,0,0;False;385;OBJECT;0,0,0,0;False;371;OBJECT;0,0,0,0;False;361;FLOAT;1;False;1;OBJECT;183
Node;AmplifyShaderEditor.FunctionNode;1283;-10240,-256;Inherit;False;Block Pivots Add;-1;;171011;016babe9e3e643242aa4d123a988150c;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.RegisterLocalVarNode;1258;-2624,-256;Half;False;Visual Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;1266;-9920,-256;Half;False;Model Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1259;-1920,-256;Inherit;False;1258;Visual Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;1260;-1920,-192;Inherit;False;1266;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RangedFloatNode;1171;-1920,-512;Half;False;Property;_render_cull;_render_cull;577;1;[HideInInspector];Create;True;0;3;Both;0;Back;1;Front;2;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1172;-1728,-512;Half;False;Property;_render_src;_render_src;578;1;[HideInInspector];Create;True;0;0;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1173;-1536,-512;Half;False;Property;_render_dst;_render_dst;579;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1174;-1344,-512;Half;False;Property;_render_zw;_render_zw;580;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;1175;-640,-512;Inherit;False;Base Compile;-1;;171014;e67c8238031dbf04ab79a5d4d63d1b4f;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1176;-1152,-512;Half;False;Property;_render_coverage;_render_coverage;581;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1177;-1920,-640;Half;False;Property;_IsGeneralShader;_IsGeneralShader;582;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;1178;-1696,-640;Half;False;Property;_IsSimpleShader;_IsSimpleShader;583;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;1261;-1664,-256;Inherit;False;Block Render;2;;171015;a46c8f81ec84cc34b8c5bbba7c174e1d;0;3;17;OBJECT;;False;19;OBJECT;;False;125;FLOAT;0;False;20;FLOAT3;21;FLOAT3;22;FLOAT3;34;FLOAT3;77;FLOAT;26;FLOAT;27;FLOAT;108;FLOAT;109;FLOAT;72;FLOAT;28;FLOAT;71;FLOAT3;65;FLOAT;66;FLOAT;67;FLOAT;68;FLOAT;73;FLOAT3;37;FLOAT3;30;FLOAT3;32;FLOAT4;33
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1180;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ExtraPrePass;0;0;ExtraPrePass;6;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;True;True;0;False;;0;False;;True;1;LightMode=ForwardBase;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1182;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ForwardAdd;0;2;ForwardAdd;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;True;4;1;False;;1;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;True;1;LightMode=ForwardAdd;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1183;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Deferred;0;3;Deferred;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Deferred;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1184;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Meta;0;4;Meta;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Meta;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1185;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ShadowCaster;0;5;ShadowCaster;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;1;LightMode=ShadowCaster;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;1181;-1120,-256;Float;False;True;-1;2;TVEShaderGUICore;0;15;BOXOPHOBIC/The Visual Engine/Geometry/General Simple Lit;28cd5599e02859647ae1798e4fcaef6c;True;ForwardBase;0;1;ForwardBase;20;True;True;1;0;True;_render_src;0;True;_render_dst;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;True;True;2;True;_render_cull;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;True;True;1;True;_render_zw;True;0;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;5;False;0;True;True;1;1;True;_render_src;0;True;_render_dst;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=ForwardBase;False;False;0;;0;0;Standard;42;Category;0;0;Workflow;2;638507966350037256;Surface;0;0;  Blend;0;0;  Refraction Model;0;0;  Dither Shadows;1;0;Two Sided;0;638507966389794542;Deferred Pass;0;638541444818398171;Transmission;0;0;  Transmission Shadow;0.5,False,;0;Translucency;0;0;  Translucency Strength;1,False,;0;  Normal Distortion;0.5,False,;0;  Scattering;2,False,;0;  Direct;0.9,False,;0;  Ambient;0.1,False,;0;  Shadow;0.5,False,;0;Cast Shadows;1;0;  Use Shadow Threshold;0;0;Receive Shadows;1;0;Receive Specular;1;0;GPU Instancing;1;0;LOD CrossFade;1;0;Built-in Fog;1;0;Ambient Light;1;0;Meta Pass;1;0;Add Pass;1;0;Override Baked GI;0;0;Extra Pre Pass;0;0;Tessellation;0;0;  Phong;0;0;  Strength;0.5,False,;0;  Type;0;0;  Tess;16,False,;0;  Min;10,False,;0;  Max;25,False,;0;  Edge Length;16,False,;0;  Max Displacement;25,False,;0;Fwd Specular Highlights Toggle;0;0;Fwd Reflections Toggle;0;0;Disable Batching;0;0;Vertex Position,InvertActionOnDeselection;0;638507966500833844;0;6;False;True;True;False;True;True;False;;True;0
WireConnection;1209;0;1285;314
WireConnection;1265;0;1285;128
WireConnection;1211;206;1210;0
WireConnection;1212;0;1211;151
WireConnection;1279;146;1217;0
WireConnection;1280;146;1279;128
WireConnection;1289;225;1213;0
WireConnection;1220;585;1289;106
WireConnection;1220;633;1214;0
WireConnection;1220;974;1215;0
WireConnection;1228;146;1280;128
WireConnection;1228;186;1225;0
WireConnection;1287;585;1220;552
WireConnection;1287;633;1218;0
WireConnection;1287;971;1219;0
WireConnection;1288;146;1228;128
WireConnection;1288;212;1290;0
WireConnection;1227;144;1287;552
WireConnection;1227;204;1222;0
WireConnection;1263;0;1288;1903
WireConnection;1230;144;1227;116
WireConnection;1230;222;1226;0
WireConnection;1233;144;1230;116
WireConnection;1233;222;1229;0
WireConnection;1282;22;1274;0
WireConnection;1236;198;1233;116
WireConnection;1236;223;1232;0
WireConnection;1236;207;1231;0
WireConnection;1269;0;1282;0
WireConnection;1237;279;1236;204
WireConnection;1237;297;1235;0
WireConnection;1237;281;1234;0
WireConnection;1284;144;1237;346
WireConnection;1284;212;1264;0
WireConnection;1243;572;1284;116
WireConnection;1243;596;1238;0
WireConnection;1243;600;1239;0
WireConnection;1246;572;1243;566
WireConnection;1246;596;1242;0
WireConnection;1246;600;1241;0
WireConnection;1248;572;1246;566
WireConnection;1248;596;1245;0
WireConnection;1248;600;1244;0
WireConnection;1252;572;1248;566
WireConnection;1252;596;1247;0
WireConnection;1249;146;1288;128
WireConnection;1255;146;1252;566
WireConnection;1255;148;1250;0
WireConnection;1255;178;1251;0
WireConnection;1253;146;1249;128
WireConnection;1257;146;1255;183
WireConnection;1257;385;1267;0
WireConnection;1257;371;1254;0
WireConnection;1283;146;1253;128
WireConnection;1258;0;1257;183
WireConnection;1266;0;1283;128
WireConnection;1261;17;1259;0
WireConnection;1261;19;1260;0
WireConnection;1181;0;1261;21
WireConnection;1181;1;1261;22
WireConnection;1181;2;1261;34
WireConnection;1181;20;1261;108
WireConnection;1181;21;1261;109
WireConnection;1181;7;1261;28
WireConnection;1181;15;1261;30
WireConnection;1181;16;1261;32
WireConnection;1181;17;1261;33
ASEEND*/
//CHKSM=99C82BB02227DBC45C8DE507CAAC697CAAFAABB5
